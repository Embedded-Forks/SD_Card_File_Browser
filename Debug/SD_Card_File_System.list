
SD_Card_File_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002d5c0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c8c  0802d788  0802d788  0003d788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08031414  08031414  0005141c  2**0
                  CONTENTS
  4 .ARM          00000008  08031414  08031414  00041414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803141c  0803141c  0005141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803141c  0803141c  0004141c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08031420  08031420  00041420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000141c  20000000  08031424  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00021564  2000141c  08032840  0005141c  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20022980  08032840  00052980  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0005141c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00065fe4  00000000  00000000  0005144c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000ac01  00000000  00000000  000b7430  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000037a0  00000000  00000000  000c2038  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003678  00000000  00000000  000c57d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f528  00000000  00000000  000c8e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000422ff  00000000  00000000  000d8378  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010759a  00000000  00000000  0011a677  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00221c11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e800  00000000  00000000  00221c8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000141c 	.word	0x2000141c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0802d770 	.word	0x0802d770

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20001420 	.word	0x20001420
 8000204:	0802d770 	.word	0x0802d770

08000208 <strcmp>:
 8000208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000210:	2a01      	cmp	r2, #1
 8000212:	bf28      	it	cs
 8000214:	429a      	cmpcs	r2, r3
 8000216:	d0f7      	beq.n	8000208 <strcmp>
 8000218:	1ad0      	subs	r0, r2, r3
 800021a:	4770      	bx	lr

0800021c <strlen>:
 800021c:	4603      	mov	r3, r0
 800021e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000222:	2a00      	cmp	r2, #0
 8000224:	d1fb      	bne.n	800021e <strlen+0x2>
 8000226:	1a18      	subs	r0, r3, r0
 8000228:	3801      	subs	r0, #1
 800022a:	4770      	bx	lr

0800022c <__aeabi_uldivmod>:
 800022c:	b953      	cbnz	r3, 8000244 <__aeabi_uldivmod+0x18>
 800022e:	b94a      	cbnz	r2, 8000244 <__aeabi_uldivmod+0x18>
 8000230:	2900      	cmp	r1, #0
 8000232:	bf08      	it	eq
 8000234:	2800      	cmpeq	r0, #0
 8000236:	bf1c      	itt	ne
 8000238:	f04f 31ff 	movne.w	r1, #4294967295
 800023c:	f04f 30ff 	movne.w	r0, #4294967295
 8000240:	f000 b972 	b.w	8000528 <__aeabi_idiv0>
 8000244:	f1ad 0c08 	sub.w	ip, sp, #8
 8000248:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000258:	b004      	add	sp, #16
 800025a:	4770      	bx	lr

0800025c <__udivmoddi4>:
 800025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000260:	9e08      	ldr	r6, [sp, #32]
 8000262:	4604      	mov	r4, r0
 8000264:	4688      	mov	r8, r1
 8000266:	2b00      	cmp	r3, #0
 8000268:	d14b      	bne.n	8000302 <__udivmoddi4+0xa6>
 800026a:	428a      	cmp	r2, r1
 800026c:	4615      	mov	r5, r2
 800026e:	d967      	bls.n	8000340 <__udivmoddi4+0xe4>
 8000270:	fab2 f282 	clz	r2, r2
 8000274:	b14a      	cbz	r2, 800028a <__udivmoddi4+0x2e>
 8000276:	f1c2 0720 	rsb	r7, r2, #32
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	fa20 f707 	lsr.w	r7, r0, r7
 8000282:	4095      	lsls	r5, r2
 8000284:	ea47 0803 	orr.w	r8, r7, r3
 8000288:	4094      	lsls	r4, r2
 800028a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800028e:	0c23      	lsrs	r3, r4, #16
 8000290:	fbb8 f7fe 	udiv	r7, r8, lr
 8000294:	fa1f fc85 	uxth.w	ip, r5
 8000298:	fb0e 8817 	mls	r8, lr, r7, r8
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	fb07 f10c 	mul.w	r1, r7, ip
 80002a4:	4299      	cmp	r1, r3
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x60>
 80002a8:	18eb      	adds	r3, r5, r3
 80002aa:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ae:	f080 811b 	bcs.w	80004e8 <__udivmoddi4+0x28c>
 80002b2:	4299      	cmp	r1, r3
 80002b4:	f240 8118 	bls.w	80004e8 <__udivmoddi4+0x28c>
 80002b8:	3f02      	subs	r7, #2
 80002ba:	442b      	add	r3, r5
 80002bc:	1a5b      	subs	r3, r3, r1
 80002be:	b2a4      	uxth	r4, r4
 80002c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002cc:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d0:	45a4      	cmp	ip, r4
 80002d2:	d909      	bls.n	80002e8 <__udivmoddi4+0x8c>
 80002d4:	192c      	adds	r4, r5, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8107 	bcs.w	80004ec <__udivmoddi4+0x290>
 80002de:	45a4      	cmp	ip, r4
 80002e0:	f240 8104 	bls.w	80004ec <__udivmoddi4+0x290>
 80002e4:	3802      	subs	r0, #2
 80002e6:	442c      	add	r4, r5
 80002e8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ec:	eba4 040c 	sub.w	r4, r4, ip
 80002f0:	2700      	movs	r7, #0
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa0>
 80002f4:	40d4      	lsrs	r4, r2
 80002f6:	2300      	movs	r3, #0
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	4639      	mov	r1, r7
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d909      	bls.n	800031a <__udivmoddi4+0xbe>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80eb 	beq.w	80004e2 <__udivmoddi4+0x286>
 800030c:	2700      	movs	r7, #0
 800030e:	e9c6 0100 	strd	r0, r1, [r6]
 8000312:	4638      	mov	r0, r7
 8000314:	4639      	mov	r1, r7
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	fab3 f783 	clz	r7, r3
 800031e:	2f00      	cmp	r7, #0
 8000320:	d147      	bne.n	80003b2 <__udivmoddi4+0x156>
 8000322:	428b      	cmp	r3, r1
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xd0>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 80fa 	bhi.w	8000520 <__udivmoddi4+0x2c4>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb61 0303 	sbc.w	r3, r1, r3
 8000332:	2001      	movs	r0, #1
 8000334:	4698      	mov	r8, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d0e0      	beq.n	80002fc <__udivmoddi4+0xa0>
 800033a:	e9c6 4800 	strd	r4, r8, [r6]
 800033e:	e7dd      	b.n	80002fc <__udivmoddi4+0xa0>
 8000340:	b902      	cbnz	r2, 8000344 <__udivmoddi4+0xe8>
 8000342:	deff      	udf	#255	; 0xff
 8000344:	fab2 f282 	clz	r2, r2
 8000348:	2a00      	cmp	r2, #0
 800034a:	f040 808f 	bne.w	800046c <__udivmoddi4+0x210>
 800034e:	1b49      	subs	r1, r1, r5
 8000350:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000354:	fa1f f885 	uxth.w	r8, r5
 8000358:	2701      	movs	r7, #1
 800035a:	fbb1 fcfe 	udiv	ip, r1, lr
 800035e:	0c23      	lsrs	r3, r4, #16
 8000360:	fb0e 111c 	mls	r1, lr, ip, r1
 8000364:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000368:	fb08 f10c 	mul.w	r1, r8, ip
 800036c:	4299      	cmp	r1, r3
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x124>
 8000370:	18eb      	adds	r3, r5, r3
 8000372:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x122>
 8000378:	4299      	cmp	r1, r3
 800037a:	f200 80cd 	bhi.w	8000518 <__udivmoddi4+0x2bc>
 800037e:	4684      	mov	ip, r0
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	b2a3      	uxth	r3, r4
 8000384:	fbb1 f0fe 	udiv	r0, r1, lr
 8000388:	fb0e 1410 	mls	r4, lr, r0, r1
 800038c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000390:	fb08 f800 	mul.w	r8, r8, r0
 8000394:	45a0      	cmp	r8, r4
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0x14c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x14a>
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	f200 80b6 	bhi.w	8000512 <__udivmoddi4+0x2b6>
 80003a6:	4618      	mov	r0, r3
 80003a8:	eba4 0408 	sub.w	r4, r4, r8
 80003ac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b0:	e79f      	b.n	80002f2 <__udivmoddi4+0x96>
 80003b2:	f1c7 0c20 	rsb	ip, r7, #32
 80003b6:	40bb      	lsls	r3, r7
 80003b8:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003bc:	ea4e 0e03 	orr.w	lr, lr, r3
 80003c0:	fa01 f407 	lsl.w	r4, r1, r7
 80003c4:	fa20 f50c 	lsr.w	r5, r0, ip
 80003c8:	fa21 f30c 	lsr.w	r3, r1, ip
 80003cc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003d0:	4325      	orrs	r5, r4
 80003d2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003d6:	0c2c      	lsrs	r4, r5, #16
 80003d8:	fb08 3319 	mls	r3, r8, r9, r3
 80003dc:	fa1f fa8e 	uxth.w	sl, lr
 80003e0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e4:	fb09 f40a 	mul.w	r4, r9, sl
 80003e8:	429c      	cmp	r4, r3
 80003ea:	fa02 f207 	lsl.w	r2, r2, r7
 80003ee:	fa00 f107 	lsl.w	r1, r0, r7
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b0>
 80003f4:	eb1e 0303 	adds.w	r3, lr, r3
 80003f8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003fc:	f080 8087 	bcs.w	800050e <__udivmoddi4+0x2b2>
 8000400:	429c      	cmp	r4, r3
 8000402:	f240 8084 	bls.w	800050e <__udivmoddi4+0x2b2>
 8000406:	f1a9 0902 	sub.w	r9, r9, #2
 800040a:	4473      	add	r3, lr
 800040c:	1b1b      	subs	r3, r3, r4
 800040e:	b2ad      	uxth	r5, r5
 8000410:	fbb3 f0f8 	udiv	r0, r3, r8
 8000414:	fb08 3310 	mls	r3, r8, r0, r3
 8000418:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800041c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000420:	45a2      	cmp	sl, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1da>
 8000424:	eb1e 0404 	adds.w	r4, lr, r4
 8000428:	f100 33ff 	add.w	r3, r0, #4294967295
 800042c:	d26b      	bcs.n	8000506 <__udivmoddi4+0x2aa>
 800042e:	45a2      	cmp	sl, r4
 8000430:	d969      	bls.n	8000506 <__udivmoddi4+0x2aa>
 8000432:	3802      	subs	r0, #2
 8000434:	4474      	add	r4, lr
 8000436:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800043a:	fba0 8902 	umull	r8, r9, r0, r2
 800043e:	eba4 040a 	sub.w	r4, r4, sl
 8000442:	454c      	cmp	r4, r9
 8000444:	46c2      	mov	sl, r8
 8000446:	464b      	mov	r3, r9
 8000448:	d354      	bcc.n	80004f4 <__udivmoddi4+0x298>
 800044a:	d051      	beq.n	80004f0 <__udivmoddi4+0x294>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2c8>
 8000450:	ebb1 050a 	subs.w	r5, r1, sl
 8000454:	eb64 0403 	sbc.w	r4, r4, r3
 8000458:	fa04 fc0c 	lsl.w	ip, r4, ip
 800045c:	40fd      	lsrs	r5, r7
 800045e:	40fc      	lsrs	r4, r7
 8000460:	ea4c 0505 	orr.w	r5, ip, r5
 8000464:	e9c6 5400 	strd	r5, r4, [r6]
 8000468:	2700      	movs	r7, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa0>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f703 	lsr.w	r7, r0, r3
 8000474:	4095      	lsls	r5, r2
 8000476:	fa01 f002 	lsl.w	r0, r1, r2
 800047a:	fa21 f303 	lsr.w	r3, r1, r3
 800047e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000482:	4338      	orrs	r0, r7
 8000484:	0c01      	lsrs	r1, r0, #16
 8000486:	fbb3 f7fe 	udiv	r7, r3, lr
 800048a:	fa1f f885 	uxth.w	r8, r5
 800048e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000496:	fb07 f308 	mul.w	r3, r7, r8
 800049a:	428b      	cmp	r3, r1
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x256>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f107 3cff 	add.w	ip, r7, #4294967295
 80004a8:	d22f      	bcs.n	800050a <__udivmoddi4+0x2ae>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d92d      	bls.n	800050a <__udivmoddi4+0x2ae>
 80004ae:	3f02      	subs	r7, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1acb      	subs	r3, r1, r3
 80004b4:	b281      	uxth	r1, r0
 80004b6:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ba:	fb0e 3310 	mls	r3, lr, r0, r3
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb00 f308 	mul.w	r3, r0, r8
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x27e>
 80004ca:	1869      	adds	r1, r5, r1
 80004cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d0:	d217      	bcs.n	8000502 <__udivmoddi4+0x2a6>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d915      	bls.n	8000502 <__udivmoddi4+0x2a6>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4429      	add	r1, r5
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004e0:	e73b      	b.n	800035a <__udivmoddi4+0xfe>
 80004e2:	4637      	mov	r7, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e709      	b.n	80002fc <__udivmoddi4+0xa0>
 80004e8:	4607      	mov	r7, r0
 80004ea:	e6e7      	b.n	80002bc <__udivmoddi4+0x60>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fb      	b.n	80002e8 <__udivmoddi4+0x8c>
 80004f0:	4541      	cmp	r1, r8
 80004f2:	d2ab      	bcs.n	800044c <__udivmoddi4+0x1f0>
 80004f4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004f8:	eb69 020e 	sbc.w	r2, r9, lr
 80004fc:	3801      	subs	r0, #1
 80004fe:	4613      	mov	r3, r2
 8000500:	e7a4      	b.n	800044c <__udivmoddi4+0x1f0>
 8000502:	4660      	mov	r0, ip
 8000504:	e7e9      	b.n	80004da <__udivmoddi4+0x27e>
 8000506:	4618      	mov	r0, r3
 8000508:	e795      	b.n	8000436 <__udivmoddi4+0x1da>
 800050a:	4667      	mov	r7, ip
 800050c:	e7d1      	b.n	80004b2 <__udivmoddi4+0x256>
 800050e:	4681      	mov	r9, r0
 8000510:	e77c      	b.n	800040c <__udivmoddi4+0x1b0>
 8000512:	3802      	subs	r0, #2
 8000514:	442c      	add	r4, r5
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0x14c>
 8000518:	f1ac 0c02 	sub.w	ip, ip, #2
 800051c:	442b      	add	r3, r5
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x124>
 8000520:	4638      	mov	r0, r7
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xda>
 8000524:	4637      	mov	r7, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa0>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <File_Init>:
extern char SDPath[4];

/* tested, working correctly */

void File_Init(file_manager_t *file_manage)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	MX_SDMMC1_SD_Init();
 8000534:	f000 ff0a 	bl	800134c <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 8000538:	f02a f86c 	bl	802a614 <MX_FATFS_Init>
	file_manage->file_result = f_mount(&file_manage->drive_handler, SDPath, 0);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2200      	movs	r2, #0
 8000540:	490c      	ldr	r1, [pc, #48]	; (8000574 <File_Init+0x48>)
 8000542:	4618      	mov	r0, r3
 8000544:	f02c fc7e 	bl	802ce44 <f_mount>
 8000548:	4603      	mov	r3, r0
 800054a:	4619      	mov	r1, r3
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	f241 036c 	movw	r3, #4204	; 0x106c
 8000552:	4413      	add	r3, r2
 8000554:	460a      	mov	r2, r1
 8000556:	701a      	strb	r2, [r3, #0]
	file_manage->file_disk_status =  BSP_SD_IsDetected();
 8000558:	f02a f8f6 	bl	802a748 <BSP_SD_IsDetected>
 800055c:	4603      	mov	r3, r0
 800055e:	4619      	mov	r1, r3
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	f241 036d 	movw	r3, #4205	; 0x106d
 8000566:	4413      	add	r3, r2
 8000568:	460a      	mov	r2, r1
 800056a:	701a      	strb	r2, [r3, #0]
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20021910 	.word	0x20021910

08000578 <File_Create_Dir>:
}

/* Will be tested */

void File_Create_Dir(file_manager_t *file_manage,const TCHAR *dir)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
	file_manage->file_result = f_mkdir(dir);
 8000582:	6838      	ldr	r0, [r7, #0]
 8000584:	f02c fe2d 	bl	802d1e2 <f_mkdir>
 8000588:	4603      	mov	r3, r0
 800058a:	4619      	mov	r1, r3
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	f241 036c 	movw	r3, #4204	; 0x106c
 8000592:	4413      	add	r3, r2
 8000594:	460a      	mov	r2, r1
 8000596:	701a      	strb	r2, [r3, #0]

}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <File_Change_Dir>:

/* Will be tested */

void File_Change_Dir(file_manager_t *file_manage,const TCHAR *dir)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
	file_manage->file_result = f_chdir(dir);
 80005aa:	6838      	ldr	r0, [r7, #0]
 80005ac:	f02c fc90 	bl	802ced0 <f_chdir>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4619      	mov	r1, r3
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	f241 036c 	movw	r3, #4204	; 0x106c
 80005ba:	4413      	add	r3, r2
 80005bc:	460a      	mov	r2, r1
 80005be:	701a      	strb	r2, [r3, #0]

	file_manage->file_disk_status =  BSP_SD_IsDetected();
 80005c0:	f02a f8c2 	bl	802a748 <BSP_SD_IsDetected>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4619      	mov	r1, r3
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	f241 036d 	movw	r3, #4205	; 0x106d
 80005ce:	4413      	add	r3, r2
 80005d0:	460a      	mov	r2, r1
 80005d2:	701a      	strb	r2, [r3, #0]
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <File_Get_Dir>:

/* Will be tested */

void File_Get_Dir(file_manager_t *file_manage)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	file_manage->file_result = f_getcwd(file_manage->file_current_dir, strlen(file_manage->file_current_dir));
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f503 5496 	add.w	r4, r3, #4800	; 0x12c0
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fe13 	bl	800021c <strlen>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4619      	mov	r1, r3
 80005fa:	4620      	mov	r0, r4
 80005fc:	f02c fcc3 	bl	802cf86 <f_getcwd>
 8000600:	4603      	mov	r3, r0
 8000602:	4619      	mov	r1, r3
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	f241 036c 	movw	r3, #4204	; 0x106c
 800060a:	4413      	add	r3, r2
 800060c:	460a      	mov	r2, r1
 800060e:	701a      	strb	r2, [r3, #0]

	file_manage->file_disk_status =  BSP_SD_IsDetected();
 8000610:	f02a f89a 	bl	802a748 <BSP_SD_IsDetected>
 8000614:	4603      	mov	r3, r0
 8000616:	4619      	mov	r1, r3
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	f241 036d 	movw	r3, #4205	; 0x106d
 800061e:	4413      	add	r3, r2
 8000620:	460a      	mov	r2, r1
 8000622:	701a      	strb	r2, [r3, #0]
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	bd90      	pop	{r4, r7, pc}

0800062c <SDRAM_Init>:
static void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *sdram_handle, FMC_SDRAM_CommandTypeDef *command);

SDRAM_HandleTypeDef hsdram1;

void SDRAM_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08c      	sub	sp, #48	; 0x30
 8000630:	af00      	add	r7, sp, #0


	FMC_SDRAM_CommandTypeDef   command;
    FMC_SDRAM_TimingTypeDef    SdramTiming = {0};
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
 8000640:	615a      	str	r2, [r3, #20]
 8000642:	619a      	str	r2, [r3, #24]

  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000644:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <SDRAM_Init+0x9c>)
 8000646:	4a21      	ldr	r2, [pc, #132]	; (80006cc <SDRAM_Init+0xa0>)
 8000648:	601a      	str	r2, [r3, #0]

  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <SDRAM_Init+0x9c>)
 800064c:	2200      	movs	r2, #0
 800064e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000650:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <SDRAM_Init+0x9c>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <SDRAM_Init+0x9c>)
 8000658:	2204      	movs	r2, #4
 800065a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <SDRAM_Init+0x9c>)
 800065e:	2210      	movs	r2, #16
 8000660:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8000662:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <SDRAM_Init+0x9c>)
 8000664:	2200      	movs	r2, #0
 8000666:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000668:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <SDRAM_Init+0x9c>)
 800066a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800066e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000670:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <SDRAM_Init+0x9c>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <SDRAM_Init+0x9c>)
 8000678:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800067c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <SDRAM_Init+0x9c>)
 8000680:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000684:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <SDRAM_Init+0x9c>)
 8000688:	2200      	movs	r2, #0
 800068a:	629a      	str	r2, [r3, #40]	; 0x28


  SdramTiming.LoadToActiveDelay = 2;
 800068c:	2302      	movs	r3, #2
 800068e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000690:	2306      	movs	r3, #6
 8000692:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000694:	2304      	movs	r3, #4
 8000696:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8000698:	2306      	movs	r3, #6
 800069a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	61fb      	str	r3, [r7, #28]

  HAL_SDRAM_Init(&hsdram1, &SdramTiming);
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4619      	mov	r1, r3
 80006ac:	4806      	ldr	r0, [pc, #24]	; (80006c8 <SDRAM_Init+0x9c>)
 80006ae:	f028 fe3f 	bl	8029330 <HAL_SDRAM_Init>

  SDRAM_Initialization_Sequence(&hsdram1, &command);
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	4619      	mov	r1, r3
 80006b8:	4803      	ldr	r0, [pc, #12]	; (80006c8 <SDRAM_Init+0x9c>)
 80006ba:	f000 f809 	bl	80006d0 <SDRAM_Initialization_Sequence>

}
 80006be:	bf00      	nop
 80006c0:	3730      	adds	r7, #48	; 0x30
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200214d4 	.word	0x200214d4
 80006cc:	a0000140 	.word	0xa0000140

080006d0 <SDRAM_Initialization_Sequence>:

static void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *sdram_handle, FMC_SDRAM_CommandTypeDef *command)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd;

  command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	2201      	movs	r2, #1
 80006de:	601a      	str	r2, [r3, #0]
  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	2210      	movs	r2, #16
 80006e4:	605a      	str	r2, [r3, #4]
  command->AutoRefreshNumber = 1;
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	2201      	movs	r2, #1
 80006ea:	609a      	str	r2, [r3, #8]
  command->ModeRegisterDefinition = 0;
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]

  HAL_SDRAM_SendCommand(sdram_handle, command, SDRAM_TIMEOUT);
 80006f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006f6:	6839      	ldr	r1, [r7, #0]
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f028 fe4d 	bl	8029398 <HAL_SDRAM_SendCommand>

  HAL_Delay(1);
 80006fe:	2001      	movs	r0, #1
 8000700:	f024 feda 	bl	80254b8 <HAL_Delay>

  command->CommandMode = FMC_SDRAM_CMD_PALL;
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	2202      	movs	r2, #2
 8000708:	601a      	str	r2, [r3, #0]
  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	2210      	movs	r2, #16
 800070e:	605a      	str	r2, [r3, #4]
  command->AutoRefreshNumber = 1;
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	2201      	movs	r2, #1
 8000714:	609a      	str	r2, [r3, #8]
  command->ModeRegisterDefinition = 0;
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]

  HAL_SDRAM_SendCommand(sdram_handle, command, SDRAM_TIMEOUT);
 800071c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000720:	6839      	ldr	r1, [r7, #0]
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f028 fe38 	bl	8029398 <HAL_SDRAM_SendCommand>

  command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	2203      	movs	r2, #3
 800072c:	601a      	str	r2, [r3, #0]
  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	2210      	movs	r2, #16
 8000732:	605a      	str	r2, [r3, #4]
  command->AutoRefreshNumber = 8;
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	2208      	movs	r2, #8
 8000738:	609a      	str	r2, [r3, #8]
  command->ModeRegisterDefinition = 0;
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]

  HAL_SDRAM_SendCommand(sdram_handle, command, SDRAM_TIMEOUT);
 8000740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000744:	6839      	ldr	r1, [r7, #0]
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f028 fe26 	bl	8029398 <HAL_SDRAM_SendCommand>

  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800074c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000750:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	2204      	movs	r2, #4
 8000756:	601a      	str	r2, [r3, #0]
  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	2210      	movs	r2, #16
 800075c:	605a      	str	r2, [r3, #4]
  command->AutoRefreshNumber = 1;
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	2201      	movs	r2, #1
 8000762:	609a      	str	r2, [r3, #8]
  command->ModeRegisterDefinition = tmpmrd;
 8000764:	68fa      	ldr	r2, [r7, #12]
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	60da      	str	r2, [r3, #12]

  HAL_SDRAM_SendCommand(sdram_handle, command, SDRAM_TIMEOUT);
 800076a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800076e:	6839      	ldr	r1, [r7, #0]
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f028 fe11 	bl	8029398 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_SetAutoRefreshNumber(&hsdram1, SDRAM_REFRESH_TIME);
 8000776:	f240 6103 	movw	r1, #1539	; 0x603
 800077a:	4803      	ldr	r0, [pc, #12]	; (8000788 <SDRAM_Initialization_Sequence+0xb8>)
 800077c:	f028 fe37 	bl	80293ee <HAL_SDRAM_SetAutoRefreshNumber>

}
 8000780:	bf00      	nop
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200214d4 	.word	0x200214d4

0800078c <Displayer_Init>:
 * retval: none.
 * brief : This function gets displayer ready to be driven.
 */

void Displayer_Init()
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

	LCD_BACKLIGHT_STATE(1);
 8000790:	2201      	movs	r2, #1
 8000792:	2108      	movs	r1, #8
 8000794:	4823      	ldr	r0, [pc, #140]	; (8000824 <Displayer_Init+0x98>)
 8000796:	f025 fc3d 	bl	8026014 <HAL_GPIO_WritePin>
	LCD_DISP_STATE(1);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a0:	4821      	ldr	r0, [pc, #132]	; (8000828 <Displayer_Init+0x9c>)
 80007a2:	f025 fc37 	bl	8026014 <HAL_GPIO_WritePin>

	lcd_handle.Instance = LTDC;
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <Displayer_Init+0xa0>)
 80007a8:	4a21      	ldr	r2, [pc, #132]	; (8000830 <Displayer_Init+0xa4>)
 80007aa:	601a      	str	r2, [r3, #0]
	lcd_handle.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <Displayer_Init+0xa0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	605a      	str	r2, [r3, #4]
	lcd_handle.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007b2:	4b1e      	ldr	r3, [pc, #120]	; (800082c <Displayer_Init+0xa0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
	lcd_handle.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007b8:	4b1c      	ldr	r3, [pc, #112]	; (800082c <Displayer_Init+0xa0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
	lcd_handle.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007be:	4b1b      	ldr	r3, [pc, #108]	; (800082c <Displayer_Init+0xa0>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
	lcd_handle.Init.HorizontalSync = (DISPLAYER_HSYNC - 1);
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <Displayer_Init+0xa0>)
 80007c6:	2228      	movs	r2, #40	; 0x28
 80007c8:	615a      	str	r2, [r3, #20]
	lcd_handle.Init.VerticalSync = (DISPLAYER_VSYNC - 1);
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <Displayer_Init+0xa0>)
 80007cc:	2209      	movs	r2, #9
 80007ce:	619a      	str	r2, [r3, #24]
	lcd_handle.Init.AccumulatedHBP = (DISPLAYER_HSYNC + DISPLAYER_HBP - 1);
 80007d0:	4b16      	ldr	r3, [pc, #88]	; (800082c <Displayer_Init+0xa0>)
 80007d2:	2235      	movs	r2, #53	; 0x35
 80007d4:	61da      	str	r2, [r3, #28]
	lcd_handle.Init.AccumulatedVBP = (DISPLAYER_VSYNC + DISPLAYER_VBP - 1);
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <Displayer_Init+0xa0>)
 80007d8:	220b      	movs	r2, #11
 80007da:	621a      	str	r2, [r3, #32]
	lcd_handle.Init.AccumulatedActiveH = (DISPLAYER_HEIGHT + DISPLAYER_VSYNC
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <Displayer_Init+0xa0>)
 80007de:	f240 121b 	movw	r2, #283	; 0x11b
 80007e2:	629a      	str	r2, [r3, #40]	; 0x28
			+ DISPLAYER_VBP - 1);
	lcd_handle.Init.AccumulatedActiveW = (DISPLAYER_WIDTH + DISPLAYER_HSYNC
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <Displayer_Init+0xa0>)
 80007e6:	f240 2215 	movw	r2, #533	; 0x215
 80007ea:	625a      	str	r2, [r3, #36]	; 0x24
			+ DISPLAYER_HBP - 1);
	lcd_handle.Init.TotalHeigh = (DISPLAYER_HEIGHT + DISPLAYER_VSYNC
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <Displayer_Init+0xa0>)
 80007ee:	f240 121d 	movw	r2, #285	; 0x11d
 80007f2:	631a      	str	r2, [r3, #48]	; 0x30
			+ DISPLAYER_VBP + DISPLAYER_VFP - 1);
	lcd_handle.Init.TotalWidth = (DISPLAYER_WIDTH + DISPLAYER_HSYNC
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <Displayer_Init+0xa0>)
 80007f6:	f240 2235 	movw	r2, #565	; 0x235
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
			+ DISPLAYER_HBP + DISPLAYER_HFP - 1);
	lcd_handle.Init.Backcolor.Blue = 0;
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <Displayer_Init+0xa0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	lcd_handle.Init.Backcolor.Green = 0;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <Displayer_Init+0xa0>)
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	lcd_handle.Init.Backcolor.Red = 0;
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <Displayer_Init+0xa0>)
 800080e:	2200      	movs	r2, #0
 8000810:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	HAL_LTDC_Init(&lcd_handle);
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <Displayer_Init+0xa0>)
 8000816:	f026 f83b 	bl	8026890 <HAL_LTDC_Init>
	Displayer_Layer_Init();
 800081a:	f000 f80b 	bl	8000834 <Displayer_Layer_Init>

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40022800 	.word	0x40022800
 8000828:	40022000 	.word	0x40022000
 800082c:	20021508 	.word	0x20021508
 8000830:	40016800 	.word	0x40016800

08000834 <Displayer_Layer_Init>:
 * brief : This function initialises first layer.
 */


static void Displayer_Layer_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0

	lcd_handle.LayerCfg[0].WindowX0 = 0;
 8000838:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <Displayer_Layer_Init+0x84>)
 800083a:	2200      	movs	r2, #0
 800083c:	639a      	str	r2, [r3, #56]	; 0x38
	lcd_handle.LayerCfg[0].WindowX1 = DISPLAYER_WIDTH;
 800083e:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <Displayer_Layer_Init+0x84>)
 8000840:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000844:	63da      	str	r2, [r3, #60]	; 0x3c
	lcd_handle.LayerCfg[0].WindowY0 = 0;
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <Displayer_Layer_Init+0x84>)
 8000848:	2200      	movs	r2, #0
 800084a:	641a      	str	r2, [r3, #64]	; 0x40
	lcd_handle.LayerCfg[0].WindowY1 = DISPLAYER_HEIGHT;
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <Displayer_Layer_Init+0x84>)
 800084e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000852:	645a      	str	r2, [r3, #68]	; 0x44
	lcd_handle.LayerCfg[0].PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <Displayer_Layer_Init+0x84>)
 8000856:	2200      	movs	r2, #0
 8000858:	649a      	str	r2, [r3, #72]	; 0x48
	lcd_handle.LayerCfg[0].Alpha = 255;
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <Displayer_Layer_Init+0x84>)
 800085c:	22ff      	movs	r2, #255	; 0xff
 800085e:	64da      	str	r2, [r3, #76]	; 0x4c
	lcd_handle.LayerCfg[0].Alpha0 = 0;
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <Displayer_Layer_Init+0x84>)
 8000862:	2200      	movs	r2, #0
 8000864:	651a      	str	r2, [r3, #80]	; 0x50
	lcd_handle.LayerCfg[0].BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <Displayer_Layer_Init+0x84>)
 8000868:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800086c:	655a      	str	r2, [r3, #84]	; 0x54
	lcd_handle.LayerCfg[0].BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <Displayer_Layer_Init+0x84>)
 8000870:	2207      	movs	r2, #7
 8000872:	659a      	str	r2, [r3, #88]	; 0x58
	lcd_handle.LayerCfg[0].FBStartAdress = (uint32_t)0xC0000000;
 8000874:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <Displayer_Layer_Init+0x84>)
 8000876:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800087a:	65da      	str	r2, [r3, #92]	; 0x5c
	lcd_handle.LayerCfg[0].ImageWidth = DISPLAYER_WIDTH;
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <Displayer_Layer_Init+0x84>)
 800087e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000882:	661a      	str	r2, [r3, #96]	; 0x60
	lcd_handle.LayerCfg[0].ImageHeight = DISPLAYER_HEIGHT;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <Displayer_Layer_Init+0x84>)
 8000886:	f44f 7288 	mov.w	r2, #272	; 0x110
 800088a:	665a      	str	r2, [r3, #100]	; 0x64
	lcd_handle.LayerCfg[0].Backcolor.Blue = 0;
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <Displayer_Layer_Init+0x84>)
 800088e:	2200      	movs	r2, #0
 8000890:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	lcd_handle.LayerCfg[0].Backcolor.Green = 0;
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <Displayer_Layer_Init+0x84>)
 8000896:	2200      	movs	r2, #0
 8000898:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	lcd_handle.LayerCfg[0].Backcolor.Red = 0;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <Displayer_Layer_Init+0x84>)
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    HAL_LTDC_ConfigLayer(&lcd_handle, &lcd_handle.LayerCfg[0], 1);
 80008a4:	2201      	movs	r2, #1
 80008a6:	4905      	ldr	r1, [pc, #20]	; (80008bc <Displayer_Layer_Init+0x88>)
 80008a8:	4803      	ldr	r0, [pc, #12]	; (80008b8 <Displayer_Layer_Init+0x84>)
 80008aa:	f026 f8c1 	bl	8026a30 <HAL_LTDC_ConfigLayer>
	HAL_LTDC_EnableDither(&lcd_handle);
 80008ae:	4802      	ldr	r0, [pc, #8]	; (80008b8 <Displayer_Layer_Init+0x84>)
 80008b0:	f026 f8fc 	bl	8026aac <HAL_LTDC_EnableDither>
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20021508 	.word	0x20021508
 80008bc:	20021540 	.word	0x20021540

080008c0 <Display_Draw_Pixel>:
/*
 * NOTE : This function will wait for SDRAM to start.
 */

void Display_Draw_Pixel (int16_t Xpos, int16_t Ypos, uint32_t color)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	603a      	str	r2, [r7, #0]
 80008ca:	80fb      	strh	r3, [r7, #6]
 80008cc:	460b      	mov	r3, r1
 80008ce:	80bb      	strh	r3, [r7, #4]
	*(__IO uint32_t *)(lcd_handle.LayerCfg[0].FBStartAdress+( 4 * (Ypos * lcd_handle.LayerCfg [0] .ImageWidth + Xpos))) = color;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <Display_Draw_Pixel+0x3c>)
 80008d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80008d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008d8:	4908      	ldr	r1, [pc, #32]	; (80008fc <Display_Draw_Pixel+0x3c>)
 80008da:	6e09      	ldr	r1, [r1, #96]	; 0x60
 80008dc:	fb01 f103 	mul.w	r1, r1, r3
 80008e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008e4:	440b      	add	r3, r1
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	4413      	add	r3, r2
 80008ea:	461a      	mov	r2, r3
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	6013      	str	r3, [r2, #0]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	20021508 	.word	0x20021508

08000900 <Displayer_GUI_Init>:


static void display_interface(lv_disp_drv_t * disp, const lv_area_t * area, lv_color_t * color_p);

void Displayer_GUI_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08e      	sub	sp, #56	; 0x38
 8000904:	af00      	add	r7, sp, #0
	  SDRAM_Init();
 8000906:	f7ff fe91 	bl	800062c <SDRAM_Init>
	  Displayer_Init();
 800090a:	f7ff ff3f 	bl	800078c <Displayer_Init>

	  lv_init();
 800090e:	f004 fc07 	bl	8005120 <lv_init>

	  static lv_disp_buf_t disp_buf;
	  static lv_color_t buf[LV_HOR_RES_MAX * 50];
	  lv_disp_buf_init(&disp_buf, buf, NULL, LV_HOR_RES_MAX * 50);
 8000912:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 8000916:	2200      	movs	r2, #0
 8000918:	4909      	ldr	r1, [pc, #36]	; (8000940 <Displayer_GUI_Init+0x40>)
 800091a:	480a      	ldr	r0, [pc, #40]	; (8000944 <Displayer_GUI_Init+0x44>)
 800091c:	f019 fc36 	bl	801a18c <lv_disp_buf_init>

	  lv_disp_drv_t disp_drv;
	  lv_disp_drv_init(&disp_drv);
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	4618      	mov	r0, r3
 8000924:	f019 fbef 	bl	801a106 <lv_disp_drv_init>
	  disp_drv.flush_cb = display_interface;
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <Displayer_GUI_Init+0x48>)
 800092a:	613b      	str	r3, [r7, #16]
	  disp_drv.buffer = &disp_buf;
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <Displayer_GUI_Init+0x44>)
 800092e:	60bb      	str	r3, [r7, #8]
	  lv_disp_drv_register(&disp_drv);
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	4618      	mov	r0, r3
 8000934:	f019 fc46 	bl	801a1c4 <lv_disp_drv_register>
}
 8000938:	bf00      	nop
 800093a:	3738      	adds	r7, #56	; 0x38
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2000145c 	.word	0x2000145c
 8000944:	20001438 	.word	0x20001438
 8000948:	0800094d 	.word	0x0800094d

0800094c <display_interface>:

static void display_interface(lv_disp_drv_t * disp, const lv_area_t * area, lv_color_t * color_p)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
    int32_t x, y;
    for(y = area->y1; y <= area->y2; y++) {
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	e01d      	b.n	800099e <display_interface+0x52>
        for(x = area->x1; x <= area->x2; x++) {
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	e00e      	b.n	800098a <display_interface+0x3e>
        	Display_Draw_Pixel(x, y, (uint32_t)color_p->full);
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	b218      	sxth	r0, r3
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	b219      	sxth	r1, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	f7ff ffa1 	bl	80008c0 <Display_Draw_Pixel>
            color_p++;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3304      	adds	r3, #4
 8000982:	607b      	str	r3, [r7, #4]
        for(x = area->x1; x <= area->x2; x++) {
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	3301      	adds	r3, #1
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000990:	461a      	mov	r2, r3
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	4293      	cmp	r3, r2
 8000996:	dde9      	ble.n	800096c <display_interface+0x20>
    for(y = area->y1; y <= area->y2; y++) {
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	3301      	adds	r3, #1
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80009a4:	461a      	mov	r2, r3
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	4293      	cmp	r3, r2
 80009aa:	ddda      	ble.n	8000962 <display_interface+0x16>
        }
    }

    lv_disp_flush_ready(disp);
 80009ac:	68f8      	ldr	r0, [r7, #12]
 80009ae:	f019 fd81 	bl	801a4b4 <lv_disp_flush_ready>
}
 80009b2:	bf00      	nop
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <Touch_Screen_Ispressed>:
#include "touch_screen_reglist.h"

#define I2C_Handle (&hi2c3)

_Bool Touch_Screen_Ispressed()
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af04      	add	r7, sp, #16

	uint8_t touch_num;

	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_NUM, I2C_MEMADD_SIZE_8BIT, &touch_num, 1, 10);
 80009c2:	230a      	movs	r3, #10
 80009c4:	9302      	str	r3, [sp, #8]
 80009c6:	2301      	movs	r3, #1
 80009c8:	9301      	str	r3, [sp, #4]
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2301      	movs	r3, #1
 80009d0:	2202      	movs	r2, #2
 80009d2:	2171      	movs	r1, #113	; 0x71
 80009d4:	4806      	ldr	r0, [pc, #24]	; (80009f0 <Touch_Screen_Ispressed+0x34>)
 80009d6:	f025 fbc7 	bl	8026168 <HAL_I2C_Mem_Read>

	if(touch_num > 0)
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <Touch_Screen_Ispressed+0x28>
	{
		return true;
 80009e0:	2301      	movs	r3, #1
 80009e2:	e000      	b.n	80009e6 <Touch_Screen_Ispressed+0x2a>
	}
	else
	{
		return false;
 80009e4:	2300      	movs	r3, #0
	}

}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200215b0 	.word	0x200215b0

080009f4 <Touch_Screen_Read>:

void Touch_Screen_Read(uint16_t *touch_x, uint16_t *touch_y)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af04      	add	r7, sp, #16
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
	 uint8_t ts_x[2] ;
	 uint8_t ts_y[2] ;

	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_X_H, I2C_MEMADD_SIZE_8BIT, &ts_x[0], 1, 10);
 80009fe:	230a      	movs	r3, #10
 8000a00:	9302      	str	r3, [sp, #8]
 8000a02:	2301      	movs	r3, #1
 8000a04:	9301      	str	r3, [sp, #4]
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	2203      	movs	r2, #3
 8000a10:	2171      	movs	r1, #113	; 0x71
 8000a12:	4824      	ldr	r0, [pc, #144]	; (8000aa4 <Touch_Screen_Read+0xb0>)
 8000a14:	f025 fba8 	bl	8026168 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_X_L, I2C_MEMADD_SIZE_8BIT, &ts_x[1], 1, 10);
 8000a18:	230a      	movs	r3, #10
 8000a1a:	9302      	str	r3, [sp, #8]
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	9301      	str	r3, [sp, #4]
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	3301      	adds	r3, #1
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2301      	movs	r3, #1
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	2171      	movs	r1, #113	; 0x71
 8000a2e:	481d      	ldr	r0, [pc, #116]	; (8000aa4 <Touch_Screen_Read+0xb0>)
 8000a30:	f025 fb9a 	bl	8026168 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_Y_H, I2C_MEMADD_SIZE_8BIT, &ts_y[0], 1, 10);
 8000a34:	230a      	movs	r3, #10
 8000a36:	9302      	str	r3, [sp, #8]
 8000a38:	2301      	movs	r3, #1
 8000a3a:	9301      	str	r3, [sp, #4]
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2301      	movs	r3, #1
 8000a44:	2205      	movs	r2, #5
 8000a46:	2171      	movs	r1, #113	; 0x71
 8000a48:	4816      	ldr	r0, [pc, #88]	; (8000aa4 <Touch_Screen_Read+0xb0>)
 8000a4a:	f025 fb8d 	bl	8026168 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_Y_L, I2C_MEMADD_SIZE_8BIT, &ts_y[1], 1, 10);
 8000a4e:	230a      	movs	r3, #10
 8000a50:	9302      	str	r3, [sp, #8]
 8000a52:	2301      	movs	r3, #1
 8000a54:	9301      	str	r3, [sp, #4]
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	2206      	movs	r2, #6
 8000a62:	2171      	movs	r1, #113	; 0x71
 8000a64:	480f      	ldr	r0, [pc, #60]	; (8000aa4 <Touch_Screen_Read+0xb0>)
 8000a66:	f025 fb7f 	bl	8026168 <HAL_I2C_Mem_Read>

	*touch_x = ts_x[1] + ((ts_x[0] & 0x0F) << 8);
 8000a6a:	7b7b      	ldrb	r3, [r7, #13]
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	7b3b      	ldrb	r3, [r7, #12]
 8000a70:	021b      	lsls	r3, r3, #8
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	801a      	strh	r2, [r3, #0]
	*touch_y = ts_y[1] + ((ts_y[0] & 0x0F) << 8);
 8000a82:	7a7b      	ldrb	r3, [r7, #9]
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	7a3b      	ldrb	r3, [r7, #8]
 8000a88:	021b      	lsls	r3, r3, #8
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	4413      	add	r3, r2
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	801a      	strh	r2, [r3, #0]

}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200215b0 	.word	0x200215b0

08000aa8 <Touch_Screen_Init>:
#include "touch_screen.h"

static bool my_touchpad_read(struct _lv_indev_drv_t * indev, lv_indev_data_t * data);

void Touch_Screen_Init()
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
	MX_I2C3_Init();
 8000aae:	f000 f9bb 	bl	8000e28 <MX_I2C3_Init>

	lv_indev_drv_t indev_drv;
	lv_indev_drv_init(&indev_drv);
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f019 fdad 	bl	801a614 <lv_indev_drv_init>
	indev_drv.type = LV_INDEV_TYPE_POINTER;
 8000aba:	2301      	movs	r3, #1
 8000abc:	713b      	strb	r3, [r7, #4]
	indev_drv.read_cb = my_touchpad_read;
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <Touch_Screen_Init+0x2c>)
 8000ac0:	60bb      	str	r3, [r7, #8]
	lv_indev_drv_register(&indev_drv);
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f019 fdc7 	bl	801a658 <lv_indev_drv_register>
}
 8000aca:	bf00      	nop
 8000acc:	3720      	adds	r7, #32
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	08000ad9 	.word	0x08000ad9

08000ad8 <my_touchpad_read>:

static bool my_touchpad_read(struct _lv_indev_drv_t * indev, lv_indev_data_t * data)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
	uint16_t ts_x;
	uint16_t ts_y;

	data->state = Touch_Screen_Ispressed() ? LV_INDEV_STATE_PR : LV_INDEV_STATE_REL;
 8000ae2:	f7ff ff6b 	bl	80009bc <Touch_Screen_Ispressed>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	461a      	mov	r2, r3
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	739a      	strb	r2, [r3, #14]

	if (data->state == LV_INDEV_STATE_PR)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	7b9b      	ldrb	r3, [r3, #14]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d107      	bne.n	8000b06 <my_touchpad_read+0x2e>
	{
		Touch_Screen_Read(&ts_x, &ts_y);
 8000af6:	f107 020c 	add.w	r2, r7, #12
 8000afa:	f107 030e 	add.w	r3, r7, #14
 8000afe:	4611      	mov	r1, r2
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff77 	bl	80009f4 <Touch_Screen_Read>
	}

	data->point.x = (int16_t)ts_y;
 8000b06:	89bb      	ldrh	r3, [r7, #12]
 8000b08:	b21a      	sxth	r2, r3
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	801a      	strh	r2, [r3, #0]
	data->point.y = (int16_t)ts_x;
 8000b0e:	89fb      	ldrh	r3, [r7, #14]
 8000b10:	b21a      	sxth	r2, r3
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	805a      	strh	r2, [r3, #2]

	return false;
 8000b16:	2300      	movs	r3, #0
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <MX_DMA_Init+0x48>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	; (8000b68 <MX_DMA_Init+0x48>)
 8000b2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <MX_DMA_Init+0x48>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	203b      	movs	r0, #59	; 0x3b
 8000b44:	f024 fd92 	bl	802566c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000b48:	203b      	movs	r0, #59	; 0x3b
 8000b4a:	f024 fdab 	bl	80256a4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	2045      	movs	r0, #69	; 0x45
 8000b54:	f024 fd8a 	bl	802566c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b58:	2045      	movs	r0, #69	; 0x45
 8000b5a:	f024 fda3 	bl	80256a4 <HAL_NVIC_EnableIRQ>

}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <HAL_FMC_MspInit>:
  /* USER CODE END FMC_Init 2 */
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000b80:	4b3a      	ldr	r3, [pc, #232]	; (8000c6c <HAL_FMC_MspInit+0x100>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d16d      	bne.n	8000c64 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000b88:	4b38      	ldr	r3, [pc, #224]	; (8000c6c <HAL_FMC_MspInit+0x100>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000b8e:	4b38      	ldr	r3, [pc, #224]	; (8000c70 <HAL_FMC_MspInit+0x104>)
 8000b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b92:	4a37      	ldr	r2, [pc, #220]	; (8000c70 <HAL_FMC_MspInit+0x104>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6393      	str	r3, [r2, #56]	; 0x38
 8000b9a:	4b35      	ldr	r3, [pc, #212]	; (8000c70 <HAL_FMC_MspInit+0x104>)
 8000b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8000ba6:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000baa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bb8:	230c      	movs	r3, #12
 8000bba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	482c      	ldr	r0, [pc, #176]	; (8000c74 <HAL_FMC_MspInit+0x108>)
 8000bc2:	f025 f865 	bl	8025c90 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8000bc6:	f248 1313 	movw	r3, #33043	; 0x8113
 8000bca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bd8:	230c      	movs	r3, #12
 8000bda:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	4619      	mov	r1, r3
 8000be0:	4825      	ldr	r0, [pc, #148]	; (8000c78 <HAL_FMC_MspInit+0x10c>)
 8000be2:	f025 f855 	bl	8025c90 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8000be6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000bea:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bf8:	230c      	movs	r3, #12
 8000bfa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	4619      	mov	r1, r3
 8000c00:	481e      	ldr	r0, [pc, #120]	; (8000c7c <HAL_FMC_MspInit+0x110>)
 8000c02:	f025 f845 	bl	8025c90 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c06:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000c0a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c18:	230c      	movs	r3, #12
 8000c1a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4817      	ldr	r0, [pc, #92]	; (8000c80 <HAL_FMC_MspInit+0x114>)
 8000c22:	f025 f835 	bl	8025c90 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8000c26:	2328      	movs	r3, #40	; 0x28
 8000c28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c36:	230c      	movs	r3, #12
 8000c38:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4811      	ldr	r0, [pc, #68]	; (8000c84 <HAL_FMC_MspInit+0x118>)
 8000c40:	f025 f826 	bl	8025c90 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c44:	2308      	movs	r3, #8
 8000c46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c54:	230c      	movs	r3, #12
 8000c56:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_FMC_MspInit+0x11c>)
 8000c5e:	f025 f817 	bl	8025c90 <HAL_GPIO_Init>
 8000c62:	e000      	b.n	8000c66 <HAL_FMC_MspInit+0xfa>
    return;
 8000c64:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20018b5c 	.word	0x20018b5c
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40021800 	.word	0x40021800
 8000c7c:	40020c00 	.word	0x40020c00
 8000c80:	40021400 	.word	0x40021400
 8000c84:	40021c00 	.word	0x40021c00
 8000c88:	40020800 	.word	0x40020800

08000c8c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000c94:	f7ff ff6a 	bl	8000b6c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b090      	sub	sp, #64	; 0x40
 8000ca4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cb6:	4b58      	ldr	r3, [pc, #352]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a57      	ldr	r2, [pc, #348]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000cbc:	f043 0310 	orr.w	r3, r3, #16
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b55      	ldr	r3, [pc, #340]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0310 	and.w	r3, r3, #16
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	4b52      	ldr	r3, [pc, #328]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a51      	ldr	r2, [pc, #324]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000cd4:	f043 0304 	orr.w	r3, r3, #4
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b4f      	ldr	r3, [pc, #316]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	4b4c      	ldr	r3, [pc, #304]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a4b      	ldr	r2, [pc, #300]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b49      	ldr	r3, [pc, #292]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	623b      	str	r3, [r7, #32]
 8000cfc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cfe:	4b46      	ldr	r3, [pc, #280]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a45      	ldr	r2, [pc, #276]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b43      	ldr	r3, [pc, #268]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d16:	4b40      	ldr	r3, [pc, #256]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a3f      	ldr	r2, [pc, #252]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000d1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b3d      	ldr	r3, [pc, #244]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d2a:	61bb      	str	r3, [r7, #24]
 8000d2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2e:	4b3a      	ldr	r3, [pc, #232]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a39      	ldr	r2, [pc, #228]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000d34:	f043 0308 	orr.w	r3, r3, #8
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b37      	ldr	r3, [pc, #220]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d46:	4b34      	ldr	r3, [pc, #208]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a33      	ldr	r2, [pc, #204]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000d4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b31      	ldr	r3, [pc, #196]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d5e:	4b2e      	ldr	r3, [pc, #184]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a2d      	ldr	r2, [pc, #180]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000d64:	f043 0320 	orr.w	r3, r3, #32
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b2b      	ldr	r3, [pc, #172]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0320 	and.w	r3, r3, #32
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d76:	4b28      	ldr	r3, [pc, #160]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a27      	ldr	r2, [pc, #156]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b25      	ldr	r3, [pc, #148]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d8e:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a21      	ldr	r2, [pc, #132]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <MX_GPIO_Init+0x178>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8000da6:	2201      	movs	r2, #1
 8000da8:	2108      	movs	r1, #8
 8000daa:	481c      	ldr	r0, [pc, #112]	; (8000e1c <MX_GPIO_Init+0x17c>)
 8000dac:	f025 f932 	bl	8026014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	f241 0102 	movw	r1, #4098	; 0x1002
 8000db6:	481a      	ldr	r0, [pc, #104]	; (8000e20 <MX_GPIO_Init+0x180>)
 8000db8:	f025 f92c 	bl	8026014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_Detect_Pin;
 8000dbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDMMC_Detect_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4814      	ldr	r0, [pc, #80]	; (8000e24 <MX_GPIO_Init+0x184>)
 8000dd2:	f024 ff5d 	bl	8025c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PK3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dd6:	2308      	movs	r3, #8
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000de6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dea:	4619      	mov	r1, r3
 8000dec:	480b      	ldr	r0, [pc, #44]	; (8000e1c <MX_GPIO_Init+0x17c>)
 8000dee:	f024 ff4f 	bl	8025c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 8000df2:	f241 0302 	movw	r3, #4098	; 0x1002
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_GPIO_Init+0x180>)
 8000e0c:	f024 ff40 	bl	8025c90 <HAL_GPIO_Init>

}
 8000e10:	bf00      	nop
 8000e12:	3740      	adds	r7, #64	; 0x40
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40022800 	.word	0x40022800
 8000e20:	40022000 	.word	0x40022000
 8000e24:	40020800 	.word	0x40020800

08000e28 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ea0 <MX_I2C3_Init+0x78>)
 8000e30:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0040EAFF;
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e34:	4a1b      	ldr	r2, [pc, #108]	; (8000ea4 <MX_I2C3_Init+0x7c>)
 8000e36:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 224;
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e3a:	22e0      	movs	r2, #224	; 0xe0
 8000e3c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e62:	480e      	ldr	r0, [pc, #56]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e64:	f025 f8f0 	bl	8026048 <HAL_I2C_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000e6e:	f000 fa69 	bl	8001344 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e72:	2100      	movs	r1, #0
 8000e74:	4809      	ldr	r0, [pc, #36]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e76:	f025 fc73 	bl	8026760 <HAL_I2CEx_ConfigAnalogFilter>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000e80:	f000 fa60 	bl	8001344 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e84:	2100      	movs	r1, #0
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e88:	f025 fcb5 	bl	80267f6 <HAL_I2CEx_ConfigDigitalFilter>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000e92:	f000 fa57 	bl	8001344 <Error_Handler>
  }

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200215b0 	.word	0x200215b0
 8000ea0:	40005c00 	.word	0x40005c00
 8000ea4:	0040eaff 	.word	0x0040eaff

08000ea8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a1b      	ldr	r2, [pc, #108]	; (8000f34 <HAL_I2C_MspInit+0x8c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d130      	bne.n	8000f2c <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <HAL_I2C_MspInit+0x90>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a1a      	ldr	r2, [pc, #104]	; (8000f38 <HAL_I2C_MspInit+0x90>)
 8000ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_I2C_MspInit+0x90>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000ee2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ee8:	2312      	movs	r3, #18
 8000eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	480f      	ldr	r0, [pc, #60]	; (8000f3c <HAL_I2C_MspInit+0x94>)
 8000f00:	f024 fec6 	bl	8025c90 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <HAL_I2C_MspInit+0x90>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <HAL_I2C_MspInit+0x90>)
 8000f0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <HAL_I2C_MspInit+0x90>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2048      	movs	r0, #72	; 0x48
 8000f22:	f024 fba3 	bl	802566c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000f26:	2048      	movs	r0, #72	; 0x48
 8000f28:	f024 fbbc 	bl	80256a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3728      	adds	r7, #40	; 0x28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40005c00 	.word	0x40005c00
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40021c00 	.word	0x40021c00

08000f40 <HAL_LTDC_MspInit>:
  }

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08e      	sub	sp, #56	; 0x38
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a51      	ldr	r2, [pc, #324]	; (80010a4 <HAL_LTDC_MspInit+0x164>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	f040 809b 	bne.w	800109a <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f64:	4b50      	ldr	r3, [pc, #320]	; (80010a8 <HAL_LTDC_MspInit+0x168>)
 8000f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f68:	4a4f      	ldr	r2, [pc, #316]	; (80010a8 <HAL_LTDC_MspInit+0x168>)
 8000f6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f6e:	6453      	str	r3, [r2, #68]	; 0x44
 8000f70:	4b4d      	ldr	r3, [pc, #308]	; (80010a8 <HAL_LTDC_MspInit+0x168>)
 8000f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f78:	623b      	str	r3, [r7, #32]
 8000f7a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7c:	4b4a      	ldr	r3, [pc, #296]	; (80010a8 <HAL_LTDC_MspInit+0x168>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	4a49      	ldr	r2, [pc, #292]	; (80010a8 <HAL_LTDC_MspInit+0x168>)
 8000f82:	f043 0310 	orr.w	r3, r3, #16
 8000f86:	6313      	str	r3, [r2, #48]	; 0x30
 8000f88:	4b47      	ldr	r3, [pc, #284]	; (80010a8 <HAL_LTDC_MspInit+0x168>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8c:	f003 0310 	and.w	r3, r3, #16
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f94:	4b44      	ldr	r3, [pc, #272]	; (80010a8 <HAL_LTDC_MspInit+0x168>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f98:	4a43      	ldr	r2, [pc, #268]	; (80010a8 <HAL_LTDC_MspInit+0x168>)
 8000f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa0:	4b41      	ldr	r3, [pc, #260]	; (80010a8 <HAL_LTDC_MspInit+0x168>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fa8:	61bb      	str	r3, [r7, #24]
 8000faa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000fac:	4b3e      	ldr	r3, [pc, #248]	; (80010a8 <HAL_LTDC_MspInit+0x168>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb0:	4a3d      	ldr	r2, [pc, #244]	; (80010a8 <HAL_LTDC_MspInit+0x168>)
 8000fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb8:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <HAL_LTDC_MspInit+0x168>)
 8000fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fc4:	4b38      	ldr	r3, [pc, #224]	; (80010a8 <HAL_LTDC_MspInit+0x168>)
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc8:	4a37      	ldr	r2, [pc, #220]	; (80010a8 <HAL_LTDC_MspInit+0x168>)
 8000fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fce:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd0:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <HAL_LTDC_MspInit+0x168>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000fdc:	4b32      	ldr	r3, [pc, #200]	; (80010a8 <HAL_LTDC_MspInit+0x168>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe0:	4a31      	ldr	r2, [pc, #196]	; (80010a8 <HAL_LTDC_MspInit+0x168>)
 8000fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe8:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <HAL_LTDC_MspInit+0x168>)
 8000fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ff4:	2310      	movs	r3, #16
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001004:	230e      	movs	r3, #14
 8001006:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100c:	4619      	mov	r1, r3
 800100e:	4827      	ldr	r0, [pc, #156]	; (80010ac <HAL_LTDC_MspInit+0x16c>)
 8001010:	f024 fe3e 	bl	8025c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8001014:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001026:	230e      	movs	r3, #14
 8001028:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800102a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102e:	4619      	mov	r1, r3
 8001030:	481f      	ldr	r0, [pc, #124]	; (80010b0 <HAL_LTDC_MspInit+0x170>)
 8001032:	f024 fe2d 	bl	8025c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8001036:	23f7      	movs	r3, #247	; 0xf7
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001046:	230e      	movs	r3, #14
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	4619      	mov	r1, r3
 8001050:	4818      	ldr	r0, [pc, #96]	; (80010b4 <HAL_LTDC_MspInit+0x174>)
 8001052:	f024 fe1d 	bl	8025c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001068:	2309      	movs	r3, #9
 800106a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800106c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001070:	4619      	mov	r1, r3
 8001072:	4811      	ldr	r0, [pc, #68]	; (80010b8 <HAL_LTDC_MspInit+0x178>)
 8001074:	f024 fe0c 	bl	8025c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8001078:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800108a:	230e      	movs	r3, #14
 800108c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800108e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001092:	4619      	mov	r1, r3
 8001094:	4809      	ldr	r0, [pc, #36]	; (80010bc <HAL_LTDC_MspInit+0x17c>)
 8001096:	f024 fdfb 	bl	8025c90 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800109a:	bf00      	nop
 800109c:	3738      	adds	r7, #56	; 0x38
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40016800 	.word	0x40016800
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40022400 	.word	0x40022400
 80010b4:	40022800 	.word	0x40022800
 80010b8:	40021800 	.word	0x40021800
 80010bc:	40022000 	.word	0x40022000

080010c0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010c8:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <SCB_EnableICache+0x3c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010d8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80010dc:	4b07      	ldr	r3, [pc, #28]	; (80010fc <SCB_EnableICache+0x3c>)
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	4a06      	ldr	r2, [pc, #24]	; (80010fc <SCB_EnableICache+0x3c>)
 80010e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80010e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010ec:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001106:	4b1d      	ldr	r3, [pc, #116]	; (800117c <SCB_EnableDCache+0x7c>)
 8001108:	2200      	movs	r2, #0
 800110a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800110e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <SCB_EnableDCache+0x7c>)
 8001114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001118:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	0b5b      	lsrs	r3, r3, #13
 800111e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001122:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	08db      	lsrs	r3, r3, #3
 8001128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800112c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	015a      	lsls	r2, r3, #5
 8001132:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001136:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001138:	68ba      	ldr	r2, [r7, #8]
 800113a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800113c:	490f      	ldr	r1, [pc, #60]	; (800117c <SCB_EnableDCache+0x7c>)
 800113e:	4313      	orrs	r3, r2
 8001140:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	1e5a      	subs	r2, r3, #1
 8001148:	60ba      	str	r2, [r7, #8]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1ef      	bne.n	800112e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	1e5a      	subs	r2, r3, #1
 8001152:	60fa      	str	r2, [r7, #12]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1e5      	bne.n	8001124 <SCB_EnableDCache+0x24>
 8001158:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <SCB_EnableDCache+0x7c>)
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <SCB_EnableDCache+0x7c>)
 8001162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001166:	6153      	str	r3, [r2, #20]
 8001168:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800116c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001184:	f7ff ff9c 	bl	80010c0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001188:	f7ff ffba 	bl	8001100 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118c:	f024 f966 	bl	802545c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001190:	f000 f820 	bl	80011d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001194:	f7ff fd84 	bl	8000ca0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001198:	f7ff fcc2 	bl	8000b20 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */

  Displayer_GUI_Init();
 800119c:	f7ff fbb0 	bl	8000900 <Displayer_GUI_Init>
  Touch_Screen_Init();
 80011a0:	f7ff fc82 	bl	8000aa8 <Touch_Screen_Init>

  File_Init(&file_manage);
 80011a4:	4809      	ldr	r0, [pc, #36]	; (80011cc <main+0x4c>)
 80011a6:	f7ff f9c1 	bl	800052c <File_Init>

  File_Get_Dir(&file_manage);
 80011aa:	4808      	ldr	r0, [pc, #32]	; (80011cc <main+0x4c>)
 80011ac:	f7ff fa16 	bl	80005dc <File_Get_Dir>

  File_Create_Dir(&file_manage, "0:/Sub_module_1");
 80011b0:	4907      	ldr	r1, [pc, #28]	; (80011d0 <main+0x50>)
 80011b2:	4806      	ldr	r0, [pc, #24]	; (80011cc <main+0x4c>)
 80011b4:	f7ff f9e0 	bl	8000578 <File_Create_Dir>

  File_Change_Dir(&file_manage, "0:/Sub_module_1");
 80011b8:	4905      	ldr	r1, [pc, #20]	; (80011d0 <main+0x50>)
 80011ba:	4804      	ldr	r0, [pc, #16]	; (80011cc <main+0x4c>)
 80011bc:	f7ff f9f0 	bl	80005a0 <File_Change_Dir>


  /*  It has a problem */
  File_Get_Dir(&file_manage);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <main+0x4c>)
 80011c2:	f7ff fa0b 	bl	80005dc <File_Get_Dir>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lv_task_handler();
 80011c6:	f01c f963 	bl	801d490 <lv_task_handler>
 80011ca:	e7fc      	b.n	80011c6 <main+0x46>
 80011cc:	20000000 	.word	0x20000000
 80011d0:	0802d788 	.word	0x0802d788

080011d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b0b4      	sub	sp, #208	; 0xd0
 80011d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011de:	2230      	movs	r2, #48	; 0x30
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f02c fab3 	bl	802d74e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	2284      	movs	r2, #132	; 0x84
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f02c faa4 	bl	802d74e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	4b43      	ldr	r3, [pc, #268]	; (8001314 <SystemClock_Config+0x140>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	4a42      	ldr	r2, [pc, #264]	; (8001314 <SystemClock_Config+0x140>)
 800120c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001210:	6413      	str	r3, [r2, #64]	; 0x40
 8001212:	4b40      	ldr	r3, [pc, #256]	; (8001314 <SystemClock_Config+0x140>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800121e:	4b3e      	ldr	r3, [pc, #248]	; (8001318 <SystemClock_Config+0x144>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a3d      	ldr	r2, [pc, #244]	; (8001318 <SystemClock_Config+0x144>)
 8001224:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	4b3b      	ldr	r3, [pc, #236]	; (8001318 <SystemClock_Config+0x144>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001236:	2301      	movs	r3, #1
 8001238:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800123c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001240:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001244:	2302      	movs	r3, #2
 8001246:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800124a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800124e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001252:	230f      	movs	r3, #15
 8001254:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001258:	23f0      	movs	r3, #240	; 0xf0
 800125a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800125e:	2302      	movs	r3, #2
 8001260:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001264:	2309      	movs	r3, #9
 8001266:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800126e:	4618      	mov	r0, r3
 8001270:	f025 fe30 	bl	8026ed4 <HAL_RCC_OscConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800127a:	f000 f863 	bl	8001344 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800127e:	f025 fdd9 	bl	8026e34 <HAL_PWREx_EnableOverDrive>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001288:	f000 f85c 	bl	8001344 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128c:	230f      	movs	r3, #15
 800128e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001292:	2302      	movs	r3, #2
 8001294:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800129e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80012ae:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012b2:	2106      	movs	r1, #6
 80012b4:	4618      	mov	r0, r3
 80012b6:	f026 f8b1 	bl	802741c <HAL_RCC_ClockConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80012c0:	f000 f840 	bl	8001344 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_I2C3
 80012c4:	4b15      	ldr	r3, [pc, #84]	; (800131c <SystemClock_Config+0x148>)
 80012c6:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 114;
 80012c8:	2372      	movs	r3, #114	; 0x72
 80012ca:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80012cc:	2305      	movs	r3, #5
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80012d0:	2302      	movs	r3, #2
 80012d2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80012d4:	2303      	movs	r3, #3
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80012d8:	2301      	movs	r3, #1
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80012dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80012e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80012ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	4618      	mov	r0, r3
 80012fa:	f026 faab 	bl	8027854 <HAL_RCCEx_PeriphCLKConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0x134>
  {
    Error_Handler();
 8001304:	f000 f81e 	bl	8001344 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001308:	f026 f974 	bl	80275f4 <HAL_RCC_EnableCSS>
}
 800130c:	bf00      	nop
 800130e:	37d0      	adds	r7, #208	; 0xd0
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	40007000 	.word	0x40007000
 800131c:	00a10008 	.word	0x00a10008

08001320 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a04      	ldr	r2, [pc, #16]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d101      	bne.n	8001336 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001332:	f024 f8a1 	bl	8025478 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40010000 	.word	0x40010000

08001344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  while (1)
 8001348:	e7fe      	b.n	8001348 <Error_Handler+0x4>
	...

0800134c <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <MX_SDMMC1_SD_Init+0x38>)
 8001352:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <MX_SDMMC1_SD_Init+0x3c>)
 8001354:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <MX_SDMMC1_SD_Init+0x38>)
 8001358:	2200      	movs	r2, #0
 800135a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_SDMMC1_SD_Init+0x38>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <MX_SDMMC1_SD_Init+0x38>)
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_SDMMC1_SD_Init+0x38>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <MX_SDMMC1_SD_Init+0x38>)
 8001370:	2200      	movs	r2, #0
 8001372:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <MX_SDMMC1_SD_Init+0x38>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]

}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	200215fc 	.word	0x200215fc
 8001388:	40012c00 	.word	0x40012c00

0800138c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	; 0x28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a69      	ldr	r2, [pc, #420]	; (8001550 <HAL_SD_MspInit+0x1c4>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	f040 80cc 	bne.w	8001548 <HAL_SD_MspInit+0x1bc>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013b0:	4b68      	ldr	r3, [pc, #416]	; (8001554 <HAL_SD_MspInit+0x1c8>)
 80013b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b4:	4a67      	ldr	r2, [pc, #412]	; (8001554 <HAL_SD_MspInit+0x1c8>)
 80013b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013ba:	6453      	str	r3, [r2, #68]	; 0x44
 80013bc:	4b65      	ldr	r3, [pc, #404]	; (8001554 <HAL_SD_MspInit+0x1c8>)
 80013be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c8:	4b62      	ldr	r3, [pc, #392]	; (8001554 <HAL_SD_MspInit+0x1c8>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	4a61      	ldr	r2, [pc, #388]	; (8001554 <HAL_SD_MspInit+0x1c8>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	6313      	str	r3, [r2, #48]	; 0x30
 80013d4:	4b5f      	ldr	r3, [pc, #380]	; (8001554 <HAL_SD_MspInit+0x1c8>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e0:	4b5c      	ldr	r3, [pc, #368]	; (8001554 <HAL_SD_MspInit+0x1c8>)
 80013e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e4:	4a5b      	ldr	r2, [pc, #364]	; (8001554 <HAL_SD_MspInit+0x1c8>)
 80013e6:	f043 0308 	orr.w	r3, r3, #8
 80013ea:	6313      	str	r3, [r2, #48]	; 0x30
 80013ec:	4b59      	ldr	r3, [pc, #356]	; (8001554 <HAL_SD_MspInit+0x1c8>)
 80013ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f0:	f003 0308 	and.w	r3, r3, #8
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800140a:	230c      	movs	r3, #12
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	4850      	ldr	r0, [pc, #320]	; (8001558 <HAL_SD_MspInit+0x1cc>)
 8001416:	f024 fc3b 	bl	8025c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 800141a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800141e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001424:	2301      	movs	r3, #1
 8001426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800142c:	230c      	movs	r3, #12
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	4848      	ldr	r0, [pc, #288]	; (8001558 <HAL_SD_MspInit+0x1cc>)
 8001438:	f024 fc2a 	bl	8025c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800143c:	2304      	movs	r3, #4
 800143e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001444:	2301      	movs	r3, #1
 8001446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800144c:	230c      	movs	r3, #12
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	4841      	ldr	r0, [pc, #260]	; (800155c <HAL_SD_MspInit+0x1d0>)
 8001458:	f024 fc1a 	bl	8025c90 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800145c:	4b40      	ldr	r3, [pc, #256]	; (8001560 <HAL_SD_MspInit+0x1d4>)
 800145e:	4a41      	ldr	r2, [pc, #260]	; (8001564 <HAL_SD_MspInit+0x1d8>)
 8001460:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001462:	4b3f      	ldr	r3, [pc, #252]	; (8001560 <HAL_SD_MspInit+0x1d4>)
 8001464:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001468:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800146a:	4b3d      	ldr	r3, [pc, #244]	; (8001560 <HAL_SD_MspInit+0x1d4>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001470:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <HAL_SD_MspInit+0x1d4>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001476:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <HAL_SD_MspInit+0x1d4>)
 8001478:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800147c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800147e:	4b38      	ldr	r3, [pc, #224]	; (8001560 <HAL_SD_MspInit+0x1d4>)
 8001480:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001484:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001486:	4b36      	ldr	r3, [pc, #216]	; (8001560 <HAL_SD_MspInit+0x1d4>)
 8001488:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800148c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 800148e:	4b34      	ldr	r3, [pc, #208]	; (8001560 <HAL_SD_MspInit+0x1d4>)
 8001490:	2220      	movs	r2, #32
 8001492:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001494:	4b32      	ldr	r3, [pc, #200]	; (8001560 <HAL_SD_MspInit+0x1d4>)
 8001496:	2200      	movs	r2, #0
 8001498:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800149a:	4b31      	ldr	r3, [pc, #196]	; (8001560 <HAL_SD_MspInit+0x1d4>)
 800149c:	2204      	movs	r2, #4
 800149e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014a0:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <HAL_SD_MspInit+0x1d4>)
 80014a2:	2203      	movs	r2, #3
 80014a4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80014a6:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <HAL_SD_MspInit+0x1d4>)
 80014a8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80014ae:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <HAL_SD_MspInit+0x1d4>)
 80014b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014b4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80014b6:	482a      	ldr	r0, [pc, #168]	; (8001560 <HAL_SD_MspInit+0x1d4>)
 80014b8:	f024 f902 	bl	80256c0 <HAL_DMA_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_SD_MspInit+0x13a>
    {
      Error_Handler();
 80014c2:	f7ff ff3f 	bl	8001344 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a25      	ldr	r2, [pc, #148]	; (8001560 <HAL_SD_MspInit+0x1d4>)
 80014ca:	641a      	str	r2, [r3, #64]	; 0x40
 80014cc:	4a24      	ldr	r2, [pc, #144]	; (8001560 <HAL_SD_MspInit+0x1d4>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80014d2:	4b25      	ldr	r3, [pc, #148]	; (8001568 <HAL_SD_MspInit+0x1dc>)
 80014d4:	4a25      	ldr	r2, [pc, #148]	; (800156c <HAL_SD_MspInit+0x1e0>)
 80014d6:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80014d8:	4b23      	ldr	r3, [pc, #140]	; (8001568 <HAL_SD_MspInit+0x1dc>)
 80014da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014de:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014e0:	4b21      	ldr	r3, [pc, #132]	; (8001568 <HAL_SD_MspInit+0x1dc>)
 80014e2:	2240      	movs	r2, #64	; 0x40
 80014e4:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <HAL_SD_MspInit+0x1dc>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <HAL_SD_MspInit+0x1dc>)
 80014ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f2:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014f4:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <HAL_SD_MspInit+0x1dc>)
 80014f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014fa:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014fc:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <HAL_SD_MspInit+0x1dc>)
 80014fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001502:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <HAL_SD_MspInit+0x1dc>)
 8001506:	2220      	movs	r2, #32
 8001508:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <HAL_SD_MspInit+0x1dc>)
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <HAL_SD_MspInit+0x1dc>)
 8001512:	2204      	movs	r2, #4
 8001514:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <HAL_SD_MspInit+0x1dc>)
 8001518:	2203      	movs	r2, #3
 800151a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HAL_SD_MspInit+0x1dc>)
 800151e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001524:	4b10      	ldr	r3, [pc, #64]	; (8001568 <HAL_SD_MspInit+0x1dc>)
 8001526:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800152a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800152c:	480e      	ldr	r0, [pc, #56]	; (8001568 <HAL_SD_MspInit+0x1dc>)
 800152e:	f024 f8c7 	bl	80256c0 <HAL_DMA_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <HAL_SD_MspInit+0x1b0>
    {
      Error_Handler();
 8001538:	f7ff ff04 	bl	8001344 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <HAL_SD_MspInit+0x1dc>)
 8001540:	63da      	str	r2, [r3, #60]	; 0x3c
 8001542:	4a09      	ldr	r2, [pc, #36]	; (8001568 <HAL_SD_MspInit+0x1dc>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	; 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40012c00 	.word	0x40012c00
 8001554:	40023800 	.word	0x40023800
 8001558:	40020800 	.word	0x40020800
 800155c:	40020c00 	.word	0x40020c00
 8001560:	20021680 	.word	0x20021680
 8001564:	40026458 	.word	0x40026458
 8001568:	200216e0 	.word	0x200216e0
 800156c:	400264a0 	.word	0x400264a0

08001570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <HAL_MspInit+0x44>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <HAL_MspInit+0x44>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001580:	6413      	str	r3, [r2, #64]	; 0x40
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <HAL_MspInit+0x44>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_MspInit+0x44>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	4a08      	ldr	r2, [pc, #32]	; (80015b4 <HAL_MspInit+0x44>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001598:	6453      	str	r3, [r2, #68]	; 0x44
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_MspInit+0x44>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800

080015b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08c      	sub	sp, #48	; 0x30
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	2019      	movs	r0, #25
 80015ce:	f024 f84d 	bl	802566c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80015d2:	2019      	movs	r0, #25
 80015d4:	f024 f866 	bl	80256a4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80015d8:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <HAL_InitTick+0xa0>)
 80015da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015dc:	4a1e      	ldr	r2, [pc, #120]	; (8001658 <HAL_InitTick+0xa0>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6453      	str	r3, [r2, #68]	; 0x44
 80015e4:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <HAL_InitTick+0xa0>)
 80015e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015f0:	f107 0210 	add.w	r2, r7, #16
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f026 f8dc 	bl	80277b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001600:	f026 f8c6 	bl	8027790 <HAL_RCC_GetPCLK2Freq>
 8001604:	4603      	mov	r3, r0
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800160a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160c:	4a13      	ldr	r2, [pc, #76]	; (800165c <HAL_InitTick+0xa4>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	0c9b      	lsrs	r3, r3, #18
 8001614:	3b01      	subs	r3, #1
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_InitTick+0xa8>)
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <HAL_InitTick+0xac>)
 800161c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <HAL_InitTick+0xa8>)
 8001620:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001624:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001626:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <HAL_InitTick+0xa8>)
 8001628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <HAL_InitTick+0xa8>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_InitTick+0xa8>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001638:	4809      	ldr	r0, [pc, #36]	; (8001660 <HAL_InitTick+0xa8>)
 800163a:	f027 fef8 	bl	802942e <HAL_TIM_Base_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d104      	bne.n	800164e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001644:	4806      	ldr	r0, [pc, #24]	; (8001660 <HAL_InitTick+0xa8>)
 8001646:	f027 ff27 	bl	8029498 <HAL_TIM_Base_Start_IT>
 800164a:	4603      	mov	r3, r0
 800164c:	e000      	b.n	8001650 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
}
 8001650:	4618      	mov	r0, r3
 8001652:	3730      	adds	r7, #48	; 0x30
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40023800 	.word	0x40023800
 800165c:	431bde83 	.word	0x431bde83
 8001660:	20021740 	.word	0x20021740
 8001664:	40010000 	.word	0x40010000

08001668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800166c:	f026 f8d6 	bl	802781c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <NMI_Handler+0x8>

08001672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <HardFault_Handler+0x4>

08001678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800167c:	e7fe      	b.n	800167c <MemManage_Handler+0x4>

0800167e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001682:	e7fe      	b.n	8001682 <BusFault_Handler+0x4>

08001684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <UsageFault_Handler+0x4>

0800168a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016ca:	f027 ff0f 	bl	80294ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20021740 	.word	0x20021740

080016d8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <DMA2_Stream3_IRQHandler+0x10>)
 80016de:	f024 f89d 	bl	802581c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20021680 	.word	0x20021680

080016ec <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <DMA2_Stream6_IRQHandler+0x10>)
 80016f2:	f024 f893 	bl	802581c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200216e0 	.word	0x200216e0

08001700 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <I2C3_EV_IRQHandler+0x10>)
 8001706:	f024 fe49 	bl	802639c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200215b0 	.word	0x200215b0

08001714 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <SystemInit+0x28>)
 800171a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800171e:	4a07      	ldr	r2, [pc, #28]	; (800173c <SystemInit+0x28>)
 8001720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <SystemInit+0x28>)
 800172a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800172e:	609a      	str	r2, [r3, #8]
#endif
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001778 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001744:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001746:	e003      	b.n	8001750 <LoopCopyDataInit>

08001748 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800174a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800174c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800174e:	3104      	adds	r1, #4

08001750 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001750:	480b      	ldr	r0, [pc, #44]	; (8001780 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001754:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001756:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001758:	d3f6      	bcc.n	8001748 <CopyDataInit>
  ldr  r2, =_sbss
 800175a:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800175c:	e002      	b.n	8001764 <LoopFillZerobss>

0800175e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800175e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001760:	f842 3b04 	str.w	r3, [r2], #4

08001764 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001766:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001768:	d3f9      	bcc.n	800175e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800176a:	f7ff ffd3 	bl	8001714 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800176e:	f02b ffbb 	bl	802d6e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001772:	f7ff fd05 	bl	8001180 <main>
  bx  lr    
 8001776:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001778:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800177c:	08031424 	.word	0x08031424
  ldr  r0, =_sdata
 8001780:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001784:	2000141c 	.word	0x2000141c
  ldr  r2, =_sbss
 8001788:	2000141c 	.word	0x2000141c
  ldr  r3, = _ebss
 800178c:	20022980 	.word	0x20022980

08001790 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001790:	e7fe      	b.n	8001790 <ADC_IRQHandler>

08001792 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d102      	bne.n	80017a6 <lv_disp_get_scr_act+0x14>
 80017a0:	f018 fde6 	bl	801a370 <lv_disp_get_default>
 80017a4:	6078      	str	r0, [r7, #4]
    if(!disp) {
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <lv_disp_get_scr_act+0x1e>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	e001      	b.n	80017b4 <lv_disp_get_scr_act+0x22>
    }

    return disp->act_scr;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d102      	bne.n	80017d0 <lv_disp_get_scr_prev+0x14>
 80017ca:	f018 fdd1 	bl	801a370 <lv_disp_get_default>
 80017ce:	6078      	str	r0, [r7, #4]
    if(!disp) {
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <lv_disp_get_scr_prev+0x1e>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e001      	b.n	80017de <lv_disp_get_scr_prev+0x22>
    }

    return disp->prev_scr;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <lv_disp_get_layer_top+0x14>
 80017f4:	f018 fdbc 	bl	801a370 <lv_disp_get_default>
 80017f8:	6078      	str	r0, [r7, #4]
    if(!disp) {
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <lv_disp_get_layer_top+0x1e>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
 8001800:	2300      	movs	r3, #0
 8001802:	e001      	b.n	8001808 <lv_disp_get_layer_top+0x22>
    }

    return disp->top_layer;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d102      	bne.n	8001824 <lv_disp_get_layer_sys+0x14>
 800181e:	f018 fda7 	bl	801a370 <lv_disp_get_default>
 8001822:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <lv_disp_get_layer_sys+0x1e>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
 800182a:	2300      	movs	r3, #0
 800182c:	e001      	b.n	8001832 <lv_disp_get_layer_sys+0x22>
    }

    return disp->sys_layer;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <_lv_group_init>:

/**
 * Init. the group module
 */
void _lv_group_init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8001840:	2118      	movs	r1, #24
 8001842:	4802      	ldr	r0, [pc, #8]	; (800184c <_lv_group_init+0x10>)
 8001844:	f01a fbba 	bl	801bfbc <_lv_ll_init>
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200218f0 	.word	0x200218f0

08001850 <lv_group_add_obj>:
 * Add an object to a group
 * @param group pointer to a group
 * @param obj pointer to an object to add
 */
void lv_group_add_obj(lv_group_t * group, lv_obj_t * obj)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
    if(group == NULL) return;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d04e      	beq.n	80018fe <lv_group_add_obj+0xae>
    /*Do not add the object twice*/
    lv_obj_t ** obj_i;
    _LV_LL_READ(group->obj_ll, obj_i) {
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4618      	mov	r0, r3
 8001864:	f01a fd20 	bl	801c2a8 <_lv_ll_get_head>
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	e00a      	b.n	8001882 <lv_group_add_obj+0x32>
        if((*obj_i) == obj) {
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d045      	beq.n	8001902 <lv_group_add_obj+0xb2>
    _LV_LL_READ(group->obj_ll, obj_i) {
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	4618      	mov	r0, r3
 800187c:	f01a fd3a 	bl	801c2f4 <_lv_ll_get_next>
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f1      	bne.n	800186c <lv_group_add_obj+0x1c>
            return;
        }
    }

    /*If the object is already in a group and focused then defocus it*/
    if(obj->group_p) {
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00a      	beq.n	80018a6 <lv_group_add_obj+0x56>
        if(lv_obj_is_focused(obj)) {
 8001890:	6838      	ldr	r0, [r7, #0]
 8001892:	f005 fe3f 	bl	8007514 <lv_obj_is_focused>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d004      	beq.n	80018a6 <lv_group_add_obj+0x56>
            lv_group_refocus(obj->group_p);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 f999 	bl	8001bd8 <lv_group_refocus>

            LV_LOG_INFO("lv_group_add_obj: assign object to an other group");
        }
    }

    obj->group_p     = group;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	639a      	str	r2, [r3, #56]	; 0x38
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f01a fc18 	bl	801c0e4 <_lv_ll_ins_tail>
 80018b4:	60b8      	str	r0, [r7, #8]
    LV_ASSERT_MEM(next);
 80018b6:	68b8      	ldr	r0, [r7, #8]
 80018b8:	f01a f940 	bl	801bb3c <lv_debug_check_null>
 80018bc:	4603      	mov	r3, r0
 80018be:	f083 0301 	eor.w	r3, r3, #1
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <lv_group_add_obj+0x8a>
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	f04f 0400 	mov.w	r4, #0
 80018ce:	461a      	mov	r2, r3
 80018d0:	4623      	mov	r3, r4
 80018d2:	480f      	ldr	r0, [pc, #60]	; (8001910 <lv_group_add_obj+0xc0>)
 80018d4:	f01a f942 	bl	801bb5c <lv_debug_log_error>
 80018d8:	e7fe      	b.n	80018d8 <lv_group_add_obj+0x88>
    if(next == NULL) return;
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d012      	beq.n	8001906 <lv_group_add_obj+0xb6>
    *next = obj;
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	601a      	str	r2, [r3, #0]

    /* If the head and the tail is equal then there is only one object in the linked list.
     * In this case automatically activate it*/
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f01a fcdd 	bl	801c2a8 <_lv_ll_get_head>
 80018ee:	4602      	mov	r2, r0
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d108      	bne.n	8001908 <lv_group_add_obj+0xb8>
        lv_group_refocus(group);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f96e 	bl	8001bd8 <lv_group_refocus>
 80018fc:	e004      	b.n	8001908 <lv_group_add_obj+0xb8>
    if(group == NULL) return;
 80018fe:	bf00      	nop
 8001900:	e002      	b.n	8001908 <lv_group_add_obj+0xb8>
            return;
 8001902:	bf00      	nop
 8001904:	e000      	b.n	8001908 <lv_group_add_obj+0xb8>
    if(next == NULL) return;
 8001906:	bf00      	nop
    }
}
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	bd90      	pop	{r4, r7, pc}
 800190e:	bf00      	nop
 8001910:	0802d798 	.word	0x0802d798

08001914 <lv_group_focus_obj>:
/**
 * Focus on an object (defocus the current)
 * @param obj pointer to an object to focus on
 */
void lv_group_focus_obj(lv_obj_t * obj)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
    if(obj == NULL) return;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 8084 	beq.w	8001a2c <lv_group_focus_obj+0x118>
    lv_group_t * g = obj->group_p;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001928:	613b      	str	r3, [r7, #16]
    if(g == NULL) return;
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d07f      	beq.n	8001a30 <lv_group_focus_obj+0x11c>

    if(g->frozen != 0) return;
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	7d1b      	ldrb	r3, [r3, #20]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d17a      	bne.n	8001a34 <lv_group_focus_obj+0x120>

    if(g->obj_focus != NULL && obj == *g->obj_focus) return;
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d005      	beq.n	8001952 <lv_group_focus_obj+0x3e>
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	429a      	cmp	r2, r3
 8001950:	d072      	beq.n	8001a38 <lv_group_focus_obj+0x124>

    /*On defocus edit mode must be leaved*/
    lv_group_set_editing(g, false);
 8001952:	2100      	movs	r1, #0
 8001954:	6938      	ldr	r0, [r7, #16]
 8001956:	f000 f8ca 	bl	8001aee <lv_group_set_editing>

    lv_obj_t ** i;
    _LV_LL_READ(g->obj_ll, i) {
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4618      	mov	r0, r3
 800195e:	f01a fca3 	bl	801c2a8 <_lv_ll_get_head>
 8001962:	6178      	str	r0, [r7, #20]
 8001964:	e05e      	b.n	8001a24 <lv_group_focus_obj+0x110>
        if(*i == obj) {
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	429a      	cmp	r2, r3
 800196e:	d153      	bne.n	8001a18 <lv_group_focus_obj+0x104>
            if(g->obj_focus != NULL) {
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d01c      	beq.n	80019b2 <lv_group_focus_obj+0x9e>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	68d2      	ldr	r2, [r2, #12]
 8001984:	6810      	ldr	r0, [r2, #0]
 8001986:	2200      	movs	r2, #0
 8001988:	2117      	movs	r1, #23
 800198a:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2200      	movs	r2, #0
 8001994:	210e      	movs	r1, #14
 8001996:	4618      	mov	r0, r3
 8001998:	f004 fe0a 	bl	80065b0 <lv_event_send>
 800199c:	4603      	mov	r3, r0
 800199e:	73fb      	strb	r3, [r7, #15]
                if(res != LV_RES_OK) return;
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d14a      	bne.n	8001a3c <lv_group_focus_obj+0x128>
                lv_obj_invalidate(*g->obj_focus);
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f003 ff4b 	bl	8005848 <lv_obj_invalidate>
            }

            g->obj_focus = i;
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	60da      	str	r2, [r3, #12]

            if(g->obj_focus != NULL) {
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d03f      	beq.n	8001a40 <lv_group_focus_obj+0x12c>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	68d2      	ldr	r2, [r2, #12]
 80019cc:	6810      	ldr	r0, [r2, #0]
 80019ce:	2200      	movs	r2, #0
 80019d0:	2116      	movs	r1, #22
 80019d2:	4798      	blx	r3
                if(g->focus_cb) g->focus_cb(g);
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <lv_group_focus_obj+0xd0>
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	6938      	ldr	r0, [r7, #16]
 80019e2:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, NULL);
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2200      	movs	r2, #0
 80019ec:	210d      	movs	r1, #13
 80019ee:	4618      	mov	r0, r3
 80019f0:	f004 fdde 	bl	80065b0 <lv_event_send>
 80019f4:	4603      	mov	r3, r0
 80019f6:	73bb      	strb	r3, [r7, #14]
                if(res != LV_RES_OK) return;
 80019f8:	7bbb      	ldrb	r3, [r7, #14]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d122      	bne.n	8001a44 <lv_group_focus_obj+0x130>
                lv_obj_invalidate(*g->obj_focus);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 ff1f 	bl	8005848 <lv_obj_invalidate>

                /*If the object or its parent has `top == true` bring it to the foreground*/
                obj_to_foreground(*g->obj_focus);
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 f9e5 	bl	8001de0 <obj_to_foreground>
            }
            break;
 8001a16:	e013      	b.n	8001a40 <lv_group_focus_obj+0x12c>
    _LV_LL_READ(g->obj_ll, i) {
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	6979      	ldr	r1, [r7, #20]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f01a fc69 	bl	801c2f4 <_lv_ll_get_next>
 8001a22:	6178      	str	r0, [r7, #20]
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d19d      	bne.n	8001966 <lv_group_focus_obj+0x52>
 8001a2a:	e00c      	b.n	8001a46 <lv_group_focus_obj+0x132>
    if(obj == NULL) return;
 8001a2c:	bf00      	nop
 8001a2e:	e00a      	b.n	8001a46 <lv_group_focus_obj+0x132>
    if(g == NULL) return;
 8001a30:	bf00      	nop
 8001a32:	e008      	b.n	8001a46 <lv_group_focus_obj+0x132>
    if(g->frozen != 0) return;
 8001a34:	bf00      	nop
 8001a36:	e006      	b.n	8001a46 <lv_group_focus_obj+0x132>
    if(g->obj_focus != NULL && obj == *g->obj_focus) return;
 8001a38:	bf00      	nop
 8001a3a:	e004      	b.n	8001a46 <lv_group_focus_obj+0x132>
                if(res != LV_RES_OK) return;
 8001a3c:	bf00      	nop
 8001a3e:	e002      	b.n	8001a46 <lv_group_focus_obj+0x132>
            break;
 8001a40:	bf00      	nop
 8001a42:	e000      	b.n	8001a46 <lv_group_focus_obj+0x132>
                if(res != LV_RES_OK) return;
 8001a44:	bf00      	nop
        }
    }
}
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <lv_group_focus_next>:
/**
 * Focus the next object in a group (defocus the current)
 * @param group pointer to a group
 */
void lv_group_focus_next(lv_group_t * group)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
    focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
 8001a54:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <lv_group_focus_next+0x1c>)
 8001a56:	4905      	ldr	r1, [pc, #20]	; (8001a6c <lv_group_focus_next+0x20>)
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f8ee 	bl	8001c3a <focus_next_core>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	0801c2f5 	.word	0x0801c2f5
 8001a6c:	0801c2a9 	.word	0x0801c2a9

08001a70 <lv_group_focus_prev>:
/**
 * Focus the previous object in a group (defocus the current)
 * @param group pointer to a group
 */
void lv_group_focus_prev(lv_group_t * group)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
    focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
 8001a78:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <lv_group_focus_prev+0x1c>)
 8001a7a:	4905      	ldr	r1, [pc, #20]	; (8001a90 <lv_group_focus_prev+0x20>)
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f8dc 	bl	8001c3a <focus_next_core>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	0801c329 	.word	0x0801c329
 8001a90:	0801c2cf 	.word	0x0801c2cf

08001a94 <lv_group_send_data>:
 * @param group pointer to a group
 * @param c a character (use LV_KEY_.. to navigate)
 * @return result of focused object in group.
 */
lv_res_t lv_group_send_data(lv_group_t * group, uint32_t c)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
    lv_obj_t * act = lv_group_get_focused(group);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f868 	bl	8001b74 <lv_group_get_focused>
 8001aa4:	60f8      	str	r0, [r7, #12]
    if(act == NULL) return LV_RES_OK;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <lv_group_send_data+0x1c>
 8001aac:	2301      	movs	r3, #1
 8001aae:	e01a      	b.n	8001ae6 <lv_group_send_data+0x52>

    lv_res_t res;

    res = act->signal_cb(act, LV_SIGNAL_CONTROL, &c);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	463a      	mov	r2, r7
 8001ab6:	2118      	movs	r1, #24
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	4798      	blx	r3
 8001abc:	4603      	mov	r3, r0
 8001abe:	72fb      	strb	r3, [r7, #11]
    if(res != LV_RES_OK) return res;
 8001ac0:	7afb      	ldrb	r3, [r7, #11]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d001      	beq.n	8001aca <lv_group_send_data+0x36>
 8001ac6:	7afb      	ldrb	r3, [r7, #11]
 8001ac8:	e00d      	b.n	8001ae6 <lv_group_send_data+0x52>

    res = lv_event_send(act, LV_EVENT_KEY, &c);
 8001aca:	463b      	mov	r3, r7
 8001acc:	461a      	mov	r2, r3
 8001ace:	210c      	movs	r1, #12
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f004 fd6d 	bl	80065b0 <lv_event_send>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	72fb      	strb	r3, [r7, #11]
    if(res != LV_RES_OK) return res;
 8001ada:	7afb      	ldrb	r3, [r7, #11]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d001      	beq.n	8001ae4 <lv_group_send_data+0x50>
 8001ae0:	7afb      	ldrb	r3, [r7, #11]
 8001ae2:	e000      	b.n	8001ae6 <lv_group_send_data+0x52>

    return res;
 8001ae4:	7afb      	ldrb	r3, [r7, #11]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <lv_group_set_editing>:
 * Manually set the current mode (edit or navigate).
 * @param group pointer to group
 * @param edit: true: edit mode; false: navigate mode
 */
void lv_group_set_editing(lv_group_t * group, bool edit)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	70fb      	strb	r3, [r7, #3]
    if(group == NULL) return;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d031      	beq.n	8001b64 <lv_group_set_editing+0x76>
    uint8_t en_val = edit ? 1 : 0;
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	75fb      	strb	r3, [r7, #23]

    if(en_val == group->editing) return; /*Do not set the same mode again*/
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7d1b      	ldrb	r3, [r3, #20]
 8001b08:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d028      	beq.n	8001b68 <lv_group_set_editing+0x7a>

    group->editing     = en_val;
 8001b16:	7dfb      	ldrb	r3, [r7, #23]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	b2d9      	uxtb	r1, r3
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	7d13      	ldrb	r3, [r2, #20]
 8001b22:	f361 0341 	bfi	r3, r1, #1, #1
 8001b26:	7513      	strb	r3, [r2, #20]
    lv_obj_t * focused = lv_group_get_focused(group);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f823 	bl	8001b74 <lv_group_get_focused>
 8001b2e:	6138      	str	r0, [r7, #16]

    if(focused) {
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d01b      	beq.n	8001b6e <lv_group_set_editing+0x80>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2116      	movs	r1, #22
 8001b3e:	6938      	ldr	r0, [r7, #16]
 8001b40:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	210d      	movs	r1, #13
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f004 fd2f 	bl	80065b0 <lv_event_send>
 8001b52:	4603      	mov	r3, r0
 8001b54:	73fb      	strb	r3, [r7, #15]
        if(res != LV_RES_OK) return;
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d107      	bne.n	8001b6c <lv_group_set_editing+0x7e>

        lv_obj_invalidate(focused);
 8001b5c:	6938      	ldr	r0, [r7, #16]
 8001b5e:	f003 fe73 	bl	8005848 <lv_obj_invalidate>
 8001b62:	e004      	b.n	8001b6e <lv_group_set_editing+0x80>
    if(group == NULL) return;
 8001b64:	bf00      	nop
 8001b66:	e002      	b.n	8001b6e <lv_group_set_editing+0x80>
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 8001b68:	bf00      	nop
 8001b6a:	e000      	b.n	8001b6e <lv_group_set_editing+0x80>
        if(res != LV_RES_OK) return;
 8001b6c:	bf00      	nop
    }
}
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <lv_group_get_focused>:
 * Get the focused object or NULL if there isn't one
 * @param group pointer to a group
 * @return pointer to the focused object
 */
lv_obj_t * lv_group_get_focused(const lv_group_t * group)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
    if(!group) return NULL;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <lv_group_get_focused+0x12>
 8001b82:	2300      	movs	r3, #0
 8001b84:	e008      	b.n	8001b98 <lv_group_get_focused+0x24>
    if(group->obj_focus == NULL) return NULL;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <lv_group_get_focused+0x1e>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e002      	b.n	8001b98 <lv_group_get_focused+0x24>

    return *group->obj_focus;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <lv_group_get_editing>:
 * Get the current mode (edit or navigate).
 * @param group pointer to group
 * @return true: edit mode; false: navigate mode
 */
bool lv_group_get_editing(const lv_group_t * group)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
    if(!group) return false;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <lv_group_get_editing+0x12>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e00a      	b.n	8001bcc <lv_group_get_editing+0x28>
    return group->editing ? true : false;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7d1b      	ldrb	r3, [r3, #20]
 8001bba:	085b      	lsrs	r3, r3, #1
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	bf14      	ite	ne
 8001bc6:	2301      	movne	r3, #1
 8001bc8:	2300      	moveq	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <lv_group_refocus>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_group_refocus(lv_group_t * g)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
    /*Refocus must temporarily allow wrapping to work correctly*/
    uint8_t temp_wrap = g->wrap;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7d1b      	ldrb	r3, [r3, #20]
 8001be4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	73fb      	strb	r3, [r7, #15]
    g->wrap           = 1;
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	7d13      	ldrb	r3, [r2, #20]
 8001bf0:	f043 0310 	orr.w	r3, r3, #16
 8001bf4:	7513      	strb	r3, [r2, #20]

    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	7d1b      	ldrb	r3, [r3, #20]
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d103      	bne.n	8001c0c <lv_group_refocus+0x34>
        lv_group_focus_next(g);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff ff21 	bl	8001a4c <lv_group_focus_next>
 8001c0a:	e009      	b.n	8001c20 <lv_group_refocus+0x48>
    else if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_PREV)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7d1b      	ldrb	r3, [r3, #20]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <lv_group_refocus+0x48>
        lv_group_focus_prev(g);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ff28 	bl	8001a70 <lv_group_focus_prev>
    /*Restore wrap property*/
    g->wrap = temp_wrap;
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	b2d9      	uxtb	r1, r3
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	7d13      	ldrb	r3, [r2, #20]
 8001c2c:	f361 1304 	bfi	r3, r1, #4, #1
 8001c30:	7513      	strb	r3, [r2, #20]
}
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <focus_next_core>:

static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
                            void * (*move)(const lv_ll_t *, const void *))
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b088      	sub	sp, #32
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
    if(group->frozen) return;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	7d1b      	ldrb	r3, [r3, #20]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f040 80b3 	bne.w	8001dbc <focus_next_core+0x182>

    lv_obj_t ** obj_next     = group->obj_focus;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	61fb      	str	r3, [r7, #28]
    lv_obj_t ** obj_sentinel = NULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61bb      	str	r3, [r7, #24]
    bool can_move            = true;
 8001c60:	2301      	movs	r3, #1
 8001c62:	75fb      	strb	r3, [r7, #23]
    bool can_begin           = true;
 8001c64:	2301      	movs	r3, #1
 8001c66:	75bb      	strb	r3, [r7, #22]

    for(;;) {
        if(obj_next == NULL) {
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d11a      	bne.n	8001ca4 <focus_next_core+0x6a>
            if(group->wrap || obj_sentinel == NULL) {
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	7d1b      	ldrb	r3, [r3, #20]
 8001c72:	f003 0310 	and.w	r3, r3, #16
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d103      	bne.n	8001c84 <focus_next_core+0x4a>
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f040 809e 	bne.w	8001dc0 <focus_next_core+0x186>
                if(!can_begin) return;
 8001c84:	7dbb      	ldrb	r3, [r7, #22]
 8001c86:	f083 0301 	eor.w	r3, r3, #1
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f040 8099 	bne.w	8001dc4 <focus_next_core+0x18a>
                obj_next  = begin(&group->obj_ll);
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	4610      	mov	r0, r2
 8001c98:	4798      	blx	r3
 8001c9a:	61f8      	str	r0, [r7, #28]
                can_move  = false;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	75fb      	strb	r3, [r7, #23]
                can_begin = false;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	75bb      	strb	r3, [r7, #22]
                /*Currently focused object is the last/first in the group, keep it that way*/
                return;
            }
        }

        if(obj_sentinel == NULL) {
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d105      	bne.n	8001cb6 <focus_next_core+0x7c>
            obj_sentinel = obj_next;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	61bb      	str	r3, [r7, #24]
            if(obj_sentinel == NULL) return; /*Group is empty*/
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 8089 	beq.w	8001dc8 <focus_next_core+0x18e>
        }

        if(can_move) {
 8001cb6:	7dfb      	ldrb	r3, [r7, #23]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d009      	beq.n	8001cd0 <focus_next_core+0x96>
            obj_next = move(&group->obj_ll, obj_next);
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69f9      	ldr	r1, [r7, #28]
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4798      	blx	r3
 8001cc6:	61f8      	str	r0, [r7, #28]

            /*Give up if we walked the entire list and haven't found another visible object*/
            if(obj_next == obj_sentinel) return;
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d07d      	beq.n	8001dcc <focus_next_core+0x192>
        }

        can_move = true;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	75fb      	strb	r3, [r7, #23]

        if(obj_next == NULL) continue;
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d016      	beq.n	8001d08 <focus_next_core+0xce>
        if(lv_obj_get_state(*obj_next, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) continue;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f005 fbc7 	bl	8007474 <lv_obj_get_state>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f003 0320 	and.w	r3, r3, #32
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10d      	bne.n	8001d0c <focus_next_core+0xd2>

        /*Hidden and disabled objects don't receive focus*/
        if(!lv_obj_get_hidden(*obj_next)) break;
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f005 fa73 	bl	80071e0 <lv_obj_get_hidden>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f083 0301 	eor.w	r3, r3, #1
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d104      	bne.n	8001d10 <focus_next_core+0xd6>
 8001d06:	e7af      	b.n	8001c68 <focus_next_core+0x2e>
        if(obj_next == NULL) continue;
 8001d08:	bf00      	nop
 8001d0a:	e7ad      	b.n	8001c68 <focus_next_core+0x2e>
        if(lv_obj_get_state(*obj_next, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) continue;
 8001d0c:	bf00      	nop
        if(obj_next == NULL) {
 8001d0e:	e7ab      	b.n	8001c68 <focus_next_core+0x2e>
        if(!lv_obj_get_hidden(*obj_next)) break;
 8001d10:	bf00      	nop
    }

    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	69fa      	ldr	r2, [r7, #28]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d059      	beq.n	8001dd0 <focus_next_core+0x196>

    if(group->obj_focus) {
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01c      	beq.n	8001d5e <focus_next_core+0x124>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	68d2      	ldr	r2, [r2, #12]
 8001d30:	6810      	ldr	r0, [r2, #0]
 8001d32:	2200      	movs	r2, #0
 8001d34:	2117      	movs	r1, #23
 8001d36:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	210e      	movs	r1, #14
 8001d42:	4618      	mov	r0, r3
 8001d44:	f004 fc34 	bl	80065b0 <lv_event_send>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	757b      	strb	r3, [r7, #21]
        if(res != LV_RES_OK) return;
 8001d4c:	7d7b      	ldrb	r3, [r7, #21]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d140      	bne.n	8001dd4 <focus_next_core+0x19a>
        lv_obj_invalidate(*group->obj_focus);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 fd75 	bl	8005848 <lv_obj_invalidate>
    }

    group->obj_focus = obj_next;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	60da      	str	r2, [r3, #12]

    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	68d2      	ldr	r2, [r2, #12]
 8001d70:	6810      	ldr	r0, [r2, #0]
 8001d72:	2200      	movs	r2, #0
 8001d74:	2116      	movs	r1, #22
 8001d76:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	210d      	movs	r1, #13
 8001d82:	4618      	mov	r0, r3
 8001d84:	f004 fc14 	bl	80065b0 <lv_event_send>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	753b      	strb	r3, [r7, #20]
    if(res != LV_RES_OK) return;
 8001d8c:	7d3b      	ldrb	r3, [r7, #20]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d122      	bne.n	8001dd8 <focus_next_core+0x19e>

    /*If the object or its parent has `top == true` bring it to the foreground*/
    obj_to_foreground(*group->obj_focus);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 f821 	bl	8001de0 <obj_to_foreground>

    lv_obj_invalidate(*group->obj_focus);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f003 fd4f 	bl	8005848 <lv_obj_invalidate>

    if(group->focus_cb) group->focus_cb(group);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d013      	beq.n	8001dda <focus_next_core+0x1a0>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	4798      	blx	r3
 8001dba:	e00e      	b.n	8001dda <focus_next_core+0x1a0>
    if(group->frozen) return;
 8001dbc:	bf00      	nop
 8001dbe:	e00c      	b.n	8001dda <focus_next_core+0x1a0>
                return;
 8001dc0:	bf00      	nop
 8001dc2:	e00a      	b.n	8001dda <focus_next_core+0x1a0>
                if(!can_begin) return;
 8001dc4:	bf00      	nop
 8001dc6:	e008      	b.n	8001dda <focus_next_core+0x1a0>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 8001dc8:	bf00      	nop
 8001dca:	e006      	b.n	8001dda <focus_next_core+0x1a0>
            if(obj_next == obj_sentinel) return;
 8001dcc:	bf00      	nop
 8001dce:	e004      	b.n	8001dda <focus_next_core+0x1a0>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 8001dd0:	bf00      	nop
 8001dd2:	e002      	b.n	8001dda <focus_next_core+0x1a0>
        if(res != LV_RES_OK) return;
 8001dd4:	bf00      	nop
 8001dd6:	e000      	b.n	8001dda <focus_next_core+0x1a0>
    if(res != LV_RES_OK) return;
 8001dd8:	bf00      	nop
}
 8001dda:	3720      	adds	r7, #32
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <obj_to_foreground>:

static void obj_to_foreground(lv_obj_t * obj)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	60fb      	str	r3, [r7, #12]
    lv_obj_t * last_top = NULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60bb      	str	r3, [r7, #8]
    while(i != NULL) {
 8001df0:	e00d      	b.n	8001e0e <obj_to_foreground+0x2e>
        if(i->top != 0) last_top = i;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001df8:	f003 0320 	and.w	r3, r3, #32
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <obj_to_foreground+0x26>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	60bb      	str	r3, [r7, #8]
        i = lv_obj_get_parent(i);
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f004 fd3e 	bl	8006888 <lv_obj_get_parent>
 8001e0c:	60f8      	str	r0, [r7, #12]
    while(i != NULL) {
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1ee      	bne.n	8001df2 <obj_to_foreground+0x12>
    }

    if(last_top != NULL) {
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d002      	beq.n	8001e20 <obj_to_foreground+0x40>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
 8001e1a:	68b8      	ldr	r0, [r7, #8]
 8001e1c:	f003 fdfa 	bl	8005a14 <lv_obj_move_foreground>
    }
}
 8001e20:	bf00      	nop
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <_lv_indev_init>:

/**
 * Initialize the display input device subsystem
 */
void _lv_indev_init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
    lv_indev_reset(NULL, NULL); /*Reset all input devices*/
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f000 f8b0 	bl	8001f94 <lv_indev_reset>
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <_lv_indev_read_task>:
/**
 * Called periodically to read the input devices
 * @param param pointer to and input device to read
 */
void _lv_indev_read_task(lv_task_t * task)
{
 8001e38:	b590      	push	{r4, r7, lr}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
    LV_LOG_TRACE("indev read task started");

    lv_indev_data_t data;

    indev_act = task->user_data;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	4a4b      	ldr	r2, [pc, #300]	; (8001f74 <_lv_indev_read_task+0x13c>)
 8001e46:	6013      	str	r3, [r2, #0]

    /*Read and process all indevs*/
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
 8001e48:	4b4a      	ldr	r3, [pc, #296]	; (8001f74 <_lv_indev_read_task+0x13c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 8089 	beq.w	8001f66 <_lv_indev_read_task+0x12e>

    /*Handle reset query before processing the point*/
    indev_proc_reset_query_handler(indev_act);
 8001e54:	4b47      	ldr	r3, [pc, #284]	; (8001f74 <_lv_indev_read_task+0x13c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f001 fb2b 	bl	80034b4 <indev_proc_reset_query_handler>

    if(indev_act->proc.disabled) return;
 8001e5e:	4b45      	ldr	r3, [pc, #276]	; (8001f74 <_lv_indev_read_task+0x13c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d17c      	bne.n	8001f6a <_lv_indev_read_task+0x132>
    bool more_to_read;
    do {
        /*Read the data*/
        more_to_read = _lv_indev_read(indev_act, &data);
 8001e70:	4b40      	ldr	r3, [pc, #256]	; (8001f74 <_lv_indev_read_task+0x13c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f107 020c 	add.w	r2, r7, #12
 8001e78:	4611      	mov	r1, r2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f018 fc60 	bl	801a740 <_lv_indev_read>
 8001e80:	4603      	mov	r3, r0
 8001e82:	77fb      	strb	r3, [r7, #31]

        /*The active object might deleted even in the read function*/
        indev_proc_reset_query_handler(indev_act);
 8001e84:	4b3b      	ldr	r3, [pc, #236]	; (8001f74 <_lv_indev_read_task+0x13c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f001 fb13 	bl	80034b4 <indev_proc_reset_query_handler>
        indev_obj_act = NULL;
 8001e8e:	4b3a      	ldr	r3, [pc, #232]	; (8001f78 <_lv_indev_read_task+0x140>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]

        indev_act->proc.state = data.state;
 8001e94:	4b37      	ldr	r3, [pc, #220]	; (8001f74 <_lv_indev_read_task+0x13c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	7eba      	ldrb	r2, [r7, #26]
 8001e9a:	771a      	strb	r2, [r3, #28]

        /*Save the last activity time*/
        if(indev_act->proc.state == LV_INDEV_STATE_PR) {
 8001e9c:	4b35      	ldr	r3, [pc, #212]	; (8001f74 <_lv_indev_read_task+0x13c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	7f1b      	ldrb	r3, [r3, #28]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d108      	bne.n	8001eb8 <_lv_indev_read_task+0x80>
            indev_act->driver.disp->last_activity_time = lv_tick_get();
 8001ea6:	4b33      	ldr	r3, [pc, #204]	; (8001f74 <_lv_indev_read_task+0x13c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68dc      	ldr	r4, [r3, #12]
 8001eac:	f018 fc86 	bl	801a7bc <lv_tick_get>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8001eb6:	e010      	b.n	8001eda <_lv_indev_read_task+0xa2>
        }
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
 8001eb8:	4b2e      	ldr	r3, [pc, #184]	; (8001f74 <_lv_indev_read_task+0x13c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d10b      	bne.n	8001eda <_lv_indev_read_task+0xa2>
 8001ec2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d007      	beq.n	8001eda <_lv_indev_read_task+0xa2>
            indev_act->driver.disp->last_activity_time = lv_tick_get();
 8001eca:	4b2a      	ldr	r3, [pc, #168]	; (8001f74 <_lv_indev_read_task+0x13c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68dc      	ldr	r4, [r3, #12]
 8001ed0:	f018 fc74 	bl	801a7bc <lv_tick_get>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
        }

        if(indev_act->driver.type == LV_INDEV_TYPE_POINTER) {
 8001eda:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <_lv_indev_read_task+0x13c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d108      	bne.n	8001ef6 <_lv_indev_read_task+0xbe>
            indev_pointer_proc(indev_act, &data);
 8001ee4:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <_lv_indev_read_task+0x13c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f107 020c 	add.w	r2, r7, #12
 8001eec:	4611      	mov	r1, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 f8a2 	bl	8002038 <indev_pointer_proc>
 8001ef4:	e028      	b.n	8001f48 <_lv_indev_read_task+0x110>
        }
        else if(indev_act->driver.type == LV_INDEV_TYPE_KEYPAD) {
 8001ef6:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <_lv_indev_read_task+0x13c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d108      	bne.n	8001f12 <_lv_indev_read_task+0xda>
            indev_keypad_proc(indev_act, &data);
 8001f00:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <_lv_indev_read_task+0x13c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f107 020c 	add.w	r2, r7, #12
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 f8e0 	bl	80020d0 <indev_keypad_proc>
 8001f10:	e01a      	b.n	8001f48 <_lv_indev_read_task+0x110>
        }
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER) {
 8001f12:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <_lv_indev_read_task+0x13c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d108      	bne.n	8001f2e <_lv_indev_read_task+0xf6>
            indev_encoder_proc(indev_act, &data);
 8001f1c:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <_lv_indev_read_task+0x13c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f107 020c 	add.w	r2, r7, #12
 8001f24:	4611      	mov	r1, r2
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 fb12 	bl	8002550 <indev_encoder_proc>
 8001f2c:	e00c      	b.n	8001f48 <_lv_indev_read_task+0x110>
        }
        else if(indev_act->driver.type == LV_INDEV_TYPE_BUTTON) {
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <_lv_indev_read_task+0x13c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d107      	bne.n	8001f48 <_lv_indev_read_task+0x110>
            indev_button_proc(indev_act, &data);
 8001f38:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <_lv_indev_read_task+0x13c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f107 020c 	add.w	r2, r7, #12
 8001f40:	4611      	mov	r1, r2
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 fe40 	bl	8002bc8 <indev_button_proc>
        }
        /*Handle reset query if it happened in during processing*/
        indev_proc_reset_query_handler(indev_act);
 8001f48:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <_lv_indev_read_task+0x13c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f001 fab1 	bl	80034b4 <indev_proc_reset_query_handler>
    } while(more_to_read);
 8001f52:	7ffb      	ldrb	r3, [r7, #31]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d18b      	bne.n	8001e70 <_lv_indev_read_task+0x38>

    /*End of indev processing, so no act indev*/
    indev_act     = NULL;
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <_lv_indev_read_task+0x13c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
    indev_obj_act = NULL;
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <_lv_indev_read_task+0x140>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	e002      	b.n	8001f6c <_lv_indev_read_task+0x134>
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
 8001f66:	bf00      	nop
 8001f68:	e000      	b.n	8001f6c <_lv_indev_read_task+0x134>
    if(indev_act->proc.disabled) return;
 8001f6a:	bf00      	nop

    LV_LOG_TRACE("indev read task finished");
}
 8001f6c:	3724      	adds	r7, #36	; 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd90      	pop	{r4, r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20018b60 	.word	0x20018b60
 8001f78:	20018b64 	.word	0x20018b64

08001f7c <lv_indev_get_act>:
 * Get the currently processed input device. Can be used in action functions too.
 * @return pointer to the currently processed input device or NULL if no input device processing
 * right now
 */
lv_indev_t * lv_indev_get_act(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
    return indev_act;
 8001f80:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <lv_indev_get_act+0x14>)
 8001f82:	681b      	ldr	r3, [r3, #0]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	20018b60 	.word	0x20018b60

08001f94 <lv_indev_reset>:
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 * @param obj pointer to an object which triggers the reset.
 */
void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
    if(indev) {
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d01a      	beq.n	8001fda <lv_indev_reset+0x46>
        indev->proc.reset_query = 1;
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8001faa:	f043 0302 	orr.w	r3, r3, #2
 8001fae:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
        if(indev_act == indev) indev_obj_act = NULL;
 8001fb2:	4b1f      	ldr	r3, [pc, #124]	; (8002030 <lv_indev_reset+0x9c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d102      	bne.n	8001fc2 <lv_indev_reset+0x2e>
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <lv_indev_reset+0xa0>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d004      	beq.n	8001fd2 <lv_indev_reset+0x3e>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d129      	bne.n	8002026 <lv_indev_reset+0x92>
            indev->proc.types.pointer.last_pressed = NULL;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	63da      	str	r2, [r3, #60]	; 0x3c
                i->proc.types.pointer.last_pressed = NULL;
            }
            i = lv_indev_get_next(i);
        }
    }
}
 8001fd8:	e025      	b.n	8002026 <lv_indev_reset+0x92>
        lv_indev_t * i = lv_indev_get_next(NULL);
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f018 fb98 	bl	801a710 <lv_indev_get_next>
 8001fe0:	60f8      	str	r0, [r7, #12]
        while(i) {
 8001fe2:	e01d      	b.n	8002020 <lv_indev_reset+0x8c>
            i->proc.reset_query = 1;
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8001fea:	f043 0302 	orr.w	r3, r3, #2
 8001fee:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            if(indev_act == i) indev_obj_act = NULL;
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <lv_indev_reset+0x9c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d102      	bne.n	8002002 <lv_indev_reset+0x6e>
 8001ffc:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <lv_indev_reset+0xa0>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d004      	beq.n	8002012 <lv_indev_reset+0x7e>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d102      	bne.n	8002018 <lv_indev_reset+0x84>
                i->proc.types.pointer.last_pressed = NULL;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	63da      	str	r2, [r3, #60]	; 0x3c
            i = lv_indev_get_next(i);
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f018 fb79 	bl	801a710 <lv_indev_get_next>
 800201e:	60f8      	str	r0, [r7, #12]
        while(i) {
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1de      	bne.n	8001fe4 <lv_indev_reset+0x50>
}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20018b60 	.word	0x20018b60
 8002034:	20018b64 	.word	0x20018b64

08002038 <indev_pointer_proc>:
 * Process a new point from LV_INDEV_TYPE_POINTER input device
 * @param i pointer to an input device
 * @param data pointer to the data read from the input device
 */
static void indev_pointer_proc(lv_indev_t * i, lv_indev_data_t * data)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
    /*Move the cursor if set and moved*/
    if(i->cursor != NULL &&
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	2b00      	cmp	r3, #0
 8002048:	d01a      	beq.n	8002080 <indev_pointer_proc+0x48>
       (i->proc.types.pointer.last_point.x != data->point.x || i->proc.types.pointer.last_point.y != data->point.y)) {
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f9b3 3000 	ldrsh.w	r3, [r3]
    if(i->cursor != NULL &&
 8002056:	429a      	cmp	r2, r3
 8002058:	d107      	bne.n	800206a <indev_pointer_proc+0x32>
       (i->proc.types.pointer.last_point.x != data->point.x || i->proc.types.pointer.last_point.y != data->point.y)) {
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002066:	429a      	cmp	r2, r3
 8002068:	d00a      	beq.n	8002080 <indev_pointer_proc+0x48>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800207a:	461a      	mov	r2, r3
 800207c:	f003 fd08 	bl	8005a90 <lv_obj_set_pos>
    }

    i->proc.types.pointer.act_point.x = data->point.x;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	841a      	strh	r2, [r3, #32]
    i->proc.types.pointer.act_point.y = data->point.y;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	845a      	strh	r2, [r3, #34]	; 0x22

    if(i->proc.state == LV_INDEV_STATE_PR) {
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	7f1b      	ldrb	r3, [r3, #28]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d105      	bne.n	80020a8 <indev_pointer_proc+0x70>
        indev_proc_press(&i->proc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	331c      	adds	r3, #28
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fdf9 	bl	8002c98 <indev_proc_press>
 80020a6:	e004      	b.n	80020b2 <indev_pointer_proc+0x7a>
    }
    else {
        indev_proc_release(&i->proc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	331c      	adds	r3, #28
 80020ac:	4618      	mov	r0, r3
 80020ae:	f001 f8cf 	bl	8003250 <indev_proc_release>
    }

    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	849a      	strh	r2, [r3, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	84da      	strh	r2, [r3, #38]	; 0x26
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <indev_keypad_proc>:
 * Process a new point from LV_INDEV_TYPE_KEYPAD input device
 * @param i pointer to an input device
 * @param data pointer to the data read from the input device
 */
static void indev_keypad_proc(lv_indev_t * i, lv_indev_data_t * data)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
#if LV_USE_GROUP
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	7b9b      	ldrb	r3, [r3, #14]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d108      	bne.n	80020f4 <indev_keypad_proc+0x24>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f040 8212 	bne.w	8002518 <indev_keypad_proc+0x448>

    if(i->proc.wait_until_release) {
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d014      	beq.n	800212e <indev_keypad_proc+0x5e>
        i->proc.wait_until_release      = 0;
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 800210a:	f36f 03c3 	bfc	r3, #3, #1
 800210e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
        i->proc.pr_timestamp            = 0;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	649a      	str	r2, [r3, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 800211e:	f36f 0300 	bfc	r3, #0, #1
 8002122:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2020 	strb.w	r2, [r3, #32]
    }

    lv_group_t * g = i->group;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002132:	617b      	str	r3, [r7, #20]
    if(g == NULL) return;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 81f0 	beq.w	800251c <indev_keypad_proc+0x44c>

    indev_obj_act = lv_group_get_focused(g);
 800213c:	6978      	ldr	r0, [r7, #20]
 800213e:	f7ff fd19 	bl	8001b74 <lv_group_get_focused>
 8002142:	4602      	mov	r2, r0
 8002144:	4bae      	ldr	r3, [pc, #696]	; (8002400 <indev_keypad_proc+0x330>)
 8002146:	601a      	str	r2, [r3, #0]
    if(indev_obj_act == NULL) return;
 8002148:	4bad      	ldr	r3, [pc, #692]	; (8002400 <indev_keypad_proc+0x330>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 81e7 	beq.w	8002520 <indev_keypad_proc+0x450>

    /*Save the last key to compare it with the current latter on RELEASE*/
    uint32_t prev_key = i->proc.types.keypad.last_key;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	613b      	str	r3, [r7, #16]

    /* Save the last key.
     * It must be done here else `lv_indev_get_key` will return the last key in events and signals*/
    i->proc.types.keypad.last_key = data->key;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Save the previous state so we can detect state changes below and also set the last state now
     * so if any signal/event handler on the way returns `LV_RES_INV` the last state is remembered
     * for the next time*/
    uint32_t prev_state             = i->proc.types.keypad.last_state;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002166:	60fb      	str	r3, [r7, #12]
    i->proc.types.keypad.last_state = data->state;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	7b9a      	ldrb	r2, [r3, #14]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f883 2020 	strb.w	r2, [r3, #32]

    /*Key press happened*/
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	7b9b      	ldrb	r3, [r3, #14]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d17b      	bne.n	8002272 <indev_keypad_proc+0x1a2>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d178      	bne.n	8002272 <indev_keypad_proc+0x1a2>
        i->proc.pr_timestamp = lv_tick_get();
 8002180:	f018 fb1c 	bl	801a7bc <lv_tick_get>
 8002184:	4602      	mov	r2, r0
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	649a      	str	r2, [r3, #72]	; 0x48

        /*Simulate a press on the object if ENTER was pressed*/
        if(data->key == LV_KEY_ENTER) {
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b0a      	cmp	r3, #10
 8002190:	d125      	bne.n	80021de <indev_keypad_proc+0x10e>
            /*Send the ENTER as a normal KEY*/
            lv_group_send_data(g, LV_KEY_ENTER);
 8002192:	210a      	movs	r1, #10
 8002194:	6978      	ldr	r0, [r7, #20]
 8002196:	f7ff fc7d 	bl	8001a94 <lv_group_send_data>

            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
 800219a:	4b99      	ldr	r3, [pc, #612]	; (8002400 <indev_keypad_proc+0x330>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	4a97      	ldr	r2, [pc, #604]	; (8002400 <indev_keypad_proc+0x330>)
 80021a2:	6810      	ldr	r0, [r2, #0]
 80021a4:	2200      	movs	r2, #0
 80021a6:	210b      	movs	r1, #11
 80021a8:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	331c      	adds	r3, #28
 80021ae:	4618      	mov	r0, r3
 80021b0:	f001 ffa2 	bl	80040f8 <indev_reset_check>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 81b4 	bne.w	8002524 <indev_keypad_proc+0x454>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 80021bc:	4b90      	ldr	r3, [pc, #576]	; (8002400 <indev_keypad_proc+0x330>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2200      	movs	r2, #0
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f004 f9f3 	bl	80065b0 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	331c      	adds	r3, #28
 80021ce:	4618      	mov	r0, r3
 80021d0:	f001 ff92 	bl	80040f8 <indev_reset_check>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 8197 	beq.w	800250a <indev_keypad_proc+0x43a>
 80021dc:	e1b3      	b.n	8002546 <indev_keypad_proc+0x476>
        }
        else if(data->key == LV_KEY_ESC) {
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b1b      	cmp	r3, #27
 80021e4:	d114      	bne.n	8002210 <indev_keypad_proc+0x140>
            /*Send the ESC as a normal KEY*/
            lv_group_send_data(g, LV_KEY_ESC);
 80021e6:	211b      	movs	r1, #27
 80021e8:	6978      	ldr	r0, [r7, #20]
 80021ea:	f7ff fc53 	bl	8001a94 <lv_group_send_data>

            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
 80021ee:	4b84      	ldr	r3, [pc, #528]	; (8002400 <indev_keypad_proc+0x330>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2200      	movs	r2, #0
 80021f4:	2114      	movs	r1, #20
 80021f6:	4618      	mov	r0, r3
 80021f8:	f004 f9da 	bl	80065b0 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	331c      	adds	r3, #28
 8002200:	4618      	mov	r0, r3
 8002202:	f001 ff79 	bl	80040f8 <indev_reset_check>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 817e 	beq.w	800250a <indev_keypad_proc+0x43a>
 800220e:	e19a      	b.n	8002546 <indev_keypad_proc+0x476>
        }
        /*Move the focus on NEXT*/
        else if(data->key == LV_KEY_NEXT) {
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b09      	cmp	r3, #9
 8002216:	d110      	bne.n	800223a <indev_keypad_proc+0x16a>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8002218:	2100      	movs	r1, #0
 800221a:	6978      	ldr	r0, [r7, #20]
 800221c:	f7ff fc67 	bl	8001aee <lv_group_set_editing>
            lv_group_focus_next(g);
 8002220:	6978      	ldr	r0, [r7, #20]
 8002222:	f7ff fc13 	bl	8001a4c <lv_group_focus_next>
            if(indev_reset_check(&i->proc)) return;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	331c      	adds	r3, #28
 800222a:	4618      	mov	r0, r3
 800222c:	f001 ff64 	bl	80040f8 <indev_reset_check>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8169 	beq.w	800250a <indev_keypad_proc+0x43a>
 8002238:	e185      	b.n	8002546 <indev_keypad_proc+0x476>
        }
        /*Move the focus on PREV*/
        else if(data->key == LV_KEY_PREV) {
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b0b      	cmp	r3, #11
 8002240:	d110      	bne.n	8002264 <indev_keypad_proc+0x194>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8002242:	2100      	movs	r1, #0
 8002244:	6978      	ldr	r0, [r7, #20]
 8002246:	f7ff fc52 	bl	8001aee <lv_group_set_editing>
            lv_group_focus_prev(g);
 800224a:	6978      	ldr	r0, [r7, #20]
 800224c:	f7ff fc10 	bl	8001a70 <lv_group_focus_prev>
            if(indev_reset_check(&i->proc)) return;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	331c      	adds	r3, #28
 8002254:	4618      	mov	r0, r3
 8002256:	f001 ff4f 	bl	80040f8 <indev_reset_check>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 8154 	beq.w	800250a <indev_keypad_proc+0x43a>
 8002262:	e170      	b.n	8002546 <indev_keypad_proc+0x476>
        }
        /*Just send other keys to the object (e.g. 'A' or `LV_GROUP_KEY_RIGHT`)*/
        else {
            lv_group_send_data(g, data->key);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4619      	mov	r1, r3
 800226a:	6978      	ldr	r0, [r7, #20]
 800226c:	f7ff fc12 	bl	8001a94 <lv_group_send_data>
        if(data->key == LV_KEY_ENTER) {
 8002270:	e14b      	b.n	800250a <indev_keypad_proc+0x43a>
        }
    }
    /*Pressing*/
    else if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_PR) {
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	7b9b      	ldrb	r3, [r3, #14]
 8002276:	2b01      	cmp	r3, #1
 8002278:	f040 80e9 	bne.w	800244e <indev_keypad_proc+0x37e>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b01      	cmp	r3, #1
 8002280:	f040 80e5 	bne.w	800244e <indev_keypad_proc+0x37e>

        if(data->key == LV_KEY_ENTER) {
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b0a      	cmp	r3, #10
 800228a:	d120      	bne.n	80022ce <indev_keypad_proc+0x1fe>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, NULL);
 800228c:	4b5c      	ldr	r3, [pc, #368]	; (8002400 <indev_keypad_proc+0x330>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	4a5b      	ldr	r2, [pc, #364]	; (8002400 <indev_keypad_proc+0x330>)
 8002294:	6810      	ldr	r0, [r2, #0]
 8002296:	2200      	movs	r2, #0
 8002298:	210c      	movs	r1, #12
 800229a:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	331c      	adds	r3, #28
 80022a0:	4618      	mov	r0, r3
 80022a2:	f001 ff29 	bl	80040f8 <indev_reset_check>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f040 813d 	bne.w	8002528 <indev_keypad_proc+0x458>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
 80022ae:	4b54      	ldr	r3, [pc, #336]	; (8002400 <indev_keypad_proc+0x330>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2200      	movs	r2, #0
 80022b4:	2101      	movs	r1, #1
 80022b6:	4618      	mov	r0, r3
 80022b8:	f004 f97a 	bl	80065b0 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	331c      	adds	r3, #28
 80022c0:	4618      	mov	r0, r3
 80022c2:	f001 ff19 	bl	80040f8 <indev_reset_check>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f040 812f 	bne.w	800252c <indev_keypad_proc+0x45c>
        }

        /*Long press time has elapsed?*/
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d13b      	bne.n	8002356 <indev_keypad_proc+0x286>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e2:	4618      	mov	r0, r3
 80022e4:	f018 fa84 	bl	801a7f0 <lv_tick_elaps>
 80022e8:	4602      	mov	r2, r0
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	8b1b      	ldrh	r3, [r3, #24]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d931      	bls.n	8002356 <indev_keypad_proc+0x286>
            i->proc.long_pr_sent = 1;
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            if(data->key == LV_KEY_ENTER) {
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b0a      	cmp	r3, #10
 8002306:	f040 80a0 	bne.w	800244a <indev_keypad_proc+0x37a>
                i->proc.longpr_rep_timestamp = lv_tick_get();
 800230a:	f018 fa57 	bl	801a7bc <lv_tick_get>
 800230e:	4602      	mov	r2, r0
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	64da      	str	r2, [r3, #76]	; 0x4c
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 8002314:	4b3a      	ldr	r3, [pc, #232]	; (8002400 <indev_keypad_proc+0x330>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	4a39      	ldr	r2, [pc, #228]	; (8002400 <indev_keypad_proc+0x330>)
 800231c:	6810      	ldr	r0, [r2, #0]
 800231e:	2200      	movs	r2, #0
 8002320:	210f      	movs	r1, #15
 8002322:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	331c      	adds	r3, #28
 8002328:	4618      	mov	r0, r3
 800232a:	f001 fee5 	bl	80040f8 <indev_reset_check>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	f040 80fd 	bne.w	8002530 <indev_keypad_proc+0x460>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 8002336:	4b32      	ldr	r3, [pc, #200]	; (8002400 <indev_keypad_proc+0x330>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2200      	movs	r2, #0
 800233c:	2104      	movs	r1, #4
 800233e:	4618      	mov	r0, r3
 8002340:	f004 f936 	bl	80065b0 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	331c      	adds	r3, #28
 8002348:	4618      	mov	r0, r3
 800234a:	f001 fed5 	bl	80040f8 <indev_reset_check>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d07a      	beq.n	800244a <indev_keypad_proc+0x37a>
 8002354:	e0f7      	b.n	8002546 <indev_keypad_proc+0x476>
            }
        }
        /*Long press repeated time has elapsed?*/
        else if(i->proc.long_pr_sent != 0 &&
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 80d3 	beq.w	800250e <indev_keypad_proc+0x43e>
                lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236c:	4618      	mov	r0, r3
 800236e:	f018 fa3f 	bl	801a7f0 <lv_tick_elaps>
 8002372:	4602      	mov	r2, r0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	8b5b      	ldrh	r3, [r3, #26]
        else if(i->proc.long_pr_sent != 0 &&
 8002378:	429a      	cmp	r2, r3
 800237a:	f240 80c8 	bls.w	800250e <indev_keypad_proc+0x43e>

            i->proc.longpr_rep_timestamp = lv_tick_get();
 800237e:	f018 fa1d 	bl	801a7bc <lv_tick_get>
 8002382:	4602      	mov	r2, r0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	64da      	str	r2, [r3, #76]	; 0x4c

            /*Send LONG_PRESS_REP on ENTER*/
            if(data->key == LV_KEY_ENTER) {
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b0a      	cmp	r3, #10
 800238e:	d121      	bne.n	80023d4 <indev_keypad_proc+0x304>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
 8002390:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <indev_keypad_proc+0x330>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	4a1a      	ldr	r2, [pc, #104]	; (8002400 <indev_keypad_proc+0x330>)
 8002398:	6810      	ldr	r0, [r2, #0]
 800239a:	2200      	movs	r2, #0
 800239c:	2110      	movs	r1, #16
 800239e:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	331c      	adds	r3, #28
 80023a4:	4618      	mov	r0, r3
 80023a6:	f001 fea7 	bl	80040f8 <indev_reset_check>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f040 80c1 	bne.w	8002534 <indev_keypad_proc+0x464>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 80023b2:	4b13      	ldr	r3, [pc, #76]	; (8002400 <indev_keypad_proc+0x330>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2200      	movs	r2, #0
 80023b8:	2105      	movs	r1, #5
 80023ba:	4618      	mov	r0, r3
 80023bc:	f004 f8f8 	bl	80065b0 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	331c      	adds	r3, #28
 80023c4:	4618      	mov	r0, r3
 80023c6:	f001 fe97 	bl	80040f8 <indev_reset_check>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 809e 	beq.w	800250e <indev_keypad_proc+0x43e>
 80023d2:	e0b8      	b.n	8002546 <indev_keypad_proc+0x476>
            }
            /*Move the focus on NEXT again*/
            else if(data->key == LV_KEY_NEXT) {
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b09      	cmp	r3, #9
 80023da:	d113      	bne.n	8002404 <indev_keypad_proc+0x334>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 80023dc:	2100      	movs	r1, #0
 80023de:	6978      	ldr	r0, [r7, #20]
 80023e0:	f7ff fb85 	bl	8001aee <lv_group_set_editing>
                lv_group_focus_next(g);
 80023e4:	6978      	ldr	r0, [r7, #20]
 80023e6:	f7ff fb31 	bl	8001a4c <lv_group_focus_next>
                if(indev_reset_check(&i->proc)) return;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	331c      	adds	r3, #28
 80023ee:	4618      	mov	r0, r3
 80023f0:	f001 fe82 	bl	80040f8 <indev_reset_check>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 8089 	beq.w	800250e <indev_keypad_proc+0x43e>
 80023fc:	e0a3      	b.n	8002546 <indev_keypad_proc+0x476>
 80023fe:	bf00      	nop
 8002400:	20018b64 	.word	0x20018b64
            }
            /*Move the focus on PREV again*/
            else if(data->key == LV_KEY_PREV) {
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b0b      	cmp	r3, #11
 800240a:	d10f      	bne.n	800242c <indev_keypad_proc+0x35c>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 800240c:	2100      	movs	r1, #0
 800240e:	6978      	ldr	r0, [r7, #20]
 8002410:	f7ff fb6d 	bl	8001aee <lv_group_set_editing>
                lv_group_focus_prev(g);
 8002414:	6978      	ldr	r0, [r7, #20]
 8002416:	f7ff fb2b 	bl	8001a70 <lv_group_focus_prev>
                if(indev_reset_check(&i->proc)) return;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	331c      	adds	r3, #28
 800241e:	4618      	mov	r0, r3
 8002420:	f001 fe6a 	bl	80040f8 <indev_reset_check>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d071      	beq.n	800250e <indev_keypad_proc+0x43e>
 800242a:	e08c      	b.n	8002546 <indev_keypad_proc+0x476>
            }
            /*Just send other keys again to the object (e.g. 'A' or `LV_GROUP_KEY_RIGHT)*/
            else {
                lv_group_send_data(g, data->key);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4619      	mov	r1, r3
 8002432:	6978      	ldr	r0, [r7, #20]
 8002434:	f7ff fb2e 	bl	8001a94 <lv_group_send_data>
                if(indev_reset_check(&i->proc)) return;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	331c      	adds	r3, #28
 800243c:	4618      	mov	r0, r3
 800243e:	f001 fe5b 	bl	80040f8 <indev_reset_check>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d062      	beq.n	800250e <indev_keypad_proc+0x43e>
 8002448:	e07d      	b.n	8002546 <indev_keypad_proc+0x476>
            if(data->key == LV_KEY_ENTER) {
 800244a:	bf00      	nop
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 800244c:	e05f      	b.n	800250e <indev_keypad_proc+0x43e>
            }
        }
    }
    /*Release happened*/
    else if(data->state == LV_INDEV_STATE_REL && prev_state == LV_INDEV_STATE_PR) {
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	7b9b      	ldrb	r3, [r3, #14]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d15c      	bne.n	8002510 <indev_keypad_proc+0x440>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d159      	bne.n	8002510 <indev_keypad_proc+0x440>
        /*The user might clear the key when it was released. Always release the pressed key*/
        data->key = prev_key;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	605a      	str	r2, [r3, #4]
        if(data->key == LV_KEY_ENTER) {
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b0a      	cmp	r3, #10
 8002468:	d144      	bne.n	80024f4 <indev_keypad_proc+0x424>

            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 800246a:	4b38      	ldr	r3, [pc, #224]	; (800254c <indev_keypad_proc+0x47c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	4a36      	ldr	r2, [pc, #216]	; (800254c <indev_keypad_proc+0x47c>)
 8002472:	6810      	ldr	r0, [r2, #0]
 8002474:	2200      	movs	r2, #0
 8002476:	210e      	movs	r1, #14
 8002478:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	331c      	adds	r3, #28
 800247e:	4618      	mov	r0, r3
 8002480:	f001 fe3a 	bl	80040f8 <indev_reset_check>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d156      	bne.n	8002538 <indev_keypad_proc+0x468>

            if(i->proc.long_pr_sent == 0) {
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10e      	bne.n	80024b8 <indev_keypad_proc+0x3e8>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 800249a:	4b2c      	ldr	r3, [pc, #176]	; (800254c <indev_keypad_proc+0x47c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2200      	movs	r2, #0
 80024a0:	2103      	movs	r1, #3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f004 f884 	bl	80065b0 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	331c      	adds	r3, #28
 80024ac:	4618      	mov	r0, r3
 80024ae:	f001 fe23 	bl	80040f8 <indev_reset_check>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d141      	bne.n	800253c <indev_keypad_proc+0x46c>
            }

            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 80024b8:	4b24      	ldr	r3, [pc, #144]	; (800254c <indev_keypad_proc+0x47c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2200      	movs	r2, #0
 80024be:	2106      	movs	r1, #6
 80024c0:	4618      	mov	r0, r3
 80024c2:	f004 f875 	bl	80065b0 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	331c      	adds	r3, #28
 80024ca:	4618      	mov	r0, r3
 80024cc:	f001 fe14 	bl	80040f8 <indev_reset_check>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d134      	bne.n	8002540 <indev_keypad_proc+0x470>

            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 80024d6:	4b1d      	ldr	r3, [pc, #116]	; (800254c <indev_keypad_proc+0x47c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2200      	movs	r2, #0
 80024dc:	2107      	movs	r1, #7
 80024de:	4618      	mov	r0, r3
 80024e0:	f004 f866 	bl	80065b0 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	331c      	adds	r3, #28
 80024e8:	4618      	mov	r0, r3
 80024ea:	f001 fe05 	bl	80040f8 <indev_reset_check>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d127      	bne.n	8002544 <indev_keypad_proc+0x474>
        }
        i->proc.pr_timestamp = 0;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	649a      	str	r2, [r3, #72]	; 0x48
        i->proc.long_pr_sent = 0;
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8002500:	f36f 0300 	bfc	r3, #0, #1
 8002504:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
 8002508:	e002      	b.n	8002510 <indev_keypad_proc+0x440>
        if(data->key == LV_KEY_ENTER) {
 800250a:	bf00      	nop
 800250c:	e000      	b.n	8002510 <indev_keypad_proc+0x440>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 800250e:	bf00      	nop
    }
    indev_obj_act = NULL;
 8002510:	4b0e      	ldr	r3, [pc, #56]	; (800254c <indev_keypad_proc+0x47c>)
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	e016      	b.n	8002546 <indev_keypad_proc+0x476>
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 8002518:	bf00      	nop
 800251a:	e014      	b.n	8002546 <indev_keypad_proc+0x476>
    if(g == NULL) return;
 800251c:	bf00      	nop
 800251e:	e012      	b.n	8002546 <indev_keypad_proc+0x476>
    if(indev_obj_act == NULL) return;
 8002520:	bf00      	nop
 8002522:	e010      	b.n	8002546 <indev_keypad_proc+0x476>
            if(indev_reset_check(&i->proc)) return;
 8002524:	bf00      	nop
 8002526:	e00e      	b.n	8002546 <indev_keypad_proc+0x476>
            if(indev_reset_check(&i->proc)) return;
 8002528:	bf00      	nop
 800252a:	e00c      	b.n	8002546 <indev_keypad_proc+0x476>
            if(indev_reset_check(&i->proc)) return;
 800252c:	bf00      	nop
 800252e:	e00a      	b.n	8002546 <indev_keypad_proc+0x476>
                if(indev_reset_check(&i->proc)) return;
 8002530:	bf00      	nop
 8002532:	e008      	b.n	8002546 <indev_keypad_proc+0x476>
                if(indev_reset_check(&i->proc)) return;
 8002534:	bf00      	nop
 8002536:	e006      	b.n	8002546 <indev_keypad_proc+0x476>
            if(indev_reset_check(&i->proc)) return;
 8002538:	bf00      	nop
 800253a:	e004      	b.n	8002546 <indev_keypad_proc+0x476>
                if(indev_reset_check(&i->proc)) return;
 800253c:	bf00      	nop
 800253e:	e002      	b.n	8002546 <indev_keypad_proc+0x476>
            if(indev_reset_check(&i->proc)) return;
 8002540:	bf00      	nop
 8002542:	e000      	b.n	8002546 <indev_keypad_proc+0x476>
            if(indev_reset_check(&i->proc)) return;
 8002544:	bf00      	nop
#else
    (void)data; /*Unused*/
    (void)i;    /*Unused*/
#endif
}
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20018b64 	.word	0x20018b64

08002550 <indev_encoder_proc>:
 * Process a new point from LV_INDEV_TYPE_ENCODER input device
 * @param i pointer to an input device
 * @param data pointer to the data read from the input device
 */
static void indev_encoder_proc(lv_indev_t * i, lv_indev_data_t * data)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
#if LV_USE_GROUP

    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	7b9b      	ldrb	r3, [r3, #14]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d108      	bne.n	8002574 <indev_encoder_proc+0x24>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	f040 830a 	bne.w	8002b88 <indev_encoder_proc+0x638>

    if(i->proc.wait_until_release) {
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d014      	beq.n	80025ae <indev_encoder_proc+0x5e>
        i->proc.wait_until_release      = 0;
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 800258a:	f36f 03c3 	bfc	r3, #3, #1
 800258e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
        i->proc.pr_timestamp            = 0;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	649a      	str	r2, [r3, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 800259e:	f36f 0300 	bfc	r3, #0, #1
 80025a2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2020 	strb.w	r2, [r3, #32]
    }

    /* Save the last keys before anything else.
     * They need to be already saved if the function returns for any reason*/
    lv_indev_state_t last_state     = i->proc.types.keypad.last_state;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025b4:	75fb      	strb	r3, [r7, #23]
    i->proc.types.keypad.last_state = data->state;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	7b9a      	ldrb	r2, [r3, #14]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f883 2020 	strb.w	r2, [r3, #32]
    i->proc.types.keypad.last_key   = data->key;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	625a      	str	r2, [r3, #36]	; 0x24

    lv_group_t * g = i->group;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025cc:	613b      	str	r3, [r7, #16]
    if(g == NULL) return;
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 82db 	beq.w	8002b8c <indev_encoder_proc+0x63c>

    indev_obj_act = lv_group_get_focused(g);
 80025d6:	6938      	ldr	r0, [r7, #16]
 80025d8:	f7ff facc 	bl	8001b74 <lv_group_get_focused>
 80025dc:	4602      	mov	r2, r0
 80025de:	4bab      	ldr	r3, [pc, #684]	; (800288c <indev_encoder_proc+0x33c>)
 80025e0:	601a      	str	r2, [r3, #0]
    if(indev_obj_act == NULL) return;
 80025e2:	4baa      	ldr	r3, [pc, #680]	; (800288c <indev_encoder_proc+0x33c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 82d2 	beq.w	8002b90 <indev_encoder_proc+0x640>

    /*Process the steps they are valid only with released button*/
    if(data->state != LV_INDEV_STATE_REL) {
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	7b9b      	ldrb	r3, [r3, #14]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <indev_encoder_proc+0xaa>
        data->enc_diff = 0;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2200      	movs	r2, #0
 80025f8:	819a      	strh	r2, [r3, #12]
    }

    /*Refresh the focused object. It might change due to lv_group_focus_prev/next*/
    indev_obj_act = lv_group_get_focused(g);
 80025fa:	6938      	ldr	r0, [r7, #16]
 80025fc:	f7ff faba 	bl	8001b74 <lv_group_get_focused>
 8002600:	4602      	mov	r2, r0
 8002602:	4ba2      	ldr	r3, [pc, #648]	; (800288c <indev_encoder_proc+0x33c>)
 8002604:	601a      	str	r2, [r3, #0]
    if(indev_obj_act == NULL) return;
 8002606:	4ba1      	ldr	r3, [pc, #644]	; (800288c <indev_encoder_proc+0x33c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 82c2 	beq.w	8002b94 <indev_encoder_proc+0x644>

    /*Button press happened*/
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	7b9b      	ldrb	r3, [r3, #14]
 8002614:	2b01      	cmp	r3, #1
 8002616:	f040 8083 	bne.w	8002720 <indev_encoder_proc+0x1d0>
 800261a:	7dfb      	ldrb	r3, [r7, #23]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d17f      	bne.n	8002720 <indev_encoder_proc+0x1d0>

        i->proc.pr_timestamp = lv_tick_get();
 8002620:	f018 f8cc 	bl	801a7bc <lv_tick_get>
 8002624:	4602      	mov	r2, r0
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	649a      	str	r2, [r3, #72]	; 0x48

        if(data->key == LV_KEY_ENTER) {
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b0a      	cmp	r3, #10
 8002630:	d13a      	bne.n	80026a8 <indev_encoder_proc+0x158>
            bool editable = false;
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 8002636:	4b95      	ldr	r3, [pc, #596]	; (800288c <indev_encoder_proc+0x33c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	4a93      	ldr	r2, [pc, #588]	; (800288c <indev_encoder_proc+0x33c>)
 800263e:	6810      	ldr	r0, [r2, #0]
 8002640:	f107 020f 	add.w	r2, r7, #15
 8002644:	2119      	movs	r1, #25
 8002646:	4798      	blx	r3

            if(lv_group_get_editing(g) == true || editable == false) {
 8002648:	6938      	ldr	r0, [r7, #16]
 800264a:	f7ff faab 	bl	8001ba4 <lv_group_get_editing>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d106      	bne.n	8002662 <indev_encoder_proc+0x112>
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	f083 0301 	eor.w	r3, r3, #1
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8228 	beq.w	8002ab2 <indev_encoder_proc+0x562>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
 8002662:	4b8a      	ldr	r3, [pc, #552]	; (800288c <indev_encoder_proc+0x33c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	4a88      	ldr	r2, [pc, #544]	; (800288c <indev_encoder_proc+0x33c>)
 800266a:	6810      	ldr	r0, [r2, #0]
 800266c:	2200      	movs	r2, #0
 800266e:	210b      	movs	r1, #11
 8002670:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	331c      	adds	r3, #28
 8002676:	4618      	mov	r0, r3
 8002678:	f001 fd3e 	bl	80040f8 <indev_reset_check>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 828a 	bne.w	8002b98 <indev_encoder_proc+0x648>

                lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 8002684:	4b81      	ldr	r3, [pc, #516]	; (800288c <indev_encoder_proc+0x33c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2200      	movs	r2, #0
 800268a:	2100      	movs	r1, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f003 ff8f 	bl	80065b0 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	331c      	adds	r3, #28
 8002696:	4618      	mov	r0, r3
 8002698:	f001 fd2e 	bl	80040f8 <indev_reset_check>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 8207 	beq.w	8002ab2 <indev_encoder_proc+0x562>
 80026a4:	bf00      	nop
 80026a6:	e28a      	b.n	8002bbe <indev_encoder_proc+0x66e>
            }
        }
        else if(data->key == LV_KEY_LEFT) {
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b14      	cmp	r3, #20
 80026ae:	d109      	bne.n	80026c4 <indev_encoder_proc+0x174>
            /*emulate encoder left*/
            data->enc_diff--;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	b21a      	sxth	r2, r3
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	819a      	strh	r2, [r3, #12]
        if(data->key == LV_KEY_ENTER) {
 80026c2:	e1f6      	b.n	8002ab2 <indev_encoder_proc+0x562>
        }
        else if(data->key == LV_KEY_RIGHT) {
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b13      	cmp	r3, #19
 80026ca:	d109      	bne.n	80026e0 <indev_encoder_proc+0x190>
            /*emulate encoder right*/
            data->enc_diff++;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3301      	adds	r3, #1
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	b21a      	sxth	r2, r3
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	819a      	strh	r2, [r3, #12]
        if(data->key == LV_KEY_ENTER) {
 80026de:	e1e8      	b.n	8002ab2 <indev_encoder_proc+0x562>
        }
        else if(data->key == LV_KEY_ESC) {
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b1b      	cmp	r3, #27
 80026e6:	d114      	bne.n	8002712 <indev_encoder_proc+0x1c2>
            /*Send the ESC as a normal KEY*/
            lv_group_send_data(g, LV_KEY_ESC);
 80026e8:	211b      	movs	r1, #27
 80026ea:	6938      	ldr	r0, [r7, #16]
 80026ec:	f7ff f9d2 	bl	8001a94 <lv_group_send_data>

            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
 80026f0:	4b66      	ldr	r3, [pc, #408]	; (800288c <indev_encoder_proc+0x33c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2200      	movs	r2, #0
 80026f6:	2114      	movs	r1, #20
 80026f8:	4618      	mov	r0, r3
 80026fa:	f003 ff59 	bl	80065b0 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	331c      	adds	r3, #28
 8002702:	4618      	mov	r0, r3
 8002704:	f001 fcf8 	bl	80040f8 <indev_reset_check>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 81d1 	beq.w	8002ab2 <indev_encoder_proc+0x562>
 8002710:	e255      	b.n	8002bbe <indev_encoder_proc+0x66e>
        }
        /*Just send other keys to the object (e.g. 'A' or `LV_GROUP_KEY_RIGHT`)*/
        else {
            lv_group_send_data(g, data->key);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4619      	mov	r1, r3
 8002718:	6938      	ldr	r0, [r7, #16]
 800271a:	f7ff f9bb 	bl	8001a94 <lv_group_send_data>
        if(data->key == LV_KEY_ENTER) {
 800271e:	e1c8      	b.n	8002ab2 <indev_encoder_proc+0x562>
        }
    }
    /*Pressing*/
    else if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_PR) {
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	7b9b      	ldrb	r3, [r3, #14]
 8002724:	2b01      	cmp	r3, #1
 8002726:	f040 80df 	bne.w	80028e8 <indev_encoder_proc+0x398>
 800272a:	7dfb      	ldrb	r3, [r7, #23]
 800272c:	2b01      	cmp	r3, #1
 800272e:	f040 80db 	bne.w	80028e8 <indev_encoder_proc+0x398>
        /* Long press*/
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d164      	bne.n	800280c <indev_encoder_proc+0x2bc>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002746:	4618      	mov	r0, r3
 8002748:	f018 f852 	bl	801a7f0 <lv_tick_elaps>
 800274c:	4602      	mov	r2, r0
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	8b1b      	ldrh	r3, [r3, #24]
 8002752:	429a      	cmp	r2, r3
 8002754:	d95a      	bls.n	800280c <indev_encoder_proc+0x2bc>

            i->proc.long_pr_sent = 1;
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8002764:	f018 f82a 	bl	801a7bc <lv_tick_get>
 8002768:	4602      	mov	r2, r0
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	64da      	str	r2, [r3, #76]	; 0x4c

            if(data->key == LV_KEY_ENTER) {
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b0a      	cmp	r3, #10
 8002774:	d142      	bne.n	80027fc <indev_encoder_proc+0x2ac>
                bool editable = false;
 8002776:	2300      	movs	r3, #0
 8002778:	73bb      	strb	r3, [r7, #14]
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 800277a:	4b44      	ldr	r3, [pc, #272]	; (800288c <indev_encoder_proc+0x33c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	4a42      	ldr	r2, [pc, #264]	; (800288c <indev_encoder_proc+0x33c>)
 8002782:	6810      	ldr	r0, [r2, #0]
 8002784:	f107 020e 	add.w	r2, r7, #14
 8002788:	2119      	movs	r1, #25
 800278a:	4798      	blx	r3

                /*On enter long press toggle edit mode.*/
                if(editable) {
 800278c:	7bbb      	ldrb	r3, [r7, #14]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d012      	beq.n	80027b8 <indev_encoder_proc+0x268>
                    /*Don't leave edit mode if there is only one object (nowhere to navigate)*/
                    if(_lv_ll_get_len(&g->obj_ll) > 1) {
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4618      	mov	r0, r3
 8002796:	f019 fde0 	bl	801c35a <_lv_ll_get_len>
 800279a:	4603      	mov	r3, r0
 800279c:	2b01      	cmp	r3, #1
 800279e:	d92d      	bls.n	80027fc <indev_encoder_proc+0x2ac>
                        lv_group_set_editing(g, lv_group_get_editing(g) ? false : true); /*Toggle edit mode on long press*/
 80027a0:	6938      	ldr	r0, [r7, #16]
 80027a2:	f7ff f9ff 	bl	8001ba4 <lv_group_get_editing>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f083 0301 	eor.w	r3, r3, #1
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	4619      	mov	r1, r3
 80027b0:	6938      	ldr	r0, [r7, #16]
 80027b2:	f7ff f99c 	bl	8001aee <lv_group_set_editing>
 80027b6:	e021      	b.n	80027fc <indev_encoder_proc+0x2ac>
                    }
                }
                /*If not editable then just send a long press signal*/
                else {
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 80027b8:	4b34      	ldr	r3, [pc, #208]	; (800288c <indev_encoder_proc+0x33c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	4a33      	ldr	r2, [pc, #204]	; (800288c <indev_encoder_proc+0x33c>)
 80027c0:	6810      	ldr	r0, [r2, #0]
 80027c2:	2200      	movs	r2, #0
 80027c4:	210f      	movs	r1, #15
 80027c6:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	331c      	adds	r3, #28
 80027cc:	4618      	mov	r0, r3
 80027ce:	f001 fc93 	bl	80040f8 <indev_reset_check>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f040 81e1 	bne.w	8002b9c <indev_encoder_proc+0x64c>
                    lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 80027da:	4b2c      	ldr	r3, [pc, #176]	; (800288c <indev_encoder_proc+0x33c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2200      	movs	r2, #0
 80027e0:	2104      	movs	r1, #4
 80027e2:	4618      	mov	r0, r3
 80027e4:	f003 fee4 	bl	80065b0 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	331c      	adds	r3, #28
 80027ec:	4618      	mov	r0, r3
 80027ee:	f001 fc83 	bl	80040f8 <indev_reset_check>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <indev_encoder_proc+0x2ac>
 80027f8:	bf00      	nop
 80027fa:	e1e0      	b.n	8002bbe <indev_encoder_proc+0x66e>
                }
            }

            i->proc.long_pr_sent = 1;
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 800280a:	e154      	b.n	8002ab6 <indev_encoder_proc+0x566>
        }
        /*Long press repeated time has elapsed?*/
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 814c 	beq.w	8002ab6 <indev_encoder_proc+0x566>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002822:	4618      	mov	r0, r3
 8002824:	f017 ffe4 	bl	801a7f0 <lv_tick_elaps>
 8002828:	4602      	mov	r2, r0
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	8b5b      	ldrh	r3, [r3, #26]
 800282e:	429a      	cmp	r2, r3
 8002830:	f240 8141 	bls.w	8002ab6 <indev_encoder_proc+0x566>

            i->proc.longpr_rep_timestamp = lv_tick_get();
 8002834:	f017 ffc2 	bl	801a7bc <lv_tick_get>
 8002838:	4602      	mov	r2, r0
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	64da      	str	r2, [r3, #76]	; 0x4c

            if(data->key == LV_KEY_ENTER) {
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b0a      	cmp	r3, #10
 8002844:	d124      	bne.n	8002890 <indev_encoder_proc+0x340>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <indev_encoder_proc+0x33c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	4a0f      	ldr	r2, [pc, #60]	; (800288c <indev_encoder_proc+0x33c>)
 800284e:	6810      	ldr	r0, [r2, #0]
 8002850:	2200      	movs	r2, #0
 8002852:	2110      	movs	r1, #16
 8002854:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	331c      	adds	r3, #28
 800285a:	4618      	mov	r0, r3
 800285c:	f001 fc4c 	bl	80040f8 <indev_reset_check>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	f040 819c 	bne.w	8002ba0 <indev_encoder_proc+0x650>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 8002868:	4b08      	ldr	r3, [pc, #32]	; (800288c <indev_encoder_proc+0x33c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2200      	movs	r2, #0
 800286e:	2105      	movs	r1, #5
 8002870:	4618      	mov	r0, r3
 8002872:	f003 fe9d 	bl	80065b0 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	331c      	adds	r3, #28
 800287a:	4618      	mov	r0, r3
 800287c:	f001 fc3c 	bl	80040f8 <indev_reset_check>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 8117 	beq.w	8002ab6 <indev_encoder_proc+0x566>
 8002888:	e199      	b.n	8002bbe <indev_encoder_proc+0x66e>
 800288a:	bf00      	nop
 800288c:	20018b64 	.word	0x20018b64
            }
            else if(data->key == LV_KEY_LEFT) {
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b14      	cmp	r3, #20
 8002896:	d109      	bne.n	80028ac <indev_encoder_proc+0x35c>
                /*emulate encoder left*/
                data->enc_diff--;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	b21a      	sxth	r2, r3
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	819a      	strh	r2, [r3, #12]
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 80028aa:	e104      	b.n	8002ab6 <indev_encoder_proc+0x566>
            }
            else if(data->key == LV_KEY_RIGHT) {
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b13      	cmp	r3, #19
 80028b2:	d109      	bne.n	80028c8 <indev_encoder_proc+0x378>
                /*emulate encoder right*/
                data->enc_diff++;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3301      	adds	r3, #1
 80028be:	b29b      	uxth	r3, r3
 80028c0:	b21a      	sxth	r2, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	819a      	strh	r2, [r3, #12]
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 80028c6:	e0f6      	b.n	8002ab6 <indev_encoder_proc+0x566>
            }
            else {
                lv_group_send_data(g, data->key);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4619      	mov	r1, r3
 80028ce:	6938      	ldr	r0, [r7, #16]
 80028d0:	f7ff f8e0 	bl	8001a94 <lv_group_send_data>
                if(indev_reset_check(&i->proc)) return;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	331c      	adds	r3, #28
 80028d8:	4618      	mov	r0, r3
 80028da:	f001 fc0d 	bl	80040f8 <indev_reset_check>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 80e8 	beq.w	8002ab6 <indev_encoder_proc+0x566>
 80028e6:	e16a      	b.n	8002bbe <indev_encoder_proc+0x66e>

        }

    }
    /*Release happened*/
    else if(data->state == LV_INDEV_STATE_REL && last_state == LV_INDEV_STATE_PR) {
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	7b9b      	ldrb	r3, [r3, #14]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f040 80e3 	bne.w	8002ab8 <indev_encoder_proc+0x568>
 80028f2:	7dfb      	ldrb	r3, [r7, #23]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	f040 80df 	bne.w	8002ab8 <indev_encoder_proc+0x568>

        if(data->key == LV_KEY_ENTER) {
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b0a      	cmp	r3, #10
 8002900:	f040 80cc 	bne.w	8002a9c <indev_encoder_proc+0x54c>
            bool editable = false;
 8002904:	2300      	movs	r3, #0
 8002906:	737b      	strb	r3, [r7, #13]
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 8002908:	4bae      	ldr	r3, [pc, #696]	; (8002bc4 <indev_encoder_proc+0x674>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	4aad      	ldr	r2, [pc, #692]	; (8002bc4 <indev_encoder_proc+0x674>)
 8002910:	6810      	ldr	r0, [r2, #0]
 8002912:	f107 020d 	add.w	r2, r7, #13
 8002916:	2119      	movs	r1, #25
 8002918:	4798      	blx	r3

            /*The button was released on a non-editable object. Just send enter*/
            if(editable == false) {
 800291a:	7b7b      	ldrb	r3, [r7, #13]
 800291c:	f083 0301 	eor.w	r3, r3, #1
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d048      	beq.n	80029b8 <indev_encoder_proc+0x468>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 8002926:	4ba7      	ldr	r3, [pc, #668]	; (8002bc4 <indev_encoder_proc+0x674>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	4aa5      	ldr	r2, [pc, #660]	; (8002bc4 <indev_encoder_proc+0x674>)
 800292e:	6810      	ldr	r0, [r2, #0]
 8002930:	2200      	movs	r2, #0
 8002932:	210e      	movs	r1, #14
 8002934:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	331c      	adds	r3, #28
 800293a:	4618      	mov	r0, r3
 800293c:	f001 fbdc 	bl	80040f8 <indev_reset_check>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	f040 812e 	bne.w	8002ba4 <indev_encoder_proc+0x654>

                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	d106      	bne.n	8002966 <indev_encoder_proc+0x416>
 8002958:	4b9a      	ldr	r3, [pc, #616]	; (8002bc4 <indev_encoder_proc+0x674>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2200      	movs	r2, #0
 800295e:	2103      	movs	r1, #3
 8002960:	4618      	mov	r0, r3
 8002962:	f003 fe25 	bl	80065b0 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	331c      	adds	r3, #28
 800296a:	4618      	mov	r0, r3
 800296c:	f001 fbc4 	bl	80040f8 <indev_reset_check>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	f040 8118 	bne.w	8002ba8 <indev_encoder_proc+0x658>

                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8002978:	4b92      	ldr	r3, [pc, #584]	; (8002bc4 <indev_encoder_proc+0x674>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2200      	movs	r2, #0
 800297e:	2106      	movs	r1, #6
 8002980:	4618      	mov	r0, r3
 8002982:	f003 fe15 	bl	80065b0 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	331c      	adds	r3, #28
 800298a:	4618      	mov	r0, r3
 800298c:	f001 fbb4 	bl	80040f8 <indev_reset_check>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	f040 810a 	bne.w	8002bac <indev_encoder_proc+0x65c>

                lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 8002998:	4b8a      	ldr	r3, [pc, #552]	; (8002bc4 <indev_encoder_proc+0x674>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2200      	movs	r2, #0
 800299e:	2107      	movs	r1, #7
 80029a0:	4618      	mov	r0, r3
 80029a2:	f003 fe05 	bl	80065b0 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	331c      	adds	r3, #28
 80029aa:	4618      	mov	r0, r3
 80029ac:	f001 fba4 	bl	80040f8 <indev_reset_check>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d072      	beq.n	8002a9c <indev_encoder_proc+0x54c>
 80029b6:	e102      	b.n	8002bbe <indev_encoder_proc+0x66e>
            }
            /*An object is being edited and the button is released. */
            else if(g->editing) {
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	7d1b      	ldrb	r3, [r3, #20]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d054      	beq.n	8002a70 <indev_encoder_proc+0x520>
                /*Ignore long pressed enter release because it comes from mode switch*/
                if(!i->proc.long_pr_sent || _lv_ll_get_len(&g->obj_ll) <= 1) {
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d006      	beq.n	80029e4 <indev_encoder_proc+0x494>
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4618      	mov	r0, r3
 80029da:	f019 fcbe 	bl	801c35a <_lv_ll_get_len>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d85b      	bhi.n	8002a9c <indev_encoder_proc+0x54c>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 80029e4:	4b77      	ldr	r3, [pc, #476]	; (8002bc4 <indev_encoder_proc+0x674>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	4a76      	ldr	r2, [pc, #472]	; (8002bc4 <indev_encoder_proc+0x674>)
 80029ec:	6810      	ldr	r0, [r2, #0]
 80029ee:	2200      	movs	r2, #0
 80029f0:	210e      	movs	r1, #14
 80029f2:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	331c      	adds	r3, #28
 80029f8:	4618      	mov	r0, r3
 80029fa:	f001 fb7d 	bl	80040f8 <indev_reset_check>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f040 80d5 	bne.w	8002bb0 <indev_encoder_proc+0x660>

                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8002a06:	4b6f      	ldr	r3, [pc, #444]	; (8002bc4 <indev_encoder_proc+0x674>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2103      	movs	r1, #3
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f003 fdce 	bl	80065b0 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	331c      	adds	r3, #28
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f001 fb6d 	bl	80040f8 <indev_reset_check>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f040 80c7 	bne.w	8002bb4 <indev_encoder_proc+0x664>

                    lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8002a26:	4b67      	ldr	r3, [pc, #412]	; (8002bc4 <indev_encoder_proc+0x674>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2106      	movs	r1, #6
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f003 fdbe 	bl	80065b0 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	331c      	adds	r3, #28
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f001 fb5d 	bl	80040f8 <indev_reset_check>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f040 80b9 	bne.w	8002bb8 <indev_encoder_proc+0x668>

                    lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 8002a46:	4b5f      	ldr	r3, [pc, #380]	; (8002bc4 <indev_encoder_proc+0x674>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2107      	movs	r1, #7
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f003 fdae 	bl	80065b0 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	331c      	adds	r3, #28
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f001 fb4d 	bl	80040f8 <indev_reset_check>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f040 80ab 	bne.w	8002bbc <indev_encoder_proc+0x66c>

                    lv_group_send_data(g, LV_KEY_ENTER);
 8002a66:	210a      	movs	r1, #10
 8002a68:	6938      	ldr	r0, [r7, #16]
 8002a6a:	f7ff f813 	bl	8001a94 <lv_group_send_data>
 8002a6e:	e015      	b.n	8002a9c <indev_encoder_proc+0x54c>
                }
            }
            /*If the focused object is editable and now in navigate mode then on enter switch edit
               mode*/
            else if(editable && !g->editing && !i->proc.long_pr_sent) {
 8002a70:	7b7b      	ldrb	r3, [r7, #13]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d012      	beq.n	8002a9c <indev_encoder_proc+0x54c>
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	7d1b      	ldrb	r3, [r3, #20]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10b      	bne.n	8002a9c <indev_encoder_proc+0x54c>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d103      	bne.n	8002a9c <indev_encoder_proc+0x54c>
                lv_group_set_editing(g, true); /*Set edit mode*/
 8002a94:	2101      	movs	r1, #1
 8002a96:	6938      	ldr	r0, [r7, #16]
 8002a98:	f7ff f829 	bl	8001aee <lv_group_set_editing>
            }
        }

        i->proc.pr_timestamp = 0;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	649a      	str	r2, [r3, #72]	; 0x48
        i->proc.long_pr_sent = 0;
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8002aa8:	f36f 0300 	bfc	r3, #0, #1
 8002aac:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
 8002ab0:	e002      	b.n	8002ab8 <indev_encoder_proc+0x568>
        if(data->key == LV_KEY_ENTER) {
 8002ab2:	bf00      	nop
 8002ab4:	e000      	b.n	8002ab8 <indev_encoder_proc+0x568>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 8002ab6:	bf00      	nop
    }
    indev_obj_act = NULL;
 8002ab8:	4b42      	ldr	r3, [pc, #264]	; (8002bc4 <indev_encoder_proc+0x674>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]

    /*if encoder steps or simulated steps via left/right keys*/
    if(data->enc_diff != 0) {
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d07a      	beq.n	8002bbe <indev_encoder_proc+0x66e>
        /*In edit mode send LEFT/RIGHT keys*/
        if(lv_group_get_editing(g)) {
 8002ac8:	6938      	ldr	r0, [r7, #16]
 8002aca:	f7ff f86b 	bl	8001ba4 <lv_group_get_editing>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d02d      	beq.n	8002b30 <indev_encoder_proc+0x5e0>
            int32_t s;
            if(data->enc_diff < 0) {
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	da11      	bge.n	8002b02 <indev_encoder_proc+0x5b2>
                for(s = 0; s < -data->enc_diff; s++) lv_group_send_data(g, LV_KEY_LEFT);
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	e006      	b.n	8002af2 <indev_encoder_proc+0x5a2>
 8002ae4:	2114      	movs	r1, #20
 8002ae6:	6938      	ldr	r0, [r7, #16]
 8002ae8:	f7fe ffd4 	bl	8001a94 <lv_group_send_data>
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	3301      	adds	r3, #1
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002af8:	425b      	negs	r3, r3
 8002afa:	69fa      	ldr	r2, [r7, #28]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	dbf1      	blt.n	8002ae4 <indev_encoder_proc+0x594>
 8002b00:	e05d      	b.n	8002bbe <indev_encoder_proc+0x66e>
            }
            else if(data->enc_diff > 0) {
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	dd58      	ble.n	8002bbe <indev_encoder_proc+0x66e>
                for(s = 0; s < data->enc_diff; s++) lv_group_send_data(g, LV_KEY_RIGHT);
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
 8002b10:	e006      	b.n	8002b20 <indev_encoder_proc+0x5d0>
 8002b12:	2113      	movs	r1, #19
 8002b14:	6938      	ldr	r0, [r7, #16]
 8002b16:	f7fe ffbd 	bl	8001a94 <lv_group_send_data>
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	61fb      	str	r3, [r7, #28]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002b26:	461a      	mov	r2, r3
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	dbf1      	blt.n	8002b12 <indev_encoder_proc+0x5c2>
 8002b2e:	e046      	b.n	8002bbe <indev_encoder_proc+0x66e>
            }
        }
        /*In navigate mode focus on the next/prev objects*/
        else {
            int32_t s;
            if(data->enc_diff < 0) {
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	da10      	bge.n	8002b5c <indev_encoder_proc+0x60c>
                for(s = 0; s < -data->enc_diff; s++) lv_group_focus_prev(g);
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61bb      	str	r3, [r7, #24]
 8002b3e:	e005      	b.n	8002b4c <indev_encoder_proc+0x5fc>
 8002b40:	6938      	ldr	r0, [r7, #16]
 8002b42:	f7fe ff95 	bl	8001a70 <lv_group_focus_prev>
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	61bb      	str	r3, [r7, #24]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002b52:	425b      	negs	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	dbf2      	blt.n	8002b40 <indev_encoder_proc+0x5f0>
 8002b5a:	e030      	b.n	8002bbe <indev_encoder_proc+0x66e>
            }
            else if(data->enc_diff > 0) {
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	dd2b      	ble.n	8002bbe <indev_encoder_proc+0x66e>
                for(s = 0; s < data->enc_diff; s++) lv_group_focus_next(g);
 8002b66:	2300      	movs	r3, #0
 8002b68:	61bb      	str	r3, [r7, #24]
 8002b6a:	e005      	b.n	8002b78 <indev_encoder_proc+0x628>
 8002b6c:	6938      	ldr	r0, [r7, #16]
 8002b6e:	f7fe ff6d 	bl	8001a4c <lv_group_focus_next>
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	3301      	adds	r3, #1
 8002b76:	61bb      	str	r3, [r7, #24]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	4293      	cmp	r3, r2
 8002b84:	dbf2      	blt.n	8002b6c <indev_encoder_proc+0x61c>
 8002b86:	e01a      	b.n	8002bbe <indev_encoder_proc+0x66e>
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 8002b88:	bf00      	nop
 8002b8a:	e018      	b.n	8002bbe <indev_encoder_proc+0x66e>
    if(g == NULL) return;
 8002b8c:	bf00      	nop
 8002b8e:	e016      	b.n	8002bbe <indev_encoder_proc+0x66e>
    if(indev_obj_act == NULL) return;
 8002b90:	bf00      	nop
 8002b92:	e014      	b.n	8002bbe <indev_encoder_proc+0x66e>
    if(indev_obj_act == NULL) return;
 8002b94:	bf00      	nop
 8002b96:	e012      	b.n	8002bbe <indev_encoder_proc+0x66e>
                if(indev_reset_check(&i->proc)) return;
 8002b98:	bf00      	nop
 8002b9a:	e010      	b.n	8002bbe <indev_encoder_proc+0x66e>
                    if(indev_reset_check(&i->proc)) return;
 8002b9c:	bf00      	nop
 8002b9e:	e00e      	b.n	8002bbe <indev_encoder_proc+0x66e>
                if(indev_reset_check(&i->proc)) return;
 8002ba0:	bf00      	nop
 8002ba2:	e00c      	b.n	8002bbe <indev_encoder_proc+0x66e>
                if(indev_reset_check(&i->proc)) return;
 8002ba4:	bf00      	nop
 8002ba6:	e00a      	b.n	8002bbe <indev_encoder_proc+0x66e>
                if(indev_reset_check(&i->proc)) return;
 8002ba8:	bf00      	nop
 8002baa:	e008      	b.n	8002bbe <indev_encoder_proc+0x66e>
                if(indev_reset_check(&i->proc)) return;
 8002bac:	bf00      	nop
 8002bae:	e006      	b.n	8002bbe <indev_encoder_proc+0x66e>
                    if(indev_reset_check(&i->proc)) return;
 8002bb0:	bf00      	nop
 8002bb2:	e004      	b.n	8002bbe <indev_encoder_proc+0x66e>
                    if(indev_reset_check(&i->proc)) return;
 8002bb4:	bf00      	nop
 8002bb6:	e002      	b.n	8002bbe <indev_encoder_proc+0x66e>
                    if(indev_reset_check(&i->proc)) return;
 8002bb8:	bf00      	nop
 8002bba:	e000      	b.n	8002bbe <indev_encoder_proc+0x66e>
                    if(indev_reset_check(&i->proc)) return;
 8002bbc:	bf00      	nop

#else
    (void)data; /*Unused*/
    (void)i;    /*Unused*/
#endif
}
 8002bbe:	3720      	adds	r7, #32
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20018b64 	.word	0x20018b64

08002bc8 <indev_button_proc>:
 * @param indev pointer to an input device state
 * @param x x coordinate of the next point
 * @param y y coordinate of the next point
 */
static void indev_button_proc(lv_indev_t * i, lv_indev_data_t * data)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
    /* Die gracefully if i->btn_points is NULL */
    if(i->btn_points == NULL) {
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d056      	beq.n	8002c88 <indev_button_proc+0xc0>
        LV_LOG_WARN("indev_button_proc: btn_points was NULL");
        return;
    }

    lv_coord_t x = i->btn_points[data->btn_id].x;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	81fb      	strh	r3, [r7, #14]
    lv_coord_t y = i->btn_points[data->btn_id].y;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	885b      	ldrh	r3, [r3, #2]
 8002bf8:	81bb      	strh	r3, [r7, #12]

    /*If a new point comes always make a release*/
    if(data->state == LV_INDEV_STATE_PR) {
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	7b9b      	ldrb	r3, [r3, #14]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d112      	bne.n	8002c28 <indev_button_proc+0x60>
        if(i->proc.types.pointer.last_point.x != x ||
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002c08:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d106      	bne.n	8002c1e <indev_button_proc+0x56>
           i->proc.types.pointer.last_point.y != y) {
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
        if(i->proc.types.pointer.last_point.x != x ||
 8002c16:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d004      	beq.n	8002c28 <indev_button_proc+0x60>
            indev_proc_release(&i->proc);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	331c      	adds	r3, #28
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fb14 	bl	8003250 <indev_proc_release>
        }
    }

    if(indev_reset_check(&i->proc)) return;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	331c      	adds	r3, #28
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f001 fa63 	bl	80040f8 <indev_reset_check>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d129      	bne.n	8002c8c <indev_button_proc+0xc4>

    /*Save the new points*/
    i->proc.types.pointer.act_point.x = x;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	89fa      	ldrh	r2, [r7, #14]
 8002c3c:	841a      	strh	r2, [r3, #32]
    i->proc.types.pointer.act_point.y = y;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	89ba      	ldrh	r2, [r7, #12]
 8002c42:	845a      	strh	r2, [r3, #34]	; 0x22

    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	7b9b      	ldrb	r3, [r3, #14]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d105      	bne.n	8002c58 <indev_button_proc+0x90>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	331c      	adds	r3, #28
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 f821 	bl	8002c98 <indev_proc_press>
 8002c56:	e004      	b.n	8002c62 <indev_button_proc+0x9a>
    else indev_proc_release(&i->proc);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	331c      	adds	r3, #28
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 faf7 	bl	8003250 <indev_proc_release>

    if(indev_reset_check(&i->proc)) return;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	331c      	adds	r3, #28
 8002c66:	4618      	mov	r0, r3
 8002c68:	f001 fa46 	bl	80040f8 <indev_reset_check>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10e      	bne.n	8002c90 <indev_button_proc+0xc8>

    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	849a      	strh	r2, [r3, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	84da      	strh	r2, [r3, #38]	; 0x26
 8002c86:	e004      	b.n	8002c92 <indev_button_proc+0xca>
        return;
 8002c88:	bf00      	nop
 8002c8a:	e002      	b.n	8002c92 <indev_button_proc+0xca>
    if(indev_reset_check(&i->proc)) return;
 8002c8c:	bf00      	nop
 8002c8e:	e000      	b.n	8002c92 <indev_button_proc+0xca>
    if(indev_reset_check(&i->proc)) return;
 8002c90:	bf00      	nop
}
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <indev_proc_press>:
 * Process the pressed state of LV_INDEV_TYPE_POINTER input devices
 * @param indev pointer to an input device 'proc'
 * @return LV_RES_OK: no indev reset required; LV_RES_INV: indev reset is required
 */
static void indev_proc_press(lv_indev_proc_t * proc)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
    indev_obj_act = proc->types.pointer.act_obj;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	4a8d      	ldr	r2, [pc, #564]	; (8002edc <indev_proc_press+0x244>)
 8002ca6:	6013      	str	r3, [r2, #0]

    if(proc->wait_until_release != 0) return;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f040 82a7 	bne.w	8003208 <indev_proc_press+0x570>

    lv_disp_t * disp = indev_act->driver.disp;
 8002cba:	4b89      	ldr	r3, [pc, #548]	; (8002ee0 <indev_proc_press+0x248>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	613b      	str	r3, [r7, #16]
    bool new_obj_searched = false;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	77fb      	strb	r3, [r7, #31]

    /*If there is no last object then search*/
    if(indev_obj_act == NULL) {
 8002cc6:	4b85      	ldr	r3, [pc, #532]	; (8002edc <indev_proc_press+0x244>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d131      	bne.n	8002d32 <indev_proc_press+0x9a>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
 8002cce:	6938      	ldr	r0, [r7, #16]
 8002cd0:	f7fe fd9e 	bl	8001810 <lv_disp_get_layer_sys>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4610      	mov	r0, r2
 8002cde:	f000 fc45 	bl	800356c <lv_indev_search_obj>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	4b7d      	ldr	r3, [pc, #500]	; (8002edc <indev_proc_press+0x244>)
 8002ce6:	601a      	str	r2, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
 8002ce8:	4b7c      	ldr	r3, [pc, #496]	; (8002edc <indev_proc_press+0x244>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10c      	bne.n	8002d0a <indev_proc_press+0x72>
 8002cf0:	6938      	ldr	r0, [r7, #16]
 8002cf2:	f7fe fd78 	bl	80017e6 <lv_disp_get_layer_top>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4610      	mov	r0, r2
 8002d00:	f000 fc34 	bl	800356c <lv_indev_search_obj>
 8002d04:	4602      	mov	r2, r0
 8002d06:	4b75      	ldr	r3, [pc, #468]	; (8002edc <indev_proc_press+0x244>)
 8002d08:	601a      	str	r2, [r3, #0]
                                                                          &proc->types.pointer.act_point);
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
 8002d0a:	4b74      	ldr	r3, [pc, #464]	; (8002edc <indev_proc_press+0x244>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10c      	bne.n	8002d2c <indev_proc_press+0x94>
 8002d12:	6938      	ldr	r0, [r7, #16]
 8002d14:	f7fe fd3d 	bl	8001792 <lv_disp_get_scr_act>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4610      	mov	r0, r2
 8002d22:	f000 fc23 	bl	800356c <lv_indev_search_obj>
 8002d26:	4602      	mov	r2, r0
 8002d28:	4b6c      	ldr	r3, [pc, #432]	; (8002edc <indev_proc_press+0x244>)
 8002d2a:	601a      	str	r2, [r3, #0]
                                                                          &proc->types.pointer.act_point);
        new_obj_searched = true;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	77fb      	strb	r3, [r7, #31]
 8002d30:	e044      	b.n	8002dbc <indev_proc_press+0x124>
    }
    /*If there is last object but it is not dragged and not protected also search*/
    else if(proc->types.pointer.drag_in_prog == 0 &&
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d13c      	bne.n	8002dbc <indev_proc_press+0x124>
            lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST) == false) {
 8002d42:	4b66      	ldr	r3, [pc, #408]	; (8002edc <indev_proc_press+0x244>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2110      	movs	r1, #16
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f004 fb69 	bl	8007420 <lv_obj_is_protected>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f083 0301 	eor.w	r3, r3, #1
 8002d54:	b2db      	uxtb	r3, r3
    else if(proc->types.pointer.drag_in_prog == 0 &&
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d030      	beq.n	8002dbc <indev_proc_press+0x124>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
 8002d5a:	6938      	ldr	r0, [r7, #16]
 8002d5c:	f7fe fd58 	bl	8001810 <lv_disp_get_layer_sys>
 8002d60:	4602      	mov	r2, r0
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3304      	adds	r3, #4
 8002d66:	4619      	mov	r1, r3
 8002d68:	4610      	mov	r0, r2
 8002d6a:	f000 fbff 	bl	800356c <lv_indev_search_obj>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	4b5a      	ldr	r3, [pc, #360]	; (8002edc <indev_proc_press+0x244>)
 8002d72:	601a      	str	r2, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
 8002d74:	4b59      	ldr	r3, [pc, #356]	; (8002edc <indev_proc_press+0x244>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10c      	bne.n	8002d96 <indev_proc_press+0xfe>
 8002d7c:	6938      	ldr	r0, [r7, #16]
 8002d7e:	f7fe fd32 	bl	80017e6 <lv_disp_get_layer_top>
 8002d82:	4602      	mov	r2, r0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3304      	adds	r3, #4
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	f000 fbee 	bl	800356c <lv_indev_search_obj>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b52      	ldr	r3, [pc, #328]	; (8002edc <indev_proc_press+0x244>)
 8002d94:	601a      	str	r2, [r3, #0]
                                                                          &proc->types.pointer.act_point);
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
 8002d96:	4b51      	ldr	r3, [pc, #324]	; (8002edc <indev_proc_press+0x244>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10c      	bne.n	8002db8 <indev_proc_press+0x120>
 8002d9e:	6938      	ldr	r0, [r7, #16]
 8002da0:	f7fe fcf7 	bl	8001792 <lv_disp_get_scr_act>
 8002da4:	4602      	mov	r2, r0
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3304      	adds	r3, #4
 8002daa:	4619      	mov	r1, r3
 8002dac:	4610      	mov	r0, r2
 8002dae:	f000 fbdd 	bl	800356c <lv_indev_search_obj>
 8002db2:	4602      	mov	r2, r0
 8002db4:	4b49      	ldr	r3, [pc, #292]	; (8002edc <indev_proc_press+0x244>)
 8002db6:	601a      	str	r2, [r3, #0]
                                                                          &proc->types.pointer.act_point);
        new_obj_searched = true;
 8002db8:	2301      	movs	r3, #1
 8002dba:	77fb      	strb	r3, [r7, #31]
    /*If a draggable or a protected object was the last then keep it*/
    else {
    }

    /*The last object might have drag throw. Stop it manually*/
    if(new_obj_searched && proc->types.pointer.last_obj) {
 8002dbc:	7ffb      	ldrb	r3, [r7, #31]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00c      	beq.n	8002ddc <indev_proc_press+0x144>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d008      	beq.n	8002ddc <indev_proc_press+0x144>
        proc->types.pointer.drag_throw_vect.x = 0;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	829a      	strh	r2, [r3, #20]
        proc->types.pointer.drag_throw_vect.y = 0;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	82da      	strh	r2, [r3, #22]
        indev_drag_throw(proc);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 ff66 	bl	8003ca8 <indev_drag_throw>
    }

    /*If a new object was found reset some variables and send a pressed signal*/
    if(indev_obj_act != proc->types.pointer.act_obj) {
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	699a      	ldr	r2, [r3, #24]
 8002de0:	4b3e      	ldr	r3, [pc, #248]	; (8002edc <indev_proc_press+0x244>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	f000 80c9 	beq.w	8002f7c <indev_proc_press+0x2e4>
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	811a      	strh	r2, [r3, #8]
        proc->types.pointer.last_point.y = proc->types.pointer.act_point.y;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	815a      	strh	r2, [r3, #10]

        /*If a new object found the previous was lost, so send a signal*/
        if(proc->types.pointer.act_obj != NULL) {
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d01c      	beq.n	8002e40 <indev_proc_press+0x1a8>
            /*Save the obj because in special cases `act_obj` can change in the signal function*/
            lv_obj_t * last_obj = proc->types.pointer.act_obj;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	60fb      	str	r3, [r7, #12]

            last_obj->signal_cb(last_obj, LV_SIGNAL_PRESS_LOST, indev_act);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	4a33      	ldr	r2, [pc, #204]	; (8002ee0 <indev_proc_press+0x248>)
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	210d      	movs	r1, #13
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f001 f96c 	bl	80040f8 <indev_reset_check>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f040 81f2 	bne.w	800320c <indev_proc_press+0x574>
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, NULL);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f003 fbbf 	bl	80065b0 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f001 f960 	bl	80040f8 <indev_reset_check>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f040 81e8 	bne.w	8003210 <indev_proc_press+0x578>

        }

        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
 8002e40:	4b26      	ldr	r3, [pc, #152]	; (8002edc <indev_proc_press+0x244>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	619a      	str	r2, [r3, #24]
        proc->types.pointer.last_obj = indev_obj_act;
 8002e48:	4b24      	ldr	r3, [pc, #144]	; (8002edc <indev_proc_press+0x244>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	61da      	str	r2, [r3, #28]

        if(indev_obj_act != NULL) {
 8002e50:	4b22      	ldr	r3, [pc, #136]	; (8002edc <indev_proc_press+0x244>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 8091 	beq.w	8002f7c <indev_proc_press+0x2e4>
            /* Save the time when the obj pressed to count long press time.*/
            proc->pr_timestamp                 = lv_tick_get();
 8002e5a:	f017 fcaf 	bl	801a7bc <lv_tick_get>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	62da      	str	r2, [r3, #44]	; 0x2c
            proc->long_pr_sent                 = 0;
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8002e6a:	f36f 0300 	bfc	r3, #0, #1
 8002e6e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
            proc->types.pointer.drag_limit_out = 0;
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002e78:	f36f 0300 	bfc	r3, #0, #1
 8002e7c:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            proc->types.pointer.drag_in_prog   = 0;
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002e86:	f36f 0341 	bfc	r3, #1, #1
 8002e8a:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            proc->types.pointer.drag_sum.x     = 0;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	821a      	strh	r2, [r3, #16]
            proc->types.pointer.drag_sum.y     = 0;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	825a      	strh	r2, [r3, #18]
            proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002ea0:	2103      	movs	r1, #3
 8002ea2:	f361 0384 	bfi	r3, r1, #2, #3
 8002ea6:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            proc->types.pointer.gesture_sent   = 0;
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8002eb0:	f36f 1345 	bfc	r3, #5, #1
 8002eb4:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            proc->types.pointer.gesture_sum.x  = 0;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	84da      	strh	r2, [r3, #38]	; 0x26
            proc->types.pointer.gesture_sum.y  = 0;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	851a      	strh	r2, [r3, #40]	; 0x28
            proc->types.pointer.vect.x         = 0;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	819a      	strh	r2, [r3, #12]
            proc->types.pointer.vect.y         = 0;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	81da      	strh	r2, [r3, #14]

            /*Search for 'top' attribute*/
            lv_obj_t * i        = indev_obj_act;
 8002ed0:	4b02      	ldr	r3, [pc, #8]	; (8002edc <indev_proc_press+0x244>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	61bb      	str	r3, [r7, #24]
            lv_obj_t * last_top = NULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
            while(i != NULL) {
 8002eda:	e011      	b.n	8002f00 <indev_proc_press+0x268>
 8002edc:	20018b64 	.word	0x20018b64
 8002ee0:	20018b60 	.word	0x20018b60
                if(i->top) last_top = i;
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <indev_proc_press+0x260>
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	617b      	str	r3, [r7, #20]
                i = lv_obj_get_parent(i);
 8002ef8:	69b8      	ldr	r0, [r7, #24]
 8002efa:	f003 fcc5 	bl	8006888 <lv_obj_get_parent>
 8002efe:	61b8      	str	r0, [r7, #24]
            while(i != NULL) {
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1ee      	bne.n	8002ee4 <indev_proc_press+0x24c>
            }

            if(last_top != NULL) {
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <indev_proc_press+0x27a>
                /*Move the last_top object to the foreground*/
                lv_obj_move_foreground(last_top);
 8002f0c:	6978      	ldr	r0, [r7, #20]
 8002f0e:	f002 fd81 	bl	8005a14 <lv_obj_move_foreground>
            }

            /*Send a signal about the press*/
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, indev_act);
 8002f12:	4b48      	ldr	r3, [pc, #288]	; (8003034 <indev_proc_press+0x39c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	4a46      	ldr	r2, [pc, #280]	; (8003034 <indev_proc_press+0x39c>)
 8002f1a:	6810      	ldr	r0, [r2, #0]
 8002f1c:	4a46      	ldr	r2, [pc, #280]	; (8003038 <indev_proc_press+0x3a0>)
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	210b      	movs	r1, #11
 8002f22:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f001 f8e7 	bl	80040f8 <indev_reset_check>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f040 8171 	bne.w	8003214 <indev_proc_press+0x57c>

            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 8002f32:	4b40      	ldr	r3, [pc, #256]	; (8003034 <indev_proc_press+0x39c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2200      	movs	r2, #0
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f003 fb38 	bl	80065b0 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f001 f8d9 	bl	80040f8 <indev_reset_check>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f040 8165 	bne.w	8003218 <indev_proc_press+0x580>

            if(indev_act->proc.wait_until_release) return;
 8002f4e:	4b3a      	ldr	r3, [pc, #232]	; (8003038 <indev_proc_press+0x3a0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f040 815d 	bne.w	800321c <indev_proc_press+0x584>

            /*Handle focus*/
            indev_click_focus(&indev_act->proc);
 8002f62:	4b35      	ldr	r3, [pc, #212]	; (8003038 <indev_proc_press+0x3a0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	331c      	adds	r3, #28
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fb67 	bl	800363c <indev_click_focus>
            if(indev_reset_check(proc)) return;
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f001 f8c2 	bl	80040f8 <indev_reset_check>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f040 8152 	bne.w	8003220 <indev_proc_press+0x588>

        }
    }

    /*Calculate the types.pointer.vector*/
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	b21a      	sxth	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	819a      	strh	r2, [r3, #12]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	b21a      	sxth	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	81da      	strh	r2, [r3, #14]

    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	10db      	asrs	r3, r3, #3
 8002fc0:	b21a      	sxth	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	829a      	strh	r2, [r3, #20]
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	10db      	asrs	r3, r3, #3
 8002fd6:	b21a      	sxth	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	82da      	strh	r2, [r3, #22]

    if(proc->types.pointer.drag_throw_vect.x < 0)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	da09      	bge.n	8002ffa <indev_proc_press+0x362>
        proc->types.pointer.drag_throw_vect.x++;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	b21a      	sxth	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	829a      	strh	r2, [r3, #20]
 8002ff8:	e00d      	b.n	8003016 <indev_proc_press+0x37e>
    else if(proc->types.pointer.drag_throw_vect.x > 0)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003000:	2b00      	cmp	r3, #0
 8003002:	dd08      	ble.n	8003016 <indev_proc_press+0x37e>
        proc->types.pointer.drag_throw_vect.x--;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800300a:	b29b      	uxth	r3, r3
 800300c:	3b01      	subs	r3, #1
 800300e:	b29b      	uxth	r3, r3
 8003010:	b21a      	sxth	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	829a      	strh	r2, [r3, #20]

    if(proc->types.pointer.drag_throw_vect.y < 0)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800301c:	2b00      	cmp	r3, #0
 800301e:	da0d      	bge.n	800303c <indev_proc_press+0x3a4>
        proc->types.pointer.drag_throw_vect.y++;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003026:	b29b      	uxth	r3, r3
 8003028:	3301      	adds	r3, #1
 800302a:	b29b      	uxth	r3, r3
 800302c:	b21a      	sxth	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	82da      	strh	r2, [r3, #22]
 8003032:	e011      	b.n	8003058 <indev_proc_press+0x3c0>
 8003034:	20018b64 	.word	0x20018b64
 8003038:	20018b60 	.word	0x20018b60
    else if(proc->types.pointer.drag_throw_vect.y > 0)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003042:	2b00      	cmp	r3, #0
 8003044:	dd08      	ble.n	8003058 <indev_proc_press+0x3c0>
        proc->types.pointer.drag_throw_vect.y--;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b29b      	uxth	r3, r3
 8003052:	b21a      	sxth	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	82da      	strh	r2, [r3, #22]

    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800305e:	b29a      	uxth	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	10db      	asrs	r3, r3, #3
 800306a:	b29b      	uxth	r3, r3
 800306c:	4413      	add	r3, r2
 800306e:	b29b      	uxth	r3, r3
 8003070:	b21a      	sxth	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	829a      	strh	r2, [r3, #20]
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800307c:	b29a      	uxth	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	10db      	asrs	r3, r3, #3
 8003088:	b29b      	uxth	r3, r3
 800308a:	4413      	add	r3, r2
 800308c:	b29b      	uxth	r3, r3
 800308e:	b21a      	sxth	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	82da      	strh	r2, [r3, #22]

    /*If there is active object and it can be dragged run the drag*/
    if(indev_obj_act != NULL) {
 8003094:	4b6c      	ldr	r3, [pc, #432]	; (8003248 <indev_proc_press+0x5b0>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 80d2 	beq.w	8003242 <indev_proc_press+0x5aa>
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, indev_act);
 800309e:	4b6a      	ldr	r3, [pc, #424]	; (8003248 <indev_proc_press+0x5b0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	4a68      	ldr	r2, [pc, #416]	; (8003248 <indev_proc_press+0x5b0>)
 80030a6:	6810      	ldr	r0, [r2, #0]
 80030a8:	4a68      	ldr	r2, [pc, #416]	; (800324c <indev_proc_press+0x5b4>)
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	210c      	movs	r1, #12
 80030ae:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f001 f821 	bl	80040f8 <indev_reset_check>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f040 80b3 	bne.w	8003224 <indev_proc_press+0x58c>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
 80030be:	4b62      	ldr	r3, [pc, #392]	; (8003248 <indev_proc_press+0x5b0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2200      	movs	r2, #0
 80030c4:	2101      	movs	r1, #1
 80030c6:	4618      	mov	r0, r3
 80030c8:	f003 fa72 	bl	80065b0 <lv_event_send>
        if(indev_reset_check(proc)) return;
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f001 f813 	bl	80040f8 <indev_reset_check>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f040 80a7 	bne.w	8003228 <indev_proc_press+0x590>
        if(indev_act->proc.wait_until_release) return;
 80030da:	4b5c      	ldr	r3, [pc, #368]	; (800324c <indev_proc_press+0x5b4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f040 809f 	bne.w	800322c <indev_proc_press+0x594>

        indev_drag(proc);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fbb8 	bl	8003864 <indev_drag>
        indev_gesture(proc);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 ff3b 	bl	8003f70 <indev_gesture>
        if(indev_reset_check(proc)) return;
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fffc 	bl	80040f8 <indev_reset_check>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	f040 8094 	bne.w	8003230 <indev_proc_press+0x598>

        /*If there is no drag then check for long press time*/
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 0) {
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d13a      	bne.n	800318e <indev_proc_press+0x4f6>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d132      	bne.n	800318e <indev_proc_press+0x4f6>
            /*Send a signal about the long press if enough time elapsed*/
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver.long_press_time) {
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	4618      	mov	r0, r3
 800312e:	f017 fb5f 	bl	801a7f0 <lv_tick_elaps>
 8003132:	4602      	mov	r2, r0
 8003134:	4b45      	ldr	r3, [pc, #276]	; (800324c <indev_proc_press+0x5b4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	8b1b      	ldrh	r3, [r3, #24]
 800313a:	429a      	cmp	r2, r3
 800313c:	d927      	bls.n	800318e <indev_proc_press+0x4f6>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, indev_act);
 800313e:	4b42      	ldr	r3, [pc, #264]	; (8003248 <indev_proc_press+0x5b0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	4a40      	ldr	r2, [pc, #256]	; (8003248 <indev_proc_press+0x5b0>)
 8003146:	6810      	ldr	r0, [r2, #0]
 8003148:	4a40      	ldr	r2, [pc, #256]	; (800324c <indev_proc_press+0x5b4>)
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	210f      	movs	r1, #15
 800314e:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 ffd1 	bl	80040f8 <indev_reset_check>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d16b      	bne.n	8003234 <indev_proc_press+0x59c>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 800315c:	4b3a      	ldr	r3, [pc, #232]	; (8003248 <indev_proc_press+0x5b0>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2200      	movs	r2, #0
 8003162:	2104      	movs	r1, #4
 8003164:	4618      	mov	r0, r3
 8003166:	f003 fa23 	bl	80065b0 <lv_event_send>
                if(indev_reset_check(proc)) return;
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 ffc4 	bl	80040f8 <indev_reset_check>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d160      	bne.n	8003238 <indev_proc_press+0x5a0>

                /*Mark the signal sending to do not send it again*/
                proc->long_pr_sent = 1;
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34

                /*Save the long press time stamp for the long press repeat handler*/
                proc->longpr_rep_timestamp = lv_tick_get();
 8003184:	f017 fb1a 	bl	801a7bc <lv_tick_get>
 8003188:	4602      	mov	r2, r0
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	631a      	str	r2, [r3, #48]	; 0x30
            }
        }
        /*Send long press repeated signal*/
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 1) {
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d151      	bne.n	8003242 <indev_proc_press+0x5aa>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d049      	beq.n	8003242 <indev_proc_press+0x5aa>
            /*Send a signal about the long press repeat if enough time elapsed*/
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver.long_press_rep_time) {
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	4618      	mov	r0, r3
 80031b4:	f017 fb1c 	bl	801a7f0 <lv_tick_elaps>
 80031b8:	4602      	mov	r2, r0
 80031ba:	4b24      	ldr	r3, [pc, #144]	; (800324c <indev_proc_press+0x5b4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	8b5b      	ldrh	r3, [r3, #26]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d93e      	bls.n	8003242 <indev_proc_press+0x5aa>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, indev_act);
 80031c4:	4b20      	ldr	r3, [pc, #128]	; (8003248 <indev_proc_press+0x5b0>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	4a1f      	ldr	r2, [pc, #124]	; (8003248 <indev_proc_press+0x5b0>)
 80031cc:	6810      	ldr	r0, [r2, #0]
 80031ce:	4a1f      	ldr	r2, [pc, #124]	; (800324c <indev_proc_press+0x5b4>)
 80031d0:	6812      	ldr	r2, [r2, #0]
 80031d2:	2110      	movs	r1, #16
 80031d4:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 ff8e 	bl	80040f8 <indev_reset_check>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d12c      	bne.n	800323c <indev_proc_press+0x5a4>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 80031e2:	4b19      	ldr	r3, [pc, #100]	; (8003248 <indev_proc_press+0x5b0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2200      	movs	r2, #0
 80031e8:	2105      	movs	r1, #5
 80031ea:	4618      	mov	r0, r3
 80031ec:	f003 f9e0 	bl	80065b0 <lv_event_send>
                if(indev_reset_check(proc)) return;
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 ff81 	bl	80040f8 <indev_reset_check>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d121      	bne.n	8003240 <indev_proc_press+0x5a8>
                proc->longpr_rep_timestamp = lv_tick_get();
 80031fc:	f017 fade 	bl	801a7bc <lv_tick_get>
 8003200:	4602      	mov	r2, r0
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
 8003206:	e01c      	b.n	8003242 <indev_proc_press+0x5aa>
    if(proc->wait_until_release != 0) return;
 8003208:	bf00      	nop
 800320a:	e01a      	b.n	8003242 <indev_proc_press+0x5aa>
            if(indev_reset_check(proc)) return;
 800320c:	bf00      	nop
 800320e:	e018      	b.n	8003242 <indev_proc_press+0x5aa>
            if(indev_reset_check(proc)) return;
 8003210:	bf00      	nop
 8003212:	e016      	b.n	8003242 <indev_proc_press+0x5aa>
            if(indev_reset_check(proc)) return;
 8003214:	bf00      	nop
 8003216:	e014      	b.n	8003242 <indev_proc_press+0x5aa>
            if(indev_reset_check(proc)) return;
 8003218:	bf00      	nop
 800321a:	e012      	b.n	8003242 <indev_proc_press+0x5aa>
            if(indev_act->proc.wait_until_release) return;
 800321c:	bf00      	nop
 800321e:	e010      	b.n	8003242 <indev_proc_press+0x5aa>
            if(indev_reset_check(proc)) return;
 8003220:	bf00      	nop
 8003222:	e00e      	b.n	8003242 <indev_proc_press+0x5aa>
        if(indev_reset_check(proc)) return;
 8003224:	bf00      	nop
 8003226:	e00c      	b.n	8003242 <indev_proc_press+0x5aa>
        if(indev_reset_check(proc)) return;
 8003228:	bf00      	nop
 800322a:	e00a      	b.n	8003242 <indev_proc_press+0x5aa>
        if(indev_act->proc.wait_until_release) return;
 800322c:	bf00      	nop
 800322e:	e008      	b.n	8003242 <indev_proc_press+0x5aa>
        if(indev_reset_check(proc)) return;
 8003230:	bf00      	nop
 8003232:	e006      	b.n	8003242 <indev_proc_press+0x5aa>
                if(indev_reset_check(proc)) return;
 8003234:	bf00      	nop
 8003236:	e004      	b.n	8003242 <indev_proc_press+0x5aa>
                if(indev_reset_check(proc)) return;
 8003238:	bf00      	nop
 800323a:	e002      	b.n	8003242 <indev_proc_press+0x5aa>
                if(indev_reset_check(proc)) return;
 800323c:	bf00      	nop
 800323e:	e000      	b.n	8003242 <indev_proc_press+0x5aa>
                if(indev_reset_check(proc)) return;
 8003240:	bf00      	nop
            }
        }
    }
}
 8003242:	3720      	adds	r7, #32
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20018b64 	.word	0x20018b64
 800324c:	20018b60 	.word	0x20018b60

08003250 <indev_proc_release>:
/**
 * Process the released state of LV_INDEV_TYPE_POINTER input devices
 * @param proc pointer to an input device 'proc'
 */
static void indev_proc_release(lv_indev_proc_t * proc)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
    if(proc->wait_until_release != 0) {
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d012      	beq.n	800328e <indev_proc_release+0x3e>
        proc->types.pointer.act_obj  = NULL;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	619a      	str	r2, [r3, #24]
        proc->types.pointer.last_obj = NULL;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	61da      	str	r2, [r3, #28]
        proc->pr_timestamp           = 0;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	62da      	str	r2, [r3, #44]	; 0x2c
        proc->longpr_rep_timestamp   = 0;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
        proc->wait_until_release     = 0;
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8003286:	f36f 03c3 	bfc	r3, #3, #1
 800328a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    }
    indev_obj_act = proc->types.pointer.act_obj;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	4a86      	ldr	r2, [pc, #536]	; (80034ac <indev_proc_release+0x25c>)
 8003294:	6013      	str	r3, [r2, #0]

    /*Forget the act obj and send a released signal */
    if(indev_obj_act) {
 8003296:	4b85      	ldr	r3, [pc, #532]	; (80034ac <indev_proc_release+0x25c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 80dd 	beq.w	800345a <indev_proc_release+0x20a>

        /* If the object was protected against press lost then it possible that
         * the object is already not pressed but still it is the `act_obj`.
         * In this case send the `LV_SIGNAL_RELEASED/CLICKED` instead of `LV_SIGNAL_PRESS_LOST` if
         * the indev is ON the `types.pointer.act_obj` */
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST)) {
 80032a0:	4b82      	ldr	r3, [pc, #520]	; (80034ac <indev_proc_release+0x25c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2110      	movs	r1, #16
 80032a6:	4618      	mov	r0, r3
 80032a8:	f004 f8ba 	bl	8007420 <lv_obj_is_protected>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d049      	beq.n	8003346 <indev_proc_release+0xf6>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
 80032b2:	4b7e      	ldr	r3, [pc, #504]	; (80034ac <indev_proc_release+0x25c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	4a7c      	ldr	r2, [pc, #496]	; (80034ac <indev_proc_release+0x25c>)
 80032ba:	6810      	ldr	r0, [r2, #0]
 80032bc:	4a7c      	ldr	r2, [pc, #496]	; (80034b0 <indev_proc_release+0x260>)
 80032be:	6812      	ldr	r2, [r2, #0]
 80032c0:	210e      	movs	r1, #14
 80032c2:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 ff17 	bl	80040f8 <indev_reset_check>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f040 80d9 	bne.w	8003484 <indev_proc_release+0x234>

            if(proc->types.pointer.drag_in_prog == 0) {
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d123      	bne.n	800332a <indev_proc_release+0xda>
                if(proc->long_pr_sent == 0) {
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10d      	bne.n	800330e <indev_proc_release+0xbe>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 80032f2:	4b6e      	ldr	r3, [pc, #440]	; (80034ac <indev_proc_release+0x25c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2200      	movs	r2, #0
 80032f8:	2103      	movs	r1, #3
 80032fa:	4618      	mov	r0, r3
 80032fc:	f003 f958 	bl	80065b0 <lv_event_send>
                    if(indev_reset_check(proc)) return;
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 fef9 	bl	80040f8 <indev_reset_check>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	f040 80bd 	bne.w	8003488 <indev_proc_release+0x238>
                }

                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 800330e:	4b67      	ldr	r3, [pc, #412]	; (80034ac <indev_proc_release+0x25c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2200      	movs	r2, #0
 8003314:	2106      	movs	r1, #6
 8003316:	4618      	mov	r0, r3
 8003318:	f003 f94a 	bl	80065b0 <lv_event_send>
                if(indev_reset_check(proc)) return;
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 feeb 	bl	80040f8 <indev_reset_check>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	f040 80b1 	bne.w	800348c <indev_proc_release+0x23c>
            }

            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 800332a:	4b60      	ldr	r3, [pc, #384]	; (80034ac <indev_proc_release+0x25c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2200      	movs	r2, #0
 8003330:	2107      	movs	r1, #7
 8003332:	4618      	mov	r0, r3
 8003334:	f003 f93c 	bl	80065b0 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 fedd 	bl	80040f8 <indev_reset_check>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d04f      	beq.n	80033e4 <indev_proc_release+0x194>
 8003344:	e0af      	b.n	80034a6 <indev_proc_release+0x256>
        }
        /* The simple case: `act_obj` was not protected against press lost.
         * If it is already not pressed then `indev_proc_press` would set `indev_obj_act = NULL`*/
        else {
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
 8003346:	4b59      	ldr	r3, [pc, #356]	; (80034ac <indev_proc_release+0x25c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	4a57      	ldr	r2, [pc, #348]	; (80034ac <indev_proc_release+0x25c>)
 800334e:	6810      	ldr	r0, [r2, #0]
 8003350:	4a57      	ldr	r2, [pc, #348]	; (80034b0 <indev_proc_release+0x260>)
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	210e      	movs	r1, #14
 8003356:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 fecd 	bl	80040f8 <indev_reset_check>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	f040 8095 	bne.w	8003490 <indev_proc_release+0x240>

            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d114      	bne.n	80033a0 <indev_proc_release+0x150>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10c      	bne.n	80033a0 <indev_proc_release+0x150>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8003386:	4b49      	ldr	r3, [pc, #292]	; (80034ac <indev_proc_release+0x25c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2200      	movs	r2, #0
 800338c:	2103      	movs	r1, #3
 800338e:	4618      	mov	r0, r3
 8003390:	f003 f90e 	bl	80065b0 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 feaf 	bl	80040f8 <indev_reset_check>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d179      	bne.n	8003494 <indev_proc_release+0x244>
            }

            if(proc->types.pointer.drag_in_prog == 0) {
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10c      	bne.n	80033ca <indev_proc_release+0x17a>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 80033b0:	4b3e      	ldr	r3, [pc, #248]	; (80034ac <indev_proc_release+0x25c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2200      	movs	r2, #0
 80033b6:	2106      	movs	r1, #6
 80033b8:	4618      	mov	r0, r3
 80033ba:	f003 f8f9 	bl	80065b0 <lv_event_send>
                if(indev_reset_check(proc)) return;
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fe9a 	bl	80040f8 <indev_reset_check>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d166      	bne.n	8003498 <indev_proc_release+0x248>
            }

            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 80033ca:	4b38      	ldr	r3, [pc, #224]	; (80034ac <indev_proc_release+0x25c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2200      	movs	r2, #0
 80033d0:	2107      	movs	r1, #7
 80033d2:	4618      	mov	r0, r3
 80033d4:	f003 f8ec 	bl	80065b0 <lv_event_send>
            if(indev_reset_check(proc)) return;
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 fe8d 	bl	80040f8 <indev_reset_check>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d15b      	bne.n	800349c <indev_proc_release+0x24c>
        }

        /*Send LV_EVENT_DRAG_THROW_BEGIN if required */
        /*If drag parent is active check recursively the drag_parent attribute*/
        lv_obj_t * drag_obj = get_dragged_obj(indev_obj_act);
 80033e4:	4b31      	ldr	r3, [pc, #196]	; (80034ac <indev_proc_release+0x25c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fda3 	bl	8003f34 <get_dragged_obj>
 80033ee:	60f8      	str	r0, [r7, #12]
        if(drag_obj) {
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d028      	beq.n	8003448 <indev_proc_release+0x1f8>
            if(lv_obj_get_drag_throw(drag_obj) && proc->types.pointer.drag_in_prog) {
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f003 ff8c 	bl	8007314 <lv_obj_get_drag_throw>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d022      	beq.n	8003448 <indev_proc_release+0x1f8>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d01a      	beq.n	8003448 <indev_proc_release+0x1f8>
                if(drag_obj->signal_cb) drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_THROW_BEGIN, NULL);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d005      	beq.n	8003426 <indev_proc_release+0x1d6>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	2200      	movs	r2, #0
 8003420:	2112      	movs	r1, #18
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fe66 	bl	80040f8 <indev_reset_check>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d136      	bne.n	80034a0 <indev_proc_release+0x250>

                lv_event_send(drag_obj, LV_EVENT_DRAG_THROW_BEGIN, NULL);
 8003432:	2200      	movs	r2, #0
 8003434:	210a      	movs	r1, #10
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f003 f8ba 	bl	80065b0 <lv_event_send>
                if(indev_reset_check(proc)) return;
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fe5b 	bl	80040f8 <indev_reset_check>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d12d      	bne.n	80034a4 <indev_proc_release+0x254>
            }
        }

        proc->types.pointer.act_obj = NULL;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	619a      	str	r2, [r3, #24]
        proc->pr_timestamp          = 0;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	62da      	str	r2, [r3, #44]	; 0x2c
        proc->longpr_rep_timestamp  = 0;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /*The reset can be set in the signal function.
     * In case of reset query ignore the remaining parts.*/
    if(proc->types.pointer.last_obj != NULL && proc->reset_query == 0) {
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d021      	beq.n	80034a6 <indev_proc_release+0x256>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d119      	bne.n	80034a6 <indev_proc_release+0x256>
        indev_drag_throw(proc);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fc18 	bl	8003ca8 <indev_drag_throw>
        if(indev_reset_check(proc)) return;
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fe3d 	bl	80040f8 <indev_reset_check>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	e010      	b.n	80034a6 <indev_proc_release+0x256>
            if(indev_reset_check(proc)) return;
 8003484:	bf00      	nop
 8003486:	e00e      	b.n	80034a6 <indev_proc_release+0x256>
                    if(indev_reset_check(proc)) return;
 8003488:	bf00      	nop
 800348a:	e00c      	b.n	80034a6 <indev_proc_release+0x256>
                if(indev_reset_check(proc)) return;
 800348c:	bf00      	nop
 800348e:	e00a      	b.n	80034a6 <indev_proc_release+0x256>
            if(indev_reset_check(proc)) return;
 8003490:	bf00      	nop
 8003492:	e008      	b.n	80034a6 <indev_proc_release+0x256>
                if(indev_reset_check(proc)) return;
 8003494:	bf00      	nop
 8003496:	e006      	b.n	80034a6 <indev_proc_release+0x256>
                if(indev_reset_check(proc)) return;
 8003498:	bf00      	nop
 800349a:	e004      	b.n	80034a6 <indev_proc_release+0x256>
            if(indev_reset_check(proc)) return;
 800349c:	bf00      	nop
 800349e:	e002      	b.n	80034a6 <indev_proc_release+0x256>
                if(indev_reset_check(proc)) return;
 80034a0:	bf00      	nop
 80034a2:	e000      	b.n	80034a6 <indev_proc_release+0x256>
                if(indev_reset_check(proc)) return;
 80034a4:	bf00      	nop
    }
}
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	20018b64 	.word	0x20018b64
 80034b0:	20018b60 	.word	0x20018b60

080034b4 <indev_proc_reset_query_handler>:
 * @param data pointer to the data read from the input device
 * Reset input device if a reset query has been sent to it
 * @param indev pointer to an input device
 */
static void indev_proc_reset_query_handler(lv_indev_t * indev)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
    if(indev->proc.reset_query) {
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d046      	beq.n	800355a <indev_proc_reset_query_handler+0xa6>
        indev->proc.types.pointer.act_obj           = NULL;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	635a      	str	r2, [r3, #52]	; 0x34
        indev->proc.types.pointer.last_obj          = NULL;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	639a      	str	r2, [r3, #56]	; 0x38
        indev->proc.types.pointer.drag_limit_out    = 0;
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	f892 3046 	ldrb.w	r3, [r2, #70]	; 0x46
 80034de:	f36f 0300 	bfc	r3, #0, #1
 80034e2:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
        indev->proc.types.pointer.drag_in_prog      = 0;
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	f892 3046 	ldrb.w	r3, [r2, #70]	; 0x46
 80034ec:	f36f 0341 	bfc	r3, #1, #1
 80034f0:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
        indev->proc.long_pr_sent                    = 0;
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 80034fa:	f36f 0300 	bfc	r3, #0, #1
 80034fe:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
        indev->proc.pr_timestamp                    = 0;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	649a      	str	r2, [r3, #72]	; 0x48
        indev->proc.longpr_rep_timestamp            = 0;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	64da      	str	r2, [r3, #76]	; 0x4c
        indev->proc.types.pointer.drag_sum.x        = 0;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	859a      	strh	r2, [r3, #44]	; 0x2c
        indev->proc.types.pointer.drag_sum.y        = 0;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	85da      	strh	r2, [r3, #46]	; 0x2e
        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	f892 3046 	ldrb.w	r3, [r2, #70]	; 0x46
 8003520:	2103      	movs	r1, #3
 8003522:	f361 0384 	bfi	r3, r1, #2, #3
 8003526:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
        indev->proc.types.pointer.drag_throw_vect.x = 0;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	861a      	strh	r2, [r3, #48]	; 0x30
        indev->proc.types.pointer.drag_throw_vect.y = 0;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	865a      	strh	r2, [r3, #50]	; 0x32
        indev->proc.types.pointer.gesture_sum.x     = 0;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        indev->proc.types.pointer.gesture_sum.y     = 0;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        indev->proc.reset_query                     = 0;
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 800354c:	f36f 0341 	bfc	r3, #1, #1
 8003550:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
        indev_obj_act                               = NULL;
 8003554:	4b04      	ldr	r3, [pc, #16]	; (8003568 <indev_proc_reset_query_handler+0xb4>)
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]
    }
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	20018b64 	.word	0x20018b64

0800356c <lv_indev_search_obj>:
 * @param obj pointer to a start object, typically the screen
 * @param point pointer to a point for searching the most top child
 * @return pointer to the found object or NULL if there was no suitable object
 */
lv_obj_t * lv_indev_search_obj(lv_obj_t * obj, lv_point_t * point)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
    lv_obj_t * found_p = NULL;
 8003576:	2300      	movs	r3, #0
 8003578:	617b      	str	r3, [r7, #20]

    /*If the point is on this object check its children too*/
    if(lv_obj_hittest(obj, point)) {
 800357a:	6839      	ldr	r1, [r7, #0]
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f004 f83e 	bl	80075fe <lv_obj_hittest>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d053      	beq.n	8003630 <lv_indev_search_obj+0xc4>
        lv_obj_t * i;

        _LV_LL_READ(obj->child_ll, i) {
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3304      	adds	r3, #4
 800358c:	4618      	mov	r0, r3
 800358e:	f018 fe8b 	bl	801c2a8 <_lv_ll_get_head>
 8003592:	6138      	str	r0, [r7, #16]
 8003594:	e00e      	b.n	80035b4 <lv_indev_search_obj+0x48>
            found_p = lv_indev_search_obj(i, point);
 8003596:	6839      	ldr	r1, [r7, #0]
 8003598:	6938      	ldr	r0, [r7, #16]
 800359a:	f7ff ffe7 	bl	800356c <lv_indev_search_obj>
 800359e:	6178      	str	r0, [r7, #20]

            /*If a child was found then break*/
            if(found_p != NULL) {
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10a      	bne.n	80035bc <lv_indev_search_obj+0x50>
        _LV_LL_READ(obj->child_ll, i) {
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3304      	adds	r3, #4
 80035aa:	6939      	ldr	r1, [r7, #16]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f018 fea1 	bl	801c2f4 <_lv_ll_get_next>
 80035b2:	6138      	str	r0, [r7, #16]
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1ed      	bne.n	8003596 <lv_indev_search_obj+0x2a>
 80035ba:	e000      	b.n	80035be <lv_indev_search_obj+0x52>
                break;
 80035bc:	bf00      	nop
            }
        }

        /*If then the children was not ok, and this obj is clickable
         * and it or its parent is not hidden then save this object*/
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d135      	bne.n	8003630 <lv_indev_search_obj+0xc4>
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f003 fe33 	bl	8007230 <lv_obj_get_click>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d02f      	beq.n	8003630 <lv_indev_search_obj+0xc4>
            lv_obj_t * hidden_i = obj;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	60fb      	str	r3, [r7, #12]
            while(hidden_i != NULL) {
 80035d4:	e009      	b.n	80035ea <lv_indev_search_obj+0x7e>
                if(lv_obj_get_hidden(hidden_i) == true) break;
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f003 fe02 	bl	80071e0 <lv_obj_get_hidden>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d107      	bne.n	80035f2 <lv_indev_search_obj+0x86>
                hidden_i = lv_obj_get_parent(hidden_i);
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f003 f950 	bl	8006888 <lv_obj_get_parent>
 80035e8:	60f8      	str	r0, [r7, #12]
            while(hidden_i != NULL) {
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1f2      	bne.n	80035d6 <lv_indev_search_obj+0x6a>
 80035f0:	e000      	b.n	80035f4 <lv_indev_search_obj+0x88>
                if(lv_obj_get_hidden(hidden_i) == true) break;
 80035f2:	bf00      	nop
            }
            /*No parent found with hidden == true*/
            if(lv_obj_is_protected(obj, LV_PROTECT_EVENT_TO_DISABLED) == false){
 80035f4:	2140      	movs	r1, #64	; 0x40
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f003 ff12 	bl	8007420 <lv_obj_is_protected>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f083 0301 	eor.w	r3, r3, #1
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00e      	beq.n	8003626 <lv_indev_search_obj+0xba>
                if(hidden_i == NULL && (lv_obj_get_state(obj, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) == false) found_p = obj;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d110      	bne.n	8003630 <lv_indev_search_obj+0xc4>
 800360e:	2100      	movs	r1, #0
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f003 ff2f 	bl	8007474 <lv_obj_get_state>
 8003616:	4603      	mov	r3, r0
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b00      	cmp	r3, #0
 800361e:	d107      	bne.n	8003630 <lv_indev_search_obj+0xc4>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	e004      	b.n	8003630 <lv_indev_search_obj+0xc4>
            }
            else {
                if(hidden_i == NULL) found_p = obj;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <lv_indev_search_obj+0xc4>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	617b      	str	r3, [r7, #20]
            }
        }
    }

    return found_p;
 8003630:	697b      	ldr	r3, [r7, #20]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <indev_click_focus>:
/**
 * Handle focus/defocus on click for POINTER input devices
 * @param proc pointer to the state of the indev
 */
static void indev_click_focus(lv_indev_proc_t * proc)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
    /*Handle click focus*/
    lv_obj_t * obj_to_focus = lv_obj_get_focused_obj(indev_obj_act);
 8003644:	4b86      	ldr	r3, [pc, #536]	; (8003860 <indev_click_focus+0x224>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f004 ff60 	bl	800850e <lv_obj_get_focused_obj>
 800364e:	6178      	str	r0, [r7, #20]
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
 8003650:	4b83      	ldr	r3, [pc, #524]	; (8003860 <indev_click_focus+0x224>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2120      	movs	r1, #32
 8003656:	4618      	mov	r0, r3
 8003658:	f003 fee2 	bl	8007420 <lv_obj_is_protected>
 800365c:	4603      	mov	r3, r0
 800365e:	f083 0301 	eor.w	r3, r3, #1
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 80f8 	beq.w	800385a <indev_click_focus+0x21e>
       proc->types.pointer.last_pressed != obj_to_focus) {
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	429a      	cmp	r2, r3
 8003672:	f000 80f2 	beq.w	800385a <indev_click_focus+0x21e>
#if LV_USE_GROUP
        lv_group_t * g_act = lv_obj_get_group(obj_to_focus);
 8003676:	6978      	ldr	r0, [r7, #20]
 8003678:	f003 ff2e 	bl	80074d8 <lv_obj_get_group>
 800367c:	6138      	str	r0, [r7, #16]
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d006      	beq.n	8003694 <indev_click_focus+0x58>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	4618      	mov	r0, r3
 800368c:	f003 ff24 	bl	80074d8 <lv_obj_get_group>
 8003690:	4603      	mov	r3, r0
 8003692:	e000      	b.n	8003696 <indev_click_focus+0x5a>
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]

        /*If both the last and act. obj. are in the same group (or no group but it's also the same) */
        if(g_act == g_prev) {
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	429a      	cmp	r2, r3
 800369e:	d146      	bne.n	800372e <indev_click_focus+0xf2>
            /*The objects are in a group*/
            if(g_act) {
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <indev_click_focus+0x80>
                lv_group_focus_obj(obj_to_focus);
 80036a6:	6978      	ldr	r0, [r7, #20]
 80036a8:	f7fe f934 	bl	8001914 <lv_group_focus_obj>
                if(indev_reset_check(proc)) return;
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 fd23 	bl	80040f8 <indev_reset_check>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80bb 	beq.w	8003830 <indev_click_focus+0x1f4>
 80036ba:	e0ce      	b.n	800385a <indev_click_focus+0x21e>
            }
            /*The object are not in group*/
            else {
                if(proc->types.pointer.last_pressed) {
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01b      	beq.n	80036fc <indev_click_focus+0xc0>
                    lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	2200      	movs	r2, #0
 80036ca:	2117      	movs	r1, #23
 80036cc:	4618      	mov	r0, r3
 80036ce:	f003 f81f 	bl	8006710 <lv_signal_send>
                    if(indev_reset_check(proc)) return;
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fd10 	bl	80040f8 <indev_reset_check>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f040 80ac 	bne.w	8003838 <indev_click_focus+0x1fc>
                    lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	2200      	movs	r2, #0
 80036e6:	210e      	movs	r1, #14
 80036e8:	4618      	mov	r0, r3
 80036ea:	f002 ff61 	bl	80065b0 <lv_event_send>
                    if(indev_reset_check(proc)) return;
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 fd02 	bl	80040f8 <indev_reset_check>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f040 80a0 	bne.w	800383c <indev_click_focus+0x200>
                }

                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
 80036fc:	2200      	movs	r2, #0
 80036fe:	2116      	movs	r1, #22
 8003700:	6978      	ldr	r0, [r7, #20]
 8003702:	f003 f805 	bl	8006710 <lv_signal_send>
                if(indev_reset_check(proc)) return;
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fcf6 	bl	80040f8 <indev_reset_check>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	f040 8096 	bne.w	8003840 <indev_click_focus+0x204>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
 8003714:	2200      	movs	r2, #0
 8003716:	210d      	movs	r1, #13
 8003718:	6978      	ldr	r0, [r7, #20]
 800371a:	f002 ff49 	bl	80065b0 <lv_event_send>
                if(indev_reset_check(proc)) return;
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fcea 	bl	80040f8 <indev_reset_check>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 8082 	beq.w	8003830 <indev_click_focus+0x1f4>
 800372c:	e095      	b.n	800385a <indev_click_focus+0x21e>
            }
        }
        /*The object are not in the same group (in different group or one in not a group)*/
        else {
            /*If the prev. obj. is not in a group then defocus it.*/
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d11e      	bne.n	8003772 <indev_click_focus+0x136>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d01a      	beq.n	8003772 <indev_click_focus+0x136>
                lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	2200      	movs	r2, #0
 8003742:	2117      	movs	r1, #23
 8003744:	4618      	mov	r0, r3
 8003746:	f002 ffe3 	bl	8006710 <lv_signal_send>
                if(indev_reset_check(proc)) return;
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 fcd4 	bl	80040f8 <indev_reset_check>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d176      	bne.n	8003844 <indev_click_focus+0x208>
                lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	2200      	movs	r2, #0
 800375c:	210e      	movs	r1, #14
 800375e:	4618      	mov	r0, r3
 8003760:	f002 ff26 	bl	80065b0 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 fcc7 	bl	80040f8 <indev_reset_check>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d03c      	beq.n	80037ea <indev_click_focus+0x1ae>
 8003770:	e073      	b.n	800385a <indev_click_focus+0x21e>
            }
            /*Focus on a non-group object*/
            else {
                if(proc->types.pointer.last_pressed) {
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d037      	beq.n	80037ea <indev_click_focus+0x1ae>
                    /*If the prev. object also wasn't in a group defocus it*/
                    if(g_prev == NULL) {
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d11a      	bne.n	80037b6 <indev_click_focus+0x17a>
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	2200      	movs	r2, #0
 8003786:	2117      	movs	r1, #23
 8003788:	4618      	mov	r0, r3
 800378a:	f002 ffc1 	bl	8006710 <lv_signal_send>
                        if(indev_reset_check(proc)) return;
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fcb2 	bl	80040f8 <indev_reset_check>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d156      	bne.n	8003848 <indev_click_focus+0x20c>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	2200      	movs	r2, #0
 80037a0:	210e      	movs	r1, #14
 80037a2:	4618      	mov	r0, r3
 80037a4:	f002 ff04 	bl	80065b0 <lv_event_send>
                        if(indev_reset_check(proc)) return;
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fca5 	bl	80040f8 <indev_reset_check>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d01a      	beq.n	80037ea <indev_click_focus+0x1ae>
 80037b4:	e051      	b.n	800385a <indev_click_focus+0x21e>
                    }
                    /*If the prev. object also was in a group at least "LEAVE" it instead of defocus*/
                    else {
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_LEAVE, NULL);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	2200      	movs	r2, #0
 80037bc:	2115      	movs	r1, #21
 80037be:	4618      	mov	r0, r3
 80037c0:	f002 ffa6 	bl	8006710 <lv_signal_send>
                        if(indev_reset_check(proc)) return;
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 fc97 	bl	80040f8 <indev_reset_check>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d13d      	bne.n	800384c <indev_click_focus+0x210>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_LEAVE, NULL);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	2200      	movs	r2, #0
 80037d6:	210f      	movs	r1, #15
 80037d8:	4618      	mov	r0, r3
 80037da:	f002 fee9 	bl	80065b0 <lv_event_send>
                        if(indev_reset_check(proc)) return;
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 fc8a 	bl	80040f8 <indev_reset_check>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d132      	bne.n	8003850 <indev_click_focus+0x214>
                    }
                }
            }

            /*Focus to the act. in its group*/
            if(g_act) {
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d009      	beq.n	8003804 <indev_click_focus+0x1c8>
                lv_group_focus_obj(obj_to_focus);
 80037f0:	6978      	ldr	r0, [r7, #20]
 80037f2:	f7fe f88f 	bl	8001914 <lv_group_focus_obj>
                if(indev_reset_check(proc)) return;
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fc7e 	bl	80040f8 <indev_reset_check>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d016      	beq.n	8003830 <indev_click_focus+0x1f4>
 8003802:	e02a      	b.n	800385a <indev_click_focus+0x21e>
            }
            else {
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
 8003804:	2200      	movs	r2, #0
 8003806:	2116      	movs	r1, #22
 8003808:	6978      	ldr	r0, [r7, #20]
 800380a:	f002 ff81 	bl	8006710 <lv_signal_send>
                if(indev_reset_check(proc)) return;
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fc72 	bl	80040f8 <indev_reset_check>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d11c      	bne.n	8003854 <indev_click_focus+0x218>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
 800381a:	2200      	movs	r2, #0
 800381c:	210d      	movs	r1, #13
 800381e:	6978      	ldr	r0, [r7, #20]
 8003820:	f002 fec6 	bl	80065b0 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fc67 	bl	80040f8 <indev_reset_check>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d113      	bne.n	8003858 <indev_click_focus+0x21c>
        lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
        if(indev_reset_check(proc)) return;
        lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
        if(indev_reset_check(proc)) return;
#endif
        proc->types.pointer.last_pressed = obj_to_focus;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	621a      	str	r2, [r3, #32]
 8003836:	e010      	b.n	800385a <indev_click_focus+0x21e>
                    if(indev_reset_check(proc)) return;
 8003838:	bf00      	nop
 800383a:	e00e      	b.n	800385a <indev_click_focus+0x21e>
                    if(indev_reset_check(proc)) return;
 800383c:	bf00      	nop
 800383e:	e00c      	b.n	800385a <indev_click_focus+0x21e>
                if(indev_reset_check(proc)) return;
 8003840:	bf00      	nop
 8003842:	e00a      	b.n	800385a <indev_click_focus+0x21e>
                if(indev_reset_check(proc)) return;
 8003844:	bf00      	nop
 8003846:	e008      	b.n	800385a <indev_click_focus+0x21e>
                        if(indev_reset_check(proc)) return;
 8003848:	bf00      	nop
 800384a:	e006      	b.n	800385a <indev_click_focus+0x21e>
                        if(indev_reset_check(proc)) return;
 800384c:	bf00      	nop
 800384e:	e004      	b.n	800385a <indev_click_focus+0x21e>
                        if(indev_reset_check(proc)) return;
 8003850:	bf00      	nop
 8003852:	e002      	b.n	800385a <indev_click_focus+0x21e>
                if(indev_reset_check(proc)) return;
 8003854:	bf00      	nop
 8003856:	e000      	b.n	800385a <indev_click_focus+0x21e>
                if(indev_reset_check(proc)) return;
 8003858:	bf00      	nop
    }

}
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20018b64 	.word	0x20018b64

08003864 <indev_drag>:
/**
 * Handle the dragging of indev_proc_p->types.pointer.act_obj
 * @param indev pointer to a input device state
 */
static void indev_drag(lv_indev_proc_t * proc)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08a      	sub	sp, #40	; 0x28
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
    lv_obj_t * drag_obj    = get_dragged_obj(proc->types.pointer.act_obj);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	4618      	mov	r0, r3
 8003872:	f000 fb5f 	bl	8003f34 <get_dragged_obj>
 8003876:	61f8      	str	r0, [r7, #28]
    bool drag_just_started = false;
 8003878:	2300      	movs	r3, #0
 800387a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if(drag_obj == NULL) return;
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 8207 	beq.w	8003c94 <indev_drag+0x430>

    if(lv_obj_get_drag(drag_obj) == false) return;
 8003886:	69f8      	ldr	r0, [r7, #28]
 8003888:	f003 fcfa 	bl	8007280 <lv_obj_get_drag>
 800388c:	4603      	mov	r3, r0
 800388e:	f083 0301 	eor.w	r3, r3, #1
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	f040 81ff 	bne.w	8003c98 <indev_drag+0x434>

    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 800389a:	69f8      	ldr	r0, [r7, #28]
 800389c:	f003 fd18 	bl	80072d0 <lv_obj_get_drag_dir>
 80038a0:	4603      	mov	r3, r0
 80038a2:	76fb      	strb	r3, [r7, #27]

    /*Count the movement by drag*/
    if(proc->types.pointer.drag_limit_out == 0) {
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d172      	bne.n	800399a <indev_drag+0x136>
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	4413      	add	r3, r2
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	b21a      	sxth	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	821a      	strh	r2, [r3, #16]
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	4413      	add	r3, r2
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	b21a      	sxth	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	825a      	strh	r2, [r3, #18]

        /*Enough move?*/
        bool hor_en = false;
 80038e8:	2300      	movs	r3, #0
 80038ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        bool ver_en = false;
 80038ee:	2300      	movs	r3, #0
 80038f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if(allowed_dirs == LV_DRAG_DIR_HOR || allowed_dirs == LV_DRAG_DIR_BOTH) {
 80038f4:	7efb      	ldrb	r3, [r7, #27]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d002      	beq.n	8003900 <indev_drag+0x9c>
 80038fa:	7efb      	ldrb	r3, [r7, #27]
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d102      	bne.n	8003906 <indev_drag+0xa2>
            hor_en = true;
 8003900:	2301      	movs	r3, #1
 8003902:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        }

        if(allowed_dirs == LV_DRAG_DIR_VER || allowed_dirs == LV_DRAG_DIR_BOTH) {
 8003906:	7efb      	ldrb	r3, [r7, #27]
 8003908:	2b02      	cmp	r3, #2
 800390a:	d002      	beq.n	8003912 <indev_drag+0xae>
 800390c:	7efb      	ldrb	r3, [r7, #27]
 800390e:	2b03      	cmp	r3, #3
 8003910:	d102      	bne.n	8003918 <indev_drag+0xb4>
            ver_en = true;
 8003912:	2301      	movs	r3, #1
 8003914:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        }

        if(allowed_dirs == LV_DRAG_DIR_ONE) {
 8003918:	7efb      	ldrb	r3, [r7, #27]
 800391a:	2b04      	cmp	r3, #4
 800391c:	d115      	bne.n	800394a <indev_drag+0xe6>
            if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003924:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003928:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003932:	2b00      	cmp	r3, #0
 8003934:	bfb8      	it	lt
 8003936:	425b      	neglt	r3, r3
 8003938:	429a      	cmp	r2, r3
 800393a:	dd03      	ble.n	8003944 <indev_drag+0xe0>
                hor_en = true;
 800393c:	2301      	movs	r3, #1
 800393e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003942:	e002      	b.n	800394a <indev_drag+0xe6>
            }
            else {
                ver_en = true;
 8003944:	2301      	movs	r3, #1
 8003946:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            }
        }

        /*If a move is greater then LV_DRAG_LIMIT then begin the drag*/
        if((hor_en && LV_MATH_ABS(proc->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
 800394a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <indev_drag+0x104>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003958:	2b00      	cmp	r3, #0
 800395a:	bfb8      	it	lt
 800395c:	425b      	neglt	r3, r3
 800395e:	4a6a      	ldr	r2, [pc, #424]	; (8003b08 <indev_drag+0x2a4>)
 8003960:	6812      	ldr	r2, [r2, #0]
 8003962:	7d12      	ldrb	r2, [r2, #20]
 8003964:	4293      	cmp	r3, r2
 8003966:	da0e      	bge.n	8003986 <indev_drag+0x122>
 8003968:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800396c:	2b00      	cmp	r3, #0
 800396e:	d014      	beq.n	800399a <indev_drag+0x136>
           (ver_en && LV_MATH_ABS(proc->types.pointer.drag_sum.y) >= indev_act->driver.drag_limit)) {
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003976:	2b00      	cmp	r3, #0
 8003978:	bfb8      	it	lt
 800397a:	425b      	neglt	r3, r3
 800397c:	4a62      	ldr	r2, [pc, #392]	; (8003b08 <indev_drag+0x2a4>)
 800397e:	6812      	ldr	r2, [r2, #0]
 8003980:	7d12      	ldrb	r2, [r2, #20]
 8003982:	4293      	cmp	r3, r2
 8003984:	db09      	blt.n	800399a <indev_drag+0x136>
            proc->types.pointer.drag_limit_out = 1;
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            drag_just_started                   = true;
 8003994:	2301      	movs	r3, #1
 8003996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    /*If the drag limit is exceeded handle the dragging*/
    if(proc->types.pointer.drag_limit_out != 0) {
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 8179 	beq.w	8003c9e <indev_drag+0x43a>
        /*Set new position if the vector is not zero*/
        if(proc->types.pointer.vect.x != 0 || proc->types.pointer.vect.y != 0) {
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d105      	bne.n	80039c2 <indev_drag+0x15e>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 816e 	beq.w	8003c9e <indev_drag+0x43a>

            lv_coord_t prev_x     = drag_obj->coords.x1;
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	8a1b      	ldrh	r3, [r3, #16]
 80039c6:	833b      	strh	r3, [r7, #24]
            lv_coord_t prev_y     = drag_obj->coords.y1;
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	8a5b      	ldrh	r3, [r3, #18]
 80039cc:	82fb      	strh	r3, [r7, #22]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 80039ce:	69f8      	ldr	r0, [r7, #28]
 80039d0:	f002 ff5a 	bl	8006888 <lv_obj_get_parent>
 80039d4:	4603      	mov	r3, r0
 80039d6:	4618      	mov	r0, r3
 80039d8:	f003 f832 	bl	8006a40 <lv_obj_get_width>
 80039dc:	4603      	mov	r3, r0
 80039de:	82bb      	strh	r3, [r7, #20]
            lv_coord_t prev_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 80039e0:	69f8      	ldr	r0, [r7, #28]
 80039e2:	f002 ff51 	bl	8006888 <lv_obj_get_parent>
 80039e6:	4603      	mov	r3, r0
 80039e8:	4618      	mov	r0, r3
 80039ea:	f003 f84b 	bl	8006a84 <lv_obj_get_height>
 80039ee:	4603      	mov	r3, r0
 80039f0:	827b      	strh	r3, [r7, #18]

            /*Get the coordinates of the object and modify them*/
            lv_coord_t act_x = lv_obj_get_x(drag_obj);
 80039f2:	69f8      	ldr	r0, [r7, #28]
 80039f4:	f002 ffbc 	bl	8006970 <lv_obj_get_x>
 80039f8:	4603      	mov	r3, r0
 80039fa:	847b      	strh	r3, [r7, #34]	; 0x22
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
 80039fc:	69f8      	ldr	r0, [r7, #28]
 80039fe:	f002 ffeb 	bl	80069d8 <lv_obj_get_y>
 8003a02:	4603      	mov	r3, r0
 8003a04:	843b      	strh	r3, [r7, #32]

            if(allowed_dirs == LV_DRAG_DIR_BOTH) {
 8003a06:	7efb      	ldrb	r3, [r7, #27]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d11d      	bne.n	8003a48 <indev_drag+0x1e4>
                if(drag_just_started) {
 8003a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 808e 	beq.w	8003b32 <indev_drag+0x2ce>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003a1c:	2103      	movs	r1, #3
 8003a1e:	f361 0384 	bfi	r3, r1, #2, #3
 8003a22:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    act_x += proc->types.pointer.drag_sum.x;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a30:	4413      	add	r3, r2
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	847b      	strh	r3, [r7, #34]	; 0x22
                    act_y += proc->types.pointer.drag_sum.y;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	8c3b      	ldrh	r3, [r7, #32]
 8003a40:	4413      	add	r3, r2
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	843b      	strh	r3, [r7, #32]
 8003a46:	e074      	b.n	8003b32 <indev_drag+0x2ce>
                }
            }
            else if(allowed_dirs == LV_DRAG_DIR_HOR) {
 8003a48:	7efb      	ldrb	r3, [r7, #27]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d117      	bne.n	8003a7e <indev_drag+0x21a>
                if(drag_just_started) {
 8003a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d06d      	beq.n	8003b32 <indev_drag+0x2ce>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	f361 0384 	bfi	r3, r1, #2, #3
 8003a62:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    proc->types.pointer.drag_sum.y = 0;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	825a      	strh	r2, [r3, #18]
                    act_x += proc->types.pointer.drag_sum.x;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a76:	4413      	add	r3, r2
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	847b      	strh	r3, [r7, #34]	; 0x22
 8003a7c:	e059      	b.n	8003b32 <indev_drag+0x2ce>
                }
            }
            else if(allowed_dirs == LV_DRAG_DIR_VER) {
 8003a7e:	7efb      	ldrb	r3, [r7, #27]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d117      	bne.n	8003ab4 <indev_drag+0x250>
                if(drag_just_started) {
 8003a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d052      	beq.n	8003b32 <indev_drag+0x2ce>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003a92:	2102      	movs	r1, #2
 8003a94:	f361 0384 	bfi	r3, r1, #2, #3
 8003a98:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                    proc->types.pointer.drag_sum.x = 0;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	821a      	strh	r2, [r3, #16]
                    act_y += proc->types.pointer.drag_sum.y;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	8c3b      	ldrh	r3, [r7, #32]
 8003aac:	4413      	add	r3, r2
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	843b      	strh	r3, [r7, #32]
 8003ab2:	e03e      	b.n	8003b32 <indev_drag+0x2ce>
                }
            }
            else if(allowed_dirs == LV_DRAG_DIR_ONE) {
 8003ab4:	7efb      	ldrb	r3, [r7, #27]
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d13b      	bne.n	8003b32 <indev_drag+0x2ce>
                if(drag_just_started) {
 8003aba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d037      	beq.n	8003b32 <indev_drag+0x2ce>
                    if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003ac8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003acc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	bfb8      	it	lt
 8003ada:	425b      	neglt	r3, r3
 8003adc:	429a      	cmp	r2, r3
 8003ade:	dd15      	ble.n	8003b0c <indev_drag+0x2a8>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	f361 0384 	bfi	r3, r1, #2, #3
 8003aec:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                        proc->types.pointer.drag_sum.y = 0;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	825a      	strh	r2, [r3, #18]
                        act_x += proc->types.pointer.drag_sum.x;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b00:	4413      	add	r3, r2
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	847b      	strh	r3, [r7, #34]	; 0x22
 8003b06:	e014      	b.n	8003b32 <indev_drag+0x2ce>
 8003b08:	20018b60 	.word	0x20018b60
                    }
                    else {
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003b12:	2102      	movs	r1, #2
 8003b14:	f361 0384 	bfi	r3, r1, #2, #3
 8003b18:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                        proc->types.pointer.drag_sum.x = 0;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	821a      	strh	r2, [r3, #16]
                        act_y += proc->types.pointer.drag_sum.y;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	8c3b      	ldrh	r3, [r7, #32]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	843b      	strh	r3, [r7, #32]
                    }
                }
            }

            /*Move the object*/
            if(allowed_dirs == LV_DRAG_DIR_HOR ||
 8003b32:	7efb      	ldrb	r3, [r7, #27]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d014      	beq.n	8003b62 <indev_drag+0x2fe>
 8003b38:	7efb      	ldrb	r3, [r7, #27]
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	d011      	beq.n	8003b62 <indev_drag+0x2fe>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
 8003b3e:	7efb      	ldrb	r3, [r7, #27]
 8003b40:	2b04      	cmp	r3, #4
 8003b42:	d116      	bne.n	8003b72 <indev_drag+0x30e>
               (allowed_dirs == LV_DRAG_DIR_ONE &&
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003b4a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003b4e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	bfb8      	it	lt
 8003b5c:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	dd07      	ble.n	8003b72 <indev_drag+0x30e>
                act_x += proc->types.pointer.vect.x;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b6c:	4413      	add	r3, r2
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	847b      	strh	r3, [r7, #34]	; 0x22
            }
            if(allowed_dirs == LV_DRAG_DIR_VER ||
 8003b72:	7efb      	ldrb	r3, [r7, #27]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d014      	beq.n	8003ba2 <indev_drag+0x33e>
 8003b78:	7efb      	ldrb	r3, [r7, #27]
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d011      	beq.n	8003ba2 <indev_drag+0x33e>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
 8003b7e:	7efb      	ldrb	r3, [r7, #27]
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d116      	bne.n	8003bb2 <indev_drag+0x34e>
               (allowed_dirs == LV_DRAG_DIR_ONE &&
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) < LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003b8a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003b8e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	bfb8      	it	lt
 8003b9c:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	da07      	bge.n	8003bb2 <indev_drag+0x34e>
                act_y += proc->types.pointer.vect.y;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	8c3b      	ldrh	r3, [r7, #32]
 8003bac:	4413      	add	r3, r2
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	843b      	strh	r3, [r7, #32]
            }

            uint16_t inv_buf_size =
                lv_disp_get_inv_buf_size(indev_act->driver.disp); /*Get the number of currently invalidated areas*/
 8003bb2:	4b3c      	ldr	r3, [pc, #240]	; (8003ca4 <indev_drag+0x440>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
            uint16_t inv_buf_size =
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f016 fcb1 	bl	801a520 <lv_disp_get_inv_buf_size>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	823b      	strh	r3, [r7, #16]

            lv_obj_set_pos(drag_obj, act_x, act_y);
 8003bc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003bc6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003bca:	4619      	mov	r1, r3
 8003bcc:	69f8      	ldr	r0, [r7, #28]
 8003bce:	f001 ff5f 	bl	8005a90 <lv_obj_set_pos>
            proc->types.pointer.drag_in_prog = 1;
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003bd8:	f043 0302 	orr.w	r3, r3, #2
 8003bdc:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

            /*If the object didn't moved then clear the invalidated areas*/
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003be6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d136      	bne.n	8003c5c <indev_drag+0x3f8>
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003bf4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d12f      	bne.n	8003c5c <indev_drag+0x3f8>
                /*In a special case if the object is moved on a page and
                 * the scrollable has fit == true and the object is dragged of the page then
                 * while its coordinate is not changing only the parent's size is reduced */
                lv_coord_t act_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 8003bfc:	69f8      	ldr	r0, [r7, #28]
 8003bfe:	f002 fe43 	bl	8006888 <lv_obj_get_parent>
 8003c02:	4603      	mov	r3, r0
 8003c04:	4618      	mov	r0, r3
 8003c06:	f002 ff1b 	bl	8006a40 <lv_obj_get_width>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	81fb      	strh	r3, [r7, #14]
                lv_coord_t act_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 8003c0e:	69f8      	ldr	r0, [r7, #28]
 8003c10:	f002 fe3a 	bl	8006888 <lv_obj_get_parent>
 8003c14:	4603      	mov	r3, r0
 8003c16:	4618      	mov	r0, r3
 8003c18:	f002 ff34 	bl	8006a84 <lv_obj_get_height>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	81bb      	strh	r3, [r7, #12]
                if(act_par_w == prev_par_w && act_par_h == prev_par_h) {
 8003c20:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003c24:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d117      	bne.n	8003c5c <indev_drag+0x3f8>
 8003c2c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003c30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d111      	bne.n	8003c5c <indev_drag+0x3f8>
                    uint16_t new_inv_buf_size = lv_disp_get_inv_buf_size(indev_act->driver.disp);
 8003c38:	4b1a      	ldr	r3, [pc, #104]	; (8003ca4 <indev_drag+0x440>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f016 fc6e 	bl	801a520 <lv_disp_get_inv_buf_size>
 8003c44:	4603      	mov	r3, r0
 8003c46:	817b      	strh	r3, [r7, #10]
                    _lv_disp_pop_from_inv_buf(indev_act->driver.disp, new_inv_buf_size - inv_buf_size);
 8003c48:	4b16      	ldr	r3, [pc, #88]	; (8003ca4 <indev_drag+0x440>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68d8      	ldr	r0, [r3, #12]
 8003c4e:	897a      	ldrh	r2, [r7, #10]
 8003c50:	8a3b      	ldrh	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	4619      	mov	r1, r3
 8003c58:	f016 fc72 	bl	801a540 <_lv_disp_pop_from_inv_buf>
                }
            }

            /*Set the drag in progress flag*/
            /*Send the drag begin signal on first move*/
            if(drag_just_started) {
 8003c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d01c      	beq.n	8003c9e <indev_drag+0x43a>
                drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_BEGIN, indev_act);
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	4a0e      	ldr	r2, [pc, #56]	; (8003ca4 <indev_drag+0x440>)
 8003c6a:	6812      	ldr	r2, [r2, #0]
 8003c6c:	2111      	movs	r1, #17
 8003c6e:	69f8      	ldr	r0, [r7, #28]
 8003c70:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fa40 	bl	80040f8 <indev_reset_check>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10e      	bne.n	8003c9c <indev_drag+0x438>

                lv_event_send(drag_obj, LV_EVENT_DRAG_BEGIN, NULL);
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2108      	movs	r1, #8
 8003c82:	69f8      	ldr	r0, [r7, #28]
 8003c84:	f002 fc94 	bl	80065b0 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fa35 	bl	80040f8 <indev_reset_check>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	e004      	b.n	8003c9e <indev_drag+0x43a>
    if(drag_obj == NULL) return;
 8003c94:	bf00      	nop
 8003c96:	e002      	b.n	8003c9e <indev_drag+0x43a>
    if(lv_obj_get_drag(drag_obj) == false) return;
 8003c98:	bf00      	nop
 8003c9a:	e000      	b.n	8003c9e <indev_drag+0x43a>
                if(indev_reset_check(proc)) return;
 8003c9c:	bf00      	nop
            }

        }
    }
}
 8003c9e:	3728      	adds	r7, #40	; 0x28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20018b60 	.word	0x20018b60

08003ca8 <indev_drag_throw>:
/**
 * Handle throwing by drag if the drag is ended
 * @param indev pointer to an input device state
 */
static void indev_drag_throw(lv_indev_proc_t * proc)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08a      	sub	sp, #40	; 0x28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
    if(proc->types.pointer.drag_in_prog == 0) return;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 8126 	beq.w	8003f0e <indev_drag_throw+0x266>

    lv_obj_t * drag_obj = get_dragged_obj(proc->types.pointer.last_obj);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 f934 	bl	8003f34 <get_dragged_obj>
 8003ccc:	6278      	str	r0, [r7, #36]	; 0x24

    if(drag_obj == NULL) return;
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 811e 	beq.w	8003f12 <indev_drag_throw+0x26a>

    /*Return if the drag throw is not enabled*/
    if(lv_obj_get_drag_throw(drag_obj) == false) {
 8003cd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cd8:	f003 fb1c 	bl	8007314 <lv_obj_get_drag_throw>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f083 0301 	eor.w	r3, r3, #1
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01a      	beq.n	8003d1e <indev_drag_throw+0x76>
        proc->types.pointer.drag_in_prog = 0;
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003cee:	f36f 0341 	bfc	r3, #1, #1
 8003cf2:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	4a8c      	ldr	r2, [pc, #560]	; (8003f2c <indev_drag_throw+0x284>)
 8003cfc:	6812      	ldr	r2, [r2, #0]
 8003cfe:	2113      	movs	r1, #19
 8003d00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d02:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f9f7 	bl	80040f8 <indev_reset_check>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f040 8102 	bne.w	8003f16 <indev_drag_throw+0x26e>

        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 8003d12:	2200      	movs	r2, #0
 8003d14:	2109      	movs	r1, #9
 8003d16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d18:	f002 fc4a 	bl	80065b0 <lv_event_send>
        return;
 8003d1c:	e102      	b.n	8003f24 <indev_drag_throw+0x27c>
    }

    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 8003d1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d20:	f003 fad6 	bl	80072d0 <lv_obj_get_drag_dir>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /*Reduce the vectors*/
    proc->types.pointer.drag_throw_vect.x =
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003d30:	461a      	mov	r2, r3
 8003d32:	4b7e      	ldr	r3, [pc, #504]	; (8003f2c <indev_drag_throw+0x284>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	7d5b      	ldrb	r3, [r3, #21]
 8003d38:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003d3c:	fb03 f302 	mul.w	r3, r3, r2
 8003d40:	4a7b      	ldr	r2, [pc, #492]	; (8003f30 <indev_drag_throw+0x288>)
 8003d42:	fb82 1203 	smull	r1, r2, r2, r3
 8003d46:	1152      	asrs	r2, r2, #5
 8003d48:	17db      	asrs	r3, r3, #31
 8003d4a:	1ad3      	subs	r3, r2, r3
    proc->types.pointer.drag_throw_vect.x =
 8003d4c:	b21a      	sxth	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	829a      	strh	r2, [r3, #20]
    proc->types.pointer.drag_throw_vect.y =
        proc->types.pointer.drag_throw_vect.y * (100 - indev_act->driver.drag_throw) / 100;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4b74      	ldr	r3, [pc, #464]	; (8003f2c <indev_drag_throw+0x284>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	7d5b      	ldrb	r3, [r3, #21]
 8003d60:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003d64:	fb03 f302 	mul.w	r3, r3, r2
 8003d68:	4a71      	ldr	r2, [pc, #452]	; (8003f30 <indev_drag_throw+0x288>)
 8003d6a:	fb82 1203 	smull	r1, r2, r2, r3
 8003d6e:	1152      	asrs	r2, r2, #5
 8003d70:	17db      	asrs	r3, r3, #31
 8003d72:	1ad3      	subs	r3, r2, r3
    proc->types.pointer.drag_throw_vect.y =
 8003d74:	b21a      	sxth	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	82da      	strh	r2, [r3, #22]

    if(proc->types.pointer.drag_throw_vect.x != 0 || proc->types.pointer.drag_throw_vect.y != 0) {
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d105      	bne.n	8003d90 <indev_drag_throw+0xe8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 80a0 	beq.w	8003ed0 <indev_drag_throw+0x228>
        /*Get the coordinates and modify them*/
        lv_area_t coords_ori;
        lv_obj_get_coords(drag_obj, &coords_ori);
 8003d90:	f107 0314 	add.w	r3, r7, #20
 8003d94:	4619      	mov	r1, r3
 8003d96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d98:	f002 fdc6 	bl	8006928 <lv_obj_get_coords>
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
 8003d9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d9e:	f002 fde7 	bl	8006970 <lv_obj_get_x>
 8003da2:	4603      	mov	r3, r0
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	4413      	add	r3, r2
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	843b      	strh	r3, [r7, #32]
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
 8003db4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003db6:	f002 fe0f 	bl	80069d8 <lv_obj_get_y>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	83fb      	strh	r3, [r7, #30]

        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
 8003dcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d108      	bne.n	8003de6 <indev_drag_throw+0x13e>
 8003dd4:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003dd8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003de0:	f001 fe56 	bl	8005a90 <lv_obj_set_pos>
 8003de4:	e02b      	b.n	8003e3e <indev_drag_throw+0x196>
        else if(allowed_dirs == LV_DRAG_DIR_HOR) lv_obj_set_x(drag_obj, act_x);
 8003de6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d106      	bne.n	8003dfc <indev_drag_throw+0x154>
 8003dee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003df2:	4619      	mov	r1, r3
 8003df4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003df6:	f001 fef1 	bl	8005bdc <lv_obj_set_x>
 8003dfa:	e020      	b.n	8003e3e <indev_drag_throw+0x196>
        else if(allowed_dirs == LV_DRAG_DIR_VER) lv_obj_set_y(drag_obj, act_y);
 8003dfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d106      	bne.n	8003e12 <indev_drag_throw+0x16a>
 8003e04:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003e08:	4619      	mov	r1, r3
 8003e0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e0c:	f001 ff10 	bl	8005c30 <lv_obj_set_y>
 8003e10:	e015      	b.n	8003e3e <indev_drag_throw+0x196>
        else if(allowed_dirs == LV_DRAG_DIR_ONE) {
 8003e12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d111      	bne.n	8003e3e <indev_drag_throw+0x196>
            if(proc->types.pointer.drag_sum.x) lv_obj_set_x(drag_obj, act_x);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d006      	beq.n	8003e32 <indev_drag_throw+0x18a>
 8003e24:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e2c:	f001 fed6 	bl	8005bdc <lv_obj_set_x>
 8003e30:	e005      	b.n	8003e3e <indev_drag_throw+0x196>
            else lv_obj_set_y(drag_obj, act_y);
 8003e32:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003e36:	4619      	mov	r1, r3
 8003e38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e3a:	f001 fef9 	bl	8005c30 <lv_obj_set_y>
        }
        lv_area_t coord_new;
        lv_obj_get_coords(drag_obj, &coord_new);
 8003e3e:	f107 030c 	add.w	r3, r7, #12
 8003e42:	4619      	mov	r1, r3
 8003e44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e46:	f002 fd6f 	bl	8006928 <lv_obj_get_coords>

        /*If non of the coordinates are changed then do not continue throwing*/
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
 8003e4a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003e4e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d004      	beq.n	8003e60 <indev_drag_throw+0x1b8>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d15c      	bne.n	8003f1a <indev_drag_throw+0x272>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
 8003e60:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003e64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d004      	beq.n	8003e76 <indev_drag_throw+0x1ce>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d151      	bne.n	8003f1a <indev_drag_throw+0x272>
            proc->types.pointer.drag_in_prog      = 0;
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003e7c:	f36f 0341 	bfc	r3, #1, #1
 8003e80:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            proc->types.pointer.vect.x            = 0;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	819a      	strh	r2, [r3, #12]
            proc->types.pointer.vect.y            = 0;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	81da      	strh	r2, [r3, #14]
            proc->types.pointer.drag_throw_vect.x = 0;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	829a      	strh	r2, [r3, #20]
            proc->types.pointer.drag_throw_vect.y = 0;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	82da      	strh	r2, [r3, #22]
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	4a22      	ldr	r2, [pc, #136]	; (8003f2c <indev_drag_throw+0x284>)
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	2113      	movs	r1, #19
 8003ea6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ea8:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f924 	bl	80040f8 <indev_reset_check>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d133      	bne.n	8003f1e <indev_drag_throw+0x276>

            lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	2109      	movs	r1, #9
 8003eba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ebc:	f002 fb78 	bl	80065b0 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f919 	bl	80040f8 <indev_reset_check>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d026      	beq.n	8003f1a <indev_drag_throw+0x272>
 8003ecc:	bf00      	nop
 8003ece:	e029      	b.n	8003f24 <indev_drag_throw+0x27c>
        }
    }
    /*If the types.pointer.vectors become 0 -> types.pointer.drag_in_prog = 0 and send a drag end
       signal*/
    else {
        proc->types.pointer.drag_in_prog = 0;
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8003ed6:	f36f 0341 	bfc	r3, #1, #1
 8003eda:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	4a12      	ldr	r2, [pc, #72]	; (8003f2c <indev_drag_throw+0x284>)
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	2113      	movs	r1, #19
 8003ee8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003eea:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f903 	bl	80040f8 <indev_reset_check>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d114      	bne.n	8003f22 <indev_drag_throw+0x27a>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 8003ef8:	2200      	movs	r2, #0
 8003efa:	2109      	movs	r1, #9
 8003efc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003efe:	f002 fb57 	bl	80065b0 <lv_event_send>
        if(indev_reset_check(proc)) return;
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f8f8 	bl	80040f8 <indev_reset_check>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	e00a      	b.n	8003f24 <indev_drag_throw+0x27c>
    if(proc->types.pointer.drag_in_prog == 0) return;
 8003f0e:	bf00      	nop
 8003f10:	e008      	b.n	8003f24 <indev_drag_throw+0x27c>
    if(drag_obj == NULL) return;
 8003f12:	bf00      	nop
 8003f14:	e006      	b.n	8003f24 <indev_drag_throw+0x27c>
        if(indev_reset_check(proc)) return;
 8003f16:	bf00      	nop
 8003f18:	e004      	b.n	8003f24 <indev_drag_throw+0x27c>
    if(proc->types.pointer.drag_throw_vect.x != 0 || proc->types.pointer.drag_throw_vect.y != 0) {
 8003f1a:	bf00      	nop
 8003f1c:	e002      	b.n	8003f24 <indev_drag_throw+0x27c>
            if(indev_reset_check(proc)) return;
 8003f1e:	bf00      	nop
 8003f20:	e000      	b.n	8003f24 <indev_drag_throw+0x27c>
        if(indev_reset_check(proc)) return;
 8003f22:	bf00      	nop
    }
}
 8003f24:	3728      	adds	r7, #40	; 0x28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20018b60 	.word	0x20018b60
 8003f30:	51eb851f 	.word	0x51eb851f

08003f34 <get_dragged_obj>:
 * Get the really dragged object by taking `drag_parent` into account.
 * @param obj the start object
 * @return the object to really drag
 */
static lv_obj_t * get_dragged_obj(lv_obj_t * obj)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
    if(obj == NULL) return NULL;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <get_dragged_obj+0x12>
 8003f42:	2300      	movs	r3, #0
 8003f44:	e010      	b.n	8003f68 <get_dragged_obj+0x34>
    lv_obj_t * drag_obj = obj;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	60fb      	str	r3, [r7, #12]
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 8003f4a:	e003      	b.n	8003f54 <get_dragged_obj+0x20>
        drag_obj = lv_obj_get_parent(drag_obj);
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f002 fc9b 	bl	8006888 <lv_obj_get_parent>
 8003f52:	60f8      	str	r0, [r7, #12]
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f003 fa05 	bl	8007364 <lv_obj_get_drag_parent>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <get_dragged_obj+0x32>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f2      	bne.n	8003f4c <get_dragged_obj+0x18>
    }

    return drag_obj;
 8003f66:	68fb      	ldr	r3, [r7, #12]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <indev_gesture>:
/**
* Handle the gesture of indev_proc_p->types.pointer.act_obj
* @param indev pointer to a input device state
*/
static void indev_gesture(lv_indev_proc_t * proc)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]

    if(proc->types.pointer.gesture_sent) return;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f040 80ac 	bne.w	80040e2 <indev_gesture+0x172>

    lv_obj_t * gesture_obj = proc->types.pointer.act_obj;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	60fb      	str	r3, [r7, #12]

    /*If gesture parent is active check recursively the gesture attribute*/
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
 8003f90:	e003      	b.n	8003f9a <indev_gesture+0x2a>
        gesture_obj = lv_obj_get_parent(gesture_obj);
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f002 fc78 	bl	8006888 <lv_obj_get_parent>
 8003f98:	60f8      	str	r0, [r7, #12]
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <indev_gesture+0x3c>
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f003 f9f4 	bl	800738e <lv_obj_get_gesture_parent>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1f2      	bne.n	8003f92 <indev_gesture+0x22>
    }

    if(gesture_obj == NULL) return;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 8099 	beq.w	80040e6 <indev_gesture+0x176>

    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	bfb8      	it	lt
 8003fbe:	425b      	neglt	r3, r3
 8003fc0:	4a4c      	ldr	r2, [pc, #304]	; (80040f4 <indev_gesture+0x184>)
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	7d92      	ldrb	r2, [r2, #22]
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	da10      	bge.n	8003fec <indev_gesture+0x7c>
       (LV_MATH_ABS(proc->types.pointer.vect.y) < indev_act->driver.gesture_min_velocity)) {
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bfb8      	it	lt
 8003fd4:	425b      	neglt	r3, r3
 8003fd6:	4a47      	ldr	r2, [pc, #284]	; (80040f4 <indev_gesture+0x184>)
 8003fd8:	6812      	ldr	r2, [r2, #0]
 8003fda:	7d92      	ldrb	r2, [r2, #22]
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	da05      	bge.n	8003fec <indev_gesture+0x7c>
        proc->types.pointer.gesture_sum.x = 0;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	84da      	strh	r2, [r3, #38]	; 0x26
        proc->types.pointer.gesture_sum.y = 0;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /*Count the movement by gesture*/
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	b21a      	sxth	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	84da      	strh	r2, [r3, #38]	; 0x26
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800400c:	b29a      	uxth	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004014:	b29b      	uxth	r3, r3
 8004016:	4413      	add	r3, r2
 8004018:	b29b      	uxth	r3, r3
 800401a:	b21a      	sxth	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	851a      	strh	r2, [r3, #40]	; 0x28

    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004026:	2b00      	cmp	r3, #0
 8004028:	bfb8      	it	lt
 800402a:	425b      	neglt	r3, r3
 800402c:	4a31      	ldr	r2, [pc, #196]	; (80040f4 <indev_gesture+0x184>)
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	7dd2      	ldrb	r2, [r2, #23]
 8004032:	4293      	cmp	r3, r2
 8004034:	dc0a      	bgt.n	800404c <indev_gesture+0xdc>
       (LV_MATH_ABS(proc->types.pointer.gesture_sum.y) > indev_act->driver.gesture_limit)) {
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800403c:	2b00      	cmp	r3, #0
 800403e:	bfb8      	it	lt
 8004040:	425b      	neglt	r3, r3
 8004042:	4a2c      	ldr	r2, [pc, #176]	; (80040f4 <indev_gesture+0x184>)
 8004044:	6812      	ldr	r2, [r2, #0]
 8004046:	7dd2      	ldrb	r2, [r2, #23]
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
 8004048:	4293      	cmp	r3, r2
 800404a:	dd4f      	ble.n	80040ec <indev_gesture+0x17c>

        proc->types.pointer.gesture_sent = 1;
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
 8004052:	f043 0320 	orr.w	r3, r3, #32
 8004056:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a

        if(LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > LV_MATH_ABS(proc->types.pointer.gesture_sum.y)) {
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004060:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004064:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800406e:	2b00      	cmp	r3, #0
 8004070:	bfb8      	it	lt
 8004072:	425b      	neglt	r3, r3
 8004074:	429a      	cmp	r2, r3
 8004076:	dd0e      	ble.n	8004096 <indev_gesture+0x126>
            if(proc->types.pointer.gesture_sum.x > 0)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800407e:	2b00      	cmp	r3, #0
 8004080:	dd04      	ble.n	800408c <indev_gesture+0x11c>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_RIGHT;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2203      	movs	r2, #3
 8004086:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800408a:	e012      	b.n	80040b2 <indev_gesture+0x142>
            else
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_LEFT;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004094:	e00d      	b.n	80040b2 <indev_gesture+0x142>
        }
        else {
            if(proc->types.pointer.gesture_sum.y > 0)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800409c:	2b00      	cmp	r3, #0
 800409e:	dd04      	ble.n	80040aa <indev_gesture+0x13a>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_BOTTOM;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80040a8:	e003      	b.n	80040b2 <indev_gesture+0x142>
            else
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_TOP;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        gesture_obj->signal_cb(gesture_obj, LV_SIGNAL_GESTURE, indev_act);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	4a0f      	ldr	r2, [pc, #60]	; (80040f4 <indev_gesture+0x184>)
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	2114      	movs	r1, #20
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f819 	bl	80040f8 <indev_reset_check>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10e      	bne.n	80040ea <indev_gesture+0x17a>
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, NULL);
 80040cc:	2200      	movs	r2, #0
 80040ce:	210b      	movs	r1, #11
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f002 fa6d 	bl	80065b0 <lv_event_send>
        if(indev_reset_check(proc)) return;
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f80e 	bl	80040f8 <indev_reset_check>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	e004      	b.n	80040ec <indev_gesture+0x17c>
    if(proc->types.pointer.gesture_sent) return;
 80040e2:	bf00      	nop
 80040e4:	e002      	b.n	80040ec <indev_gesture+0x17c>
    if(gesture_obj == NULL) return;
 80040e6:	bf00      	nop
 80040e8:	e000      	b.n	80040ec <indev_gesture+0x17c>
        if(indev_reset_check(proc)) return;
 80040ea:	bf00      	nop
    }
}
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20018b60 	.word	0x20018b60

080040f8 <indev_reset_check>:
 * Checks if the reset_query flag has been set. If so, perform necessary global indev cleanup actions
 * @param proc pointer to an input device 'proc'
 * @return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(lv_indev_proc_t * proc)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
    if(proc->reset_query) {
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <indev_reset_check+0x1e>
        indev_obj_act = NULL;
 8004110:	4b0a      	ldr	r3, [pc, #40]	; (800413c <indev_reset_check+0x44>)
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
    }

    return proc->reset_query ? true : false;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800411c:	085b      	lsrs	r3, r3, #1
 800411e:	b2db      	uxtb	r3, r3
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b00      	cmp	r3, #0
 8004126:	bf14      	ite	ne
 8004128:	2301      	movne	r3, #1
 800412a:	2300      	moveq	r3, #0
 800412c:	b2db      	uxtb	r3, r3
}
 800412e:	4618      	mov	r0, r3
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	20018b64 	.word	0x20018b64

08004140 <_lv_memcpy_small>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	613b      	str	r3, [r7, #16]

    while(len) {
 8004154:	e00c      	b.n	8004170 <_lv_memcpy_small+0x30>
        *d8 = *s8;
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	781a      	ldrb	r2, [r3, #0]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	701a      	strb	r2, [r3, #0]
        d8++;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	3301      	adds	r3, #1
 8004162:	617b      	str	r3, [r7, #20]
        s8++;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	3301      	adds	r3, #1
 8004168:	613b      	str	r3, [r7, #16]
        len--;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	3b01      	subs	r3, #1
 800416e:	607b      	str	r3, [r7, #4]
    while(len) {
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1ef      	bne.n	8004156 <_lv_memcpy_small+0x16>
    }

    return dst;
 8004176:	68fb      	ldr	r3, [r7, #12]
}
 8004178:	4618      	mov	r0, r3
 800417a:	371c      	adds	r7, #28
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
 800418e:	2208      	movs	r2, #8
 8004190:	6839      	ldr	r1, [r7, #0]
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff ffd4 	bl	8004140 <_lv_memcpy_small>
}
 8004198:	bf00      	nop
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3301      	adds	r3, #1
 80041be:	b29b      	uxth	r3, r3
 80041c0:	b21b      	sxth	r3, r3
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80041dc:	b29a      	uxth	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3301      	adds	r3, #1
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	b21b      	sxth	r3, r3
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	4613      	mov	r3, r2
 8004208:	71fb      	strb	r3, [r7, #7]
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800420a:	7bbb      	ldrb	r3, [r7, #14]
 800420c:	461a      	mov	r2, r3
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	fb03 f202 	mul.w	r2, r3, r2
 8004214:	7abb      	ldrb	r3, [r7, #10]
 8004216:	4619      	mov	r1, r3
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800421e:	fb03 f301 	mul.w	r3, r3, r1
 8004222:	4413      	add	r3, r2
 8004224:	461a      	mov	r2, r3
 8004226:	4613      	mov	r3, r2
 8004228:	021b      	lsls	r3, r3, #8
 800422a:	4413      	add	r3, r2
 800422c:	01db      	lsls	r3, r3, #7
 800422e:	4413      	add	r3, r2
 8004230:	0ddb      	lsrs	r3, r3, #23
 8004232:	b2db      	uxtb	r3, r3
 8004234:	75bb      	strb	r3, [r7, #22]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8004236:	7b7b      	ldrb	r3, [r7, #13]
 8004238:	461a      	mov	r2, r3
 800423a:	79fb      	ldrb	r3, [r7, #7]
 800423c:	fb03 f202 	mul.w	r2, r3, r2
 8004240:	7a7b      	ldrb	r3, [r7, #9]
 8004242:	4619      	mov	r1, r3
 8004244:	79fb      	ldrb	r3, [r7, #7]
 8004246:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800424a:	fb03 f301 	mul.w	r3, r3, r1
 800424e:	4413      	add	r3, r2
 8004250:	461a      	mov	r2, r3
 8004252:	4613      	mov	r3, r2
 8004254:	021b      	lsls	r3, r3, #8
 8004256:	4413      	add	r3, r2
 8004258:	01db      	lsls	r3, r3, #7
 800425a:	4413      	add	r3, r2
 800425c:	0ddb      	lsrs	r3, r3, #23
 800425e:	b2db      	uxtb	r3, r3
 8004260:	757b      	strb	r3, [r7, #21]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8004262:	7b3b      	ldrb	r3, [r7, #12]
 8004264:	461a      	mov	r2, r3
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	fb03 f202 	mul.w	r2, r3, r2
 800426c:	7a3b      	ldrb	r3, [r7, #8]
 800426e:	4619      	mov	r1, r3
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8004276:	fb03 f301 	mul.w	r3, r3, r1
 800427a:	4413      	add	r3, r2
 800427c:	461a      	mov	r2, r3
 800427e:	4613      	mov	r3, r2
 8004280:	021b      	lsls	r3, r3, #8
 8004282:	4413      	add	r3, r2
 8004284:	01db      	lsls	r3, r3, #7
 8004286:	4413      	add	r3, r2
 8004288:	0ddb      	lsrs	r3, r3, #23
 800428a:	b2db      	uxtb	r3, r3
 800428c:	753b      	strb	r3, [r7, #20]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
 800428e:	23ff      	movs	r3, #255	; 0xff
 8004290:	75fb      	strb	r3, [r7, #23]
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8004292:	697b      	ldr	r3, [r7, #20]
}
 8004294:	4618      	mov	r0, r3
 8004296:	371c      	adds	r7, #28
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <lv_color_make>:
#elif LV_COLOR_DEPTH == 32
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 80042a0:	b490      	push	{r4, r7}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4604      	mov	r4, r0
 80042a8:	4608      	mov	r0, r1
 80042aa:	4611      	mov	r1, r2
 80042ac:	4622      	mov	r2, r4
 80042ae:	71fa      	strb	r2, [r7, #7]
 80042b0:	4602      	mov	r2, r0
 80042b2:	71ba      	strb	r2, [r7, #6]
 80042b4:	460a      	mov	r2, r1
 80042b6:	717a      	strb	r2, [r7, #5]
    return LV_COLOR_MAKE(r, g, b);
 80042b8:	797a      	ldrb	r2, [r7, #5]
 80042ba:	f362 0307 	bfi	r3, r2, #0, #8
 80042be:	79ba      	ldrb	r2, [r7, #6]
 80042c0:	f362 230f 	bfi	r3, r2, #8, #8
 80042c4:	79fa      	ldrb	r2, [r7, #7]
 80042c6:	f362 4317 	bfi	r3, r2, #16, #8
 80042ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bc90      	pop	{r4, r7}
 80042d6:	4770      	bx	lr

080042d8 <lv_color_hex>:

static inline lv_color_t lv_color_hex(uint32_t c)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	0c1b      	lsrs	r3, r3, #16
 80042e4:	b2d8      	uxtb	r0, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	0a1b      	lsrs	r3, r3, #8
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	f7ff ffd5 	bl	80042a0 <lv_color_make>
 80042f6:	4603      	mov	r3, r0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <lv_anim_set_var>:
 * Set a variable to animate
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param var pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
    a->var     = var;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	601a      	str	r2, [r3, #0]
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <lv_anim_set_exec_cb>:
 * @param exec_cb a function to execute during animation
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	605a      	str	r2, [r3, #4]
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <lv_anim_set_time>:
 * Set the duration of an animation
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param duration duration of the animation in milliseconds
 */
static inline void lv_anim_set_time(lv_anim_t * a, uint32_t duration)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
    a->time     = duration;
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <lv_anim_set_delay>:
 * Set a delay before starting the animation
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param delay delay before the animation in milliseconds
 */
static inline void lv_anim_set_delay(lv_anim_t * a, uint32_t delay)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
    a->act_time = -(int32_t)(delay);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	425a      	negs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <lv_anim_set_values>:
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param start the start value
 * @param end the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, lv_anim_value_t start, lv_anim_value_t end)
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	460b      	mov	r3, r1
 800437c:	807b      	strh	r3, [r7, #2]
 800437e:	4613      	mov	r3, r2
 8004380:	803b      	strh	r3, [r7, #0]
    a->start = start;
 8004382:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	619a      	str	r2, [r3, #24]
    a->current = start;
 800438a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	61da      	str	r2, [r3, #28]
    a->end   = end;
 8004392:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	621a      	str	r2, [r3, #32]
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <lv_anim_set_path>:
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param path_cb a function the get the current value of the animation.
 *                The built in functions starts with `lv_anim_path_...`
 */
static inline void lv_anim_set_path(lv_anim_t * a, const lv_anim_path_t * path)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b082      	sub	sp, #8
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	6039      	str	r1, [r7, #0]
    _lv_memcpy_small(&a->path, path, sizeof(lv_anim_path_t));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3310      	adds	r3, #16
 80043b4:	2208      	movs	r2, #8
 80043b6:	6839      	ldr	r1, [r7, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff fec1 	bl	8004140 <_lv_memcpy_small>
}
 80043be:	bf00      	nop
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <lv_anim_set_start_cb>:
 * Set a function call when the animation really starts (considering `delay`)
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param start_cb a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_ready_cb_t start_cb)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
 80043ce:	6039      	str	r1, [r7, #0]
    a->start_cb = start_cb;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	609a      	str	r2, [r3, #8]
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <lv_anim_set_ready_cb>:
 * Set a function call when the animation is ready
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
    a->ready_cb = ready_cb;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	60da      	str	r2, [r3, #12]
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <lv_style_list_get_style>:
 * @param list pointer to a style list.
 */
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	460b      	mov	r3, r1
 8004408:	70fb      	strb	r3, [r7, #3]
    if(list->has_trans && list->skip_trans) id++;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	791b      	ldrb	r3, [r3, #4]
 800440e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d009      	beq.n	800442c <lv_style_list_get_style+0x2e>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	795b      	ldrb	r3, [r3, #5]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <lv_style_list_get_style+0x2e>
 8004426:	78fb      	ldrb	r3, [r7, #3]
 8004428:	3301      	adds	r3, #1
 800442a:	70fb      	strb	r3, [r7, #3]
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	791b      	ldrb	r3, [r3, #4]
 8004430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d008      	beq.n	800444c <lv_style_list_get_style+0x4e>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	791b      	ldrb	r3, [r3, #4]
 800443e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004442:	b2db      	uxtb	r3, r3
 8004444:	461a      	mov	r2, r3
 8004446:	78fb      	ldrb	r3, [r7, #3]
 8004448:	4293      	cmp	r3, r2
 800444a:	d301      	bcc.n	8004450 <lv_style_list_get_style+0x52>
 800444c:	2300      	movs	r3, #0
 800444e:	e005      	b.n	800445c <lv_style_list_get_style+0x5e>
    return list->style_list[id];
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	681b      	ldr	r3, [r3, #0]
}
 800445c:	4618      	mov	r0, r3
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <lv_obj_get_style_radius>:
#define _LV_OBJ_STYLE_SET_GET_DECLARE(prop_name, func_name, value_type, style_type, scalar)                             \
    _OBJ_GET_STYLE_##scalar(prop_name, func_name, value_type, style_type)                                               \
    _OBJ_SET_STYLE_LOCAL_##scalar(prop_name, func_name, value_type, style_type)                                         \
    _OBJ_SET_STYLE_##scalar(prop_name, func_name, value_type, style_type)

_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	70fb      	strb	r3, [r7, #3]
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	2201      	movs	r2, #1
 8004478:	4619      	mov	r1, r3
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f002 fb47 	bl	8006b0e <_lv_obj_get_style_int>
 8004480:	4603      	mov	r3, r0
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <lv_obj_get_style_clip_corner>:
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	460b      	mov	r3, r1
 8004494:	70fb      	strb	r3, [r7, #3]
 8004496:	78fb      	ldrb	r3, [r7, #3]
 8004498:	2202      	movs	r2, #2
 800449a:	4619      	mov	r1, r3
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f002 fb36 	bl	8006b0e <_lv_obj_get_style_int>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bf14      	ite	ne
 80044a8:	2301      	movne	r3, #1
 80044aa:	2300      	moveq	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <lv_obj_get_style_size>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b082      	sub	sp, #8
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	460b      	mov	r3, r1
 80044c0:	70fb      	strb	r3, [r7, #3]
 80044c2:	78fb      	ldrb	r3, [r7, #3]
 80044c4:	2203      	movs	r2, #3
 80044c6:	4619      	mov	r1, r3
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f002 fb20 	bl	8006b0e <_lv_obj_get_style_int>
 80044ce:	4603      	mov	r3, r0
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <lv_obj_get_style_transform_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	460b      	mov	r3, r1
 80044e2:	70fb      	strb	r3, [r7, #3]
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	2204      	movs	r2, #4
 80044e8:	4619      	mov	r1, r3
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f002 fb0f 	bl	8006b0e <_lv_obj_get_style_int>
 80044f0:	4603      	mov	r3, r0
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <lv_obj_get_style_transform_height>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b082      	sub	sp, #8
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
 8004502:	460b      	mov	r3, r1
 8004504:	70fb      	strb	r3, [r7, #3]
 8004506:	78fb      	ldrb	r3, [r7, #3]
 8004508:	2205      	movs	r2, #5
 800450a:	4619      	mov	r1, r3
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f002 fafe 	bl	8006b0e <_lv_obj_get_style_int>
 8004512:	4603      	mov	r3, r0
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <lv_obj_get_style_transform_angle>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	70fb      	strb	r3, [r7, #3]
 8004528:	78fb      	ldrb	r3, [r7, #3]
 800452a:	2206      	movs	r2, #6
 800452c:	4619      	mov	r1, r3
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f002 faed 	bl	8006b0e <_lv_obj_get_style_int>
 8004534:	4603      	mov	r3, r0
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <lv_obj_get_style_transform_zoom>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	460b      	mov	r3, r1
 8004548:	70fb      	strb	r3, [r7, #3]
 800454a:	78fb      	ldrb	r3, [r7, #3]
 800454c:	2207      	movs	r2, #7
 800454e:	4619      	mov	r1, r3
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f002 fadc 	bl	8006b0e <_lv_obj_get_style_int>
 8004556:	4603      	mov	r3, r0
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <lv_obj_get_style_opa_scale>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	70fb      	strb	r3, [r7, #3]
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	f248 020c 	movw	r2, #32780	; 0x800c
 8004572:	4619      	mov	r1, r3
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f002 fcbe 	bl	8006ef6 <_lv_obj_get_style_opa>
 800457a:	4603      	mov	r3, r0
 800457c:	4618      	mov	r0, r3
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <lv_obj_get_style_pad_top>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	70fb      	strb	r3, [r7, #3]
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	2210      	movs	r2, #16
 8004594:	4619      	mov	r1, r3
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f002 fab9 	bl	8006b0e <_lv_obj_get_style_int>
 800459c:	4603      	mov	r3, r0
 800459e:	4618      	mov	r0, r3
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <lv_obj_get_style_pad_bottom>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b082      	sub	sp, #8
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
 80045ae:	460b      	mov	r3, r1
 80045b0:	70fb      	strb	r3, [r7, #3]
 80045b2:	78fb      	ldrb	r3, [r7, #3]
 80045b4:	2211      	movs	r2, #17
 80045b6:	4619      	mov	r1, r3
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f002 faa8 	bl	8006b0e <_lv_obj_get_style_int>
 80045be:	4603      	mov	r3, r0
 80045c0:	4618      	mov	r0, r3
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <lv_obj_get_style_pad_left>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	70fb      	strb	r3, [r7, #3]
 80045d4:	78fb      	ldrb	r3, [r7, #3]
 80045d6:	2212      	movs	r2, #18
 80045d8:	4619      	mov	r1, r3
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f002 fa97 	bl	8006b0e <_lv_obj_get_style_int>
 80045e0:	4603      	mov	r3, r0
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <lv_obj_get_style_pad_right>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b082      	sub	sp, #8
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	460b      	mov	r3, r1
 80045f4:	70fb      	strb	r3, [r7, #3]
 80045f6:	78fb      	ldrb	r3, [r7, #3]
 80045f8:	2213      	movs	r2, #19
 80045fa:	4619      	mov	r1, r3
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f002 fa86 	bl	8006b0e <_lv_obj_get_style_int>
 8004602:	4603      	mov	r3, r0
 8004604:	4618      	mov	r0, r3
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <lv_obj_get_style_pad_inner>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	70fb      	strb	r3, [r7, #3]
 8004618:	78fb      	ldrb	r3, [r7, #3]
 800461a:	2214      	movs	r2, #20
 800461c:	4619      	mov	r1, r3
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f002 fa75 	bl	8006b0e <_lv_obj_get_style_int>
 8004624:	4603      	mov	r3, r0
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <lv_obj_get_style_margin_top>:
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	460b      	mov	r3, r1
 8004638:	70fb      	strb	r3, [r7, #3]
 800463a:	78fb      	ldrb	r3, [r7, #3]
 800463c:	2215      	movs	r2, #21
 800463e:	4619      	mov	r1, r3
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f002 fa64 	bl	8006b0e <_lv_obj_get_style_int>
 8004646:	4603      	mov	r3, r0
 8004648:	4618      	mov	r0, r3
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <lv_obj_get_style_margin_bottom>:
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	70fb      	strb	r3, [r7, #3]
 800465c:	78fb      	ldrb	r3, [r7, #3]
 800465e:	2216      	movs	r2, #22
 8004660:	4619      	mov	r1, r3
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f002 fa53 	bl	8006b0e <_lv_obj_get_style_int>
 8004668:	4603      	mov	r3, r0
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <lv_obj_get_style_margin_left>:
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	460b      	mov	r3, r1
 800467c:	70fb      	strb	r3, [r7, #3]
 800467e:	78fb      	ldrb	r3, [r7, #3]
 8004680:	2217      	movs	r2, #23
 8004682:	4619      	mov	r1, r3
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f002 fa42 	bl	8006b0e <_lv_obj_get_style_int>
 800468a:	4603      	mov	r3, r0
 800468c:	4618      	mov	r0, r3
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <lv_obj_get_style_margin_right>:
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	460b      	mov	r3, r1
 800469e:	70fb      	strb	r3, [r7, #3]
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	2218      	movs	r2, #24
 80046a4:	4619      	mov	r1, r3
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f002 fa31 	bl	8006b0e <_lv_obj_get_style_int>
 80046ac:	4603      	mov	r3, r0
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <lv_obj_get_style_bg_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	460b      	mov	r3, r1
 80046c0:	70fb      	strb	r3, [r7, #3]
 80046c2:	78fb      	ldrb	r3, [r7, #3]
 80046c4:	2220      	movs	r2, #32
 80046c6:	4619      	mov	r1, r3
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f002 fa20 	bl	8006b0e <_lv_obj_get_style_int>
 80046ce:	4603      	mov	r3, r0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <lv_obj_get_style_bg_main_stop>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	460b      	mov	r3, r1
 80046e4:	70fb      	strb	r3, [r7, #3]
 80046e6:	78fb      	ldrb	r3, [r7, #3]
 80046e8:	2221      	movs	r2, #33	; 0x21
 80046ea:	4619      	mov	r1, r3
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f002 fa0e 	bl	8006b0e <_lv_obj_get_style_int>
 80046f2:	4603      	mov	r3, r0
 80046f4:	4618      	mov	r0, r3
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <lv_obj_get_style_bg_grad_stop>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	70fb      	strb	r3, [r7, #3]
 8004708:	78fb      	ldrb	r3, [r7, #3]
 800470a:	2222      	movs	r2, #34	; 0x22
 800470c:	4619      	mov	r1, r3
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f002 f9fd 	bl	8006b0e <_lv_obj_get_style_int>
 8004714:	4603      	mov	r3, r0
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <lv_obj_get_style_bg_grad_dir>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
 800471e:	b580      	push	{r7, lr}
 8004720:	b082      	sub	sp, #8
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	460b      	mov	r3, r1
 8004728:	70fb      	strb	r3, [r7, #3]
 800472a:	78fb      	ldrb	r3, [r7, #3]
 800472c:	2223      	movs	r2, #35	; 0x23
 800472e:	4619      	mov	r1, r3
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f002 f9ec 	bl	8006b0e <_lv_obj_get_style_int>
 8004736:	4603      	mov	r3, r0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <lv_obj_get_style_bg_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 8004742:	b580      	push	{r7, lr}
 8004744:	b082      	sub	sp, #8
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	460b      	mov	r3, r1
 800474c:	70fb      	strb	r3, [r7, #3]
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	2229      	movs	r2, #41	; 0x29
 8004752:	4619      	mov	r1, r3
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f002 fb63 	bl	8006e20 <_lv_obj_get_style_color>
 800475a:	4603      	mov	r3, r0
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <lv_obj_get_style_bg_grad_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	460b      	mov	r3, r1
 800476e:	70fb      	strb	r3, [r7, #3]
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	222a      	movs	r2, #42	; 0x2a
 8004774:	4619      	mov	r1, r3
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f002 fb52 	bl	8006e20 <_lv_obj_get_style_color>
 800477c:	4603      	mov	r3, r0
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <lv_obj_get_style_bg_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 8004786:	b580      	push	{r7, lr}
 8004788:	b082      	sub	sp, #8
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	460b      	mov	r3, r1
 8004790:	70fb      	strb	r3, [r7, #3]
 8004792:	78fb      	ldrb	r3, [r7, #3]
 8004794:	222c      	movs	r2, #44	; 0x2c
 8004796:	4619      	mov	r1, r3
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f002 fbac 	bl	8006ef6 <_lv_obj_get_style_opa>
 800479e:	4603      	mov	r3, r0
 80047a0:	4618      	mov	r0, r3
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <lv_obj_get_style_border_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	70fb      	strb	r3, [r7, #3]
 80047b4:	78fb      	ldrb	r3, [r7, #3]
 80047b6:	2230      	movs	r2, #48	; 0x30
 80047b8:	4619      	mov	r1, r3
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f002 f9a7 	bl	8006b0e <_lv_obj_get_style_int>
 80047c0:	4603      	mov	r3, r0
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <lv_obj_get_style_border_side>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	460b      	mov	r3, r1
 80047d4:	70fb      	strb	r3, [r7, #3]
 80047d6:	78fb      	ldrb	r3, [r7, #3]
 80047d8:	2231      	movs	r2, #49	; 0x31
 80047da:	4619      	mov	r1, r3
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f002 f996 	bl	8006b0e <_lv_obj_get_style_int>
 80047e2:	4603      	mov	r3, r0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <lv_obj_get_style_border_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	460b      	mov	r3, r1
 80047f8:	70fb      	strb	r3, [r7, #3]
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	2232      	movs	r2, #50	; 0x32
 80047fe:	4619      	mov	r1, r3
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f002 f984 	bl	8006b0e <_lv_obj_get_style_int>
 8004806:	4603      	mov	r3, r0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <lv_obj_get_style_border_post>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
 8004812:	b580      	push	{r7, lr}
 8004814:	b082      	sub	sp, #8
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	460b      	mov	r3, r1
 800481c:	70fb      	strb	r3, [r7, #3]
 800481e:	78fb      	ldrb	r3, [r7, #3]
 8004820:	2233      	movs	r2, #51	; 0x33
 8004822:	4619      	mov	r1, r3
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f002 f972 	bl	8006b0e <_lv_obj_get_style_int>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	bf14      	ite	ne
 8004830:	2301      	movne	r3, #1
 8004832:	2300      	moveq	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	4618      	mov	r0, r3
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <lv_obj_get_style_border_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
 800483e:	b580      	push	{r7, lr}
 8004840:	b082      	sub	sp, #8
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	460b      	mov	r3, r1
 8004848:	70fb      	strb	r3, [r7, #3]
 800484a:	78fb      	ldrb	r3, [r7, #3]
 800484c:	2239      	movs	r2, #57	; 0x39
 800484e:	4619      	mov	r1, r3
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f002 fae5 	bl	8006e20 <_lv_obj_get_style_color>
 8004856:	4603      	mov	r3, r0
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <lv_obj_get_style_border_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	70fb      	strb	r3, [r7, #3]
 800486c:	78fb      	ldrb	r3, [r7, #3]
 800486e:	223c      	movs	r2, #60	; 0x3c
 8004870:	4619      	mov	r1, r3
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f002 fb3f 	bl	8006ef6 <_lv_obj_get_style_opa>
 8004878:	4603      	mov	r3, r0
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <lv_obj_get_style_outline_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
 8004882:	b580      	push	{r7, lr}
 8004884:	b082      	sub	sp, #8
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	460b      	mov	r3, r1
 800488c:	70fb      	strb	r3, [r7, #3]
 800488e:	78fb      	ldrb	r3, [r7, #3]
 8004890:	2240      	movs	r2, #64	; 0x40
 8004892:	4619      	mov	r1, r3
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f002 f93a 	bl	8006b0e <_lv_obj_get_style_int>
 800489a:	4603      	mov	r3, r0
 800489c:	4618      	mov	r0, r3
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <lv_obj_get_style_outline_pad>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	70fb      	strb	r3, [r7, #3]
 80048b0:	78fb      	ldrb	r3, [r7, #3]
 80048b2:	2241      	movs	r2, #65	; 0x41
 80048b4:	4619      	mov	r1, r3
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f002 f929 	bl	8006b0e <_lv_obj_get_style_int>
 80048bc:	4603      	mov	r3, r0
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <lv_obj_get_style_outline_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	460b      	mov	r3, r1
 80048d0:	70fb      	strb	r3, [r7, #3]
 80048d2:	78fb      	ldrb	r3, [r7, #3]
 80048d4:	2242      	movs	r2, #66	; 0x42
 80048d6:	4619      	mov	r1, r3
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f002 f918 	bl	8006b0e <_lv_obj_get_style_int>
 80048de:	4603      	mov	r3, r0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	4618      	mov	r0, r3
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <lv_obj_get_style_outline_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	460b      	mov	r3, r1
 80048f4:	70fb      	strb	r3, [r7, #3]
 80048f6:	78fb      	ldrb	r3, [r7, #3]
 80048f8:	2249      	movs	r2, #73	; 0x49
 80048fa:	4619      	mov	r1, r3
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f002 fa8f 	bl	8006e20 <_lv_obj_get_style_color>
 8004902:	4603      	mov	r3, r0
 8004904:	4618      	mov	r0, r3
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <lv_obj_get_style_outline_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	70fb      	strb	r3, [r7, #3]
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	224c      	movs	r2, #76	; 0x4c
 800491c:	4619      	mov	r1, r3
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f002 fae9 	bl	8006ef6 <_lv_obj_get_style_opa>
 8004924:	4603      	mov	r3, r0
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <lv_obj_get_style_shadow_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
 800492e:	b580      	push	{r7, lr}
 8004930:	b082      	sub	sp, #8
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	460b      	mov	r3, r1
 8004938:	70fb      	strb	r3, [r7, #3]
 800493a:	78fb      	ldrb	r3, [r7, #3]
 800493c:	2250      	movs	r2, #80	; 0x50
 800493e:	4619      	mov	r1, r3
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f002 f8e4 	bl	8006b0e <_lv_obj_get_style_int>
 8004946:	4603      	mov	r3, r0
 8004948:	4618      	mov	r0, r3
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <lv_obj_get_style_shadow_ofs_x>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	460b      	mov	r3, r1
 800495a:	70fb      	strb	r3, [r7, #3]
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	2251      	movs	r2, #81	; 0x51
 8004960:	4619      	mov	r1, r3
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f002 f8d3 	bl	8006b0e <_lv_obj_get_style_int>
 8004968:	4603      	mov	r3, r0
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <lv_obj_get_style_shadow_ofs_y>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
 8004972:	b580      	push	{r7, lr}
 8004974:	b082      	sub	sp, #8
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	460b      	mov	r3, r1
 800497c:	70fb      	strb	r3, [r7, #3]
 800497e:	78fb      	ldrb	r3, [r7, #3]
 8004980:	2252      	movs	r2, #82	; 0x52
 8004982:	4619      	mov	r1, r3
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f002 f8c2 	bl	8006b0e <_lv_obj_get_style_int>
 800498a:	4603      	mov	r3, r0
 800498c:	4618      	mov	r0, r3
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <lv_obj_get_style_shadow_spread>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	70fb      	strb	r3, [r7, #3]
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	2253      	movs	r2, #83	; 0x53
 80049a4:	4619      	mov	r1, r3
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f002 f8b1 	bl	8006b0e <_lv_obj_get_style_int>
 80049ac:	4603      	mov	r3, r0
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <lv_obj_get_style_shadow_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b082      	sub	sp, #8
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	460b      	mov	r3, r1
 80049c0:	70fb      	strb	r3, [r7, #3]
 80049c2:	78fb      	ldrb	r3, [r7, #3]
 80049c4:	2254      	movs	r2, #84	; 0x54
 80049c6:	4619      	mov	r1, r3
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f002 f8a0 	bl	8006b0e <_lv_obj_get_style_int>
 80049ce:	4603      	mov	r3, r0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <lv_obj_get_style_shadow_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
 80049da:	b580      	push	{r7, lr}
 80049dc:	b082      	sub	sp, #8
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	460b      	mov	r3, r1
 80049e4:	70fb      	strb	r3, [r7, #3]
 80049e6:	78fb      	ldrb	r3, [r7, #3]
 80049e8:	2259      	movs	r2, #89	; 0x59
 80049ea:	4619      	mov	r1, r3
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f002 fa17 	bl	8006e20 <_lv_obj_get_style_color>
 80049f2:	4603      	mov	r3, r0
 80049f4:	4618      	mov	r0, r3
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <lv_obj_get_style_shadow_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	70fb      	strb	r3, [r7, #3]
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	225c      	movs	r2, #92	; 0x5c
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f002 fa71 	bl	8006ef6 <_lv_obj_get_style_opa>
 8004a14:	4603      	mov	r3, r0
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <lv_obj_get_style_pattern_repeat>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_REPEAT, pattern_repeat, bool, _int, scalar)
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b082      	sub	sp, #8
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	460b      	mov	r3, r1
 8004a28:	70fb      	strb	r3, [r7, #3]
 8004a2a:	78fb      	ldrb	r3, [r7, #3]
 8004a2c:	2261      	movs	r2, #97	; 0x61
 8004a2e:	4619      	mov	r1, r3
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f002 f86c 	bl	8006b0e <_lv_obj_get_style_int>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	bf14      	ite	ne
 8004a3c:	2301      	movne	r3, #1
 8004a3e:	2300      	moveq	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <lv_obj_get_style_pattern_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b082      	sub	sp, #8
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	460b      	mov	r3, r1
 8004a54:	70fb      	strb	r3, [r7, #3]
 8004a56:	78fb      	ldrb	r3, [r7, #3]
 8004a58:	2260      	movs	r2, #96	; 0x60
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f002 f856 	bl	8006b0e <_lv_obj_get_style_int>
 8004a62:	4603      	mov	r3, r0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <lv_obj_get_style_pattern_recolor>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b082      	sub	sp, #8
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	460b      	mov	r3, r1
 8004a78:	70fb      	strb	r3, [r7, #3]
 8004a7a:	78fb      	ldrb	r3, [r7, #3]
 8004a7c:	2269      	movs	r2, #105	; 0x69
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f002 f9cd 	bl	8006e20 <_lv_obj_get_style_color>
 8004a86:	4603      	mov	r3, r0
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <lv_obj_get_style_pattern_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	70fb      	strb	r3, [r7, #3]
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	226c      	movs	r2, #108	; 0x6c
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f002 fa27 	bl	8006ef6 <_lv_obj_get_style_opa>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <lv_obj_get_style_pattern_recolor_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR_OPA, pattern_recolor_opa, lv_opa_t, _opa, scalar)
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b082      	sub	sp, #8
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	460b      	mov	r3, r1
 8004abc:	70fb      	strb	r3, [r7, #3]
 8004abe:	78fb      	ldrb	r3, [r7, #3]
 8004ac0:	226d      	movs	r2, #109	; 0x6d
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f002 fa16 	bl	8006ef6 <_lv_obj_get_style_opa>
 8004aca:	4603      	mov	r3, r0
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <lv_obj_get_style_pattern_image>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	460b      	mov	r3, r1
 8004ade:	70fb      	strb	r3, [r7, #3]
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	226e      	movs	r2, #110	; 0x6e
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f002 fac2 	bl	8007070 <_lv_obj_get_style_ptr>
 8004aec:	4603      	mov	r3, r0
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <lv_obj_get_style_value_letter_space>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b082      	sub	sp, #8
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	460b      	mov	r3, r1
 8004b00:	70fb      	strb	r3, [r7, #3]
 8004b02:	78fb      	ldrb	r3, [r7, #3]
 8004b04:	2270      	movs	r2, #112	; 0x70
 8004b06:	4619      	mov	r1, r3
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f002 f800 	bl	8006b0e <_lv_obj_get_style_int>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <lv_obj_get_style_value_line_space>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	70fb      	strb	r3, [r7, #3]
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	2271      	movs	r2, #113	; 0x71
 8004b28:	4619      	mov	r1, r3
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f001 ffef 	bl	8006b0e <_lv_obj_get_style_int>
 8004b30:	4603      	mov	r3, r0
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <lv_obj_get_style_value_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b082      	sub	sp, #8
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	460b      	mov	r3, r1
 8004b44:	70fb      	strb	r3, [r7, #3]
 8004b46:	78fb      	ldrb	r3, [r7, #3]
 8004b48:	2272      	movs	r2, #114	; 0x72
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f001 ffde 	bl	8006b0e <_lv_obj_get_style_int>
 8004b52:	4603      	mov	r3, r0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	4618      	mov	r0, r3
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <lv_obj_get_style_value_ofs_x>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b082      	sub	sp, #8
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	460b      	mov	r3, r1
 8004b68:	70fb      	strb	r3, [r7, #3]
 8004b6a:	78fb      	ldrb	r3, [r7, #3]
 8004b6c:	2273      	movs	r2, #115	; 0x73
 8004b6e:	4619      	mov	r1, r3
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f001 ffcc 	bl	8006b0e <_lv_obj_get_style_int>
 8004b76:	4603      	mov	r3, r0
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <lv_obj_get_style_value_ofs_y>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	70fb      	strb	r3, [r7, #3]
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	2274      	movs	r2, #116	; 0x74
 8004b90:	4619      	mov	r1, r3
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f001 ffbb 	bl	8006b0e <_lv_obj_get_style_int>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <lv_obj_get_style_value_align>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b082      	sub	sp, #8
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	460b      	mov	r3, r1
 8004bac:	70fb      	strb	r3, [r7, #3]
 8004bae:	78fb      	ldrb	r3, [r7, #3]
 8004bb0:	2275      	movs	r2, #117	; 0x75
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f001 ffaa 	bl	8006b0e <_lv_obj_get_style_int>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <lv_obj_get_style_value_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b082      	sub	sp, #8
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
 8004bce:	460b      	mov	r3, r1
 8004bd0:	70fb      	strb	r3, [r7, #3]
 8004bd2:	78fb      	ldrb	r3, [r7, #3]
 8004bd4:	2279      	movs	r2, #121	; 0x79
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f002 f921 	bl	8006e20 <_lv_obj_get_style_color>
 8004bde:	4603      	mov	r3, r0
 8004be0:	4618      	mov	r0, r3
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <lv_obj_get_style_value_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	70fb      	strb	r3, [r7, #3]
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	227c      	movs	r2, #124	; 0x7c
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f002 f97b 	bl	8006ef6 <_lv_obj_get_style_opa>
 8004c00:	4603      	mov	r3, r0
 8004c02:	4618      	mov	r0, r3
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <lv_obj_get_style_value_font>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b082      	sub	sp, #8
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	460b      	mov	r3, r1
 8004c14:	70fb      	strb	r3, [r7, #3]
 8004c16:	78fb      	ldrb	r3, [r7, #3]
 8004c18:	227e      	movs	r2, #126	; 0x7e
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f002 fa27 	bl	8007070 <_lv_obj_get_style_ptr>
 8004c22:	4603      	mov	r3, r0
 8004c24:	4618      	mov	r0, r3
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <lv_obj_get_style_value_str>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	460b      	mov	r3, r1
 8004c36:	70fb      	strb	r3, [r7, #3]
 8004c38:	78fb      	ldrb	r3, [r7, #3]
 8004c3a:	227f      	movs	r2, #127	; 0x7f
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f002 fa16 	bl	8007070 <_lv_obj_get_style_ptr>
 8004c44:	4603      	mov	r3, r0
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <lv_obj_get_style_text_letter_space>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b082      	sub	sp, #8
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	460b      	mov	r3, r1
 8004c58:	70fb      	strb	r3, [r7, #3]
 8004c5a:	78fb      	ldrb	r3, [r7, #3]
 8004c5c:	f248 0280 	movw	r2, #32896	; 0x8080
 8004c60:	4619      	mov	r1, r3
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f001 ff53 	bl	8006b0e <_lv_obj_get_style_int>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <lv_obj_get_style_text_line_space>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b082      	sub	sp, #8
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	70fb      	strb	r3, [r7, #3]
 8004c7e:	78fb      	ldrb	r3, [r7, #3]
 8004c80:	f248 0281 	movw	r2, #32897	; 0x8081
 8004c84:	4619      	mov	r1, r3
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f001 ff41 	bl	8006b0e <_lv_obj_get_style_int>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <lv_obj_get_style_text_decor>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b082      	sub	sp, #8
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	70fb      	strb	r3, [r7, #3]
 8004ca2:	78fb      	ldrb	r3, [r7, #3]
 8004ca4:	f248 0282 	movw	r2, #32898	; 0x8082
 8004ca8:	4619      	mov	r1, r3
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f001 ff2f 	bl	8006b0e <_lv_obj_get_style_int>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <lv_obj_get_style_text_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	70fb      	strb	r3, [r7, #3]
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	f248 0283 	movw	r2, #32899	; 0x8083
 8004cce:	4619      	mov	r1, r3
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f001 ff1c 	bl	8006b0e <_lv_obj_get_style_int>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <lv_obj_get_style_text_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b082      	sub	sp, #8
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	460b      	mov	r3, r1
 8004cec:	70fb      	strb	r3, [r7, #3]
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	f248 0289 	movw	r2, #32905	; 0x8089
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f002 f892 	bl	8006e20 <_lv_obj_get_style_color>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <lv_obj_get_style_text_sel_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	460b      	mov	r3, r1
 8004d10:	70fb      	strb	r3, [r7, #3]
 8004d12:	78fb      	ldrb	r3, [r7, #3]
 8004d14:	f248 028a 	movw	r2, #32906	; 0x808a
 8004d18:	4619      	mov	r1, r3
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f002 f880 	bl	8006e20 <_lv_obj_get_style_color>
 8004d20:	4603      	mov	r3, r0
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <lv_obj_get_style_text_sel_bg_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b082      	sub	sp, #8
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
 8004d32:	460b      	mov	r3, r1
 8004d34:	70fb      	strb	r3, [r7, #3]
 8004d36:	78fb      	ldrb	r3, [r7, #3]
 8004d38:	f248 028b 	movw	r2, #32907	; 0x808b
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f002 f86e 	bl	8006e20 <_lv_obj_get_style_color>
 8004d44:	4603      	mov	r3, r0
 8004d46:	4618      	mov	r0, r3
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <lv_obj_get_style_text_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b082      	sub	sp, #8
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	460b      	mov	r3, r1
 8004d58:	70fb      	strb	r3, [r7, #3]
 8004d5a:	78fb      	ldrb	r3, [r7, #3]
 8004d5c:	f248 028c 	movw	r2, #32908	; 0x808c
 8004d60:	4619      	mov	r1, r3
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f002 f8c7 	bl	8006ef6 <_lv_obj_get_style_opa>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <lv_obj_get_style_text_font>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b082      	sub	sp, #8
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	70fb      	strb	r3, [r7, #3]
 8004d7e:	78fb      	ldrb	r3, [r7, #3]
 8004d80:	f248 028e 	movw	r2, #32910	; 0x808e
 8004d84:	4619      	mov	r1, r3
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f002 f972 	bl	8007070 <_lv_obj_get_style_ptr>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <lv_obj_get_style_line_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b082      	sub	sp, #8
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	460b      	mov	r3, r1
 8004da0:	70fb      	strb	r3, [r7, #3]
 8004da2:	78fb      	ldrb	r3, [r7, #3]
 8004da4:	2290      	movs	r2, #144	; 0x90
 8004da6:	4619      	mov	r1, r3
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f001 feb0 	bl	8006b0e <_lv_obj_get_style_int>
 8004dae:	4603      	mov	r3, r0
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <lv_obj_get_style_line_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	70fb      	strb	r3, [r7, #3]
 8004dc4:	78fb      	ldrb	r3, [r7, #3]
 8004dc6:	2291      	movs	r2, #145	; 0x91
 8004dc8:	4619      	mov	r1, r3
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f001 fe9f 	bl	8006b0e <_lv_obj_get_style_int>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <lv_obj_get_style_line_dash_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	70fb      	strb	r3, [r7, #3]
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	2292      	movs	r2, #146	; 0x92
 8004dec:	4619      	mov	r1, r3
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f001 fe8d 	bl	8006b0e <_lv_obj_get_style_int>
 8004df4:	4603      	mov	r3, r0
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <lv_obj_get_style_line_dash_gap>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b082      	sub	sp, #8
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	460b      	mov	r3, r1
 8004e08:	70fb      	strb	r3, [r7, #3]
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	2293      	movs	r2, #147	; 0x93
 8004e0e:	4619      	mov	r1, r3
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f001 fe7c 	bl	8006b0e <_lv_obj_get_style_int>
 8004e16:	4603      	mov	r3, r0
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <lv_obj_get_style_line_rounded>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	70fb      	strb	r3, [r7, #3]
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	2294      	movs	r2, #148	; 0x94
 8004e30:	4619      	mov	r1, r3
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f001 fe6b 	bl	8006b0e <_lv_obj_get_style_int>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	bf14      	ite	ne
 8004e3e:	2301      	movne	r3, #1
 8004e40:	2300      	moveq	r3, #0
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <lv_obj_get_style_line_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	460b      	mov	r3, r1
 8004e56:	70fb      	strb	r3, [r7, #3]
 8004e58:	78fb      	ldrb	r3, [r7, #3]
 8004e5a:	2299      	movs	r2, #153	; 0x99
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f001 ffde 	bl	8006e20 <_lv_obj_get_style_color>
 8004e64:	4603      	mov	r3, r0
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <lv_obj_get_style_line_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b082      	sub	sp, #8
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	460b      	mov	r3, r1
 8004e78:	70fb      	strb	r3, [r7, #3]
 8004e7a:	78fb      	ldrb	r3, [r7, #3]
 8004e7c:	229c      	movs	r2, #156	; 0x9c
 8004e7e:	4619      	mov	r1, r3
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f002 f838 	bl	8006ef6 <_lv_obj_get_style_opa>
 8004e86:	4603      	mov	r3, r0
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <lv_obj_get_style_image_blend_mode>:
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	70fb      	strb	r3, [r7, #3]
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	f248 02a0 	movw	r2, #32928	; 0x80a0
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f001 fe32 	bl	8006b0e <_lv_obj_get_style_int>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <lv_obj_get_style_image_recolor>:
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b082      	sub	sp, #8
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	70fb      	strb	r3, [r7, #3]
 8004ec2:	78fb      	ldrb	r3, [r7, #3]
 8004ec4:	f248 02a9 	movw	r2, #32937	; 0x80a9
 8004ec8:	4619      	mov	r1, r3
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f001 ffa8 	bl	8006e20 <_lv_obj_get_style_color>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <lv_obj_get_style_image_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b082      	sub	sp, #8
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	70fb      	strb	r3, [r7, #3]
 8004ee6:	78fb      	ldrb	r3, [r7, #3]
 8004ee8:	f248 02ac 	movw	r2, #32940	; 0x80ac
 8004eec:	4619      	mov	r1, r3
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f002 f801 	bl	8006ef6 <_lv_obj_get_style_opa>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <lv_obj_get_style_image_recolor_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b082      	sub	sp, #8
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	460b      	mov	r3, r1
 8004f08:	70fb      	strb	r3, [r7, #3]
 8004f0a:	78fb      	ldrb	r3, [r7, #3]
 8004f0c:	f248 02ad 	movw	r2, #32941	; 0x80ad
 8004f10:	4619      	mov	r1, r3
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f001 ffef 	bl	8006ef6 <_lv_obj_get_style_opa>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <lv_obj_get_style_transition_time>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b082      	sub	sp, #8
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	70fb      	strb	r3, [r7, #3]
 8004f2e:	78fb      	ldrb	r3, [r7, #3]
 8004f30:	22b0      	movs	r2, #176	; 0xb0
 8004f32:	4619      	mov	r1, r3
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f001 fdea 	bl	8006b0e <_lv_obj_get_style_int>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <lv_obj_get_style_transition_delay>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	70fb      	strb	r3, [r7, #3]
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	22b1      	movs	r2, #177	; 0xb1
 8004f54:	4619      	mov	r1, r3
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f001 fdd9 	bl	8006b0e <_lv_obj_get_style_int>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <lv_obj_get_style_transition_prop_1>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b082      	sub	sp, #8
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	70fb      	strb	r3, [r7, #3]
 8004f72:	78fb      	ldrb	r3, [r7, #3]
 8004f74:	22b2      	movs	r2, #178	; 0xb2
 8004f76:	4619      	mov	r1, r3
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f001 fdc8 	bl	8006b0e <_lv_obj_get_style_int>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	4618      	mov	r0, r3
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <lv_obj_get_style_transition_prop_2>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	70fb      	strb	r3, [r7, #3]
 8004f94:	78fb      	ldrb	r3, [r7, #3]
 8004f96:	22b3      	movs	r2, #179	; 0xb3
 8004f98:	4619      	mov	r1, r3
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f001 fdb7 	bl	8006b0e <_lv_obj_get_style_int>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <lv_obj_get_style_transition_prop_3>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b082      	sub	sp, #8
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	70fb      	strb	r3, [r7, #3]
 8004fb6:	78fb      	ldrb	r3, [r7, #3]
 8004fb8:	22b4      	movs	r2, #180	; 0xb4
 8004fba:	4619      	mov	r1, r3
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f001 fda6 	bl	8006b0e <_lv_obj_get_style_int>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <lv_obj_get_style_transition_prop_4>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	70fb      	strb	r3, [r7, #3]
 8004fd8:	78fb      	ldrb	r3, [r7, #3]
 8004fda:	22b5      	movs	r2, #181	; 0xb5
 8004fdc:	4619      	mov	r1, r3
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f001 fd95 	bl	8006b0e <_lv_obj_get_style_int>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <lv_obj_get_style_transition_prop_5>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b082      	sub	sp, #8
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	70fb      	strb	r3, [r7, #3]
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	22b6      	movs	r2, #182	; 0xb6
 8004ffe:	4619      	mov	r1, r3
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f001 fd84 	bl	8006b0e <_lv_obj_get_style_int>
 8005006:	4603      	mov	r3, r0
 8005008:	4618      	mov	r0, r3
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <lv_obj_get_style_transition_prop_6>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	70fb      	strb	r3, [r7, #3]
 800501c:	78fb      	ldrb	r3, [r7, #3]
 800501e:	22b7      	movs	r2, #183	; 0xb7
 8005020:	4619      	mov	r1, r3
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f001 fd73 	bl	8006b0e <_lv_obj_get_style_int>
 8005028:	4603      	mov	r3, r0
 800502a:	4618      	mov	r0, r3
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <lv_obj_get_style_transition_path>:
#if LV_USE_ANIMATION
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
 8005032:	b580      	push	{r7, lr}
 8005034:	b082      	sub	sp, #8
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	460b      	mov	r3, r1
 800503c:	70fb      	strb	r3, [r7, #3]
 800503e:	78fb      	ldrb	r3, [r7, #3]
 8005040:	22be      	movs	r2, #190	; 0xbe
 8005042:	4619      	mov	r1, r3
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f002 f813 	bl	8007070 <_lv_obj_get_style_ptr>
 800504a:	4603      	mov	r3, r0
 800504c:	4618      	mov	r0, r3
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <lv_obj_get_style_scale_width>:
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	460b      	mov	r3, r1
 800505e:	70fb      	strb	r3, [r7, #3]
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	22c0      	movs	r2, #192	; 0xc0
 8005064:	4619      	mov	r1, r3
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f001 fd51 	bl	8006b0e <_lv_obj_get_style_int>
 800506c:	4603      	mov	r3, r0
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <lv_obj_get_style_scale_border_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
 8005076:	b580      	push	{r7, lr}
 8005078:	b082      	sub	sp, #8
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	460b      	mov	r3, r1
 8005080:	70fb      	strb	r3, [r7, #3]
 8005082:	78fb      	ldrb	r3, [r7, #3]
 8005084:	22c1      	movs	r2, #193	; 0xc1
 8005086:	4619      	mov	r1, r3
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f001 fd40 	bl	8006b0e <_lv_obj_get_style_int>
 800508e:	4603      	mov	r3, r0
 8005090:	4618      	mov	r0, r3
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <lv_obj_get_style_scale_end_border_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	460b      	mov	r3, r1
 80050a2:	70fb      	strb	r3, [r7, #3]
 80050a4:	78fb      	ldrb	r3, [r7, #3]
 80050a6:	22c2      	movs	r2, #194	; 0xc2
 80050a8:	4619      	mov	r1, r3
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f001 fd2f 	bl	8006b0e <_lv_obj_get_style_int>
 80050b0:	4603      	mov	r3, r0
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <lv_obj_get_style_scale_end_line_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b082      	sub	sp, #8
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
 80050c2:	460b      	mov	r3, r1
 80050c4:	70fb      	strb	r3, [r7, #3]
 80050c6:	78fb      	ldrb	r3, [r7, #3]
 80050c8:	22c3      	movs	r2, #195	; 0xc3
 80050ca:	4619      	mov	r1, r3
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f001 fd1e 	bl	8006b0e <_lv_obj_get_style_int>
 80050d2:	4603      	mov	r3, r0
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <lv_obj_get_style_scale_grad_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	460b      	mov	r3, r1
 80050e6:	70fb      	strb	r3, [r7, #3]
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	22c9      	movs	r2, #201	; 0xc9
 80050ec:	4619      	mov	r1, r3
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f001 fe96 	bl	8006e20 <_lv_obj_get_style_color>
 80050f4:	4603      	mov	r3, r0
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <lv_obj_get_style_scale_end_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
 80050fe:	b580      	push	{r7, lr}
 8005100:	b082      	sub	sp, #8
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	460b      	mov	r3, r1
 8005108:	70fb      	strb	r3, [r7, #3]
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	22ca      	movs	r2, #202	; 0xca
 800510e:	4619      	mov	r1, r3
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f001 fe85 	bl	8006e20 <_lv_obj_get_style_color>
 8005116:	4603      	mov	r3, r0
 8005118:	4618      	mov	r0, r3
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <lv_init>:

/**
 * Init. the 'lv' library.
 */
void lv_init(void)
{
 8005120:	b590      	push	{r4, r7, lr}
 8005122:	b089      	sub	sp, #36	; 0x24
 8005124:	af04      	add	r7, sp, #16
    /* Do nothing if already initialized */
    if(lv_initialized) {
 8005126:	4b27      	ldr	r3, [pc, #156]	; (80051c4 <lv_init+0xa4>)
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d146      	bne.n	80051bc <lv_init+0x9c>
    }

    LV_LOG_TRACE("lv_init started");

    /*Initialize the lv_misc modules*/
    _lv_mem_init();
 800512e:	f017 fa71 	bl	801c614 <_lv_mem_init>
    _lv_task_core_init();
 8005132:	f018 f99f 	bl	801d474 <_lv_task_core_init>

#if LV_USE_FILESYSTEM
    _lv_fs_init();
 8005136:	f016 fda1 	bl	801bc7c <_lv_fs_init>
#endif

#if LV_USE_ANIMATION
    _lv_anim_core_init();
 800513a:	f015 fb97 	bl	801a86c <_lv_anim_core_init>
#endif

#if LV_USE_GROUP
    _lv_group_init();
 800513e:	f7fc fb7d 	bl	800183c <_lv_group_init>
        LV_LOG_ERROR("PXP init error. STOP.\n");
        for(; ;) ;
    }
#endif

    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
 8005142:	2110      	movs	r1, #16
 8005144:	4820      	ldr	r0, [pc, #128]	; (80051c8 <lv_init+0xa8>)
 8005146:	f016 ff39 	bl	801bfbc <_lv_ll_init>

    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 800514a:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800514e:	481f      	ldr	r0, [pc, #124]	; (80051cc <lv_init+0xac>)
 8005150:	f016 ff34 	bl	801bfbc <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8005154:	2160      	movs	r1, #96	; 0x60
 8005156:	481e      	ldr	r0, [pc, #120]	; (80051d0 <lv_init+0xb0>)
 8005158:	f016 ff30 	bl	801bfbc <_lv_ll_init>

    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
 800515c:	481d      	ldr	r0, [pc, #116]	; (80051d4 <lv_init+0xb4>)
 800515e:	f7ff f8bb 	bl	80042d8 <lv_color_hex>
 8005162:	4604      	mov	r4, r0
 8005164:	481c      	ldr	r0, [pc, #112]	; (80051d8 <lv_init+0xb8>)
 8005166:	f7ff f8b7 	bl	80042d8 <lv_color_hex>
 800516a:	4601      	mov	r1, r0
 800516c:	4b1b      	ldr	r3, [pc, #108]	; (80051dc <lv_init+0xbc>)
 800516e:	9302      	str	r3, [sp, #8]
 8005170:	4b1a      	ldr	r3, [pc, #104]	; (80051dc <lv_init+0xbc>)
 8005172:	9301      	str	r3, [sp, #4]
 8005174:	4b19      	ldr	r3, [pc, #100]	; (80051dc <lv_init+0xbc>)
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	4b18      	ldr	r3, [pc, #96]	; (80051dc <lv_init+0xbc>)
 800517a:	2202      	movs	r2, #2
 800517c:	4620      	mov	r0, r4
 800517e:	f01f fbf7 	bl	8024970 <lv_theme_material_init>
 8005182:	60f8      	str	r0, [r7, #12]
                                            LV_THEME_DEFAULT_FLAG,
                                            LV_THEME_DEFAULT_FONT_SMALL, LV_THEME_DEFAULT_FONT_NORMAL, LV_THEME_DEFAULT_FONT_SUBTITLE, LV_THEME_DEFAULT_FONT_TITLE);
    lv_theme_set_act(th);
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f019 f8e3 	bl	801e350 <lv_theme_set_act>

    /*Initialize the screen refresh system*/
    _lv_refr_init();
 800518a:	f005 f80e 	bl	800a1aa <_lv_refr_init>

    /*Init the input device handling*/
    _lv_indev_init();
 800518e:	f7fc fe4b 	bl	8001e28 <_lv_indev_init>

    _lv_img_decoder_init();
 8005192:	f013 f8c5 	bl	8018320 <_lv_img_decoder_init>
#if LV_IMG_CACHE_DEF_SIZE
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 8005196:	2001      	movs	r0, #1
 8005198:	f012 ffc4 	bl	8018124 <lv_img_cache_set_size>
#endif
    /*Test if the IDE has UTF-8 encoding*/
    char * txt = "Á";
 800519c:	4b10      	ldr	r3, [pc, #64]	; (80051e0 <lv_init+0xc0>)
 800519e:	60bb      	str	r3, [r7, #8]

    uint8_t * txt_u8 = (uint8_t *) txt;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	607b      	str	r3, [r7, #4]
    if(txt_u8[0] != 0xc3 || txt_u8[1] != 0x81 || txt_u8[2] != 0x00) {
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	2bc3      	cmp	r3, #195	; 0xc3
 80051aa:	d103      	bne.n	80051b4 <lv_init+0x94>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3301      	adds	r3, #1
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	2b81      	cmp	r3, #129	; 0x81
        LV_LOG_WARN("The strings has no UTF-8 encoding. Some characters won't be displayed.")
    }

    lv_initialized = true;
 80051b4:	4b03      	ldr	r3, [pc, #12]	; (80051c4 <lv_init+0xa4>)
 80051b6:	2201      	movs	r2, #1
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	e000      	b.n	80051be <lv_init+0x9e>
        return;
 80051bc:	bf00      	nop
    LV_LOG_INFO("lv_init ready");
}
 80051be:	3714      	adds	r7, #20
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd90      	pop	{r4, r7, pc}
 80051c4:	20018b68 	.word	0x20018b68
 80051c8:	20021840 	.word	0x20021840
 80051cc:	2002179c 	.word	0x2002179c
 80051d0:	20021790 	.word	0x20021790
 80051d4:	0001a2b1 	.word	0x0001a2b1
 80051d8:	0044d1b6 	.word	0x0044d1b6
 80051dc:	200013e8 	.word	0x200013e8
 80051e0:	0802d7a8 	.word	0x0802d7a8

080051e4 <lv_obj_create>:
 *                  If NULL then a screen will be created
 * @param copy pointer to a base object, if not NULL then the new object will be copied from it
 * @return pointer to the new object
 */
lv_obj_t * lv_obj_create(lv_obj_t * parent, const lv_obj_t * copy)
{
 80051e4:	b590      	push	{r4, r7, lr}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
    lv_obj_t * new_obj = NULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]

    /*Create a screen*/
    if(parent == NULL) {
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d153      	bne.n	80052a0 <lv_obj_create+0xbc>
        LV_LOG_TRACE("Screen create started");
        lv_disp_t * disp = lv_disp_get_default();
 80051f8:	f015 f8ba 	bl	801a370 <lv_disp_get_default>
 80051fc:	60b8      	str	r0, [r7, #8]
        if(!disp) {
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <lv_obj_create+0x24>
            LV_LOG_WARN("lv_obj_create: not display created to so far. No place to assign the new screen");
            return NULL;
 8005204:	2300      	movs	r3, #0
 8005206:	e2e3      	b.n	80057d0 <lv_obj_create+0x5ec>
        }

        new_obj = _lv_ll_ins_head(&disp->scr_ll);
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	3338      	adds	r3, #56	; 0x38
 800520c:	4618      	mov	r0, r3
 800520e:	f016 feee 	bl	801bfee <_lv_ll_ins_head>
 8005212:	60f8      	str	r0, [r7, #12]
        LV_ASSERT_MEM(new_obj);
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f016 fc91 	bl	801bb3c <lv_debug_check_null>
 800521a:	4603      	mov	r3, r0
 800521c:	f083 0301 	eor.w	r3, r3, #1
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d008      	beq.n	8005238 <lv_obj_create+0x54>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f04f 0400 	mov.w	r4, #0
 800522c:	461a      	mov	r2, r3
 800522e:	4623      	mov	r3, r4
 8005230:	4881      	ldr	r0, [pc, #516]	; (8005438 <lv_obj_create+0x254>)
 8005232:	f016 fc93 	bl	801bb5c <lv_debug_log_error>
 8005236:	e7fe      	b.n	8005236 <lv_obj_create+0x52>
        if(new_obj == NULL) return NULL;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <lv_obj_create+0x5e>
 800523e:	2300      	movs	r3, #0
 8005240:	e2c6      	b.n	80057d0 <lv_obj_create+0x5ec>

        _lv_memset_00(new_obj, sizeof(lv_obj_t));
 8005242:	214c      	movs	r1, #76	; 0x4c
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f017 ff70 	bl	801d12a <_lv_memset_00>

#if LV_USE_BIDI
        new_obj->base_dir     = LV_BIDI_BASE_DIR_DEF;
#else
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8005250:	f36f 1346 	bfc	r3, #5, #2
 8005254:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
#endif

        /*Set the callbacks*/
        new_obj->signal_cb = lv_obj_signal;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4a78      	ldr	r2, [pc, #480]	; (800543c <lv_obj_create+0x258>)
 800525c:	61da      	str	r2, [r3, #28]
        new_obj->design_cb = lv_obj_design;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	4a77      	ldr	r2, [pc, #476]	; (8005440 <lv_obj_create+0x25c>)
 8005262:	621a      	str	r2, [r3, #32]
        new_obj->event_cb = NULL;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	619a      	str	r2, [r3, #24]

        /*Set coordinates to full screen size*/
        new_obj->coords.x1    = 0;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	821a      	strh	r2, [r3, #16]
        new_obj->coords.y1    = 0;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	825a      	strh	r2, [r3, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 8005276:	2000      	movs	r0, #0
 8005278:	f015 f886 	bl	801a388 <lv_disp_get_hor_res>
 800527c:	4603      	mov	r3, r0
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b29b      	uxth	r3, r3
 8005284:	b21a      	sxth	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	829a      	strh	r2, [r3, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 800528a:	2000      	movs	r0, #0
 800528c:	f015 f89e 	bl	801a3cc <lv_disp_get_ver_res>
 8005290:	4603      	mov	r3, r0
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b29b      	uxth	r3, r3
 8005298:	b21a      	sxth	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	82da      	strh	r2, [r3, #22]
 800529e:	e0db      	b.n	8005458 <lv_obj_create+0x274>
    }
    /*Create a normal object*/
    else {
        LV_LOG_TRACE("Object create started");
        LV_ASSERT_OBJ(parent, LV_OBJX_NAME);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f016 fc4b 	bl	801bb3c <lv_debug_check_null>
 80052a6:	4603      	mov	r3, r0
 80052a8:	f083 0301 	eor.w	r3, r3, #1
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d008      	beq.n	80052c4 <lv_obj_create+0xe0>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f04f 0400 	mov.w	r4, #0
 80052b8:	461a      	mov	r2, r3
 80052ba:	4623      	mov	r3, r4
 80052bc:	4861      	ldr	r0, [pc, #388]	; (8005444 <lv_obj_create+0x260>)
 80052be:	f016 fc4d 	bl	801bb5c <lv_debug_log_error>
 80052c2:	e7fe      	b.n	80052c2 <lv_obj_create+0xde>

        new_obj = _lv_ll_ins_head(&parent->child_ll);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	3304      	adds	r3, #4
 80052c8:	4618      	mov	r0, r3
 80052ca:	f016 fe90 	bl	801bfee <_lv_ll_ins_head>
 80052ce:	60f8      	str	r0, [r7, #12]
        LV_ASSERT_MEM(new_obj);
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f016 fc33 	bl	801bb3c <lv_debug_check_null>
 80052d6:	4603      	mov	r3, r0
 80052d8:	f083 0301 	eor.w	r3, r3, #1
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d008      	beq.n	80052f4 <lv_obj_create+0x110>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f04f 0400 	mov.w	r4, #0
 80052e8:	461a      	mov	r2, r3
 80052ea:	4623      	mov	r3, r4
 80052ec:	4852      	ldr	r0, [pc, #328]	; (8005438 <lv_obj_create+0x254>)
 80052ee:	f016 fc35 	bl	801bb5c <lv_debug_log_error>
 80052f2:	e7fe      	b.n	80052f2 <lv_obj_create+0x10e>
        if(new_obj == NULL) return NULL;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <lv_obj_create+0x11a>
 80052fa:	2300      	movs	r3, #0
 80052fc:	e268      	b.n	80057d0 <lv_obj_create+0x5ec>

        _lv_memset_00(new_obj, sizeof(lv_obj_t));
 80052fe:	214c      	movs	r1, #76	; 0x4c
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f017 ff12 	bl	801d12a <_lv_memset_00>

        new_obj->parent = parent;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	601a      	str	r2, [r3, #0]

#if LV_USE_BIDI
        new_obj->base_dir     = LV_BIDI_DIR_INHERIT;
#else
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8005312:	f36f 1346 	bfc	r3, #5, #2
 8005316:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
#endif

        /*Set the callbacks (signal:cb is required in `lv_obj_get_base_dir` if `LV_USE_ASSERT_OBJ` is enabled)*/
        new_obj->signal_cb = lv_obj_signal;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4a47      	ldr	r2, [pc, #284]	; (800543c <lv_obj_create+0x258>)
 800531e:	61da      	str	r2, [r3, #28]
        new_obj->design_cb = lv_obj_design;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4a47      	ldr	r2, [pc, #284]	; (8005440 <lv_obj_create+0x25c>)
 8005324:	621a      	str	r2, [r3, #32]
        new_obj->event_cb = NULL;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	619a      	str	r2, [r3, #24]

        new_obj->coords.y1    = parent->coords.y1;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	825a      	strh	r2, [r3, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800533c:	b29c      	uxth	r4, r3
 800533e:	2000      	movs	r0, #0
 8005340:	f015 f866 	bl	801a410 <lv_disp_get_dpi>
 8005344:	4603      	mov	r3, r0
 8005346:	461a      	mov	r2, r3
 8005348:	2332      	movs	r3, #50	; 0x32
 800534a:	fb03 f302 	mul.w	r3, r3, r2
 800534e:	3350      	adds	r3, #80	; 0x50
 8005350:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005354:	db10      	blt.n	8005378 <lv_obj_create+0x194>
 8005356:	2000      	movs	r0, #0
 8005358:	f015 f85a 	bl	801a410 <lv_disp_get_dpi>
 800535c:	4603      	mov	r3, r0
 800535e:	461a      	mov	r2, r3
 8005360:	2332      	movs	r3, #50	; 0x32
 8005362:	fb03 f302 	mul.w	r3, r3, r2
 8005366:	3350      	adds	r3, #80	; 0x50
 8005368:	4a37      	ldr	r2, [pc, #220]	; (8005448 <lv_obj_create+0x264>)
 800536a:	fb82 1203 	smull	r1, r2, r2, r3
 800536e:	1192      	asrs	r2, r2, #6
 8005370:	17db      	asrs	r3, r3, #31
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	b29b      	uxth	r3, r3
 8005376:	e000      	b.n	800537a <lv_obj_create+0x196>
 8005378:	2301      	movs	r3, #1
 800537a:	4423      	add	r3, r4
 800537c:	b29b      	uxth	r3, r3
 800537e:	b21a      	sxth	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	82da      	strh	r2, [r3, #22]
        if(lv_obj_get_base_dir(new_obj) == LV_BIDI_DIR_RTL) {
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f002 f82d 	bl	80073e4 <lv_obj_get_base_dir>
 800538a:	4603      	mov	r3, r0
 800538c:	2b01      	cmp	r3, #1
 800538e:	d12c      	bne.n	80053ea <lv_obj_create+0x206>
            new_obj->coords.x2    = parent->coords.x2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	829a      	strh	r2, [r3, #20]
            new_obj->coords.x1    = parent->coords.x2 - LV_OBJ_DEF_WIDTH;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80053a0:	b29c      	uxth	r4, r3
 80053a2:	2000      	movs	r0, #0
 80053a4:	f015 f834 	bl	801a410 <lv_disp_get_dpi>
 80053a8:	4603      	mov	r3, r0
 80053aa:	461a      	mov	r2, r3
 80053ac:	2364      	movs	r3, #100	; 0x64
 80053ae:	fb03 f302 	mul.w	r3, r3, r2
 80053b2:	3350      	adds	r3, #80	; 0x50
 80053b4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80053b8:	db10      	blt.n	80053dc <lv_obj_create+0x1f8>
 80053ba:	2000      	movs	r0, #0
 80053bc:	f015 f828 	bl	801a410 <lv_disp_get_dpi>
 80053c0:	4603      	mov	r3, r0
 80053c2:	461a      	mov	r2, r3
 80053c4:	2364      	movs	r3, #100	; 0x64
 80053c6:	fb03 f302 	mul.w	r3, r3, r2
 80053ca:	3350      	adds	r3, #80	; 0x50
 80053cc:	4a1e      	ldr	r2, [pc, #120]	; (8005448 <lv_obj_create+0x264>)
 80053ce:	fb82 1203 	smull	r1, r2, r2, r3
 80053d2:	1192      	asrs	r2, r2, #6
 80053d4:	17db      	asrs	r3, r3, #31
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	b29b      	uxth	r3, r3
 80053da:	e000      	b.n	80053de <lv_obj_create+0x1fa>
 80053dc:	2301      	movs	r3, #1
 80053de:	1ae3      	subs	r3, r4, r3
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	b21a      	sxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	821a      	strh	r2, [r3, #16]
 80053e8:	e036      	b.n	8005458 <lv_obj_create+0x274>
        }
        else {
            new_obj->coords.x1    = parent->coords.x1;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	821a      	strh	r2, [r3, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80053fa:	b29c      	uxth	r4, r3
 80053fc:	2000      	movs	r0, #0
 80053fe:	f015 f807 	bl	801a410 <lv_disp_get_dpi>
 8005402:	4603      	mov	r3, r0
 8005404:	461a      	mov	r2, r3
 8005406:	2364      	movs	r3, #100	; 0x64
 8005408:	fb03 f302 	mul.w	r3, r3, r2
 800540c:	3350      	adds	r3, #80	; 0x50
 800540e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005412:	db1b      	blt.n	800544c <lv_obj_create+0x268>
 8005414:	2000      	movs	r0, #0
 8005416:	f014 fffb 	bl	801a410 <lv_disp_get_dpi>
 800541a:	4603      	mov	r3, r0
 800541c:	461a      	mov	r2, r3
 800541e:	2364      	movs	r3, #100	; 0x64
 8005420:	fb03 f302 	mul.w	r3, r3, r2
 8005424:	3350      	adds	r3, #80	; 0x50
 8005426:	4a08      	ldr	r2, [pc, #32]	; (8005448 <lv_obj_create+0x264>)
 8005428:	fb82 1203 	smull	r1, r2, r2, r3
 800542c:	1192      	asrs	r2, r2, #6
 800542e:	17db      	asrs	r3, r3, #31
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	b29b      	uxth	r3, r3
 8005434:	e00b      	b.n	800544e <lv_obj_create+0x26a>
 8005436:	bf00      	nop
 8005438:	0802d7ac 	.word	0x0802d7ac
 800543c:	0800854d 	.word	0x0800854d
 8005440:	0800815d 	.word	0x0800815d
 8005444:	0802d7bc 	.word	0x0802d7bc
 8005448:	66666667 	.word	0x66666667
 800544c:	2301      	movs	r3, #1
 800544e:	4423      	add	r3, r4
 8005450:	b29b      	uxth	r3, r3
 8005452:	b21a      	sxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	829a      	strh	r2, [r3, #20]
        }
    }

    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	3304      	adds	r3, #4
 800545c:	214c      	movs	r1, #76	; 0x4c
 800545e:	4618      	mov	r0, r3
 8005460:	f016 fdac 	bl	801bfbc <_lv_ll_init>

    new_obj->ext_draw_pad = 0;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	865a      	strh	r2, [r3, #50]	; 0x32

#if LV_USE_EXT_CLICK_AREA == LV_EXT_CLICK_AREA_FULL
    _lv_memset_00(&new_obj->ext_click_pad, sizeof(new_obj->ext_click_pad));
#elif LV_USE_EXT_CLICK_AREA == LV_EXT_CLICK_AREA_TINY
    new_obj->ext_click_pad_hor = 0;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    new_obj->ext_click_pad_ver = 0;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#endif

    /*Init realign*/
#if LV_USE_OBJ_REALIGN
    new_obj->realign.align        = LV_ALIGN_CENTER;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    new_obj->realign.xofs         = 0;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    new_obj->realign.yofs         = 0;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    new_obj->realign.base         = NULL;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	641a      	str	r2, [r3, #64]	; 0x40
    new_obj->realign.auto_realign = 0;
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	f892 3049 	ldrb.w	r3, [r2, #73]	; 0x49
 800549e:	f36f 0300 	bfc	r3, #0, #1
 80054a2:	f882 3049 	strb.w	r3, [r2, #73]	; 0x49
#if LV_USE_USER_DATA
    _lv_memset_00(&new_obj->user_data, sizeof(lv_obj_user_data_t));
#endif

#if LV_USE_GROUP
    new_obj->group_p = NULL;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	639a      	str	r2, [r3, #56]	; 0x38
#endif

    /*Set attributes*/
    new_obj->adv_hittest  = 0;
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80054b2:	f36f 13c7 	bfc	r3, #7, #1
 80054b6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    new_obj->click        = 1;
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80054c0:	f043 0301 	orr.w	r3, r3, #1
 80054c4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    new_obj->drag         = 0;
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80054ce:	f36f 0341 	bfc	r3, #1, #1
 80054d2:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    new_obj->drag_throw   = 0;
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80054dc:	f36f 0382 	bfc	r3, #2, #1
 80054e0:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    new_obj->drag_parent  = 0;
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80054ea:	f36f 03c3 	bfc	r3, #3, #1
 80054ee:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80054f8:	2103      	movs	r1, #3
 80054fa:	f361 0384 	bfi	r3, r1, #2, #3
 80054fe:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
    new_obj->hidden       = 0;
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8005508:	f36f 1304 	bfc	r3, #4, #1
 800550c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    new_obj->top          = 0;
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8005516:	f36f 1345 	bfc	r3, #5, #1
 800551a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    new_obj->protect      = LV_PROTECT_NONE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    new_obj->parent_event = 0;
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 800552c:	f36f 1386 	bfc	r3, #6, #1
 8005530:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    new_obj->gesture_parent = parent ? 1 : 0;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	bf14      	ite	ne
 800553a:	2301      	movne	r3, #1
 800553c:	2300      	moveq	r3, #0
 800553e:	b2d9      	uxtb	r1, r3
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8005546:	f361 0300 	bfi	r3, r1, #0, #1
 800554a:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
    new_obj->focus_parent  = 0;
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8005554:	f36f 0341 	bfc	r3, #1, #1
 8005558:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
    new_obj->state = LV_STATE_DEFAULT;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    new_obj->ext_attr = NULL;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	625a      	str	r2, [r3, #36]	; 0x24

    lv_style_list_init(&new_obj->style_list);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3328      	adds	r3, #40	; 0x28
 800556e:	4618      	mov	r0, r3
 8005570:	f005 fe1f 	bl	800b1b2 <lv_style_list_init>
    if(copy == NULL) {
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10c      	bne.n	8005594 <lv_obj_create+0x3b0>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d004      	beq.n	800558a <lv_obj_create+0x3a6>
 8005580:	2102      	movs	r1, #2
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f018 fef4 	bl	801e370 <lv_theme_apply>
 8005588:	e00d      	b.n	80055a6 <lv_obj_create+0x3c2>
        else lv_theme_apply(new_obj, LV_THEME_SCR);
 800558a:	2101      	movs	r1, #1
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f018 feef 	bl	801e370 <lv_theme_apply>
 8005592:	e008      	b.n	80055a6 <lv_obj_create+0x3c2>
    }
    else {
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	3328      	adds	r3, #40	; 0x28
 800559e:	4619      	mov	r1, r3
 80055a0:	4610      	mov	r0, r2
 80055a2:	f005 fe12 	bl	800b1ca <lv_style_list_copy>
    }
    /*Copy the attributes if required*/
    if(copy != NULL) {
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 8104 	beq.w	80057b6 <lv_obj_create+0x5d2>
        lv_area_copy(&new_obj->coords, &copy->coords);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f103 0210 	add.w	r2, r3, #16
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	3310      	adds	r3, #16
 80055b8:	4619      	mov	r1, r3
 80055ba:	4610      	mov	r0, r2
 80055bc:	f7fe fde2 	bl	8004184 <lv_area_copy>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	; 0x32
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	865a      	strh	r2, [r3, #50]	; 0x32

#if LV_USE_EXT_CLICK_AREA == LV_EXT_CLICK_AREA_FULL
        lv_area_copy(&new_obj->ext_click_pad, &copy->ext_click_pad);
#elif LV_USE_EXT_CLICK_AREA == LV_EXT_CLICK_AREA_TINY
        new_obj->ext_click_pad_hor = copy->ext_click_pad_hor;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        /*Set user data*/
#if LV_USE_USER_DATA
        _lv_memcpy(&new_obj->user_data, &copy->user_data, sizeof(lv_obj_user_data_t));
#endif

        new_obj->base_dir = copy->base_dir;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055e8:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80055ec:	b2d9      	uxtb	r1, r3
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80055f4:	f361 1346 	bfi	r3, r1, #5, #2
 80055f8:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35

        /*Copy realign*/
#if LV_USE_OBJ_REALIGN
        new_obj->realign.align        = copy->realign.align;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        new_obj->realign.xofs         = copy->realign.xofs;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        new_obj->realign.yofs         = copy->realign.yofs;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        new_obj->realign.base         = copy->realign.base;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	641a      	str	r2, [r3, #64]	; 0x40
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800562e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005632:	b2d9      	uxtb	r1, r3
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	f892 3049 	ldrb.w	r3, [r2, #73]	; 0x49
 800563a:	f361 0300 	bfi	r3, r1, #0, #1
 800563e:	f882 3049 	strb.w	r3, [r2, #73]	; 0x49
#endif

        /*Only copy the `event_cb`. `signal_cb` and `design_cb` will be copied in the derived
         * object type (e.g. `lv_btn`)*/
        new_obj->event_cb = copy->event_cb;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	699a      	ldr	r2, [r3, #24]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	619a      	str	r2, [r3, #24]

        /*Copy attributes*/
        new_obj->adv_hittest  = copy->adv_hittest;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005650:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005654:	b2d9      	uxtb	r1, r3
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 800565c:	f361 13c7 	bfi	r3, r1, #7, #1
 8005660:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        new_obj->click        = copy->click;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800566a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800566e:	b2d9      	uxtb	r1, r3
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8005676:	f361 0300 	bfi	r3, r1, #0, #1
 800567a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        new_obj->drag         = copy->drag;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005684:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005688:	b2d9      	uxtb	r1, r3
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8005690:	f361 0341 	bfi	r3, r1, #1, #1
 8005694:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        new_obj->drag_dir     = copy->drag_dir;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800569e:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80056a2:	b2d9      	uxtb	r1, r3
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80056aa:	f361 0384 	bfi	r3, r1, #2, #3
 80056ae:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
        new_obj->drag_throw   = copy->drag_throw;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80056bc:	b2d9      	uxtb	r1, r3
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80056c4:	f361 0382 	bfi	r3, r1, #2, #1
 80056c8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        new_obj->drag_parent  = copy->drag_parent;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056d2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80056d6:	b2d9      	uxtb	r1, r3
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80056de:	f361 03c3 	bfi	r3, r1, #3, #1
 80056e2:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        new_obj->hidden       = copy->hidden;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056ec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80056f0:	b2d9      	uxtb	r1, r3
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 80056f8:	f361 1304 	bfi	r3, r1, #4, #1
 80056fc:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        new_obj->top          = copy->top;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005706:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800570a:	b2d9      	uxtb	r1, r3
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8005712:	f361 1345 	bfi	r3, r1, #5, #1
 8005716:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        new_obj->parent_event = copy->parent_event;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005720:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005724:	b2d9      	uxtb	r1, r3
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 800572c:	f361 1386 	bfi	r3, r1, #6, #1
 8005730:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34

        new_obj->protect      = copy->protect;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        new_obj->gesture_parent = copy->gesture_parent;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005746:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800574a:	b2d9      	uxtb	r1, r3
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8005752:	f361 0300 	bfi	r3, r1, #0, #1
 8005756:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
        new_obj->focus_parent = copy->focus_parent;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005760:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005764:	b2d9      	uxtb	r1, r3
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 800576c:	f361 0341 	bfi	r3, r1, #1, #1
 8005770:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35

#if LV_USE_GROUP
        /*Add to the same group*/
        if(copy->group_p != NULL) {
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005778:	2b00      	cmp	r3, #0
 800577a:	d005      	beq.n	8005788 <lv_obj_create+0x5a4>
            lv_group_add_obj(copy->group_p, new_obj);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005780:	68f9      	ldr	r1, [r7, #12]
 8005782:	4618      	mov	r0, r3
 8005784:	f7fc f864 	bl	8001850 <lv_group_add_obj>
        }
#endif

        /*Set the same coordinates for non screen objects*/
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
 8005788:	6838      	ldr	r0, [r7, #0]
 800578a:	f001 f87d 	bl	8006888 <lv_obj_get_parent>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d010      	beq.n	80057b6 <lv_obj_create+0x5d2>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00d      	beq.n	80057b6 <lv_obj_create+0x5d2>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 800579a:	6838      	ldr	r0, [r7, #0]
 800579c:	f001 f8e8 	bl	8006970 <lv_obj_get_x>
 80057a0:	4603      	mov	r3, r0
 80057a2:	461c      	mov	r4, r3
 80057a4:	6838      	ldr	r0, [r7, #0]
 80057a6:	f001 f917 	bl	80069d8 <lv_obj_get_y>
 80057aa:	4603      	mov	r3, r0
 80057ac:	461a      	mov	r2, r3
 80057ae:	4621      	mov	r1, r4
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 f96d 	bl	8005a90 <lv_obj_set_pos>
        }
    }

    /*Send a signal to the parent to notify it about the new child*/
    if(parent != NULL) {
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d008      	beq.n	80057ce <lv_obj_create+0x5ea>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	2101      	movs	r1, #1
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	4798      	blx	r3

        /*Invalidate the area if not screen created*/
        lv_obj_invalidate(new_obj);
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 f83d 	bl	8005848 <lv_obj_invalidate>
    }

    LV_LOG_INFO("Object create ready");

    return new_obj;
 80057ce:	68fb      	ldr	r3, [r7, #12]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd90      	pop	{r4, r7, pc}

080057d8 <lv_obj_invalidate_area>:
 * This area will be redrawn by 'lv_refr_task'
 * @param obj pointer to an object
 * @param area the area to redraw
 */
void lv_obj_invalidate_area(const lv_obj_t * obj, const lv_area_t * area)
{
 80057d8:	b590      	push	{r4, r7, lr}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f016 f9aa 	bl	801bb3c <lv_debug_check_null>
 80057e8:	4603      	mov	r3, r0
 80057ea:	f083 0301 	eor.w	r3, r3, #1
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d008      	beq.n	8005806 <lv_obj_invalidate_area+0x2e>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f04f 0400 	mov.w	r4, #0
 80057fa:	461a      	mov	r2, r3
 80057fc:	4623      	mov	r3, r4
 80057fe:	4811      	ldr	r0, [pc, #68]	; (8005844 <lv_obj_invalidate_area+0x6c>)
 8005800:	f016 f9ac 	bl	801bb5c <lv_debug_log_error>
 8005804:	e7fe      	b.n	8005804 <lv_obj_invalidate_area+0x2c>

    lv_area_t area_tmp;
    lv_area_copy(&area_tmp, area);
 8005806:	f107 030c 	add.w	r3, r7, #12
 800580a:	6839      	ldr	r1, [r7, #0]
 800580c:	4618      	mov	r0, r3
 800580e:	f7fe fcb9 	bl	8004184 <lv_area_copy>
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
 8005812:	f107 030c 	add.w	r3, r7, #12
 8005816:	4619      	mov	r1, r3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f863 	bl	80058e4 <lv_obj_area_is_visible>
 800581e:	4603      	mov	r3, r0
 8005820:	75fb      	strb	r3, [r7, #23]

    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
 8005822:	7dfb      	ldrb	r3, [r7, #23]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d009      	beq.n	800583c <lv_obj_invalidate_area+0x64>
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 ffdf 	bl	80067ec <lv_obj_get_disp>
 800582e:	4602      	mov	r2, r0
 8005830:	f107 030c 	add.w	r3, r7, #12
 8005834:	4619      	mov	r1, r3
 8005836:	4610      	mov	r0, r2
 8005838:	f004 fcbe 	bl	800a1b8 <_lv_inv_area>
}
 800583c:	bf00      	nop
 800583e:	371c      	adds	r7, #28
 8005840:	46bd      	mov	sp, r7
 8005842:	bd90      	pop	{r4, r7, pc}
 8005844:	0802d7bc 	.word	0x0802d7bc

08005848 <lv_obj_invalidate>:
/**
 * Mark the object as invalid therefore its current position will be redrawn by 'lv_refr_task'
 * @param obj pointer to an object
 */
void lv_obj_invalidate(const lv_obj_t * obj)
{
 8005848:	b590      	push	{r4, r7, lr}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f016 f973 	bl	801bb3c <lv_debug_check_null>
 8005856:	4603      	mov	r3, r0
 8005858:	f083 0301 	eor.w	r3, r3, #1
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d008      	beq.n	8005874 <lv_obj_invalidate+0x2c>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f04f 0400 	mov.w	r4, #0
 8005868:	461a      	mov	r2, r3
 800586a:	4623      	mov	r3, r4
 800586c:	481c      	ldr	r0, [pc, #112]	; (80058e0 <lv_obj_invalidate+0x98>)
 800586e:	f016 f975 	bl	801bb5c <lv_debug_log_error>
 8005872:	e7fe      	b.n	8005872 <lv_obj_invalidate+0x2a>

    /*Truncate the area to the object*/
    lv_area_t obj_coords;
    lv_coord_t ext_size = obj->ext_draw_pad;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005878:	82fb      	strh	r3, [r7, #22]
    lv_area_copy(&obj_coords, &obj->coords);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f103 0210 	add.w	r2, r3, #16
 8005880:	f107 030c 	add.w	r3, r7, #12
 8005884:	4611      	mov	r1, r2
 8005886:	4618      	mov	r0, r3
 8005888:	f7fe fc7c 	bl	8004184 <lv_area_copy>
    obj_coords.x1 -= ext_size;
 800588c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005890:	b29a      	uxth	r2, r3
 8005892:	8afb      	ldrh	r3, [r7, #22]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	b29b      	uxth	r3, r3
 8005898:	b21b      	sxth	r3, r3
 800589a:	81bb      	strh	r3, [r7, #12]
    obj_coords.y1 -= ext_size;
 800589c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	8afb      	ldrh	r3, [r7, #22]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	b21b      	sxth	r3, r3
 80058aa:	81fb      	strh	r3, [r7, #14]
    obj_coords.x2 += ext_size;
 80058ac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	8afb      	ldrh	r3, [r7, #22]
 80058b4:	4413      	add	r3, r2
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	b21b      	sxth	r3, r3
 80058ba:	823b      	strh	r3, [r7, #16]
    obj_coords.y2 += ext_size;
 80058bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	8afb      	ldrh	r3, [r7, #22]
 80058c4:	4413      	add	r3, r2
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	b21b      	sxth	r3, r3
 80058ca:	827b      	strh	r3, [r7, #18]

    lv_obj_invalidate_area(obj, &obj_coords);
 80058cc:	f107 030c 	add.w	r3, r7, #12
 80058d0:	4619      	mov	r1, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7ff ff80 	bl	80057d8 <lv_obj_invalidate_area>

}
 80058d8:	bf00      	nop
 80058da:	371c      	adds	r7, #28
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd90      	pop	{r4, r7, pc}
 80058e0:	0802d7bc 	.word	0x0802d7bc

080058e4 <lv_obj_area_is_visible>:
 * @param obj pointer to an object
 * @param area the are to check. The visible part of the area will be written back here.
 * @return true: visible; false: not visible (hidden, out of parent, on other screen, etc)
 */
bool lv_obj_area_is_visible(const lv_obj_t * obj, lv_area_t * area)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b088      	sub	sp, #32
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
    if(lv_obj_get_hidden(obj)) return false;
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f001 fc76 	bl	80071e0 <lv_obj_get_hidden>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <lv_obj_area_is_visible+0x1a>
 80058fa:	2300      	movs	r3, #0
 80058fc:	e086      	b.n	8005a0c <lv_obj_area_is_visible+0x128>

    /*Invalidate the object only if it belongs to the current or previous'*/
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 ff4c 	bl	800679c <lv_obj_get_screen>
 8005904:	61b8      	str	r0, [r7, #24]
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 8005906:	69b8      	ldr	r0, [r7, #24]
 8005908:	f000 ff70 	bl	80067ec <lv_obj_get_disp>
 800590c:	6178      	str	r0, [r7, #20]
    if(obj_scr == lv_disp_get_scr_act(disp) ||
 800590e:	6978      	ldr	r0, [r7, #20]
 8005910:	f7fb ff3f 	bl	8001792 <lv_disp_get_scr_act>
 8005914:	4602      	mov	r2, r0
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	4293      	cmp	r3, r2
 800591a:	d014      	beq.n	8005946 <lv_obj_area_is_visible+0x62>
       obj_scr == lv_disp_get_scr_prev(disp) ||
 800591c:	6978      	ldr	r0, [r7, #20]
 800591e:	f7fb ff4d 	bl	80017bc <lv_disp_get_scr_prev>
 8005922:	4602      	mov	r2, r0
    if(obj_scr == lv_disp_get_scr_act(disp) ||
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	4293      	cmp	r3, r2
 8005928:	d00d      	beq.n	8005946 <lv_obj_area_is_visible+0x62>
       obj_scr == lv_disp_get_layer_top(disp) ||
 800592a:	6978      	ldr	r0, [r7, #20]
 800592c:	f7fb ff5b 	bl	80017e6 <lv_disp_get_layer_top>
 8005930:	4602      	mov	r2, r0
       obj_scr == lv_disp_get_scr_prev(disp) ||
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	4293      	cmp	r3, r2
 8005936:	d006      	beq.n	8005946 <lv_obj_area_is_visible+0x62>
       obj_scr == lv_disp_get_layer_sys(disp)) {
 8005938:	6978      	ldr	r0, [r7, #20]
 800593a:	f7fb ff69 	bl	8001810 <lv_disp_get_layer_sys>
 800593e:	4602      	mov	r2, r0
       obj_scr == lv_disp_get_layer_top(disp) ||
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	4293      	cmp	r3, r2
 8005944:	d161      	bne.n	8005a0a <lv_obj_area_is_visible+0x126>

        /*Truncate the area to the object*/
        lv_area_t obj_coords;
        lv_coord_t ext_size = obj->ext_draw_pad;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800594a:	827b      	strh	r3, [r7, #18]
        lv_area_copy(&obj_coords, &obj->coords);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f103 0210 	add.w	r2, r3, #16
 8005952:	f107 0308 	add.w	r3, r7, #8
 8005956:	4611      	mov	r1, r2
 8005958:	4618      	mov	r0, r3
 800595a:	f7fe fc13 	bl	8004184 <lv_area_copy>
        obj_coords.x1 -= ext_size;
 800595e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005962:	b29a      	uxth	r2, r3
 8005964:	8a7b      	ldrh	r3, [r7, #18]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	b29b      	uxth	r3, r3
 800596a:	b21b      	sxth	r3, r3
 800596c:	813b      	strh	r3, [r7, #8]
        obj_coords.y1 -= ext_size;
 800596e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005972:	b29a      	uxth	r2, r3
 8005974:	8a7b      	ldrh	r3, [r7, #18]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	b29b      	uxth	r3, r3
 800597a:	b21b      	sxth	r3, r3
 800597c:	817b      	strh	r3, [r7, #10]
        obj_coords.x2 += ext_size;
 800597e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005982:	b29a      	uxth	r2, r3
 8005984:	8a7b      	ldrh	r3, [r7, #18]
 8005986:	4413      	add	r3, r2
 8005988:	b29b      	uxth	r3, r3
 800598a:	b21b      	sxth	r3, r3
 800598c:	81bb      	strh	r3, [r7, #12]
        obj_coords.y2 += ext_size;
 800598e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005992:	b29a      	uxth	r2, r3
 8005994:	8a7b      	ldrh	r3, [r7, #18]
 8005996:	4413      	add	r3, r2
 8005998:	b29b      	uxth	r3, r3
 800599a:	b21b      	sxth	r3, r3
 800599c:	81fb      	strh	r3, [r7, #14]

        bool is_common;

        is_common = _lv_area_intersect(area, area, &obj_coords);
 800599e:	f107 0308 	add.w	r3, r7, #8
 80059a2:	461a      	mov	r2, r3
 80059a4:	6839      	ldr	r1, [r7, #0]
 80059a6:	6838      	ldr	r0, [r7, #0]
 80059a8:	f015 fa6e 	bl	801ae88 <_lv_area_intersect>
 80059ac:	4603      	mov	r3, r0
 80059ae:	747b      	strb	r3, [r7, #17]
        if(is_common == false) return false;  /*The area is not on the object*/
 80059b0:	7c7b      	ldrb	r3, [r7, #17]
 80059b2:	f083 0301 	eor.w	r3, r3, #1
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <lv_obj_area_is_visible+0xdc>
 80059bc:	2300      	movs	r3, #0
 80059be:	e025      	b.n	8005a0c <lv_obj_area_is_visible+0x128>

        /*Truncate recursively to the parents*/
        lv_obj_t * par = lv_obj_get_parent(obj);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 ff61 	bl	8006888 <lv_obj_get_parent>
 80059c6:	61f8      	str	r0, [r7, #28]
        while(par != NULL) {
 80059c8:	e01c      	b.n	8005a04 <lv_obj_area_is_visible+0x120>
            is_common = _lv_area_intersect(area, area, &par->coords);
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	3310      	adds	r3, #16
 80059ce:	461a      	mov	r2, r3
 80059d0:	6839      	ldr	r1, [r7, #0]
 80059d2:	6838      	ldr	r0, [r7, #0]
 80059d4:	f015 fa58 	bl	801ae88 <_lv_area_intersect>
 80059d8:	4603      	mov	r3, r0
 80059da:	747b      	strb	r3, [r7, #17]
            if(is_common == false) return false;       /*If no common parts with parent break;*/
 80059dc:	7c7b      	ldrb	r3, [r7, #17]
 80059de:	f083 0301 	eor.w	r3, r3, #1
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <lv_obj_area_is_visible+0x108>
 80059e8:	2300      	movs	r3, #0
 80059ea:	e00f      	b.n	8005a0c <lv_obj_area_is_visible+0x128>
            if(lv_obj_get_hidden(par)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
 80059ec:	69f8      	ldr	r0, [r7, #28]
 80059ee:	f001 fbf7 	bl	80071e0 <lv_obj_get_hidden>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <lv_obj_area_is_visible+0x118>
 80059f8:	2300      	movs	r3, #0
 80059fa:	e007      	b.n	8005a0c <lv_obj_area_is_visible+0x128>

            par = lv_obj_get_parent(par);
 80059fc:	69f8      	ldr	r0, [r7, #28]
 80059fe:	f000 ff43 	bl	8006888 <lv_obj_get_parent>
 8005a02:	61f8      	str	r0, [r7, #28]
        while(par != NULL) {
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1df      	bne.n	80059ca <lv_obj_area_is_visible+0xe6>
        }
    }

    return true;
 8005a0a:	2301      	movs	r3, #1
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3720      	adds	r7, #32
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <lv_obj_move_foreground>:
/**
 * Move and object to the foreground
 * @param obj pointer to an object
 */
void lv_obj_move_foreground(lv_obj_t * obj)
{
 8005a14:	b590      	push	{r4, r7, lr}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f016 f88d 	bl	801bb3c <lv_debug_check_null>
 8005a22:	4603      	mov	r3, r0
 8005a24:	f083 0301 	eor.w	r3, r3, #1
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d008      	beq.n	8005a40 <lv_obj_move_foreground+0x2c>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f04f 0400 	mov.w	r4, #0
 8005a34:	461a      	mov	r2, r3
 8005a36:	4623      	mov	r3, r4
 8005a38:	4814      	ldr	r0, [pc, #80]	; (8005a8c <lv_obj_move_foreground+0x78>)
 8005a3a:	f016 f88f 	bl	801bb5c <lv_debug_log_error>
 8005a3e:	e7fe      	b.n	8005a3e <lv_obj_move_foreground+0x2a>

    lv_obj_t * parent = lv_obj_get_parent(obj);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 ff21 	bl	8006888 <lv_obj_get_parent>
 8005a46:	60f8      	str	r0, [r7, #12]

    /*Do nothing of already in the foreground*/
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f016 fc2b 	bl	801c2a8 <_lv_ll_get_head>
 8005a52:	4602      	mov	r2, r0
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d014      	beq.n	8005a84 <lv_obj_move_foreground+0x70>

    lv_obj_invalidate(parent);
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f7ff fef4 	bl	8005848 <lv_obj_invalidate>

    _lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	1d18      	adds	r0, r3, #4
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	1d19      	adds	r1, r3, #4
 8005a68:	2301      	movs	r3, #1
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	f016 fbc7 	bl	801c1fe <_lv_ll_chg_list>

    /*Notify the new parent about the child*/
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	2101      	movs	r1, #1
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	4798      	blx	r3

    lv_obj_invalidate(parent);
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f7ff fee3 	bl	8005848 <lv_obj_invalidate>
 8005a82:	e000      	b.n	8005a86 <lv_obj_move_foreground+0x72>
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
 8005a84:	bf00      	nop
}
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd90      	pop	{r4, r7, pc}
 8005a8c:	0802d7bc 	.word	0x0802d7bc

08005a90 <lv_obj_set_pos>:
 * @param obj pointer to an object
 * @param x new distance from the left side of the parent
 * @param y new distance from the top of the parent
 */
void lv_obj_set_pos(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 8005a90:	b590      	push	{r4, r7, lr}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	807b      	strh	r3, [r7, #2]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	803b      	strh	r3, [r7, #0]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f016 f84b 	bl	801bb3c <lv_debug_check_null>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	f083 0301 	eor.w	r3, r3, #1
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d008      	beq.n	8005ac4 <lv_obj_set_pos+0x34>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f04f 0400 	mov.w	r4, #0
 8005ab8:	461a      	mov	r2, r3
 8005aba:	4623      	mov	r3, r4
 8005abc:	4846      	ldr	r0, [pc, #280]	; (8005bd8 <lv_obj_set_pos+0x148>)
 8005abe:	f016 f84d 	bl	801bb5c <lv_debug_log_error>
 8005ac2:	e7fe      	b.n	8005ac2 <lv_obj_set_pos+0x32>

    /*Convert x and y to absolute coordinates*/
    lv_obj_t * par = obj->parent;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	617b      	str	r3, [r7, #20]

    if(par) {
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00f      	beq.n	8005af0 <lv_obj_set_pos+0x60>
        x = x + par->coords.x1;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	887b      	ldrh	r3, [r7, #2]
 8005ada:	4413      	add	r3, r2
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	807b      	strh	r3, [r7, #2]
        y = y + par->coords.y1;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	883b      	ldrh	r3, [r7, #0]
 8005aea:	4413      	add	r3, r2
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	803b      	strh	r3, [r7, #0]
    }

    /*Calculate and set the movement*/
    lv_point_t diff;
    diff.x = x - obj->coords.x1;
 8005af0:	887a      	ldrh	r2, [r7, #2]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	b21b      	sxth	r3, r3
 8005b00:	823b      	strh	r3, [r7, #16]
    diff.y = y - obj->coords.y1;
 8005b02:	883a      	ldrh	r2, [r7, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	b21b      	sxth	r3, r3
 8005b12:	827b      	strh	r3, [r7, #18]

    /* Do nothing if the position is not changed */
    /* It is very important else recursive positioning can
     * occur without position change*/
    if(diff.x == 0 && diff.y == 0) return;
 8005b14:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d103      	bne.n	8005b24 <lv_obj_set_pos+0x94>
 8005b1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d054      	beq.n	8005bce <lv_obj_set_pos+0x13e>

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7ff fe8f 	bl	8005848 <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 8005b2a:	f107 0308 	add.w	r3, r7, #8
 8005b2e:	4619      	mov	r1, r3
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fef9 	bl	8006928 <lv_obj_get_coords>

    obj->coords.x1 += diff.x;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	4413      	add	r3, r2
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	b21a      	sxth	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	821a      	strh	r2, [r3, #16]
    obj->coords.y1 += diff.y;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	4413      	add	r3, r2
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	b21a      	sxth	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	825a      	strh	r2, [r3, #18]
    obj->coords.x2 += diff.x;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	4413      	add	r3, r2
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	b21a      	sxth	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	829a      	strh	r2, [r3, #20]
    obj->coords.y2 += diff.y;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	4413      	add	r3, r2
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	b21a      	sxth	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	82da      	strh	r2, [r3, #22]

    refresh_children_position(obj, diff.x, diff.y);
 8005b96:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005b9a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f002 fd8d 	bl	80086c0 <refresh_children_position>

    /*Inform the object about its new coordinates*/
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	f107 0208 	add.w	r2, r7, #8
 8005bae:	2102      	movs	r1, #2
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	4798      	blx	r3

    /*Send a signal to the parent too*/
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d005      	beq.n	8005bc6 <lv_obj_set_pos+0x136>
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	6978      	ldr	r0, [r7, #20]
 8005bc4:	4798      	blx	r3

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7ff fe3e 	bl	8005848 <lv_obj_invalidate>
 8005bcc:	e000      	b.n	8005bd0 <lv_obj_set_pos+0x140>
    if(diff.x == 0 && diff.y == 0) return;
 8005bce:	bf00      	nop
}
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd90      	pop	{r4, r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	0802d7bc 	.word	0x0802d7bc

08005bdc <lv_obj_set_x>:
 * Set the x coordinate of a object
 * @param obj pointer to an object
 * @param x new distance from the left side from the parent
 */
void lv_obj_set_x(lv_obj_t * obj, lv_coord_t x)
{
 8005bdc:	b590      	push	{r4, r7, lr}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f015 ffa7 	bl	801bb3c <lv_debug_check_null>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	f083 0301 	eor.w	r3, r3, #1
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d008      	beq.n	8005c0c <lv_obj_set_x+0x30>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f04f 0400 	mov.w	r4, #0
 8005c00:	461a      	mov	r2, r3
 8005c02:	4623      	mov	r3, r4
 8005c04:	4809      	ldr	r0, [pc, #36]	; (8005c2c <lv_obj_set_x+0x50>)
 8005c06:	f015 ffa9 	bl	801bb5c <lv_debug_log_error>
 8005c0a:	e7fe      	b.n	8005c0a <lv_obj_set_x+0x2e>

    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fee3 	bl	80069d8 <lv_obj_get_y>
 8005c12:	4603      	mov	r3, r0
 8005c14:	461a      	mov	r2, r3
 8005c16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7ff ff37 	bl	8005a90 <lv_obj_set_pos>
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd90      	pop	{r4, r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	0802d7bc 	.word	0x0802d7bc

08005c30 <lv_obj_set_y>:
 * Set the y coordinate of a object
 * @param obj pointer to an object
 * @param y new distance from the top of the parent
 */
void lv_obj_set_y(lv_obj_t * obj, lv_coord_t y)
{
 8005c30:	b590      	push	{r4, r7, lr}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f015 ff7d 	bl	801bb3c <lv_debug_check_null>
 8005c42:	4603      	mov	r3, r0
 8005c44:	f083 0301 	eor.w	r3, r3, #1
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d008      	beq.n	8005c60 <lv_obj_set_y+0x30>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f04f 0400 	mov.w	r4, #0
 8005c54:	461a      	mov	r2, r3
 8005c56:	4623      	mov	r3, r4
 8005c58:	4809      	ldr	r0, [pc, #36]	; (8005c80 <lv_obj_set_y+0x50>)
 8005c5a:	f015 ff7f 	bl	801bb5c <lv_debug_log_error>
 8005c5e:	e7fe      	b.n	8005c5e <lv_obj_set_y+0x2e>

    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fe85 	bl	8006970 <lv_obj_get_x>
 8005c66:	4603      	mov	r3, r0
 8005c68:	4619      	mov	r1, r3
 8005c6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7ff ff0d 	bl	8005a90 <lv_obj_set_pos>
}
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd90      	pop	{r4, r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	0802d7bc 	.word	0x0802d7bc

08005c84 <lv_obj_align>:
 * @param align type of alignment (see 'lv_align_t' enum)
 * @param x_ofs x coordinate offset after alignment
 * @param y_ofs y coordinate offset after alignment
 */
void lv_obj_align(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_ofs, lv_coord_t y_ofs)
{
 8005c84:	b590      	push	{r4, r7, lr}
 8005c86:	b089      	sub	sp, #36	; 0x24
 8005c88:	af04      	add	r7, sp, #16
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	4611      	mov	r1, r2
 8005c90:	461a      	mov	r2, r3
 8005c92:	460b      	mov	r3, r1
 8005c94:	71fb      	strb	r3, [r7, #7]
 8005c96:	4613      	mov	r3, r2
 8005c98:	80bb      	strh	r3, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f015 ff4e 	bl	801bb3c <lv_debug_check_null>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	f083 0301 	eor.w	r3, r3, #1
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d008      	beq.n	8005cbe <lv_obj_align+0x3a>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f04f 0400 	mov.w	r4, #0
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	4623      	mov	r3, r4
 8005cb6:	4822      	ldr	r0, [pc, #136]	; (8005d40 <lv_obj_align+0xbc>)
 8005cb8:	f015 ff50 	bl	801bb5c <lv_debug_log_error>
 8005cbc:	e7fe      	b.n	8005cbc <lv_obj_align+0x38>

    if(base == NULL) base = lv_obj_get_parent(obj);
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d103      	bne.n	8005ccc <lv_obj_align+0x48>
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 fddf 	bl	8006888 <lv_obj_get_parent>
 8005cca:	60b8      	str	r0, [r7, #8]

    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
 8005ccc:	68b8      	ldr	r0, [r7, #8]
 8005cce:	f015 ff35 	bl	801bb3c <lv_debug_check_null>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	f083 0301 	eor.w	r3, r3, #1
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d008      	beq.n	8005cf0 <lv_obj_align+0x6c>
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	f04f 0400 	mov.w	r4, #0
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	4623      	mov	r3, r4
 8005ce8:	4815      	ldr	r0, [pc, #84]	; (8005d40 <lv_obj_align+0xbc>)
 8005cea:	f015 ff37 	bl	801bb5c <lv_debug_log_error>
 8005cee:	e7fe      	b.n	8005cee <lv_obj_align+0x6a>

    obj_align_core(obj, base, align, true, true, x_ofs, y_ofs);
 8005cf0:	79fa      	ldrb	r2, [r7, #7]
 8005cf2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005cf6:	9302      	str	r3, [sp, #8]
 8005cf8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005cfc:	9301      	str	r3, [sp, #4]
 8005cfe:	2301      	movs	r3, #1
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	2301      	movs	r3, #1
 8005d04:	68b9      	ldr	r1, [r7, #8]
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f002 fd9e 	bl	8008848 <obj_align_core>

#if LV_USE_OBJ_REALIGN
    /*Save the last align parameters to use them in `lv_obj_realign`*/
    obj->realign.align       = align;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	79fa      	ldrb	r2, [r7, #7]
 8005d10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	88ba      	ldrh	r2, [r7, #4]
 8005d18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8c3a      	ldrh	r2, [r7, #32]
 8005d20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    obj->realign.base        = base;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	641a      	str	r2, [r3, #64]	; 0x40
    obj->realign.mid_align = 0;
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	f892 3049 	ldrb.w	r3, [r2, #73]	; 0x49
 8005d30:	f36f 0341 	bfc	r3, #1, #1
 8005d34:	f882 3049 	strb.w	r3, [r2, #73]	; 0x49
#endif
}
 8005d38:	bf00      	nop
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd90      	pop	{r4, r7, pc}
 8005d40:	0802d7bc 	.word	0x0802d7bc

08005d44 <lv_obj_align_mid>:
 * @param align type of alignment (see 'lv_align_t' enum)
 * @param x_ofs x coordinate offset after alignment
 * @param y_ofs y coordinate offset after alignment
 */
void lv_obj_align_mid(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_ofs, lv_coord_t y_ofs)
{
 8005d44:	b590      	push	{r4, r7, lr}
 8005d46:	b089      	sub	sp, #36	; 0x24
 8005d48:	af04      	add	r7, sp, #16
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	4611      	mov	r1, r2
 8005d50:	461a      	mov	r2, r3
 8005d52:	460b      	mov	r3, r1
 8005d54:	71fb      	strb	r3, [r7, #7]
 8005d56:	4613      	mov	r3, r2
 8005d58:	80bb      	strh	r3, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f015 feee 	bl	801bb3c <lv_debug_check_null>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f083 0301 	eor.w	r3, r3, #1
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d008      	beq.n	8005d7e <lv_obj_align_mid+0x3a>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f04f 0400 	mov.w	r4, #0
 8005d72:	461a      	mov	r2, r3
 8005d74:	4623      	mov	r3, r4
 8005d76:	4822      	ldr	r0, [pc, #136]	; (8005e00 <lv_obj_align_mid+0xbc>)
 8005d78:	f015 fef0 	bl	801bb5c <lv_debug_log_error>
 8005d7c:	e7fe      	b.n	8005d7c <lv_obj_align_mid+0x38>

    if(base == NULL) {
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d103      	bne.n	8005d8c <lv_obj_align_mid+0x48>
        base = lv_obj_get_parent(obj);
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 fd7f 	bl	8006888 <lv_obj_get_parent>
 8005d8a:	60b8      	str	r0, [r7, #8]
    }

    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
 8005d8c:	68b8      	ldr	r0, [r7, #8]
 8005d8e:	f015 fed5 	bl	801bb3c <lv_debug_check_null>
 8005d92:	4603      	mov	r3, r0
 8005d94:	f083 0301 	eor.w	r3, r3, #1
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d008      	beq.n	8005db0 <lv_obj_align_mid+0x6c>
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f04f 0400 	mov.w	r4, #0
 8005da4:	461a      	mov	r2, r3
 8005da6:	4623      	mov	r3, r4
 8005da8:	4815      	ldr	r0, [pc, #84]	; (8005e00 <lv_obj_align_mid+0xbc>)
 8005daa:	f015 fed7 	bl	801bb5c <lv_debug_log_error>
 8005dae:	e7fe      	b.n	8005dae <lv_obj_align_mid+0x6a>

    obj_align_mid_core(obj, base, align, true, true, x_ofs, y_ofs);
 8005db0:	79fa      	ldrb	r2, [r7, #7]
 8005db2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005db6:	9302      	str	r3, [sp, #8]
 8005db8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005dbc:	9301      	str	r3, [sp, #4]
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	68b9      	ldr	r1, [r7, #8]
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f002 fda6 	bl	8008918 <obj_align_mid_core>

#if LV_USE_OBJ_REALIGN
    /*Save the last align parameters to use them in `lv_obj_realign`*/
    obj->realign.align       = align;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	79fa      	ldrb	r2, [r7, #7]
 8005dd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	88ba      	ldrh	r2, [r7, #4]
 8005dd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8c3a      	ldrh	r2, [r7, #32]
 8005de0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    obj->realign.base        = base;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	641a      	str	r2, [r3, #64]	; 0x40
    obj->realign.mid_align = 1;
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	f892 3049 	ldrb.w	r3, [r2, #73]	; 0x49
 8005df0:	f043 0302 	orr.w	r3, r3, #2
 8005df4:	f882 3049 	strb.w	r3, [r2, #73]	; 0x49
#endif
}
 8005df8:	bf00      	nop
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd90      	pop	{r4, r7, pc}
 8005e00:	0802d7bc 	.word	0x0802d7bc

08005e04 <lv_obj_realign>:
/**
 * Realign the object based on the last `lv_obj_align` parameters.
 * @param obj pointer to an object
 */
void lv_obj_realign(lv_obj_t * obj)
{
 8005e04:	b590      	push	{r4, r7, lr}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af02      	add	r7, sp, #8
 8005e0a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f015 fe95 	bl	801bb3c <lv_debug_check_null>
 8005e12:	4603      	mov	r3, r0
 8005e14:	f083 0301 	eor.w	r3, r3, #1
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d008      	beq.n	8005e30 <lv_obj_realign+0x2c>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f04f 0400 	mov.w	r4, #0
 8005e24:	461a      	mov	r2, r3
 8005e26:	4623      	mov	r3, r4
 8005e28:	4818      	ldr	r0, [pc, #96]	; (8005e8c <lv_obj_realign+0x88>)
 8005e2a:	f015 fe97 	bl	801bb5c <lv_debug_log_error>
 8005e2e:	e7fe      	b.n	8005e2e <lv_obj_realign+0x2a>

#if LV_USE_OBJ_REALIGN
    if(obj->realign.mid_align)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d010      	beq.n	8005e62 <lv_obj_realign+0x5e>
        lv_obj_align_mid(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f9b3 0044 	ldrsh.w	r0, [r3, #68]	; 0x44
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	4603      	mov	r3, r0
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7ff ff72 	bl	8005d44 <lv_obj_align_mid>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
#else
    (void)obj;
    LV_LOG_WARN("lv_obj_realign: no effect because LV_USE_OBJ_REALIGN = 0");
#endif
}
 8005e60:	e00f      	b.n	8005e82 <lv_obj_realign+0x7e>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f9b3 0044 	ldrsh.w	r0, [r3, #68]	; 0x44
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7ff ff01 	bl	8005c84 <lv_obj_align>
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd90      	pop	{r4, r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	0802d7bc 	.word	0x0802d7bc

08005e90 <lv_obj_clean_style_list>:
 * @param obj pointer to an object
 * @param part the part of the object which style list should be reset.
 * E.g. `LV_OBJ_PART_MAIN`, `LV_BTN_PART_MAIN`, `LV_SLIDER_PART_KNOB`
 */
void lv_obj_clean_style_list(lv_obj_t * obj, uint8_t part)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	460b      	mov	r3, r1
 8005e9a:	70fb      	strb	r3, [r7, #3]
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
 8005e9c:	78fb      	ldrb	r3, [r7, #3]
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fe11 	bl	8006ac8 <lv_obj_get_style_list>
 8005ea6:	60f8      	str	r0, [r7, #12]
    if(style_dsc == NULL) {
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d009      	beq.n	8005ec2 <lv_obj_clean_style_list+0x32>
        LV_LOG_WARN("lv_obj_clean_style_list: can't find style with `part`");
        return;
    }

    _lv_style_list_reset(style_dsc);
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f005 fba8 	bl	800b604 <_lv_style_list_reset>
#if LV_USE_ANIMATION
    trans_del(obj, part, 0xFF, NULL);
 8005eb4:	78f9      	ldrb	r1, [r7, #3]
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	22ff      	movs	r2, #255	; 0xff
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f003 f980 	bl	80091c0 <trans_del>
 8005ec0:	e000      	b.n	8005ec4 <lv_obj_clean_style_list+0x34>
        return;
 8005ec2:	bf00      	nop
#endif
}
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <lv_obj_reset_style_list>:
 * @param obj pointer to an object
 * @param part the part of the object which style list should be reset.
 * E.g. `LV_OBJ_PART_MAIN`, `LV_BTN_PART_MAIN`, `LV_SLIDER_PART_KNOB`
 */
void lv_obj_reset_style_list(lv_obj_t * obj, uint8_t part)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b082      	sub	sp, #8
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	70fb      	strb	r3, [r7, #3]
    lv_obj_clean_style_list(obj, part);
 8005ed6:	78fb      	ldrb	r3, [r7, #3]
 8005ed8:	4619      	mov	r1, r3
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7ff ffd8 	bl	8005e90 <lv_obj_clean_style_list>

    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	22ff      	movs	r2, #255	; 0xff
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f804 	bl	8005ef4 <lv_obj_refresh_style>
}
 8005eec:	bf00      	nop
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <lv_obj_refresh_style>:
 * @param obj pointer to an object
 * @param part the part of the object which style property should be refreshed.
 * @param prop `LV_STYLE_PROP_ALL` or an `LV_STYLE_...` property. It is used to optimize what needs to be refreshed.
 */
void lv_obj_refresh_style(lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
 8005ef4:	b590      	push	{r4, r7, lr}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	460b      	mov	r3, r1
 8005efe:	70fb      	strb	r3, [r7, #3]
 8005f00:	4613      	mov	r3, r2
 8005f02:	803b      	strh	r3, [r7, #0]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f015 fe19 	bl	801bb3c <lv_debug_check_null>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	f083 0301 	eor.w	r3, r3, #1
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d008      	beq.n	8005f28 <lv_obj_refresh_style+0x34>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f04f 0400 	mov.w	r4, #0
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	4623      	mov	r3, r4
 8005f20:	483e      	ldr	r0, [pc, #248]	; (800601c <lv_obj_refresh_style+0x128>)
 8005f22:	f015 fe1b 	bl	801bb5c <lv_debug_log_error>
 8005f26:	e7fe      	b.n	8005f26 <lv_obj_refresh_style+0x32>

    invalidate_style_cache(obj, part, prop);
 8005f28:	883a      	ldrh	r2, [r7, #0]
 8005f2a:	78fb      	ldrb	r3, [r7, #3]
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f003 fe24 	bl	8009b7c <invalidate_style_cache>

    /*If a real style refresh is required*/
    bool real_refr = false;
 8005f34:	2300      	movs	r3, #0
 8005f36:	73fb      	strb	r3, [r7, #15]
    switch(prop) {
 8005f38:	883b      	ldrh	r3, [r7, #0]
 8005f3a:	2b71      	cmp	r3, #113	; 0x71
 8005f3c:	dc17      	bgt.n	8005f6e <lv_obj_refresh_style+0x7a>
 8005f3e:	2b70      	cmp	r3, #112	; 0x70
 8005f40:	da31      	bge.n	8005fa6 <lv_obj_refresh_style+0xb2>
 8005f42:	2b41      	cmp	r3, #65	; 0x41
 8005f44:	dc09      	bgt.n	8005f5a <lv_obj_refresh_style+0x66>
 8005f46:	2b40      	cmp	r3, #64	; 0x40
 8005f48:	da2d      	bge.n	8005fa6 <lv_obj_refresh_style+0xb2>
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	db2e      	blt.n	8005fac <lv_obj_refresh_style+0xb8>
 8005f4e:	2b07      	cmp	r3, #7
 8005f50:	dd29      	ble.n	8005fa6 <lv_obj_refresh_style+0xb2>
 8005f52:	3b10      	subs	r3, #16
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d829      	bhi.n	8005fac <lv_obj_refresh_style+0xb8>
 8005f58:	e025      	b.n	8005fa6 <lv_obj_refresh_style+0xb2>
 8005f5a:	2b53      	cmp	r3, #83	; 0x53
 8005f5c:	dc04      	bgt.n	8005f68 <lv_obj_refresh_style+0x74>
 8005f5e:	2b50      	cmp	r3, #80	; 0x50
 8005f60:	da21      	bge.n	8005fa6 <lv_obj_refresh_style+0xb2>
 8005f62:	2b4c      	cmp	r3, #76	; 0x4c
 8005f64:	d01f      	beq.n	8005fa6 <lv_obj_refresh_style+0xb2>
 8005f66:	e021      	b.n	8005fac <lv_obj_refresh_style+0xb8>
 8005f68:	2b5c      	cmp	r3, #92	; 0x5c
 8005f6a:	d01c      	beq.n	8005fa6 <lv_obj_refresh_style+0xb2>
 8005f6c:	e01e      	b.n	8005fac <lv_obj_refresh_style+0xb8>
 8005f6e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f70:	dc08      	bgt.n	8005f84 <lv_obj_refresh_style+0x90>
 8005f72:	2b7e      	cmp	r3, #126	; 0x7e
 8005f74:	da17      	bge.n	8005fa6 <lv_obj_refresh_style+0xb2>
 8005f76:	2b73      	cmp	r3, #115	; 0x73
 8005f78:	db18      	blt.n	8005fac <lv_obj_refresh_style+0xb8>
 8005f7a:	2b75      	cmp	r3, #117	; 0x75
 8005f7c:	dd13      	ble.n	8005fa6 <lv_obj_refresh_style+0xb2>
 8005f7e:	2b7c      	cmp	r3, #124	; 0x7c
 8005f80:	d011      	beq.n	8005fa6 <lv_obj_refresh_style+0xb2>
 8005f82:	e013      	b.n	8005fac <lv_obj_refresh_style+0xb8>
 8005f84:	f248 0281 	movw	r2, #32897	; 0x8081
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	dc08      	bgt.n	8005f9e <lv_obj_refresh_style+0xaa>
 8005f8c:	f248 0280 	movw	r2, #32896	; 0x8080
 8005f90:	4293      	cmp	r3, r2
 8005f92:	da08      	bge.n	8005fa6 <lv_obj_refresh_style+0xb2>
 8005f94:	2b90      	cmp	r3, #144	; 0x90
 8005f96:	d006      	beq.n	8005fa6 <lv_obj_refresh_style+0xb2>
 8005f98:	2bff      	cmp	r3, #255	; 0xff
 8005f9a:	d004      	beq.n	8005fa6 <lv_obj_refresh_style+0xb2>
 8005f9c:	e006      	b.n	8005fac <lv_obj_refresh_style+0xb8>
 8005f9e:	f248 028e 	movw	r2, #32910	; 0x808e
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d102      	bne.n	8005fac <lv_obj_refresh_style+0xb8>
        case LV_STYLE_VALUE_OPA:
        case LV_STYLE_TEXT_LETTER_SPACE:
        case LV_STYLE_TEXT_LINE_SPACE:
        case LV_STYLE_TEXT_FONT:
        case LV_STYLE_LINE_WIDTH:
            real_refr = true;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	73fb      	strb	r3, [r7, #15]
            break;
 8005faa:	e001      	b.n	8005fb0 <lv_obj_refresh_style+0xbc>
        default:
            real_refr = false;
 8005fac:	2300      	movs	r3, #0
 8005fae:	73fb      	strb	r3, [r7, #15]
    }

    if(real_refr) {
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d02a      	beq.n	800600c <lv_obj_refresh_style+0x118>
        lv_obj_invalidate(obj);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff fc46 	bl	8005848 <lv_obj_invalidate>
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2104      	movs	r1, #4
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	4798      	blx	r3

        switch(prop) {
 8005fc8:	883b      	ldrh	r3, [r7, #0]
 8005fca:	2b15      	cmp	r3, #21
 8005fcc:	db10      	blt.n	8005ff0 <lv_obj_refresh_style+0xfc>
 8005fce:	2b18      	cmp	r3, #24
 8005fd0:	dd01      	ble.n	8005fd6 <lv_obj_refresh_style+0xe2>
 8005fd2:	2bff      	cmp	r3, #255	; 0xff
 8005fd4:	d10c      	bne.n	8005ff0 <lv_obj_refresh_style+0xfc>
            case LV_STYLE_PROP_ALL:
            case LV_STYLE_MARGIN_TOP:
            case LV_STYLE_MARGIN_BOTTOM:
            case LV_STYLE_MARGIN_LEFT:
            case LV_STYLE_MARGIN_RIGHT:
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d007      	beq.n	8005fee <lv_obj_refresh_style+0xfa>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	6810      	ldr	r0, [r2, #0]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	2101      	movs	r1, #1
 8005fec:	4798      	blx	r3
                break;
 8005fee:	bf00      	nop
        }

        lv_obj_invalidate(obj);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7ff fc29 	bl	8005848 <lv_obj_invalidate>

        /*Send style change signals*/
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
 8005ff6:	883b      	ldrh	r3, [r7, #0]
 8005ff8:	2bff      	cmp	r3, #255	; 0xff
 8005ffa:	d003      	beq.n	8006004 <lv_obj_refresh_style+0x110>
 8005ffc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006000:	2b00      	cmp	r3, #0
 8006002:	da06      	bge.n	8006012 <lv_obj_refresh_style+0x11e>
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f002 fbfa 	bl	80087fe <refresh_children_style>
    }
    else {
        lv_obj_invalidate(obj);
    }
}
 800600a:	e002      	b.n	8006012 <lv_obj_refresh_style+0x11e>
        lv_obj_invalidate(obj);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7ff fc1b 	bl	8005848 <lv_obj_invalidate>
}
 8006012:	bf00      	nop
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	bd90      	pop	{r4, r7, pc}
 800601a:	bf00      	nop
 800601c:	0802d7bc 	.word	0x0802d7bc

08006020 <lv_obj_report_style_mod>:
 * Notify all object if a style is modified
 * @param style pointer to a style. Only the objects with this style will be notified
 *               (NULL to notify all objects)
 */
void lv_obj_report_style_mod(lv_style_t * style)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
    lv_disp_t * d = lv_disp_get_next(NULL);
 8006028:	2000      	movs	r0, #0
 800602a:	f014 fa55 	bl	801a4d8 <lv_disp_get_next>
 800602e:	60f8      	str	r0, [r7, #12]

    while(d) {
 8006030:	e018      	b.n	8006064 <lv_obj_report_style_mod+0x44>
        lv_obj_t * i;
        _LV_LL_READ(d->scr_ll, i) {
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	3338      	adds	r3, #56	; 0x38
 8006036:	4618      	mov	r0, r3
 8006038:	f016 f936 	bl	801c2a8 <_lv_ll_get_head>
 800603c:	60b8      	str	r0, [r7, #8]
 800603e:	e00a      	b.n	8006056 <lv_obj_report_style_mod+0x36>
            report_style_mod_core(style, i);
 8006040:	68b9      	ldr	r1, [r7, #8]
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f002 fb89 	bl	800875a <report_style_mod_core>
        _LV_LL_READ(d->scr_ll, i) {
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	3338      	adds	r3, #56	; 0x38
 800604c:	68b9      	ldr	r1, [r7, #8]
 800604e:	4618      	mov	r0, r3
 8006050:	f016 f950 	bl	801c2f4 <_lv_ll_get_next>
 8006054:	60b8      	str	r0, [r7, #8]
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1f1      	bne.n	8006040 <lv_obj_report_style_mod+0x20>
        }
        d = lv_disp_get_next(d);
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f014 fa3b 	bl	801a4d8 <lv_disp_get_next>
 8006062:	60f8      	str	r0, [r7, #12]
    while(d) {
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1e3      	bne.n	8006032 <lv_obj_report_style_mod+0x12>
    }
}
 800606a:	bf00      	nop
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <_lv_obj_disable_style_caching>:
 * Enable/disable the use of style cache for an object
 * @param obj pointer to an object
 * @param dis true: disable; false: enable (re-enable)
 */
void _lv_obj_disable_style_caching(lv_obj_t * obj, bool dis)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b086      	sub	sp, #24
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	460b      	mov	r3, r1
 800607c:	70fb      	strb	r3, [r7, #3]
    uint8_t part;
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 800607e:	2300      	movs	r3, #0
 8006080:	75fb      	strb	r3, [r7, #23]
 8006082:	e011      	b.n	80060a8 <_lv_obj_disable_style_caching+0x36>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8006084:	7dfb      	ldrb	r3, [r7, #23]
 8006086:	4619      	mov	r1, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 fd1d 	bl	8006ac8 <lv_obj_get_style_list>
 800608e:	6138      	str	r0, [r7, #16]
        if(list == NULL) break;
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00c      	beq.n	80060b0 <_lv_obj_disable_style_caching+0x3e>
        list->ignore_cache = dis;
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	7953      	ldrb	r3, [r2, #5]
 800609a:	78f9      	ldrb	r1, [r7, #3]
 800609c:	f361 03c3 	bfi	r3, r1, #3, #1
 80060a0:	7153      	strb	r3, [r2, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 80060a2:	7dfb      	ldrb	r3, [r7, #23]
 80060a4:	3301      	adds	r3, #1
 80060a6:	75fb      	strb	r3, [r7, #23]
 80060a8:	7dfb      	ldrb	r3, [r7, #23]
 80060aa:	2b3f      	cmp	r3, #63	; 0x3f
 80060ac:	d9ea      	bls.n	8006084 <_lv_obj_disable_style_caching+0x12>
 80060ae:	e000      	b.n	80060b2 <_lv_obj_disable_style_caching+0x40>
        if(list == NULL) break;
 80060b0:	bf00      	nop
    }
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 80060b2:	2340      	movs	r3, #64	; 0x40
 80060b4:	75fb      	strb	r3, [r7, #23]
 80060b6:	e011      	b.n	80060dc <_lv_obj_disable_style_caching+0x6a>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 80060b8:	7dfb      	ldrb	r3, [r7, #23]
 80060ba:	4619      	mov	r1, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fd03 	bl	8006ac8 <lv_obj_get_style_list>
 80060c2:	60f8      	str	r0, [r7, #12]
        if(list == NULL) break;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00c      	beq.n	80060e4 <_lv_obj_disable_style_caching+0x72>
        list->ignore_cache = dis;
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	7953      	ldrb	r3, [r2, #5]
 80060ce:	78f9      	ldrb	r1, [r7, #3]
 80060d0:	f361 03c3 	bfi	r3, r1, #3, #1
 80060d4:	7153      	strb	r3, [r2, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 80060d6:	7dfb      	ldrb	r3, [r7, #23]
 80060d8:	3301      	adds	r3, #1
 80060da:	75fb      	strb	r3, [r7, #23]
 80060dc:	7dfb      	ldrb	r3, [r7, #23]
 80060de:	2bff      	cmp	r3, #255	; 0xff
 80060e0:	d1ea      	bne.n	80060b8 <_lv_obj_disable_style_caching+0x46>
    }
}
 80060e2:	e000      	b.n	80060e6 <_lv_obj_disable_style_caching+0x74>
        if(list == NULL) break;
 80060e4:	bf00      	nop
}
 80060e6:	bf00      	nop
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <lv_obj_set_click>:
 * Enable or disable the clicking of an object
 * @param obj pointer to an object
 * @param en true: make the object clickable
 */
void lv_obj_set_click(lv_obj_t * obj, bool en)
{
 80060f0:	b590      	push	{r4, r7, lr}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	460b      	mov	r3, r1
 80060fa:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f015 fd1d 	bl	801bb3c <lv_debug_check_null>
 8006102:	4603      	mov	r3, r0
 8006104:	f083 0301 	eor.w	r3, r3, #1
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d008      	beq.n	8006120 <lv_obj_set_click+0x30>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f04f 0400 	mov.w	r4, #0
 8006114:	461a      	mov	r2, r3
 8006116:	4623      	mov	r3, r4
 8006118:	4807      	ldr	r0, [pc, #28]	; (8006138 <lv_obj_set_click+0x48>)
 800611a:	f015 fd1f 	bl	801bb5c <lv_debug_log_error>
 800611e:	e7fe      	b.n	800611e <lv_obj_set_click+0x2e>

    obj->click = (en == true ? 1 : 0);
 8006120:	78f9      	ldrb	r1, [r7, #3]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8006128:	f361 0300 	bfi	r3, r1, #0, #1
 800612c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	bd90      	pop	{r4, r7, pc}
 8006138:	0802d7bc 	.word	0x0802d7bc

0800613c <lv_obj_set_state>:
 * from the previous state to the current
 * @param obj pointer to an object
 * @param state the new state
 */
void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
{
 800613c:	b590      	push	{r4, r7, lr}
 800613e:	b0ff      	sub	sp, #508	; 0x1fc
 8006140:	af02      	add	r7, sp, #8
 8006142:	1d3b      	adds	r3, r7, #4
 8006144:	6018      	str	r0, [r3, #0]
 8006146:	460a      	mov	r2, r1
 8006148:	1cfb      	adds	r3, r7, #3
 800614a:	701a      	strb	r2, [r3, #0]
    if(obj->state == new_state) return;
 800614c:	1d3b      	adds	r3, r7, #4
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006154:	1cfa      	adds	r2, r7, #3
 8006156:	7812      	ldrb	r2, [r2, #0]
 8006158:	429a      	cmp	r2, r3
 800615a:	f000 81b6 	beq.w	80064ca <lv_obj_set_state+0x38e>

    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800615e:	1d3b      	adds	r3, r7, #4
 8006160:	6818      	ldr	r0, [r3, #0]
 8006162:	f015 fceb 	bl	801bb3c <lv_debug_check_null>
 8006166:	4603      	mov	r3, r0
 8006168:	f083 0301 	eor.w	r3, r3, #1
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d009      	beq.n	8006186 <lv_obj_set_state+0x4a>
 8006172:	1d3b      	adds	r3, r7, #4
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f04f 0400 	mov.w	r4, #0
 800617a:	461a      	mov	r2, r3
 800617c:	4623      	mov	r3, r4
 800617e:	48d6      	ldr	r0, [pc, #856]	; (80064d8 <lv_obj_set_state+0x39c>)
 8006180:	f015 fcec 	bl	801bb5c <lv_debug_log_error>
 8006184:	e7fe      	b.n	8006184 <lv_obj_set_state+0x48>

    lv_state_t prev_state = obj->state;
 8006186:	1d3b      	adds	r3, r7, #4
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800618e:	f887 31ec 	strb.w	r3, [r7, #492]	; 0x1ec
    style_snapshot_res_t cmp_res = STYLE_COMPARE_SAME;
 8006192:	2300      	movs	r3, #0
 8006194:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
    uint8_t part;
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8006198:	2300      	movs	r3, #0
 800619a:	f887 31ee 	strb.w	r3, [r7, #494]	; 0x1ee
 800619e:	e048      	b.n	8006232 <lv_obj_set_state+0xf6>
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
 80061a0:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 80061a4:	1d3b      	adds	r3, r7, #4
 80061a6:	4611      	mov	r1, r2
 80061a8:	6818      	ldr	r0, [r3, #0]
 80061aa:	f000 fc8d 	bl	8006ac8 <lv_obj_get_style_list>
 80061ae:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
        if(style_list == NULL) break;   /*No more style lists*/
 80061b2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d040      	beq.n	800623c <lv_obj_set_state+0x100>
        obj->state = prev_state;
 80061ba:	1d3b      	adds	r3, r7, #4
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f897 21ec 	ldrb.w	r2, [r7, #492]	; 0x1ec
 80061c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        style_snapshot_t shot_pre;
        style_snapshot(obj, part, &shot_pre);
 80061c6:	f107 0208 	add.w	r2, r7, #8
 80061ca:	f897 11ee 	ldrb.w	r1, [r7, #494]	; 0x1ee
 80061ce:	1d3b      	adds	r3, r7, #4
 80061d0:	6818      	ldr	r0, [r3, #0]
 80061d2:	f003 fd2d 	bl	8009c30 <style_snapshot>
        obj->state = new_state;
 80061d6:	1d3b      	adds	r3, r7, #4
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	1cfa      	adds	r2, r7, #3
 80061dc:	7812      	ldrb	r2, [r2, #0]
 80061de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        style_snapshot_t shot_post;
        style_snapshot(obj, part, &shot_post);
 80061e2:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80061e6:	f897 11ee 	ldrb.w	r1, [r7, #494]	; 0x1ee
 80061ea:	1d3b      	adds	r3, r7, #4
 80061ec:	6818      	ldr	r0, [r3, #0]
 80061ee:	f003 fd1f 	bl	8009c30 <style_snapshot>

        style_snapshot_res_t r = style_snapshot_compare(&shot_pre, &shot_post);
 80061f2:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80061f6:	f107 0308 	add.w	r3, r7, #8
 80061fa:	4611      	mov	r1, r2
 80061fc:	4618      	mov	r0, r3
 80061fe:	f003 fe64 	bl	8009eca <style_snapshot_compare>
 8006202:	4603      	mov	r3, r0
 8006204:	f887 31e7 	strb.w	r3, [r7, #487]	; 0x1e7
        if(r == STYLE_COMPARE_DIFF) {
 8006208:	f897 31e7 	ldrb.w	r3, [r7, #487]	; 0x1e7
 800620c:	2b02      	cmp	r3, #2
 800620e:	d104      	bne.n	800621a <lv_obj_set_state+0xde>
            cmp_res = STYLE_COMPARE_DIFF;
 8006210:	2302      	movs	r3, #2
 8006212:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
            break;
 8006216:	bf00      	nop
 8006218:	e011      	b.n	800623e <lv_obj_set_state+0x102>
        }
        if(r == STYLE_COMPARE_VISUAL_DIFF) {
 800621a:	f897 31e7 	ldrb.w	r3, [r7, #487]	; 0x1e7
 800621e:	2b01      	cmp	r3, #1
 8006220:	d102      	bne.n	8006228 <lv_obj_set_state+0xec>
            cmp_res = STYLE_COMPARE_VISUAL_DIFF;
 8006222:	2301      	movs	r3, #1
 8006224:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8006228:	f897 31ee 	ldrb.w	r3, [r7, #494]	; 0x1ee
 800622c:	3301      	adds	r3, #1
 800622e:	f887 31ee 	strb.w	r3, [r7, #494]	; 0x1ee
 8006232:	f897 31ee 	ldrb.w	r3, [r7, #494]	; 0x1ee
 8006236:	2b3f      	cmp	r3, #63	; 0x3f
 8006238:	d9b2      	bls.n	80061a0 <lv_obj_set_state+0x64>
 800623a:	e000      	b.n	800623e <lv_obj_set_state+0x102>
        if(style_list == NULL) break;   /*No more style lists*/
 800623c:	bf00      	nop
        }
    }

    obj->state = new_state;
 800623e:	1d3b      	adds	r3, r7, #4
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	1cfa      	adds	r2, r7, #3
 8006244:	7812      	ldrb	r2, [r2, #0]
 8006246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    if(cmp_res == STYLE_COMPARE_SAME) {
 800624a:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 800624e:	2b00      	cmp	r3, #0
 8006250:	f000 813d 	beq.w	80064ce <lv_obj_set_state+0x392>
#if LV_USE_ANIMATION == 0
    if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
    else if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
#else

    for(part = 0; part < _LV_OBJ_PART_REAL_LAST; part++) {
 8006254:	2300      	movs	r3, #0
 8006256:	f887 31ee 	strb.w	r3, [r7, #494]	; 0x1ee
 800625a:	e126      	b.n	80064aa <lv_obj_set_state+0x36e>
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
 800625c:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 8006260:	1d3b      	adds	r3, r7, #4
 8006262:	4611      	mov	r1, r2
 8006264:	6818      	ldr	r0, [r3, #0]
 8006266:	f000 fc2f 	bl	8006ac8 <lv_obj_get_style_list>
 800626a:	f8c7 01e0 	str.w	r0, [r7, #480]	; 0x1e0
        if(style_list == NULL) break;   /*No more style lists*/
 800626e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 811f 	beq.w	80064b6 <lv_obj_set_state+0x37a>
        if(style_list->ignore_trans) continue;
 8006278:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800627c:	795b      	ldrb	r3, [r3, #5]
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	f040 810a 	bne.w	800649e <lv_obj_set_state+0x362>

        lv_style_int_t time = lv_obj_get_style_transition_time(obj, part);
 800628a:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 800628e:	1d3b      	adds	r3, r7, #4
 8006290:	4611      	mov	r1, r2
 8006292:	6818      	ldr	r0, [r3, #0]
 8006294:	f7fe fe45 	bl	8004f22 <lv_obj_get_style_transition_time>
 8006298:	4603      	mov	r3, r0
 800629a:	f8a7 31de 	strh.w	r3, [r7, #478]	; 0x1de
        lv_style_property_t props[LV_STYLE_TRANS_NUM_MAX];
        lv_style_int_t delay = lv_obj_get_style_transition_delay(obj, part);
 800629e:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 80062a2:	1d3b      	adds	r3, r7, #4
 80062a4:	4611      	mov	r1, r2
 80062a6:	6818      	ldr	r0, [r3, #0]
 80062a8:	f7fe fe4c 	bl	8004f44 <lv_obj_get_style_transition_delay>
 80062ac:	4603      	mov	r3, r0
 80062ae:	f8a7 31dc 	strh.w	r3, [r7, #476]	; 0x1dc
        lv_anim_path_t * path = lv_obj_get_style_transition_path(obj, part);
 80062b2:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 80062b6:	1d3b      	adds	r3, r7, #4
 80062b8:	4611      	mov	r1, r2
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	f7fe feb9 	bl	8005032 <lv_obj_get_style_transition_path>
 80062c0:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
        props[0] = lv_obj_get_style_transition_prop_1(obj, part);
 80062c4:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 80062c8:	1d3b      	adds	r3, r7, #4
 80062ca:	4611      	mov	r1, r2
 80062cc:	6818      	ldr	r0, [r3, #0]
 80062ce:	f7fe fe4a 	bl	8004f66 <lv_obj_get_style_transition_prop_1>
 80062d2:	4603      	mov	r3, r0
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	f8a7 31c8 	strh.w	r3, [r7, #456]	; 0x1c8
        props[1] = lv_obj_get_style_transition_prop_2(obj, part);
 80062da:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 80062de:	1d3b      	adds	r3, r7, #4
 80062e0:	4611      	mov	r1, r2
 80062e2:	6818      	ldr	r0, [r3, #0]
 80062e4:	f7fe fe50 	bl	8004f88 <lv_obj_get_style_transition_prop_2>
 80062e8:	4603      	mov	r3, r0
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	f8a7 31ca 	strh.w	r3, [r7, #458]	; 0x1ca
        props[2] = lv_obj_get_style_transition_prop_3(obj, part);
 80062f0:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 80062f4:	1d3b      	adds	r3, r7, #4
 80062f6:	4611      	mov	r1, r2
 80062f8:	6818      	ldr	r0, [r3, #0]
 80062fa:	f7fe fe56 	bl	8004faa <lv_obj_get_style_transition_prop_3>
 80062fe:	4603      	mov	r3, r0
 8006300:	b29b      	uxth	r3, r3
 8006302:	f8a7 31cc 	strh.w	r3, [r7, #460]	; 0x1cc
        props[3] = lv_obj_get_style_transition_prop_4(obj, part);
 8006306:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 800630a:	1d3b      	adds	r3, r7, #4
 800630c:	4611      	mov	r1, r2
 800630e:	6818      	ldr	r0, [r3, #0]
 8006310:	f7fe fe5c 	bl	8004fcc <lv_obj_get_style_transition_prop_4>
 8006314:	4603      	mov	r3, r0
 8006316:	b29b      	uxth	r3, r3
 8006318:	f8a7 31ce 	strh.w	r3, [r7, #462]	; 0x1ce
        props[4] = lv_obj_get_style_transition_prop_5(obj, part);
 800631c:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 8006320:	1d3b      	adds	r3, r7, #4
 8006322:	4611      	mov	r1, r2
 8006324:	6818      	ldr	r0, [r3, #0]
 8006326:	f7fe fe62 	bl	8004fee <lv_obj_get_style_transition_prop_5>
 800632a:	4603      	mov	r3, r0
 800632c:	b29b      	uxth	r3, r3
 800632e:	f8a7 31d0 	strh.w	r3, [r7, #464]	; 0x1d0
        props[5] = lv_obj_get_style_transition_prop_6(obj, part);
 8006332:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 8006336:	1d3b      	adds	r3, r7, #4
 8006338:	4611      	mov	r1, r2
 800633a:	6818      	ldr	r0, [r3, #0]
 800633c:	f7fe fe68 	bl	8005010 <lv_obj_get_style_transition_prop_6>
 8006340:	4603      	mov	r3, r0
 8006342:	b29b      	uxth	r3, r3
 8006344:	f8a7 31d2 	strh.w	r3, [r7, #466]	; 0x1d2

        uint8_t i;
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
 8006348:	2300      	movs	r3, #0
 800634a:	f887 31ed 	strb.w	r3, [r7, #493]	; 0x1ed
 800634e:	e08a      	b.n	8006466 <lv_obj_set_state+0x32a>
            if(props[i] != 0) {
 8006350:	f897 31ed 	ldrb.w	r3, [r7, #493]	; 0x1ed
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 800635a:	4413      	add	r3, r2
 800635c:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d07b      	beq.n	800645c <lv_obj_set_state+0x320>
                _lv_style_list_add_trans_style(style_list);
 8006364:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 8006368:	f005 fd58 	bl	800be1c <_lv_style_list_add_trans_style>

                lv_style_trans_t * tr = trans_create(obj, props[i], part, prev_state, new_state);
 800636c:	f897 31ed 	ldrb.w	r3, [r7, #493]	; 0x1ed
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8006376:	4413      	add	r3, r2
 8006378:	f833 1c28 	ldrh.w	r1, [r3, #-40]
 800637c:	f897 41ec 	ldrb.w	r4, [r7, #492]	; 0x1ec
 8006380:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 8006384:	1d38      	adds	r0, r7, #4
 8006386:	1cfb      	adds	r3, r7, #3
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	4623      	mov	r3, r4
 800638e:	6800      	ldr	r0, [r0, #0]
 8006390:	f002 fcde 	bl	8008d50 <trans_create>
 8006394:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4

                /*If there is a pending anim for this property remove it*/
                if(tr) {
 8006398:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800639c:	2b00      	cmp	r3, #0
 800639e:	d05d      	beq.n	800645c <lv_obj_set_state+0x320>
                    tr->obj = obj;
 80063a0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80063a4:	1d3a      	adds	r2, r7, #4
 80063a6:	6812      	ldr	r2, [r2, #0]
 80063a8:	601a      	str	r2, [r3, #0]
                    tr->prop = props[i];
 80063aa:	f897 31ed 	ldrb.w	r3, [r7, #493]	; 0x1ed
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 80063b4:	4413      	add	r3, r2
 80063b6:	f833 2c28 	ldrh.w	r2, [r3, #-40]
 80063ba:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80063be:	809a      	strh	r2, [r3, #4]
                    tr->part = part;
 80063c0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80063c4:	f897 21ee 	ldrb.w	r2, [r7, #494]	; 0x1ee
 80063c8:	719a      	strb	r2, [r3, #6]

                    lv_anim_t a;
                    lv_anim_init(&a);
 80063ca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80063ce:	4618      	mov	r0, r3
 80063d0:	f014 fa72 	bl	801a8b8 <lv_anim_init>
                    lv_anim_set_var(&a, tr);
 80063d4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80063d8:	f8d7 11d4 	ldr.w	r1, [r7, #468]	; 0x1d4
 80063dc:	4618      	mov	r0, r3
 80063de:	f7fd ff8f 	bl	8004300 <lv_anim_set_var>
                    lv_anim_set_exec_cb(&a, (lv_anim_exec_xcb_t)trans_anim_cb);
 80063e2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80063e6:	493d      	ldr	r1, [pc, #244]	; (80064dc <lv_obj_set_state+0x3a0>)
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7fd ff97 	bl	800431c <lv_anim_set_exec_cb>
                    lv_anim_set_start_cb(&a, trans_anim_start_cb);
 80063ee:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80063f2:	493b      	ldr	r1, [pc, #236]	; (80064e0 <lv_obj_set_state+0x3a4>)
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7fd ffe6 	bl	80043c6 <lv_anim_set_start_cb>
                    lv_anim_set_ready_cb(&a, trans_anim_ready_cb);
 80063fa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80063fe:	4939      	ldr	r1, [pc, #228]	; (80064e4 <lv_obj_set_state+0x3a8>)
 8006400:	4618      	mov	r0, r3
 8006402:	f7fd ffee 	bl	80043e2 <lv_anim_set_ready_cb>
                    lv_anim_set_values(&a, 0x00, 0xFF);
 8006406:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800640a:	22ff      	movs	r2, #255	; 0xff
 800640c:	2100      	movs	r1, #0
 800640e:	4618      	mov	r0, r3
 8006410:	f7fd ffaf 	bl	8004372 <lv_anim_set_values>
                    lv_anim_set_time(&a, time);
 8006414:	f9b7 21de 	ldrsh.w	r2, [r7, #478]	; 0x1de
 8006418:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800641c:	4611      	mov	r1, r2
 800641e:	4618      	mov	r0, r3
 8006420:	f7fd ff8a 	bl	8004338 <lv_anim_set_time>
                    lv_anim_set_delay(&a, delay);
 8006424:	f9b7 21dc 	ldrsh.w	r2, [r7, #476]	; 0x1dc
 8006428:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800642c:	4611      	mov	r1, r2
 800642e:	4618      	mov	r0, r3
 8006430:	f7fd ff90 	bl	8004354 <lv_anim_set_delay>
                    lv_anim_set_path(&a, path);
 8006434:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006438:	f8d7 11d8 	ldr.w	r1, [r7, #472]	; 0x1d8
 800643c:	4618      	mov	r0, r3
 800643e:	f7fd ffb2 	bl	80043a6 <lv_anim_set_path>
                    a.early_apply = 0;
 8006442:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8006446:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 800644a:	f36f 0300 	bfc	r3, #0, #1
 800644e:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    lv_anim_start(&a);
 8006452:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006456:	4618      	mov	r0, r3
 8006458:	f014 fa58 	bl	801a90c <lv_anim_start>
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
 800645c:	f897 31ed 	ldrb.w	r3, [r7, #493]	; 0x1ed
 8006460:	3301      	adds	r3, #1
 8006462:	f887 31ed 	strb.w	r3, [r7, #493]	; 0x1ed
 8006466:	f897 31ed 	ldrb.w	r3, [r7, #493]	; 0x1ed
 800646a:	2b05      	cmp	r3, #5
 800646c:	f67f af70 	bls.w	8006350 <lv_obj_set_state+0x214>
                }

            }
        }
        if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 8006470:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 8006474:	2b02      	cmp	r3, #2
 8006476:	d106      	bne.n	8006486 <lv_obj_set_state+0x34a>
 8006478:	f897 11ee 	ldrb.w	r1, [r7, #494]	; 0x1ee
 800647c:	1d3b      	adds	r3, r7, #4
 800647e:	22ff      	movs	r2, #255	; 0xff
 8006480:	6818      	ldr	r0, [r3, #0]
 8006482:	f7ff fd37 	bl	8005ef4 <lv_obj_refresh_style>

        if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
 8006486:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 800648a:	2b01      	cmp	r3, #1
 800648c:	d108      	bne.n	80064a0 <lv_obj_set_state+0x364>
            invalidate_style_cache(obj, part, LV_STYLE_PROP_ALL);
 800648e:	f897 11ee 	ldrb.w	r1, [r7, #494]	; 0x1ee
 8006492:	1d3b      	adds	r3, r7, #4
 8006494:	22ff      	movs	r2, #255	; 0xff
 8006496:	6818      	ldr	r0, [r3, #0]
 8006498:	f003 fb70 	bl	8009b7c <invalidate_style_cache>
 800649c:	e000      	b.n	80064a0 <lv_obj_set_state+0x364>
        if(style_list->ignore_trans) continue;
 800649e:	bf00      	nop
    for(part = 0; part < _LV_OBJ_PART_REAL_LAST; part++) {
 80064a0:	f897 31ee 	ldrb.w	r3, [r7, #494]	; 0x1ee
 80064a4:	3301      	adds	r3, #1
 80064a6:	f887 31ee 	strb.w	r3, [r7, #494]	; 0x1ee
 80064aa:	f897 31ee 	ldrb.w	r3, [r7, #494]	; 0x1ee
 80064ae:	2b3f      	cmp	r3, #63	; 0x3f
 80064b0:	f67f aed4 	bls.w	800625c <lv_obj_set_state+0x120>
 80064b4:	e000      	b.n	80064b8 <lv_obj_set_state+0x37c>
        if(style_list == NULL) break;   /*No more style lists*/
 80064b6:	bf00      	nop
        }
    }

    if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
 80064b8:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d107      	bne.n	80064d0 <lv_obj_set_state+0x394>
        lv_obj_invalidate(obj);
 80064c0:	1d3b      	adds	r3, r7, #4
 80064c2:	6818      	ldr	r0, [r3, #0]
 80064c4:	f7ff f9c0 	bl	8005848 <lv_obj_invalidate>
 80064c8:	e002      	b.n	80064d0 <lv_obj_set_state+0x394>
    if(obj->state == new_state) return;
 80064ca:	bf00      	nop
 80064cc:	e000      	b.n	80064d0 <lv_obj_set_state+0x394>
        return;
 80064ce:	bf00      	nop
    }

#endif

}
 80064d0:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd90      	pop	{r4, r7, pc}
 80064d8:	0802d7bc 	.word	0x0802d7bc
 80064dc:	08009271 	.word	0x08009271
 80064e0:	080093e9 	.word	0x080093e9
 80064e4:	080094a1 	.word	0x080094a1

080064e8 <lv_obj_add_state>:
 * from the previous state to the current
 * @param obj pointer to an object
 * @param state the state bits to add. E.g `LV_STATE_PRESSED | LV_STATE_FOCUSED`
 */
void lv_obj_add_state(lv_obj_t * obj, lv_state_t state)
{
 80064e8:	b590      	push	{r4, r7, lr}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	460b      	mov	r3, r1
 80064f2:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f015 fb21 	bl	801bb3c <lv_debug_check_null>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f083 0301 	eor.w	r3, r3, #1
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d008      	beq.n	8006518 <lv_obj_add_state+0x30>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f04f 0400 	mov.w	r4, #0
 800650c:	461a      	mov	r2, r3
 800650e:	4623      	mov	r3, r4
 8006510:	480c      	ldr	r0, [pc, #48]	; (8006544 <lv_obj_add_state+0x5c>)
 8006512:	f015 fb23 	bl	801bb5c <lv_debug_log_error>
 8006516:	e7fe      	b.n	8006516 <lv_obj_add_state+0x2e>

    lv_state_t new_state = obj->state | state;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800651e:	78fb      	ldrb	r3, [r7, #3]
 8006520:	4313      	orrs	r3, r2
 8006522:	73fb      	strb	r3, [r7, #15]
    if(obj->state != new_state) {
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800652a:	7bfa      	ldrb	r2, [r7, #15]
 800652c:	429a      	cmp	r2, r3
 800652e:	d004      	beq.n	800653a <lv_obj_add_state+0x52>
        lv_obj_set_state(obj, new_state);
 8006530:	7bfb      	ldrb	r3, [r7, #15]
 8006532:	4619      	mov	r1, r3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7ff fe01 	bl	800613c <lv_obj_set_state>
    }
}
 800653a:	bf00      	nop
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	bd90      	pop	{r4, r7, pc}
 8006542:	bf00      	nop
 8006544:	0802d7bc 	.word	0x0802d7bc

08006548 <lv_obj_clear_state>:
 * from the previous state to the current
 * @param obj pointer to an object
 * @param state the state bits to remove. E.g `LV_STATE_PRESSED | LV_STATE_FOCUSED`
 */
void lv_obj_clear_state(lv_obj_t * obj, lv_state_t state)
{
 8006548:	b590      	push	{r4, r7, lr}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f015 faf1 	bl	801bb3c <lv_debug_check_null>
 800655a:	4603      	mov	r3, r0
 800655c:	f083 0301 	eor.w	r3, r3, #1
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d008      	beq.n	8006578 <lv_obj_clear_state+0x30>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f04f 0400 	mov.w	r4, #0
 800656c:	461a      	mov	r2, r3
 800656e:	4623      	mov	r3, r4
 8006570:	480e      	ldr	r0, [pc, #56]	; (80065ac <lv_obj_clear_state+0x64>)
 8006572:	f015 faf3 	bl	801bb5c <lv_debug_log_error>
 8006576:	e7fe      	b.n	8006576 <lv_obj_clear_state+0x2e>

    lv_state_t new_state = obj->state & (~state);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800657e:	b25a      	sxtb	r2, r3
 8006580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006584:	43db      	mvns	r3, r3
 8006586:	b25b      	sxtb	r3, r3
 8006588:	4013      	ands	r3, r2
 800658a:	b25b      	sxtb	r3, r3
 800658c:	73fb      	strb	r3, [r7, #15]
    if(obj->state != new_state) {
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006594:	7bfa      	ldrb	r2, [r7, #15]
 8006596:	429a      	cmp	r2, r3
 8006598:	d004      	beq.n	80065a4 <lv_obj_clear_state+0x5c>
        lv_obj_set_state(obj, new_state);
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	4619      	mov	r1, r3
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7ff fdcc 	bl	800613c <lv_obj_set_state>
    }
}
 80065a4:	bf00      	nop
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd90      	pop	{r4, r7, pc}
 80065ac:	0802d7bc 	.word	0x0802d7bc

080065b0 <lv_event_send>:
 * @param event the type of the event from `lv_event_t`
 * @param data arbitrary data depending on the object type and the event. (Usually `NULL`)
 * @return LV_RES_OK: `obj` was not deleted in the event; LV_RES_INV: `obj` was deleted in the event
 */
lv_res_t lv_event_send(lv_obj_t * obj, lv_event_t event, const void * data)
{
 80065b0:	b590      	push	{r4, r7, lr}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	460b      	mov	r3, r1
 80065ba:	607a      	str	r2, [r7, #4]
 80065bc:	72fb      	strb	r3, [r7, #11]
    if(obj == NULL) return LV_RES_OK;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <lv_event_send+0x18>
 80065c4:	2301      	movs	r3, #1
 80065c6:	e01b      	b.n	8006600 <lv_event_send+0x50>

    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f015 fab7 	bl	801bb3c <lv_debug_check_null>
 80065ce:	4603      	mov	r3, r0
 80065d0:	f083 0301 	eor.w	r3, r3, #1
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d008      	beq.n	80065ec <lv_event_send+0x3c>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f04f 0400 	mov.w	r4, #0
 80065e0:	461a      	mov	r2, r3
 80065e2:	4623      	mov	r3, r4
 80065e4:	4808      	ldr	r0, [pc, #32]	; (8006608 <lv_event_send+0x58>)
 80065e6:	f015 fab9 	bl	801bb5c <lv_debug_log_error>
 80065ea:	e7fe      	b.n	80065ea <lv_event_send+0x3a>

    lv_res_t res;
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6998      	ldr	r0, [r3, #24]
 80065f0:	7afa      	ldrb	r2, [r7, #11]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68f9      	ldr	r1, [r7, #12]
 80065f6:	f000 f809 	bl	800660c <lv_event_send_func>
 80065fa:	4603      	mov	r3, r0
 80065fc:	75fb      	strb	r3, [r7, #23]
    return res;
 80065fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006600:	4618      	mov	r0, r3
 8006602:	371c      	adds	r7, #28
 8006604:	46bd      	mov	sp, r7
 8006606:	bd90      	pop	{r4, r7, pc}
 8006608:	0802d7bc 	.word	0x0802d7bc

0800660c <lv_event_send_func>:
 * @param event an event
 * @param data pointer to a custom data
 * @return LV_RES_OK: `obj` was not deleted in the event; LV_RES_INV: `obj` was deleted in the event
 */
lv_res_t lv_event_send_func(lv_event_cb_t event_xcb, lv_obj_t * obj, lv_event_t event, const void * data)
{
 800660c:	b590      	push	{r4, r7, lr}
 800660e:	b08b      	sub	sp, #44	; 0x2c
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	603b      	str	r3, [r7, #0]
 8006618:	4613      	mov	r3, r2
 800661a:	71fb      	strb	r3, [r7, #7]
    if(obj != NULL) {
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d011      	beq.n	8006646 <lv_event_send_func+0x3a>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006622:	68b8      	ldr	r0, [r7, #8]
 8006624:	f015 fa8a 	bl	801bb3c <lv_debug_check_null>
 8006628:	4603      	mov	r3, r0
 800662a:	f083 0301 	eor.w	r3, r3, #1
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d008      	beq.n	8006646 <lv_event_send_func+0x3a>
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	f04f 0400 	mov.w	r4, #0
 800663a:	461a      	mov	r2, r3
 800663c:	4623      	mov	r3, r4
 800663e:	4831      	ldr	r0, [pc, #196]	; (8006704 <lv_event_send_func+0xf8>)
 8006640:	f015 fa8c 	bl	801bb5c <lv_debug_log_error>
 8006644:	e7fe      	b.n	8006644 <lv_event_send_func+0x38>

    /* Build a simple linked list from the objects used in the events
     * It's important to know if an this object was deleted by a nested event
     * called from this `even_cb`. */
    lv_event_temp_data_t event_temp_data;
    event_temp_data.obj     = obj;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	613b      	str	r3, [r7, #16]
    event_temp_data.deleted = false;
 800664a:	2300      	movs	r3, #0
 800664c:	753b      	strb	r3, [r7, #20]
    event_temp_data.prev    = NULL;
 800664e:	2300      	movs	r3, #0
 8006650:	61bb      	str	r3, [r7, #24]

    if(event_temp_data_head) {
 8006652:	4b2d      	ldr	r3, [pc, #180]	; (8006708 <lv_event_send_func+0xfc>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <lv_event_send_func+0x54>
        event_temp_data.prev = event_temp_data_head;
 800665a:	4b2b      	ldr	r3, [pc, #172]	; (8006708 <lv_event_send_func+0xfc>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	61bb      	str	r3, [r7, #24]
    }
    event_temp_data_head = &event_temp_data;
 8006660:	4a29      	ldr	r2, [pc, #164]	; (8006708 <lv_event_send_func+0xfc>)
 8006662:	f107 0310 	add.w	r3, r7, #16
 8006666:	6013      	str	r3, [r2, #0]

    const void * event_act_data_save = event_act_data;
 8006668:	4b28      	ldr	r3, [pc, #160]	; (800670c <lv_event_send_func+0x100>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	627b      	str	r3, [r7, #36]	; 0x24
    event_act_data                   = data;
 800666e:	4a27      	ldr	r2, [pc, #156]	; (800670c <lv_event_send_func+0x100>)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	6013      	str	r3, [r2, #0]

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 8006674:	f7fb fc82 	bl	8001f7c <lv_indev_get_act>
 8006678:	6238      	str	r0, [r7, #32]
    if(indev_act) {
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d009      	beq.n	8006694 <lv_event_send_func+0x88>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d005      	beq.n	8006694 <lv_event_send_func+0x88>
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	6a3a      	ldr	r2, [r7, #32]
 800668e:	79f9      	ldrb	r1, [r7, #7]
 8006690:	4610      	mov	r0, r2
 8006692:	4798      	blx	r3
    }

    /*Call the event callback itself*/
    if(event_xcb) event_xcb(obj, event);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d004      	beq.n	80066a4 <lv_event_send_func+0x98>
 800669a:	79fa      	ldrb	r2, [r7, #7]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4611      	mov	r1, r2
 80066a0:	68b8      	ldr	r0, [r7, #8]
 80066a2:	4798      	blx	r3

    /*Restore the event data*/
    event_act_data = event_act_data_save;
 80066a4:	4a19      	ldr	r2, [pc, #100]	; (800670c <lv_event_send_func+0x100>)
 80066a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a8:	6013      	str	r3, [r2, #0]

    /*Remove this element from the list*/
    event_temp_data_head = event_temp_data_head->prev;
 80066aa:	4b17      	ldr	r3, [pc, #92]	; (8006708 <lv_event_send_func+0xfc>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	4a15      	ldr	r2, [pc, #84]	; (8006708 <lv_event_send_func+0xfc>)
 80066b2:	6013      	str	r3, [r2, #0]

    if(event_temp_data.deleted) {
 80066b4:	7d3b      	ldrb	r3, [r7, #20]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <lv_event_send_func+0xb2>
        return LV_RES_INV;
 80066ba:	2300      	movs	r3, #0
 80066bc:	e01d      	b.n	80066fa <lv_event_send_func+0xee>
    }

    if(obj) {
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d019      	beq.n	80066f8 <lv_event_send_func+0xec>
        if(obj->parent_event && obj->parent) {
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80066ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d011      	beq.n	80066f8 <lv_event_send_func+0xec>
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00d      	beq.n	80066f8 <lv_event_send_func+0xec>
            lv_res_t res = lv_event_send(obj->parent, event, data);
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	79f9      	ldrb	r1, [r7, #7]
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7ff ff63 	bl	80065b0 <lv_event_send>
 80066ea:	4603      	mov	r3, r0
 80066ec:	77fb      	strb	r3, [r7, #31]
            if(res != LV_RES_OK) {
 80066ee:	7ffb      	ldrb	r3, [r7, #31]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d001      	beq.n	80066f8 <lv_event_send_func+0xec>
                return LV_RES_INV;
 80066f4:	2300      	movs	r3, #0
 80066f6:	e000      	b.n	80066fa <lv_event_send_func+0xee>
            }
        }
    }

    return LV_RES_OK;
 80066f8:	2301      	movs	r3, #1
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	372c      	adds	r7, #44	; 0x2c
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd90      	pop	{r4, r7, pc}
 8006702:	bf00      	nop
 8006704:	0802d7bc 	.word	0x0802d7bc
 8006708:	20018b6c 	.word	0x20018b6c
 800670c:	20018b70 	.word	0x20018b70

08006710 <lv_signal_send>:
 * @param obj pointer to an object
 * @param event the type of the event from `lv_event_t`.
 * @return LV_RES_OK or LV_RES_INV
 */
lv_res_t lv_signal_send(lv_obj_t * obj, lv_signal_t signal, void * param)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	460b      	mov	r3, r1
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	72fb      	strb	r3, [r7, #11]
    if(obj == NULL) return LV_RES_OK;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <lv_signal_send+0x18>
 8006724:	2301      	movs	r3, #1
 8006726:	e00e      	b.n	8006746 <lv_signal_send+0x36>

    lv_res_t res = LV_RES_OK;
 8006728:	2301      	movs	r3, #1
 800672a:	75fb      	strb	r3, [r7, #23]
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d007      	beq.n	8006744 <lv_signal_send+0x34>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	7af9      	ldrb	r1, [r7, #11]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	4798      	blx	r3
 8006740:	4603      	mov	r3, r0
 8006742:	75fb      	strb	r3, [r7, #23]

    return res;
 8006744:	7dfb      	ldrb	r3, [r7, #23]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3718      	adds	r7, #24
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
	...

08006750 <lv_obj_refresh_ext_draw_pad>:
 * Send a 'LV_SIGNAL_REFR_EXT_SIZE' signal to the object to refresh the extended draw area.
 * he object needs to be invalidated by `lv_obj_invalidate(obj)` manually after this function.
 * @param obj pointer to an object
 */
void lv_obj_refresh_ext_draw_pad(lv_obj_t * obj)
{
 8006750:	b590      	push	{r4, r7, lr}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f015 f9ef 	bl	801bb3c <lv_debug_check_null>
 800675e:	4603      	mov	r3, r0
 8006760:	f083 0301 	eor.w	r3, r3, #1
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d008      	beq.n	800677c <lv_obj_refresh_ext_draw_pad+0x2c>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f04f 0400 	mov.w	r4, #0
 8006770:	461a      	mov	r2, r3
 8006772:	4623      	mov	r3, r4
 8006774:	4808      	ldr	r0, [pc, #32]	; (8006798 <lv_obj_refresh_ext_draw_pad+0x48>)
 8006776:	f015 f9f1 	bl	801bb5c <lv_debug_log_error>
 800677a:	e7fe      	b.n	800677a <lv_obj_refresh_ext_draw_pad+0x2a>

    obj->ext_draw_pad = 0;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	865a      	strh	r2, [r3, #50]	; 0x32
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	2200      	movs	r2, #0
 8006788:	2106      	movs	r1, #6
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	4798      	blx	r3

}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	bd90      	pop	{r4, r7, pc}
 8006796:	bf00      	nop
 8006798:	0802d7bc 	.word	0x0802d7bc

0800679c <lv_obj_get_screen>:
 * Return with the screen of an object
 * @param obj pointer to an object
 * @return pointer to a screen
 */
lv_obj_t * lv_obj_get_screen(const lv_obj_t * obj)
{
 800679c:	b590      	push	{r4, r7, lr}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f015 f9c9 	bl	801bb3c <lv_debug_check_null>
 80067aa:	4603      	mov	r3, r0
 80067ac:	f083 0301 	eor.w	r3, r3, #1
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d008      	beq.n	80067c8 <lv_obj_get_screen+0x2c>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f04f 0400 	mov.w	r4, #0
 80067bc:	461a      	mov	r2, r3
 80067be:	4623      	mov	r3, r4
 80067c0:	4809      	ldr	r0, [pc, #36]	; (80067e8 <lv_obj_get_screen+0x4c>)
 80067c2:	f015 f9cb 	bl	801bb5c <lv_debug_log_error>
 80067c6:	e7fe      	b.n	80067c6 <lv_obj_get_screen+0x2a>

    const lv_obj_t * par = obj;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	60fb      	str	r3, [r7, #12]
    const lv_obj_t * act_p;

    do {
        act_p = par;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	60bb      	str	r3, [r7, #8]
        par   = lv_obj_get_parent(act_p);
 80067d0:	68b8      	ldr	r0, [r7, #8]
 80067d2:	f000 f859 	bl	8006888 <lv_obj_get_parent>
 80067d6:	60f8      	str	r0, [r7, #12]
    } while(par != NULL);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1f6      	bne.n	80067cc <lv_obj_get_screen+0x30>

    return (lv_obj_t *)act_p;
 80067de:	68bb      	ldr	r3, [r7, #8]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd90      	pop	{r4, r7, pc}
 80067e8:	0802d7bc 	.word	0x0802d7bc

080067ec <lv_obj_get_disp>:
 * Get the display of an object
 * @param scr pointer to an object
 * @return pointer the object's display
 */
lv_disp_t * lv_obj_get_disp(const lv_obj_t * obj)
{
 80067ec:	b590      	push	{r4, r7, lr}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f015 f9a1 	bl	801bb3c <lv_debug_check_null>
 80067fa:	4603      	mov	r3, r0
 80067fc:	f083 0301 	eor.w	r3, r3, #1
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d008      	beq.n	8006818 <lv_obj_get_disp+0x2c>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f04f 0400 	mov.w	r4, #0
 800680c:	461a      	mov	r2, r3
 800680e:	4623      	mov	r3, r4
 8006810:	481b      	ldr	r0, [pc, #108]	; (8006880 <lv_obj_get_disp+0x94>)
 8006812:	f015 f9a3 	bl	801bb5c <lv_debug_log_error>
 8006816:	e7fe      	b.n	8006816 <lv_obj_get_disp+0x2a>

    const lv_obj_t * scr;

    if(obj->parent == NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d102      	bne.n	8006826 <lv_obj_get_disp+0x3a>
        scr = obj; /*`obj` is a screen*/
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	617b      	str	r3, [r7, #20]
 8006824:	e003      	b.n	800682e <lv_obj_get_disp+0x42>
    else
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7ff ffb8 	bl	800679c <lv_obj_get_screen>
 800682c:	6178      	str	r0, [r7, #20]

    lv_disp_t * d;
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
 800682e:	4815      	ldr	r0, [pc, #84]	; (8006884 <lv_obj_get_disp+0x98>)
 8006830:	f015 fd3a 	bl	801c2a8 <_lv_ll_get_head>
 8006834:	6138      	str	r0, [r7, #16]
 8006836:	e01b      	b.n	8006870 <lv_obj_get_disp+0x84>
        lv_obj_t * s;
        _LV_LL_READ(d->scr_ll, s) {
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	3338      	adds	r3, #56	; 0x38
 800683c:	4618      	mov	r0, r3
 800683e:	f015 fd33 	bl	801c2a8 <_lv_ll_get_head>
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	e00c      	b.n	8006860 <lv_obj_get_disp+0x74>
            if(s == scr) return d;
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	429a      	cmp	r2, r3
 800684c:	d101      	bne.n	8006852 <lv_obj_get_disp+0x66>
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	e012      	b.n	8006878 <lv_obj_get_disp+0x8c>
        _LV_LL_READ(d->scr_ll, s) {
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	3338      	adds	r3, #56	; 0x38
 8006856:	68f9      	ldr	r1, [r7, #12]
 8006858:	4618      	mov	r0, r3
 800685a:	f015 fd4b 	bl	801c2f4 <_lv_ll_get_next>
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1ef      	bne.n	8006846 <lv_obj_get_disp+0x5a>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
 8006866:	6939      	ldr	r1, [r7, #16]
 8006868:	4806      	ldr	r0, [pc, #24]	; (8006884 <lv_obj_get_disp+0x98>)
 800686a:	f015 fd43 	bl	801c2f4 <_lv_ll_get_next>
 800686e:	6138      	str	r0, [r7, #16]
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e0      	bne.n	8006838 <lv_obj_get_disp+0x4c>
        }
    }

    LV_LOG_WARN("lv_scr_get_disp: screen not found")
    return NULL;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	371c      	adds	r7, #28
 800687c:	46bd      	mov	sp, r7
 800687e:	bd90      	pop	{r4, r7, pc}
 8006880:	0802d7bc 	.word	0x0802d7bc
 8006884:	2002179c 	.word	0x2002179c

08006888 <lv_obj_get_parent>:
 * Returns with the parent of an object
 * @param obj pointer to an object
 * @return pointer to the parent of  'obj'
 */
lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
 8006888:	b590      	push	{r4, r7, lr}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f015 f953 	bl	801bb3c <lv_debug_check_null>
 8006896:	4603      	mov	r3, r0
 8006898:	f083 0301 	eor.w	r3, r3, #1
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d008      	beq.n	80068b4 <lv_obj_get_parent+0x2c>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f04f 0400 	mov.w	r4, #0
 80068a8:	461a      	mov	r2, r3
 80068aa:	4623      	mov	r3, r4
 80068ac:	4804      	ldr	r0, [pc, #16]	; (80068c0 <lv_obj_get_parent+0x38>)
 80068ae:	f015 f955 	bl	801bb5c <lv_debug_log_error>
 80068b2:	e7fe      	b.n	80068b2 <lv_obj_get_parent+0x2a>

    return obj->parent;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd90      	pop	{r4, r7, pc}
 80068c0:	0802d7bc 	.word	0x0802d7bc

080068c4 <lv_obj_get_child>:
 * @param child NULL at first call to get the next children
 *                  and the previous return value later
 * @return the child after 'act_child' or NULL if no more child
 */
lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, const lv_obj_t * child)
{
 80068c4:	b590      	push	{r4, r7, lr}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f015 f934 	bl	801bb3c <lv_debug_check_null>
 80068d4:	4603      	mov	r3, r0
 80068d6:	f083 0301 	eor.w	r3, r3, #1
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d008      	beq.n	80068f2 <lv_obj_get_child+0x2e>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f04f 0400 	mov.w	r4, #0
 80068e6:	461a      	mov	r2, r3
 80068e8:	4623      	mov	r3, r4
 80068ea:	480e      	ldr	r0, [pc, #56]	; (8006924 <lv_obj_get_child+0x60>)
 80068ec:	f015 f936 	bl	801bb5c <lv_debug_log_error>
 80068f0:	e7fe      	b.n	80068f0 <lv_obj_get_child+0x2c>

    lv_obj_t * result = NULL;
 80068f2:	2300      	movs	r3, #0
 80068f4:	60fb      	str	r3, [r7, #12]

    if(child == NULL) {
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d106      	bne.n	800690a <lv_obj_get_child+0x46>
        result = _lv_ll_get_head(&obj->child_ll);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	3304      	adds	r3, #4
 8006900:	4618      	mov	r0, r3
 8006902:	f015 fcd1 	bl	801c2a8 <_lv_ll_get_head>
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	e006      	b.n	8006918 <lv_obj_get_child+0x54>
    }
    else {
        result = _lv_ll_get_next(&obj->child_ll, child);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	3304      	adds	r3, #4
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	4618      	mov	r0, r3
 8006912:	f015 fcef 	bl	801c2f4 <_lv_ll_get_next>
 8006916:	60f8      	str	r0, [r7, #12]
    }

    return result;
 8006918:	68fb      	ldr	r3, [r7, #12]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	bd90      	pop	{r4, r7, pc}
 8006922:	bf00      	nop
 8006924:	0802d7bc 	.word	0x0802d7bc

08006928 <lv_obj_get_coords>:
 * Copy the coordinates of an object to an area
 * @param obj pointer to an object
 * @param cords_p pointer to an area to store the coordinates
 */
void lv_obj_get_coords(const lv_obj_t * obj, lv_area_t * cords_p)
{
 8006928:	b590      	push	{r4, r7, lr}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f015 f902 	bl	801bb3c <lv_debug_check_null>
 8006938:	4603      	mov	r3, r0
 800693a:	f083 0301 	eor.w	r3, r3, #1
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	d008      	beq.n	8006956 <lv_obj_get_coords+0x2e>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f04f 0400 	mov.w	r4, #0
 800694a:	461a      	mov	r2, r3
 800694c:	4623      	mov	r3, r4
 800694e:	4807      	ldr	r0, [pc, #28]	; (800696c <lv_obj_get_coords+0x44>)
 8006950:	f015 f904 	bl	801bb5c <lv_debug_log_error>
 8006954:	e7fe      	b.n	8006954 <lv_obj_get_coords+0x2c>

    lv_area_copy(cords_p, &obj->coords);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	3310      	adds	r3, #16
 800695a:	4619      	mov	r1, r3
 800695c:	6838      	ldr	r0, [r7, #0]
 800695e:	f7fd fc11 	bl	8004184 <lv_area_copy>
}
 8006962:	bf00      	nop
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	bd90      	pop	{r4, r7, pc}
 800696a:	bf00      	nop
 800696c:	0802d7bc 	.word	0x0802d7bc

08006970 <lv_obj_get_x>:
 * Get the x coordinate of object
 * @param obj pointer to an object
 * @return distance of 'obj' from the left side of its parent
 */
lv_coord_t lv_obj_get_x(const lv_obj_t * obj)
{
 8006970:	b590      	push	{r4, r7, lr}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f015 f8df 	bl	801bb3c <lv_debug_check_null>
 800697e:	4603      	mov	r3, r0
 8006980:	f083 0301 	eor.w	r3, r3, #1
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d008      	beq.n	800699c <lv_obj_get_x+0x2c>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f04f 0400 	mov.w	r4, #0
 8006990:	461a      	mov	r2, r3
 8006992:	4623      	mov	r3, r4
 8006994:	480f      	ldr	r0, [pc, #60]	; (80069d4 <lv_obj_get_x+0x64>)
 8006996:	f015 f8e1 	bl	801bb5c <lv_debug_log_error>
 800699a:	e7fe      	b.n	800699a <lv_obj_get_x+0x2a>

    lv_coord_t rel_x;
    lv_obj_t * parent = lv_obj_get_parent(obj);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7ff ff73 	bl	8006888 <lv_obj_get_parent>
 80069a2:	60b8      	str	r0, [r7, #8]
    if(parent) {
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00b      	beq.n	80069c2 <lv_obj_get_x+0x52>
        rel_x             = obj->coords.x1 - parent->coords.x1;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	b29b      	uxth	r3, r3
 80069be:	81fb      	strh	r3, [r7, #14]
 80069c0:	e002      	b.n	80069c8 <lv_obj_get_x+0x58>
    }
    else {
        rel_x = obj->coords.x1;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	8a1b      	ldrh	r3, [r3, #16]
 80069c6:	81fb      	strh	r3, [r7, #14]
    }
    return rel_x;
 80069c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3714      	adds	r7, #20
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd90      	pop	{r4, r7, pc}
 80069d4:	0802d7bc 	.word	0x0802d7bc

080069d8 <lv_obj_get_y>:
 * Get the y coordinate of object
 * @param obj pointer to an object
 * @return distance of 'obj' from the top of its parent
 */
lv_coord_t lv_obj_get_y(const lv_obj_t * obj)
{
 80069d8:	b590      	push	{r4, r7, lr}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f015 f8ab 	bl	801bb3c <lv_debug_check_null>
 80069e6:	4603      	mov	r3, r0
 80069e8:	f083 0301 	eor.w	r3, r3, #1
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d008      	beq.n	8006a04 <lv_obj_get_y+0x2c>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f04f 0400 	mov.w	r4, #0
 80069f8:	461a      	mov	r2, r3
 80069fa:	4623      	mov	r3, r4
 80069fc:	480f      	ldr	r0, [pc, #60]	; (8006a3c <lv_obj_get_y+0x64>)
 80069fe:	f015 f8ad 	bl	801bb5c <lv_debug_log_error>
 8006a02:	e7fe      	b.n	8006a02 <lv_obj_get_y+0x2a>

    lv_coord_t rel_y;
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7ff ff3f 	bl	8006888 <lv_obj_get_parent>
 8006a0a:	60b8      	str	r0, [r7, #8]
    if(parent) {
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00b      	beq.n	8006a2a <lv_obj_get_y+0x52>
        rel_y             = obj->coords.y1 - parent->coords.y1;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	81fb      	strh	r3, [r7, #14]
 8006a28:	e002      	b.n	8006a30 <lv_obj_get_y+0x58>
    }
    else {
        rel_y = obj->coords.y1;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	8a5b      	ldrh	r3, [r3, #18]
 8006a2e:	81fb      	strh	r3, [r7, #14]
    }
    return rel_y;
 8006a30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd90      	pop	{r4, r7, pc}
 8006a3c:	0802d7bc 	.word	0x0802d7bc

08006a40 <lv_obj_get_width>:
 * Get the width of an object
 * @param obj pointer to an object
 * @return the width
 */
lv_coord_t lv_obj_get_width(const lv_obj_t * obj)
{
 8006a40:	b590      	push	{r4, r7, lr}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f015 f877 	bl	801bb3c <lv_debug_check_null>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	f083 0301 	eor.w	r3, r3, #1
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d008      	beq.n	8006a6c <lv_obj_get_width+0x2c>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f04f 0400 	mov.w	r4, #0
 8006a60:	461a      	mov	r2, r3
 8006a62:	4623      	mov	r3, r4
 8006a64:	4806      	ldr	r0, [pc, #24]	; (8006a80 <lv_obj_get_width+0x40>)
 8006a66:	f015 f879 	bl	801bb5c <lv_debug_log_error>
 8006a6a:	e7fe      	b.n	8006a6a <lv_obj_get_width+0x2a>

    return lv_area_get_width(&obj->coords);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	3310      	adds	r3, #16
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fd fb95 	bl	80041a0 <lv_area_get_width>
 8006a76:	4603      	mov	r3, r0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd90      	pop	{r4, r7, pc}
 8006a80:	0802d7bc 	.word	0x0802d7bc

08006a84 <lv_obj_get_height>:
 * Get the height of an object
 * @param obj pointer to an object
 * @return the height
 */
lv_coord_t lv_obj_get_height(const lv_obj_t * obj)
{
 8006a84:	b590      	push	{r4, r7, lr}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f015 f855 	bl	801bb3c <lv_debug_check_null>
 8006a92:	4603      	mov	r3, r0
 8006a94:	f083 0301 	eor.w	r3, r3, #1
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d008      	beq.n	8006ab0 <lv_obj_get_height+0x2c>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f04f 0400 	mov.w	r4, #0
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	4623      	mov	r3, r4
 8006aa8:	4806      	ldr	r0, [pc, #24]	; (8006ac4 <lv_obj_get_height+0x40>)
 8006aaa:	f015 f857 	bl	801bb5c <lv_debug_log_error>
 8006aae:	e7fe      	b.n	8006aae <lv_obj_get_height+0x2a>

    return lv_area_get_height(&obj->coords);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3310      	adds	r3, #16
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7fd fb8a 	bl	80041ce <lv_area_get_height>
 8006aba:	4603      	mov	r3, r0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd90      	pop	{r4, r7, pc}
 8006ac4:	0802d7bc 	.word	0x0802d7bc

08006ac8 <lv_obj_get_style_list>:
/*-----------------
 * Appearance get
 *---------------*/

lv_style_list_t * lv_obj_get_style_list(const lv_obj_t * obj, uint8_t part)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	70fb      	strb	r3, [r7, #3]
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
 8006ad4:	78fb      	ldrb	r3, [r7, #3]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d102      	bne.n	8006ae0 <lv_obj_get_style_list+0x18>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	3328      	adds	r3, #40	; 0x28
 8006ade:	e012      	b.n	8006b06 <lv_obj_get_style_list+0x3e>

    lv_get_style_info_t info;
    info.part = part;
 8006ae0:	78fb      	ldrb	r3, [r7, #3]
 8006ae2:	733b      	strb	r3, [r7, #12]
    info.result = NULL;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	613b      	str	r3, [r7, #16]

    lv_res_t res;
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
 8006ae8:	f107 030c 	add.w	r3, r7, #12
 8006aec:	461a      	mov	r2, r3
 8006aee:	2108      	movs	r1, #8
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7ff fe0d 	bl	8006710 <lv_signal_send>
 8006af6:	4603      	mov	r3, r0
 8006af8:	75fb      	strb	r3, [r7, #23]

    if(res != LV_RES_OK) return NULL;
 8006afa:	7dfb      	ldrb	r3, [r7, #23]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d001      	beq.n	8006b04 <lv_obj_get_style_list+0x3c>
 8006b00:	2300      	movs	r3, #0
 8006b02:	e000      	b.n	8006b06 <lv_obj_get_style_list+0x3e>

    return info.result;
 8006b04:	693b      	ldr	r3, [r7, #16]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3718      	adds	r7, #24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <_lv_obj_get_style_int>:
 * @note shouldn't be used directly. Use the specific property get functions instead.
 *       For example: `lv_obj_style_get_border_width()`
 * @note for performance reasons it's not checked if the property really has integer type
 */
lv_style_int_t _lv_obj_get_style_int(const lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b088      	sub	sp, #32
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
 8006b16:	460b      	mov	r3, r1
 8006b18:	70fb      	strb	r3, [r7, #3]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	803b      	strh	r3, [r7, #0]
    lv_style_property_t prop_ori = prop;
 8006b1e:	883b      	ldrh	r3, [r7, #0]
 8006b20:	833b      	strh	r3, [r7, #24]

    lv_style_attr_t attr;
    attr = prop_ori >> 8;
 8006b22:	8b3b      	ldrh	r3, [r7, #24]
 8006b24:	0a1b      	lsrs	r3, r3, #8
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	75fb      	strb	r3, [r7, #23]

    lv_style_int_t value_act;
    lv_res_t res = LV_RES_INV;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	75bb      	strb	r3, [r7, #22]
    const lv_obj_t * parent = obj;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	61fb      	str	r3, [r7, #28]
    while(parent) {
 8006b32:	e14a      	b.n	8006dca <_lv_obj_get_style_int+0x2bc>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8006b34:	78fb      	ldrb	r3, [r7, #3]
 8006b36:	4619      	mov	r1, r3
 8006b38:	69f8      	ldr	r0, [r7, #28]
 8006b3a:	f7ff ffc5 	bl	8006ac8 <lv_obj_get_style_list>
 8006b3e:	6138      	str	r0, [r7, #16]
        if(!list->ignore_cache && list->style_cnt > 0) {
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	795b      	ldrb	r3, [r3, #5]
 8006b44:	f003 0308 	and.w	r3, r3, #8
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f040 8112 	bne.w	8006d74 <_lv_obj_get_style_int+0x266>
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	791b      	ldrb	r3, [r3, #4]
 8006b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 810a 	beq.w	8006d74 <_lv_obj_get_style_int+0x266>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	795b      	ldrb	r3, [r3, #5]
 8006b64:	f003 0304 	and.w	r3, r3, #4
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d108      	bne.n	8006b80 <_lv_obj_get_style_int+0x72>
 8006b6e:	883b      	ldrh	r3, [r7, #0]
 8006b70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	78fb      	ldrb	r3, [r7, #3]
 8006b78:	4619      	mov	r1, r3
 8006b7a:	69f8      	ldr	r0, [r7, #28]
 8006b7c:	f002 fd4c 	bl	8009618 <update_style_cache>

            bool def = false;
 8006b80:	2300      	movs	r3, #0
 8006b82:	76fb      	strb	r3, [r7, #27]
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 8006b84:	883b      	ldrh	r3, [r7, #0]
 8006b86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b8a:	2b33      	cmp	r3, #51	; 0x33
 8006b8c:	f000 8086 	beq.w	8006c9c <_lv_obj_get_style_int+0x18e>
 8006b90:	2b33      	cmp	r3, #51	; 0x33
 8006b92:	dc23      	bgt.n	8006bdc <_lv_obj_get_style_int+0xce>
 8006b94:	2b13      	cmp	r3, #19
 8006b96:	dc0f      	bgt.n	8006bb8 <_lv_obj_get_style_int+0xaa>
 8006b98:	2b10      	cmp	r3, #16
 8006b9a:	f280 80a7 	bge.w	8006cec <_lv_obj_get_style_int+0x1de>
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d04a      	beq.n	8006c38 <_lv_obj_get_style_int+0x12a>
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	dc03      	bgt.n	8006bae <_lv_obj_get_style_int+0xa0>
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	f000 808c 	beq.w	8006cc4 <_lv_obj_get_style_int+0x1b6>
 8006bac:	e0df      	b.n	8006d6e <_lv_obj_get_style_int+0x260>
 8006bae:	3b04      	subs	r3, #4
 8006bb0:	2b03      	cmp	r3, #3
 8006bb2:	f200 80dc 	bhi.w	8006d6e <_lv_obj_get_style_int+0x260>
 8006bb6:	e053      	b.n	8006c60 <_lv_obj_get_style_int+0x152>
 8006bb8:	2b20      	cmp	r3, #32
 8006bba:	f000 80ab 	beq.w	8006d14 <_lv_obj_get_style_int+0x206>
 8006bbe:	2b20      	cmp	r3, #32
 8006bc0:	dc04      	bgt.n	8006bcc <_lv_obj_get_style_int+0xbe>
 8006bc2:	3b15      	subs	r3, #21
 8006bc4:	2b03      	cmp	r3, #3
 8006bc6:	f200 80d2 	bhi.w	8006d6e <_lv_obj_get_style_int+0x260>
 8006bca:	e099      	b.n	8006d00 <_lv_obj_get_style_int+0x1f2>
 8006bcc:	2b31      	cmp	r3, #49	; 0x31
 8006bce:	d05b      	beq.n	8006c88 <_lv_obj_get_style_int+0x17a>
 8006bd0:	2b31      	cmp	r3, #49	; 0x31
 8006bd2:	f300 809f 	bgt.w	8006d14 <_lv_obj_get_style_int+0x206>
 8006bd6:	2b30      	cmp	r3, #48	; 0x30
 8006bd8:	d04c      	beq.n	8006c74 <_lv_obj_get_style_int+0x166>
 8006bda:	e0c8      	b.n	8006d6e <_lv_obj_get_style_int+0x260>
 8006bdc:	2b72      	cmp	r3, #114	; 0x72
 8006bde:	f000 8099 	beq.w	8006d14 <_lv_obj_get_style_int+0x206>
 8006be2:	2b72      	cmp	r3, #114	; 0x72
 8006be4:	dc10      	bgt.n	8006c08 <_lv_obj_get_style_int+0xfa>
 8006be6:	2b50      	cmp	r3, #80	; 0x50
 8006be8:	d076      	beq.n	8006cd8 <_lv_obj_get_style_int+0x1ca>
 8006bea:	2b50      	cmp	r3, #80	; 0x50
 8006bec:	dc05      	bgt.n	8006bfa <_lv_obj_get_style_int+0xec>
 8006bee:	2b40      	cmp	r3, #64	; 0x40
 8006bf0:	d05e      	beq.n	8006cb0 <_lv_obj_get_style_int+0x1a2>
 8006bf2:	2b42      	cmp	r3, #66	; 0x42
 8006bf4:	f000 808e 	beq.w	8006d14 <_lv_obj_get_style_int+0x206>
 8006bf8:	e0b9      	b.n	8006d6e <_lv_obj_get_style_int+0x260>
 8006bfa:	2b54      	cmp	r3, #84	; 0x54
 8006bfc:	f000 808a 	beq.w	8006d14 <_lv_obj_get_style_int+0x206>
 8006c00:	2b60      	cmp	r3, #96	; 0x60
 8006c02:	f000 8087 	beq.w	8006d14 <_lv_obj_get_style_int+0x206>
 8006c06:	e0b2      	b.n	8006d6e <_lv_obj_get_style_int+0x260>
 8006c08:	f248 0281 	movw	r2, #32897	; 0x8081
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	dc06      	bgt.n	8006c1e <_lv_obj_get_style_int+0x110>
 8006c10:	f248 0280 	movw	r2, #32896	; 0x8080
 8006c14:	4293      	cmp	r3, r2
 8006c16:	da19      	bge.n	8006c4c <_lv_obj_get_style_int+0x13e>
 8006c18:	2b91      	cmp	r3, #145	; 0x91
 8006c1a:	d07b      	beq.n	8006d14 <_lv_obj_get_style_int+0x206>
 8006c1c:	e0a7      	b.n	8006d6e <_lv_obj_get_style_int+0x260>
 8006c1e:	f248 0283 	movw	r2, #32899	; 0x8083
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d076      	beq.n	8006d14 <_lv_obj_get_style_int+0x206>
 8006c26:	f248 0283 	movw	r2, #32899	; 0x8083
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	db7c      	blt.n	8006d28 <_lv_obj_get_style_int+0x21a>
 8006c2e:	f248 02a0 	movw	r2, #32928	; 0x80a0
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d06e      	beq.n	8006d14 <_lv_obj_get_style_int+0x206>
 8006c36:	e09a      	b.n	8006d6e <_lv_obj_get_style_int+0x260>
                case LV_STYLE_CLIP_CORNER:
                    if(list->clip_corner_off) def = true;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	795b      	ldrb	r3, [r3, #5]
 8006c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d07a      	beq.n	8006d3c <_lv_obj_get_style_int+0x22e>
 8006c46:	2301      	movs	r3, #1
 8006c48:	76fb      	strb	r3, [r7, #27]
                    break;
 8006c4a:	e077      	b.n	8006d3c <_lv_obj_get_style_int+0x22e>
                case LV_STYLE_TEXT_LETTER_SPACE:
                case LV_STYLE_TEXT_LINE_SPACE:
                    if(list->text_space_zero) def = true;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	79db      	ldrb	r3, [r3, #7]
 8006c50:	f003 0320 	and.w	r3, r3, #32
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d072      	beq.n	8006d40 <_lv_obj_get_style_int+0x232>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	76fb      	strb	r3, [r7, #27]
                    break;
 8006c5e:	e06f      	b.n	8006d40 <_lv_obj_get_style_int+0x232>
                case LV_STYLE_TRANSFORM_ANGLE:
                case LV_STYLE_TRANSFORM_WIDTH:
                case LV_STYLE_TRANSFORM_HEIGHT:
                case LV_STYLE_TRANSFORM_ZOOM:
                    if(list->transform_all_zero) def = true;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	795b      	ldrb	r3, [r3, #5]
 8006c64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d06a      	beq.n	8006d44 <_lv_obj_get_style_int+0x236>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	76fb      	strb	r3, [r7, #27]
                    break;
 8006c72:	e067      	b.n	8006d44 <_lv_obj_get_style_int+0x236>
                case LV_STYLE_BORDER_WIDTH:
                    if(list->border_width_zero) def = true;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	799b      	ldrb	r3, [r3, #6]
 8006c78:	f003 0320 	and.w	r3, r3, #32
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d062      	beq.n	8006d48 <_lv_obj_get_style_int+0x23a>
 8006c82:	2301      	movs	r3, #1
 8006c84:	76fb      	strb	r3, [r7, #27]
                    break;
 8006c86:	e05f      	b.n	8006d48 <_lv_obj_get_style_int+0x23a>
                case LV_STYLE_BORDER_SIDE:
                    if(list->border_side_full) def = true;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	799b      	ldrb	r3, [r3, #6]
 8006c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d05a      	beq.n	8006d4c <_lv_obj_get_style_int+0x23e>
 8006c96:	2301      	movs	r3, #1
 8006c98:	76fb      	strb	r3, [r7, #27]
                    break;
 8006c9a:	e057      	b.n	8006d4c <_lv_obj_get_style_int+0x23e>
                case LV_STYLE_BORDER_POST:
                    if(list->border_post_off) def = true;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	799b      	ldrb	r3, [r3, #6]
 8006ca0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d052      	beq.n	8006d50 <_lv_obj_get_style_int+0x242>
 8006caa:	2301      	movs	r3, #1
 8006cac:	76fb      	strb	r3, [r7, #27]
                    break;
 8006cae:	e04f      	b.n	8006d50 <_lv_obj_get_style_int+0x242>
                case LV_STYLE_OUTLINE_WIDTH:
                    if(list->outline_width_zero) def = true;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	79db      	ldrb	r3, [r3, #7]
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d04a      	beq.n	8006d54 <_lv_obj_get_style_int+0x246>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	76fb      	strb	r3, [r7, #27]
                    break;
 8006cc2:	e047      	b.n	8006d54 <_lv_obj_get_style_int+0x246>
                case LV_STYLE_RADIUS:
                    if(list->radius_zero) def = true;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	795b      	ldrb	r3, [r3, #5]
 8006cc8:	f003 0310 	and.w	r3, r3, #16
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d042      	beq.n	8006d58 <_lv_obj_get_style_int+0x24a>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	76fb      	strb	r3, [r7, #27]
                    break;
 8006cd6:	e03f      	b.n	8006d58 <_lv_obj_get_style_int+0x24a>
                case LV_STYLE_SHADOW_WIDTH:
                    if(list->shadow_width_zero) def = true;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	79db      	ldrb	r3, [r3, #7]
 8006cdc:	f003 0304 	and.w	r3, r3, #4
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d03a      	beq.n	8006d5c <_lv_obj_get_style_int+0x24e>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	76fb      	strb	r3, [r7, #27]
                    break;
 8006cea:	e037      	b.n	8006d5c <_lv_obj_get_style_int+0x24e>
                case LV_STYLE_PAD_TOP:
                case LV_STYLE_PAD_BOTTOM:
                case LV_STYLE_PAD_LEFT:
                case LV_STYLE_PAD_RIGHT:
                    if(list->pad_all_zero) def = true;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	799b      	ldrb	r3, [r3, #6]
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d032      	beq.n	8006d60 <_lv_obj_get_style_int+0x252>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	76fb      	strb	r3, [r7, #27]
                    break;
 8006cfe:	e02f      	b.n	8006d60 <_lv_obj_get_style_int+0x252>
                case LV_STYLE_MARGIN_TOP:
                case LV_STYLE_MARGIN_BOTTOM:
                case LV_STYLE_MARGIN_LEFT:
                case LV_STYLE_MARGIN_RIGHT:
                    if(list->margin_all_zero) def = true;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	799b      	ldrb	r3, [r3, #6]
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d02a      	beq.n	8006d64 <_lv_obj_get_style_int+0x256>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	76fb      	strb	r3, [r7, #27]
                    break;
 8006d12:	e027      	b.n	8006d64 <_lv_obj_get_style_int+0x256>
                case LV_STYLE_OUTLINE_BLEND_MODE:
                case LV_STYLE_PATTERN_BLEND_MODE:
                case LV_STYLE_SHADOW_BLEND_MODE:
                case LV_STYLE_TEXT_BLEND_MODE:
                case LV_STYLE_VALUE_BLEND_MODE:
                    if(list->blend_mode_all_normal) def = true;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	799b      	ldrb	r3, [r3, #6]
 8006d18:	f003 0304 	and.w	r3, r3, #4
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d022      	beq.n	8006d68 <_lv_obj_get_style_int+0x25a>
 8006d22:	2301      	movs	r3, #1
 8006d24:	76fb      	strb	r3, [r7, #27]
                    break;
 8006d26:	e01f      	b.n	8006d68 <_lv_obj_get_style_int+0x25a>
                case LV_STYLE_TEXT_DECOR:
                    if(list->text_decor_none) def = true;
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	79db      	ldrb	r3, [r3, #7]
 8006d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d01a      	beq.n	8006d6c <_lv_obj_get_style_int+0x25e>
 8006d36:	2301      	movs	r3, #1
 8006d38:	76fb      	strb	r3, [r7, #27]
                    break;
 8006d3a:	e017      	b.n	8006d6c <_lv_obj_get_style_int+0x25e>
                    break;
 8006d3c:	bf00      	nop
 8006d3e:	e016      	b.n	8006d6e <_lv_obj_get_style_int+0x260>
                    break;
 8006d40:	bf00      	nop
 8006d42:	e014      	b.n	8006d6e <_lv_obj_get_style_int+0x260>
                    break;
 8006d44:	bf00      	nop
 8006d46:	e012      	b.n	8006d6e <_lv_obj_get_style_int+0x260>
                    break;
 8006d48:	bf00      	nop
 8006d4a:	e010      	b.n	8006d6e <_lv_obj_get_style_int+0x260>
                    break;
 8006d4c:	bf00      	nop
 8006d4e:	e00e      	b.n	8006d6e <_lv_obj_get_style_int+0x260>
                    break;
 8006d50:	bf00      	nop
 8006d52:	e00c      	b.n	8006d6e <_lv_obj_get_style_int+0x260>
                    break;
 8006d54:	bf00      	nop
 8006d56:	e00a      	b.n	8006d6e <_lv_obj_get_style_int+0x260>
                    break;
 8006d58:	bf00      	nop
 8006d5a:	e008      	b.n	8006d6e <_lv_obj_get_style_int+0x260>
                    break;
 8006d5c:	bf00      	nop
 8006d5e:	e006      	b.n	8006d6e <_lv_obj_get_style_int+0x260>
                    break;
 8006d60:	bf00      	nop
 8006d62:	e004      	b.n	8006d6e <_lv_obj_get_style_int+0x260>
                    break;
 8006d64:	bf00      	nop
 8006d66:	e002      	b.n	8006d6e <_lv_obj_get_style_int+0x260>
                    break;
 8006d68:	bf00      	nop
 8006d6a:	e000      	b.n	8006d6e <_lv_obj_get_style_int+0x260>
                    break;
 8006d6c:	bf00      	nop
            }

            if(def) {
 8006d6e:	7efb      	ldrb	r3, [r7, #27]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d12f      	bne.n	8006dd4 <_lv_obj_get_style_int+0x2c6>
                break;
            }
        }

        lv_state_t state = lv_obj_get_state(parent, part);
 8006d74:	78fb      	ldrb	r3, [r7, #3]
 8006d76:	4619      	mov	r1, r3
 8006d78:	69f8      	ldr	r0, [r7, #28]
 8006d7a:	f000 fb7b 	bl	8007474 <lv_obj_get_state>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	73fb      	strb	r3, [r7, #15]
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	021b      	lsls	r3, r3, #8
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	8b3b      	ldrh	r3, [r7, #24]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	803b      	strh	r3, [r7, #0]

        res = _lv_style_list_get_int(list, prop, &value_act);
 8006d90:	f107 020c 	add.w	r2, r7, #12
 8006d94:	883b      	ldrh	r3, [r7, #0]
 8006d96:	4619      	mov	r1, r3
 8006d98:	6938      	ldr	r0, [r7, #16]
 8006d9a:	f005 f893 	bl	800bec4 <_lv_style_list_get_int>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	75bb      	strb	r3, [r7, #22]
        if(res == LV_RES_OK) return value_act;
 8006da2:	7dbb      	ldrb	r3, [r7, #22]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d102      	bne.n	8006dae <_lv_obj_get_style_int+0x2a0>
 8006da8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006dac:	e034      	b.n	8006e18 <_lv_obj_get_style_int+0x30a>

        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8006dae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	da10      	bge.n	8006dd8 <_lv_obj_get_style_int+0x2ca>

        /*If not found, check the `MAIN` style first*/
        if(part != LV_OBJ_PART_MAIN) {
 8006db6:	78fb      	ldrb	r3, [r7, #3]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <_lv_obj_get_style_int+0x2b4>
            part = LV_OBJ_PART_MAIN;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	70fb      	strb	r3, [r7, #3]
            continue;
 8006dc0:	e003      	b.n	8006dca <_lv_obj_get_style_int+0x2bc>
        }

        /*Check the parent too.*/
        parent = lv_obj_get_parent(parent);
 8006dc2:	69f8      	ldr	r0, [r7, #28]
 8006dc4:	f7ff fd60 	bl	8006888 <lv_obj_get_parent>
 8006dc8:	61f8      	str	r0, [r7, #28]
    while(parent) {
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f47f aeb1 	bne.w	8006b34 <_lv_obj_get_style_int+0x26>
 8006dd2:	e002      	b.n	8006dda <_lv_obj_get_style_int+0x2cc>
                break;
 8006dd4:	bf00      	nop
 8006dd6:	e000      	b.n	8006dda <_lv_obj_get_style_int+0x2cc>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8006dd8:	bf00      	nop
    }

    /*Handle unset values*/
    prop = prop & (~LV_STYLE_STATE_MASK);
 8006dda:	883b      	ldrh	r3, [r7, #0]
 8006ddc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006de0:	803b      	strh	r3, [r7, #0]
    switch(prop) {
 8006de2:	883b      	ldrh	r3, [r7, #0]
 8006de4:	2b22      	cmp	r3, #34	; 0x22
 8006de6:	d011      	beq.n	8006e0c <_lv_obj_get_style_int+0x2fe>
 8006de8:	2b22      	cmp	r3, #34	; 0x22
 8006dea:	dc04      	bgt.n	8006df6 <_lv_obj_get_style_int+0x2e8>
 8006dec:	2b03      	cmp	r3, #3
 8006dee:	d009      	beq.n	8006e04 <_lv_obj_get_style_int+0x2f6>
 8006df0:	2b07      	cmp	r3, #7
 8006df2:	d00d      	beq.n	8006e10 <_lv_obj_get_style_int+0x302>
 8006df4:	e00f      	b.n	8006e16 <_lv_obj_get_style_int+0x308>
 8006df6:	2b31      	cmp	r3, #49	; 0x31
 8006df8:	d002      	beq.n	8006e00 <_lv_obj_get_style_int+0x2f2>
 8006dfa:	2bc0      	cmp	r3, #192	; 0xc0
 8006dfc:	d004      	beq.n	8006e08 <_lv_obj_get_style_int+0x2fa>
 8006dfe:	e00a      	b.n	8006e16 <_lv_obj_get_style_int+0x308>
        case LV_STYLE_BORDER_SIDE:
            return LV_BORDER_SIDE_FULL;
 8006e00:	230f      	movs	r3, #15
 8006e02:	e009      	b.n	8006e18 <_lv_obj_get_style_int+0x30a>
        case LV_STYLE_SIZE:
            return LV_DPI / 20;
 8006e04:	2306      	movs	r3, #6
 8006e06:	e007      	b.n	8006e18 <_lv_obj_get_style_int+0x30a>
        case LV_STYLE_SCALE_WIDTH:
            return LV_DPI / 8;
 8006e08:	2310      	movs	r3, #16
 8006e0a:	e005      	b.n	8006e18 <_lv_obj_get_style_int+0x30a>
        case LV_STYLE_BG_GRAD_STOP:
            return 255;
 8006e0c:	23ff      	movs	r3, #255	; 0xff
 8006e0e:	e003      	b.n	8006e18 <_lv_obj_get_style_int+0x30a>
        case LV_STYLE_TRANSFORM_ZOOM:
            return LV_IMG_ZOOM_NONE;
 8006e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e14:	e000      	b.n	8006e18 <_lv_obj_get_style_int+0x30a>
    }

    return 0;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3720      	adds	r7, #32
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <_lv_obj_get_style_color>:
 * @note shouldn't be used directly. Use the specific property get functions instead.
 *       For example: `lv_obj_style_get_border_color()`
 * @note for performance reasons it's not checked if the property really has color type
 */
lv_color_t _lv_obj_get_style_color(const lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
 8006e20:	b590      	push	{r4, r7, lr}
 8006e22:	b089      	sub	sp, #36	; 0x24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	70fb      	strb	r3, [r7, #3]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	803b      	strh	r3, [r7, #0]
    lv_style_property_t prop_ori = prop;
 8006e30:	883b      	ldrh	r3, [r7, #0]
 8006e32:	837b      	strh	r3, [r7, #26]

    lv_style_attr_t attr;
    attr = prop_ori >> 8;
 8006e34:	8b7b      	ldrh	r3, [r7, #26]
 8006e36:	0a1b      	lsrs	r3, r3, #8
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	767b      	strb	r3, [r7, #25]

    lv_color_t value_act;
    lv_res_t res = LV_RES_INV;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	763b      	strb	r3, [r7, #24]
    const lv_obj_t * parent = obj;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	61fb      	str	r3, [r7, #28]
    while(parent) {
 8006e44:	e02f      	b.n	8006ea6 <_lv_obj_get_style_color+0x86>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8006e46:	78fb      	ldrb	r3, [r7, #3]
 8006e48:	4619      	mov	r1, r3
 8006e4a:	69f8      	ldr	r0, [r7, #28]
 8006e4c:	f7ff fe3c 	bl	8006ac8 <lv_obj_get_style_list>
 8006e50:	6178      	str	r0, [r7, #20]

        lv_state_t state = lv_obj_get_state(parent, part);
 8006e52:	78fb      	ldrb	r3, [r7, #3]
 8006e54:	4619      	mov	r1, r3
 8006e56:	69f8      	ldr	r0, [r7, #28]
 8006e58:	f000 fb0c 	bl	8007474 <lv_obj_get_state>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	74fb      	strb	r3, [r7, #19]
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8006e60:	7cfb      	ldrb	r3, [r7, #19]
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	021b      	lsls	r3, r3, #8
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	8b7b      	ldrh	r3, [r7, #26]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	803b      	strh	r3, [r7, #0]

        res = _lv_style_list_get_color(list, prop, &value_act);
 8006e6e:	f107 020c 	add.w	r2, r7, #12
 8006e72:	883b      	ldrh	r3, [r7, #0]
 8006e74:	4619      	mov	r1, r3
 8006e76:	6978      	ldr	r0, [r7, #20]
 8006e78:	f005 f8a2 	bl	800bfc0 <_lv_style_list_get_color>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	763b      	strb	r3, [r7, #24]
        if(res == LV_RES_OK) return value_act;
 8006e80:	7e3b      	ldrb	r3, [r7, #24]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d101      	bne.n	8006e8a <_lv_obj_get_style_color+0x6a>
 8006e86:	68fc      	ldr	r4, [r7, #12]
 8006e88:	e030      	b.n	8006eec <_lv_obj_get_style_color+0xcc>

        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8006e8a:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	da0d      	bge.n	8006eae <_lv_obj_get_style_color+0x8e>

        /*If not found, check the `MAIN` style first*/
        if(part != LV_OBJ_PART_MAIN) {
 8006e92:	78fb      	ldrb	r3, [r7, #3]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <_lv_obj_get_style_color+0x7e>
            part = LV_OBJ_PART_MAIN;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	70fb      	strb	r3, [r7, #3]
            continue;
 8006e9c:	e003      	b.n	8006ea6 <_lv_obj_get_style_color+0x86>
        }

        /*Check the parent too.*/
        parent = lv_obj_get_parent(parent);
 8006e9e:	69f8      	ldr	r0, [r7, #28]
 8006ea0:	f7ff fcf2 	bl	8006888 <lv_obj_get_parent>
 8006ea4:	61f8      	str	r0, [r7, #28]
    while(parent) {
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1cc      	bne.n	8006e46 <_lv_obj_get_style_color+0x26>
 8006eac:	e000      	b.n	8006eb0 <_lv_obj_get_style_color+0x90>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8006eae:	bf00      	nop
    }

    /*Handle unset values*/
    prop = prop & (~LV_STYLE_STATE_MASK);
 8006eb0:	883b      	ldrh	r3, [r7, #0]
 8006eb2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006eb6:	803b      	strh	r3, [r7, #0]
    switch(prop) {
 8006eb8:	883b      	ldrh	r3, [r7, #0]
 8006eba:	3b29      	subs	r3, #41	; 0x29
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d80c      	bhi.n	8006eda <_lv_obj_get_style_color+0xba>
        case LV_STYLE_BG_COLOR:
        case LV_STYLE_BG_GRAD_COLOR:
            return LV_COLOR_WHITE;
 8006ec0:	4623      	mov	r3, r4
 8006ec2:	f043 04ff 	orr.w	r4, r3, #255	; 0xff
 8006ec6:	4623      	mov	r3, r4
 8006ec8:	f443 447f 	orr.w	r4, r3, #65280	; 0xff00
 8006ecc:	4623      	mov	r3, r4
 8006ece:	f443 047f 	orr.w	r4, r3, #16711680	; 0xff0000
 8006ed2:	4623      	mov	r3, r4
 8006ed4:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 8006ed8:	e008      	b.n	8006eec <_lv_obj_get_style_color+0xcc>
    }

    return LV_COLOR_BLACK;
 8006eda:	f36f 0407 	bfc	r4, #0, #8
 8006ede:	f36f 240f 	bfc	r4, #8, #8
 8006ee2:	f36f 4417 	bfc	r4, #16, #8
 8006ee6:	4623      	mov	r3, r4
 8006ee8:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 8006eec:	4623      	mov	r3, r4
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3724      	adds	r7, #36	; 0x24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd90      	pop	{r4, r7, pc}

08006ef6 <_lv_obj_get_style_opa>:
 * @note shouldn't be used directly. Use the specific property get functions instead.
 *       For example: `lv_obj_style_get_border_opa()`
 * @note for performance reasons it's not checked if the property really has opacity type
 */
lv_opa_t _lv_obj_get_style_opa(const lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b088      	sub	sp, #32
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	460b      	mov	r3, r1
 8006f00:	70fb      	strb	r3, [r7, #3]
 8006f02:	4613      	mov	r3, r2
 8006f04:	803b      	strh	r3, [r7, #0]
    lv_style_property_t prop_ori = prop;
 8006f06:	883b      	ldrh	r3, [r7, #0]
 8006f08:	833b      	strh	r3, [r7, #24]

    lv_style_attr_t attr;
    attr = prop_ori >> 8;
 8006f0a:	8b3b      	ldrh	r3, [r7, #24]
 8006f0c:	0a1b      	lsrs	r3, r3, #8
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	75fb      	strb	r3, [r7, #23]

    lv_opa_t value_act;
    lv_res_t res = LV_RES_INV;
 8006f12:	2300      	movs	r3, #0
 8006f14:	75bb      	strb	r3, [r7, #22]
    const lv_obj_t * parent = obj;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	61fb      	str	r3, [r7, #28]
    while(parent) {
 8006f1a:	e08c      	b.n	8007036 <_lv_obj_get_style_opa+0x140>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8006f1c:	78fb      	ldrb	r3, [r7, #3]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	69f8      	ldr	r0, [r7, #28]
 8006f22:	f7ff fdd1 	bl	8006ac8 <lv_obj_get_style_list>
 8006f26:	6138      	str	r0, [r7, #16]

        if(!list->ignore_cache && list->style_cnt > 0) {
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	795b      	ldrb	r3, [r3, #5]
 8006f2c:	f003 0308 	and.w	r3, r3, #8
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d155      	bne.n	8006fe2 <_lv_obj_get_style_opa+0xec>
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	791b      	ldrb	r3, [r3, #4]
 8006f3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d04e      	beq.n	8006fe2 <_lv_obj_get_style_opa+0xec>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	795b      	ldrb	r3, [r3, #5]
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d108      	bne.n	8006f64 <_lv_obj_get_style_opa+0x6e>
 8006f52:	883b      	ldrh	r3, [r7, #0]
 8006f54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	78fb      	ldrb	r3, [r7, #3]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	69f8      	ldr	r0, [r7, #28]
 8006f60:	f002 fb5a 	bl	8009618 <update_style_cache>
            bool def = false;
 8006f64:	2300      	movs	r3, #0
 8006f66:	76fb      	strb	r3, [r7, #27]
            switch(prop & (~LV_STYLE_STATE_MASK)) {
 8006f68:	883b      	ldrh	r3, [r7, #0]
 8006f6a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006f6e:	f248 020c 	movw	r2, #32780	; 0x800c
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d006      	beq.n	8006f84 <_lv_obj_get_style_opa+0x8e>
 8006f76:	f248 02ad 	movw	r2, #32941	; 0x80ad
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d01f      	beq.n	8006fbe <_lv_obj_get_style_opa+0xc8>
 8006f7e:	2b2c      	cmp	r3, #44	; 0x2c
 8006f80:	d00a      	beq.n	8006f98 <_lv_obj_get_style_opa+0xa2>
 8006f82:	e02b      	b.n	8006fdc <_lv_obj_get_style_opa+0xe6>
                case LV_STYLE_OPA_SCALE:
                    if(list->opa_scale_cover) def = true;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	795b      	ldrb	r3, [r3, #5]
 8006f88:	f003 0320 	and.w	r3, r3, #32
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d01f      	beq.n	8006fd2 <_lv_obj_get_style_opa+0xdc>
 8006f92:	2301      	movs	r3, #1
 8006f94:	76fb      	strb	r3, [r7, #27]
                    break;
 8006f96:	e01c      	b.n	8006fd2 <_lv_obj_get_style_opa+0xdc>
                case LV_STYLE_BG_OPA:
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	799b      	ldrb	r3, [r3, #6]
 8006f9c:	f003 0310 	and.w	r3, r3, #16
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d001      	beq.n	8006faa <_lv_obj_get_style_opa+0xb4>
 8006fa6:	23ff      	movs	r3, #255	; 0xff
 8006fa8:	e05d      	b.n	8007066 <_lv_obj_get_style_opa+0x170>
                    if(list->bg_opa_transp) def = true;
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	799b      	ldrb	r3, [r3, #6]
 8006fae:	f003 0308 	and.w	r3, r3, #8
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00e      	beq.n	8006fd6 <_lv_obj_get_style_opa+0xe0>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	76fb      	strb	r3, [r7, #27]
                    break;
 8006fbc:	e00b      	b.n	8006fd6 <_lv_obj_get_style_opa+0xe0>
                case LV_STYLE_IMAGE_RECOLOR_OPA:
                    if(list->img_recolor_opa_transp) def = true;
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	79db      	ldrb	r3, [r3, #7]
 8006fc2:	f003 0310 	and.w	r3, r3, #16
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d006      	beq.n	8006fda <_lv_obj_get_style_opa+0xe4>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	76fb      	strb	r3, [r7, #27]
                    break;
 8006fd0:	e003      	b.n	8006fda <_lv_obj_get_style_opa+0xe4>
                    break;
 8006fd2:	bf00      	nop
 8006fd4:	e002      	b.n	8006fdc <_lv_obj_get_style_opa+0xe6>
                    break;
 8006fd6:	bf00      	nop
 8006fd8:	e000      	b.n	8006fdc <_lv_obj_get_style_opa+0xe6>
                    break;
 8006fda:	bf00      	nop
            }

            if(def) {
 8006fdc:	7efb      	ldrb	r3, [r7, #27]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d12e      	bne.n	8007040 <_lv_obj_get_style_opa+0x14a>
                break;
            }
        }

        lv_state_t state = lv_obj_get_state(parent, part);
 8006fe2:	78fb      	ldrb	r3, [r7, #3]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	69f8      	ldr	r0, [r7, #28]
 8006fe8:	f000 fa44 	bl	8007474 <lv_obj_get_state>
 8006fec:	4603      	mov	r3, r0
 8006fee:	73fb      	strb	r3, [r7, #15]
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	021b      	lsls	r3, r3, #8
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	8b3b      	ldrh	r3, [r7, #24]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	803b      	strh	r3, [r7, #0]

        res = _lv_style_list_get_opa(list, prop, &value_act);
 8006ffe:	f107 020e 	add.w	r2, r7, #14
 8007002:	883b      	ldrh	r3, [r7, #0]
 8007004:	4619      	mov	r1, r3
 8007006:	6938      	ldr	r0, [r7, #16]
 8007008:	f005 f857 	bl	800c0ba <_lv_style_list_get_opa>
 800700c:	4603      	mov	r3, r0
 800700e:	75bb      	strb	r3, [r7, #22]
        if(res == LV_RES_OK) return value_act;
 8007010:	7dbb      	ldrb	r3, [r7, #22]
 8007012:	2b01      	cmp	r3, #1
 8007014:	d101      	bne.n	800701a <_lv_obj_get_style_opa+0x124>
 8007016:	7bbb      	ldrb	r3, [r7, #14]
 8007018:	e025      	b.n	8007066 <_lv_obj_get_style_opa+0x170>

        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 800701a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800701e:	2b00      	cmp	r3, #0
 8007020:	da10      	bge.n	8007044 <_lv_obj_get_style_opa+0x14e>

        /*If not found, check the `MAIN` style first*/
        if(part != LV_OBJ_PART_MAIN) {
 8007022:	78fb      	ldrb	r3, [r7, #3]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <_lv_obj_get_style_opa+0x138>
            part = LV_OBJ_PART_MAIN;
 8007028:	2300      	movs	r3, #0
 800702a:	70fb      	strb	r3, [r7, #3]
            continue;
 800702c:	e003      	b.n	8007036 <_lv_obj_get_style_opa+0x140>
        }

        /*Check the parent too.*/
        parent = lv_obj_get_parent(parent);
 800702e:	69f8      	ldr	r0, [r7, #28]
 8007030:	f7ff fc2a 	bl	8006888 <lv_obj_get_parent>
 8007034:	61f8      	str	r0, [r7, #28]
    while(parent) {
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	2b00      	cmp	r3, #0
 800703a:	f47f af6f 	bne.w	8006f1c <_lv_obj_get_style_opa+0x26>
 800703e:	e002      	b.n	8007046 <_lv_obj_get_style_opa+0x150>
                break;
 8007040:	bf00      	nop
 8007042:	e000      	b.n	8007046 <_lv_obj_get_style_opa+0x150>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 8007044:	bf00      	nop
    }

    /*Handle unset values*/
    prop = prop & (~LV_STYLE_STATE_MASK);
 8007046:	883b      	ldrh	r3, [r7, #0]
 8007048:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800704c:	803b      	strh	r3, [r7, #0]
    switch(prop) {
 800704e:	883b      	ldrh	r3, [r7, #0]
 8007050:	2b6d      	cmp	r3, #109	; 0x6d
 8007052:	d005      	beq.n	8007060 <_lv_obj_get_style_opa+0x16a>
 8007054:	f248 02ad 	movw	r2, #32941	; 0x80ad
 8007058:	4293      	cmp	r3, r2
 800705a:	d001      	beq.n	8007060 <_lv_obj_get_style_opa+0x16a>
 800705c:	2b2c      	cmp	r3, #44	; 0x2c
 800705e:	d101      	bne.n	8007064 <_lv_obj_get_style_opa+0x16e>
        case LV_STYLE_BG_OPA:
        case LV_STYLE_IMAGE_RECOLOR_OPA:
        case LV_STYLE_PATTERN_RECOLOR_OPA:
            return LV_OPA_TRANSP;
 8007060:	2300      	movs	r3, #0
 8007062:	e000      	b.n	8007066 <_lv_obj_get_style_opa+0x170>
    }

    return LV_OPA_COVER;
 8007064:	23ff      	movs	r3, #255	; 0xff
}
 8007066:	4618      	mov	r0, r3
 8007068:	3720      	adds	r7, #32
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
	...

08007070 <_lv_obj_get_style_ptr>:
 * @note shouldn't be used directly. Use the specific property get functions instead.
 *       For example: `lv_obj_style_get_border_opa()`
 * @note for performance reasons it's not checked if the property really has pointer type
 */
const void * _lv_obj_get_style_ptr(const lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b088      	sub	sp, #32
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	460b      	mov	r3, r1
 800707a:	70fb      	strb	r3, [r7, #3]
 800707c:	4613      	mov	r3, r2
 800707e:	803b      	strh	r3, [r7, #0]
    lv_style_property_t prop_ori = prop;
 8007080:	883b      	ldrh	r3, [r7, #0]
 8007082:	833b      	strh	r3, [r7, #24]

    lv_style_attr_t attr;
    attr = prop_ori >> 8;
 8007084:	8b3b      	ldrh	r3, [r7, #24]
 8007086:	0a1b      	lsrs	r3, r3, #8
 8007088:	b29b      	uxth	r3, r3
 800708a:	75fb      	strb	r3, [r7, #23]

    const void * value_act;
    lv_res_t res = LV_RES_INV;
 800708c:	2300      	movs	r3, #0
 800708e:	75bb      	strb	r3, [r7, #22]
    const lv_obj_t * parent = obj;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	61fb      	str	r3, [r7, #28]
    while(parent) {
 8007094:	e081      	b.n	800719a <_lv_obj_get_style_ptr+0x12a>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
 8007096:	78fb      	ldrb	r3, [r7, #3]
 8007098:	4619      	mov	r1, r3
 800709a:	69f8      	ldr	r0, [r7, #28]
 800709c:	f7ff fd14 	bl	8006ac8 <lv_obj_get_style_list>
 80070a0:	6138      	str	r0, [r7, #16]

        if(!list->ignore_cache && list->style_cnt > 0) {
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	795b      	ldrb	r3, [r3, #5]
 80070a6:	f003 0308 	and.w	r3, r3, #8
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d14a      	bne.n	8007146 <_lv_obj_get_style_ptr+0xd6>
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	791b      	ldrb	r3, [r3, #4]
 80070b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d043      	beq.n	8007146 <_lv_obj_get_style_ptr+0xd6>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	795b      	ldrb	r3, [r3, #5]
 80070c2:	f003 0304 	and.w	r3, r3, #4
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d108      	bne.n	80070de <_lv_obj_get_style_ptr+0x6e>
 80070cc:	883b      	ldrh	r3, [r7, #0]
 80070ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	78fb      	ldrb	r3, [r7, #3]
 80070d6:	4619      	mov	r1, r3
 80070d8:	69f8      	ldr	r0, [r7, #28]
 80070da:	f002 fa9d 	bl	8009618 <update_style_cache>
            bool def = false;
 80070de:	2300      	movs	r3, #0
 80070e0:	76fb      	strb	r3, [r7, #27]
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
 80070e2:	883b      	ldrh	r3, [r7, #0]
 80070e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80070e8:	2b7f      	cmp	r3, #127	; 0x7f
 80070ea:	d006      	beq.n	80070fa <_lv_obj_get_style_ptr+0x8a>
 80070ec:	f248 028e 	movw	r2, #32910	; 0x808e
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d016      	beq.n	8007122 <_lv_obj_get_style_ptr+0xb2>
 80070f4:	2b6e      	cmp	r3, #110	; 0x6e
 80070f6:	d00a      	beq.n	800710e <_lv_obj_get_style_ptr+0x9e>
 80070f8:	e022      	b.n	8007140 <_lv_obj_get_style_ptr+0xd0>
                case LV_STYLE_VALUE_STR:
                    if(list->value_txt_str) def = true;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	79db      	ldrb	r3, [r3, #7]
 80070fe:	f003 0308 	and.w	r3, r3, #8
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b00      	cmp	r3, #0
 8007106:	d016      	beq.n	8007136 <_lv_obj_get_style_ptr+0xc6>
 8007108:	2301      	movs	r3, #1
 800710a:	76fb      	strb	r3, [r7, #27]
                    break;
 800710c:	e013      	b.n	8007136 <_lv_obj_get_style_ptr+0xc6>
                case LV_STYLE_PATTERN_IMAGE:
                    if(list->pattern_img_null) def = true;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	79db      	ldrb	r3, [r3, #7]
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00e      	beq.n	800713a <_lv_obj_get_style_ptr+0xca>
 800711c:	2301      	movs	r3, #1
 800711e:	76fb      	strb	r3, [r7, #27]
                    break;
 8007120:	e00b      	b.n	800713a <_lv_obj_get_style_ptr+0xca>
                case LV_STYLE_TEXT_FONT:
                    if(list->text_font_normal) def = true;
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	79db      	ldrb	r3, [r3, #7]
 8007126:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b00      	cmp	r3, #0
 800712e:	d006      	beq.n	800713e <_lv_obj_get_style_ptr+0xce>
 8007130:	2301      	movs	r3, #1
 8007132:	76fb      	strb	r3, [r7, #27]
                    break;
 8007134:	e003      	b.n	800713e <_lv_obj_get_style_ptr+0xce>
                    break;
 8007136:	bf00      	nop
 8007138:	e002      	b.n	8007140 <_lv_obj_get_style_ptr+0xd0>
                    break;
 800713a:	bf00      	nop
 800713c:	e000      	b.n	8007140 <_lv_obj_get_style_ptr+0xd0>
                    break;
 800713e:	bf00      	nop
            }

            if(def) {
 8007140:	7efb      	ldrb	r3, [r7, #27]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d12e      	bne.n	80071a4 <_lv_obj_get_style_ptr+0x134>
                break;
            }
        }

        lv_state_t state = lv_obj_get_state(parent, part);
 8007146:	78fb      	ldrb	r3, [r7, #3]
 8007148:	4619      	mov	r1, r3
 800714a:	69f8      	ldr	r0, [r7, #28]
 800714c:	f000 f992 	bl	8007474 <lv_obj_get_state>
 8007150:	4603      	mov	r3, r0
 8007152:	73fb      	strb	r3, [r7, #15]
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
 8007154:	7bfb      	ldrb	r3, [r7, #15]
 8007156:	b29b      	uxth	r3, r3
 8007158:	021b      	lsls	r3, r3, #8
 800715a:	b29a      	uxth	r2, r3
 800715c:	8b3b      	ldrh	r3, [r7, #24]
 800715e:	4413      	add	r3, r2
 8007160:	803b      	strh	r3, [r7, #0]

        res = _lv_style_list_get_ptr(list, prop, &value_act);
 8007162:	f107 0208 	add.w	r2, r7, #8
 8007166:	883b      	ldrh	r3, [r7, #0]
 8007168:	4619      	mov	r1, r3
 800716a:	6938      	ldr	r0, [r7, #16]
 800716c:	f005 f820 	bl	800c1b0 <_lv_style_list_get_ptr>
 8007170:	4603      	mov	r3, r0
 8007172:	75bb      	strb	r3, [r7, #22]
        if(res == LV_RES_OK)  return value_act;
 8007174:	7dbb      	ldrb	r3, [r7, #22]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d101      	bne.n	800717e <_lv_obj_get_style_ptr+0x10e>
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	e029      	b.n	80071d2 <_lv_obj_get_style_ptr+0x162>

        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 800717e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007182:	2b00      	cmp	r3, #0
 8007184:	da10      	bge.n	80071a8 <_lv_obj_get_style_ptr+0x138>

        /*If not found, check the `MAIN` style first*/
        if(part != LV_OBJ_PART_MAIN) {
 8007186:	78fb      	ldrb	r3, [r7, #3]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d002      	beq.n	8007192 <_lv_obj_get_style_ptr+0x122>
            part = LV_OBJ_PART_MAIN;
 800718c:	2300      	movs	r3, #0
 800718e:	70fb      	strb	r3, [r7, #3]
            continue;
 8007190:	e003      	b.n	800719a <_lv_obj_get_style_ptr+0x12a>
        }

        /*Check the parent too.*/
        parent = lv_obj_get_parent(parent);
 8007192:	69f8      	ldr	r0, [r7, #28]
 8007194:	f7ff fb78 	bl	8006888 <lv_obj_get_parent>
 8007198:	61f8      	str	r0, [r7, #28]
    while(parent) {
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	2b00      	cmp	r3, #0
 800719e:	f47f af7a 	bne.w	8007096 <_lv_obj_get_style_ptr+0x26>
 80071a2:	e002      	b.n	80071aa <_lv_obj_get_style_ptr+0x13a>
                break;
 80071a4:	bf00      	nop
 80071a6:	e000      	b.n	80071aa <_lv_obj_get_style_ptr+0x13a>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
 80071a8:	bf00      	nop
    }

    /*Handle unset values*/
    prop = prop & (~LV_STYLE_STATE_MASK);
 80071aa:	883b      	ldrh	r3, [r7, #0]
 80071ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80071b0:	803b      	strh	r3, [r7, #0]
    switch(prop) {
 80071b2:	883b      	ldrh	r3, [r7, #0]
 80071b4:	2bbe      	cmp	r3, #190	; 0xbe
 80071b6:	d009      	beq.n	80071cc <_lv_obj_get_style_ptr+0x15c>
 80071b8:	f248 028e 	movw	r2, #32910	; 0x808e
 80071bc:	4293      	cmp	r3, r2
 80071be:	d001      	beq.n	80071c4 <_lv_obj_get_style_ptr+0x154>
 80071c0:	2b7e      	cmp	r3, #126	; 0x7e
 80071c2:	d105      	bne.n	80071d0 <_lv_obj_get_style_ptr+0x160>
        case LV_STYLE_TEXT_FONT:
        case LV_STYLE_VALUE_FONT:
            return lv_theme_get_font_normal();
 80071c4:	f017 f8ec 	bl	801e3a0 <lv_theme_get_font_normal>
 80071c8:	4603      	mov	r3, r0
 80071ca:	e002      	b.n	80071d2 <_lv_obj_get_style_ptr+0x162>
#if LV_USE_ANIMATION
        case LV_STYLE_TRANSITION_PATH:
            return &lv_anim_path_def;
 80071cc:	4b03      	ldr	r3, [pc, #12]	; (80071dc <_lv_obj_get_style_ptr+0x16c>)
 80071ce:	e000      	b.n	80071d2 <_lv_obj_get_style_ptr+0x162>
#endif
    }

    return NULL;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3720      	adds	r7, #32
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	08030ee4 	.word	0x08030ee4

080071e0 <lv_obj_get_hidden>:
 * Get the hidden attribute of an object
 * @param obj pointer to an object
 * @return true: the object is hidden
 */
bool lv_obj_get_hidden(const lv_obj_t * obj)
{
 80071e0:	b590      	push	{r4, r7, lr}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f014 fca7 	bl	801bb3c <lv_debug_check_null>
 80071ee:	4603      	mov	r3, r0
 80071f0:	f083 0301 	eor.w	r3, r3, #1
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d008      	beq.n	800720c <lv_obj_get_hidden+0x2c>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f04f 0400 	mov.w	r4, #0
 8007200:	461a      	mov	r2, r3
 8007202:	4623      	mov	r3, r4
 8007204:	4809      	ldr	r0, [pc, #36]	; (800722c <lv_obj_get_hidden+0x4c>)
 8007206:	f014 fca9 	bl	801bb5c <lv_debug_log_error>
 800720a:	e7fe      	b.n	800720a <lv_obj_get_hidden+0x2a>

    return obj->hidden == 0 ? false : true;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007212:	f003 0310 	and.w	r3, r3, #16
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	bf14      	ite	ne
 800721c:	2301      	movne	r3, #1
 800721e:	2300      	moveq	r3, #0
 8007220:	b2db      	uxtb	r3, r3
}
 8007222:	4618      	mov	r0, r3
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	bd90      	pop	{r4, r7, pc}
 800722a:	bf00      	nop
 800722c:	0802d7bc 	.word	0x0802d7bc

08007230 <lv_obj_get_click>:
 * Get the click enable attribute of an object
 * @param obj pointer to an object
 * @return true: the object is clickable
 */
bool lv_obj_get_click(const lv_obj_t * obj)
{
 8007230:	b590      	push	{r4, r7, lr}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f014 fc7f 	bl	801bb3c <lv_debug_check_null>
 800723e:	4603      	mov	r3, r0
 8007240:	f083 0301 	eor.w	r3, r3, #1
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	d008      	beq.n	800725c <lv_obj_get_click+0x2c>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f04f 0400 	mov.w	r4, #0
 8007250:	461a      	mov	r2, r3
 8007252:	4623      	mov	r3, r4
 8007254:	4809      	ldr	r0, [pc, #36]	; (800727c <lv_obj_get_click+0x4c>)
 8007256:	f014 fc81 	bl	801bb5c <lv_debug_log_error>
 800725a:	e7fe      	b.n	800725a <lv_obj_get_click+0x2a>

    return obj->click == 0 ? false : true;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b00      	cmp	r3, #0
 800726a:	bf14      	ite	ne
 800726c:	2301      	movne	r3, #1
 800726e:	2300      	moveq	r3, #0
 8007270:	b2db      	uxtb	r3, r3
}
 8007272:	4618      	mov	r0, r3
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	bd90      	pop	{r4, r7, pc}
 800727a:	bf00      	nop
 800727c:	0802d7bc 	.word	0x0802d7bc

08007280 <lv_obj_get_drag>:
 * Get the drag enable attribute of an object
 * @param obj pointer to an object
 * @return true: the object is draggable
 */
bool lv_obj_get_drag(const lv_obj_t * obj)
{
 8007280:	b590      	push	{r4, r7, lr}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f014 fc57 	bl	801bb3c <lv_debug_check_null>
 800728e:	4603      	mov	r3, r0
 8007290:	f083 0301 	eor.w	r3, r3, #1
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d008      	beq.n	80072ac <lv_obj_get_drag+0x2c>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f04f 0400 	mov.w	r4, #0
 80072a0:	461a      	mov	r2, r3
 80072a2:	4623      	mov	r3, r4
 80072a4:	4809      	ldr	r0, [pc, #36]	; (80072cc <lv_obj_get_drag+0x4c>)
 80072a6:	f014 fc59 	bl	801bb5c <lv_debug_log_error>
 80072aa:	e7fe      	b.n	80072aa <lv_obj_get_drag+0x2a>

    return obj->drag == 0 ? false : true;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80072b2:	f003 0302 	and.w	r3, r3, #2
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	bf14      	ite	ne
 80072bc:	2301      	movne	r3, #1
 80072be:	2300      	moveq	r3, #0
 80072c0:	b2db      	uxtb	r3, r3
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd90      	pop	{r4, r7, pc}
 80072ca:	bf00      	nop
 80072cc:	0802d7bc 	.word	0x0802d7bc

080072d0 <lv_obj_get_drag_dir>:
 * Get the directions an object can be dragged
 * @param obj pointer to an object
 * @return bitwise OR of allowed directions an object can be dragged in
 */
lv_drag_dir_t lv_obj_get_drag_dir(const lv_obj_t * obj)
{
 80072d0:	b590      	push	{r4, r7, lr}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f014 fc2f 	bl	801bb3c <lv_debug_check_null>
 80072de:	4603      	mov	r3, r0
 80072e0:	f083 0301 	eor.w	r3, r3, #1
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d008      	beq.n	80072fc <lv_obj_get_drag_dir+0x2c>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f04f 0400 	mov.w	r4, #0
 80072f0:	461a      	mov	r2, r3
 80072f2:	4623      	mov	r3, r4
 80072f4:	4806      	ldr	r0, [pc, #24]	; (8007310 <lv_obj_get_drag_dir+0x40>)
 80072f6:	f014 fc31 	bl	801bb5c <lv_debug_log_error>
 80072fa:	e7fe      	b.n	80072fa <lv_obj_get_drag_dir+0x2a>

    return obj->drag_dir;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007302:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8007306:	b2db      	uxtb	r3, r3
}
 8007308:	4618      	mov	r0, r3
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	bd90      	pop	{r4, r7, pc}
 8007310:	0802d7bc 	.word	0x0802d7bc

08007314 <lv_obj_get_drag_throw>:
 * Get the drag throw enable attribute of an object
 * @param obj pointer to an object
 * @return true: drag throw is enabled
 */
bool lv_obj_get_drag_throw(const lv_obj_t * obj)
{
 8007314:	b590      	push	{r4, r7, lr}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f014 fc0d 	bl	801bb3c <lv_debug_check_null>
 8007322:	4603      	mov	r3, r0
 8007324:	f083 0301 	eor.w	r3, r3, #1
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	d008      	beq.n	8007340 <lv_obj_get_drag_throw+0x2c>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f04f 0400 	mov.w	r4, #0
 8007334:	461a      	mov	r2, r3
 8007336:	4623      	mov	r3, r4
 8007338:	4809      	ldr	r0, [pc, #36]	; (8007360 <lv_obj_get_drag_throw+0x4c>)
 800733a:	f014 fc0f 	bl	801bb5c <lv_debug_log_error>
 800733e:	e7fe      	b.n	800733e <lv_obj_get_drag_throw+0x2a>

    return obj->drag_throw == 0 ? false : true;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007346:	f003 0304 	and.w	r3, r3, #4
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	bf14      	ite	ne
 8007350:	2301      	movne	r3, #1
 8007352:	2300      	moveq	r3, #0
 8007354:	b2db      	uxtb	r3, r3
}
 8007356:	4618      	mov	r0, r3
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	bd90      	pop	{r4, r7, pc}
 800735e:	bf00      	nop
 8007360:	0802d7bc 	.word	0x0802d7bc

08007364 <lv_obj_get_drag_parent>:
 * Get the drag parent attribute of an object
 * @param obj pointer to an object
 * @return true: drag parent is enabled
 */
bool lv_obj_get_drag_parent(const lv_obj_t * obj)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
    return obj->drag_parent == 0 ? false : true;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007372:	f003 0308 	and.w	r3, r3, #8
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	bf14      	ite	ne
 800737c:	2301      	movne	r3, #1
 800737e:	2300      	moveq	r3, #0
 8007380:	b2db      	uxtb	r3, r3
}
 8007382:	4618      	mov	r0, r3
 8007384:	370c      	adds	r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <lv_obj_get_gesture_parent>:
* Get the gesture parent attribute of an object
* @param obj pointer to an object
* @return true: gesture parent is enabled
*/
bool lv_obj_get_gesture_parent(const lv_obj_t * obj)
{
 800738e:	b480      	push	{r7}
 8007390:	b083      	sub	sp, #12
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
    return obj->gesture_parent == 0 ? false : true;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	bf14      	ite	ne
 80073a6:	2301      	movne	r3, #1
 80073a8:	2300      	moveq	r3, #0
 80073aa:	b2db      	uxtb	r3, r3
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <lv_obj_get_focus_parent>:
* Get the focus parent attribute of an object
* @param obj pointer to an object
* @return true: focus parent is enabled
*/
bool lv_obj_get_focus_parent(const lv_obj_t * obj)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
    return obj->focus_parent == 0 ? false : true;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073c6:	f003 0302 	and.w	r3, r3, #2
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	bf14      	ite	ne
 80073d0:	2301      	movne	r3, #1
 80073d2:	2300      	moveq	r3, #0
 80073d4:	b2db      	uxtb	r3, r3
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
	...

080073e4 <lv_obj_get_base_dir>:

    return obj->parent_event == 0 ? false : true;
}

lv_bidi_dir_t lv_obj_get_base_dir(const lv_obj_t * obj)
{
 80073e4:	b590      	push	{r4, r7, lr}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f014 fba5 	bl	801bb3c <lv_debug_check_null>
 80073f2:	4603      	mov	r3, r0
 80073f4:	f083 0301 	eor.w	r3, r3, #1
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d008      	beq.n	8007410 <lv_obj_get_base_dir+0x2c>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f04f 0400 	mov.w	r4, #0
 8007404:	461a      	mov	r2, r3
 8007406:	4623      	mov	r3, r4
 8007408:	4804      	ldr	r0, [pc, #16]	; (800741c <lv_obj_get_base_dir+0x38>)
 800740a:	f014 fba7 	bl	801bb5c <lv_debug_log_error>
 800740e:	e7fe      	b.n	800740e <lv_obj_get_base_dir+0x2a>
    }

    return LV_BIDI_BASE_DIR_DEF;
#else
    (void) obj;  /*Unused*/
    return LV_BIDI_DIR_LTR;
 8007410:	2300      	movs	r3, #0
#endif
}
 8007412:	4618      	mov	r0, r3
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	bd90      	pop	{r4, r7, pc}
 800741a:	bf00      	nop
 800741c:	0802d7bc 	.word	0x0802d7bc

08007420 <lv_obj_is_protected>:
 * @param obj pointer to an object
 * @param prot protect bits to test ('OR'ed values of `lv_protect_t`)
 * @return false: none of the given bits are set, true: at least one bit is set
 */
bool lv_obj_is_protected(const lv_obj_t * obj, uint8_t prot)
{
 8007420:	b590      	push	{r4, r7, lr}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	460b      	mov	r3, r1
 800742a:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f014 fb85 	bl	801bb3c <lv_debug_check_null>
 8007432:	4603      	mov	r3, r0
 8007434:	f083 0301 	eor.w	r3, r3, #1
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d008      	beq.n	8007450 <lv_obj_is_protected+0x30>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f04f 0400 	mov.w	r4, #0
 8007444:	461a      	mov	r2, r3
 8007446:	4623      	mov	r3, r4
 8007448:	4809      	ldr	r0, [pc, #36]	; (8007470 <lv_obj_is_protected+0x50>)
 800744a:	f014 fb87 	bl	801bb5c <lv_debug_log_error>
 800744e:	e7fe      	b.n	800744e <lv_obj_is_protected+0x2e>

    return (obj->protect & prot) == 0 ? false : true;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8007456:	78fb      	ldrb	r3, [r7, #3]
 8007458:	4013      	ands	r3, r2
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b00      	cmp	r3, #0
 800745e:	bf14      	ite	ne
 8007460:	2301      	movne	r3, #1
 8007462:	2300      	moveq	r3, #0
 8007464:	b2db      	uxtb	r3, r3
}
 8007466:	4618      	mov	r0, r3
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	bd90      	pop	{r4, r7, pc}
 800746e:	bf00      	nop
 8007470:	0802d7bc 	.word	0x0802d7bc

08007474 <lv_obj_get_state>:

lv_state_t lv_obj_get_state(const lv_obj_t * obj, uint8_t part)
{
 8007474:	b590      	push	{r4, r7, lr}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	460b      	mov	r3, r1
 800747e:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f014 fb5b 	bl	801bb3c <lv_debug_check_null>
 8007486:	4603      	mov	r3, r0
 8007488:	f083 0301 	eor.w	r3, r3, #1
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d008      	beq.n	80074a4 <lv_obj_get_state+0x30>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f04f 0400 	mov.w	r4, #0
 8007498:	461a      	mov	r2, r3
 800749a:	4623      	mov	r3, r4
 800749c:	480d      	ldr	r0, [pc, #52]	; (80074d4 <lv_obj_get_state+0x60>)
 800749e:	f014 fb5d 	bl	801bb5c <lv_debug_log_error>
 80074a2:	e7fe      	b.n	80074a2 <lv_obj_get_state+0x2e>

    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
 80074a4:	78fb      	ldrb	r3, [r7, #3]
 80074a6:	2b3f      	cmp	r3, #63	; 0x3f
 80074a8:	d803      	bhi.n	80074b2 <lv_obj_get_state+0x3e>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b0:	e00b      	b.n	80074ca <lv_obj_get_state+0x56>

    /*If a real part is asked, then use the object's signal to get its state.
     * A real object can be in different state then the main part
     * and only the object itself knows who to get it's state. */
    lv_get_state_info_t info;
    info.part = part;
 80074b2:	78fb      	ldrb	r3, [r7, #3]
 80074b4:	733b      	strb	r3, [r7, #12]
    info.result = LV_STATE_DEFAULT;
 80074b6:	2300      	movs	r3, #0
 80074b8:	737b      	strb	r3, [r7, #13]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
 80074ba:	f107 030c 	add.w	r3, r7, #12
 80074be:	461a      	mov	r2, r3
 80074c0:	2109      	movs	r1, #9
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7ff f924 	bl	8006710 <lv_signal_send>

    return info.result;
 80074c8:	7b7b      	ldrb	r3, [r7, #13]

}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd90      	pop	{r4, r7, pc}
 80074d2:	bf00      	nop
 80074d4:	0802d7bc 	.word	0x0802d7bc

080074d8 <lv_obj_get_group>:
 * Get the group of the object
 * @param obj pointer to an object
 * @return the pointer to group of the object
 */
void * lv_obj_get_group(const lv_obj_t * obj)
{
 80074d8:	b590      	push	{r4, r7, lr}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f014 fb2b 	bl	801bb3c <lv_debug_check_null>
 80074e6:	4603      	mov	r3, r0
 80074e8:	f083 0301 	eor.w	r3, r3, #1
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d008      	beq.n	8007504 <lv_obj_get_group+0x2c>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f04f 0400 	mov.w	r4, #0
 80074f8:	461a      	mov	r2, r3
 80074fa:	4623      	mov	r3, r4
 80074fc:	4804      	ldr	r0, [pc, #16]	; (8007510 <lv_obj_get_group+0x38>)
 80074fe:	f014 fb2d 	bl	801bb5c <lv_debug_log_error>
 8007502:	e7fe      	b.n	8007502 <lv_obj_get_group+0x2a>

#if LV_USE_GROUP
    return obj->group_p;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
#else
    LV_UNUSED(obj);
    return NULL;
#endif
}
 8007508:	4618      	mov	r0, r3
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	bd90      	pop	{r4, r7, pc}
 8007510:	0802d7bc 	.word	0x0802d7bc

08007514 <lv_obj_is_focused>:
 * Tell whether the object is the focused object of a group or not.
 * @param obj pointer to an object
 * @return true: the object is focused, false: the object is not focused or not in a group
 */
bool lv_obj_is_focused(const lv_obj_t * obj)
{
 8007514:	b590      	push	{r4, r7, lr}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f014 fb0d 	bl	801bb3c <lv_debug_check_null>
 8007522:	4603      	mov	r3, r0
 8007524:	f083 0301 	eor.w	r3, r3, #1
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d008      	beq.n	8007540 <lv_obj_is_focused+0x2c>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f04f 0400 	mov.w	r4, #0
 8007534:	461a      	mov	r2, r3
 8007536:	4623      	mov	r3, r4
 8007538:	480b      	ldr	r0, [pc, #44]	; (8007568 <lv_obj_is_focused+0x54>)
 800753a:	f014 fb0f 	bl	801bb5c <lv_debug_log_error>
 800753e:	e7fe      	b.n	800753e <lv_obj_is_focused+0x2a>

#if LV_USE_GROUP
    if(obj->group_p) {
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00a      	beq.n	800755e <lv_obj_is_focused+0x4a>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754c:	4618      	mov	r0, r3
 800754e:	f7fa fb11 	bl	8001b74 <lv_group_get_focused>
 8007552:	4602      	mov	r2, r0
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4293      	cmp	r3, r2
 8007558:	d101      	bne.n	800755e <lv_obj_is_focused+0x4a>
 800755a:	2301      	movs	r3, #1
 800755c:	e000      	b.n	8007560 <lv_obj_is_focused+0x4c>
    }
    return false;
 800755e:	2300      	movs	r3, #0
#else
    LV_UNUSED(obj);
    return false;
#endif
}
 8007560:	4618      	mov	r0, r3
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	bd90      	pop	{r4, r7, pc}
 8007568:	0802d7bc 	.word	0x0802d7bc

0800756c <lv_obj_is_point_on_coords>:
 * whether the point is even within the object (as an optimization).
 * @param obj object to check
 * @param point screen-space point
 */
bool lv_obj_is_point_on_coords(lv_obj_t * obj, const lv_point_t * point)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
#if LV_USE_EXT_CLICK_AREA == LV_EXT_CLICK_AREA_TINY
    lv_area_t ext_area;
    ext_area.x1 = obj->coords.x1 - obj->ext_click_pad_hor;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800757c:	b29a      	uxth	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007584:	b29b      	uxth	r3, r3
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	b29b      	uxth	r3, r3
 800758a:	b21b      	sxth	r3, r3
 800758c:	813b      	strh	r3, [r7, #8]
    ext_area.x2 = obj->coords.x2 + obj->ext_click_pad_hor;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007594:	b29a      	uxth	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800759c:	b29b      	uxth	r3, r3
 800759e:	4413      	add	r3, r2
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	b21b      	sxth	r3, r3
 80075a4:	81bb      	strh	r3, [r7, #12]
    ext_area.y1 = obj->coords.y1 - obj->ext_click_pad_ver;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	b21b      	sxth	r3, r3
 80075bc:	817b      	strh	r3, [r7, #10]
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad_ver;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	4413      	add	r3, r2
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	b21b      	sxth	r3, r3
 80075d4:	81fb      	strh	r3, [r7, #14]

    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
 80075d6:	f107 0308 	add.w	r3, r7, #8
 80075da:	2200      	movs	r2, #0
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	4618      	mov	r0, r3
 80075e0:	f013 fcdf 	bl	801afa2 <_lv_area_is_point_on>
 80075e4:	4603      	mov	r3, r0
 80075e6:	f083 0301 	eor.w	r3, r3, #1
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <lv_obj_is_point_on_coords+0x88>

    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
#else
    if(!_lv_area_is_point_on(&obj->coords, point, 0)) {
#endif
        return false;
 80075f0:	2300      	movs	r3, #0
 80075f2:	e000      	b.n	80075f6 <lv_obj_is_point_on_coords+0x8a>
    }
    return true;
 80075f4:	2301      	movs	r3, #1
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <lv_obj_hittest>:
 * @param obj object to hit-test
 * @param point screen-space point
 * @return true if the object is considered under the point
 */
bool lv_obj_hittest(lv_obj_t * obj, lv_point_t * point)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b084      	sub	sp, #16
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	6039      	str	r1, [r7, #0]
    if(obj->adv_hittest) {
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800760e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00c      	beq.n	8007632 <lv_obj_hittest+0x34>
        lv_hit_test_info_t hit_info;
        hit_info.point = point;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	60bb      	str	r3, [r7, #8]
        hit_info.result = true;
 800761c:	2301      	movs	r3, #1
 800761e:	733b      	strb	r3, [r7, #12]
        obj->signal_cb(obj, LV_SIGNAL_HIT_TEST, &hit_info);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	f107 0208 	add.w	r2, r7, #8
 8007628:	210a      	movs	r1, #10
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	4798      	blx	r3
        return hit_info.result;
 800762e:	7b3b      	ldrb	r3, [r7, #12]
 8007630:	e004      	b.n	800763c <lv_obj_hittest+0x3e>
    }
    else
        return lv_obj_is_point_on_coords(obj, point);
 8007632:	6839      	ldr	r1, [r7, #0]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f7ff ff99 	bl	800756c <lv_obj_is_point_on_coords>
 800763a:	4603      	mov	r3, r0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <lv_obj_handle_get_type_signal>:
 * @param buf pointer to `lv_obj_type_t`. (`param` in the signal callback)
 * @param name name of the object. E.g. "lv_btn". (Only the pointer is saved)
 * @return LV_RES_OK
 */
lv_res_t lv_obj_handle_get_type_signal(lv_obj_type_t * buf, const char * name)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
    uint8_t i;
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 800764e:	2300      	movs	r3, #0
 8007650:	73fb      	strb	r3, [r7, #15]
 8007652:	e008      	b.n	8007666 <lv_obj_handle_get_type_signal+0x22>
        if(buf->type[i] == NULL) break;
 8007654:	7bfa      	ldrb	r2, [r7, #15]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d006      	beq.n	800766e <lv_obj_handle_get_type_signal+0x2a>
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8007660:	7bfb      	ldrb	r3, [r7, #15]
 8007662:	3301      	adds	r3, #1
 8007664:	73fb      	strb	r3, [r7, #15]
 8007666:	7bfb      	ldrb	r3, [r7, #15]
 8007668:	2b06      	cmp	r3, #6
 800766a:	d9f3      	bls.n	8007654 <lv_obj_handle_get_type_signal+0x10>
 800766c:	e000      	b.n	8007670 <lv_obj_handle_get_type_signal+0x2c>
        if(buf->type[i] == NULL) break;
 800766e:	bf00      	nop
    }
    buf->type[i] = name;
 8007670:	7bfa      	ldrb	r2, [r7, #15]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    return LV_RES_OK;
 800767a:	2301      	movs	r3, #1
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <lv_obj_init_draw_rect_dsc>:
 * @param draw_dsc the descriptor the initialize
 * @note Only the relevant fields will be set.
 * E.g. if `border width == 0` the other border properties won't be evaluated.
 */
void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint8_t part, lv_draw_rect_dsc_t * draw_dsc)
{
 8007688:	b590      	push	{r4, r7, lr}
 800768a:	b087      	sub	sp, #28
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	460b      	mov	r3, r1
 8007692:	607a      	str	r2, [r7, #4]
 8007694:	72fb      	strb	r3, [r7, #11]
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 8007696:	7afb      	ldrb	r3, [r7, #11]
 8007698:	4619      	mov	r1, r3
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f7fc fee4 	bl	8004468 <lv_obj_get_style_radius>
 80076a0:	4603      	mov	r3, r0
 80076a2:	461a      	mov	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	801a      	strh	r2, [r3, #0]

#if LV_USE_OPA_SCALE
    lv_opa_t opa_scale = lv_obj_get_style_opa_scale(obj, part);
 80076a8:	7afb      	ldrb	r3, [r7, #11]
 80076aa:	4619      	mov	r1, r3
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f7fc ff57 	bl	8004560 <lv_obj_get_style_opa_scale>
 80076b2:	4603      	mov	r3, r0
 80076b4:	75fb      	strb	r3, [r7, #23]
    if(opa_scale <= LV_OPA_MIN) {
 80076b6:	7dfb      	ldrb	r3, [r7, #23]
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d812      	bhi.n	80076e2 <lv_obj_init_draw_rect_dsc+0x5a>
        draw_dsc->bg_opa = LV_OPA_TRANSP;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	749a      	strb	r2, [r3, #18]
        draw_dsc->border_opa = LV_OPA_TRANSP;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	771a      	strb	r2, [r3, #28]
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        draw_dsc->pattern_opa = LV_OPA_TRANSP;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        draw_dsc->value_opa = LV_OPA_TRANSP;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        return;
 80076e0:	e223      	b.n	8007b2a <lv_obj_init_draw_rect_dsc+0x4a2>
    }
#endif

    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	7c9b      	ldrb	r3, [r3, #18]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d042      	beq.n	8007770 <lv_obj_init_draw_rect_dsc+0xe8>
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 80076ea:	7afb      	ldrb	r3, [r7, #11]
 80076ec:	4619      	mov	r1, r3
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f7fd f849 	bl	8004786 <lv_obj_get_style_bg_opa>
 80076f4:	4603      	mov	r3, r0
 80076f6:	461a      	mov	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	749a      	strb	r2, [r3, #18]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	7c9b      	ldrb	r3, [r3, #18]
 8007700:	2b02      	cmp	r3, #2
 8007702:	d935      	bls.n	8007770 <lv_obj_init_draw_rect_dsc+0xe8>
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
 8007704:	687c      	ldr	r4, [r7, #4]
 8007706:	7afb      	ldrb	r3, [r7, #11]
 8007708:	4619      	mov	r1, r3
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f7fd f819 	bl	8004742 <lv_obj_get_style_bg_color>
 8007710:	6060      	str	r0, [r4, #4]
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
 8007712:	7afb      	ldrb	r3, [r7, #11]
 8007714:	4619      	mov	r1, r3
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f7fd f801 	bl	800471e <lv_obj_get_style_bg_grad_dir>
 800771c:	4603      	mov	r3, r0
 800771e:	461a      	mov	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	731a      	strb	r2, [r3, #12]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	7b1b      	ldrb	r3, [r3, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d018      	beq.n	800775e <lv_obj_init_draw_rect_dsc+0xd6>
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
 800772c:	687c      	ldr	r4, [r7, #4]
 800772e:	7afb      	ldrb	r3, [r7, #11]
 8007730:	4619      	mov	r1, r3
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f7fd f816 	bl	8004764 <lv_obj_get_style_bg_grad_color>
 8007738:	60a0      	str	r0, [r4, #8]
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
 800773a:	7afb      	ldrb	r3, [r7, #11]
 800773c:	4619      	mov	r1, r3
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f7fc ffcb 	bl	80046da <lv_obj_get_style_bg_main_stop>
 8007744:	4603      	mov	r3, r0
 8007746:	461a      	mov	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	81da      	strh	r2, [r3, #14]
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
 800774c:	7afb      	ldrb	r3, [r7, #11]
 800774e:	4619      	mov	r1, r3
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f7fc ffd3 	bl	80046fc <lv_obj_get_style_bg_grad_stop>
 8007756:	4603      	mov	r3, r0
 8007758:	461a      	mov	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	821a      	strh	r2, [r3, #16]
            }

#if LV_USE_BLEND_MODES
            draw_dsc->bg_blend_mode = lv_obj_get_style_bg_blend_mode(obj, part);
 800775e:	7afb      	ldrb	r3, [r7, #11]
 8007760:	4619      	mov	r1, r3
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f7fc ffa7 	bl	80046b6 <lv_obj_get_style_bg_blend_mode>
 8007768:	4603      	mov	r3, r0
 800776a:	461a      	mov	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	74da      	strb	r2, [r3, #19]
#endif
        }
    }

    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 8007770:	7afb      	ldrb	r3, [r7, #11]
 8007772:	4619      	mov	r1, r3
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f7fd f817 	bl	80047a8 <lv_obj_get_style_border_width>
 800777a:	4603      	mov	r3, r0
 800777c:	461a      	mov	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	831a      	strh	r2, [r3, #24]
    if(draw_dsc->border_width) {
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d029      	beq.n	80077e0 <lv_obj_init_draw_rect_dsc+0x158>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	7f1b      	ldrb	r3, [r3, #28]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d025      	beq.n	80077e0 <lv_obj_init_draw_rect_dsc+0x158>
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 8007794:	7afb      	ldrb	r3, [r7, #11]
 8007796:	4619      	mov	r1, r3
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f7fd f861 	bl	8004860 <lv_obj_get_style_border_opa>
 800779e:	4603      	mov	r3, r0
 80077a0:	461a      	mov	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	771a      	strb	r2, [r3, #28]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	7f1b      	ldrb	r3, [r3, #28]
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d90f      	bls.n	80077ce <lv_obj_init_draw_rect_dsc+0x146>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 80077ae:	7afb      	ldrb	r3, [r7, #11]
 80077b0:	4619      	mov	r1, r3
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f7fd f809 	bl	80047ca <lv_obj_get_style_border_side>
 80077b8:	4603      	mov	r3, r0
 80077ba:	b21a      	sxth	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	835a      	strh	r2, [r3, #26]
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
 80077c0:	687c      	ldr	r4, [r7, #4]
 80077c2:	7afb      	ldrb	r3, [r7, #11]
 80077c4:	4619      	mov	r1, r3
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f7fd f839 	bl	800483e <lv_obj_get_style_border_color>
 80077cc:	6160      	str	r0, [r4, #20]
            }
#if LV_USE_BLEND_MODES
            draw_dsc->border_blend_mode = lv_obj_get_style_border_blend_mode(obj, part);
 80077ce:	7afb      	ldrb	r3, [r7, #11]
 80077d0:	4619      	mov	r1, r3
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f7fd f80b 	bl	80047ee <lv_obj_get_style_border_blend_mode>
 80077d8:	4603      	mov	r3, r0
 80077da:	461a      	mov	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	775a      	strb	r2, [r3, #29]
#endif
        }
    }

#if LV_USE_OUTLINE
    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 80077e0:	7afb      	ldrb	r3, [r7, #11]
 80077e2:	4619      	mov	r1, r3
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f7fd f84c 	bl	8004882 <lv_obj_get_style_outline_width>
 80077ea:	4603      	mov	r3, r0
 80077ec:	461a      	mov	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	849a      	strh	r2, [r3, #36]	; 0x24
    if(draw_dsc->outline_width) {
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d02d      	beq.n	8007858 <lv_obj_init_draw_rect_dsc+0x1d0>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007802:	2b00      	cmp	r3, #0
 8007804:	d028      	beq.n	8007858 <lv_obj_init_draw_rect_dsc+0x1d0>
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 8007806:	7afb      	ldrb	r3, [r7, #11]
 8007808:	4619      	mov	r1, r3
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f7fd f87e 	bl	800490c <lv_obj_get_style_outline_opa>
 8007810:	4603      	mov	r3, r0
 8007812:	461a      	mov	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007820:	2b02      	cmp	r3, #2
 8007822:	d90f      	bls.n	8007844 <lv_obj_init_draw_rect_dsc+0x1bc>
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 8007824:	7afb      	ldrb	r3, [r7, #11]
 8007826:	4619      	mov	r1, r3
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f7fd f83b 	bl	80048a4 <lv_obj_get_style_outline_pad>
 800782e:	4603      	mov	r3, r0
 8007830:	461a      	mov	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	84da      	strh	r2, [r3, #38]	; 0x26
                draw_dsc->outline_color = lv_obj_get_style_outline_color(obj, part);
 8007836:	687c      	ldr	r4, [r7, #4]
 8007838:	7afb      	ldrb	r3, [r7, #11]
 800783a:	4619      	mov	r1, r3
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f7fd f854 	bl	80048ea <lv_obj_get_style_outline_color>
 8007842:	6220      	str	r0, [r4, #32]
            }
#if LV_USE_BLEND_MODES
            draw_dsc->outline_blend_mode = lv_obj_get_style_outline_blend_mode(obj, part);
 8007844:	7afb      	ldrb	r3, [r7, #11]
 8007846:	4619      	mov	r1, r3
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f7fd f83c 	bl	80048c6 <lv_obj_get_style_outline_blend_mode>
 800784e:	4603      	mov	r3, r0
 8007850:	461a      	mov	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        }
    }
#endif

#if LV_USE_PATTERN
    draw_dsc->pattern_image = lv_obj_get_style_pattern_image(obj, part);
 8007858:	7afb      	ldrb	r3, [r7, #11]
 800785a:	4619      	mov	r1, r3
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f7fd f939 	bl	8004ad4 <lv_obj_get_style_pattern_image>
 8007862:	4602      	mov	r2, r0
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	63da      	str	r2, [r3, #60]	; 0x3c
    if(draw_dsc->pattern_image) {
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786c:	2b00      	cmp	r3, #0
 800786e:	d059      	beq.n	8007924 <lv_obj_init_draw_rect_dsc+0x29c>
        if(draw_dsc->pattern_opa != LV_OPA_TRANSP) {
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007876:	2b00      	cmp	r3, #0
 8007878:	d054      	beq.n	8007924 <lv_obj_init_draw_rect_dsc+0x29c>
            draw_dsc->pattern_opa = lv_obj_get_style_pattern_opa(obj, part);
 800787a:	7afb      	ldrb	r3, [r7, #11]
 800787c:	4619      	mov	r1, r3
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f7fd f906 	bl	8004a90 <lv_obj_get_style_pattern_opa>
 8007884:	4603      	mov	r3, r0
 8007886:	461a      	mov	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            if(draw_dsc->pattern_opa > LV_OPA_MIN) {
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007894:	2b02      	cmp	r3, #2
 8007896:	d945      	bls.n	8007924 <lv_obj_init_draw_rect_dsc+0x29c>
                draw_dsc->pattern_recolor_opa = lv_obj_get_style_pattern_recolor_opa(obj, part);
 8007898:	7afb      	ldrb	r3, [r7, #11]
 800789a:	4619      	mov	r1, r3
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f7fd f908 	bl	8004ab2 <lv_obj_get_style_pattern_recolor_opa>
 80078a2:	4603      	mov	r3, r0
 80078a4:	461a      	mov	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                draw_dsc->pattern_repeat = lv_obj_get_style_pattern_repeat(obj, part);
 80078ac:	7afb      	ldrb	r3, [r7, #11]
 80078ae:	4619      	mov	r1, r3
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f7fd f8b4 	bl	8004a1e <lv_obj_get_style_pattern_repeat>
 80078b6:	4603      	mov	r3, r0
 80078b8:	4619      	mov	r1, r3
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	f892 304a 	ldrb.w	r3, [r2, #74]	; 0x4a
 80078c0:	f361 0300 	bfi	r3, r1, #0, #1
 80078c4:	f882 304a 	strb.w	r3, [r2, #74]	; 0x4a
                if(lv_img_src_get_type(draw_dsc->pattern_image) == LV_IMG_SRC_SYMBOL) {
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078cc:	4618      	mov	r0, r3
 80078ce:	f006 fd65 	bl	800e39c <lv_img_src_get_type>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d10f      	bne.n	80078f8 <lv_obj_init_draw_rect_dsc+0x270>
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
 80078d8:	687c      	ldr	r4, [r7, #4]
 80078da:	7afb      	ldrb	r3, [r7, #11]
 80078dc:	4619      	mov	r1, r3
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f7fd f8c5 	bl	8004a6e <lv_obj_get_style_pattern_recolor>
 80078e4:	6460      	str	r0, [r4, #68]	; 0x44
                    draw_dsc->pattern_font = lv_obj_get_style_text_font(obj, part);
 80078e6:	7afb      	ldrb	r3, [r7, #11]
 80078e8:	4619      	mov	r1, r3
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f7fd fa41 	bl	8004d72 <lv_obj_get_style_text_font>
 80078f0:	4602      	mov	r2, r0
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	641a      	str	r2, [r3, #64]	; 0x40
 80078f6:	e00b      	b.n	8007910 <lv_obj_init_draw_rect_dsc+0x288>
                }
                else if(draw_dsc->pattern_recolor_opa > LV_OPA_MIN) {
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d906      	bls.n	8007910 <lv_obj_init_draw_rect_dsc+0x288>
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
 8007902:	687c      	ldr	r4, [r7, #4]
 8007904:	7afb      	ldrb	r3, [r7, #11]
 8007906:	4619      	mov	r1, r3
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f7fd f8b0 	bl	8004a6e <lv_obj_get_style_pattern_recolor>
 800790e:	6460      	str	r0, [r4, #68]	; 0x44
                }
#if LV_USE_BLEND_MODES
                draw_dsc->pattern_blend_mode = lv_obj_get_style_pattern_blend_mode(obj, part);
 8007910:	7afb      	ldrb	r3, [r7, #11]
 8007912:	4619      	mov	r1, r3
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f7fd f898 	bl	8004a4a <lv_obj_get_style_pattern_blend_mode>
 800791a:	4603      	mov	r3, r0
 800791c:	461a      	mov	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        }
    }
#endif

#if LV_USE_SHADOW
    draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
 8007924:	7afb      	ldrb	r3, [r7, #11]
 8007926:	4619      	mov	r1, r3
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f7fd f800 	bl	800492e <lv_obj_get_style_shadow_width>
 800792e:	4603      	mov	r3, r0
 8007930:	461a      	mov	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	861a      	strh	r2, [r3, #48]	; 0x30
    if(draw_dsc->shadow_width) {
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800793c:	2b00      	cmp	r3, #0
 800793e:	d03f      	beq.n	80079c0 <lv_obj_init_draw_rect_dsc+0x338>
        if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007946:	2b02      	cmp	r3, #2
 8007948:	d93a      	bls.n	80079c0 <lv_obj_init_draw_rect_dsc+0x338>
            draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
 800794a:	7afb      	ldrb	r3, [r7, #11]
 800794c:	4619      	mov	r1, r3
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f7fd f854 	bl	80049fc <lv_obj_get_style_shadow_opa>
 8007954:	4603      	mov	r3, r0
 8007956:	461a      	mov	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007964:	2b02      	cmp	r3, #2
 8007966:	d92b      	bls.n	80079c0 <lv_obj_init_draw_rect_dsc+0x338>
                draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 8007968:	7afb      	ldrb	r3, [r7, #11]
 800796a:	4619      	mov	r1, r3
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f7fc ffef 	bl	8004950 <lv_obj_get_style_shadow_ofs_x>
 8007972:	4603      	mov	r3, r0
 8007974:	461a      	mov	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	865a      	strh	r2, [r3, #50]	; 0x32
                draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 800797a:	7afb      	ldrb	r3, [r7, #11]
 800797c:	4619      	mov	r1, r3
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f7fc fff7 	bl	8004972 <lv_obj_get_style_shadow_ofs_y>
 8007984:	4603      	mov	r3, r0
 8007986:	461a      	mov	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	869a      	strh	r2, [r3, #52]	; 0x34
                draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
 800798c:	7afb      	ldrb	r3, [r7, #11]
 800798e:	4619      	mov	r1, r3
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f7fc ffff 	bl	8004994 <lv_obj_get_style_shadow_spread>
 8007996:	4603      	mov	r3, r0
 8007998:	461a      	mov	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	86da      	strh	r2, [r3, #54]	; 0x36
                draw_dsc->shadow_color = lv_obj_get_style_shadow_color(obj, part);
 800799e:	687c      	ldr	r4, [r7, #4]
 80079a0:	7afb      	ldrb	r3, [r7, #11]
 80079a2:	4619      	mov	r1, r3
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f7fd f818 	bl	80049da <lv_obj_get_style_shadow_color>
 80079aa:	62e0      	str	r0, [r4, #44]	; 0x2c
#if LV_USE_BLEND_MODES
                draw_dsc->shadow_blend_mode = lv_obj_get_style_shadow_blend_mode(obj, part);
 80079ac:	7afb      	ldrb	r3, [r7, #11]
 80079ae:	4619      	mov	r1, r3
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	f7fd f800 	bl	80049b6 <lv_obj_get_style_shadow_blend_mode>
 80079b6:	4603      	mov	r3, r0
 80079b8:	461a      	mov	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
#endif

#if LV_USE_VALUE_STR
    draw_dsc->value_str = lv_obj_get_style_value_str(obj, part);
 80079c0:	7afb      	ldrb	r3, [r7, #11]
 80079c2:	4619      	mov	r1, r3
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f7fd f931 	bl	8004c2c <lv_obj_get_style_value_str>
 80079ca:	4602      	mov	r2, r0
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	64da      	str	r2, [r3, #76]	; 0x4c
    if(draw_dsc->value_str) {
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d05e      	beq.n	8007a96 <lv_obj_init_draw_rect_dsc+0x40e>
        if(draw_dsc->value_opa > LV_OPA_MIN) {
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d959      	bls.n	8007a96 <lv_obj_init_draw_rect_dsc+0x40e>
            draw_dsc->value_opa = lv_obj_get_style_value_opa(obj, part);
 80079e2:	7afb      	ldrb	r3, [r7, #11]
 80079e4:	4619      	mov	r1, r3
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f7fd f8fe 	bl	8004be8 <lv_obj_get_style_value_opa>
 80079ec:	4603      	mov	r3, r0
 80079ee:	461a      	mov	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            if(draw_dsc->value_opa > LV_OPA_MIN) {
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d94a      	bls.n	8007a96 <lv_obj_init_draw_rect_dsc+0x40e>
                draw_dsc->value_ofs_x = lv_obj_get_style_value_ofs_x(obj, part);
 8007a00:	7afb      	ldrb	r3, [r7, #11]
 8007a02:	4619      	mov	r1, r3
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f7fd f8aa 	bl	8004b5e <lv_obj_get_style_value_ofs_x>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
                draw_dsc->value_ofs_y = lv_obj_get_style_value_ofs_y(obj, part);
 8007a14:	7afb      	ldrb	r3, [r7, #11]
 8007a16:	4619      	mov	r1, r3
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f7fd f8b1 	bl	8004b80 <lv_obj_get_style_value_ofs_y>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	461a      	mov	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
                draw_dsc->value_color = lv_obj_get_style_value_color(obj, part);
 8007a28:	687c      	ldr	r4, [r7, #4]
 8007a2a:	7afb      	ldrb	r3, [r7, #11]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f7fd f8c9 	bl	8004bc6 <lv_obj_get_style_value_color>
 8007a34:	65a0      	str	r0, [r4, #88]	; 0x58
                draw_dsc->value_font = lv_obj_get_style_value_font(obj, part);
 8007a36:	7afb      	ldrb	r3, [r7, #11]
 8007a38:	4619      	mov	r1, r3
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f7fd f8e5 	bl	8004c0a <lv_obj_get_style_value_font>
 8007a40:	4602      	mov	r2, r0
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	651a      	str	r2, [r3, #80]	; 0x50
                draw_dsc->value_letter_space = lv_obj_get_style_value_letter_space(obj, part);
 8007a46:	7afb      	ldrb	r3, [r7, #11]
 8007a48:	4619      	mov	r1, r3
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f7fd f853 	bl	8004af6 <lv_obj_get_style_value_letter_space>
 8007a50:	4603      	mov	r3, r0
 8007a52:	461a      	mov	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                draw_dsc->value_line_space = lv_obj_get_style_value_line_space(obj, part);
 8007a5a:	7afb      	ldrb	r3, [r7, #11]
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f7fd f85a 	bl	8004b18 <lv_obj_get_style_value_line_space>
 8007a64:	4603      	mov	r3, r0
 8007a66:	461a      	mov	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
                draw_dsc->value_align = lv_obj_get_style_value_align(obj, part);
 8007a6e:	7afb      	ldrb	r3, [r7, #11]
 8007a70:	4619      	mov	r1, r3
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f7fd f895 	bl	8004ba2 <lv_obj_get_style_value_align>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
#if LV_USE_BLEND_MODES
                draw_dsc->value_blend_mode = lv_obj_get_style_value_blend_mode(obj, part);
 8007a82:	7afb      	ldrb	r3, [r7, #11]
 8007a84:	4619      	mov	r1, r3
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f7fd f857 	bl	8004b3a <lv_obj_get_style_value_blend_mode>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	461a      	mov	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        }
    }
#endif

#if LV_USE_OPA_SCALE
    if(opa_scale < LV_OPA_MAX) {
 8007a96:	7dfb      	ldrb	r3, [r7, #23]
 8007a98:	2bfc      	cmp	r3, #252	; 0xfc
 8007a9a:	d846      	bhi.n	8007b2a <lv_obj_init_draw_rect_dsc+0x4a2>
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa_scale) >> 8;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	7c9b      	ldrb	r3, [r3, #18]
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	7dfb      	ldrb	r3, [r7, #23]
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	fb12 f303 	smulbb	r3, r2, r3
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	0a1b      	lsrs	r3, r3, #8
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	749a      	strb	r2, [r3, #18]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa_scale) >> 8;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	7f1b      	ldrb	r3, [r3, #28]
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	7dfb      	ldrb	r3, [r7, #23]
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	fb12 f303 	smulbb	r3, r2, r3
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	0a1b      	lsrs	r3, r3, #8
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	771a      	strb	r2, [r3, #28]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa_scale) >> 8;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	fb12 f303 	smulbb	r3, r2, r3
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	0a1b      	lsrs	r3, r3, #8
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	b2da      	uxtb	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        draw_dsc->pattern_opa = (uint16_t)((uint16_t)draw_dsc->pattern_opa * opa_scale) >> 8;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	7dfb      	ldrb	r3, [r7, #23]
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	fb12 f303 	smulbb	r3, r2, r3
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	0a1b      	lsrs	r3, r3, #8
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        draw_dsc->value_opa = (uint16_t)((uint16_t)draw_dsc->value_opa * opa_scale) >> 8;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	7dfb      	ldrb	r3, [r7, #23]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	fb12 f303 	smulbb	r3, r2, r3
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	0a1b      	lsrs	r3, r3, #8
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	b2da      	uxtb	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }
#endif
}
 8007b2a:	371c      	adds	r7, #28
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd90      	pop	{r4, r7, pc}

08007b30 <lv_obj_init_draw_label_dsc>:

void lv_obj_init_draw_label_dsc(lv_obj_t * obj, uint8_t part, lv_draw_label_dsc_t * draw_dsc)
{
 8007b30:	b590      	push	{r4, r7, lr}
 8007b32:	b087      	sub	sp, #28
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	607a      	str	r2, [r7, #4]
 8007b3c:	72fb      	strb	r3, [r7, #11]
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 8007b3e:	7afb      	ldrb	r3, [r7, #11]
 8007b40:	4619      	mov	r1, r3
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f7fd f903 	bl	8004d4e <lv_obj_get_style_text_opa>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	741a      	strb	r2, [r3, #16]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	7c1b      	ldrb	r3, [r3, #16]
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d96a      	bls.n	8007c2e <lv_obj_init_draw_label_dsc+0xfe>

#if LV_USE_OPA_SCALE
    lv_opa_t opa_scale = lv_obj_get_style_opa_scale(obj, part);
 8007b58:	7afb      	ldrb	r3, [r7, #11]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f7fc fcff 	bl	8004560 <lv_obj_get_style_opa_scale>
 8007b62:	4603      	mov	r3, r0
 8007b64:	75fb      	strb	r3, [r7, #23]
    if(opa_scale < LV_OPA_MAX) {
 8007b66:	7dfb      	ldrb	r3, [r7, #23]
 8007b68:	2bfc      	cmp	r3, #252	; 0xfc
 8007b6a:	d80c      	bhi.n	8007b86 <lv_obj_init_draw_label_dsc+0x56>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	7c1b      	ldrb	r3, [r3, #16]
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	7dfb      	ldrb	r3, [r7, #23]
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	fb12 f303 	smulbb	r3, r2, r3
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	0a1b      	lsrs	r3, r3, #8
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	b2da      	uxtb	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	741a      	strb	r2, [r3, #16]
    }
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	7c1b      	ldrb	r3, [r3, #16]
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d951      	bls.n	8007c32 <lv_obj_init_draw_label_dsc+0x102>
#endif

    draw_dsc->color = lv_obj_get_style_text_color(obj, part);
 8007b8e:	687c      	ldr	r4, [r7, #4]
 8007b90:	7afb      	ldrb	r3, [r7, #11]
 8007b92:	4619      	mov	r1, r3
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f7fd f8a4 	bl	8004ce2 <lv_obj_get_style_text_color>
 8007b9a:	6020      	str	r0, [r4, #0]
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 8007b9c:	7afb      	ldrb	r3, [r7, #11]
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f7fd f854 	bl	8004c4e <lv_obj_get_style_text_letter_space>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	461a      	mov	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	829a      	strh	r2, [r3, #20]
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 8007bae:	7afb      	ldrb	r3, [r7, #11]
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f7fd f85d 	bl	8004c72 <lv_obj_get_style_text_line_space>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	461a      	mov	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	825a      	strh	r2, [r3, #18]
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 8007bc0:	7afb      	ldrb	r3, [r7, #11]
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f7fd f866 	bl	8004c96 <lv_obj_get_style_text_decor>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	461a      	mov	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
#if LV_USE_BLEND_MODES
    draw_dsc->blend_mode = lv_obj_get_style_text_blend_mode(obj, part);
 8007bd4:	7afb      	ldrb	r3, [r7, #11]
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f7fd f86f 	bl	8004cbc <lv_obj_get_style_text_blend_mode>
 8007bde:	4603      	mov	r3, r0
 8007be0:	461a      	mov	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#endif

    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 8007be8:	7afb      	ldrb	r3, [r7, #11]
 8007bea:	4619      	mov	r1, r3
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f7fd f8c0 	bl	8004d72 <lv_obj_get_style_text_font>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	60da      	str	r2, [r3, #12]

    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d017      	beq.n	8007c34 <lv_obj_init_draw_label_dsc+0x104>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	69db      	ldr	r3, [r3, #28]
 8007c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d011      	beq.n	8007c34 <lv_obj_init_draw_label_dsc+0x104>
        draw_dsc->sel_color = lv_obj_get_style_text_sel_color(obj, part);
 8007c10:	687c      	ldr	r4, [r7, #4]
 8007c12:	7afb      	ldrb	r3, [r7, #11]
 8007c14:	4619      	mov	r1, r3
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f7fd f875 	bl	8004d06 <lv_obj_get_style_text_sel_color>
 8007c1c:	6060      	str	r0, [r4, #4]
        draw_dsc->sel_bg_color = lv_obj_get_style_text_sel_bg_color(obj, part);
 8007c1e:	687c      	ldr	r4, [r7, #4]
 8007c20:	7afb      	ldrb	r3, [r7, #11]
 8007c22:	4619      	mov	r1, r3
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f7fd f880 	bl	8004d2a <lv_obj_get_style_text_sel_bg_color>
 8007c2a:	60a0      	str	r0, [r4, #8]
 8007c2c:	e002      	b.n	8007c34 <lv_obj_init_draw_label_dsc+0x104>
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8007c2e:	bf00      	nop
 8007c30:	e000      	b.n	8007c34 <lv_obj_init_draw_label_dsc+0x104>
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8007c32:	bf00      	nop
    }

#if LV_USE_BIDI
    draw_dsc->bidi_dir = lv_obj_get_base_dir(obj);
#endif
}
 8007c34:	371c      	adds	r7, #28
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd90      	pop	{r4, r7, pc}

08007c3a <lv_obj_init_draw_img_dsc>:

void lv_obj_init_draw_img_dsc(lv_obj_t * obj, uint8_t part, lv_draw_img_dsc_t * draw_dsc)
{
 8007c3a:	b590      	push	{r4, r7, lr}
 8007c3c:	b087      	sub	sp, #28
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	60f8      	str	r0, [r7, #12]
 8007c42:	460b      	mov	r3, r1
 8007c44:	607a      	str	r2, [r7, #4]
 8007c46:	72fb      	strb	r3, [r7, #11]
    draw_dsc->opa = lv_obj_get_style_image_opa(obj, part);
 8007c48:	7afb      	ldrb	r3, [r7, #11]
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f7fd f944 	bl	8004eda <lv_obj_get_style_image_opa>
 8007c52:	4603      	mov	r3, r0
 8007c54:	461a      	mov	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	701a      	strb	r2, [r3, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d959      	bls.n	8007d16 <lv_obj_init_draw_img_dsc+0xdc>

#if LV_USE_OPA_SCALE
    lv_opa_t opa_scale = lv_obj_get_style_opa_scale(obj, part);
 8007c62:	7afb      	ldrb	r3, [r7, #11]
 8007c64:	4619      	mov	r1, r3
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f7fc fc7a 	bl	8004560 <lv_obj_get_style_opa_scale>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	75fb      	strb	r3, [r7, #23]
    if(opa_scale < LV_OPA_MAX) {
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	2bfc      	cmp	r3, #252	; 0xfc
 8007c74:	d80c      	bhi.n	8007c90 <lv_obj_init_draw_img_dsc+0x56>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	fb12 f303 	smulbb	r3, r2, r3
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	0a1b      	lsrs	r3, r3, #8
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	701a      	strb	r2, [r3, #0]
    }
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d940      	bls.n	8007d1a <lv_obj_init_draw_img_dsc+0xe0>
#endif

    draw_dsc->angle = 0;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	805a      	strh	r2, [r3, #2]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ca4:	811a      	strh	r2, [r3, #8]
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	3310      	adds	r3, #16
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fc fa78 	bl	80041a0 <lv_area_get_width>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	da00      	bge.n	8007cb8 <lv_obj_init_draw_img_dsc+0x7e>
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	105b      	asrs	r3, r3, #1
 8007cba:	b21a      	sxth	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	809a      	strh	r2, [r3, #4]
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	3310      	adds	r3, #16
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7fc fa82 	bl	80041ce <lv_area_get_height>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	da00      	bge.n	8007cd2 <lv_obj_init_draw_img_dsc+0x98>
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	105b      	asrs	r3, r3, #1
 8007cd4:	b21a      	sxth	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	80da      	strh	r2, [r3, #6]

    draw_dsc->recolor_opa = lv_obj_get_style_image_recolor_opa(obj, part);
 8007cda:	7afb      	ldrb	r3, [r7, #11]
 8007cdc:	4619      	mov	r1, r3
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f7fd f90d 	bl	8004efe <lv_obj_get_style_image_recolor_opa>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	729a      	strb	r2, [r3, #10]
    if(draw_dsc->recolor_opa > 0) {
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	7a9b      	ldrb	r3, [r3, #10]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d006      	beq.n	8007d02 <lv_obj_init_draw_img_dsc+0xc8>
        draw_dsc->recolor = lv_obj_get_style_image_recolor(obj, part);
 8007cf4:	687c      	ldr	r4, [r7, #4]
 8007cf6:	7afb      	ldrb	r3, [r7, #11]
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f7fd f8db 	bl	8004eb6 <lv_obj_get_style_image_recolor>
 8007d00:	60e0      	str	r0, [r4, #12]
    }
#if LV_USE_BLEND_MODES
    draw_dsc->blend_mode = lv_obj_get_style_image_blend_mode(obj, part);
 8007d02:	7afb      	ldrb	r3, [r7, #11]
 8007d04:	4619      	mov	r1, r3
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f7fd f8c2 	bl	8004e90 <lv_obj_get_style_image_blend_mode>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	461a      	mov	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	741a      	strb	r2, [r3, #16]
 8007d14:	e002      	b.n	8007d1c <lv_obj_init_draw_img_dsc+0xe2>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007d16:	bf00      	nop
 8007d18:	e000      	b.n	8007d1c <lv_obj_init_draw_img_dsc+0xe2>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007d1a:	bf00      	nop
#endif
}
 8007d1c:	371c      	adds	r7, #28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd90      	pop	{r4, r7, pc}

08007d22 <lv_obj_init_draw_line_dsc>:

void lv_obj_init_draw_line_dsc(lv_obj_t * obj, uint8_t part, lv_draw_line_dsc_t * draw_dsc)
{
 8007d22:	b590      	push	{r4, r7, lr}
 8007d24:	b087      	sub	sp, #28
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	607a      	str	r2, [r7, #4]
 8007d2e:	72fb      	strb	r3, [r7, #11]
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
 8007d30:	7afb      	ldrb	r3, [r7, #11]
 8007d32:	4619      	mov	r1, r3
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f7fd f82e 	bl	8004d96 <lv_obj_get_style_line_width>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	809a      	strh	r2, [r3, #4]
    if(draw_dsc->width == 0) return;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d06a      	beq.n	8007e22 <lv_obj_init_draw_line_dsc+0x100>

    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
 8007d4c:	7afb      	ldrb	r3, [r7, #11]
 8007d4e:	4619      	mov	r1, r3
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f7fd f88c 	bl	8004e6e <lv_obj_get_style_line_opa>
 8007d56:	4603      	mov	r3, r0
 8007d58:	461a      	mov	r2, r3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	729a      	strb	r2, [r3, #10]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	7a9b      	ldrb	r3, [r3, #10]
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d95f      	bls.n	8007e26 <lv_obj_init_draw_line_dsc+0x104>

#if LV_USE_OPA_SCALE
    lv_opa_t opa_scale = lv_obj_get_style_opa_scale(obj, part);
 8007d66:	7afb      	ldrb	r3, [r7, #11]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f7fc fbf8 	bl	8004560 <lv_obj_get_style_opa_scale>
 8007d70:	4603      	mov	r3, r0
 8007d72:	75fb      	strb	r3, [r7, #23]
    if(opa_scale < LV_OPA_MAX) {
 8007d74:	7dfb      	ldrb	r3, [r7, #23]
 8007d76:	2bfc      	cmp	r3, #252	; 0xfc
 8007d78:	d80c      	bhi.n	8007d94 <lv_obj_init_draw_line_dsc+0x72>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	7a9b      	ldrb	r3, [r3, #10]
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	7dfb      	ldrb	r3, [r7, #23]
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	fb12 f303 	smulbb	r3, r2, r3
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	0a1b      	lsrs	r3, r3, #8
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	b2da      	uxtb	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	729a      	strb	r2, [r3, #10]
    }
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	7a9b      	ldrb	r3, [r3, #10]
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d946      	bls.n	8007e2a <lv_obj_init_draw_line_dsc+0x108>
#endif

    draw_dsc->color = lv_obj_get_style_line_color(obj, part);
 8007d9c:	687c      	ldr	r4, [r7, #4]
 8007d9e:	7afb      	ldrb	r3, [r7, #11]
 8007da0:	4619      	mov	r1, r3
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f7fd f852 	bl	8004e4c <lv_obj_get_style_line_color>
 8007da8:	6020      	str	r0, [r4, #0]

    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
 8007daa:	7afb      	ldrb	r3, [r7, #11]
 8007dac:	4619      	mov	r1, r3
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f7fd f814 	bl	8004ddc <lv_obj_get_style_line_dash_width>
 8007db4:	4603      	mov	r3, r0
 8007db6:	461a      	mov	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	80da      	strh	r2, [r3, #6]
    if(draw_dsc->dash_width) {
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d008      	beq.n	8007dd8 <lv_obj_init_draw_line_dsc+0xb6>
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
 8007dc6:	7afb      	ldrb	r3, [r7, #11]
 8007dc8:	4619      	mov	r1, r3
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f7fd f817 	bl	8004dfe <lv_obj_get_style_line_dash_gap>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	811a      	strh	r2, [r3, #8]
    }

    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
 8007dd8:	7afb      	ldrb	r3, [r7, #11]
 8007dda:	4619      	mov	r1, r3
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f7fd f81f 	bl	8004e20 <lv_obj_get_style_line_rounded>
 8007de2:	4603      	mov	r3, r0
 8007de4:	4619      	mov	r1, r3
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	7ad3      	ldrb	r3, [r2, #11]
 8007dea:	f361 0382 	bfi	r3, r1, #2, #1
 8007dee:	72d3      	strb	r3, [r2, #11]
    draw_dsc->round_end = draw_dsc->round_start;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	7adb      	ldrb	r3, [r3, #11]
 8007df4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007df8:	b2d9      	uxtb	r1, r3
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	7ad3      	ldrb	r3, [r2, #11]
 8007dfe:	f361 03c3 	bfi	r3, r1, #3, #1
 8007e02:	72d3      	strb	r3, [r2, #11]

#if LV_USE_BLEND_MODES
    draw_dsc->blend_mode = lv_obj_get_style_line_blend_mode(obj, part);
 8007e04:	7afb      	ldrb	r3, [r7, #11]
 8007e06:	4619      	mov	r1, r3
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f7fc ffd5 	bl	8004db8 <lv_obj_get_style_line_blend_mode>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	f003 0303 	and.w	r3, r3, #3
 8007e14:	b2d9      	uxtb	r1, r3
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	7ad3      	ldrb	r3, [r2, #11]
 8007e1a:	f361 0301 	bfi	r3, r1, #0, #2
 8007e1e:	72d3      	strb	r3, [r2, #11]
 8007e20:	e004      	b.n	8007e2c <lv_obj_init_draw_line_dsc+0x10a>
    if(draw_dsc->width == 0) return;
 8007e22:	bf00      	nop
 8007e24:	e002      	b.n	8007e2c <lv_obj_init_draw_line_dsc+0x10a>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007e26:	bf00      	nop
 8007e28:	e000      	b.n	8007e2c <lv_obj_init_draw_line_dsc+0x10a>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007e2a:	bf00      	nop
#endif
}
 8007e2c:	371c      	adds	r7, #28
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd90      	pop	{r4, r7, pc}

08007e32 <lv_obj_get_draw_rect_ext_pad_size>:
 * Get the required extra size (around the object's part) to draw shadow, outline, value etc.
 * @param obj pointer to an object
 * @param part part of the object
 */
lv_coord_t lv_obj_get_draw_rect_ext_pad_size(lv_obj_t * obj, uint8_t part)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b096      	sub	sp, #88	; 0x58
 8007e36:	af04      	add	r7, sp, #16
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	70fb      	strb	r3, [r7, #3]
    lv_coord_t s = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    lv_coord_t sh_width = lv_obj_get_style_shadow_width(obj, part);
 8007e44:	78fb      	ldrb	r3, [r7, #3]
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7fc fd70 	bl	800492e <lv_obj_get_style_shadow_width>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    if(sh_width) {
 8007e54:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d054      	beq.n	8007f06 <lv_obj_get_draw_rect_ext_pad_size+0xd4>
        lv_opa_t sh_opa = lv_obj_get_style_shadow_opa(obj, part);
 8007e5c:	78fb      	ldrb	r3, [r7, #3]
 8007e5e:	4619      	mov	r1, r3
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f7fc fdcb 	bl	80049fc <lv_obj_get_style_shadow_opa>
 8007e66:	4603      	mov	r3, r0
 8007e68:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        if(sh_opa > LV_OPA_MIN) {
 8007e6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d948      	bls.n	8007f06 <lv_obj_get_draw_rect_ext_pad_size+0xd4>
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
 8007e74:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	da00      	bge.n	8007e7e <lv_obj_get_draw_rect_ext_pad_size+0x4c>
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	105b      	asrs	r3, r3, #1
 8007e80:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            sh_width++;
 8007e84:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 8007e92:	78fb      	ldrb	r3, [r7, #3]
 8007e94:	4619      	mov	r1, r3
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7fc fd7c 	bl	8004994 <lv_obj_get_style_shadow_spread>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007ea4:	4413      	add	r3, r2
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            lv_style_int_t sh_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 8007eac:	78fb      	ldrb	r3, [r7, #3]
 8007eae:	4619      	mov	r1, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f7fc fd4d 	bl	8004950 <lv_obj_get_style_shadow_ofs_x>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            lv_style_int_t sh_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 8007ebc:	78fb      	ldrb	r3, [r7, #3]
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7fc fd56 	bl	8004972 <lv_obj_get_style_shadow_ofs_y>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	87fb      	strh	r3, [r7, #62]	; 0x3e
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
 8007eca:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8007ece:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8007ed2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8007ed6:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	bfb8      	it	lt
 8007ede:	425b      	neglt	r3, r3
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	bfb8      	it	lt
 8007ee4:	4613      	movlt	r3, r2
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007eec:	4413      	add	r3, r2
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            s = LV_MATH_MAX(s, sh_width);
 8007ef4:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8007ef8:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8007efc:	4293      	cmp	r3, r2
 8007efe:	bfb8      	it	lt
 8007f00:	4613      	movlt	r3, r2
 8007f02:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        }
    }

    const char * value_str = lv_obj_get_style_value_str(obj, part);
 8007f06:	78fb      	ldrb	r3, [r7, #3]
 8007f08:	4619      	mov	r1, r3
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7fc fe8e 	bl	8004c2c <lv_obj_get_style_value_str>
 8007f10:	63b8      	str	r0, [r7, #56]	; 0x38
    if(value_str) {
 8007f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 80d0 	beq.w	80080ba <lv_obj_get_draw_rect_ext_pad_size+0x288>
        lv_opa_t value_opa = lv_obj_get_style_value_opa(obj, part);
 8007f1a:	78fb      	ldrb	r3, [r7, #3]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7fc fe62 	bl	8004be8 <lv_obj_get_style_value_opa>
 8007f24:	4603      	mov	r3, r0
 8007f26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if(value_opa > LV_OPA_MIN) {
 8007f2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	f240 80c3 	bls.w	80080ba <lv_obj_get_draw_rect_ext_pad_size+0x288>
            lv_style_int_t letter_space = lv_obj_get_style_value_letter_space(obj, part);
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	4619      	mov	r1, r3
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7fc fddc 	bl	8004af6 <lv_obj_get_style_value_letter_space>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	86bb      	strh	r3, [r7, #52]	; 0x34
            lv_style_int_t line_space = lv_obj_get_style_value_letter_space(obj, part);
 8007f42:	78fb      	ldrb	r3, [r7, #3]
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7fc fdd5 	bl	8004af6 <lv_obj_get_style_value_letter_space>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	867b      	strh	r3, [r7, #50]	; 0x32
            const lv_font_t * font = lv_obj_get_style_value_font(obj, part);
 8007f50:	78fb      	ldrb	r3, [r7, #3]
 8007f52:	4619      	mov	r1, r3
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7fc fe58 	bl	8004c0a <lv_obj_get_style_value_font>
 8007f5a:	62f8      	str	r0, [r7, #44]	; 0x2c

            lv_point_t txt_size;
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
 8007f5c:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8007f60:	f107 0014 	add.w	r0, r7, #20
 8007f64:	2300      	movs	r3, #0
 8007f66:	9302      	str	r3, [sp, #8]
 8007f68:	f647 4318 	movw	r3, #31768	; 0x7c18
 8007f6c:	9301      	str	r3, [sp, #4]
 8007f6e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	4613      	mov	r3, r2
 8007f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f7a:	f015 fd57 	bl	801da2c <_lv_txt_get_size>

            lv_area_t value_area;
            value_area.x1 = 0;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	81bb      	strh	r3, [r7, #12]
            value_area.y1 = 0;
 8007f82:	2300      	movs	r3, #0
 8007f84:	81fb      	strh	r3, [r7, #14]
            value_area.x2 = txt_size.x - 1;
 8007f86:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	b21b      	sxth	r3, r3
 8007f92:	823b      	strh	r3, [r7, #16]
            value_area.y2 = txt_size.y - 1;
 8007f94:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	b21b      	sxth	r3, r3
 8007fa0:	827b      	strh	r3, [r7, #18]

            lv_style_int_t align = lv_obj_get_style_value_align(obj, part);
 8007fa2:	78fb      	ldrb	r3, [r7, #3]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f7fc fdfb 	bl	8004ba2 <lv_obj_get_style_value_align>
 8007fac:	4603      	mov	r3, r0
 8007fae:	857b      	strh	r3, [r7, #42]	; 0x2a
            lv_style_int_t xofs = lv_obj_get_style_value_ofs_x(obj, part);
 8007fb0:	78fb      	ldrb	r3, [r7, #3]
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7fc fdd2 	bl	8004b5e <lv_obj_get_style_value_ofs_x>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	853b      	strh	r3, [r7, #40]	; 0x28
            lv_style_int_t yofs = lv_obj_get_style_value_ofs_y(obj, part);
 8007fbe:	78fb      	ldrb	r3, [r7, #3]
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f7fc fddc 	bl	8004b80 <lv_obj_get_style_value_ofs_y>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	84fb      	strh	r3, [r7, #38]	; 0x26
            lv_point_t p_align;
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f103 0010 	add.w	r0, r3, #16
 8007fd2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	f107 0308 	add.w	r3, r7, #8
 8007fda:	f107 010c 	add.w	r1, r7, #12
 8007fde:	f013 f9d5 	bl	801b38c <_lv_area_align>

            value_area.x1 += p_align.x + xofs;
 8007fe2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007fec:	b299      	uxth	r1, r3
 8007fee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ff0:	440b      	add	r3, r1
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	4413      	add	r3, r2
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	b21b      	sxth	r3, r3
 8007ffa:	81bb      	strh	r3, [r7, #12]
            value_area.y1 += p_align.y + yofs;
 8007ffc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008000:	b29a      	uxth	r2, r3
 8008002:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008006:	b299      	uxth	r1, r3
 8008008:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800800a:	440b      	add	r3, r1
 800800c:	b29b      	uxth	r3, r3
 800800e:	4413      	add	r3, r2
 8008010:	b29b      	uxth	r3, r3
 8008012:	b21b      	sxth	r3, r3
 8008014:	81fb      	strh	r3, [r7, #14]
            value_area.x2 += p_align.x + xofs;
 8008016:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800801a:	b29a      	uxth	r2, r3
 800801c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008020:	b299      	uxth	r1, r3
 8008022:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008024:	440b      	add	r3, r1
 8008026:	b29b      	uxth	r3, r3
 8008028:	4413      	add	r3, r2
 800802a:	b29b      	uxth	r3, r3
 800802c:	b21b      	sxth	r3, r3
 800802e:	823b      	strh	r3, [r7, #16]
            value_area.y2 += p_align.y + yofs;
 8008030:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008034:	b29a      	uxth	r2, r3
 8008036:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800803a:	b299      	uxth	r1, r3
 800803c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800803e:	440b      	add	r3, r1
 8008040:	b29b      	uxth	r3, r3
 8008042:	4413      	add	r3, r2
 8008044:	b29b      	uxth	r3, r3
 8008046:	b21b      	sxth	r3, r3
 8008048:	827b      	strh	r3, [r7, #18]

            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008050:	461a      	mov	r2, r3
 8008052:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008056:	1ad2      	subs	r2, r2, r3
 8008058:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800805c:	4293      	cmp	r3, r2
 800805e:	bfb8      	it	lt
 8008060:	4613      	movlt	r3, r2
 8008062:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800806c:	461a      	mov	r2, r3
 800806e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008072:	1ad2      	subs	r2, r2, r3
 8008074:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8008078:	4293      	cmp	r3, r2
 800807a:	bfb8      	it	lt
 800807c:	4613      	movlt	r3, r2
 800807e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
 8008082:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008086:	461a      	mov	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800808e:	1ad2      	subs	r2, r2, r3
 8008090:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8008094:	4293      	cmp	r3, r2
 8008096:	bfb8      	it	lt
 8008098:	4613      	movlt	r3, r2
 800809a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
 800809e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80080a2:	461a      	mov	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80080aa:	1ad2      	subs	r2, r2, r3
 80080ac:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80080b0:	4293      	cmp	r3, r2
 80080b2:	bfb8      	it	lt
 80080b4:	4613      	movlt	r3, r2
 80080b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        }
    }

    lv_style_int_t outline_width = lv_obj_get_style_outline_width(obj, part);
 80080ba:	78fb      	ldrb	r3, [r7, #3]
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7fc fbdf 	bl	8004882 <lv_obj_get_style_outline_width>
 80080c4:	4603      	mov	r3, r0
 80080c6:	84bb      	strh	r3, [r7, #36]	; 0x24
    if(outline_width) {
 80080c8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d01e      	beq.n	800810e <lv_obj_get_draw_rect_ext_pad_size+0x2dc>
        lv_opa_t outline_opa = lv_obj_get_style_outline_opa(obj, part);
 80080d0:	78fb      	ldrb	r3, [r7, #3]
 80080d2:	4619      	mov	r1, r3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f7fc fc19 	bl	800490c <lv_obj_get_style_outline_opa>
 80080da:	4603      	mov	r3, r0
 80080dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(outline_opa > LV_OPA_MIN) {
 80080e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d912      	bls.n	800810e <lv_obj_get_draw_rect_ext_pad_size+0x2dc>
            lv_style_int_t outline_pad = lv_obj_get_style_outline_pad(obj, part);
 80080e8:	78fb      	ldrb	r3, [r7, #3]
 80080ea:	4619      	mov	r1, r3
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7fc fbd9 	bl	80048a4 <lv_obj_get_style_outline_pad>
 80080f2:	4603      	mov	r3, r0
 80080f4:	843b      	strh	r3, [r7, #32]
            s = LV_MATH_MAX(s, outline_pad + outline_width);
 80080f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80080fa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80080fe:	441a      	add	r2, r3
 8008100:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8008104:	4293      	cmp	r3, r2
 8008106:	bfb8      	it	lt
 8008108:	4613      	movlt	r3, r2
 800810a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        }
    }

    lv_coord_t w = lv_obj_get_style_transform_width(obj, part);
 800810e:	78fb      	ldrb	r3, [r7, #3]
 8008110:	4619      	mov	r1, r3
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7fc f9e0 	bl	80044d8 <lv_obj_get_style_transform_width>
 8008118:	4603      	mov	r3, r0
 800811a:	83fb      	strh	r3, [r7, #30]
    lv_coord_t h = lv_obj_get_style_transform_height(obj, part);
 800811c:	78fb      	ldrb	r3, [r7, #3]
 800811e:	4619      	mov	r1, r3
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7fc f9ea 	bl	80044fa <lv_obj_get_style_transform_height>
 8008126:	4603      	mov	r3, r0
 8008128:	83bb      	strh	r3, [r7, #28]
    lv_coord_t wh = LV_MATH_MAX(w, h);
 800812a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800812e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008132:	4293      	cmp	r3, r2
 8008134:	bfb8      	it	lt
 8008136:	4613      	movlt	r3, r2
 8008138:	837b      	strh	r3, [r7, #26]
    if(wh > 0) s += wh;
 800813a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800813e:	2b00      	cmp	r3, #0
 8008140:	dd06      	ble.n	8008150 <lv_obj_get_draw_rect_ext_pad_size+0x31e>
 8008142:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8008146:	8b7b      	ldrh	r3, [r7, #26]
 8008148:	4413      	add	r3, r2
 800814a:	b29b      	uxth	r3, r3
 800814c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    return s;
 8008150:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
}
 8008154:	4618      	mov	r0, r3
 8008156:	3748      	adds	r7, #72	; 0x48
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <lv_obj_design>:
 *                                  (return 'true' if yes)
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 * @param return an element of `lv_design_res_t`
 */
static lv_design_res_t lv_obj_design(lv_obj_t * obj, const lv_area_t * clip_area, lv_design_mode_t mode)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b0ac      	sub	sp, #176	; 0xb0
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	4613      	mov	r3, r2
 8008168:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 800816a:	79fb      	ldrb	r3, [r7, #7]
 800816c:	2b02      	cmp	r3, #2
 800816e:	f040 8085 	bne.w	800827c <lv_obj_design+0x120>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
 8008172:	2100      	movs	r1, #0
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f7fc f988 	bl	800448a <lv_obj_get_style_clip_corner>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d001      	beq.n	8008184 <lv_obj_design+0x28>
 8008180:	2303      	movs	r3, #3
 8008182:	e1c0      	b.n	8008506 <lv_obj_design+0x3aa>

        /*Most trivial test. Is the mask fully IN the object? If no it surely doesn't cover it*/
        lv_coord_t r = lv_obj_get_style_radius(obj, LV_OBJ_PART_MAIN);
 8008184:	2100      	movs	r1, #0
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f7fc f96e 	bl	8004468 <lv_obj_get_style_radius>
 800818c:	4603      	mov	r3, r0
 800818e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
        lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_OBJ_PART_MAIN);
 8008192:	2100      	movs	r1, #0
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f7fc f99f 	bl	80044d8 <lv_obj_get_style_transform_width>
 800819a:	4603      	mov	r3, r0
 800819c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
        lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_OBJ_PART_MAIN);
 80081a0:	2100      	movs	r1, #0
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f7fc f9a9 	bl	80044fa <lv_obj_get_style_transform_height>
 80081a8:	4603      	mov	r3, r0
 80081aa:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
        lv_area_t coords;
        lv_area_copy(&coords, &obj->coords);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f103 0210 	add.w	r2, r3, #16
 80081b4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80081b8:	4611      	mov	r1, r2
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fb ffe2 	bl	8004184 <lv_area_copy>
        coords.x1 -= w;
 80081c0:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	b21b      	sxth	r3, r3
 80081d0:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
        coords.x2 += w;
 80081d4:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 80081d8:	b29a      	uxth	r2, r3
 80081da:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80081de:	4413      	add	r3, r2
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	b21b      	sxth	r3, r3
 80081e4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
        coords.y1 -= h;
 80081e8:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	b21b      	sxth	r3, r3
 80081f8:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
        coords.y2 += h;
 80081fc:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8008200:	b29a      	uxth	r2, r3
 8008202:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8008206:	4413      	add	r3, r2
 8008208:	b29b      	uxth	r3, r3
 800820a:	b21b      	sxth	r3, r3
 800820c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
 8008210:	f9b7 209c 	ldrsh.w	r2, [r7, #156]	; 0x9c
 8008214:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008218:	4619      	mov	r1, r3
 800821a:	68b8      	ldr	r0, [r7, #8]
 800821c:	f013 f818 	bl	801b250 <_lv_area_is_in>
 8008220:	4603      	mov	r3, r0
 8008222:	f083 0301 	eor.w	r3, r3, #1
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b00      	cmp	r3, #0
 800822a:	d001      	beq.n	8008230 <lv_obj_design+0xd4>
 800822c:	2302      	movs	r3, #2
 800822e:	e16a      	b.n	8008506 <lv_obj_design+0x3aa>

        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
 8008230:	2100      	movs	r1, #0
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f7fc faa7 	bl	8004786 <lv_obj_get_style_bg_opa>
 8008238:	4603      	mov	r3, r0
 800823a:	2bfc      	cmp	r3, #252	; 0xfc
 800823c:	d801      	bhi.n	8008242 <lv_obj_design+0xe6>
 800823e:	2302      	movs	r3, #2
 8008240:	e161      	b.n	8008506 <lv_obj_design+0x3aa>

        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
 8008242:	2100      	movs	r1, #0
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f7fc fa36 	bl	80046b6 <lv_obj_get_style_bg_blend_mode>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <lv_obj_design+0xf8>
 8008250:	2302      	movs	r3, #2
 8008252:	e158      	b.n	8008506 <lv_obj_design+0x3aa>
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
 8008254:	2100      	movs	r1, #0
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f7fc fac9 	bl	80047ee <lv_obj_get_style_border_blend_mode>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d001      	beq.n	8008266 <lv_obj_design+0x10a>
 8008262:	2302      	movs	r3, #2
 8008264:	e14f      	b.n	8008506 <lv_obj_design+0x3aa>
        if(lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
 8008266:	2100      	movs	r1, #0
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f7fc f979 	bl	8004560 <lv_obj_get_style_opa_scale>
 800826e:	4603      	mov	r3, r0
 8008270:	2bfc      	cmp	r3, #252	; 0xfc
 8008272:	d801      	bhi.n	8008278 <lv_obj_design+0x11c>
 8008274:	2302      	movs	r3, #2
 8008276:	e146      	b.n	8008506 <lv_obj_design+0x3aa>

        return LV_DESIGN_RES_COVER;
 8008278:	2301      	movs	r3, #1
 800827a:	e144      	b.n	8008506 <lv_obj_design+0x3aa>

    }
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 800827c:	79fb      	ldrb	r3, [r7, #7]
 800827e:	2b00      	cmp	r3, #0
 8008280:	f040 80c4 	bne.w	800840c <lv_obj_design+0x2b0>
        lv_draw_rect_dsc_t draw_dsc;
        lv_draw_rect_dsc_init(&draw_dsc);
 8008284:	f107 0310 	add.w	r3, r7, #16
 8008288:	4618      	mov	r0, r3
 800828a:	f00b f865 	bl	8013358 <lv_draw_rect_dsc_init>
        /*If the border is drawn later disable loading its properties*/
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
 800828e:	2100      	movs	r1, #0
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f7fc fabe 	bl	8004812 <lv_obj_get_style_border_post>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d005      	beq.n	80082a8 <lv_obj_design+0x14c>
            draw_dsc.border_post = 1;
 800829c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80082a0:	f043 0301 	orr.w	r3, r3, #1
 80082a4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        }

        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 80082a8:	f107 0310 	add.w	r3, r7, #16
 80082ac:	461a      	mov	r2, r3
 80082ae:	2100      	movs	r1, #0
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f7ff f9e9 	bl	8007688 <lv_obj_init_draw_rect_dsc>

        lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_OBJ_PART_MAIN);
 80082b6:	2100      	movs	r1, #0
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f7fc f90d 	bl	80044d8 <lv_obj_get_style_transform_width>
 80082be:	4603      	mov	r3, r0
 80082c0:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
        lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_OBJ_PART_MAIN);
 80082c4:	2100      	movs	r1, #0
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f7fc f917 	bl	80044fa <lv_obj_get_style_transform_height>
 80082cc:	4603      	mov	r3, r0
 80082ce:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
        lv_area_t coords;
        lv_area_copy(&coords, &obj->coords);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f103 0210 	add.w	r2, r3, #16
 80082d8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80082dc:	4611      	mov	r1, r2
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fb ff50 	bl	8004184 <lv_area_copy>
        coords.x1 -= w;
 80082e4:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80082ee:	1ad3      	subs	r3, r2, r3
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	b21b      	sxth	r3, r3
 80082f4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
        coords.x2 += w;
 80082f8:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008302:	4413      	add	r3, r2
 8008304:	b29b      	uxth	r3, r3
 8008306:	b21b      	sxth	r3, r3
 8008308:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
        coords.y1 -= h;
 800830c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8008310:	b29a      	uxth	r2, r3
 8008312:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	b29b      	uxth	r3, r3
 800831a:	b21b      	sxth	r3, r3
 800831c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
        coords.y2 += h;
 8008320:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8008324:	b29a      	uxth	r2, r3
 8008326:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800832a:	4413      	add	r3, r2
 800832c:	b29b      	uxth	r3, r3
 800832e:	b21b      	sxth	r3, r3
 8008330:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

        lv_draw_rect(&coords, clip_area, &draw_dsc);
 8008334:	f107 0210 	add.w	r2, r7, #16
 8008338:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800833c:	68b9      	ldr	r1, [r7, #8]
 800833e:	4618      	mov	r0, r3
 8008340:	f00b f88e 	bl	8013460 <lv_draw_rect>

        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
 8008344:	2100      	movs	r1, #0
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f7fc f89f 	bl	800448a <lv_obj_get_style_clip_corner>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	f000 80d8 	beq.w	8008504 <lv_obj_design+0x3a8>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 8008354:	201c      	movs	r0, #28
 8008356:	f014 fadf 	bl	801c918 <_lv_mem_buf_get>
 800835a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

            lv_coord_t r = lv_obj_get_style_radius(obj, LV_OBJ_PART_MAIN);
 800835e:	2100      	movs	r1, #0
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f7fc f881 	bl	8004468 <lv_obj_get_style_radius>
 8008366:	4603      	mov	r3, r0
 8008368:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
            /* If it has border make the clip area 1 px smaller to avoid color bleeding
             * The border will cover the minimal issue on the edges*/
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
 800836c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008370:	f003 0301 	and.w	r3, r3, #1
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b00      	cmp	r3, #0
 8008378:	d035      	beq.n	80083e6 <lv_obj_design+0x28a>
 800837a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800837e:	2b01      	cmp	r3, #1
 8008380:	d931      	bls.n	80083e6 <lv_obj_design+0x28a>
 8008382:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8008386:	2b00      	cmp	r3, #0
 8008388:	dd2d      	ble.n	80083e6 <lv_obj_design+0x28a>
                lv_area_t cc_area;
                cc_area.x1 = obj->coords.x1 + 1;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008390:	b29b      	uxth	r3, r3
 8008392:	3301      	adds	r3, #1
 8008394:	b29b      	uxth	r3, r3
 8008396:	b21b      	sxth	r3, r3
 8008398:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
                cc_area.y1 = obj->coords.y1 + 1;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	3301      	adds	r3, #1
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	b21b      	sxth	r3, r3
 80083aa:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
                cc_area.x2 = obj->coords.x2 - 1;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	3b01      	subs	r3, #1
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	b21b      	sxth	r3, r3
 80083bc:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
                cc_area.y2 = obj->coords.y2 - 1;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	3b01      	subs	r3, #1
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	b21b      	sxth	r3, r3
 80083ce:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
 80083d2:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	; 0x9e
 80083d6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80083da:	2300      	movs	r3, #0
 80083dc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80083e0:	f009 fd96 	bl	8011f10 <lv_draw_mask_radius_init>
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
 80083e4:	e009      	b.n	80083fa <lv_obj_design+0x29e>
            }
            /*If no border use the full size.*/
            else {
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f103 0110 	add.w	r1, r3, #16
 80083ec:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	; 0x9e
 80083f0:	2300      	movs	r3, #0
 80083f2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80083f6:	f009 fd8b 	bl	8011f10 <lv_draw_mask_radius_init>
            }

            /*Add the mask and use `obj+8` as custom id. Don't use `obj` directly because it might be used by the user*/
            lv_draw_mask_add(mp, obj + 8);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008400:	4619      	mov	r1, r3
 8008402:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8008406:	f009 fb69 	bl	8011adc <lv_draw_mask_add>
 800840a:	e07b      	b.n	8008504 <lv_obj_design+0x3a8>
        }
    }
    else if(mode == LV_DESIGN_DRAW_POST) {
 800840c:	79fb      	ldrb	r3, [r7, #7]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d178      	bne.n	8008504 <lv_obj_design+0x3a8>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
 8008412:	2100      	movs	r1, #0
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f7fc f838 	bl	800448a <lv_obj_get_style_clip_corner>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00b      	beq.n	8008438 <lv_obj_design+0x2dc>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008426:	4618      	mov	r0, r3
 8008428:	f009 fbf6 	bl	8011c18 <lv_draw_mask_remove_custom>
 800842c:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
            _lv_mem_buf_release(param);
 8008430:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8008434:	f014 fb4e 	bl	801cad4 <_lv_mem_buf_release>
        }

        /*If the border is drawn later disable loading other properties*/
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
 8008438:	2100      	movs	r1, #0
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f7fc f9e9 	bl	8004812 <lv_obj_get_style_border_post>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d05e      	beq.n	8008504 <lv_obj_design+0x3a8>
            lv_draw_rect_dsc_t draw_dsc;
            lv_draw_rect_dsc_init(&draw_dsc);
 8008446:	f107 0310 	add.w	r3, r7, #16
 800844a:	4618      	mov	r0, r3
 800844c:	f00a ff84 	bl	8013358 <lv_draw_rect_dsc_init>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8008450:	2300      	movs	r3, #0
 8008452:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
 8008456:	2300      	movs	r3, #0
 8008458:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 800845c:	2300      	movs	r3, #0
 800845e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            draw_dsc.value_opa = LV_OPA_TRANSP;
 8008462:	2300      	movs	r3, #0
 8008464:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
 8008468:	f107 0310 	add.w	r3, r7, #16
 800846c:	461a      	mov	r2, r3
 800846e:	2100      	movs	r1, #0
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f7ff f909 	bl	8007688 <lv_obj_init_draw_rect_dsc>

            lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_OBJ_PART_MAIN);
 8008476:	2100      	movs	r1, #0
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f7fc f82d 	bl	80044d8 <lv_obj_get_style_transform_width>
 800847e:	4603      	mov	r3, r0
 8008480:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
            lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_OBJ_PART_MAIN);
 8008484:	2100      	movs	r1, #0
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f7fc f837 	bl	80044fa <lv_obj_get_style_transform_height>
 800848c:	4603      	mov	r3, r0
 800848e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
            lv_area_t coords;
            lv_area_copy(&coords, &obj->coords);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f103 0210 	add.w	r2, r3, #16
 8008498:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800849c:	4611      	mov	r1, r2
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fb fe70 	bl	8004184 <lv_area_copy>
            coords.x1 -= w;
 80084a4:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	b21b      	sxth	r3, r3
 80084b4:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
            coords.x2 += w;
 80084b8:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 80084bc:	b29a      	uxth	r2, r3
 80084be:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80084c2:	4413      	add	r3, r2
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	b21b      	sxth	r3, r3
 80084c8:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
            coords.y1 -= h;
 80084cc:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	b29b      	uxth	r3, r3
 80084da:	b21b      	sxth	r3, r3
 80084dc:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            coords.y2 += h;
 80084e0:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80084ea:	4413      	add	r3, r2
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	b21b      	sxth	r3, r3
 80084f0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 80084f4:	f107 0210 	add.w	r2, r7, #16
 80084f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80084fc:	68b9      	ldr	r1, [r7, #8]
 80084fe:	4618      	mov	r0, r3
 8008500:	f00a ffae 	bl	8013460 <lv_draw_rect>
        }
    }

    return LV_DESIGN_RES_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	37b0      	adds	r7, #176	; 0xb0
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <lv_obj_get_focused_obj>:
 * Get the really focused object by taking `focus_parent` into account.
 * @param obj the start object
 * @return the object to really focus
 */
lv_obj_t * lv_obj_get_focused_obj(const lv_obj_t * obj)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b084      	sub	sp, #16
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
    if(obj == NULL) return NULL;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <lv_obj_get_focused_obj+0x12>
 800851c:	2300      	movs	r3, #0
 800851e:	e010      	b.n	8008542 <lv_obj_get_focused_obj+0x34>
    const lv_obj_t * focus_obj = obj;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	60fb      	str	r3, [r7, #12]
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
 8008524:	e003      	b.n	800852e <lv_obj_get_focused_obj+0x20>
        focus_obj = lv_obj_get_parent(focus_obj);
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f7fe f9ae 	bl	8006888 <lv_obj_get_parent>
 800852c:	60f8      	str	r0, [r7, #12]
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f7fe ff42 	bl	80073b8 <lv_obj_get_focus_parent>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d002      	beq.n	8008540 <lv_obj_get_focused_obj+0x32>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1f2      	bne.n	8008526 <lv_obj_get_focused_obj+0x18>
    }

    return (lv_obj_t *)focus_obj;
 8008540:	68fb      	ldr	r3, [r7, #12]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
	...

0800854c <lv_obj_signal>:
 * @param sign signal type
 * @param param parameter for the signal (depends on signal type)
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_obj_signal(lv_obj_t * obj, lv_signal_t sign, void * param)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b088      	sub	sp, #32
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	460b      	mov	r3, r1
 8008556:	607a      	str	r2, [r7, #4]
 8008558:	72fb      	strb	r3, [r7, #11]
    if(sign == LV_SIGNAL_GET_STYLE) {
 800855a:	7afb      	ldrb	r3, [r7, #11]
 800855c:	2b08      	cmp	r3, #8
 800855e:	d110      	bne.n	8008582 <lv_obj_signal+0x36>
        lv_get_style_info_t * info = param;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	617b      	str	r3, [r7, #20]
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d105      	bne.n	8008578 <lv_obj_signal+0x2c>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	605a      	str	r2, [r3, #4]
 8008576:	e002      	b.n	800857e <lv_obj_signal+0x32>
        else info->result = NULL;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	2200      	movs	r2, #0
 800857c:	605a      	str	r2, [r3, #4]
        return LV_RES_OK;
 800857e:	2301      	movs	r3, #1
 8008580:	e098      	b.n	80086b4 <lv_obj_signal+0x168>
    }
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
 8008582:	7afb      	ldrb	r3, [r7, #11]
 8008584:	2b07      	cmp	r3, #7
 8008586:	d105      	bne.n	8008594 <lv_obj_signal+0x48>
 8008588:	494c      	ldr	r1, [pc, #304]	; (80086bc <lv_obj_signal+0x170>)
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7ff f85a 	bl	8007644 <lv_obj_handle_get_type_signal>
 8008590:	4603      	mov	r3, r0
 8008592:	e08f      	b.n	80086b4 <lv_obj_signal+0x168>

    lv_res_t res = LV_RES_OK;
 8008594:	2301      	movs	r3, #1
 8008596:	77fb      	strb	r3, [r7, #31]

    if(sign == LV_SIGNAL_CHILD_CHG) {
 8008598:	7afb      	ldrb	r3, [r7, #11]
 800859a:	2b01      	cmp	r3, #1
 800859c:	d10a      	bne.n	80085b4 <lv_obj_signal+0x68>
        /*Return 'invalid' if the child change signal is not enabled*/
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 800859e:	2101      	movs	r1, #1
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f7fe ff3d 	bl	8007420 <lv_obj_is_protected>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f000 8082 	beq.w	80086b2 <lv_obj_signal+0x166>
 80085ae:	2300      	movs	r3, #0
 80085b0:	77fb      	strb	r3, [r7, #31]
 80085b2:	e07e      	b.n	80086b2 <lv_obj_signal+0x166>
    }
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 80085b4:	7afb      	ldrb	r3, [r7, #11]
 80085b6:	2b06      	cmp	r3, #6
 80085b8:	d111      	bne.n	80085de <lv_obj_signal+0x92>
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
 80085ba:	2100      	movs	r1, #0
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f7ff fc38 	bl	8007e32 <lv_obj_get_draw_rect_ext_pad_size>
 80085c2:	4603      	mov	r3, r0
 80085c4:	837b      	strh	r3, [r7, #26]
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80085cc:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80085d0:	4293      	cmp	r3, r2
 80085d2:	bfb8      	it	lt
 80085d4:	4613      	movlt	r3, r2
 80085d6:	b21a      	sxth	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	865a      	strh	r2, [r3, #50]	; 0x32
 80085dc:	e069      	b.n	80086b2 <lv_obj_signal+0x166>
    }
#if LV_USE_OBJ_REALIGN
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
 80085de:	7afb      	ldrb	r3, [r7, #11]
 80085e0:	2b03      	cmp	r3, #3
 80085e2:	d10b      	bne.n	80085fc <lv_obj_signal+0xb0>
        if(obj->realign.auto_realign) {
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d05e      	beq.n	80086b2 <lv_obj_signal+0x166>
            lv_obj_realign(obj);
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f7fd fc05 	bl	8005e04 <lv_obj_realign>
 80085fa:	e05a      	b.n	80086b2 <lv_obj_signal+0x166>
        }
    }
#endif
    else if(sign == LV_SIGNAL_STYLE_CHG) {
 80085fc:	7afb      	ldrb	r3, [r7, #11]
 80085fe:	2b04      	cmp	r3, #4
 8008600:	d103      	bne.n	800860a <lv_obj_signal+0xbe>
        lv_obj_refresh_ext_draw_pad(obj);
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f7fe f8a4 	bl	8006750 <lv_obj_refresh_ext_draw_pad>
 8008608:	e053      	b.n	80086b2 <lv_obj_signal+0x166>
    }
    else if(sign == LV_SIGNAL_PRESSED) {
 800860a:	7afb      	ldrb	r3, [r7, #11]
 800860c:	2b0b      	cmp	r3, #11
 800860e:	d104      	bne.n	800861a <lv_obj_signal+0xce>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
 8008610:	2110      	movs	r1, #16
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f7fd ff68 	bl	80064e8 <lv_obj_add_state>
 8008618:	e04b      	b.n	80086b2 <lv_obj_signal+0x166>
    }
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
 800861a:	7afb      	ldrb	r3, [r7, #11]
 800861c:	2b0e      	cmp	r3, #14
 800861e:	d002      	beq.n	8008626 <lv_obj_signal+0xda>
 8008620:	7afb      	ldrb	r3, [r7, #11]
 8008622:	2b0d      	cmp	r3, #13
 8008624:	d104      	bne.n	8008630 <lv_obj_signal+0xe4>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 8008626:	2110      	movs	r1, #16
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f7fd ff8d 	bl	8006548 <lv_obj_clear_state>
 800862e:	e040      	b.n	80086b2 <lv_obj_signal+0x166>
    }
    else if(sign == LV_SIGNAL_FOCUS) {
 8008630:	7afb      	ldrb	r3, [r7, #11]
 8008632:	2b16      	cmp	r3, #22
 8008634:	d12a      	bne.n	800868c <lv_obj_signal+0x140>
        bool editing = false;
 8008636:	2300      	movs	r3, #0
 8008638:	77bb      	strb	r3, [r7, #30]
#if LV_USE_GROUP
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f7fe ff4c 	bl	80074d8 <lv_obj_get_group>
 8008640:	4603      	mov	r3, r0
 8008642:	4618      	mov	r0, r3
 8008644:	f7f9 faae 	bl	8001ba4 <lv_group_get_editing>
 8008648:	4603      	mov	r3, r0
 800864a:	77bb      	strb	r3, [r7, #30]
#endif
        if(editing) {
 800864c:	7fbb      	ldrb	r3, [r7, #30]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00f      	beq.n	8008672 <lv_obj_signal+0x126>
            uint8_t state = LV_STATE_FOCUSED;
 8008652:	2302      	movs	r3, #2
 8008654:	777b      	strb	r3, [r7, #29]
            state |= LV_STATE_EDITED;
 8008656:	7f7b      	ldrb	r3, [r7, #29]
 8008658:	f043 0304 	orr.w	r3, r3, #4
 800865c:	777b      	strb	r3, [r7, #29]

            /*if using focus mode, change target to parent*/
            obj = lv_obj_get_focused_obj(obj);
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f7ff ff55 	bl	800850e <lv_obj_get_focused_obj>
 8008664:	60f8      	str	r0, [r7, #12]

            lv_obj_add_state(obj, state);
 8008666:	7f7b      	ldrb	r3, [r7, #29]
 8008668:	4619      	mov	r1, r3
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f7fd ff3c 	bl	80064e8 <lv_obj_add_state>
 8008670:	e01f      	b.n	80086b2 <lv_obj_signal+0x166>
        }
        else {

            /*if using focus mode, change target to parent*/
            obj = lv_obj_get_focused_obj(obj);
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f7ff ff4b 	bl	800850e <lv_obj_get_focused_obj>
 8008678:	60f8      	str	r0, [r7, #12]

            lv_obj_add_state(obj, LV_STATE_FOCUSED);
 800867a:	2102      	movs	r1, #2
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f7fd ff33 	bl	80064e8 <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 8008682:	2104      	movs	r1, #4
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f7fd ff5f 	bl	8006548 <lv_obj_clear_state>
 800868a:	e012      	b.n	80086b2 <lv_obj_signal+0x166>
        }
    }
    else if(sign == LV_SIGNAL_DEFOCUS) {
 800868c:	7afb      	ldrb	r3, [r7, #11]
 800868e:	2b17      	cmp	r3, #23
 8008690:	d108      	bne.n	80086a4 <lv_obj_signal+0x158>

        /*if using focus mode, change target to parent*/
        obj = lv_obj_get_focused_obj(obj);
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f7ff ff3b 	bl	800850e <lv_obj_get_focused_obj>
 8008698:	60f8      	str	r0, [r7, #12]

        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
 800869a:	2106      	movs	r1, #6
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f7fd ff53 	bl	8006548 <lv_obj_clear_state>
 80086a2:	e006      	b.n	80086b2 <lv_obj_signal+0x166>
    }
    else if(sign == LV_SIGNAL_CLEANUP) {
 80086a4:	7afb      	ldrb	r3, [r7, #11]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d103      	bne.n	80086b2 <lv_obj_signal+0x166>
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
 80086aa:	2100      	movs	r1, #0
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f7fd fbef 	bl	8005e90 <lv_obj_clean_style_list>
    }

    return res;
 80086b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3720      	adds	r7, #32
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	0802d7cc 	.word	0x0802d7cc

080086c0 <refresh_children_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_children_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	807b      	strh	r3, [r7, #2]
 80086cc:	4613      	mov	r3, r2
 80086ce:	803b      	strh	r3, [r7, #0]
    lv_obj_t * i;
    _LV_LL_READ(obj->child_ll, i) {
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3304      	adds	r3, #4
 80086d4:	4618      	mov	r0, r3
 80086d6:	f013 fde7 	bl	801c2a8 <_lv_ll_get_head>
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	e036      	b.n	800874c <refresh_children_position+0x8c>
        i->coords.x1 += x_diff;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	887b      	ldrh	r3, [r7, #2]
 80086e8:	4413      	add	r3, r2
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	b21a      	sxth	r2, r3
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	821a      	strh	r2, [r3, #16]
        i->coords.y1 += y_diff;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	883b      	ldrh	r3, [r7, #0]
 80086fc:	4413      	add	r3, r2
 80086fe:	b29b      	uxth	r3, r3
 8008700:	b21a      	sxth	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	825a      	strh	r2, [r3, #18]
        i->coords.x2 += x_diff;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800870c:	b29a      	uxth	r2, r3
 800870e:	887b      	ldrh	r3, [r7, #2]
 8008710:	4413      	add	r3, r2
 8008712:	b29b      	uxth	r3, r3
 8008714:	b21a      	sxth	r2, r3
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	829a      	strh	r2, [r3, #20]
        i->coords.y2 += y_diff;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008720:	b29a      	uxth	r2, r3
 8008722:	883b      	ldrh	r3, [r7, #0]
 8008724:	4413      	add	r3, r2
 8008726:	b29b      	uxth	r3, r3
 8008728:	b21a      	sxth	r2, r3
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	82da      	strh	r2, [r3, #22]

        refresh_children_position(i, x_diff, y_diff);
 800872e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8008732:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008736:	4619      	mov	r1, r3
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f7ff ffc1 	bl	80086c0 <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	3304      	adds	r3, #4
 8008742:	68f9      	ldr	r1, [r7, #12]
 8008744:	4618      	mov	r0, r3
 8008746:	f013 fdd5 	bl	801c2f4 <_lv_ll_get_next>
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1c5      	bne.n	80086de <refresh_children_position+0x1e>
    }
}
 8008752:	bf00      	nop
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <report_style_mod_core>:
 * Refresh the style of all children of an object. (Called recursively)
 * @param style refresh objects only with this style_list.
 * @param obj pointer to an object
 */
static void report_style_mod_core(void * style, lv_obj_t * obj)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b086      	sub	sp, #24
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	6039      	str	r1, [r7, #0]
    uint8_t part;
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 8008764:	2300      	movs	r3, #0
 8008766:	75fb      	strb	r3, [r7, #23]
 8008768:	e02e      	b.n	80087c8 <report_style_mod_core+0x6e>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 800876a:	7dfb      	ldrb	r3, [r7, #23]
 800876c:	4619      	mov	r1, r3
 800876e:	6838      	ldr	r0, [r7, #0]
 8008770:	f7fe f9aa 	bl	8006ac8 <lv_obj_get_style_list>
 8008774:	60f8      	str	r0, [r7, #12]
        if(list == NULL) break;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d029      	beq.n	80087d0 <report_style_mod_core+0x76>

        uint8_t ci;
        for(ci = 0; ci < list->style_cnt; ci++) {
 800877c:	2300      	movs	r3, #0
 800877e:	75bb      	strb	r3, [r7, #22]
 8008780:	e016      	b.n	80087b0 <report_style_mod_core+0x56>
            /* changed class to _class to allow compilation as c++ */
            lv_style_t * _class = lv_style_list_get_style(list, ci);
 8008782:	7dbb      	ldrb	r3, [r7, #22]
 8008784:	4619      	mov	r1, r3
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f7fb fe39 	bl	80043fe <lv_style_list_get_style>
 800878c:	60b8      	str	r0, [r7, #8]
            if(_class == style || style == NULL) {
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	429a      	cmp	r2, r3
 8008794:	d002      	beq.n	800879c <report_style_mod_core+0x42>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d106      	bne.n	80087aa <report_style_mod_core+0x50>
                lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
 800879c:	7dfb      	ldrb	r3, [r7, #23]
 800879e:	22ff      	movs	r2, #255	; 0xff
 80087a0:	4619      	mov	r1, r3
 80087a2:	6838      	ldr	r0, [r7, #0]
 80087a4:	f7fd fba6 	bl	8005ef4 <lv_obj_refresh_style>
                break;
 80087a8:	e00b      	b.n	80087c2 <report_style_mod_core+0x68>
        for(ci = 0; ci < list->style_cnt; ci++) {
 80087aa:	7dbb      	ldrb	r3, [r7, #22]
 80087ac:	3301      	adds	r3, #1
 80087ae:	75bb      	strb	r3, [r7, #22]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	791b      	ldrb	r3, [r3, #4]
 80087b4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	461a      	mov	r2, r3
 80087bc:	7dbb      	ldrb	r3, [r7, #22]
 80087be:	4293      	cmp	r3, r2
 80087c0:	d3df      	bcc.n	8008782 <report_style_mod_core+0x28>
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 80087c2:	7dfb      	ldrb	r3, [r7, #23]
 80087c4:	3301      	adds	r3, #1
 80087c6:	75fb      	strb	r3, [r7, #23]
 80087c8:	7dfb      	ldrb	r3, [r7, #23]
 80087ca:	2b40      	cmp	r3, #64	; 0x40
 80087cc:	d1cd      	bne.n	800876a <report_style_mod_core+0x10>
 80087ce:	e000      	b.n	80087d2 <report_style_mod_core+0x78>
        if(list == NULL) break;
 80087d0:	bf00      	nop
            }
        }
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 80087d2:	2100      	movs	r1, #0
 80087d4:	6838      	ldr	r0, [r7, #0]
 80087d6:	f7fe f875 	bl	80068c4 <lv_obj_get_child>
 80087da:	6138      	str	r0, [r7, #16]
    while(child) {
 80087dc:	e008      	b.n	80087f0 <report_style_mod_core+0x96>
        report_style_mod_core(style, child);
 80087de:	6939      	ldr	r1, [r7, #16]
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f7ff ffba 	bl	800875a <report_style_mod_core>
        child = lv_obj_get_child(obj, child);
 80087e6:	6939      	ldr	r1, [r7, #16]
 80087e8:	6838      	ldr	r0, [r7, #0]
 80087ea:	f7fe f86b 	bl	80068c4 <lv_obj_get_child>
 80087ee:	6138      	str	r0, [r7, #16]
    while(child) {
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1f3      	bne.n	80087de <report_style_mod_core+0x84>
    }

}
 80087f6:	bf00      	nop
 80087f8:	3718      	adds	r7, #24
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b084      	sub	sp, #16
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 8008806:	2100      	movs	r1, #0
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f7fe f85b 	bl	80068c4 <lv_obj_get_child>
 800880e:	60f8      	str	r0, [r7, #12]
    while(child != NULL) {
 8008810:	e013      	b.n	800883a <refresh_children_style+0x3c>
        lv_obj_invalidate(child);
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f7fd f818 	bl	8005848 <lv_obj_invalidate>
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	69db      	ldr	r3, [r3, #28]
 800881c:	2200      	movs	r2, #0
 800881e:	2104      	movs	r1, #4
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	4798      	blx	r3
        lv_obj_invalidate(child);
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f7fd f80f 	bl	8005848 <lv_obj_invalidate>

        refresh_children_style(child); /*Check children too*/
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f7ff ffe7 	bl	80087fe <refresh_children_style>
        child = lv_obj_get_child(obj, child);
 8008830:	68f9      	ldr	r1, [r7, #12]
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f7fe f846 	bl	80068c4 <lv_obj_get_child>
 8008838:	60f8      	str	r0, [r7, #12]
    while(child != NULL) {
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1e8      	bne.n	8008812 <refresh_children_style+0x14>
    }
}
 8008840:	bf00      	nop
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <obj_align_core>:
    }
}

static void obj_align_core(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, bool x_set, bool y_set,
                           lv_coord_t x_ofs, lv_coord_t y_ofs)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b088      	sub	sp, #32
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	4611      	mov	r1, r2
 8008854:	461a      	mov	r2, r3
 8008856:	460b      	mov	r3, r1
 8008858:	71fb      	strb	r3, [r7, #7]
 800885a:	4613      	mov	r3, r2
 800885c:	71bb      	strb	r3, [r7, #6]
    lv_point_t new_pos;
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	f103 0010 	add.w	r0, r3, #16
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f103 0110 	add.w	r1, r3, #16
 800886a:	f107 0314 	add.w	r3, r7, #20
 800886e:	79fa      	ldrb	r2, [r7, #7]
 8008870:	f012 fd8c 	bl	801b38c <_lv_area_align>

    /*Bring together the coordination system of base and obj*/
    lv_obj_t * par        = lv_obj_get_parent(obj);
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f7fe f807 	bl	8006888 <lv_obj_get_parent>
 800887a:	61f8      	str	r0, [r7, #28]
    lv_coord_t par_abs_x  = par->coords.x1;
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	8a1b      	ldrh	r3, [r3, #16]
 8008880:	837b      	strh	r3, [r7, #26]
    lv_coord_t par_abs_y  = par->coords.y1;
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	8a5b      	ldrh	r3, [r3, #18]
 8008886:	833b      	strh	r3, [r7, #24]
    new_pos.x += x_ofs;
 8008888:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800888c:	b29a      	uxth	r2, r3
 800888e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008890:	4413      	add	r3, r2
 8008892:	b29b      	uxth	r3, r3
 8008894:	b21b      	sxth	r3, r3
 8008896:	82bb      	strh	r3, [r7, #20]
    new_pos.y += y_ofs;
 8008898:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800889c:	b29a      	uxth	r2, r3
 800889e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80088a0:	4413      	add	r3, r2
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	b21b      	sxth	r3, r3
 80088a6:	82fb      	strh	r3, [r7, #22]
    new_pos.x -= par_abs_x;
 80088a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	8b7b      	ldrh	r3, [r7, #26]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	b21b      	sxth	r3, r3
 80088b6:	82bb      	strh	r3, [r7, #20]
    new_pos.y -= par_abs_y;
 80088b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80088bc:	b29a      	uxth	r2, r3
 80088be:	8b3b      	ldrh	r3, [r7, #24]
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	b21b      	sxth	r3, r3
 80088c6:	82fb      	strh	r3, [r7, #22]

    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
 80088c8:	79bb      	ldrb	r3, [r7, #6]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00c      	beq.n	80088e8 <obj_align_core+0xa0>
 80088ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d008      	beq.n	80088e8 <obj_align_core+0xa0>
 80088d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80088da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80088de:	4619      	mov	r1, r3
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f7fd f8d5 	bl	8005a90 <lv_obj_set_pos>
    else if(x_set) lv_obj_set_x(obj, new_pos.x);
    else if(y_set) lv_obj_set_y(obj, new_pos.y);
}
 80088e6:	e013      	b.n	8008910 <obj_align_core+0xc8>
    else if(x_set) lv_obj_set_x(obj, new_pos.x);
 80088e8:	79bb      	ldrb	r3, [r7, #6]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d006      	beq.n	80088fc <obj_align_core+0xb4>
 80088ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80088f2:	4619      	mov	r1, r3
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f7fd f971 	bl	8005bdc <lv_obj_set_x>
}
 80088fa:	e009      	b.n	8008910 <obj_align_core+0xc8>
    else if(y_set) lv_obj_set_y(obj, new_pos.y);
 80088fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008900:	2b00      	cmp	r3, #0
 8008902:	d005      	beq.n	8008910 <obj_align_core+0xc8>
 8008904:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008908:	4619      	mov	r1, r3
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f7fd f990 	bl	8005c30 <lv_obj_set_y>
}
 8008910:	bf00      	nop
 8008912:	3720      	adds	r7, #32
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <obj_align_mid_core>:

static void obj_align_mid_core(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align,  bool x_set, bool y_set,
                               lv_coord_t x_ofs, lv_coord_t y_ofs)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b08a      	sub	sp, #40	; 0x28
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	4611      	mov	r1, r2
 8008924:	461a      	mov	r2, r3
 8008926:	460b      	mov	r3, r1
 8008928:	71fb      	strb	r3, [r7, #7]
 800892a:	4613      	mov	r3, r2
 800892c:	71bb      	strb	r3, [r7, #6]
    lv_coord_t new_x = lv_obj_get_x(obj);
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	f7fe f81e 	bl	8006970 <lv_obj_get_x>
 8008934:	4603      	mov	r3, r0
 8008936:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t new_y = lv_obj_get_y(obj);
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f7fe f84d 	bl	80069d8 <lv_obj_get_y>
 800893e:	4603      	mov	r3, r0
 8008940:	84bb      	strh	r3, [r7, #36]	; 0x24

    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f7fe f87c 	bl	8006a40 <lv_obj_get_width>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	da00      	bge.n	8008950 <obj_align_mid_core+0x38>
 800894e:	3301      	adds	r3, #1
 8008950:	105b      	asrs	r3, r3, #1
 8008952:	847b      	strh	r3, [r7, #34]	; 0x22
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f7fe f895 	bl	8006a84 <lv_obj_get_height>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	da00      	bge.n	8008962 <obj_align_mid_core+0x4a>
 8008960:	3301      	adds	r3, #1
 8008962:	105b      	asrs	r3, r3, #1
 8008964:	843b      	strh	r3, [r7, #32]

    switch(align) {
 8008966:	79fb      	ldrb	r3, [r7, #7]
 8008968:	2b14      	cmp	r3, #20
 800896a:	f200 819e 	bhi.w	8008caa <obj_align_mid_core+0x392>
 800896e:	a201      	add	r2, pc, #4	; (adr r2, 8008974 <obj_align_mid_core+0x5c>)
 8008970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008974:	080089c9 	.word	0x080089c9
 8008978:	08008a03 	.word	0x08008a03
 800897c:	08008a15 	.word	0x08008a15
 8008980:	08008a3b 	.word	0x08008a3b
 8008984:	08008a57 	.word	0x08008a57
 8008988:	08008a73 	.word	0x08008a73
 800898c:	08008aa3 	.word	0x08008aa3
 8008990:	08008ac9 	.word	0x08008ac9
 8008994:	08008aef 	.word	0x08008aef
 8008998:	08008b1f 	.word	0x08008b1f
 800899c:	08008b31 	.word	0x08008b31
 80089a0:	08008b57 	.word	0x08008b57
 80089a4:	08008b73 	.word	0x08008b73
 80089a8:	08008b8f 	.word	0x08008b8f
 80089ac:	08008bbf 	.word	0x08008bbf
 80089b0:	08008be5 	.word	0x08008be5
 80089b4:	08008bf7 	.word	0x08008bf7
 80089b8:	08008c1d 	.word	0x08008c1d
 80089bc:	08008c39 	.word	0x08008c39
 80089c0:	08008c55 	.word	0x08008c55
 80089c4:	08008c85 	.word	0x08008c85
        case LV_ALIGN_CENTER:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 80089c8:	68b8      	ldr	r0, [r7, #8]
 80089ca:	f7fe f839 	bl	8006a40 <lv_obj_get_width>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	da00      	bge.n	80089d6 <obj_align_mid_core+0xbe>
 80089d4:	3301      	adds	r3, #1
 80089d6:	105b      	asrs	r3, r3, #1
 80089d8:	b21b      	sxth	r3, r3
 80089da:	b29a      	uxth	r2, r3
 80089dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 80089e4:	68b8      	ldr	r0, [r7, #8]
 80089e6:	f7fe f84d 	bl	8006a84 <lv_obj_get_height>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	da00      	bge.n	80089f2 <obj_align_mid_core+0xda>
 80089f0:	3301      	adds	r3, #1
 80089f2:	105b      	asrs	r3, r3, #1
 80089f4:	b21b      	sxth	r3, r3
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	8c3b      	ldrh	r3, [r7, #32]
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008a00:	e153      	b.n	8008caa <obj_align_mid_core+0x392>

        case LV_ALIGN_IN_TOP_LEFT:
            new_x = -obj_w_half;
 8008a02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a04:	425b      	negs	r3, r3
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8008a0a:	8c3b      	ldrh	r3, [r7, #32]
 8008a0c:	425b      	negs	r3, r3
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008a12:	e14a      	b.n	8008caa <obj_align_mid_core+0x392>
        case LV_ALIGN_IN_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8008a14:	68b8      	ldr	r0, [r7, #8]
 8008a16:	f7fe f813 	bl	8006a40 <lv_obj_get_width>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	da00      	bge.n	8008a22 <obj_align_mid_core+0x10a>
 8008a20:	3301      	adds	r3, #1
 8008a22:	105b      	asrs	r3, r3, #1
 8008a24:	b21b      	sxth	r3, r3
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8008a30:	8c3b      	ldrh	r3, [r7, #32]
 8008a32:	425b      	negs	r3, r3
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008a38:	e137      	b.n	8008caa <obj_align_mid_core+0x392>

        case LV_ALIGN_IN_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008a3a:	68b8      	ldr	r0, [r7, #8]
 8008a3c:	f7fe f800 	bl	8006a40 <lv_obj_get_width>
 8008a40:	4603      	mov	r3, r0
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8008a4c:	8c3b      	ldrh	r3, [r7, #32]
 8008a4e:	425b      	negs	r3, r3
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008a54:	e129      	b.n	8008caa <obj_align_mid_core+0x392>

        case LV_ALIGN_IN_BOTTOM_LEFT:
            new_x = -obj_w_half;
 8008a56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a58:	425b      	negs	r3, r3
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8008a5e:	68b8      	ldr	r0, [r7, #8]
 8008a60:	f7fe f810 	bl	8006a84 <lv_obj_get_height>
 8008a64:	4603      	mov	r3, r0
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	8c3b      	ldrh	r3, [r7, #32]
 8008a6a:	1ad3      	subs	r3, r2, r3
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008a70:	e11b      	b.n	8008caa <obj_align_mid_core+0x392>
        case LV_ALIGN_IN_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8008a72:	68b8      	ldr	r0, [r7, #8]
 8008a74:	f7fd ffe4 	bl	8006a40 <lv_obj_get_width>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	da00      	bge.n	8008a80 <obj_align_mid_core+0x168>
 8008a7e:	3301      	adds	r3, #1
 8008a80:	105b      	asrs	r3, r3, #1
 8008a82:	b21b      	sxth	r3, r3
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8008a8e:	68b8      	ldr	r0, [r7, #8]
 8008a90:	f7fd fff8 	bl	8006a84 <lv_obj_get_height>
 8008a94:	4603      	mov	r3, r0
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	8c3b      	ldrh	r3, [r7, #32]
 8008a9a:	1ad3      	subs	r3, r2, r3
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008aa0:	e103      	b.n	8008caa <obj_align_mid_core+0x392>

        case LV_ALIGN_IN_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008aa2:	68b8      	ldr	r0, [r7, #8]
 8008aa4:	f7fd ffcc 	bl	8006a40 <lv_obj_get_width>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8008ab4:	68b8      	ldr	r0, [r7, #8]
 8008ab6:	f7fd ffe5 	bl	8006a84 <lv_obj_get_height>
 8008aba:	4603      	mov	r3, r0
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	8c3b      	ldrh	r3, [r7, #32]
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008ac6:	e0f0      	b.n	8008caa <obj_align_mid_core+0x392>

        case LV_ALIGN_IN_LEFT_MID:
            new_x = -obj_w_half;
 8008ac8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008aca:	425b      	negs	r3, r3
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8008ad0:	68b8      	ldr	r0, [r7, #8]
 8008ad2:	f7fd ffd7 	bl	8006a84 <lv_obj_get_height>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	da00      	bge.n	8008ade <obj_align_mid_core+0x1c6>
 8008adc:	3301      	adds	r3, #1
 8008ade:	105b      	asrs	r3, r3, #1
 8008ae0:	b21b      	sxth	r3, r3
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	8c3b      	ldrh	r3, [r7, #32]
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008aec:	e0dd      	b.n	8008caa <obj_align_mid_core+0x392>

        case LV_ALIGN_IN_RIGHT_MID:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008aee:	68b8      	ldr	r0, [r7, #8]
 8008af0:	f7fd ffa6 	bl	8006a40 <lv_obj_get_width>
 8008af4:	4603      	mov	r3, r0
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8008b00:	68b8      	ldr	r0, [r7, #8]
 8008b02:	f7fd ffbf 	bl	8006a84 <lv_obj_get_height>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	da00      	bge.n	8008b0e <obj_align_mid_core+0x1f6>
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	105b      	asrs	r3, r3, #1
 8008b10:	b21b      	sxth	r3, r3
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	8c3b      	ldrh	r3, [r7, #32]
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008b1c:	e0c5      	b.n	8008caa <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_TOP_LEFT:
            new_x = -obj_w_half;
 8008b1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b20:	425b      	negs	r3, r3
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8008b26:	8c3b      	ldrh	r3, [r7, #32]
 8008b28:	425b      	negs	r3, r3
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008b2e:	e0bc      	b.n	8008caa <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8008b30:	68b8      	ldr	r0, [r7, #8]
 8008b32:	f7fd ff85 	bl	8006a40 <lv_obj_get_width>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	da00      	bge.n	8008b3e <obj_align_mid_core+0x226>
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	105b      	asrs	r3, r3, #1
 8008b40:	b21b      	sxth	r3, r3
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b46:	1ad3      	subs	r3, r2, r3
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8008b4c:	8c3b      	ldrh	r3, [r7, #32]
 8008b4e:	425b      	negs	r3, r3
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008b54:	e0a9      	b.n	8008caa <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008b56:	68b8      	ldr	r0, [r7, #8]
 8008b58:	f7fd ff72 	bl	8006a40 <lv_obj_get_width>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8008b68:	8c3b      	ldrh	r3, [r7, #32]
 8008b6a:	425b      	negs	r3, r3
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008b70:	e09b      	b.n	8008caa <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_BOTTOM_LEFT:
            new_x = -obj_w_half;
 8008b72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b74:	425b      	negs	r3, r3
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8008b7a:	68b8      	ldr	r0, [r7, #8]
 8008b7c:	f7fd ff82 	bl	8006a84 <lv_obj_get_height>
 8008b80:	4603      	mov	r3, r0
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	8c3b      	ldrh	r3, [r7, #32]
 8008b86:	1ad3      	subs	r3, r2, r3
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008b8c:	e08d      	b.n	8008caa <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8008b8e:	68b8      	ldr	r0, [r7, #8]
 8008b90:	f7fd ff56 	bl	8006a40 <lv_obj_get_width>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	da00      	bge.n	8008b9c <obj_align_mid_core+0x284>
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	105b      	asrs	r3, r3, #1
 8008b9e:	b21b      	sxth	r3, r3
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8008baa:	68b8      	ldr	r0, [r7, #8]
 8008bac:	f7fd ff6a 	bl	8006a84 <lv_obj_get_height>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	8c3b      	ldrh	r3, [r7, #32]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008bbc:	e075      	b.n	8008caa <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008bbe:	68b8      	ldr	r0, [r7, #8]
 8008bc0:	f7fd ff3e 	bl	8006a40 <lv_obj_get_width>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008bca:	1ad3      	subs	r3, r2, r3
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8008bd0:	68b8      	ldr	r0, [r7, #8]
 8008bd2:	f7fd ff57 	bl	8006a84 <lv_obj_get_height>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	8c3b      	ldrh	r3, [r7, #32]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008be2:	e062      	b.n	8008caa <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_LEFT_TOP:
            new_x = -obj_w_half;
 8008be4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008be6:	425b      	negs	r3, r3
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8008bec:	8c3b      	ldrh	r3, [r7, #32]
 8008bee:	425b      	negs	r3, r3
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008bf4:	e059      	b.n	8008caa <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_LEFT_MID:
            new_x = -obj_w_half;
 8008bf6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008bf8:	425b      	negs	r3, r3
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8008bfe:	68b8      	ldr	r0, [r7, #8]
 8008c00:	f7fd ff40 	bl	8006a84 <lv_obj_get_height>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	da00      	bge.n	8008c0c <obj_align_mid_core+0x2f4>
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	105b      	asrs	r3, r3, #1
 8008c0e:	b21b      	sxth	r3, r3
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	8c3b      	ldrh	r3, [r7, #32]
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008c1a:	e046      	b.n	8008caa <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_LEFT_BOTTOM:
            new_x = -obj_w_half;
 8008c1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c1e:	425b      	negs	r3, r3
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8008c24:	68b8      	ldr	r0, [r7, #8]
 8008c26:	f7fd ff2d 	bl	8006a84 <lv_obj_get_height>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	8c3b      	ldrh	r3, [r7, #32]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008c36:	e038      	b.n	8008caa <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_RIGHT_TOP:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008c38:	68b8      	ldr	r0, [r7, #8]
 8008c3a:	f7fd ff01 	bl	8006a40 <lv_obj_get_width>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = -obj_h_half;
 8008c4a:	8c3b      	ldrh	r3, [r7, #32]
 8008c4c:	425b      	negs	r3, r3
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008c52:	e02a      	b.n	8008caa <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_RIGHT_MID:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008c54:	68b8      	ldr	r0, [r7, #8]
 8008c56:	f7fd fef3 	bl	8006a40 <lv_obj_get_width>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c60:	1ad3      	subs	r3, r2, r3
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8008c66:	68b8      	ldr	r0, [r7, #8]
 8008c68:	f7fd ff0c 	bl	8006a84 <lv_obj_get_height>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	da00      	bge.n	8008c74 <obj_align_mid_core+0x35c>
 8008c72:	3301      	adds	r3, #1
 8008c74:	105b      	asrs	r3, r3, #1
 8008c76:	b21b      	sxth	r3, r3
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	8c3b      	ldrh	r3, [r7, #32]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008c82:	e012      	b.n	8008caa <obj_align_mid_core+0x392>

        case LV_ALIGN_OUT_RIGHT_BOTTOM:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8008c84:	68b8      	ldr	r0, [r7, #8]
 8008c86:	f7fd fedb 	bl	8006a40 <lv_obj_get_width>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	84fb      	strh	r3, [r7, #38]	; 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8008c96:	68b8      	ldr	r0, [r7, #8]
 8008c98:	f7fd fef4 	bl	8006a84 <lv_obj_get_height>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	8c3b      	ldrh	r3, [r7, #32]
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	84bb      	strh	r3, [r7, #36]	; 0x24
            break;
 8008ca8:	bf00      	nop
    }

    /*Bring together the coordination system of base and obj*/
    lv_obj_t * par        = lv_obj_get_parent(obj);
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f7fd fdec 	bl	8006888 <lv_obj_get_parent>
 8008cb0:	61f8      	str	r0, [r7, #28]
    lv_coord_t base_abs_x = base->coords.x1;
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	8a1b      	ldrh	r3, [r3, #16]
 8008cb6:	837b      	strh	r3, [r7, #26]
    lv_coord_t base_abs_y = base->coords.y1;
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	8a5b      	ldrh	r3, [r3, #18]
 8008cbc:	833b      	strh	r3, [r7, #24]
    lv_coord_t par_abs_x  = par->coords.x1;
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	8a1b      	ldrh	r3, [r3, #16]
 8008cc2:	82fb      	strh	r3, [r7, #22]
    lv_coord_t par_abs_y  = par->coords.y1;
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	8a5b      	ldrh	r3, [r3, #18]
 8008cc8:	82bb      	strh	r3, [r7, #20]
    new_x += x_ofs + base_abs_x;
 8008cca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008ccc:	8b7b      	ldrh	r3, [r7, #26]
 8008cce:	4413      	add	r3, r2
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008cd4:	4413      	add	r3, r2
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	84fb      	strh	r3, [r7, #38]	; 0x26
    new_y += y_ofs + base_abs_y;
 8008cda:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8008cdc:	8b3b      	ldrh	r3, [r7, #24]
 8008cde:	4413      	add	r3, r2
 8008ce0:	b29a      	uxth	r2, r3
 8008ce2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ce4:	4413      	add	r3, r2
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	84bb      	strh	r3, [r7, #36]	; 0x24
    new_x -= par_abs_x;
 8008cea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008cec:	8afb      	ldrh	r3, [r7, #22]
 8008cee:	1ad3      	subs	r3, r2, r3
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	84fb      	strh	r3, [r7, #38]	; 0x26
    new_y -= par_abs_y;
 8008cf4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008cf6:	8abb      	ldrh	r3, [r7, #20]
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	84bb      	strh	r3, [r7, #36]	; 0x24
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
 8008cfe:	79bb      	ldrb	r3, [r7, #6]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00c      	beq.n	8008d1e <obj_align_mid_core+0x406>
 8008d04:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d008      	beq.n	8008d1e <obj_align_mid_core+0x406>
 8008d0c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8008d10:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008d14:	4619      	mov	r1, r3
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f7fc feba 	bl	8005a90 <lv_obj_set_pos>
    else if(x_set) lv_obj_set_x(obj, new_x);
    else if(y_set) lv_obj_set_y(obj, new_y);

}
 8008d1c:	e013      	b.n	8008d46 <obj_align_mid_core+0x42e>
    else if(x_set) lv_obj_set_x(obj, new_x);
 8008d1e:	79bb      	ldrb	r3, [r7, #6]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d006      	beq.n	8008d32 <obj_align_mid_core+0x41a>
 8008d24:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008d28:	4619      	mov	r1, r3
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f7fc ff56 	bl	8005bdc <lv_obj_set_x>
}
 8008d30:	e009      	b.n	8008d46 <obj_align_mid_core+0x42e>
    else if(y_set) lv_obj_set_y(obj, new_y);
 8008d32:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d005      	beq.n	8008d46 <obj_align_mid_core+0x42e>
 8008d3a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008d3e:	4619      	mov	r1, r3
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f7fc ff75 	bl	8005c30 <lv_obj_set_y>
}
 8008d46:	bf00      	nop
 8008d48:	3728      	adds	r7, #40	; 0x28
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop

08008d50 <trans_create>:
 * @param new_state the new state of the object
 * @return pointer to the allocated `the transaction` variable or `NULL` if no transition created
 */
static lv_style_trans_t * trans_create(lv_obj_t * obj, lv_style_property_t prop, uint8_t part, lv_state_t prev_state,
                                       lv_state_t new_state)
{
 8008d50:	b590      	push	{r4, r7, lr}
 8008d52:	b08d      	sub	sp, #52	; 0x34
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	4608      	mov	r0, r1
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	4603      	mov	r3, r0
 8008d60:	807b      	strh	r3, [r7, #2]
 8008d62:	460b      	mov	r3, r1
 8008d64:	707b      	strb	r3, [r7, #1]
 8008d66:	4613      	mov	r3, r2
 8008d68:	703b      	strb	r3, [r7, #0]
    lv_style_trans_t * tr;
    lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
 8008d6a:	787b      	ldrb	r3, [r7, #1]
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7fd feaa 	bl	8006ac8 <lv_obj_get_style_list>
 8008d74:	6278      	str	r0, [r7, #36]	; 0x24
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
 8008d76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d78:	f003 f839 	bl	800bdee <_lv_style_list_get_transition_style>
 8008d7c:	6238      	str	r0, [r7, #32]

    bool cache_ori = style_list->ignore_cache;
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d80:	795b      	ldrb	r3, [r3, #5]
 8008d82:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	bf14      	ite	ne
 8008d8c:	2301      	movne	r3, #1
 8008d8e:	2300      	moveq	r3, #0
 8008d90:	77fb      	strb	r3, [r7, #31]

    /*Get the previous and current values*/
    if((prop & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
 8008d92:	887b      	ldrh	r3, [r7, #2]
 8008d94:	f003 030f 	and.w	r3, r3, #15
 8008d98:	2b08      	cmp	r3, #8
 8008d9a:	f300 80b1 	bgt.w	8008f00 <trans_create+0x1b0>
        style_list->skip_trans = 1;
 8008d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008da0:	7953      	ldrb	r3, [r2, #5]
 8008da2:	f043 0301 	orr.w	r3, r3, #1
 8008da6:	7153      	strb	r3, [r2, #5]
        style_list->ignore_cache = 1;
 8008da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008daa:	7953      	ldrb	r3, [r2, #5]
 8008dac:	f043 0308 	orr.w	r3, r3, #8
 8008db0:	7153      	strb	r3, [r2, #5]
        obj->state = prev_state;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	783a      	ldrb	r2, [r7, #0]
 8008db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
 8008dba:	887a      	ldrh	r2, [r7, #2]
 8008dbc:	787b      	ldrb	r3, [r7, #1]
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f7fd fea4 	bl	8006b0e <_lv_obj_get_style_int>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	857b      	strh	r3, [r7, #42]	; 0x2a
        obj->state = new_state;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8008dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
 8008dd4:	887a      	ldrh	r2, [r7, #2]
 8008dd6:	787b      	ldrb	r3, [r7, #1]
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f7fd fe97 	bl	8006b0e <_lv_obj_get_style_int>
 8008de0:	4603      	mov	r3, r0
 8008de2:	853b      	strh	r3, [r7, #40]	; 0x28
        style_list->skip_trans = 0;
 8008de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008de6:	7953      	ldrb	r3, [r2, #5]
 8008de8:	f36f 0300 	bfc	r3, #0, #1
 8008dec:	7153      	strb	r3, [r2, #5]
        style_list->ignore_cache = cache_ori;
 8008dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008df0:	7953      	ldrb	r3, [r2, #5]
 8008df2:	7ff9      	ldrb	r1, [r7, #31]
 8008df4:	f361 03c3 	bfi	r3, r1, #3, #1
 8008df8:	7153      	strb	r3, [r2, #5]

        if(int1 == int2)  return NULL;
 8008dfa:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8008dfe:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d101      	bne.n	8008e0a <trans_create+0xba>
 8008e06:	2300      	movs	r3, #0
 8008e08:	e1d6      	b.n	80091b8 <trans_create+0x468>
        obj->state = prev_state;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	783a      	ldrb	r2, [r7, #0]
 8008e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        int1 = _lv_obj_get_style_int(obj, part, prop);
 8008e12:	887a      	ldrh	r2, [r7, #2]
 8008e14:	787b      	ldrb	r3, [r7, #1]
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7fd fe78 	bl	8006b0e <_lv_obj_get_style_int>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	857b      	strh	r3, [r7, #42]	; 0x2a
        obj->state = new_state;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8008e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        _lv_style_set_int(style_trans, prop, int1);   /*Be sure `trans_style` has a valid value */
 8008e2c:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8008e30:	887b      	ldrh	r3, [r7, #2]
 8008e32:	4619      	mov	r1, r3
 8008e34:	6a38      	ldr	r0, [r7, #32]
 8008e36:	f002 fc71 	bl	800b71c <_lv_style_set_int>

        if(prop == LV_STYLE_RADIUS) {
 8008e3a:	887b      	ldrh	r3, [r7, #2]
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d13d      	bne.n	8008ebc <trans_create+0x16c>
            if(int1 == LV_RADIUS_CIRCLE || int2 == LV_RADIUS_CIRCLE) {
 8008e40:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8008e44:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d005      	beq.n	8008e58 <trans_create+0x108>
 8008e4c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8008e50:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d131      	bne.n	8008ebc <trans_create+0x16c>
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7fd fdf1 	bl	8006a40 <lv_obj_get_width>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	da00      	bge.n	8008e66 <trans_create+0x116>
 8008e64:	3301      	adds	r3, #1
 8008e66:	105b      	asrs	r3, r3, #1
 8008e68:	837b      	strh	r3, [r7, #26]
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f7fd fde8 	bl	8006a40 <lv_obj_get_width>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	da00      	bge.n	8008e78 <trans_create+0x128>
 8008e76:	3301      	adds	r3, #1
 8008e78:	105b      	asrs	r3, r3, #1
 8008e7a:	833b      	strh	r3, [r7, #24]
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 8008e7c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8008e80:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d109      	bne.n	8008e9c <trans_create+0x14c>
 8008e88:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008e8c:	1c5a      	adds	r2, r3, #1
 8008e8e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008e92:	3301      	adds	r3, #1
 8008e94:	4293      	cmp	r3, r2
 8008e96:	bfa8      	it	ge
 8008e98:	4613      	movge	r3, r2
 8008e9a:	857b      	strh	r3, [r7, #42]	; 0x2a
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
 8008e9c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8008ea0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d109      	bne.n	8008ebc <trans_create+0x16c>
 8008ea8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008eac:	1c5a      	adds	r2, r3, #1
 8008eae:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	bfa8      	it	ge
 8008eb8:	4613      	movge	r3, r2
 8008eba:	853b      	strh	r3, [r7, #40]	; 0x28
            }
        }

        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8008ebc:	48b6      	ldr	r0, [pc, #728]	; (8009198 <trans_create+0x448>)
 8008ebe:	f013 f896 	bl	801bfee <_lv_ll_ins_head>
 8008ec2:	62f8      	str	r0, [r7, #44]	; 0x2c
        LV_ASSERT_MEM(tr);
 8008ec4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ec6:	f012 fe39 	bl	801bb3c <lv_debug_check_null>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	f083 0301 	eor.w	r3, r3, #1
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d008      	beq.n	8008ee8 <trans_create+0x198>
 8008ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed8:	f04f 0400 	mov.w	r4, #0
 8008edc:	461a      	mov	r2, r3
 8008ede:	4623      	mov	r3, r4
 8008ee0:	48ae      	ldr	r0, [pc, #696]	; (800919c <trans_create+0x44c>)
 8008ee2:	f012 fe3b 	bl	801bb5c <lv_debug_log_error>
 8008ee6:	e7fe      	b.n	8008ee6 <trans_create+0x196>
        if(tr == NULL) return NULL;
 8008ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d101      	bne.n	8008ef2 <trans_create+0x1a2>
 8008eee:	2300      	movs	r3, #0
 8008ef0:	e162      	b.n	80091b8 <trans_create+0x468>
        tr->start_value._int = int1;
 8008ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8008ef6:	811a      	strh	r2, [r3, #8]
        tr->end_value._int = int2;
 8008ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008efc:	819a      	strh	r2, [r3, #12]
 8008efe:	e15a      	b.n	80091b6 <trans_create+0x466>
    }
    else if((prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
 8008f00:	887b      	ldrh	r3, [r7, #2]
 8008f02:	f003 030f 	and.w	r3, r3, #15
 8008f06:	2b0b      	cmp	r3, #11
 8008f08:	dc6c      	bgt.n	8008fe4 <trans_create+0x294>
        style_list->skip_trans = 1;
 8008f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f0c:	7953      	ldrb	r3, [r2, #5]
 8008f0e:	f043 0301 	orr.w	r3, r3, #1
 8008f12:	7153      	strb	r3, [r2, #5]
        style_list->ignore_cache = 1;
 8008f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f16:	7953      	ldrb	r3, [r2, #5]
 8008f18:	f043 0308 	orr.w	r3, r3, #8
 8008f1c:	7153      	strb	r3, [r2, #5]
        obj->state = prev_state;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	783a      	ldrb	r2, [r7, #0]
 8008f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
 8008f26:	887a      	ldrh	r2, [r7, #2]
 8008f28:	787b      	ldrb	r3, [r7, #1]
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7fd ff77 	bl	8006e20 <_lv_obj_get_style_color>
 8008f32:	4603      	mov	r3, r0
 8008f34:	617b      	str	r3, [r7, #20]
        obj->state = new_state;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8008f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
 8008f40:	887a      	ldrh	r2, [r7, #2]
 8008f42:	787b      	ldrb	r3, [r7, #1]
 8008f44:	4619      	mov	r1, r3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7fd ff6a 	bl	8006e20 <_lv_obj_get_style_color>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	613b      	str	r3, [r7, #16]
        style_list->skip_trans = 0;
 8008f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f52:	7953      	ldrb	r3, [r2, #5]
 8008f54:	f36f 0300 	bfc	r3, #0, #1
 8008f58:	7153      	strb	r3, [r2, #5]
        style_list->ignore_cache = cache_ori;
 8008f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f5c:	7953      	ldrb	r3, [r2, #5]
 8008f5e:	7ff9      	ldrb	r1, [r7, #31]
 8008f60:	f361 03c3 	bfi	r3, r1, #3, #1
 8008f64:	7153      	strb	r3, [r2, #5]

        if(c1.full == c2.full) return NULL;
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d101      	bne.n	8008f72 <trans_create+0x222>
 8008f6e:	2300      	movs	r3, #0
 8008f70:	e122      	b.n	80091b8 <trans_create+0x468>
        obj->state = prev_state;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	783a      	ldrb	r2, [r7, #0]
 8008f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        c1 = _lv_obj_get_style_color(obj, part, prop);
 8008f7a:	887a      	ldrh	r2, [r7, #2]
 8008f7c:	787b      	ldrb	r3, [r7, #1]
 8008f7e:	4619      	mov	r1, r3
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7fd ff4d 	bl	8006e20 <_lv_obj_get_style_color>
 8008f86:	4603      	mov	r3, r0
 8008f88:	617b      	str	r3, [r7, #20]
        obj->state = new_state;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8008f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        _lv_style_set_color(style_trans, prop, c1);    /*Be sure `trans_style` has a valid value */
 8008f94:	887b      	ldrh	r3, [r7, #2]
 8008f96:	697a      	ldr	r2, [r7, #20]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	6a38      	ldr	r0, [r7, #32]
 8008f9c:	f002 fc4c 	bl	800b838 <_lv_style_set_color>

        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8008fa0:	487d      	ldr	r0, [pc, #500]	; (8009198 <trans_create+0x448>)
 8008fa2:	f013 f824 	bl	801bfee <_lv_ll_ins_head>
 8008fa6:	62f8      	str	r0, [r7, #44]	; 0x2c
        LV_ASSERT_MEM(tr);
 8008fa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008faa:	f012 fdc7 	bl	801bb3c <lv_debug_check_null>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	f083 0301 	eor.w	r3, r3, #1
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d008      	beq.n	8008fcc <trans_create+0x27c>
 8008fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fbc:	f04f 0400 	mov.w	r4, #0
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	4623      	mov	r3, r4
 8008fc4:	4875      	ldr	r0, [pc, #468]	; (800919c <trans_create+0x44c>)
 8008fc6:	f012 fdc9 	bl	801bb5c <lv_debug_log_error>
 8008fca:	e7fe      	b.n	8008fca <trans_create+0x27a>
        if(tr == NULL) return NULL;
 8008fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d101      	bne.n	8008fd6 <trans_create+0x286>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	e0f0      	b.n	80091b8 <trans_create+0x468>
        tr->start_value._color = c1;
 8008fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd8:	697a      	ldr	r2, [r7, #20]
 8008fda:	609a      	str	r2, [r3, #8]
        tr->end_value._color = c2;
 8008fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fde:	693a      	ldr	r2, [r7, #16]
 8008fe0:	60da      	str	r2, [r3, #12]
 8008fe2:	e0e8      	b.n	80091b6 <trans_create+0x466>
    }
    else if((prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
 8008fe4:	887b      	ldrh	r3, [r7, #2]
 8008fe6:	f003 030f 	and.w	r3, r3, #15
 8008fea:	2b0d      	cmp	r3, #13
 8008fec:	dc6c      	bgt.n	80090c8 <trans_create+0x378>
        style_list->skip_trans = 1;
 8008fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ff0:	7953      	ldrb	r3, [r2, #5]
 8008ff2:	f043 0301 	orr.w	r3, r3, #1
 8008ff6:	7153      	strb	r3, [r2, #5]
        style_list->ignore_cache = 1;
 8008ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ffa:	7953      	ldrb	r3, [r2, #5]
 8008ffc:	f043 0308 	orr.w	r3, r3, #8
 8009000:	7153      	strb	r3, [r2, #5]
        obj->state = prev_state;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	783a      	ldrb	r2, [r7, #0]
 8009006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
 800900a:	887a      	ldrh	r2, [r7, #2]
 800900c:	787b      	ldrb	r3, [r7, #1]
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7fd ff70 	bl	8006ef6 <_lv_obj_get_style_opa>
 8009016:	4603      	mov	r3, r0
 8009018:	77bb      	strb	r3, [r7, #30]
        obj->state = new_state;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8009020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
 8009024:	887a      	ldrh	r2, [r7, #2]
 8009026:	787b      	ldrb	r3, [r7, #1]
 8009028:	4619      	mov	r1, r3
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f7fd ff63 	bl	8006ef6 <_lv_obj_get_style_opa>
 8009030:	4603      	mov	r3, r0
 8009032:	777b      	strb	r3, [r7, #29]
        style_list->skip_trans = 0;
 8009034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009036:	7953      	ldrb	r3, [r2, #5]
 8009038:	f36f 0300 	bfc	r3, #0, #1
 800903c:	7153      	strb	r3, [r2, #5]
        style_list->ignore_cache = cache_ori;
 800903e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009040:	7953      	ldrb	r3, [r2, #5]
 8009042:	7ff9      	ldrb	r1, [r7, #31]
 8009044:	f361 03c3 	bfi	r3, r1, #3, #1
 8009048:	7153      	strb	r3, [r2, #5]

        if(o1 == o2) return NULL;
 800904a:	7fba      	ldrb	r2, [r7, #30]
 800904c:	7f7b      	ldrb	r3, [r7, #29]
 800904e:	429a      	cmp	r2, r3
 8009050:	d101      	bne.n	8009056 <trans_create+0x306>
 8009052:	2300      	movs	r3, #0
 8009054:	e0b0      	b.n	80091b8 <trans_create+0x468>

        obj->state = prev_state;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	783a      	ldrb	r2, [r7, #0]
 800905a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        o1 = _lv_obj_get_style_opa(obj, part, prop);
 800905e:	887a      	ldrh	r2, [r7, #2]
 8009060:	787b      	ldrb	r3, [r7, #1]
 8009062:	4619      	mov	r1, r3
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f7fd ff46 	bl	8006ef6 <_lv_obj_get_style_opa>
 800906a:	4603      	mov	r3, r0
 800906c:	77bb      	strb	r3, [r7, #30]
        obj->state = new_state;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8009074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
 8009078:	7fba      	ldrb	r2, [r7, #30]
 800907a:	887b      	ldrh	r3, [r7, #2]
 800907c:	4619      	mov	r1, r3
 800907e:	6a38      	ldr	r0, [r7, #32]
 8009080:	f002 fc68 	bl	800b954 <_lv_style_set_opa>

        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8009084:	4844      	ldr	r0, [pc, #272]	; (8009198 <trans_create+0x448>)
 8009086:	f012 ffb2 	bl	801bfee <_lv_ll_ins_head>
 800908a:	62f8      	str	r0, [r7, #44]	; 0x2c
        LV_ASSERT_MEM(tr);
 800908c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800908e:	f012 fd55 	bl	801bb3c <lv_debug_check_null>
 8009092:	4603      	mov	r3, r0
 8009094:	f083 0301 	eor.w	r3, r3, #1
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d008      	beq.n	80090b0 <trans_create+0x360>
 800909e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a0:	f04f 0400 	mov.w	r4, #0
 80090a4:	461a      	mov	r2, r3
 80090a6:	4623      	mov	r3, r4
 80090a8:	483c      	ldr	r0, [pc, #240]	; (800919c <trans_create+0x44c>)
 80090aa:	f012 fd57 	bl	801bb5c <lv_debug_log_error>
 80090ae:	e7fe      	b.n	80090ae <trans_create+0x35e>
        if(tr == NULL) return NULL;
 80090b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d101      	bne.n	80090ba <trans_create+0x36a>
 80090b6:	2300      	movs	r3, #0
 80090b8:	e07e      	b.n	80091b8 <trans_create+0x468>
        tr->start_value._opa = o1;
 80090ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090bc:	7fba      	ldrb	r2, [r7, #30]
 80090be:	721a      	strb	r2, [r3, #8]
        tr->end_value._opa = o2;
 80090c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c2:	7f7a      	ldrb	r2, [r7, #29]
 80090c4:	731a      	strb	r2, [r3, #12]
 80090c6:	e076      	b.n	80091b6 <trans_create+0x466>
    }
    else {      /*Ptr*/
        obj->state = prev_state;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	783a      	ldrb	r2, [r7, #0]
 80090cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        style_list->skip_trans = 1;
 80090d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090d2:	7953      	ldrb	r3, [r2, #5]
 80090d4:	f043 0301 	orr.w	r3, r3, #1
 80090d8:	7153      	strb	r3, [r2, #5]
        style_list->ignore_cache = 1;
 80090da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090dc:	7953      	ldrb	r3, [r2, #5]
 80090de:	f043 0308 	orr.w	r3, r3, #8
 80090e2:	7153      	strb	r3, [r2, #5]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
 80090e4:	887a      	ldrh	r2, [r7, #2]
 80090e6:	787b      	ldrb	r3, [r7, #1]
 80090e8:	4619      	mov	r1, r3
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7fd ffc0 	bl	8007070 <_lv_obj_get_style_ptr>
 80090f0:	4603      	mov	r3, r0
 80090f2:	60fb      	str	r3, [r7, #12]
        obj->state = new_state;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80090fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
 80090fe:	887a      	ldrh	r2, [r7, #2]
 8009100:	787b      	ldrb	r3, [r7, #1]
 8009102:	4619      	mov	r1, r3
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f7fd ffb3 	bl	8007070 <_lv_obj_get_style_ptr>
 800910a:	4603      	mov	r3, r0
 800910c:	60bb      	str	r3, [r7, #8]
        style_list->skip_trans = 0;
 800910e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009110:	7953      	ldrb	r3, [r2, #5]
 8009112:	f36f 0300 	bfc	r3, #0, #1
 8009116:	7153      	strb	r3, [r2, #5]
        style_list->ignore_cache = cache_ori;
 8009118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800911a:	7953      	ldrb	r3, [r2, #5]
 800911c:	7ff9      	ldrb	r1, [r7, #31]
 800911e:	f361 03c3 	bfi	r3, r1, #3, #1
 8009122:	7153      	strb	r3, [r2, #5]

        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
 8009124:	f107 0108 	add.w	r1, r7, #8
 8009128:	f107 030c 	add.w	r3, r7, #12
 800912c:	2204      	movs	r2, #4
 800912e:	4618      	mov	r0, r3
 8009130:	f024 fafe 	bl	802d730 <memcmp>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d101      	bne.n	800913e <trans_create+0x3ee>
 800913a:	2300      	movs	r3, #0
 800913c:	e03c      	b.n	80091b8 <trans_create+0x468>
        obj->state = prev_state;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	783a      	ldrb	r2, [r7, #0]
 8009142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
 8009146:	887a      	ldrh	r2, [r7, #2]
 8009148:	787b      	ldrb	r3, [r7, #1]
 800914a:	4619      	mov	r1, r3
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f7fd ff8f 	bl	8007070 <_lv_obj_get_style_ptr>
 8009152:	4603      	mov	r3, r0
 8009154:	60fb      	str	r3, [r7, #12]
        obj->state = new_state;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800915c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	887b      	ldrh	r3, [r7, #2]
 8009164:	4619      	mov	r1, r3
 8009166:	6a38      	ldr	r0, [r7, #32]
 8009168:	f002 fc82 	bl	800ba70 <_lv_style_set_ptr>

        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800916c:	480a      	ldr	r0, [pc, #40]	; (8009198 <trans_create+0x448>)
 800916e:	f012 ff3e 	bl	801bfee <_lv_ll_ins_head>
 8009172:	62f8      	str	r0, [r7, #44]	; 0x2c
        LV_ASSERT_MEM(tr);
 8009174:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009176:	f012 fce1 	bl	801bb3c <lv_debug_check_null>
 800917a:	4603      	mov	r3, r0
 800917c:	f083 0301 	eor.w	r3, r3, #1
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00c      	beq.n	80091a0 <trans_create+0x450>
 8009186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009188:	f04f 0400 	mov.w	r4, #0
 800918c:	461a      	mov	r2, r3
 800918e:	4623      	mov	r3, r4
 8009190:	4802      	ldr	r0, [pc, #8]	; (800919c <trans_create+0x44c>)
 8009192:	f012 fce3 	bl	801bb5c <lv_debug_log_error>
 8009196:	e7fe      	b.n	8009196 <trans_create+0x446>
 8009198:	20021840 	.word	0x20021840
 800919c:	0802d7ac 	.word	0x0802d7ac
        if(tr == NULL) return NULL;
 80091a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d101      	bne.n	80091aa <trans_create+0x45a>
 80091a6:	2300      	movs	r3, #0
 80091a8:	e006      	b.n	80091b8 <trans_create+0x468>
        tr->start_value._ptr = p1;
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ae:	609a      	str	r2, [r3, #8]
        tr->end_value._ptr = p2;
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b4:	60da      	str	r2, [r3, #12]
    }

    return tr;
 80091b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3734      	adds	r7, #52	; 0x34
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd90      	pop	{r4, r7, pc}

080091c0 <trans_del>:
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all properties
 * @param tr_limit delete transitions only "older" then this. `NULL` is not used
 */
static void trans_del(lv_obj_t * obj, uint8_t part, lv_style_property_t prop, lv_style_trans_t * tr_limit)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b088      	sub	sp, #32
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	607b      	str	r3, [r7, #4]
 80091ca:	460b      	mov	r3, r1
 80091cc:	72fb      	strb	r3, [r7, #11]
 80091ce:	4613      	mov	r3, r2
 80091d0:	813b      	strh	r3, [r7, #8]
    lv_style_trans_t * tr;
    lv_style_trans_t * tr_prev;
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 80091d2:	4826      	ldr	r0, [pc, #152]	; (800926c <trans_del+0xac>)
 80091d4:	f013 f87b 	bl	801c2ce <_lv_ll_get_tail>
 80091d8:	61f8      	str	r0, [r7, #28]
    while(tr != NULL) {
 80091da:	e03d      	b.n	8009258 <trans_del+0x98>
        if(tr == tr_limit) break;
 80091dc:	69fa      	ldr	r2, [r7, #28]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d03d      	beq.n	8009260 <trans_del+0xa0>

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 80091e4:	69f9      	ldr	r1, [r7, #28]
 80091e6:	4821      	ldr	r0, [pc, #132]	; (800926c <trans_del+0xac>)
 80091e8:	f013 f89e 	bl	801c328 <_lv_ll_get_prev>
 80091ec:	61b8      	str	r0, [r7, #24]

        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d12d      	bne.n	8009254 <trans_del+0x94>
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	799b      	ldrb	r3, [r3, #6]
 80091fc:	7afa      	ldrb	r2, [r7, #11]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d002      	beq.n	8009208 <trans_del+0x48>
 8009202:	7afb      	ldrb	r3, [r7, #11]
 8009204:	2bff      	cmp	r3, #255	; 0xff
 8009206:	d125      	bne.n	8009254 <trans_del+0x94>
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	889b      	ldrh	r3, [r3, #4]
 800920c:	893a      	ldrh	r2, [r7, #8]
 800920e:	429a      	cmp	r2, r3
 8009210:	d002      	beq.n	8009218 <trans_del+0x58>
 8009212:	893b      	ldrh	r3, [r7, #8]
 8009214:	2bff      	cmp	r3, #255	; 0xff
 8009216:	d11d      	bne.n	8009254 <trans_del+0x94>
            /* Remove the transitioned property from trans. style
             * to allow changing it by normal styles*/
            lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	799b      	ldrb	r3, [r3, #6]
 8009220:	4619      	mov	r1, r3
 8009222:	4610      	mov	r0, r2
 8009224:	f7fd fc50 	bl	8006ac8 <lv_obj_get_style_list>
 8009228:	6178      	str	r0, [r7, #20]
            lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
 800922a:	6978      	ldr	r0, [r7, #20]
 800922c:	f002 fddf 	bl	800bdee <_lv_style_list_get_transition_style>
 8009230:	6138      	str	r0, [r7, #16]
            lv_style_remove_prop(style_trans, tr->prop);
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	889b      	ldrh	r3, [r3, #4]
 8009236:	4619      	mov	r1, r3
 8009238:	6938      	ldr	r0, [r7, #16]
 800923a:	f001 ff61 	bl	800b100 <lv_style_remove_prop>

            lv_anim_del(tr, NULL);
 800923e:	2100      	movs	r1, #0
 8009240:	69f8      	ldr	r0, [r7, #28]
 8009242:	f011 fbc9 	bl	801a9d8 <lv_anim_del>
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8009246:	69f9      	ldr	r1, [r7, #28]
 8009248:	4808      	ldr	r0, [pc, #32]	; (800926c <trans_del+0xac>)
 800924a:	f012 ff7f 	bl	801c14c <_lv_ll_remove>
            lv_mem_free(tr);
 800924e:	69f8      	ldr	r0, [r7, #28]
 8009250:	f013 fa4a 	bl	801c6e8 <lv_mem_free>
        }
        tr = tr_prev;
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	61fb      	str	r3, [r7, #28]
    while(tr != NULL) {
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1be      	bne.n	80091dc <trans_del+0x1c>
    }
}
 800925e:	e000      	b.n	8009262 <trans_del+0xa2>
        if(tr == tr_limit) break;
 8009260:	bf00      	nop
}
 8009262:	bf00      	nop
 8009264:	3720      	adds	r7, #32
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	20021840 	.word	0x20021840

08009270 <trans_anim_cb>:

static void trans_anim_cb(lv_style_trans_t * tr, lv_anim_value_t v)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b088      	sub	sp, #32
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	460b      	mov	r3, r1
 800927a:	807b      	strh	r3, [r7, #2]
    lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	799b      	ldrb	r3, [r3, #6]
 8009284:	4619      	mov	r1, r3
 8009286:	4610      	mov	r0, r2
 8009288:	f7fd fc1e 	bl	8006ac8 <lv_obj_get_style_list>
 800928c:	6178      	str	r0, [r7, #20]
    lv_style_t * style = _lv_style_list_get_transition_style(list);
 800928e:	6978      	ldr	r0, [r7, #20]
 8009290:	f002 fdad 	bl	800bdee <_lv_style_list_get_transition_style>
 8009294:	6138      	str	r0, [r7, #16]

    if((tr->prop & 0xF) < LV_STYLE_ID_COLOR) { /*Value*/
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	889b      	ldrh	r3, [r3, #4]
 800929a:	f003 030f 	and.w	r3, r3, #15
 800929e:	2b08      	cmp	r3, #8
 80092a0:	dc2d      	bgt.n	80092fe <trans_anim_cb+0x8e>
        lv_style_int_t x;
        if(v == 0) x = tr->start_value._int;
 80092a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d103      	bne.n	80092b2 <trans_anim_cb+0x42>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	891b      	ldrh	r3, [r3, #8]
 80092ae:	83fb      	strh	r3, [r7, #30]
 80092b0:	e01c      	b.n	80092ec <trans_anim_cb+0x7c>
        else if(v == 255) x = tr->end_value._int;
 80092b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80092b6:	2bff      	cmp	r3, #255	; 0xff
 80092b8:	d103      	bne.n	80092c2 <trans_anim_cb+0x52>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	899b      	ldrh	r3, [r3, #12]
 80092be:	83fb      	strh	r3, [r7, #30]
 80092c0:	e014      	b.n	80092ec <trans_anim_cb+0x7c>
        else x = tr->start_value._int + ((int32_t)((int32_t)(tr->end_value._int - tr->start_value._int) * v) >> 8);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80092d0:	4619      	mov	r1, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80092d8:	1acb      	subs	r3, r1, r3
 80092da:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80092de:	fb01 f303 	mul.w	r3, r1, r3
 80092e2:	121b      	asrs	r3, r3, #8
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	4413      	add	r3, r2
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	83fb      	strh	r3, [r7, #30]
        _lv_style_set_int(style, tr->prop, x);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	889b      	ldrh	r3, [r3, #4]
 80092f0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80092f4:	4619      	mov	r1, r3
 80092f6:	6938      	ldr	r0, [r7, #16]
 80092f8:	f002 fa10 	bl	800b71c <_lv_style_set_int>
 80092fc:	e067      	b.n	80093ce <trans_anim_cb+0x15e>
    }
    else if((tr->prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	889b      	ldrh	r3, [r3, #4]
 8009302:	f003 030f 	and.w	r3, r3, #15
 8009306:	2b0b      	cmp	r3, #11
 8009308:	dc21      	bgt.n	800934e <trans_anim_cb+0xde>
        lv_color_t x;
        if(v <= 0) x = tr->start_value._color;
 800930a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800930e:	2b00      	cmp	r3, #0
 8009310:	dc03      	bgt.n	800931a <trans_anim_cb+0xaa>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	60fb      	str	r3, [r7, #12]
 8009318:	e011      	b.n	800933e <trans_anim_cb+0xce>
        else if(v >= 255) x = tr->end_value._color;
 800931a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800931e:	2bfe      	cmp	r3, #254	; 0xfe
 8009320:	dd03      	ble.n	800932a <trans_anim_cb+0xba>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	60fb      	str	r3, [r7, #12]
 8009328:	e009      	b.n	800933e <trans_anim_cb+0xce>
        else x = lv_color_mix(tr->end_value._color, tr->start_value._color, v);
 800932a:	887b      	ldrh	r3, [r7, #2]
 800932c:	b2da      	uxtb	r2, r3
 800932e:	6879      	ldr	r1, [r7, #4]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6889      	ldr	r1, [r1, #8]
 8009334:	68d8      	ldr	r0, [r3, #12]
 8009336:	f7fa ff61 	bl	80041fc <lv_color_mix>
 800933a:	4603      	mov	r3, r0
 800933c:	60fb      	str	r3, [r7, #12]
        _lv_style_set_color(style, tr->prop, x);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	889b      	ldrh	r3, [r3, #4]
 8009342:	68fa      	ldr	r2, [r7, #12]
 8009344:	4619      	mov	r1, r3
 8009346:	6938      	ldr	r0, [r7, #16]
 8009348:	f002 fa76 	bl	800b838 <_lv_style_set_color>
 800934c:	e03f      	b.n	80093ce <trans_anim_cb+0x15e>
    }
    else if((tr->prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	889b      	ldrh	r3, [r3, #4]
 8009352:	f003 030f 	and.w	r3, r3, #15
 8009356:	2b0d      	cmp	r3, #13
 8009358:	dc27      	bgt.n	80093aa <trans_anim_cb+0x13a>
        lv_opa_t x;
        if(v <= 0) x = tr->start_value._opa;
 800935a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800935e:	2b00      	cmp	r3, #0
 8009360:	dc03      	bgt.n	800936a <trans_anim_cb+0xfa>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	7a1b      	ldrb	r3, [r3, #8]
 8009366:	777b      	strb	r3, [r7, #29]
 8009368:	e017      	b.n	800939a <trans_anim_cb+0x12a>
        else if(v >= 255) x = tr->end_value._opa;
 800936a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800936e:	2bfe      	cmp	r3, #254	; 0xfe
 8009370:	dd03      	ble.n	800937a <trans_anim_cb+0x10a>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	7b1b      	ldrb	r3, [r3, #12]
 8009376:	777b      	strb	r3, [r7, #29]
 8009378:	e00f      	b.n	800939a <trans_anim_cb+0x12a>
        else x = tr->start_value._opa + (((tr->end_value._opa - tr->start_value._opa) * v) >> 8);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	7a1a      	ldrb	r2, [r3, #8]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	7b1b      	ldrb	r3, [r3, #12]
 8009382:	4619      	mov	r1, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	7a1b      	ldrb	r3, [r3, #8]
 8009388:	1acb      	subs	r3, r1, r3
 800938a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800938e:	fb01 f303 	mul.w	r3, r1, r3
 8009392:	121b      	asrs	r3, r3, #8
 8009394:	b2db      	uxtb	r3, r3
 8009396:	4413      	add	r3, r2
 8009398:	777b      	strb	r3, [r7, #29]
        _lv_style_set_opa(style, tr->prop, x);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	889b      	ldrh	r3, [r3, #4]
 800939e:	7f7a      	ldrb	r2, [r7, #29]
 80093a0:	4619      	mov	r1, r3
 80093a2:	6938      	ldr	r0, [r7, #16]
 80093a4:	f002 fad6 	bl	800b954 <_lv_style_set_opa>
 80093a8:	e011      	b.n	80093ce <trans_anim_cb+0x15e>
    }
    else {
        const void * x;
        if(v < 128) x = tr->start_value._ptr;
 80093aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80093ae:	2b7f      	cmp	r3, #127	; 0x7f
 80093b0:	dc03      	bgt.n	80093ba <trans_anim_cb+0x14a>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	61bb      	str	r3, [r7, #24]
 80093b8:	e002      	b.n	80093c0 <trans_anim_cb+0x150>
        else x = tr->end_value._ptr;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	61bb      	str	r3, [r7, #24]
        _lv_style_set_ptr(style, tr->prop, x);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	889b      	ldrh	r3, [r3, #4]
 80093c4:	69ba      	ldr	r2, [r7, #24]
 80093c6:	4619      	mov	r1, r3
 80093c8:	6938      	ldr	r0, [r7, #16]
 80093ca:	f002 fb51 	bl	800ba70 <_lv_style_set_ptr>
    }
    lv_obj_refresh_style(tr->obj, tr->part, tr->prop);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6818      	ldr	r0, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	7999      	ldrb	r1, [r3, #6]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	889b      	ldrh	r3, [r3, #4]
 80093da:	461a      	mov	r2, r3
 80093dc:	f7fc fd8a 	bl	8005ef4 <lv_obj_refresh_style>

}
 80093e0:	bf00      	nop
 80093e2:	3720      	adds	r7, #32
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <trans_anim_start_cb>:

static void trans_anim_start_cb(lv_anim_t * a)
{
 80093e8:	b590      	push	{r4, r7, lr}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
    lv_style_trans_t * tr = a->var;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	60fb      	str	r3, [r7, #12]

    lv_style_property_t prop_tmp = tr->prop;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	889b      	ldrh	r3, [r3, #4]
 80093fa:	817b      	strh	r3, [r7, #10]

    /*Start the animation from the current value*/
    if((prop_tmp & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
 80093fc:	897b      	ldrh	r3, [r7, #10]
 80093fe:	f003 030f 	and.w	r3, r3, #15
 8009402:	2b08      	cmp	r3, #8
 8009404:	dc0c      	bgt.n	8009420 <trans_anim_start_cb+0x38>
        tr->start_value._int = _lv_obj_get_style_int(tr->obj, tr->part, prop_tmp);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6818      	ldr	r0, [r3, #0]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	799b      	ldrb	r3, [r3, #6]
 800940e:	897a      	ldrh	r2, [r7, #10]
 8009410:	4619      	mov	r1, r3
 8009412:	f7fd fb7c 	bl	8006b0e <_lv_obj_get_style_int>
 8009416:	4603      	mov	r3, r0
 8009418:	461a      	mov	r2, r3
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	811a      	strh	r2, [r3, #8]
 800941e:	e02c      	b.n	800947a <trans_anim_start_cb+0x92>
    }
    else if((prop_tmp & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
 8009420:	897b      	ldrh	r3, [r7, #10]
 8009422:	f003 030f 	and.w	r3, r3, #15
 8009426:	2b0b      	cmp	r3, #11
 8009428:	dc0a      	bgt.n	8009440 <trans_anim_start_cb+0x58>
        tr->start_value._color = _lv_obj_get_style_color(tr->obj, tr->part, prop_tmp);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	6818      	ldr	r0, [r3, #0]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	799b      	ldrb	r3, [r3, #6]
 8009432:	68fc      	ldr	r4, [r7, #12]
 8009434:	897a      	ldrh	r2, [r7, #10]
 8009436:	4619      	mov	r1, r3
 8009438:	f7fd fcf2 	bl	8006e20 <_lv_obj_get_style_color>
 800943c:	60a0      	str	r0, [r4, #8]
 800943e:	e01c      	b.n	800947a <trans_anim_start_cb+0x92>
    }
    else if((prop_tmp & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
 8009440:	897b      	ldrh	r3, [r7, #10]
 8009442:	f003 030f 	and.w	r3, r3, #15
 8009446:	2b0d      	cmp	r3, #13
 8009448:	dc0c      	bgt.n	8009464 <trans_anim_start_cb+0x7c>
        tr->start_value._opa = _lv_obj_get_style_opa(tr->obj, tr->part, prop_tmp);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6818      	ldr	r0, [r3, #0]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	799b      	ldrb	r3, [r3, #6]
 8009452:	897a      	ldrh	r2, [r7, #10]
 8009454:	4619      	mov	r1, r3
 8009456:	f7fd fd4e 	bl	8006ef6 <_lv_obj_get_style_opa>
 800945a:	4603      	mov	r3, r0
 800945c:	461a      	mov	r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	721a      	strb	r2, [r3, #8]
 8009462:	e00a      	b.n	800947a <trans_anim_start_cb+0x92>
    }
    else {      /*Ptr*/
        tr->start_value._ptr = _lv_obj_get_style_ptr(tr->obj, tr->part, prop_tmp);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6818      	ldr	r0, [r3, #0]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	799b      	ldrb	r3, [r3, #6]
 800946c:	897a      	ldrh	r2, [r7, #10]
 800946e:	4619      	mov	r1, r3
 8009470:	f7fd fdfe 	bl	8007070 <_lv_obj_get_style_ptr>
 8009474:	4602      	mov	r2, r0
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	609a      	str	r2, [r3, #8]
    }

    /*Init prop to an invalid values to be sure `trans_del` won't delete this added `tr`*/
    tr->prop = 0;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	809a      	strh	r2, [r3, #4]
    /*Delete the relate transition if any*/
    trans_del(tr->obj, tr->part, prop_tmp, tr);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6818      	ldr	r0, [r3, #0]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	7999      	ldrb	r1, [r3, #6]
 8009488:	897a      	ldrh	r2, [r7, #10]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f7ff fe98 	bl	80091c0 <trans_del>

    tr->prop = prop_tmp;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	897a      	ldrh	r2, [r7, #10]
 8009494:	809a      	strh	r2, [r3, #4]

}
 8009496:	bf00      	nop
 8009498:	3714      	adds	r7, #20
 800949a:	46bd      	mov	sp, r7
 800949c:	bd90      	pop	{r4, r7, pc}
	...

080094a0 <trans_anim_ready_cb>:

static void trans_anim_ready_cb(lv_anim_t * a)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b088      	sub	sp, #32
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
    lv_style_trans_t * tr = a->var;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	617b      	str	r3, [r7, #20]

    /* Remove the transitioned property from trans. style
     * if there no more transitions for this property
     * It allows changing it by normal styles*/

    bool running = false;
 80094ae:	2300      	movs	r3, #0
 80094b0:	77fb      	strb	r3, [r7, #31]
    lv_style_trans_t * tr_i;
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 80094b2:	4824      	ldr	r0, [pc, #144]	; (8009544 <trans_anim_ready_cb+0xa4>)
 80094b4:	f012 fef8 	bl	801c2a8 <_lv_ll_get_head>
 80094b8:	61b8      	str	r0, [r7, #24]
 80094ba:	e01c      	b.n	80094f6 <trans_anim_ready_cb+0x56>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->part == tr->part && tr_i->prop == tr->prop) {
 80094bc:	69ba      	ldr	r2, [r7, #24]
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d013      	beq.n	80094ec <trans_anim_ready_cb+0x4c>
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d10d      	bne.n	80094ec <trans_anim_ready_cb+0x4c>
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	799a      	ldrb	r2, [r3, #6]
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	799b      	ldrb	r3, [r3, #6]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d107      	bne.n	80094ec <trans_anim_ready_cb+0x4c>
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	889a      	ldrh	r2, [r3, #4]
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	889b      	ldrh	r3, [r3, #4]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d101      	bne.n	80094ec <trans_anim_ready_cb+0x4c>
            running = true;
 80094e8:	2301      	movs	r3, #1
 80094ea:	77fb      	strb	r3, [r7, #31]
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 80094ec:	69b9      	ldr	r1, [r7, #24]
 80094ee:	4815      	ldr	r0, [pc, #84]	; (8009544 <trans_anim_ready_cb+0xa4>)
 80094f0:	f012 ff00 	bl	801c2f4 <_lv_ll_get_next>
 80094f4:	61b8      	str	r0, [r7, #24]
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1df      	bne.n	80094bc <trans_anim_ready_cb+0x1c>
        }
    }

    if(!running) {
 80094fc:	7ffb      	ldrb	r3, [r7, #31]
 80094fe:	f083 0301 	eor.w	r3, r3, #1
 8009502:	b2db      	uxtb	r3, r3
 8009504:	2b00      	cmp	r3, #0
 8009506:	d012      	beq.n	800952e <trans_anim_ready_cb+0x8e>
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	799b      	ldrb	r3, [r3, #6]
 8009510:	4619      	mov	r1, r3
 8009512:	4610      	mov	r0, r2
 8009514:	f7fd fad8 	bl	8006ac8 <lv_obj_get_style_list>
 8009518:	6138      	str	r0, [r7, #16]
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
 800951a:	6938      	ldr	r0, [r7, #16]
 800951c:	f002 fc67 	bl	800bdee <_lv_style_list_get_transition_style>
 8009520:	60f8      	str	r0, [r7, #12]
        lv_style_remove_prop(style_trans, tr->prop);
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	889b      	ldrh	r3, [r3, #4]
 8009526:	4619      	mov	r1, r3
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f001 fde9 	bl	800b100 <lv_style_remove_prop>
    }

    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800952e:	6979      	ldr	r1, [r7, #20]
 8009530:	4804      	ldr	r0, [pc, #16]	; (8009544 <trans_anim_ready_cb+0xa4>)
 8009532:	f012 fe0b 	bl	801c14c <_lv_ll_remove>
    lv_mem_free(tr);
 8009536:	6978      	ldr	r0, [r7, #20]
 8009538:	f013 f8d6 	bl	801c6e8 <lv_mem_free>
}
 800953c:	bf00      	nop
 800953e:	3720      	adds	r7, #32
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	20021840 	.word	0x20021840

08009548 <style_prop_is_cacheble>:

    return false;
}

static bool style_prop_is_cacheble(lv_style_property_t prop)
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	4603      	mov	r3, r0
 8009550:	80fb      	strh	r3, [r7, #6]

    switch(prop) {
 8009552:	88fb      	ldrh	r3, [r7, #6]
 8009554:	2b50      	cmp	r3, #80	; 0x50
 8009556:	d054      	beq.n	8009602 <style_prop_is_cacheble+0xba>
 8009558:	2b50      	cmp	r3, #80	; 0x50
 800955a:	dc1d      	bgt.n	8009598 <style_prop_is_cacheble+0x50>
 800955c:	2b18      	cmp	r3, #24
 800955e:	dc0d      	bgt.n	800957c <style_prop_is_cacheble+0x34>
 8009560:	2b15      	cmp	r3, #21
 8009562:	da4e      	bge.n	8009602 <style_prop_is_cacheble+0xba>
 8009564:	2b07      	cmp	r3, #7
 8009566:	dc05      	bgt.n	8009574 <style_prop_is_cacheble+0x2c>
 8009568:	2b04      	cmp	r3, #4
 800956a:	da4a      	bge.n	8009602 <style_prop_is_cacheble+0xba>
 800956c:	3b01      	subs	r3, #1
 800956e:	2b01      	cmp	r3, #1
 8009570:	d849      	bhi.n	8009606 <style_prop_is_cacheble+0xbe>
 8009572:	e046      	b.n	8009602 <style_prop_is_cacheble+0xba>
 8009574:	3b10      	subs	r3, #16
 8009576:	2b03      	cmp	r3, #3
 8009578:	d845      	bhi.n	8009606 <style_prop_is_cacheble+0xbe>
 800957a:	e042      	b.n	8009602 <style_prop_is_cacheble+0xba>
 800957c:	2b33      	cmp	r3, #51	; 0x33
 800957e:	dc06      	bgt.n	800958e <style_prop_is_cacheble+0x46>
 8009580:	2b30      	cmp	r3, #48	; 0x30
 8009582:	da3e      	bge.n	8009602 <style_prop_is_cacheble+0xba>
 8009584:	2b20      	cmp	r3, #32
 8009586:	d03c      	beq.n	8009602 <style_prop_is_cacheble+0xba>
 8009588:	2b2c      	cmp	r3, #44	; 0x2c
 800958a:	d03a      	beq.n	8009602 <style_prop_is_cacheble+0xba>
 800958c:	e03b      	b.n	8009606 <style_prop_is_cacheble+0xbe>
 800958e:	2b40      	cmp	r3, #64	; 0x40
 8009590:	d037      	beq.n	8009602 <style_prop_is_cacheble+0xba>
 8009592:	2b42      	cmp	r3, #66	; 0x42
 8009594:	d035      	beq.n	8009602 <style_prop_is_cacheble+0xba>
 8009596:	e036      	b.n	8009606 <style_prop_is_cacheble+0xbe>
 8009598:	2bff      	cmp	r3, #255	; 0xff
 800959a:	d032      	beq.n	8009602 <style_prop_is_cacheble+0xba>
 800959c:	2bff      	cmp	r3, #255	; 0xff
 800959e:	dc0f      	bgt.n	80095c0 <style_prop_is_cacheble+0x78>
 80095a0:	2b6e      	cmp	r3, #110	; 0x6e
 80095a2:	d02e      	beq.n	8009602 <style_prop_is_cacheble+0xba>
 80095a4:	2b6e      	cmp	r3, #110	; 0x6e
 80095a6:	dc04      	bgt.n	80095b2 <style_prop_is_cacheble+0x6a>
 80095a8:	2b54      	cmp	r3, #84	; 0x54
 80095aa:	d02a      	beq.n	8009602 <style_prop_is_cacheble+0xba>
 80095ac:	2b60      	cmp	r3, #96	; 0x60
 80095ae:	d028      	beq.n	8009602 <style_prop_is_cacheble+0xba>
 80095b0:	e029      	b.n	8009606 <style_prop_is_cacheble+0xbe>
 80095b2:	2b7f      	cmp	r3, #127	; 0x7f
 80095b4:	d025      	beq.n	8009602 <style_prop_is_cacheble+0xba>
 80095b6:	2b91      	cmp	r3, #145	; 0x91
 80095b8:	d023      	beq.n	8009602 <style_prop_is_cacheble+0xba>
 80095ba:	2b72      	cmp	r3, #114	; 0x72
 80095bc:	d021      	beq.n	8009602 <style_prop_is_cacheble+0xba>
 80095be:	e022      	b.n	8009606 <style_prop_is_cacheble+0xbe>
 80095c0:	f248 0283 	movw	r2, #32899	; 0x8083
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d01c      	beq.n	8009602 <style_prop_is_cacheble+0xba>
 80095c8:	f248 0283 	movw	r2, #32899	; 0x8083
 80095cc:	4293      	cmp	r3, r2
 80095ce:	dc0c      	bgt.n	80095ea <style_prop_is_cacheble+0xa2>
 80095d0:	f248 020c 	movw	r2, #32780	; 0x800c
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d014      	beq.n	8009602 <style_prop_is_cacheble+0xba>
 80095d8:	f248 020c 	movw	r2, #32780	; 0x800c
 80095dc:	4293      	cmp	r3, r2
 80095de:	db12      	blt.n	8009606 <style_prop_is_cacheble+0xbe>
 80095e0:	4a0c      	ldr	r2, [pc, #48]	; (8009614 <style_prop_is_cacheble+0xcc>)
 80095e2:	441a      	add	r2, r3
 80095e4:	2a01      	cmp	r2, #1
 80095e6:	d80e      	bhi.n	8009606 <style_prop_is_cacheble+0xbe>
 80095e8:	e00b      	b.n	8009602 <style_prop_is_cacheble+0xba>
 80095ea:	f248 02a0 	movw	r2, #32928	; 0x80a0
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d007      	beq.n	8009602 <style_prop_is_cacheble+0xba>
 80095f2:	f248 02ad 	movw	r2, #32941	; 0x80ad
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d003      	beq.n	8009602 <style_prop_is_cacheble+0xba>
 80095fa:	f248 028e 	movw	r2, #32910	; 0x808e
 80095fe:	4293      	cmp	r3, r2
 8009600:	d101      	bne.n	8009606 <style_prop_is_cacheble+0xbe>
        case LV_STYLE_OUTLINE_BLEND_MODE:
        case LV_STYLE_PATTERN_BLEND_MODE:
        case LV_STYLE_SHADOW_BLEND_MODE:
        case LV_STYLE_TEXT_BLEND_MODE:
        case LV_STYLE_VALUE_BLEND_MODE:
            return true;
 8009602:	2301      	movs	r3, #1
 8009604:	e000      	b.n	8009608 <style_prop_is_cacheble+0xc0>
            break;
        default:
            return false;
 8009606:	2300      	movs	r3, #0
    }
}
 8009608:	4618      	mov	r0, r3
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr
 8009614:	ffff7f80 	.word	0xffff7f80

08009618 <update_style_cache>:
 * @param obj pointer to an object
 * @param part the part of the object
 * @param prop the property which triggered the update
 */
static void update_style_cache(lv_obj_t * obj, uint8_t part, uint16_t prop)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	460b      	mov	r3, r1
 8009622:	70fb      	strb	r3, [r7, #3]
 8009624:	4613      	mov	r3, r2
 8009626:	803b      	strh	r3, [r7, #0]
    if(style_prop_is_cacheble(prop) == false) return;
 8009628:	883b      	ldrh	r3, [r7, #0]
 800962a:	4618      	mov	r0, r3
 800962c:	f7ff ff8c 	bl	8009548 <style_prop_is_cacheble>
 8009630:	4603      	mov	r3, r0
 8009632:	f083 0301 	eor.w	r3, r3, #1
 8009636:	b2db      	uxtb	r3, r3
 8009638:	2b00      	cmp	r3, #0
 800963a:	f040 81fa 	bne.w	8009a32 <update_style_cache+0x41a>

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 800963e:	78fb      	ldrb	r3, [r7, #3]
 8009640:	4619      	mov	r1, r3
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f7fd fa40 	bl	8006ac8 <lv_obj_get_style_list>
 8009648:	60f8      	str	r0, [r7, #12]

    bool ignore_cache_ori = list->ignore_cache;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	795b      	ldrb	r3, [r3, #5]
 800964e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009652:	b2db      	uxtb	r3, r3
 8009654:	2b00      	cmp	r3, #0
 8009656:	bf14      	ite	ne
 8009658:	2301      	movne	r3, #1
 800965a:	2300      	moveq	r3, #0
 800965c:	72fb      	strb	r3, [r7, #11]
    list->ignore_cache = 1;
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	7953      	ldrb	r3, [r2, #5]
 8009662:	f043 0308 	orr.w	r3, r3, #8
 8009666:	7153      	strb	r3, [r2, #5]

#if LV_USE_OPA_SCALE
    list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
 8009668:	78fb      	ldrb	r3, [r7, #3]
 800966a:	4619      	mov	r1, r3
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7fa ff77 	bl	8004560 <lv_obj_get_style_opa_scale>
 8009672:	4603      	mov	r3, r0
 8009674:	2bff      	cmp	r3, #255	; 0xff
 8009676:	bf0c      	ite	eq
 8009678:	2301      	moveq	r3, #1
 800967a:	2300      	movne	r3, #0
 800967c:	b2d9      	uxtb	r1, r3
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	7953      	ldrb	r3, [r2, #5]
 8009682:	f361 1345 	bfi	r3, r1, #5, #1
 8009686:	7153      	strb	r3, [r2, #5]
#else
    list->opa_scale_cover    = 1;
#endif
    list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
 8009688:	78fb      	ldrb	r3, [r7, #3]
 800968a:	4619      	mov	r1, r3
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f7fb fb02 	bl	8004c96 <lv_obj_get_style_text_decor>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	bf0c      	ite	eq
 8009698:	2301      	moveq	r3, #1
 800969a:	2300      	movne	r3, #0
 800969c:	b2d9      	uxtb	r1, r3
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	79d3      	ldrb	r3, [r2, #7]
 80096a2:	f361 1386 	bfi	r3, r1, #6, #1
 80096a6:	71d3      	strb	r3, [r2, #7]
    list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == LV_THEME_DEFAULT_FONT_NORMAL ? 1 : 0;
 80096a8:	78fb      	ldrb	r3, [r7, #3]
 80096aa:	4619      	mov	r1, r3
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7fb fb60 	bl	8004d72 <lv_obj_get_style_text_font>
 80096b2:	4602      	mov	r2, r0
 80096b4:	4bac      	ldr	r3, [pc, #688]	; (8009968 <update_style_cache+0x350>)
 80096b6:	429a      	cmp	r2, r3
 80096b8:	bf0c      	ite	eq
 80096ba:	2301      	moveq	r3, #1
 80096bc:	2300      	movne	r3, #0
 80096be:	b2d9      	uxtb	r1, r3
 80096c0:	68fa      	ldr	r2, [r7, #12]
 80096c2:	79d3      	ldrb	r3, [r2, #7]
 80096c4:	f361 13c7 	bfi	r3, r1, #7, #1
 80096c8:	71d3      	strb	r3, [r2, #7]

    list->text_space_zero = 1;
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	79d3      	ldrb	r3, [r2, #7]
 80096ce:	f043 0320 	orr.w	r3, r3, #32
 80096d2:	71d3      	strb	r3, [r2, #7]
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 80096d4:	78fb      	ldrb	r3, [r7, #3]
 80096d6:	4619      	mov	r1, r3
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f7fb fab8 	bl	8004c4e <lv_obj_get_style_text_letter_space>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d107      	bne.n	80096f4 <update_style_cache+0xdc>
       lv_obj_get_style_text_line_space(obj, part) != 0) {
 80096e4:	78fb      	ldrb	r3, [r7, #3]
 80096e6:	4619      	mov	r1, r3
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f7fb fac2 	bl	8004c72 <lv_obj_get_style_text_line_space>
 80096ee:	4603      	mov	r3, r0
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d004      	beq.n	80096fe <update_style_cache+0xe6>
        list->text_space_zero = 0;
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	79d3      	ldrb	r3, [r2, #7]
 80096f8:	f36f 1345 	bfc	r3, #5, #1
 80096fc:	71d3      	strb	r3, [r2, #7]
    }

    lv_opa_t bg_opa = lv_obj_get_style_bg_opa(obj, part);
 80096fe:	78fb      	ldrb	r3, [r7, #3]
 8009700:	4619      	mov	r1, r3
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7fb f83f 	bl	8004786 <lv_obj_get_style_bg_opa>
 8009708:	4603      	mov	r3, r0
 800970a:	72bb      	strb	r3, [r7, #10]
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
 800970c:	7abb      	ldrb	r3, [r7, #10]
 800970e:	2b00      	cmp	r3, #0
 8009710:	bf0c      	ite	eq
 8009712:	2301      	moveq	r3, #1
 8009714:	2300      	movne	r3, #0
 8009716:	b2d9      	uxtb	r1, r3
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	7993      	ldrb	r3, [r2, #6]
 800971c:	f361 03c3 	bfi	r3, r1, #3, #1
 8009720:	7193      	strb	r3, [r2, #6]
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
 8009722:	7abb      	ldrb	r3, [r7, #10]
 8009724:	2bff      	cmp	r3, #255	; 0xff
 8009726:	bf0c      	ite	eq
 8009728:	2301      	moveq	r3, #1
 800972a:	2300      	movne	r3, #0
 800972c:	b2d9      	uxtb	r1, r3
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	7993      	ldrb	r3, [r2, #6]
 8009732:	f361 1304 	bfi	r3, r1, #4, #1
 8009736:	7193      	strb	r3, [r2, #6]

    list->border_width_zero = lv_obj_get_style_border_width(obj, part) == 0 ? 1 : 0;
 8009738:	78fb      	ldrb	r3, [r7, #3]
 800973a:	4619      	mov	r1, r3
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f7fb f833 	bl	80047a8 <lv_obj_get_style_border_width>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	bf0c      	ite	eq
 8009748:	2301      	moveq	r3, #1
 800974a:	2300      	movne	r3, #0
 800974c:	b2d9      	uxtb	r1, r3
 800974e:	68fa      	ldr	r2, [r7, #12]
 8009750:	7993      	ldrb	r3, [r2, #6]
 8009752:	f361 1345 	bfi	r3, r1, #5, #1
 8009756:	7193      	strb	r3, [r2, #6]
    list->border_side_full = lv_obj_get_style_border_side(obj, part) == LV_BORDER_SIDE_FULL ? 1 : 0;
 8009758:	78fb      	ldrb	r3, [r7, #3]
 800975a:	4619      	mov	r1, r3
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f7fb f834 	bl	80047ca <lv_obj_get_style_border_side>
 8009762:	4603      	mov	r3, r0
 8009764:	2b0f      	cmp	r3, #15
 8009766:	bf0c      	ite	eq
 8009768:	2301      	moveq	r3, #1
 800976a:	2300      	movne	r3, #0
 800976c:	b2d9      	uxtb	r1, r3
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	7993      	ldrb	r3, [r2, #6]
 8009772:	f361 1386 	bfi	r3, r1, #6, #1
 8009776:	7193      	strb	r3, [r2, #6]
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
 8009778:	78fb      	ldrb	r3, [r7, #3]
 800977a:	4619      	mov	r1, r3
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f7fb f848 	bl	8004812 <lv_obj_get_style_border_post>
 8009782:	4603      	mov	r3, r0
 8009784:	f083 0301 	eor.w	r3, r3, #1
 8009788:	b2d9      	uxtb	r1, r3
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	7993      	ldrb	r3, [r2, #6]
 800978e:	f361 13c7 	bfi	r3, r1, #7, #1
 8009792:	7193      	strb	r3, [r2, #6]
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
 8009794:	78fb      	ldrb	r3, [r7, #3]
 8009796:	4619      	mov	r1, r3
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f7fa fe76 	bl	800448a <lv_obj_get_style_clip_corner>
 800979e:	4603      	mov	r3, r0
 80097a0:	f083 0301 	eor.w	r3, r3, #1
 80097a4:	b2d9      	uxtb	r1, r3
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	7953      	ldrb	r3, [r2, #5]
 80097aa:	f361 1386 	bfi	r3, r1, #6, #1
 80097ae:	7153      	strb	r3, [r2, #5]
    list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
 80097b0:	78fb      	ldrb	r3, [r7, #3]
 80097b2:	4619      	mov	r1, r3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7fb fba2 	bl	8004efe <lv_obj_get_style_image_recolor_opa>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	bf0c      	ite	eq
 80097c0:	2301      	moveq	r3, #1
 80097c2:	2300      	movne	r3, #0
 80097c4:	b2d9      	uxtb	r1, r3
 80097c6:	68fa      	ldr	r2, [r7, #12]
 80097c8:	79d3      	ldrb	r3, [r2, #7]
 80097ca:	f361 1304 	bfi	r3, r1, #4, #1
 80097ce:	71d3      	strb	r3, [r2, #7]
    list->outline_width_zero    = lv_obj_get_style_outline_width(obj, part) == 0 ? 1 : 0;
 80097d0:	78fb      	ldrb	r3, [r7, #3]
 80097d2:	4619      	mov	r1, r3
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f7fb f854 	bl	8004882 <lv_obj_get_style_outline_width>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	bf0c      	ite	eq
 80097e0:	2301      	moveq	r3, #1
 80097e2:	2300      	movne	r3, #0
 80097e4:	b2d9      	uxtb	r1, r3
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	79d3      	ldrb	r3, [r2, #7]
 80097ea:	f361 0300 	bfi	r3, r1, #0, #1
 80097ee:	71d3      	strb	r3, [r2, #7]
    list->pattern_img_null    = lv_obj_get_style_pattern_image(obj, part) == NULL ? 1 : 0;
 80097f0:	78fb      	ldrb	r3, [r7, #3]
 80097f2:	4619      	mov	r1, r3
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f7fb f96d 	bl	8004ad4 <lv_obj_get_style_pattern_image>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	bf0c      	ite	eq
 8009800:	2301      	moveq	r3, #1
 8009802:	2300      	movne	r3, #0
 8009804:	b2d9      	uxtb	r1, r3
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	79d3      	ldrb	r3, [r2, #7]
 800980a:	f361 0341 	bfi	r3, r1, #1, #1
 800980e:	71d3      	strb	r3, [r2, #7]
    list->radius_zero    = lv_obj_get_style_radius(obj, part) == 0 ? 1 : 0;
 8009810:	78fb      	ldrb	r3, [r7, #3]
 8009812:	4619      	mov	r1, r3
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f7fa fe27 	bl	8004468 <lv_obj_get_style_radius>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	bf0c      	ite	eq
 8009820:	2301      	moveq	r3, #1
 8009822:	2300      	movne	r3, #0
 8009824:	b2d9      	uxtb	r1, r3
 8009826:	68fa      	ldr	r2, [r7, #12]
 8009828:	7953      	ldrb	r3, [r2, #5]
 800982a:	f361 1304 	bfi	r3, r1, #4, #1
 800982e:	7153      	strb	r3, [r2, #5]
    list->shadow_width_zero    = lv_obj_get_style_shadow_width(obj, part) == 0 ? 1 : 0;
 8009830:	78fb      	ldrb	r3, [r7, #3]
 8009832:	4619      	mov	r1, r3
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f7fb f87a 	bl	800492e <lv_obj_get_style_shadow_width>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	bf0c      	ite	eq
 8009840:	2301      	moveq	r3, #1
 8009842:	2300      	movne	r3, #0
 8009844:	b2d9      	uxtb	r1, r3
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	79d3      	ldrb	r3, [r2, #7]
 800984a:	f361 0382 	bfi	r3, r1, #2, #1
 800984e:	71d3      	strb	r3, [r2, #7]
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
 8009850:	78fb      	ldrb	r3, [r7, #3]
 8009852:	4619      	mov	r1, r3
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f7fb f9e9 	bl	8004c2c <lv_obj_get_style_value_str>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	bf0c      	ite	eq
 8009860:	2301      	moveq	r3, #1
 8009862:	2300      	movne	r3, #0
 8009864:	b2d9      	uxtb	r1, r3
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	79d3      	ldrb	r3, [r2, #7]
 800986a:	f361 03c3 	bfi	r3, r1, #3, #1
 800986e:	71d3      	strb	r3, [r2, #7]

    list->transform_all_zero  = 1;
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	7953      	ldrb	r3, [r2, #5]
 8009874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009878:	7153      	strb	r3, [r2, #5]
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
 800987a:	78fb      	ldrb	r3, [r7, #3]
 800987c:	4619      	mov	r1, r3
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f7fa fe4c 	bl	800451c <lv_obj_get_style_transform_angle>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d118      	bne.n	80098bc <update_style_cache+0x2a4>
       lv_obj_get_style_transform_width(obj, part) != 0 ||
 800988a:	78fb      	ldrb	r3, [r7, #3]
 800988c:	4619      	mov	r1, r3
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f7fa fe22 	bl	80044d8 <lv_obj_get_style_transform_width>
 8009894:	4603      	mov	r3, r0
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
 8009896:	2b00      	cmp	r3, #0
 8009898:	d110      	bne.n	80098bc <update_style_cache+0x2a4>
       lv_obj_get_style_transform_height(obj, part) != 0 ||
 800989a:	78fb      	ldrb	r3, [r7, #3]
 800989c:	4619      	mov	r1, r3
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f7fa fe2b 	bl	80044fa <lv_obj_get_style_transform_height>
 80098a4:	4603      	mov	r3, r0
       lv_obj_get_style_transform_width(obj, part) != 0 ||
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d108      	bne.n	80098bc <update_style_cache+0x2a4>
       lv_obj_get_style_transform_zoom(obj, part) != LV_IMG_ZOOM_NONE) {
 80098aa:	78fb      	ldrb	r3, [r7, #3]
 80098ac:	4619      	mov	r1, r3
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f7fa fe45 	bl	800453e <lv_obj_get_style_transform_zoom>
 80098b4:	4603      	mov	r3, r0
       lv_obj_get_style_transform_height(obj, part) != 0 ||
 80098b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098ba:	d004      	beq.n	80098c6 <update_style_cache+0x2ae>
        list->transform_all_zero  = 0;
 80098bc:	68fa      	ldr	r2, [r7, #12]
 80098be:	7953      	ldrb	r3, [r2, #5]
 80098c0:	f36f 13c7 	bfc	r3, #7, #1
 80098c4:	7153      	strb	r3, [r2, #5]
    }

    list->pad_all_zero  = 1;
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	7993      	ldrb	r3, [r2, #6]
 80098ca:	f043 0301 	orr.w	r3, r3, #1
 80098ce:	7193      	strb	r3, [r2, #6]
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
 80098d0:	78fb      	ldrb	r3, [r7, #3]
 80098d2:	4619      	mov	r1, r3
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7fa fe55 	bl	8004584 <lv_obj_get_style_pad_top>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d117      	bne.n	8009910 <update_style_cache+0x2f8>
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
 80098e0:	78fb      	ldrb	r3, [r7, #3]
 80098e2:	4619      	mov	r1, r3
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f7fa fe5e 	bl	80045a6 <lv_obj_get_style_pad_bottom>
 80098ea:	4603      	mov	r3, r0
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10f      	bne.n	8009910 <update_style_cache+0x2f8>
       lv_obj_get_style_pad_left(obj, part) != 0 ||
 80098f0:	78fb      	ldrb	r3, [r7, #3]
 80098f2:	4619      	mov	r1, r3
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f7fa fe67 	bl	80045c8 <lv_obj_get_style_pad_left>
 80098fa:	4603      	mov	r3, r0
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d107      	bne.n	8009910 <update_style_cache+0x2f8>
       lv_obj_get_style_pad_right(obj, part) != 0) {
 8009900:	78fb      	ldrb	r3, [r7, #3]
 8009902:	4619      	mov	r1, r3
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f7fa fe70 	bl	80045ea <lv_obj_get_style_pad_right>
 800990a:	4603      	mov	r3, r0
       lv_obj_get_style_pad_left(obj, part) != 0 ||
 800990c:	2b00      	cmp	r3, #0
 800990e:	d004      	beq.n	800991a <update_style_cache+0x302>
        list->pad_all_zero  = 0;
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	7993      	ldrb	r3, [r2, #6]
 8009914:	f36f 0300 	bfc	r3, #0, #1
 8009918:	7193      	strb	r3, [r2, #6]
    }

    list->margin_all_zero  = 1;
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	7993      	ldrb	r3, [r2, #6]
 800991e:	f043 0302 	orr.w	r3, r3, #2
 8009922:	7193      	strb	r3, [r2, #6]
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
 8009924:	78fb      	ldrb	r3, [r7, #3]
 8009926:	4619      	mov	r1, r3
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f7fa fe80 	bl	800462e <lv_obj_get_style_margin_top>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d11b      	bne.n	800996c <update_style_cache+0x354>
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
 8009934:	78fb      	ldrb	r3, [r7, #3]
 8009936:	4619      	mov	r1, r3
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7fa fe89 	bl	8004650 <lv_obj_get_style_margin_bottom>
 800993e:	4603      	mov	r3, r0
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
 8009940:	2b00      	cmp	r3, #0
 8009942:	d113      	bne.n	800996c <update_style_cache+0x354>
       lv_obj_get_style_margin_left(obj, part) != 0 ||
 8009944:	78fb      	ldrb	r3, [r7, #3]
 8009946:	4619      	mov	r1, r3
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f7fa fe92 	bl	8004672 <lv_obj_get_style_margin_left>
 800994e:	4603      	mov	r3, r0
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
 8009950:	2b00      	cmp	r3, #0
 8009952:	d10b      	bne.n	800996c <update_style_cache+0x354>
       lv_obj_get_style_margin_right(obj, part) != 0) {
 8009954:	78fb      	ldrb	r3, [r7, #3]
 8009956:	4619      	mov	r1, r3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f7fa fe9b 	bl	8004694 <lv_obj_get_style_margin_right>
 800995e:	4603      	mov	r3, r0
       lv_obj_get_style_margin_left(obj, part) != 0 ||
 8009960:	2b00      	cmp	r3, #0
 8009962:	d008      	beq.n	8009976 <update_style_cache+0x35e>
 8009964:	e002      	b.n	800996c <update_style_cache+0x354>
 8009966:	bf00      	nop
 8009968:	200013e8 	.word	0x200013e8
        list->margin_all_zero  = 0;
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	7993      	ldrb	r3, [r2, #6]
 8009970:	f36f 0341 	bfc	r3, #1, #1
 8009974:	7193      	strb	r3, [r2, #6]
    }

    list->blend_mode_all_normal = 1;
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	7993      	ldrb	r3, [r2, #6]
 800997a:	f043 0304 	orr.w	r3, r3, #4
 800997e:	7193      	strb	r3, [r2, #6]
#if LV_USE_BLEND_MODES
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8009980:	78fb      	ldrb	r3, [r7, #3]
 8009982:	4619      	mov	r1, r3
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f7fa fe96 	bl	80046b6 <lv_obj_get_style_bg_blend_mode>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d13f      	bne.n	8009a10 <update_style_cache+0x3f8>
       lv_obj_get_style_border_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	4619      	mov	r1, r3
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f7fa ff2a 	bl	80047ee <lv_obj_get_style_border_blend_mode>
 800999a:	4603      	mov	r3, r0
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 800999c:	2b00      	cmp	r3, #0
 800999e:	d137      	bne.n	8009a10 <update_style_cache+0x3f8>
       lv_obj_get_style_pattern_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80099a0:	78fb      	ldrb	r3, [r7, #3]
 80099a2:	4619      	mov	r1, r3
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f7fb f850 	bl	8004a4a <lv_obj_get_style_pattern_blend_mode>
 80099aa:	4603      	mov	r3, r0
       lv_obj_get_style_border_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d12f      	bne.n	8009a10 <update_style_cache+0x3f8>
       lv_obj_get_style_outline_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80099b0:	78fb      	ldrb	r3, [r7, #3]
 80099b2:	4619      	mov	r1, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7fa ff86 	bl	80048c6 <lv_obj_get_style_outline_blend_mode>
 80099ba:	4603      	mov	r3, r0
       lv_obj_get_style_pattern_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d127      	bne.n	8009a10 <update_style_cache+0x3f8>
       lv_obj_get_style_value_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80099c0:	78fb      	ldrb	r3, [r7, #3]
 80099c2:	4619      	mov	r1, r3
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f7fb f8b8 	bl	8004b3a <lv_obj_get_style_value_blend_mode>
 80099ca:	4603      	mov	r3, r0
       lv_obj_get_style_outline_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d11f      	bne.n	8009a10 <update_style_cache+0x3f8>
       lv_obj_get_style_text_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80099d0:	78fb      	ldrb	r3, [r7, #3]
 80099d2:	4619      	mov	r1, r3
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f7fb f971 	bl	8004cbc <lv_obj_get_style_text_blend_mode>
 80099da:	4603      	mov	r3, r0
       lv_obj_get_style_value_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d117      	bne.n	8009a10 <update_style_cache+0x3f8>
       lv_obj_get_style_line_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80099e0:	78fb      	ldrb	r3, [r7, #3]
 80099e2:	4619      	mov	r1, r3
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f7fb f9e7 	bl	8004db8 <lv_obj_get_style_line_blend_mode>
 80099ea:	4603      	mov	r3, r0
       lv_obj_get_style_text_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d10f      	bne.n	8009a10 <update_style_cache+0x3f8>
       lv_obj_get_style_image_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80099f0:	78fb      	ldrb	r3, [r7, #3]
 80099f2:	4619      	mov	r1, r3
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f7fb fa4b 	bl	8004e90 <lv_obj_get_style_image_blend_mode>
 80099fa:	4603      	mov	r3, r0
       lv_obj_get_style_line_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d107      	bne.n	8009a10 <update_style_cache+0x3f8>
       lv_obj_get_style_shadow_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL) {
 8009a00:	78fb      	ldrb	r3, [r7, #3]
 8009a02:	4619      	mov	r1, r3
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f7fa ffd6 	bl	80049b6 <lv_obj_get_style_shadow_blend_mode>
 8009a0a:	4603      	mov	r3, r0
       lv_obj_get_style_image_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d004      	beq.n	8009a1a <update_style_cache+0x402>
        list->blend_mode_all_normal = 0;
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	7993      	ldrb	r3, [r2, #6]
 8009a14:	f36f 0382 	bfc	r3, #2, #1
 8009a18:	7193      	strb	r3, [r2, #6]
    }
#endif
    list->ignore_cache = ignore_cache_ori;
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	7953      	ldrb	r3, [r2, #5]
 8009a1e:	7af9      	ldrb	r1, [r7, #11]
 8009a20:	f361 03c3 	bfi	r3, r1, #3, #1
 8009a24:	7153      	strb	r3, [r2, #5]
    list->valid_cache = 1;
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	7953      	ldrb	r3, [r2, #5]
 8009a2a:	f043 0304 	orr.w	r3, r3, #4
 8009a2e:	7153      	strb	r3, [r2, #5]
 8009a30:	e000      	b.n	8009a34 <update_style_cache+0x41c>
    if(style_prop_is_cacheble(prop) == false) return;
 8009a32:	bf00      	nop
}
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop

08009a3c <update_style_cache_children>:
 * Update the cache of style list
 * @param obj pointer to an object
 * @param part the part of the object
 */
static void update_style_cache_children(lv_obj_t * obj)
{
 8009a3c:	b590      	push	{r4, r7, lr}
 8009a3e:	b087      	sub	sp, #28
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
    uint8_t part;
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 8009a44:	2300      	movs	r3, #0
 8009a46:	75fb      	strb	r3, [r7, #23]
 8009a48:	e07d      	b.n	8009b46 <update_style_cache_children+0x10a>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8009a4a:	7dfb      	ldrb	r3, [r7, #23]
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f7fd f83a 	bl	8006ac8 <lv_obj_get_style_list>
 8009a54:	60f8      	str	r0, [r7, #12]
        if(list == NULL) break;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d079      	beq.n	8009b50 <update_style_cache_children+0x114>

        bool ignore_cache_ori = list->ignore_cache;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	795b      	ldrb	r3, [r3, #5]
 8009a60:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	bf14      	ite	ne
 8009a6a:	2301      	movne	r3, #1
 8009a6c:	2300      	moveq	r3, #0
 8009a6e:	72fb      	strb	r3, [r7, #11]
        list->ignore_cache = 1;
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	7953      	ldrb	r3, [r2, #5]
 8009a74:	f043 0308 	orr.w	r3, r3, #8
 8009a78:	7153      	strb	r3, [r2, #5]

        list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
 8009a7a:	7dfb      	ldrb	r3, [r7, #23]
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7fa fd6e 	bl	8004560 <lv_obj_get_style_opa_scale>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2bff      	cmp	r3, #255	; 0xff
 8009a88:	bf0c      	ite	eq
 8009a8a:	2301      	moveq	r3, #1
 8009a8c:	2300      	movne	r3, #0
 8009a8e:	b2d9      	uxtb	r1, r3
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	7953      	ldrb	r3, [r2, #5]
 8009a94:	f361 1345 	bfi	r3, r1, #5, #1
 8009a98:	7153      	strb	r3, [r2, #5]
        list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
 8009a9a:	7dfb      	ldrb	r3, [r7, #23]
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f7fb f8f9 	bl	8004c96 <lv_obj_get_style_text_decor>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	bf0c      	ite	eq
 8009aaa:	2301      	moveq	r3, #1
 8009aac:	2300      	movne	r3, #0
 8009aae:	b2d9      	uxtb	r1, r3
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	79d3      	ldrb	r3, [r2, #7]
 8009ab4:	f361 1386 	bfi	r3, r1, #6, #1
 8009ab8:	71d3      	strb	r3, [r2, #7]
        list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == lv_theme_get_font_normal() ? 1 : 0;
 8009aba:	7dfb      	ldrb	r3, [r7, #23]
 8009abc:	4619      	mov	r1, r3
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f7fb f957 	bl	8004d72 <lv_obj_get_style_text_font>
 8009ac4:	4604      	mov	r4, r0
 8009ac6:	f014 fc6b 	bl	801e3a0 <lv_theme_get_font_normal>
 8009aca:	4603      	mov	r3, r0
 8009acc:	429c      	cmp	r4, r3
 8009ace:	bf0c      	ite	eq
 8009ad0:	2301      	moveq	r3, #1
 8009ad2:	2300      	movne	r3, #0
 8009ad4:	b2d9      	uxtb	r1, r3
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	79d3      	ldrb	r3, [r2, #7]
 8009ada:	f361 13c7 	bfi	r3, r1, #7, #1
 8009ade:	71d3      	strb	r3, [r2, #7]
        list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
 8009ae0:	7dfb      	ldrb	r3, [r7, #23]
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f7fb fa0a 	bl	8004efe <lv_obj_get_style_image_recolor_opa>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	bf0c      	ite	eq
 8009af0:	2301      	moveq	r3, #1
 8009af2:	2300      	movne	r3, #0
 8009af4:	b2d9      	uxtb	r1, r3
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	79d3      	ldrb	r3, [r2, #7]
 8009afa:	f361 1304 	bfi	r3, r1, #4, #1
 8009afe:	71d3      	strb	r3, [r2, #7]

        list->text_space_zero = 1;
 8009b00:	68fa      	ldr	r2, [r7, #12]
 8009b02:	79d3      	ldrb	r3, [r2, #7]
 8009b04:	f043 0320 	orr.w	r3, r3, #32
 8009b08:	71d3      	strb	r3, [r2, #7]
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 8009b0a:	7dfb      	ldrb	r3, [r7, #23]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7fb f89d 	bl	8004c4e <lv_obj_get_style_text_letter_space>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d107      	bne.n	8009b2a <update_style_cache_children+0xee>
           lv_obj_get_style_text_line_space(obj, part) != 0) {
 8009b1a:	7dfb      	ldrb	r3, [r7, #23]
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7fb f8a7 	bl	8004c72 <lv_obj_get_style_text_line_space>
 8009b24:	4603      	mov	r3, r0
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d004      	beq.n	8009b34 <update_style_cache_children+0xf8>
            list->text_space_zero = 0;
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	79d3      	ldrb	r3, [r2, #7]
 8009b2e:	f36f 1345 	bfc	r3, #5, #1
 8009b32:	71d3      	strb	r3, [r2, #7]
        }

        list->ignore_cache = ignore_cache_ori;
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	7953      	ldrb	r3, [r2, #5]
 8009b38:	7af9      	ldrb	r1, [r7, #11]
 8009b3a:	f361 03c3 	bfi	r3, r1, #3, #1
 8009b3e:	7153      	strb	r3, [r2, #5]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
 8009b40:	7dfb      	ldrb	r3, [r7, #23]
 8009b42:	3301      	adds	r3, #1
 8009b44:	75fb      	strb	r3, [r7, #23]
 8009b46:	7dfb      	ldrb	r3, [r7, #23]
 8009b48:	2b40      	cmp	r3, #64	; 0x40
 8009b4a:	f47f af7e 	bne.w	8009a4a <update_style_cache_children+0xe>
 8009b4e:	e000      	b.n	8009b52 <update_style_cache_children+0x116>
        if(list == NULL) break;
 8009b50:	bf00      	nop
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 8009b52:	2100      	movs	r1, #0
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f7fc feb5 	bl	80068c4 <lv_obj_get_child>
 8009b5a:	6138      	str	r0, [r7, #16]
    while(child) {
 8009b5c:	e007      	b.n	8009b6e <update_style_cache_children+0x132>
        update_style_cache_children(child);
 8009b5e:	6938      	ldr	r0, [r7, #16]
 8009b60:	f7ff ff6c 	bl	8009a3c <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
 8009b64:	6939      	ldr	r1, [r7, #16]
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f7fc feac 	bl	80068c4 <lv_obj_get_child>
 8009b6c:	6138      	str	r0, [r7, #16]
    while(child) {
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1f4      	bne.n	8009b5e <update_style_cache_children+0x122>
    }

}
 8009b74:	bf00      	nop
 8009b76:	371c      	adds	r7, #28
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd90      	pop	{r4, r7, pc}

08009b7c <invalidate_style_cache>:
 * Mark the object and all of it's children's style lists as invalid.
 * The cache will be updated when a cached property asked nest time
 * @param obj pointer to an object
 */
static void invalidate_style_cache(lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b086      	sub	sp, #24
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	460b      	mov	r3, r1
 8009b86:	70fb      	strb	r3, [r7, #3]
 8009b88:	4613      	mov	r3, r2
 8009b8a:	803b      	strh	r3, [r7, #0]
    if(style_prop_is_cacheble(prop) == false) return;
 8009b8c:	883b      	ldrh	r3, [r7, #0]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7ff fcda 	bl	8009548 <style_prop_is_cacheble>
 8009b94:	4603      	mov	r3, r0
 8009b96:	f083 0301 	eor.w	r3, r3, #1
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d143      	bne.n	8009c28 <invalidate_style_cache+0xac>

    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	70fb      	strb	r3, [r7, #3]
 8009ba4:	e010      	b.n	8009bc8 <invalidate_style_cache+0x4c>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8009ba6:	78fb      	ldrb	r3, [r7, #3]
 8009ba8:	4619      	mov	r1, r3
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f7fc ff8c 	bl	8006ac8 <lv_obj_get_style_list>
 8009bb0:	6138      	str	r0, [r7, #16]
        if(list == NULL) break;
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00b      	beq.n	8009bd0 <invalidate_style_cache+0x54>
        list->valid_cache = 0;
 8009bb8:	693a      	ldr	r2, [r7, #16]
 8009bba:	7953      	ldrb	r3, [r2, #5]
 8009bbc:	f36f 0382 	bfc	r3, #2, #1
 8009bc0:	7153      	strb	r3, [r2, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
 8009bc2:	78fb      	ldrb	r3, [r7, #3]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	70fb      	strb	r3, [r7, #3]
 8009bc8:	78fb      	ldrb	r3, [r7, #3]
 8009bca:	2b3f      	cmp	r3, #63	; 0x3f
 8009bcc:	d9eb      	bls.n	8009ba6 <invalidate_style_cache+0x2a>
 8009bce:	e000      	b.n	8009bd2 <invalidate_style_cache+0x56>
        if(list == NULL) break;
 8009bd0:	bf00      	nop
    }

    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8009bd2:	2340      	movs	r3, #64	; 0x40
 8009bd4:	70fb      	strb	r3, [r7, #3]
 8009bd6:	e010      	b.n	8009bfa <invalidate_style_cache+0x7e>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8009bd8:	78fb      	ldrb	r3, [r7, #3]
 8009bda:	4619      	mov	r1, r3
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f7fc ff73 	bl	8006ac8 <lv_obj_get_style_list>
 8009be2:	60f8      	str	r0, [r7, #12]
        if(list == NULL) break;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00b      	beq.n	8009c02 <invalidate_style_cache+0x86>
        list->valid_cache = 0;
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	7953      	ldrb	r3, [r2, #5]
 8009bee:	f36f 0382 	bfc	r3, #2, #1
 8009bf2:	7153      	strb	r3, [r2, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
 8009bf4:	78fb      	ldrb	r3, [r7, #3]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	70fb      	strb	r3, [r7, #3]
 8009bfa:	78fb      	ldrb	r3, [r7, #3]
 8009bfc:	2bff      	cmp	r3, #255	; 0xff
 8009bfe:	d1eb      	bne.n	8009bd8 <invalidate_style_cache+0x5c>
 8009c00:	e000      	b.n	8009c04 <invalidate_style_cache+0x88>
        if(list == NULL) break;
 8009c02:	bf00      	nop
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 8009c04:	2100      	movs	r1, #0
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7fc fe5c 	bl	80068c4 <lv_obj_get_child>
 8009c0c:	6178      	str	r0, [r7, #20]
    while(child) {
 8009c0e:	e007      	b.n	8009c20 <invalidate_style_cache+0xa4>
        update_style_cache_children(child);
 8009c10:	6978      	ldr	r0, [r7, #20]
 8009c12:	f7ff ff13 	bl	8009a3c <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
 8009c16:	6979      	ldr	r1, [r7, #20]
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f7fc fe53 	bl	80068c4 <lv_obj_get_child>
 8009c1e:	6178      	str	r0, [r7, #20]
    while(child) {
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d1f4      	bne.n	8009c10 <invalidate_style_cache+0x94>
 8009c26:	e000      	b.n	8009c2a <invalidate_style_cache+0xae>
    if(style_prop_is_cacheble(prop) == false) return;
 8009c28:	bf00      	nop
    }
}
 8009c2a:	3718      	adds	r7, #24
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <style_snapshot>:

static void style_snapshot(lv_obj_t * obj, uint8_t part, style_snapshot_t * shot)
{
 8009c30:	b590      	push	{r4, r7, lr}
 8009c32:	b087      	sub	sp, #28
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	460b      	mov	r3, r1
 8009c3a:	607a      	str	r2, [r7, #4]
 8009c3c:	72fb      	strb	r3, [r7, #11]
    _lv_obj_disable_style_caching(obj, true);
 8009c3e:	2101      	movs	r1, #1
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f7fc fa16 	bl	8006072 <_lv_obj_disable_style_caching>
    _lv_memset_00(shot, sizeof(style_snapshot_t));
 8009c46:	21e0      	movs	r1, #224	; 0xe0
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f013 fa6e 	bl	801d12a <_lv_memset_00>
    lv_draw_rect_dsc_init(&shot->rect);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4618      	mov	r0, r3
 8009c52:	f009 fb81 	bl	8013358 <lv_draw_rect_dsc_init>
    lv_draw_label_dsc_init(&shot->label);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	3368      	adds	r3, #104	; 0x68
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f005 fa6a 	bl	800f134 <lv_draw_label_dsc_init>
    lv_draw_img_dsc_init(&shot->img);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	339c      	adds	r3, #156	; 0x9c
 8009c64:	4618      	mov	r0, r3
 8009c66:	f004 faaa 	bl	800e1be <lv_draw_img_dsc_init>
    lv_draw_line_dsc_init(&shot->line);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	3390      	adds	r3, #144	; 0x90
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f006 fde5 	bl	801083e <lv_draw_line_dsc_init>

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
 8009c74:	7afb      	ldrb	r3, [r7, #11]
 8009c76:	4619      	mov	r1, r3
 8009c78:	68f8      	ldr	r0, [r7, #12]
 8009c7a:	f7fc ff25 	bl	8006ac8 <lv_obj_get_style_list>
 8009c7e:	6178      	str	r0, [r7, #20]
    bool trans_ori = list->skip_trans;
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	795b      	ldrb	r3, [r3, #5]
 8009c84:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	bf14      	ite	ne
 8009c8e:	2301      	movne	r3, #1
 8009c90:	2300      	moveq	r3, #0
 8009c92:	74fb      	strb	r3, [r7, #19]
    list->skip_trans = 1;
 8009c94:	697a      	ldr	r2, [r7, #20]
 8009c96:	7953      	ldrb	r3, [r2, #5]
 8009c98:	f043 0301 	orr.w	r3, r3, #1
 8009c9c:	7153      	strb	r3, [r2, #5]

    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	7afb      	ldrb	r3, [r7, #11]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f7fd fcef 	bl	8007688 <lv_obj_init_draw_rect_dsc>
    lv_obj_init_draw_label_dsc(obj, part, &shot->label);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009cb0:	7afb      	ldrb	r3, [r7, #11]
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	68f8      	ldr	r0, [r7, #12]
 8009cb6:	f7fd ff3b 	bl	8007b30 <lv_obj_init_draw_label_dsc>
    lv_obj_init_draw_img_dsc(obj, part, &shot->img);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8009cc0:	7afb      	ldrb	r3, [r7, #11]
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f7fd ffb8 	bl	8007c3a <lv_obj_init_draw_img_dsc>
    lv_obj_init_draw_line_dsc(obj, part, &shot->line);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8009cd0:	7afb      	ldrb	r3, [r7, #11]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f7fe f824 	bl	8007d22 <lv_obj_init_draw_line_dsc>

    shot->pad_top = lv_obj_get_style_pad_top(obj, part);
 8009cda:	7afb      	ldrb	r3, [r7, #11]
 8009cdc:	4619      	mov	r1, r3
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f7fa fc50 	bl	8004584 <lv_obj_get_style_pad_top>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    shot->pad_bottom = lv_obj_get_style_pad_bottom(obj, part);
 8009cee:	7afb      	ldrb	r3, [r7, #11]
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	68f8      	ldr	r0, [r7, #12]
 8009cf4:	f7fa fc57 	bl	80045a6 <lv_obj_get_style_pad_bottom>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
    shot->pad_right = lv_obj_get_style_pad_right(obj, part);
 8009d02:	7afb      	ldrb	r3, [r7, #11]
 8009d04:	4619      	mov	r1, r3
 8009d06:	68f8      	ldr	r0, [r7, #12]
 8009d08:	f7fa fc6f 	bl	80045ea <lv_obj_get_style_pad_right>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	461a      	mov	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
    shot->pad_left = lv_obj_get_style_pad_left(obj, part);
 8009d16:	7afb      	ldrb	r3, [r7, #11]
 8009d18:	4619      	mov	r1, r3
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f7fa fc54 	bl	80045c8 <lv_obj_get_style_pad_left>
 8009d20:	4603      	mov	r3, r0
 8009d22:	461a      	mov	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
    shot->pad_inner = lv_obj_get_style_pad_inner(obj, part);
 8009d2a:	7afb      	ldrb	r3, [r7, #11]
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f7fa fc6c 	bl	800460c <lv_obj_get_style_pad_inner>
 8009d34:	4603      	mov	r3, r0
 8009d36:	461a      	mov	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    shot->margin_top = lv_obj_get_style_margin_top(obj, part);
 8009d3e:	7afb      	ldrb	r3, [r7, #11]
 8009d40:	4619      	mov	r1, r3
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f7fa fc73 	bl	800462e <lv_obj_get_style_margin_top>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
    shot->margin_bottom = lv_obj_get_style_margin_bottom(obj, part);
 8009d52:	7afb      	ldrb	r3, [r7, #11]
 8009d54:	4619      	mov	r1, r3
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f7fa fc7a 	bl	8004650 <lv_obj_get_style_margin_bottom>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	461a      	mov	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
    shot->margin_left = lv_obj_get_style_margin_left(obj, part);
 8009d66:	7afb      	ldrb	r3, [r7, #11]
 8009d68:	4619      	mov	r1, r3
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f7fa fc81 	bl	8004672 <lv_obj_get_style_margin_left>
 8009d70:	4603      	mov	r3, r0
 8009d72:	461a      	mov	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
    shot->margin_right = lv_obj_get_style_margin_right(obj, part);
 8009d7a:	7afb      	ldrb	r3, [r7, #11]
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f7fa fc88 	bl	8004694 <lv_obj_get_style_margin_right>
 8009d84:	4603      	mov	r3, r0
 8009d86:	461a      	mov	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    shot->size = lv_obj_get_style_size(obj, part);
 8009d8e:	7afb      	ldrb	r3, [r7, #11]
 8009d90:	4619      	mov	r1, r3
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	f7fa fb8f 	bl	80044b6 <lv_obj_get_style_size>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
    shot->transform_width = lv_obj_get_style_transform_width(obj, part);
 8009da2:	7afb      	ldrb	r3, [r7, #11]
 8009da4:	4619      	mov	r1, r3
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f7fa fb96 	bl	80044d8 <lv_obj_get_style_transform_width>
 8009dac:	4603      	mov	r3, r0
 8009dae:	461a      	mov	r2, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
    shot->transform_height = lv_obj_get_style_transform_height(obj, part);
 8009db6:	7afb      	ldrb	r3, [r7, #11]
 8009db8:	4619      	mov	r1, r3
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f7fa fb9d 	bl	80044fa <lv_obj_get_style_transform_height>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
    shot->transform_angle = lv_obj_get_style_transform_angle(obj, part);
 8009dca:	7afb      	ldrb	r3, [r7, #11]
 8009dcc:	4619      	mov	r1, r3
 8009dce:	68f8      	ldr	r0, [r7, #12]
 8009dd0:	f7fa fba4 	bl	800451c <lv_obj_get_style_transform_angle>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
    shot->transform_zoom = lv_obj_get_style_transform_zoom(obj, part);
 8009dde:	7afb      	ldrb	r3, [r7, #11]
 8009de0:	4619      	mov	r1, r3
 8009de2:	68f8      	ldr	r0, [r7, #12]
 8009de4:	f7fa fbab 	bl	800453e <lv_obj_get_style_transform_zoom>
 8009de8:	4603      	mov	r3, r0
 8009dea:	461a      	mov	r2, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
    shot->scale_width = lv_obj_get_style_scale_width(obj, part);
 8009df2:	7afb      	ldrb	r3, [r7, #11]
 8009df4:	4619      	mov	r1, r3
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f7fb f92c 	bl	8005054 <lv_obj_get_style_scale_width>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	461a      	mov	r2, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
    shot->scale_border_width = lv_obj_get_style_scale_border_width(obj, part);
 8009e06:	7afb      	ldrb	r3, [r7, #11]
 8009e08:	4619      	mov	r1, r3
 8009e0a:	68f8      	ldr	r0, [r7, #12]
 8009e0c:	f7fb f933 	bl	8005076 <lv_obj_get_style_scale_border_width>
 8009e10:	4603      	mov	r3, r0
 8009e12:	461a      	mov	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
    shot->scale_end_border_width = lv_obj_get_style_scale_end_border_width(obj, part);
 8009e1a:	7afb      	ldrb	r3, [r7, #11]
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	68f8      	ldr	r0, [r7, #12]
 8009e20:	f7fb f93a 	bl	8005098 <lv_obj_get_style_scale_end_border_width>
 8009e24:	4603      	mov	r3, r0
 8009e26:	461a      	mov	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    shot->scale_end_line_width = lv_obj_get_style_scale_end_line_width(obj, part);
 8009e2e:	7afb      	ldrb	r3, [r7, #11]
 8009e30:	4619      	mov	r1, r3
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f7fb f941 	bl	80050ba <lv_obj_get_style_scale_end_line_width>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    shot->scale_grad_color = lv_obj_get_style_scale_grad_color(obj, part);
 8009e42:	687c      	ldr	r4, [r7, #4]
 8009e44:	7afb      	ldrb	r3, [r7, #11]
 8009e46:	4619      	mov	r1, r3
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f7fb f947 	bl	80050dc <lv_obj_get_style_scale_grad_color>
 8009e4e:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
    shot->scale_end_color = lv_obj_get_style_scale_end_color(obj, part);
 8009e52:	687c      	ldr	r4, [r7, #4]
 8009e54:	7afb      	ldrb	r3, [r7, #11]
 8009e56:	4619      	mov	r1, r3
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f7fb f950 	bl	80050fe <lv_obj_get_style_scale_end_color>
 8009e5e:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
 8009e62:	7afb      	ldrb	r3, [r7, #11]
 8009e64:	4619      	mov	r1, r3
 8009e66:	68f8      	ldr	r0, [r7, #12]
 8009e68:	f7fa fb7a 	bl	8004560 <lv_obj_get_style_opa_scale>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	461a      	mov	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    shot->clip_corner = lv_obj_get_style_clip_corner(obj, part);
 8009e76:	7afb      	ldrb	r3, [r7, #11]
 8009e78:	4619      	mov	r1, r3
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f7fa fb05 	bl	800448a <lv_obj_get_style_clip_corner>
 8009e80:	4603      	mov	r3, r0
 8009e82:	4619      	mov	r1, r3
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	f892 30dd 	ldrb.w	r3, [r2, #221]	; 0xdd
 8009e8a:	f361 0300 	bfi	r3, r1, #0, #1
 8009e8e:	f882 30dd 	strb.w	r3, [r2, #221]	; 0xdd
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
 8009e92:	7afb      	ldrb	r3, [r7, #11]
 8009e94:	4619      	mov	r1, r3
 8009e96:	68f8      	ldr	r0, [r7, #12]
 8009e98:	f7fa fcbb 	bl	8004812 <lv_obj_get_style_border_post>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	f892 30dd 	ldrb.w	r3, [r2, #221]	; 0xdd
 8009ea6:	f361 0341 	bfi	r3, r1, #1, #1
 8009eaa:	f882 30dd 	strb.w	r3, [r2, #221]	; 0xdd

    _lv_obj_disable_style_caching(obj, false);
 8009eae:	2100      	movs	r1, #0
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f7fc f8de 	bl	8006072 <_lv_obj_disable_style_caching>
    list->skip_trans = trans_ori;
 8009eb6:	697a      	ldr	r2, [r7, #20]
 8009eb8:	7953      	ldrb	r3, [r2, #5]
 8009eba:	7cf9      	ldrb	r1, [r7, #19]
 8009ebc:	f361 0300 	bfi	r3, r1, #0, #1
 8009ec0:	7153      	strb	r3, [r2, #5]
}
 8009ec2:	bf00      	nop
 8009ec4:	371c      	adds	r7, #28
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd90      	pop	{r4, r7, pc}

08009eca <style_snapshot_compare>:

static style_snapshot_res_t style_snapshot_compare(style_snapshot_t * shot1, style_snapshot_t * shot2)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b082      	sub	sp, #8
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	6039      	str	r1, [r7, #0]
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
 8009ed4:	22e0      	movs	r2, #224	; 0xe0
 8009ed6:	6839      	ldr	r1, [r7, #0]
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f023 fc29 	bl	802d730 <memcmp>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d101      	bne.n	8009ee8 <style_snapshot_compare+0x1e>
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	e0ec      	b.n	800a0c2 <style_snapshot_compare+0x1f8>

    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f9b3 20b0 	ldrsh.w	r2, [r3, #176]	; 0xb0
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	; 0xb0
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d001      	beq.n	8009efc <style_snapshot_compare+0x32>
 8009ef8:	2302      	movs	r3, #2
 8009efa:	e0e2      	b.n	800a0c2 <style_snapshot_compare+0x1f8>
    if(shot1->pad_bottom != shot2->pad_bottom) return STYLE_COMPARE_DIFF;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f9b3 20b2 	ldrsh.w	r2, [r3, #178]	; 0xb2
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d001      	beq.n	8009f10 <style_snapshot_compare+0x46>
 8009f0c:	2302      	movs	r3, #2
 8009f0e:	e0d8      	b.n	800a0c2 <style_snapshot_compare+0x1f8>
    if(shot1->pad_left != shot2->pad_right) return STYLE_COMPARE_DIFF;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f9b3 20b6 	ldrsh.w	r2, [r3, #182]	; 0xb6
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d001      	beq.n	8009f24 <style_snapshot_compare+0x5a>
 8009f20:	2302      	movs	r3, #2
 8009f22:	e0ce      	b.n	800a0c2 <style_snapshot_compare+0x1f8>
    if(shot1->pad_right != shot2->pad_right) return STYLE_COMPARE_DIFF;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f9b3 20b4 	ldrsh.w	r2, [r3, #180]	; 0xb4
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d001      	beq.n	8009f38 <style_snapshot_compare+0x6e>
 8009f34:	2302      	movs	r3, #2
 8009f36:	e0c4      	b.n	800a0c2 <style_snapshot_compare+0x1f8>
    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f9b3 20b0 	ldrsh.w	r2, [r3, #176]	; 0xb0
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	; 0xb0
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d001      	beq.n	8009f4c <style_snapshot_compare+0x82>
 8009f48:	2302      	movs	r3, #2
 8009f4a:	e0ba      	b.n	800a0c2 <style_snapshot_compare+0x1f8>
    if(shot1->pad_inner != shot2->pad_inner) return STYLE_COMPARE_DIFF;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f9b3 20b8 	ldrsh.w	r2, [r3, #184]	; 0xb8
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d001      	beq.n	8009f60 <style_snapshot_compare+0x96>
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	e0b0      	b.n	800a0c2 <style_snapshot_compare+0x1f8>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f9b3 20ba 	ldrsh.w	r2, [r3, #186]	; 0xba
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d001      	beq.n	8009f74 <style_snapshot_compare+0xaa>
 8009f70:	2302      	movs	r3, #2
 8009f72:	e0a6      	b.n	800a0c2 <style_snapshot_compare+0x1f8>
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f9b3 20bc 	ldrsh.w	r2, [r3, #188]	; 0xbc
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d001      	beq.n	8009f88 <style_snapshot_compare+0xbe>
 8009f84:	2302      	movs	r3, #2
 8009f86:	e09c      	b.n	800a0c2 <style_snapshot_compare+0x1f8>
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f9b3 20be 	ldrsh.w	r2, [r3, #190]	; 0xbe
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d001      	beq.n	8009f9c <style_snapshot_compare+0xd2>
 8009f98:	2302      	movs	r3, #2
 8009f9a:	e092      	b.n	800a0c2 <style_snapshot_compare+0x1f8>
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f9b3 20c0 	ldrsh.w	r2, [r3, #192]	; 0xc0
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d001      	beq.n	8009fb0 <style_snapshot_compare+0xe6>
 8009fac:	2302      	movs	r3, #2
 8009fae:	e088      	b.n	800a0c2 <style_snapshot_compare+0x1f8>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f9b3 20ba 	ldrsh.w	r2, [r3, #186]	; 0xba
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d001      	beq.n	8009fc4 <style_snapshot_compare+0xfa>
 8009fc0:	2302      	movs	r3, #2
 8009fc2:	e07e      	b.n	800a0c2 <style_snapshot_compare+0x1f8>
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f9b3 20c4 	ldrsh.w	r2, [r3, #196]	; 0xc4
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d001      	beq.n	8009fd8 <style_snapshot_compare+0x10e>
 8009fd4:	2302      	movs	r3, #2
 8009fd6:	e074      	b.n	800a0c2 <style_snapshot_compare+0x1f8>
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f9b3 20c6 	ldrsh.w	r2, [r3, #198]	; 0xc6
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d001      	beq.n	8009fec <style_snapshot_compare+0x122>
 8009fe8:	2302      	movs	r3, #2
 8009fea:	e06a      	b.n	800a0c2 <style_snapshot_compare+0x1f8>
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f9b3 20c8 	ldrsh.w	r2, [r3, #200]	; 0xc8
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d001      	beq.n	800a000 <style_snapshot_compare+0x136>
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	e060      	b.n	800a0c2 <style_snapshot_compare+0x1f8>
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f9b3 20ca 	ldrsh.w	r2, [r3, #202]	; 0xca
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d001      	beq.n	800a014 <style_snapshot_compare+0x14a>
 800a010:	2302      	movs	r3, #2
 800a012:	e056      	b.n	800a0c2 <style_snapshot_compare+0x1f8>
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800a020:	429a      	cmp	r2, r3
 800a022:	d001      	beq.n	800a028 <style_snapshot_compare+0x15e>
 800a024:	2302      	movs	r3, #2
 800a026:	e04c      	b.n	800a0c2 <style_snapshot_compare+0x1f8>
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800a034:	429a      	cmp	r2, r3
 800a036:	d001      	beq.n	800a03c <style_snapshot_compare+0x172>
 800a038:	2302      	movs	r3, #2
 800a03a:	e042      	b.n	800a0c2 <style_snapshot_compare+0x1f8>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a044:	429a      	cmp	r2, r3
 800a046:	d001      	beq.n	800a04c <style_snapshot_compare+0x182>
 800a048:	2302      	movs	r3, #2
 800a04a:	e03a      	b.n	800a0c2 <style_snapshot_compare+0x1f8>
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800a058:	429a      	cmp	r2, r3
 800a05a:	d001      	beq.n	800a060 <style_snapshot_compare+0x196>
 800a05c:	2302      	movs	r3, #2
 800a05e:	e030      	b.n	800a0c2 <style_snapshot_compare+0x1f8>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a068:	429a      	cmp	r2, r3
 800a06a:	d001      	beq.n	800a070 <style_snapshot_compare+0x1a6>
 800a06c:	2302      	movs	r3, #2
 800a06e:	e028      	b.n	800a0c2 <style_snapshot_compare+0x1f8>
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d001      	beq.n	800a084 <style_snapshot_compare+0x1ba>
 800a080:	2302      	movs	r3, #2
 800a082:	e01e      	b.n	800a0c2 <style_snapshot_compare+0x1f8>
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a090:	429a      	cmp	r2, r3
 800a092:	d001      	beq.n	800a098 <style_snapshot_compare+0x1ce>
 800a094:	2302      	movs	r3, #2
 800a096:	e014      	b.n	800a0c2 <style_snapshot_compare+0x1f8>
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	; 0x32
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d001      	beq.n	800a0ac <style_snapshot_compare+0x1e2>
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	e00a      	b.n	800a0c2 <style_snapshot_compare+0x1f8>
    if(shot1->rect.shadow_ofs_y != shot2->rect.shadow_ofs_y) return STYLE_COMPARE_DIFF;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d001      	beq.n	800a0c0 <style_snapshot_compare+0x1f6>
 800a0bc:	2302      	movs	r3, #2
 800a0be:	e000      	b.n	800a0c2 <style_snapshot_compare+0x1f8>

    /*If not returned earlier its just a visual difference, a simple redraw is enough*/
    return STYLE_COMPARE_VISUAL_DIFF;
 800a0c0:	2301      	movs	r3, #1
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3708      	adds	r7, #8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <_lv_memcpy_small>:
{
 800a0ca:	b480      	push	{r7}
 800a0cc:	b087      	sub	sp, #28
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	60f8      	str	r0, [r7, #12]
 800a0d2:	60b9      	str	r1, [r7, #8]
 800a0d4:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	613b      	str	r3, [r7, #16]
    while(len) {
 800a0de:	e00c      	b.n	800a0fa <_lv_memcpy_small+0x30>
        *d8 = *s8;
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	781a      	ldrb	r2, [r3, #0]
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	701a      	strb	r2, [r3, #0]
        d8++;
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	617b      	str	r3, [r7, #20]
        s8++;
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	613b      	str	r3, [r7, #16]
        len--;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	607b      	str	r3, [r7, #4]
    while(len) {
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1ef      	bne.n	800a0e0 <_lv_memcpy_small+0x16>
    return dst;
 800a100:	68fb      	ldr	r3, [r7, #12]
}
 800a102:	4618      	mov	r0, r3
 800a104:	371c      	adds	r7, #28
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr

0800a10e <lv_area_copy>:
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b082      	sub	sp, #8
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
 800a116:	6039      	str	r1, [r7, #0]
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
 800a118:	2208      	movs	r2, #8
 800a11a:	6839      	ldr	r1, [r7, #0]
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f7ff ffd4 	bl	800a0ca <_lv_memcpy_small>
}
 800a122:	bf00      	nop
 800a124:	3708      	adds	r7, #8
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <lv_area_get_width>:
{
 800a12a:	b480      	push	{r7}
 800a12c:	b083      	sub	sp, #12
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a138:	b29a      	uxth	r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a140:	b29b      	uxth	r3, r3
 800a142:	1ad3      	subs	r3, r2, r3
 800a144:	b29b      	uxth	r3, r3
 800a146:	3301      	adds	r3, #1
 800a148:	b29b      	uxth	r3, r3
 800a14a:	b21b      	sxth	r3, r3
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <lv_area_get_height>:
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a166:	b29a      	uxth	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a16e:	b29b      	uxth	r3, r3
 800a170:	1ad3      	subs	r3, r2, r3
 800a172:	b29b      	uxth	r3, r3
 800a174:	3301      	adds	r3, #1
 800a176:	b29b      	uxth	r3, r3
 800a178:	b21b      	sxth	r3, r3
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	370c      	adds	r7, #12
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr

0800a186 <lv_obj_get_style_opa_scale>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
 800a186:	b580      	push	{r7, lr}
 800a188:	b082      	sub	sp, #8
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
 800a18e:	460b      	mov	r3, r1
 800a190:	70fb      	strb	r3, [r7, #3]
 800a192:	78fb      	ldrb	r3, [r7, #3]
 800a194:	f248 020c 	movw	r2, #32780	; 0x800c
 800a198:	4619      	mov	r1, r3
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f7fc feab 	bl	8006ef6 <_lv_obj_get_style_opa>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3708      	adds	r7, #8
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <_lv_refr_init>:

/**
 * Initialize the screen refresh subsystem
 */
void _lv_refr_init(void)
{
 800a1aa:	b480      	push	{r7}
 800a1ac:	af00      	add	r7, sp, #0
    /*Nothing to do*/
}
 800a1ae:	bf00      	nop
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <_lv_inv_area>:
 * @param area_p pointer to area which should be invalidated (NULL: delete the invalidated areas)
 * @param disp pointer to display where the area should be invalidated (NULL can be used if there is
 * only one display)
 */
void _lv_inv_area(lv_disp_t * disp, const lv_area_t * area_p)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b088      	sub	sp, #32
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
    if(!disp) disp = lv_disp_get_default();
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d102      	bne.n	800a1ce <_lv_inv_area+0x16>
 800a1c8:	f010 f8d2 	bl	801a370 <lv_disp_get_default>
 800a1cc:	6078      	str	r0, [r7, #4]
    if(!disp) return;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f000 80a2 	beq.w	800a31a <_lv_inv_area+0x162>

    /*Clear the invalidate buffer if the parameter is NULL*/
    if(area_p == NULL) {
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d107      	bne.n	800a1ec <_lv_inv_area+0x34>
        disp->inv_p = 0;
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
 800a1e2:	f36f 0309 	bfc	r3, #0, #10
 800a1e6:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186
        return;
 800a1ea:	e099      	b.n	800a320 <_lv_inv_area+0x168>
    }

    lv_area_t scr_area;
    scr_area.x1 = 0;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	82bb      	strh	r3, [r7, #20]
    scr_area.y1 = 0;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	82fb      	strh	r3, [r7, #22]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f010 f8c7 	bl	801a388 <lv_disp_get_hor_res>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	3b01      	subs	r3, #1
 800a200:	b29b      	uxth	r3, r3
 800a202:	b21b      	sxth	r3, r3
 800a204:	833b      	strh	r3, [r7, #24]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f010 f8e0 	bl	801a3cc <lv_disp_get_ver_res>
 800a20c:	4603      	mov	r3, r0
 800a20e:	b29b      	uxth	r3, r3
 800a210:	3b01      	subs	r3, #1
 800a212:	b29b      	uxth	r3, r3
 800a214:	b21b      	sxth	r3, r3
 800a216:	837b      	strh	r3, [r7, #26]

    lv_area_t com_area;
    bool suc;

    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 800a218:	f107 0214 	add.w	r2, r7, #20
 800a21c:	f107 030c 	add.w	r3, r7, #12
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	4618      	mov	r0, r3
 800a224:	f010 fe30 	bl	801ae88 <_lv_area_intersect>
 800a228:	4603      	mov	r3, r0
 800a22a:	777b      	strb	r3, [r7, #29]

    /*The area is truncated to the screen*/
    if(suc != false) {
 800a22c:	7f7b      	ldrb	r3, [r7, #29]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d076      	beq.n	800a320 <_lv_inv_area+0x168>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	691b      	ldr	r3, [r3, #16]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d006      	beq.n	800a248 <_lv_inv_area+0x90>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	f107 010c 	add.w	r1, r7, #12
 800a244:	4610      	mov	r0, r2
 800a246:	4798      	blx	r3

        /*Save only if this area is not in one of the saved areas*/
        uint16_t i;
        for(i = 0; i < disp->inv_p; i++) {
 800a248:	2300      	movs	r3, #0
 800a24a:	83fb      	strh	r3, [r7, #30]
 800a24c:	e011      	b.n	800a272 <_lv_inv_area+0xba>
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 800a24e:	8bfb      	ldrh	r3, [r7, #30]
 800a250:	330c      	adds	r3, #12
 800a252:	00db      	lsls	r3, r3, #3
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	4413      	add	r3, r2
 800a258:	1d99      	adds	r1, r3, #6
 800a25a:	f107 030c 	add.w	r3, r7, #12
 800a25e:	2200      	movs	r2, #0
 800a260:	4618      	mov	r0, r3
 800a262:	f010 fff5 	bl	801b250 <_lv_area_is_in>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d158      	bne.n	800a31e <_lv_inv_area+0x166>
        for(i = 0; i < disp->inv_p; i++) {
 800a26c:	8bfb      	ldrh	r3, [r7, #30]
 800a26e:	3301      	adds	r3, #1
 800a270:	83fb      	strh	r3, [r7, #30]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a278:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	461a      	mov	r2, r3
 800a280:	8bfb      	ldrh	r3, [r7, #30]
 800a282:	4293      	cmp	r3, r2
 800a284:	d3e3      	bcc.n	800a24e <_lv_inv_area+0x96>
        }

        /*Save the area*/
        if(disp->inv_p < LV_INV_BUF_SIZE) {
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a28c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a290:	b29b      	uxth	r3, r3
 800a292:	2b1f      	cmp	r3, #31
 800a294:	d811      	bhi.n	800a2ba <_lv_inv_area+0x102>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a29c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	330c      	adds	r3, #12
 800a2a4:	00db      	lsls	r3, r3, #3
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	3306      	adds	r3, #6
 800a2ac:	f107 020c 	add.w	r2, r7, #12
 800a2b0:	4611      	mov	r1, r2
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7ff ff2b 	bl	800a10e <lv_area_copy>
 800a2b8:	e017      	b.n	800a2ea <_lv_inv_area+0x132>
        }
        else {   /*If no place for the area add the screen*/
            disp->inv_p = 0;
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
 800a2c0:	f36f 0309 	bfc	r3, #0, #10
 800a2c4:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a2ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	330c      	adds	r3, #12
 800a2d6:	00db      	lsls	r3, r3, #3
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	4413      	add	r3, r2
 800a2dc:	3306      	adds	r3, #6
 800a2de:	f107 0214 	add.w	r2, r7, #20
 800a2e2:	4611      	mov	r1, r2
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7ff ff12 	bl	800a10e <lv_area_copy>
        }
        disp->inv_p++;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a2f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2fc:	b299      	uxth	r1, r3
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
 800a304:	f361 0309 	bfi	r3, r1, #0, #10
 800a308:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a310:	2103      	movs	r1, #3
 800a312:	4618      	mov	r0, r3
 800a314:	f013 faba 	bl	801d88c <lv_task_set_prio>
 800a318:	e002      	b.n	800a320 <_lv_inv_area+0x168>
    if(!disp) return;
 800a31a:	bf00      	nop
 800a31c:	e000      	b.n	800a320 <_lv_inv_area+0x168>
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 800a31e:	bf00      	nop
    }
}
 800a320:	3720      	adds	r7, #32
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
	...

0800a328 <_lv_refr_get_disp_refreshing>:
/**
 * Get the display which is being refreshed
 * @return the display being refreshed
 */
lv_disp_t * _lv_refr_get_disp_refreshing(void)
{
 800a328:	b480      	push	{r7}
 800a32a:	af00      	add	r7, sp, #0
    return disp_refr;
 800a32c:	4b03      	ldr	r3, [pc, #12]	; (800a33c <_lv_refr_get_disp_refreshing+0x14>)
 800a32e:	681b      	ldr	r3, [r3, #0]
}
 800a330:	4618      	mov	r0, r3
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr
 800a33a:	bf00      	nop
 800a33c:	20018b78 	.word	0x20018b78

0800a340 <_lv_disp_refr_task>:
/**
 * Called periodically to handle the refreshing
 * @param task pointer to the task itself
 */
void _lv_disp_refr_task(lv_task_t * task)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b08e      	sub	sp, #56	; 0x38
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
    LV_LOG_TRACE("lv_refr_task: started");

    uint32_t start = lv_tick_get();
 800a348:	f010 fa38 	bl	801a7bc <lv_tick_get>
 800a34c:	62b8      	str	r0, [r7, #40]	; 0x28
    uint32_t elaps = 0;
 800a34e:	2300      	movs	r3, #0
 800a350:	627b      	str	r3, [r7, #36]	; 0x24

    disp_refr = task->user_data;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	4a82      	ldr	r2, [pc, #520]	; (800a560 <_lv_disp_refr_task+0x220>)
 800a358:	6013      	str	r3, [r2, #0]

#if LV_USE_PERF_MONITOR == 0
    /* Ensure the task does not run again automatically.
     * This is done before refreshing in case refreshing invalidates something else.
     */
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
 800a35a:	2100      	movs	r1, #0
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f013 fa95 	bl	801d88c <lv_task_set_prio>
#endif

    /*Do nothing if there is no active screen*/
    if(disp_refr->act_scr == NULL) {
 800a362:	4b7f      	ldr	r3, [pc, #508]	; (800a560 <_lv_disp_refr_task+0x220>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d108      	bne.n	800a37e <_lv_disp_refr_task+0x3e>
        disp_refr->inv_p = 0;
 800a36c:	4b7c      	ldr	r3, [pc, #496]	; (800a560 <_lv_disp_refr_task+0x220>)
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
 800a374:	f36f 0309 	bfc	r3, #0, #10
 800a378:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186
        return;
 800a37c:	e0ed      	b.n	800a55a <_lv_disp_refr_task+0x21a>
    }

    lv_refr_join_area();
 800a37e:	f000 f8f3 	bl	800a568 <lv_refr_join_area>

    lv_refr_areas();
 800a382:	f000 f995 	bl	800a6b0 <lv_refr_areas>

    /*If refresh happened ...*/
    if(disp_refr->inv_p != 0) {
 800a386:	4b76      	ldr	r3, [pc, #472]	; (800a560 <_lv_disp_refr_task+0x220>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a38e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a392:	b29b      	uxth	r3, r3
 800a394:	2b00      	cmp	r3, #0
 800a396:	f000 80dc 	beq.w	800a552 <_lv_disp_refr_task+0x212>
        /* In true double buffered mode copy the refreshed areas to the new VDB to keep it up to date.
         * With set_px_cb we don't know anything about the buffer (even it's size) so skip copying.*/
        if(lv_disp_is_true_double_buf(disp_refr)) {
 800a39a:	4b71      	ldr	r3, [pc, #452]	; (800a560 <_lv_disp_refr_task+0x220>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f010 f917 	bl	801a5d2 <lv_disp_is_true_double_buf>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	f000 80a8 	beq.w	800a4fc <_lv_disp_refr_task+0x1bc>
            if(disp_refr->driver.set_px_cb) {
 800a3ac:	4b6c      	ldr	r3, [pc, #432]	; (800a560 <_lv_disp_refr_task+0x220>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	f040 80a2 	bne.w	800a4fc <_lv_disp_refr_task+0x1bc>
                LV_LOG_WARN("Can't handle 2 screen sized buffers with set_px_cb. Display is not refreshed.");
            }
            else {
                lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800a3b8:	4b69      	ldr	r3, [pc, #420]	; (800a560 <_lv_disp_refr_task+0x220>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f010 f8a3 	bl	801a508 <lv_disp_get_buf>
 800a3c2:	6238      	str	r0, [r7, #32]

                /*Flush the content of the VDB*/
                lv_refr_vdb_flush();
 800a3c4:	f000 fd9e 	bl	800af04 <lv_refr_vdb_flush>

                /* With true double buffering the flushing should be only the address change of the
                 * current frame buffer. Wait until the address change is ready and copy the changed
                 * content to the other frame buffer (new active VDB) to keep the buffers synchronized*/
                while(vdb->flushing);
 800a3c8:	bf00      	nop
 800a3ca:	6a3b      	ldr	r3, [r7, #32]
 800a3cc:	699b      	ldr	r3, [r3, #24]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1fb      	bne.n	800a3ca <_lv_disp_refr_task+0x8a>

                lv_color_t * copy_buf = NULL;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	61fb      	str	r3, [r7, #28]
#if LV_USE_GPU_STM32_DMA2D
                LV_UNUSED(copy_buf);
#else
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
 800a3d6:	4b62      	ldr	r3, [pc, #392]	; (800a560 <_lv_disp_refr_task+0x220>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f012 fa99 	bl	801c918 <_lv_mem_buf_get>
 800a3e6:	61f8      	str	r0, [r7, #28]
#endif

                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 800a3e8:	6a3b      	ldr	r3, [r7, #32]
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	61bb      	str	r3, [r7, #24]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 800a3ee:	6a3b      	ldr	r3, [r7, #32]
 800a3f0:	689a      	ldr	r2, [r3, #8]
 800a3f2:	6a3b      	ldr	r3, [r7, #32]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d102      	bne.n	800a400 <_lv_disp_refr_task+0xc0>
 800a3fa:	6a3b      	ldr	r3, [r7, #32]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	e001      	b.n	800a404 <_lv_disp_refr_task+0xc4>
 800a400:	6a3b      	ldr	r3, [r7, #32]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	617b      	str	r3, [r7, #20]

                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 800a406:	4b56      	ldr	r3, [pc, #344]	; (800a560 <_lv_disp_refr_task+0x220>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f00f ffbc 	bl	801a388 <lv_disp_get_hor_res>
 800a410:	4603      	mov	r3, r0
 800a412:	827b      	strh	r3, [r7, #18]
                uint16_t a;
                for(a = 0; a < disp_refr->inv_p; a++) {
 800a414:	2300      	movs	r3, #0
 800a416:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a418:	e05f      	b.n	800a4da <_lv_disp_refr_task+0x19a>
                    if(disp_refr->inv_area_joined[a] == 0) {
 800a41a:	4b51      	ldr	r3, [pc, #324]	; (800a560 <_lv_disp_refr_task+0x220>)
 800a41c:	681a      	ldr	r2, [r3, #0]
 800a41e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a420:	4413      	add	r3, r2
 800a422:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800a426:	2b00      	cmp	r3, #0
 800a428:	d154      	bne.n	800a4d4 <_lv_disp_refr_task+0x194>
                        uint32_t start_offs =
                            (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 800a42a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800a42e:	4b4c      	ldr	r3, [pc, #304]	; (800a560 <_lv_disp_refr_task+0x220>)
 800a430:	6819      	ldr	r1, [r3, #0]
 800a432:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a434:	330c      	adds	r3, #12
 800a436:	00db      	lsls	r3, r3, #3
 800a438:	440b      	add	r3, r1
 800a43a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a43e:	fb03 f202 	mul.w	r2, r3, r2
 800a442:	4b47      	ldr	r3, [pc, #284]	; (800a560 <_lv_disp_refr_task+0x220>)
 800a444:	6819      	ldr	r1, [r3, #0]
 800a446:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a448:	330c      	adds	r3, #12
 800a44a:	00db      	lsls	r3, r3, #3
 800a44c:	440b      	add	r3, r1
 800a44e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a452:	4413      	add	r3, r2
                        uint32_t start_offs =
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	633b      	str	r3, [r7, #48]	; 0x30
                                                lv_area_get_width(&disp_refr->inv_areas[a]),
                                                lv_area_get_height(&disp_refr->inv_areas[a]));
#else

                        lv_coord_t y;
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 800a458:	4b41      	ldr	r3, [pc, #260]	; (800a560 <_lv_disp_refr_task+0x220>)
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a45e:	330c      	adds	r3, #12
 800a460:	00db      	lsls	r3, r3, #3
 800a462:	4413      	add	r3, r2
 800a464:	3306      	adds	r3, #6
 800a466:	4618      	mov	r0, r3
 800a468:	f7ff fe5f 	bl	800a12a <lv_area_get_width>
 800a46c:	4603      	mov	r3, r0
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	60fb      	str	r3, [r7, #12]

                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 800a472:	4b3b      	ldr	r3, [pc, #236]	; (800a560 <_lv_disp_refr_task+0x220>)
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a478:	330c      	adds	r3, #12
 800a47a:	00db      	lsls	r3, r3, #3
 800a47c:	4413      	add	r3, r2
 800a47e:	891b      	ldrh	r3, [r3, #8]
 800a480:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a482:	e01b      	b.n	800a4bc <_lv_disp_refr_task+0x17c>
                            /* The frame buffer is probably in an external RAM where sequential access is much faster.
                             * So first copy a line into a buffer and write it back the ext. RAM */
                            _lv_memcpy(copy_buf, buf_ina + start_offs, line_length);
 800a484:	697a      	ldr	r2, [r7, #20]
 800a486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a488:	4413      	add	r3, r2
 800a48a:	68fa      	ldr	r2, [r7, #12]
 800a48c:	4619      	mov	r1, r3
 800a48e:	69f8      	ldr	r0, [r7, #28]
 800a490:	f012 fba6 	bl	801cbe0 <_lv_memcpy>
                            _lv_memcpy(buf_act + start_offs, copy_buf, line_length);
 800a494:	69ba      	ldr	r2, [r7, #24]
 800a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a498:	4413      	add	r3, r2
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	69f9      	ldr	r1, [r7, #28]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f012 fb9e 	bl	801cbe0 <_lv_memcpy>
                            start_offs += hres * sizeof(lv_color_t);
 800a4a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4ac:	4413      	add	r3, r2
 800a4ae:	633b      	str	r3, [r7, #48]	; 0x30
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 800a4b0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a4bc:	4b28      	ldr	r3, [pc, #160]	; (800a560 <_lv_disp_refr_task+0x220>)
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a4c2:	330c      	adds	r3, #12
 800a4c4:	00db      	lsls	r3, r3, #3
 800a4c6:	4413      	add	r3, r2
 800a4c8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800a4cc:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	ddd7      	ble.n	800a484 <_lv_disp_refr_task+0x144>
                for(a = 0; a < disp_refr->inv_p; a++) {
 800a4d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a4da:	4b21      	ldr	r3, [pc, #132]	; (800a560 <_lv_disp_refr_task+0x220>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a4e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d394      	bcc.n	800a41a <_lv_disp_refr_task+0xda>
                        }
#endif
                    }
                }

                if(copy_buf) _lv_mem_buf_release(copy_buf);
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d002      	beq.n	800a4fc <_lv_disp_refr_task+0x1bc>
 800a4f6:	69f8      	ldr	r0, [r7, #28]
 800a4f8:	f012 faec 	bl	801cad4 <_lv_mem_buf_release>
            }
        } /*End of true double buffer handling*/

        /*Clean up*/
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 800a4fc:	4b18      	ldr	r3, [pc, #96]	; (800a560 <_lv_disp_refr_task+0x220>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	3366      	adds	r3, #102	; 0x66
 800a502:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a506:	4618      	mov	r0, r3
 800a508:	f012 fe0f 	bl	801d12a <_lv_memset_00>
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 800a50c:	4b14      	ldr	r3, [pc, #80]	; (800a560 <_lv_disp_refr_task+0x220>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a514:	2120      	movs	r1, #32
 800a516:	4618      	mov	r0, r3
 800a518:	f012 fe07 	bl	801d12a <_lv_memset_00>
        disp_refr->inv_p = 0;
 800a51c:	4b10      	ldr	r3, [pc, #64]	; (800a560 <_lv_disp_refr_task+0x220>)
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
 800a524:	f36f 0309 	bfc	r3, #0, #10
 800a528:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186

        elaps = lv_tick_elaps(start);
 800a52c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a52e:	f010 f95f 	bl	801a7f0 <lv_tick_elaps>
 800a532:	6278      	str	r0, [r7, #36]	; 0x24
        /*Call monitor cb if present*/
        if(disp_refr->driver.monitor_cb) {
 800a534:	4b0a      	ldr	r3, [pc, #40]	; (800a560 <_lv_disp_refr_task+0x220>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	699b      	ldr	r3, [r3, #24]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d009      	beq.n	800a552 <_lv_disp_refr_task+0x212>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
 800a53e:	4b08      	ldr	r3, [pc, #32]	; (800a560 <_lv_disp_refr_task+0x220>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	699b      	ldr	r3, [r3, #24]
 800a544:	4a06      	ldr	r2, [pc, #24]	; (800a560 <_lv_disp_refr_task+0x220>)
 800a546:	6812      	ldr	r2, [r2, #0]
 800a548:	4610      	mov	r0, r2
 800a54a:	4a06      	ldr	r2, [pc, #24]	; (800a564 <_lv_disp_refr_task+0x224>)
 800a54c:	6812      	ldr	r2, [r2, #0]
 800a54e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a550:	4798      	blx	r3
        }
    }

    _lv_mem_buf_free_all();
 800a552:	f012 faff 	bl	801cb54 <_lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 800a556:	f00f f8a9 	bl	80196ac <_lv_font_clean_up_fmt_txt>
        lv_obj_align(perf_label, NULL, LV_ALIGN_IN_BOTTOM_RIGHT, 0, 0);
    }
#endif

    LV_LOG_TRACE("lv_refr_task: ready");
}
 800a55a:	3738      	adds	r7, #56	; 0x38
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	20018b78 	.word	0x20018b78
 800a564:	20018b74 	.word	0x20018b74

0800a568 <lv_refr_join_area>:

/**
 * Join the areas which has got common parts
 */
static void lv_refr_join_area(void)
{
 800a568:	b5b0      	push	{r4, r5, r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
    uint32_t join_from;
    uint32_t join_in;
    lv_area_t joined_area;
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800a56e:	2300      	movs	r3, #0
 800a570:	60bb      	str	r3, [r7, #8]
 800a572:	e08a      	b.n	800a68a <lv_refr_join_area+0x122>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800a574:	4b4d      	ldr	r3, [pc, #308]	; (800a6ac <lv_refr_join_area+0x144>)
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	4413      	add	r3, r2
 800a57c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d17d      	bne.n	800a682 <lv_refr_join_area+0x11a>

        /*Check all areas to join them in 'join_in'*/
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800a586:	2300      	movs	r3, #0
 800a588:	60fb      	str	r3, [r7, #12]
 800a58a:	e06e      	b.n	800a66a <lv_refr_join_area+0x102>
            /*Handle only unjoined areas and ignore itself*/
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 800a58c:	4b47      	ldr	r3, [pc, #284]	; (800a6ac <lv_refr_join_area+0x144>)
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	4413      	add	r3, r2
 800a594:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d15f      	bne.n	800a65e <lv_refr_join_area+0xf6>
 800a59e:	68ba      	ldr	r2, [r7, #8]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d05b      	beq.n	800a65e <lv_refr_join_area+0xf6>
                continue;
            }

            /*Check if the areas are on each other*/
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 800a5a6:	4b41      	ldr	r3, [pc, #260]	; (800a6ac <lv_refr_join_area+0x144>)
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	330c      	adds	r3, #12
 800a5ae:	00db      	lsls	r3, r3, #3
 800a5b0:	4413      	add	r3, r2
 800a5b2:	1d98      	adds	r0, r3, #6
 800a5b4:	4b3d      	ldr	r3, [pc, #244]	; (800a6ac <lv_refr_join_area+0x144>)
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	330c      	adds	r3, #12
 800a5bc:	00db      	lsls	r3, r3, #3
 800a5be:	4413      	add	r3, r2
 800a5c0:	3306      	adds	r3, #6
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	f010 fe16 	bl	801b1f4 <_lv_area_is_on>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	f083 0301 	eor.w	r3, r3, #1
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d146      	bne.n	800a662 <lv_refr_join_area+0xfa>
                continue;
            }

            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 800a5d4:	4b35      	ldr	r3, [pc, #212]	; (800a6ac <lv_refr_join_area+0x144>)
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	330c      	adds	r3, #12
 800a5dc:	00db      	lsls	r3, r3, #3
 800a5de:	4413      	add	r3, r2
 800a5e0:	1d99      	adds	r1, r3, #6
 800a5e2:	4b32      	ldr	r3, [pc, #200]	; (800a6ac <lv_refr_join_area+0x144>)
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	330c      	adds	r3, #12
 800a5ea:	00db      	lsls	r3, r3, #3
 800a5ec:	4413      	add	r3, r2
 800a5ee:	1d9a      	adds	r2, r3, #6
 800a5f0:	463b      	mov	r3, r7
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f010 fc99 	bl	801af2a <_lv_area_join>

            /*Join two area only if the joined area size is smaller*/
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800a5f8:	463b      	mov	r3, r7
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f010 fc23 	bl	801ae46 <lv_area_get_size>
 800a600:	4604      	mov	r4, r0
 800a602:	4b2a      	ldr	r3, [pc, #168]	; (800a6ac <lv_refr_join_area+0x144>)
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	330c      	adds	r3, #12
 800a60a:	00db      	lsls	r3, r3, #3
 800a60c:	4413      	add	r3, r2
 800a60e:	3306      	adds	r3, #6
 800a610:	4618      	mov	r0, r3
 800a612:	f010 fc18 	bl	801ae46 <lv_area_get_size>
 800a616:	4605      	mov	r5, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 800a618:	4b24      	ldr	r3, [pc, #144]	; (800a6ac <lv_refr_join_area+0x144>)
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	330c      	adds	r3, #12
 800a620:	00db      	lsls	r3, r3, #3
 800a622:	4413      	add	r3, r2
 800a624:	3306      	adds	r3, #6
 800a626:	4618      	mov	r0, r3
 800a628:	f010 fc0d 	bl	801ae46 <lv_area_get_size>
 800a62c:	4603      	mov	r3, r0
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800a62e:	442b      	add	r3, r5
 800a630:	429c      	cmp	r4, r3
 800a632:	d217      	bcs.n	800a664 <lv_refr_join_area+0xfc>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 800a634:	4b1d      	ldr	r3, [pc, #116]	; (800a6ac <lv_refr_join_area+0x144>)
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	330c      	adds	r3, #12
 800a63c:	00db      	lsls	r3, r3, #3
 800a63e:	4413      	add	r3, r2
 800a640:	3306      	adds	r3, #6
 800a642:	463a      	mov	r2, r7
 800a644:	4611      	mov	r1, r2
 800a646:	4618      	mov	r0, r3
 800a648:	f7ff fd61 	bl	800a10e <lv_area_copy>

                /*Mark 'join_form' is joined into 'join_in'*/
                disp_refr->inv_area_joined[join_from] = 1;
 800a64c:	4b17      	ldr	r3, [pc, #92]	; (800a6ac <lv_refr_join_area+0x144>)
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	4413      	add	r3, r2
 800a654:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a658:	2201      	movs	r2, #1
 800a65a:	701a      	strb	r2, [r3, #0]
 800a65c:	e002      	b.n	800a664 <lv_refr_join_area+0xfc>
                continue;
 800a65e:	bf00      	nop
 800a660:	e000      	b.n	800a664 <lv_refr_join_area+0xfc>
                continue;
 800a662:	bf00      	nop
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	3301      	adds	r3, #1
 800a668:	60fb      	str	r3, [r7, #12]
 800a66a:	4b10      	ldr	r3, [pc, #64]	; (800a6ac <lv_refr_join_area+0x144>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a672:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a676:	b29b      	uxth	r3, r3
 800a678:	461a      	mov	r2, r3
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d385      	bcc.n	800a58c <lv_refr_join_area+0x24>
 800a680:	e000      	b.n	800a684 <lv_refr_join_area+0x11c>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800a682:	bf00      	nop
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	3301      	adds	r3, #1
 800a688:	60bb      	str	r3, [r7, #8]
 800a68a:	4b08      	ldr	r3, [pc, #32]	; (800a6ac <lv_refr_join_area+0x144>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a692:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a696:	b29b      	uxth	r3, r3
 800a698:	461a      	mov	r2, r3
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	4293      	cmp	r3, r2
 800a69e:	f4ff af69 	bcc.w	800a574 <lv_refr_join_area+0xc>
            }
        }
    }
}
 800a6a2:	bf00      	nop
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bdb0      	pop	{r4, r5, r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	20018b78 	.word	0x20018b78

0800a6b0 <lv_refr_areas>:

/**
 * Refresh the joined areas
 */
static void lv_refr_areas(void)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
    px_num = 0;
 800a6b6:	4b45      	ldr	r3, [pc, #276]	; (800a7cc <lv_refr_areas+0x11c>)
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	601a      	str	r2, [r3, #0]

    if(disp_refr->inv_p == 0) return;
 800a6bc:	4b44      	ldr	r3, [pc, #272]	; (800a7d0 <lv_refr_areas+0x120>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a6c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d07a      	beq.n	800a7c4 <lv_refr_areas+0x114>

    /*Find the last area which will be drawn*/
    int32_t i;
    int32_t last_i = 0;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	603b      	str	r3, [r7, #0]
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800a6d2:	4b3f      	ldr	r3, [pc, #252]	; (800a7d0 <lv_refr_areas+0x120>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a6da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	3b01      	subs	r3, #1
 800a6e2:	607b      	str	r3, [r7, #4]
 800a6e4:	e00e      	b.n	800a704 <lv_refr_areas+0x54>
        if(disp_refr->inv_area_joined[i] == 0) {
 800a6e6:	4b3a      	ldr	r3, [pc, #232]	; (800a7d0 <lv_refr_areas+0x120>)
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d102      	bne.n	800a6fe <lv_refr_areas+0x4e>
            last_i = i;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	603b      	str	r3, [r7, #0]
            break;
 800a6fc:	e005      	b.n	800a70a <lv_refr_areas+0x5a>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	3b01      	subs	r3, #1
 800a702:	607b      	str	r3, [r7, #4]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	daed      	bge.n	800a6e6 <lv_refr_areas+0x36>
        }
    }

    disp_refr->driver.buffer->last_area = 0;
 800a70a:	4b31      	ldr	r3, [pc, #196]	; (800a7d0 <lv_refr_areas+0x120>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	685a      	ldr	r2, [r3, #4]
 800a710:	f892 3020 	ldrb.w	r3, [r2, #32]
 800a714:	f36f 0300 	bfc	r3, #0, #1
 800a718:	f882 3020 	strb.w	r3, [r2, #32]
    disp_refr->driver.buffer->last_part = 0;
 800a71c:	4b2c      	ldr	r3, [pc, #176]	; (800a7d0 <lv_refr_areas+0x120>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	685a      	ldr	r2, [r3, #4]
 800a722:	f892 3020 	ldrb.w	r3, [r2, #32]
 800a726:	f36f 0341 	bfc	r3, #1, #1
 800a72a:	f882 3020 	strb.w	r3, [r2, #32]

    for(i = 0; i < disp_refr->inv_p; i++) {
 800a72e:	2300      	movs	r3, #0
 800a730:	607b      	str	r3, [r7, #4]
 800a732:	e03b      	b.n	800a7ac <lv_refr_areas+0xfc>
        /*Refresh the unjoined areas*/
        if(disp_refr->inv_area_joined[i] == 0) {
 800a734:	4b26      	ldr	r3, [pc, #152]	; (800a7d0 <lv_refr_areas+0x120>)
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4413      	add	r3, r2
 800a73c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d12f      	bne.n	800a7a6 <lv_refr_areas+0xf6>

            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d108      	bne.n	800a760 <lv_refr_areas+0xb0>
 800a74e:	4b20      	ldr	r3, [pc, #128]	; (800a7d0 <lv_refr_areas+0x120>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	685a      	ldr	r2, [r3, #4]
 800a754:	f892 3020 	ldrb.w	r3, [r2, #32]
 800a758:	f043 0301 	orr.w	r3, r3, #1
 800a75c:	f882 3020 	strb.w	r3, [r2, #32]
            disp_refr->driver.buffer->last_part = 0;
 800a760:	4b1b      	ldr	r3, [pc, #108]	; (800a7d0 <lv_refr_areas+0x120>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	685a      	ldr	r2, [r3, #4]
 800a766:	f892 3020 	ldrb.w	r3, [r2, #32]
 800a76a:	f36f 0341 	bfc	r3, #1, #1
 800a76e:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area(&disp_refr->inv_areas[i]);
 800a772:	4b17      	ldr	r3, [pc, #92]	; (800a7d0 <lv_refr_areas+0x120>)
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	330c      	adds	r3, #12
 800a77a:	00db      	lsls	r3, r3, #3
 800a77c:	4413      	add	r3, r2
 800a77e:	3306      	adds	r3, #6
 800a780:	4618      	mov	r0, r3
 800a782:	f000 f827 	bl	800a7d4 <lv_refr_area>

            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800a786:	4b12      	ldr	r3, [pc, #72]	; (800a7d0 <lv_refr_areas+0x120>)
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	330c      	adds	r3, #12
 800a78e:	00db      	lsls	r3, r3, #3
 800a790:	4413      	add	r3, r2
 800a792:	3306      	adds	r3, #6
 800a794:	4618      	mov	r0, r3
 800a796:	f010 fb56 	bl	801ae46 <lv_area_get_size>
 800a79a:	4602      	mov	r2, r0
 800a79c:	4b0b      	ldr	r3, [pc, #44]	; (800a7cc <lv_refr_areas+0x11c>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	4a0a      	ldr	r2, [pc, #40]	; (800a7cc <lv_refr_areas+0x11c>)
 800a7a4:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	607b      	str	r3, [r7, #4]
 800a7ac:	4b08      	ldr	r3, [pc, #32]	; (800a7d0 <lv_refr_areas+0x120>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 800a7b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	dbb8      	blt.n	800a734 <lv_refr_areas+0x84>
 800a7c2:	e000      	b.n	800a7c6 <lv_refr_areas+0x116>
    if(disp_refr->inv_p == 0) return;
 800a7c4:	bf00      	nop
        }
    }
}
 800a7c6:	3708      	adds	r7, #8
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	20018b74 	.word	0x20018b74
 800a7d0:	20018b78 	.word	0x20018b78

0800a7d4 <lv_refr_area>:
/**
 * Refresh an area if there is Virtual Display Buffer
 * @param area_p pointer to an area to refresh
 */
static void lv_refr_area(const lv_area_t * area_p)
{
 800a7d4:	b590      	push	{r4, r7, lr}
 800a7d6:	b08d      	sub	sp, #52	; 0x34
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
    /*True double buffering: there are two screen sized buffers. Just redraw directly into a
     * buffer*/
    if(lv_disp_is_true_double_buf(disp_refr)) {
 800a7dc:	4b8e      	ldr	r3, [pc, #568]	; (800aa18 <lv_refr_area+0x244>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f00f fef6 	bl	801a5d2 <lv_disp_is_true_double_buf>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d030      	beq.n	800a84e <lv_refr_area+0x7a>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800a7ec:	4b8a      	ldr	r3, [pc, #552]	; (800aa18 <lv_refr_area+0x244>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f00f fe89 	bl	801a508 <lv_disp_get_buf>
 800a7f6:	6178      	str	r0, [r7, #20]
        vdb->area.x1        = 0;
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	821a      	strh	r2, [r3, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 800a7fe:	4b86      	ldr	r3, [pc, #536]	; (800aa18 <lv_refr_area+0x244>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4618      	mov	r0, r3
 800a804:	f00f fdc0 	bl	801a388 <lv_disp_get_hor_res>
 800a808:	4603      	mov	r3, r0
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	3b01      	subs	r3, #1
 800a80e:	b29b      	uxth	r3, r3
 800a810:	b21a      	sxth	r2, r3
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	829a      	strh	r2, [r3, #20]
        vdb->area.y1        = 0;
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	2200      	movs	r2, #0
 800a81a:	825a      	strh	r2, [r3, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 800a81c:	4b7e      	ldr	r3, [pc, #504]	; (800aa18 <lv_refr_area+0x244>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4618      	mov	r0, r3
 800a822:	f00f fdd3 	bl	801a3cc <lv_disp_get_ver_res>
 800a826:	4603      	mov	r3, r0
 800a828:	b29b      	uxth	r3, r3
 800a82a:	3b01      	subs	r3, #1
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	b21a      	sxth	r2, r3
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	82da      	strh	r2, [r3, #22]
        disp_refr->driver.buffer->last_part = 1;
 800a834:	4b78      	ldr	r3, [pc, #480]	; (800aa18 <lv_refr_area+0x244>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	685a      	ldr	r2, [r3, #4]
 800a83a:	f892 3020 	ldrb.w	r3, [r2, #32]
 800a83e:	f043 0302 	orr.w	r3, r3, #2
 800a842:	f882 3020 	strb.w	r3, [r2, #32]
        lv_refr_area_part(area_p);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f8e8 	bl	800aa1c <lv_refr_area_part>
 800a84c:	e0e1      	b.n	800aa12 <lv_refr_area+0x23e>
    }
    /*The buffer is smaller: refresh the area in parts*/
    else {
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800a84e:	4b72      	ldr	r3, [pc, #456]	; (800aa18 <lv_refr_area+0x244>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4618      	mov	r0, r3
 800a854:	f00f fe58 	bl	801a508 <lv_disp_get_buf>
 800a858:	6238      	str	r0, [r7, #32]
        /*Calculate the max row num*/
        lv_coord_t w = lv_area_get_width(area_p);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f7ff fc65 	bl	800a12a <lv_area_get_width>
 800a860:	4603      	mov	r3, r0
 800a862:	83fb      	strh	r3, [r7, #30]
        lv_coord_t h = lv_area_get_height(area_p);
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f7ff fc77 	bl	800a158 <lv_area_get_height>
 800a86a:	4603      	mov	r3, r0
 800a86c:	83bb      	strh	r3, [r7, #28]
        lv_coord_t y2 =
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800a874:	4b68      	ldr	r3, [pc, #416]	; (800aa18 <lv_refr_area+0x244>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4618      	mov	r0, r3
 800a87a:	f00f fda7 	bl	801a3cc <lv_disp_get_ver_res>
 800a87e:	4603      	mov	r3, r0
        lv_coord_t y2 =
 800a880:	429c      	cmp	r4, r3
 800a882:	db0a      	blt.n	800a89a <lv_refr_area+0xc6>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800a884:	4b64      	ldr	r3, [pc, #400]	; (800aa18 <lv_refr_area+0x244>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4618      	mov	r0, r3
 800a88a:	f00f fd9f 	bl	801a3cc <lv_disp_get_ver_res>
 800a88e:	4603      	mov	r3, r0
 800a890:	b29b      	uxth	r3, r3
 800a892:	3b01      	subs	r3, #1
 800a894:	b29b      	uxth	r3, r3
        lv_coord_t y2 =
 800a896:	b21b      	sxth	r3, r3
 800a898:	e002      	b.n	800a8a0 <lv_refr_area+0xcc>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a8a0:	837b      	strh	r3, [r7, #26]

        int32_t max_row = (uint32_t)vdb->size / w;
 800a8a2:	6a3b      	ldr	r3, [r7, #32]
 800a8a4:	68da      	ldr	r2, [r3, #12]
 800a8a6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a8aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ae:	62fb      	str	r3, [r7, #44]	; 0x2c

        if(max_row > h) max_row = h;
 800a8b0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a8b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	dd02      	ble.n	800a8c0 <lv_refr_area+0xec>
 800a8ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a8be:	62fb      	str	r3, [r7, #44]	; 0x2c

        /*Round down the lines of VDB if rounding is added*/
        if(disp_refr->driver.rounder_cb) {
 800a8c0:	4b55      	ldr	r3, [pc, #340]	; (800aa18 <lv_refr_area+0x244>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	691b      	ldr	r3, [r3, #16]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d034      	beq.n	800a934 <lv_refr_area+0x160>
            lv_area_t tmp;
            tmp.x1 = 0;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	81bb      	strh	r3, [r7, #12]
            tmp.x2 = 0;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	823b      	strh	r3, [r7, #16]
            tmp.y1 = 0;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	81fb      	strh	r3, [r7, #14]

            lv_coord_t h_tmp = max_row;
 800a8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d8:	857b      	strh	r3, [r7, #42]	; 0x2a
            do {
                tmp.y2 = h_tmp - 1;
 800a8da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	b21b      	sxth	r3, r3
 800a8e2:	827b      	strh	r3, [r7, #18]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 800a8e4:	4b4c      	ldr	r3, [pc, #304]	; (800aa18 <lv_refr_area+0x244>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	4a4b      	ldr	r2, [pc, #300]	; (800aa18 <lv_refr_area+0x244>)
 800a8ec:	6812      	ldr	r2, [r2, #0]
 800a8ee:	4610      	mov	r0, r2
 800a8f0:	f107 020c 	add.w	r2, r7, #12
 800a8f4:	4611      	mov	r1, r2
 800a8f6:	4798      	blx	r3

                /*If this height fits into `max_row` then fine*/
                if(lv_area_get_height(&tmp) <= max_row) break;
 800a8f8:	f107 030c 	add.w	r3, r7, #12
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7ff fc2b 	bl	800a158 <lv_area_get_height>
 800a902:	4603      	mov	r3, r0
 800a904:	461a      	mov	r2, r3
 800a906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a908:	4293      	cmp	r3, r2
 800a90a:	da0a      	bge.n	800a922 <lv_refr_area+0x14e>

                /*Decrement the height of the area until it fits into `max_row` after rounding*/
                h_tmp--;
 800a90c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800a910:	b29b      	uxth	r3, r3
 800a912:	3b01      	subs	r3, #1
 800a914:	b29b      	uxth	r3, r3
 800a916:	857b      	strh	r3, [r7, #42]	; 0x2a
            } while(h_tmp > 0);
 800a918:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	dcdc      	bgt.n	800a8da <lv_refr_area+0x106>
 800a920:	e000      	b.n	800a924 <lv_refr_area+0x150>
                if(lv_area_get_height(&tmp) <= max_row) break;
 800a922:	bf00      	nop

            if(h_tmp <= 0) {
 800a924:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800a928:	2b00      	cmp	r3, #0
 800a92a:	dd71      	ble.n	800aa10 <lv_refr_area+0x23c>
                LV_LOG_WARN("Can't set VDB height using the round function. (Wrong round_cb or to "
                            "small VDB)");
                return;
            }
            else {
                max_row = tmp.y2 + 1;
 800a92c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a930:	3301      	adds	r3, #1
 800a932:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        /*Always use the full row*/
        lv_coord_t row;
        lv_coord_t row_last = 0;
 800a934:	2300      	movs	r3, #0
 800a936:	84fb      	strh	r3, [r7, #38]	; 0x26
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	885b      	ldrh	r3, [r3, #2]
 800a93c:	853b      	strh	r3, [r7, #40]	; 0x28
 800a93e:	e03b      	b.n	800a9b8 <lv_refr_area+0x1e4>
            /*Calc. the next y coordinates of VDB*/
            vdb->area.x1 = area_p->x1;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a946:	6a3b      	ldr	r3, [r7, #32]
 800a948:	821a      	strh	r2, [r3, #16]
            vdb->area.x2 = area_p->x2;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800a950:	6a3b      	ldr	r3, [r7, #32]
 800a952:	829a      	strh	r2, [r3, #20]
            vdb->area.y1 = row;
 800a954:	6a3b      	ldr	r3, [r7, #32]
 800a956:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a958:	825a      	strh	r2, [r3, #18]
            vdb->area.y2 = row + max_row - 1;
 800a95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95c:	b29a      	uxth	r2, r3
 800a95e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a960:	4413      	add	r3, r2
 800a962:	b29b      	uxth	r3, r3
 800a964:	3b01      	subs	r3, #1
 800a966:	b29b      	uxth	r3, r3
 800a968:	b21a      	sxth	r2, r3
 800a96a:	6a3b      	ldr	r3, [r7, #32]
 800a96c:	82da      	strh	r2, [r3, #22]
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
 800a96e:	6a3b      	ldr	r3, [r7, #32]
 800a970:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a974:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800a978:	429a      	cmp	r2, r3
 800a97a:	da02      	bge.n	800a982 <lv_refr_area+0x1ae>
 800a97c:	6a3b      	ldr	r3, [r7, #32]
 800a97e:	8b7a      	ldrh	r2, [r7, #26]
 800a980:	82da      	strh	r2, [r3, #22]
            row_last = vdb->area.y2;
 800a982:	6a3b      	ldr	r3, [r7, #32]
 800a984:	8adb      	ldrh	r3, [r3, #22]
 800a986:	84fb      	strh	r3, [r7, #38]	; 0x26
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
 800a988:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800a98c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a990:	429a      	cmp	r2, r3
 800a992:	d108      	bne.n	800a9a6 <lv_refr_area+0x1d2>
 800a994:	4b20      	ldr	r3, [pc, #128]	; (800aa18 <lv_refr_area+0x244>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	685a      	ldr	r2, [r3, #4]
 800a99a:	f892 3020 	ldrb.w	r3, [r2, #32]
 800a99e:	f043 0302 	orr.w	r3, r3, #2
 800a9a2:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f838 	bl	800aa1c <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800a9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ae:	b29a      	uxth	r2, r3
 800a9b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a9b2:	4413      	add	r3, r2
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	853b      	strh	r3, [r7, #40]	; 0x28
 800a9b8:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800a9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9be:	4413      	add	r3, r2
 800a9c0:	1e5a      	subs	r2, r3, #1
 800a9c2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	ddba      	ble.n	800a940 <lv_refr_area+0x16c>
        }

        /*If the last y coordinates are not handled yet ...*/
        if(y2 != row_last) {
 800a9ca:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800a9ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d01d      	beq.n	800aa12 <lv_refr_area+0x23e>
            /*Calc. the next y coordinates of VDB*/
            vdb->area.x1 = area_p->x1;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a9dc:	6a3b      	ldr	r3, [r7, #32]
 800a9de:	821a      	strh	r2, [r3, #16]
            vdb->area.x2 = area_p->x2;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800a9e6:	6a3b      	ldr	r3, [r7, #32]
 800a9e8:	829a      	strh	r2, [r3, #20]
            vdb->area.y1 = row;
 800a9ea:	6a3b      	ldr	r3, [r7, #32]
 800a9ec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a9ee:	825a      	strh	r2, [r3, #18]
            vdb->area.y2 = y2;
 800a9f0:	6a3b      	ldr	r3, [r7, #32]
 800a9f2:	8b7a      	ldrh	r2, [r7, #26]
 800a9f4:	82da      	strh	r2, [r3, #22]

            disp_refr->driver.buffer->last_part = 1;
 800a9f6:	4b08      	ldr	r3, [pc, #32]	; (800aa18 <lv_refr_area+0x244>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	685a      	ldr	r2, [r3, #4]
 800a9fc:	f892 3020 	ldrb.w	r3, [r2, #32]
 800aa00:	f043 0302 	orr.w	r3, r3, #2
 800aa04:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 f807 	bl	800aa1c <lv_refr_area_part>
 800aa0e:	e000      	b.n	800aa12 <lv_refr_area+0x23e>
                return;
 800aa10:	bf00      	nop
        }
    }
}
 800aa12:	3734      	adds	r7, #52	; 0x34
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd90      	pop	{r4, r7, pc}
 800aa18:	20018b78 	.word	0x20018b78

0800aa1c <lv_refr_area_part>:
/**
 * Refresh a part of an area which is on the actual Virtual Display Buffer
 * @param area_p pointer to an area to refresh
 */
static void lv_refr_area_part(const lv_area_t * area_p)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b0ac      	sub	sp, #176	; 0xb0
 800aa20:	af02      	add	r7, sp, #8
 800aa22:	6078      	str	r0, [r7, #4]
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800aa24:	4b80      	ldr	r3, [pc, #512]	; (800ac28 <lv_refr_area_part+0x20c>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f00f fd6d 	bl	801a508 <lv_disp_get_buf>
 800aa2e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /*In non double buffered mode, before rendering the next part wait until the previous image is
     * flushed*/
    if(lv_disp_is_double_buf(disp_refr) == false) {
 800aa32:	4b7d      	ldr	r3, [pc, #500]	; (800ac28 <lv_refr_area_part+0x20c>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4618      	mov	r0, r3
 800aa38:	f00f fdb4 	bl	801a5a4 <lv_disp_is_double_buf>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	f083 0301 	eor.w	r3, r3, #1
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d011      	beq.n	800aa6c <lv_refr_area_part+0x50>
        while(vdb->flushing) {
 800aa48:	e00b      	b.n	800aa62 <lv_refr_area_part+0x46>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
 800aa4a:	4b77      	ldr	r3, [pc, #476]	; (800ac28 <lv_refr_area_part+0x20c>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	69db      	ldr	r3, [r3, #28]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d006      	beq.n	800aa62 <lv_refr_area_part+0x46>
 800aa54:	4b74      	ldr	r3, [pc, #464]	; (800ac28 <lv_refr_area_part+0x20c>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	69db      	ldr	r3, [r3, #28]
 800aa5a:	4a73      	ldr	r2, [pc, #460]	; (800ac28 <lv_refr_area_part+0x20c>)
 800aa5c:	6812      	ldr	r2, [r2, #0]
 800aa5e:	4610      	mov	r0, r2
 800aa60:	4798      	blx	r3
        while(vdb->flushing) {
 800aa62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aa66:	699b      	ldr	r3, [r3, #24]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d1ee      	bne.n	800aa4a <lv_refr_area_part+0x2e>
        }
    }

    lv_obj_t * top_act_scr = NULL;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    lv_obj_t * top_prev_scr = NULL;
 800aa72:	2300      	movs	r3, #0
 800aa74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /*Get the new mask from the original area and the act. VDB
     It will be a part of 'area_p'*/
    lv_area_t start_mask;
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
 800aa78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aa7c:	f103 0210 	add.w	r2, r3, #16
 800aa80:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800aa84:	6879      	ldr	r1, [r7, #4]
 800aa86:	4618      	mov	r0, r3
 800aa88:	f010 f9fe 	bl	801ae88 <_lv_area_intersect>

    /*Get the most top object which is not covered by others*/
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 800aa8c:	4b66      	ldr	r3, [pc, #408]	; (800ac28 <lv_refr_area_part+0x20c>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7f6 fe7e 	bl	8001792 <lv_disp_get_scr_act>
 800aa96:	4602      	mov	r2, r0
 800aa98:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800aa9c:	4611      	mov	r1, r2
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f000 f8c4 	bl	800ac2c <lv_refr_get_top_obj>
 800aaa4:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    if(disp_refr->prev_scr) {
 800aaa8:	4b5f      	ldr	r3, [pc, #380]	; (800ac28 <lv_refr_area_part+0x20c>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d00a      	beq.n	800aac8 <lv_refr_area_part+0xac>
        top_prev_scr = lv_refr_get_top_obj(&start_mask, disp_refr->prev_scr);
 800aab2:	4b5d      	ldr	r3, [pc, #372]	; (800ac28 <lv_refr_area_part+0x20c>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aab8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800aabc:	4611      	mov	r1, r2
 800aabe:	4618      	mov	r0, r3
 800aac0:	f000 f8b4 	bl	800ac2c <lv_refr_get_top_obj>
 800aac4:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
    }

    /*Draw a display background if there is no top object*/
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800aac8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d15d      	bne.n	800ab8c <lv_refr_area_part+0x170>
 800aad0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d159      	bne.n	800ab8c <lv_refr_area_part+0x170>
        if(disp_refr->bg_img) {
 800aad8:	4b53      	ldr	r3, [pc, #332]	; (800ac28 <lv_refr_area_part+0x20c>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d03d      	beq.n	800ab5e <lv_refr_area_part+0x142>
            lv_draw_img_dsc_t dsc;
            lv_draw_img_dsc_init(&dsc);
 800aae2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800aae6:	4618      	mov	r0, r3
 800aae8:	f003 fb69 	bl	800e1be <lv_draw_img_dsc_init>
            dsc.opa = disp_refr->bg_opa;
 800aaec:	4b4e      	ldr	r3, [pc, #312]	; (800ac28 <lv_refr_area_part+0x20c>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800aaf4:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
            lv_img_header_t header;
            lv_res_t res;
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 800aaf8:	4b4b      	ldr	r3, [pc, #300]	; (800ac28 <lv_refr_area_part+0x20c>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aafe:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800ab02:	4611      	mov	r1, r2
 800ab04:	4618      	mov	r0, r3
 800ab06:	f00d fc4b 	bl	80183a0 <lv_img_decoder_get_info>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
            if(res == LV_RES_OK) {
 800ab10:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d139      	bne.n	800ab8c <lv_refr_area_part+0x170>
                lv_area_t a;
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
 800ab18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab1a:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	3b01      	subs	r3, #1
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	b21a      	sxth	r2, r3
 800ab26:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ab2a:	f3c3 134a 	ubfx	r3, r3, #5, #11
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	3b01      	subs	r3, #1
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	b21b      	sxth	r3, r3
 800ab36:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	4613      	mov	r3, r2
 800ab3e:	2200      	movs	r2, #0
 800ab40:	2100      	movs	r1, #0
 800ab42:	f010 f949 	bl	801add8 <lv_area_set>
                lv_draw_img(&a, &start_mask, disp_refr->bg_img, &dsc);
 800ab46:	4b38      	ldr	r3, [pc, #224]	; (800ac28 <lv_refr_area_part+0x20c>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ab4c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ab50:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800ab54:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800ab58:	f003 fb56 	bl	800e208 <lv_draw_img>
 800ab5c:	e016      	b.n	800ab8c <lv_refr_area_part+0x170>
                LV_LOG_WARN("Can't draw the background image")
            }
        }
        else {
            lv_draw_rect_dsc_t dsc;
            lv_draw_rect_dsc_init(&dsc);
 800ab5e:	f107 0308 	add.w	r3, r7, #8
 800ab62:	4618      	mov	r0, r3
 800ab64:	f008 fbf8 	bl	8013358 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 800ab68:	4b2f      	ldr	r3, [pc, #188]	; (800ac28 <lv_refr_area_part+0x20c>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab6e:	60fb      	str	r3, [r7, #12]
            dsc.bg_opa = disp_refr->bg_opa;
 800ab70:	4b2d      	ldr	r3, [pc, #180]	; (800ac28 <lv_refr_area_part+0x20c>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800ab78:	76bb      	strb	r3, [r7, #26]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 800ab7a:	f107 0208 	add.w	r2, r7, #8
 800ab7e:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800ab82:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800ab86:	4618      	mov	r0, r3
 800ab88:	f008 fc6a 	bl	8013460 <lv_draw_rect>

        }
    }
    /*Refresh the previous screen if any*/
    if(disp_refr->prev_scr) {
 800ab8c:	4b26      	ldr	r3, [pc, #152]	; (800ac28 <lv_refr_area_part+0x20c>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d00f      	beq.n	800abb6 <lv_refr_area_part+0x19a>
        /*Get the most top object which is not covered by others*/
        if(top_prev_scr == NULL) {
 800ab96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d104      	bne.n	800aba8 <lv_refr_area_part+0x18c>
            top_prev_scr = disp_refr->prev_scr;
 800ab9e:	4b22      	ldr	r3, [pc, #136]	; (800ac28 <lv_refr_area_part+0x20c>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aba4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        }
        /*Do the refreshing from the top object*/
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
 800aba8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800abac:	4619      	mov	r1, r3
 800abae:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800abb2:	f000 f895 	bl	800ace0 <lv_refr_obj_and_children>

    }

    if(top_act_scr == NULL) {
 800abb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d104      	bne.n	800abc8 <lv_refr_area_part+0x1ac>
        top_act_scr = disp_refr->act_scr;
 800abbe:	4b1a      	ldr	r3, [pc, #104]	; (800ac28 <lv_refr_area_part+0x20c>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    }
    /*Do the refreshing from the top object*/
    lv_refr_obj_and_children(top_act_scr, &start_mask);
 800abc8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800abcc:	4619      	mov	r1, r3
 800abce:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800abd2:	f000 f885 	bl	800ace0 <lv_refr_obj_and_children>

    /*Also refresh top and sys layer unconditionally*/
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 800abd6:	4b14      	ldr	r3, [pc, #80]	; (800ac28 <lv_refr_area_part+0x20c>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4618      	mov	r0, r3
 800abdc:	f7f6 fe03 	bl	80017e6 <lv_disp_get_layer_top>
 800abe0:	4602      	mov	r2, r0
 800abe2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800abe6:	4619      	mov	r1, r3
 800abe8:	4610      	mov	r0, r2
 800abea:	f000 f879 	bl	800ace0 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 800abee:	4b0e      	ldr	r3, [pc, #56]	; (800ac28 <lv_refr_area_part+0x20c>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7f6 fe0c 	bl	8001810 <lv_disp_get_layer_sys>
 800abf8:	4602      	mov	r2, r0
 800abfa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800abfe:	4619      	mov	r1, r3
 800ac00:	4610      	mov	r0, r2
 800ac02:	f000 f86d 	bl	800ace0 <lv_refr_obj_and_children>

    /* In true double buffered mode flush only once when all areas were rendered.
     * In normal mode flush after every area */
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
 800ac06:	4b08      	ldr	r3, [pc, #32]	; (800ac28 <lv_refr_area_part+0x20c>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f00f fce1 	bl	801a5d2 <lv_disp_is_true_double_buf>
 800ac10:	4603      	mov	r3, r0
 800ac12:	f083 0301 	eor.w	r3, r3, #1
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d001      	beq.n	800ac20 <lv_refr_area_part+0x204>
        lv_refr_vdb_flush();
 800ac1c:	f000 f972 	bl	800af04 <lv_refr_vdb_flush>
    }
}
 800ac20:	bf00      	nop
 800ac22:	37a8      	adds	r7, #168	; 0xa8
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	20018b78 	.word	0x20018b78

0800ac2c <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b086      	sub	sp, #24
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
    lv_obj_t * found_p = NULL;
 800ac36:	2300      	movs	r3, #0
 800ac38:	617b      	str	r3, [r7, #20]

    /*If this object is fully cover the draw area check the children too */
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	3310      	adds	r3, #16
 800ac3e:	2200      	movs	r2, #0
 800ac40:	4619      	mov	r1, r3
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f010 fb04 	bl	801b250 <_lv_area_is_in>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d043      	beq.n	800acd6 <lv_refr_get_top_obj+0xaa>
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ac54:	f003 0310 	and.w	r3, r3, #16
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d13b      	bne.n	800acd6 <lv_refr_get_top_obj+0xaa>
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	6a1b      	ldr	r3, [r3, #32]
 800ac62:	2202      	movs	r2, #2
 800ac64:	6879      	ldr	r1, [r7, #4]
 800ac66:	6838      	ldr	r0, [r7, #0]
 800ac68:	4798      	blx	r3
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	74fb      	strb	r3, [r7, #19]
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
 800ac6e:	7cfb      	ldrb	r3, [r7, #19]
 800ac70:	2b03      	cmp	r3, #3
 800ac72:	d101      	bne.n	800ac78 <lv_refr_get_top_obj+0x4c>
 800ac74:	2300      	movs	r3, #0
 800ac76:	e02f      	b.n	800acd8 <lv_refr_get_top_obj+0xac>

#if LV_USE_OPA_SCALE
        if(design_res == LV_DESIGN_RES_COVER && lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) != LV_OPA_COVER) {
 800ac78:	7cfb      	ldrb	r3, [r7, #19]
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d108      	bne.n	800ac90 <lv_refr_get_top_obj+0x64>
 800ac7e:	2100      	movs	r1, #0
 800ac80:	6838      	ldr	r0, [r7, #0]
 800ac82:	f7ff fa80 	bl	800a186 <lv_obj_get_style_opa_scale>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2bff      	cmp	r3, #255	; 0xff
 800ac8a:	d001      	beq.n	800ac90 <lv_refr_get_top_obj+0x64>
            design_res = LV_DESIGN_RES_NOT_COVER;
 800ac8c:	2302      	movs	r3, #2
 800ac8e:	74fb      	strb	r3, [r7, #19]
        }
#endif

        lv_obj_t * i;
        _LV_LL_READ(obj->child_ll, i) {
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	3304      	adds	r3, #4
 800ac94:	4618      	mov	r0, r3
 800ac96:	f011 fb07 	bl	801c2a8 <_lv_ll_get_head>
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	e00e      	b.n	800acbc <lv_refr_get_top_obj+0x90>
            found_p = lv_refr_get_top_obj(area_p, i);
 800ac9e:	68f9      	ldr	r1, [r7, #12]
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f7ff ffc3 	bl	800ac2c <lv_refr_get_top_obj>
 800aca6:	6178      	str	r0, [r7, #20]

            /*If a children is ok then break*/
            if(found_p != NULL) {
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d10a      	bne.n	800acc4 <lv_refr_get_top_obj+0x98>
        _LV_LL_READ(obj->child_ll, i) {
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	3304      	adds	r3, #4
 800acb2:	68f9      	ldr	r1, [r7, #12]
 800acb4:	4618      	mov	r0, r3
 800acb6:	f011 fb1d 	bl	801c2f4 <_lv_ll_get_next>
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1ed      	bne.n	800ac9e <lv_refr_get_top_obj+0x72>
 800acc2:	e000      	b.n	800acc6 <lv_refr_get_top_obj+0x9a>
                break;
 800acc4:	bf00      	nop
            }
        }

        /*If no better children use this object*/
        if(found_p == NULL) {
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d104      	bne.n	800acd6 <lv_refr_get_top_obj+0xaa>
            if(design_res == LV_DESIGN_RES_COVER) {
 800accc:	7cfb      	ldrb	r3, [r7, #19]
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d101      	bne.n	800acd6 <lv_refr_get_top_obj+0xaa>
                found_p = obj;
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	617b      	str	r3, [r7, #20]
            }
        }
    }

    return found_p;
 800acd6:	697b      	ldr	r3, [r7, #20]
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3718      	adds	r7, #24
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <lv_refr_obj_and_children>:
 * Make the refreshing from an object. Draw all its children and the youngers too.
 * @param top_p pointer to an objects. Start the drawing from it.
 * @param mask_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj_and_children(lv_obj_t * top_p, const lv_area_t * mask_p)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
    /* Normally always will be a top_obj (at least the screen)
     * but in special cases (e.g. if the screen has alpha) it won't.
     * In this case use the screen directly */
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d105      	bne.n	800acfc <lv_refr_obj_and_children+0x1c>
 800acf0:	4b20      	ldr	r3, [pc, #128]	; (800ad74 <lv_refr_obj_and_children+0x94>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7f6 fd4c 	bl	8001792 <lv_disp_get_scr_act>
 800acfa:	6078      	str	r0, [r7, #4]
    if(top_p == NULL) return;  /*Shouldn't happen*/
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d034      	beq.n	800ad6c <lv_refr_obj_and_children+0x8c>

    /*Refresh the top object and its children*/
    lv_refr_obj(top_p, mask_p);
 800ad02:	6839      	ldr	r1, [r7, #0]
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 f837 	bl	800ad78 <lv_refr_obj>

    /*Draw the 'younger' sibling objects because they can be on top_obj */
    lv_obj_t * par;
    lv_obj_t * border_p = top_p;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	613b      	str	r3, [r7, #16]

    par = lv_obj_get_parent(top_p);
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f7fb fdba 	bl	8006888 <lv_obj_get_parent>
 800ad14:	6178      	str	r0, [r7, #20]

    /*Do until not reach the screen*/
    while(par != NULL) {
 800ad16:	e025      	b.n	800ad64 <lv_refr_obj_and_children+0x84>
        /*object before border_p has to be redrawn*/
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	3304      	adds	r3, #4
 800ad1c:	6939      	ldr	r1, [r7, #16]
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f011 fb02 	bl	801c328 <_lv_ll_get_prev>
 800ad24:	60f8      	str	r0, [r7, #12]

        while(i != NULL) {
 800ad26:	e00a      	b.n	800ad3e <lv_refr_obj_and_children+0x5e>
            /*Refresh the objects*/
            lv_refr_obj(i, mask_p);
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	68f8      	ldr	r0, [r7, #12]
 800ad2c:	f000 f824 	bl	800ad78 <lv_refr_obj>
            i = _lv_ll_get_prev(&(par->child_ll), i);
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	3304      	adds	r3, #4
 800ad34:	68f9      	ldr	r1, [r7, #12]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f011 faf6 	bl	801c328 <_lv_ll_get_prev>
 800ad3c:	60f8      	str	r0, [r7, #12]
        while(i != NULL) {
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d1f1      	bne.n	800ad28 <lv_refr_obj_and_children+0x48>
        }

        /*Call the post draw design function of the parents of the to object*/
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	6a1b      	ldr	r3, [r3, #32]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d005      	beq.n	800ad58 <lv_refr_obj_and_children+0x78>
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	6a1b      	ldr	r3, [r3, #32]
 800ad50:	2201      	movs	r2, #1
 800ad52:	6839      	ldr	r1, [r7, #0]
 800ad54:	6978      	ldr	r0, [r7, #20]
 800ad56:	4798      	blx	r3

        /*The new border will be there last parents,
         *so the 'younger' brothers of parent will be refreshed*/
        border_p = par;
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	613b      	str	r3, [r7, #16]
        /*Go a level deeper*/
        par = lv_obj_get_parent(par);
 800ad5c:	6978      	ldr	r0, [r7, #20]
 800ad5e:	f7fb fd93 	bl	8006888 <lv_obj_get_parent>
 800ad62:	6178      	str	r0, [r7, #20]
    while(par != NULL) {
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1d6      	bne.n	800ad18 <lv_refr_obj_and_children+0x38>
 800ad6a:	e000      	b.n	800ad6e <lv_refr_obj_and_children+0x8e>
    if(top_p == NULL) return;  /*Shouldn't happen*/
 800ad6c:	bf00      	nop
    }
}
 800ad6e:	3718      	adds	r7, #24
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	20018b78 	.word	0x20018b78

0800ad78 <lv_refr_obj>:
 * Refresh an object an all of its children. (Called recursively)
 * @param obj pointer to an object to refresh
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b08e      	sub	sp, #56	; 0x38
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
    /*Do not refresh hidden objects*/
    if(obj->hidden != 0) return;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ad88:	f003 0310 	and.w	r3, r3, #16
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	f040 80b4 	bne.w	800aefc <lv_refr_obj+0x184>
    /* Truncate the original mask to the coordinates of the parent
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_draw_pad;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ad98:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_obj_get_coords(obj, &obj_area);
 800ad9a:	f107 0318 	add.w	r3, r7, #24
 800ad9e:	4619      	mov	r1, r3
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f7fb fdc1 	bl	8006928 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 800ada6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800adaa:	b29a      	uxth	r2, r3
 800adac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800adae:	1ad3      	subs	r3, r2, r3
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	b21b      	sxth	r3, r3
 800adb4:	833b      	strh	r3, [r7, #24]
    obj_area.y1 -= ext_size;
 800adb6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800adba:	b29a      	uxth	r2, r3
 800adbc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800adbe:	1ad3      	subs	r3, r2, r3
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	b21b      	sxth	r3, r3
 800adc4:	837b      	strh	r3, [r7, #26]
    obj_area.x2 += ext_size;
 800adc6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800adca:	b29a      	uxth	r2, r3
 800adcc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800adce:	4413      	add	r3, r2
 800add0:	b29b      	uxth	r3, r3
 800add2:	b21b      	sxth	r3, r3
 800add4:	83bb      	strh	r3, [r7, #28]
    obj_area.y2 += ext_size;
 800add6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800adda:	b29a      	uxth	r2, r3
 800addc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800adde:	4413      	add	r3, r2
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	b21b      	sxth	r3, r3
 800ade4:	83fb      	strh	r3, [r7, #30]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 800ade6:	f107 0218 	add.w	r2, r7, #24
 800adea:	f107 0320 	add.w	r3, r7, #32
 800adee:	6839      	ldr	r1, [r7, #0]
 800adf0:	4618      	mov	r0, r3
 800adf2:	f010 f849 	bl	801ae88 <_lv_area_intersect>
 800adf6:	4603      	mov	r3, r0
 800adf8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
 800adfc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d07c      	beq.n	800aefe <lv_refr_obj+0x186>

        /* Redraw the object */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6a1b      	ldr	r3, [r3, #32]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d006      	beq.n	800ae1a <lv_refr_obj+0xa2>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6a1b      	ldr	r3, [r3, #32]
 800ae10:	f107 0120 	add.w	r1, r7, #32
 800ae14:	2200      	movs	r2, #0
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	4798      	blx	r3
#if LV_COLOR_DEPTH == 32
        debug_color.ch.alpha = 0xff;
#endif
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
 800ae1a:	f107 0318 	add.w	r3, r7, #24
 800ae1e:	4619      	mov	r1, r3
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f7fb fd81 	bl	8006928 <lv_obj_get_coords>
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 800ae26:	f107 0218 	add.w	r2, r7, #24
 800ae2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ae2e:	6839      	ldr	r1, [r7, #0]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f010 f829 	bl	801ae88 <_lv_area_intersect>
 800ae36:	4603      	mov	r3, r0
 800ae38:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        if(union_ok != false) {
 800ae3c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d04f      	beq.n	800aee4 <lv_refr_obj+0x16c>
            lv_area_t mask_child; /*Mask from obj and its child*/
            lv_obj_t * child_p;
            lv_area_t child_area;
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	3304      	adds	r3, #4
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f011 fa40 	bl	801c2ce <_lv_ll_get_tail>
 800ae4e:	6378      	str	r0, [r7, #52]	; 0x34
 800ae50:	e045      	b.n	800aede <lv_refr_obj+0x166>
                lv_obj_get_coords(child_p, &child_area);
 800ae52:	f107 0308 	add.w	r3, r7, #8
 800ae56:	4619      	mov	r1, r3
 800ae58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ae5a:	f7fb fd65 	bl	8006928 <lv_obj_get_coords>
                ext_size = child_p->ext_draw_pad;
 800ae5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae62:	867b      	strh	r3, [r7, #50]	; 0x32
                child_area.x1 -= ext_size;
 800ae64:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ae68:	b29a      	uxth	r2, r3
 800ae6a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ae6c:	1ad3      	subs	r3, r2, r3
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	b21b      	sxth	r3, r3
 800ae72:	813b      	strh	r3, [r7, #8]
                child_area.y1 -= ext_size;
 800ae74:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ae78:	b29a      	uxth	r2, r3
 800ae7a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ae7c:	1ad3      	subs	r3, r2, r3
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	b21b      	sxth	r3, r3
 800ae82:	817b      	strh	r3, [r7, #10]
                child_area.x2 += ext_size;
 800ae84:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ae88:	b29a      	uxth	r2, r3
 800ae8a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ae8c:	4413      	add	r3, r2
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	b21b      	sxth	r3, r3
 800ae92:	81bb      	strh	r3, [r7, #12]
                child_area.y2 += ext_size;
 800ae94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ae98:	b29a      	uxth	r2, r3
 800ae9a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ae9c:	4413      	add	r3, r2
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	b21b      	sxth	r3, r3
 800aea2:	81fb      	strh	r3, [r7, #14]
                /* Get the union (common parts) of original mask (from obj)
                 * and its child */
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800aea4:	f107 0208 	add.w	r2, r7, #8
 800aea8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800aeac:	f107 0310 	add.w	r3, r7, #16
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f00f ffe9 	bl	801ae88 <_lv_area_intersect>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

                /*If the parent and the child has common area then refresh the child */
                if(union_ok) {
 800aebc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d005      	beq.n	800aed0 <lv_refr_obj+0x158>
                    /*Refresh the next children*/
                    lv_refr_obj(child_p, &mask_child);
 800aec4:	f107 0310 	add.w	r3, r7, #16
 800aec8:	4619      	mov	r1, r3
 800aeca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800aecc:	f7ff ff54 	bl	800ad78 <lv_refr_obj>
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	3304      	adds	r3, #4
 800aed4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aed6:	4618      	mov	r0, r3
 800aed8:	f011 fa26 	bl	801c328 <_lv_ll_get_prev>
 800aedc:	6378      	str	r0, [r7, #52]	; 0x34
 800aede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d1b6      	bne.n	800ae52 <lv_refr_obj+0xda>
                }
            }
        }

        /* If all the children are redrawn make 'post draw' design */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6a1b      	ldr	r3, [r3, #32]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d008      	beq.n	800aefe <lv_refr_obj+0x186>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a1b      	ldr	r3, [r3, #32]
 800aef0:	f107 0120 	add.w	r1, r7, #32
 800aef4:	2201      	movs	r2, #1
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	4798      	blx	r3
 800aefa:	e000      	b.n	800aefe <lv_refr_obj+0x186>
    if(obj->hidden != 0) return;
 800aefc:	bf00      	nop
    }
}
 800aefe:	3738      	adds	r7, #56	; 0x38
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b082      	sub	sp, #8
 800af08:	af00      	add	r7, sp, #0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800af0a:	4b37      	ldr	r3, [pc, #220]	; (800afe8 <lv_refr_vdb_flush+0xe4>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4618      	mov	r0, r3
 800af10:	f00f fafa 	bl	801a508 <lv_disp_get_buf>
 800af14:	6078      	str	r0, [r7, #4]

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
 800af16:	4b34      	ldr	r3, [pc, #208]	; (800afe8 <lv_refr_vdb_flush+0xe4>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4618      	mov	r0, r3
 800af1c:	f00f fb42 	bl	801a5a4 <lv_disp_is_double_buf>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d010      	beq.n	800af48 <lv_refr_vdb_flush+0x44>
        while(vdb->flushing) {
 800af26:	e00b      	b.n	800af40 <lv_refr_vdb_flush+0x3c>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
 800af28:	4b2f      	ldr	r3, [pc, #188]	; (800afe8 <lv_refr_vdb_flush+0xe4>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	69db      	ldr	r3, [r3, #28]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d006      	beq.n	800af40 <lv_refr_vdb_flush+0x3c>
 800af32:	4b2d      	ldr	r3, [pc, #180]	; (800afe8 <lv_refr_vdb_flush+0xe4>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	69db      	ldr	r3, [r3, #28]
 800af38:	4a2b      	ldr	r2, [pc, #172]	; (800afe8 <lv_refr_vdb_flush+0xe4>)
 800af3a:	6812      	ldr	r2, [r2, #0]
 800af3c:	4610      	mov	r0, r2
 800af3e:	4798      	blx	r3
        while(vdb->flushing) {
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	699b      	ldr	r3, [r3, #24]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d1ef      	bne.n	800af28 <lv_refr_vdb_flush+0x24>
        }
    }

    vdb->flushing = 1;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	619a      	str	r2, [r3, #24]

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
 800af4e:	4b26      	ldr	r3, [pc, #152]	; (800afe8 <lv_refr_vdb_flush+0xe4>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	6a1b      	ldr	r3, [r3, #32]
 800af56:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00c      	beq.n	800af7a <lv_refr_vdb_flush+0x76>
 800af60:	4b21      	ldr	r3, [pc, #132]	; (800afe8 <lv_refr_vdb_flush+0xe4>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	6a1b      	ldr	r3, [r3, #32]
 800af68:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d003      	beq.n	800af7a <lv_refr_vdb_flush+0x76>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2201      	movs	r2, #1
 800af76:	61da      	str	r2, [r3, #28]
 800af78:	e002      	b.n	800af80 <lv_refr_vdb_flush+0x7c>
    else vdb->flushing_last = 0;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2200      	movs	r2, #0
 800af7e:	61da      	str	r2, [r3, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800af80:	f7ff f9d2 	bl	800a328 <_lv_refr_get_disp_refreshing>
 800af84:	6038      	str	r0, [r7, #0]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d004      	beq.n	800af98 <lv_refr_vdb_flush+0x94>
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af92:	683a      	ldr	r2, [r7, #0]
 800af94:	4610      	mov	r0, r2
 800af96:	4798      	blx	r3

    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	68db      	ldr	r3, [r3, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d008      	beq.n	800afb2 <lv_refr_vdb_flush+0xae>
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	6838      	ldr	r0, [r7, #0]
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	f102 0110 	add.w	r1, r2, #16
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	6892      	ldr	r2, [r2, #8]
 800afb0:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d012      	beq.n	800afe0 <lv_refr_vdb_flush+0xdc>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00e      	beq.n	800afe0 <lv_refr_vdb_flush+0xdc>
        if(vdb->buf_act == vdb->buf1)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	689a      	ldr	r2, [r3, #8]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d104      	bne.n	800afd8 <lv_refr_vdb_flush+0xd4>
            vdb->buf_act = vdb->buf2;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	685a      	ldr	r2, [r3, #4]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	609a      	str	r2, [r3, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
 800afd6:	e003      	b.n	800afe0 <lv_refr_vdb_flush+0xdc>
            vdb->buf_act = vdb->buf1;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	609a      	str	r2, [r3, #8]
}
 800afe0:	bf00      	nop
 800afe2:	3708      	adds	r7, #8
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	20018b78 	.word	0x20018b78

0800afec <_lv_memcpy_small>:
{
 800afec:	b480      	push	{r7}
 800afee:	b087      	sub	sp, #28
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	613b      	str	r3, [r7, #16]
    while(len) {
 800b000:	e00c      	b.n	800b01c <_lv_memcpy_small+0x30>
        *d8 = *s8;
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	781a      	ldrb	r2, [r3, #0]
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	701a      	strb	r2, [r3, #0]
        d8++;
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	3301      	adds	r3, #1
 800b00e:	617b      	str	r3, [r7, #20]
        s8++;
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	3301      	adds	r3, #1
 800b014:	613b      	str	r3, [r7, #16]
        len--;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	3b01      	subs	r3, #1
 800b01a:	607b      	str	r3, [r7, #4]
    while(len) {
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d1ef      	bne.n	800b002 <_lv_memcpy_small+0x16>
    return dst;
 800b022:	68fb      	ldr	r3, [r7, #12]
}
 800b024:	4618      	mov	r0, r3
 800b026:	371c      	adds	r7, #28
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <lv_style_list_get_style>:
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	460b      	mov	r3, r1
 800b03a:	70fb      	strb	r3, [r7, #3]
    if(list->has_trans && list->skip_trans) id++;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	791b      	ldrb	r3, [r3, #4]
 800b040:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b044:	b2db      	uxtb	r3, r3
 800b046:	2b00      	cmp	r3, #0
 800b048:	d009      	beq.n	800b05e <lv_style_list_get_style+0x2e>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	795b      	ldrb	r3, [r3, #5]
 800b04e:	f003 0301 	and.w	r3, r3, #1
 800b052:	b2db      	uxtb	r3, r3
 800b054:	2b00      	cmp	r3, #0
 800b056:	d002      	beq.n	800b05e <lv_style_list_get_style+0x2e>
 800b058:	78fb      	ldrb	r3, [r7, #3]
 800b05a:	3301      	adds	r3, #1
 800b05c:	70fb      	strb	r3, [r7, #3]
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	791b      	ldrb	r3, [r3, #4]
 800b062:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b066:	b2db      	uxtb	r3, r3
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d008      	beq.n	800b07e <lv_style_list_get_style+0x4e>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	791b      	ldrb	r3, [r3, #4]
 800b070:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b074:	b2db      	uxtb	r3, r3
 800b076:	461a      	mov	r2, r3
 800b078:	78fb      	ldrb	r3, [r7, #3]
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d301      	bcc.n	800b082 <lv_style_list_get_style+0x52>
 800b07e:	2300      	movs	r3, #0
 800b080:	e005      	b.n	800b08e <lv_style_list_get_style+0x5e>
    return list->style_list[id];
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	78fb      	ldrb	r3, [r7, #3]
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	4413      	add	r3, r2
 800b08c:	681b      	ldr	r3, [r3, #0]
}
 800b08e:	4618      	mov	r0, r3
 800b090:	370c      	adds	r7, #12
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr

0800b09a <lv_style_init>:
/**
 * Initialize a style
 * @param style pointer to a style to initialize
 */
void lv_style_init(lv_style_t * style)
{
 800b09a:	b580      	push	{r7, lr}
 800b09c:	b082      	sub	sp, #8
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
    _lv_memset_00(style, sizeof(lv_style_t));
 800b0a2:	2104      	movs	r1, #4
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f012 f840 	bl	801d12a <_lv_memset_00>
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_DEBUG_STYLE_SENTINEL_VALUE;
#endif
}
 800b0aa:	bf00      	nop
 800b0ac:	3708      	adds	r7, #8
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <lv_style_copy>:
 * Copy a style with all its properties
 * @param style_dest pointer to the destination style. (Should be initialized with `lv_style_init()`)
 * @param style_src pointer to the source (to copy )style
 */
void lv_style_copy(lv_style_t * style_dest, const lv_style_t * style_src)
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b084      	sub	sp, #16
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
 800b0ba:	6039      	str	r1, [r7, #0]
    if(style_src == NULL) return;
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d018      	beq.n	800b0f4 <lv_style_copy+0x42>

    LV_ASSERT_STYLE(style_dest);
    LV_ASSERT_STYLE(style_src);

    if(style_src->map == NULL) return;
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d016      	beq.n	800b0f8 <lv_style_copy+0x46>

    uint16_t size = _lv_style_get_mem_size(style_src);
 800b0ca:	6838      	ldr	r0, [r7, #0]
 800b0cc:	f000 fb01 	bl	800b6d2 <_lv_style_get_mem_size>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	81fb      	strh	r3, [r7, #14]
    style_dest->map = lv_mem_alloc(size);
 800b0d4:	89fb      	ldrh	r3, [r7, #14]
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f011 fabc 	bl	801c654 <lv_mem_alloc>
 800b0dc:	4602      	mov	r2, r0
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	601a      	str	r2, [r3, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6818      	ldr	r0, [r3, #0]
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	89fa      	ldrh	r2, [r7, #14]
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	f011 fd77 	bl	801cbe0 <_lv_memcpy>
 800b0f2:	e002      	b.n	800b0fa <lv_style_copy+0x48>
    if(style_src == NULL) return;
 800b0f4:	bf00      	nop
 800b0f6:	e000      	b.n	800b0fa <lv_style_copy+0x48>
    if(style_src->map == NULL) return;
 800b0f8:	bf00      	nop
}
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <lv_style_remove_prop>:
 * @param prop a style property ORed with a state.
 * E.g. `LV_STYLE_BORDER_WIDTH | (LV_STATE_PRESSED << LV_STYLE_STATE_POS)`
 * @return true: the property was found and removed; false: the property wasn't found
 */
bool lv_style_remove_prop(lv_style_t * style, lv_style_property_t prop)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b088      	sub	sp, #32
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	460b      	mov	r3, r1
 800b10a:	807b      	strh	r3, [r7, #2]
    if(style == NULL) return false;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d101      	bne.n	800b116 <lv_style_remove_prop+0x16>
 800b112:	2300      	movs	r3, #0
 800b114:	e049      	b.n	800b1aa <lv_style_remove_prop+0xaa>
    LV_ASSERT_STYLE(style);

    int32_t id = get_property_index(style, prop);
 800b116:	887b      	ldrh	r3, [r7, #2]
 800b118:	4619      	mov	r1, r3
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f001 f8c3 	bl	800c2a6 <get_property_index>
 800b120:	61b8      	str	r0, [r7, #24]
    /*The property exists but not sure it's state is the same*/
    if(id >= 0) {
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	2b00      	cmp	r3, #0
 800b126:	db3f      	blt.n	800b1a8 <lv_style_remove_prop+0xa8>
        lv_style_attr_t attr_found;
        lv_style_attr_t attr_goal;

        attr_found = get_style_prop_attr(style, id);
 800b128:	69bb      	ldr	r3, [r7, #24]
 800b12a:	4619      	mov	r1, r3
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f001 f99b 	bl	800c468 <get_style_prop_attr>
 800b132:	4603      	mov	r3, r0
 800b134:	75fb      	strb	r3, [r7, #23]
        attr_goal = (prop >> 8) & 0xFFU;
 800b136:	887b      	ldrh	r3, [r7, #2]
 800b138:	0a1b      	lsrs	r3, r3, #8
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	75bb      	strb	r3, [r7, #22]

        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 800b13e:	7dfa      	ldrb	r2, [r7, #23]
 800b140:	7dbb      	ldrb	r3, [r7, #22]
 800b142:	4053      	eors	r3, r2
 800b144:	b2db      	uxtb	r3, r3
 800b146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d12c      	bne.n	800b1a8 <lv_style_remove_prop+0xa8>
            uint32_t map_size = _lv_style_get_mem_size(style);
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 fabf 	bl	800b6d2 <_lv_style_get_mem_size>
 800b154:	4603      	mov	r3, r0
 800b156:	613b      	str	r3, [r7, #16]
            uint8_t prop_size = get_prop_size(prop);
 800b158:	887b      	ldrh	r3, [r7, #2]
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	4618      	mov	r0, r3
 800b15e:	f001 f994 	bl	800c48a <get_prop_size>
 800b162:	4603      	mov	r3, r0
 800b164:	73fb      	strb	r3, [r7, #15]

            /*Move the props to fill the space of the property to delete*/
            uint32_t i;
            for(i = id; i < map_size - prop_size; i++) {
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	61fb      	str	r3, [r7, #28]
 800b16a:	e00e      	b.n	800b18a <lv_style_remove_prop+0x8a>
                style->map[i] = style->map[i + prop_size];
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	7bf9      	ldrb	r1, [r7, #15]
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	440b      	add	r3, r1
 800b176:	441a      	add	r2, r3
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6819      	ldr	r1, [r3, #0]
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	440b      	add	r3, r1
 800b180:	7812      	ldrb	r2, [r2, #0]
 800b182:	701a      	strb	r2, [r3, #0]
            for(i = id; i < map_size - prop_size; i++) {
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	3301      	adds	r3, #1
 800b188:	61fb      	str	r3, [r7, #28]
 800b18a:	7bfb      	ldrb	r3, [r7, #15]
 800b18c:	693a      	ldr	r2, [r7, #16]
 800b18e:	1ad3      	subs	r3, r2, r3
 800b190:	69fa      	ldr	r2, [r7, #28]
 800b192:	429a      	cmp	r2, r3
 800b194:	d3ea      	bcc.n	800b16c <lv_style_remove_prop+0x6c>
            }

            style_resize(style, map_size - prop_size);
 800b196:	7bfb      	ldrb	r3, [r7, #15]
 800b198:	693a      	ldr	r2, [r7, #16]
 800b19a:	1ad3      	subs	r3, r2, r3
 800b19c:	4619      	mov	r1, r3
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f001 f922 	bl	800c3e8 <style_resize>

            return true;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	e000      	b.n	800b1aa <lv_style_remove_prop+0xaa>
        }
    }

    return false;
 800b1a8:	2300      	movs	r3, #0
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3720      	adds	r7, #32
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}

0800b1b2 <lv_style_list_init>:
/**
 * Initialize a style list
 * @param list a style list to initialize
 */
void lv_style_list_init(lv_style_list_t * list)
{
 800b1b2:	b580      	push	{r7, lr}
 800b1b4:	b082      	sub	sp, #8
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
    _lv_memset_00(list, sizeof(lv_style_list_t));
 800b1ba:	2108      	movs	r1, #8
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f011 ffb4 	bl	801d12a <_lv_memset_00>
#if LV_USE_ASSERT_STYLE
    list->sentinel = LV_DEBUG_STYLE_LIST_SENTINEL_VALUE;
#endif
}
 800b1c2:	bf00      	nop
 800b1c4:	3708      	adds	r7, #8
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <lv_style_list_copy>:
 * Copy a style list with all its styles and local style properties
 * @param list_dest pointer to the destination style list. (should be initialized with `lv_style_list_init()`)
 * @param list_src pointer to the source (to copy) style list.
 */
void lv_style_list_copy(lv_style_list_t * list_dest, const lv_style_list_t * list_src)
{
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	b084      	sub	sp, #16
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
 800b1d2:	6039      	str	r1, [r7, #0]
    LV_ASSERT_STYLE_LIST(list_dest);
    LV_ASSERT_STYLE_LIST(list_src);

    _lv_style_list_reset(list_dest);
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 fa15 	bl	800b604 <_lv_style_list_reset>

    if(list_src->style_list == NULL) return;
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f000 80ca 	beq.w	800b378 <lv_style_list_copy+0x1ae>

    /*Copy the styles but skip the transitions*/
    if(list_src->has_local == 0) {
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	791b      	ldrb	r3, [r3, #4]
 800b1e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d156      	bne.n	800b2a0 <lv_style_list_copy+0xd6>
        if(list_src->has_trans) {
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	791b      	ldrb	r3, [r3, #4]
 800b1f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d02b      	beq.n	800b258 <lv_style_list_copy+0x8e>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	791b      	ldrb	r3, [r3, #4]
 800b204:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	3b01      	subs	r3, #1
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	4618      	mov	r0, r3
 800b210:	f011 fa20 	bl	801c654 <lv_mem_alloc>
 800b214:	4602      	mov	r2, r0
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	601a      	str	r2, [r3, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6818      	ldr	r0, [r3, #0]
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	1d19      	adds	r1, r3, #4
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	791b      	ldrb	r3, [r3, #4]
 800b228:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	3b01      	subs	r3, #1
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	461a      	mov	r2, r3
 800b234:	f011 fcd4 	bl	801cbe0 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 1;
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	791b      	ldrb	r3, [r3, #4]
 800b23c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b240:	b2db      	uxtb	r3, r3
 800b242:	3b01      	subs	r3, #1
 800b244:	b2db      	uxtb	r3, r3
 800b246:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b24a:	b2d9      	uxtb	r1, r3
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	7913      	ldrb	r3, [r2, #4]
 800b250:	f361 0305 	bfi	r3, r1, #0, #6
 800b254:	7113      	strb	r3, [r2, #4]
 800b256:	e090      	b.n	800b37a <lv_style_list_copy+0x1b0>
        }
        else {
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	791b      	ldrb	r3, [r3, #4]
 800b25c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b260:	b2db      	uxtb	r3, r3
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4618      	mov	r0, r3
 800b266:	f011 f9f5 	bl	801c654 <lv_mem_alloc>
 800b26a:	4602      	mov	r2, r0
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	601a      	str	r2, [r3, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6818      	ldr	r0, [r3, #0]
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	6819      	ldr	r1, [r3, #0]
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	791b      	ldrb	r3, [r3, #4]
 800b27c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b280:	b2db      	uxtb	r3, r3
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	461a      	mov	r2, r3
 800b286:	f011 fcab 	bl	801cbe0 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt;
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	791b      	ldrb	r3, [r3, #4]
 800b28e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b292:	b2d9      	uxtb	r1, r3
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	7913      	ldrb	r3, [r2, #4]
 800b298:	f361 0305 	bfi	r3, r1, #0, #6
 800b29c:	7113      	strb	r3, [r2, #4]
 800b29e:	e06c      	b.n	800b37a <lv_style_list_copy+0x1b0>
        }
    }
    else {
        if(list_src->has_trans) {
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	791b      	ldrb	r3, [r3, #4]
 800b2a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d02c      	beq.n	800b308 <lv_style_list_copy+0x13e>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	791b      	ldrb	r3, [r3, #4]
 800b2b2:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	3b02      	subs	r3, #2
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f011 f9c9 	bl	801c654 <lv_mem_alloc>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	601a      	str	r2, [r3, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6818      	ldr	r0, [r3, #0]
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f103 0108 	add.w	r1, r3, #8
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	791b      	ldrb	r3, [r3, #4]
 800b2d8:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	3b02      	subs	r3, #2
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	f011 fc7c 	bl	801cbe0 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 2;
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	791b      	ldrb	r3, [r3, #4]
 800b2ec:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	3b02      	subs	r3, #2
 800b2f4:	b2db      	uxtb	r3, r3
 800b2f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2fa:	b2d9      	uxtb	r1, r3
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	7913      	ldrb	r3, [r2, #4]
 800b300:	f361 0305 	bfi	r3, r1, #0, #6
 800b304:	7113      	strb	r3, [r2, #4]
 800b306:	e02a      	b.n	800b35e <lv_style_list_copy+0x194>
        }
        else {
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	791b      	ldrb	r3, [r3, #4]
 800b30c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b310:	b2db      	uxtb	r3, r3
 800b312:	3b01      	subs	r3, #1
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	4618      	mov	r0, r3
 800b318:	f011 f99c 	bl	801c654 <lv_mem_alloc>
 800b31c:	4602      	mov	r2, r0
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	601a      	str	r2, [r3, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6818      	ldr	r0, [r3, #0]
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	1d19      	adds	r1, r3, #4
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	791b      	ldrb	r3, [r3, #4]
 800b330:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b334:	b2db      	uxtb	r3, r3
 800b336:	3b01      	subs	r3, #1
 800b338:	009b      	lsls	r3, r3, #2
 800b33a:	461a      	mov	r2, r3
 800b33c:	f011 fc50 	bl	801cbe0 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 1;
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	791b      	ldrb	r3, [r3, #4]
 800b344:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	3b01      	subs	r3, #1
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b352:	b2d9      	uxtb	r1, r3
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	7913      	ldrb	r3, [r2, #4]
 800b358:	f361 0305 	bfi	r3, r1, #0, #6
 800b35c:	7113      	strb	r3, [r2, #4]
        }

        lv_style_t * local_style = get_alloc_local_style(list_dest);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fffe 	bl	800c360 <get_alloc_local_style>
 800b364:	60f8      	str	r0, [r7, #12]
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
 800b366:	6838      	ldr	r0, [r7, #0]
 800b368:	f000 fffa 	bl	800c360 <get_alloc_local_style>
 800b36c:	4603      	mov	r3, r0
 800b36e:	4619      	mov	r1, r3
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	f7ff fe9e 	bl	800b0b2 <lv_style_copy>
 800b376:	e000      	b.n	800b37a <lv_style_list_copy+0x1b0>
    if(list_src->style_list == NULL) return;
 800b378:	bf00      	nop
    }
}
 800b37a:	3710      	adds	r7, #16
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <_lv_style_list_add_style>:
 * (It should be static, global or dynamically allocated)
 * @param list pointer to a style list
 * @param style pointer to a style to add
 */
void _lv_style_list_add_style(lv_style_list_t * list, lv_style_t * style)
{
 800b380:	b590      	push	{r4, r7, lr}
 800b382:	b085      	sub	sp, #20
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
    LV_ASSERT_STYLE_LIST(list);
    LV_ASSERT_STYLE(style);

    if(list == NULL) return;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d07b      	beq.n	800b488 <_lv_style_list_add_style+0x108>

    /*Remove the style first if already exists*/
    _lv_style_list_remove_style(list, style);
 800b390:	6839      	ldr	r1, [r7, #0]
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 f880 	bl	800b498 <_lv_style_list_remove_style>

    lv_style_t ** new_classes;
    if(list->style_cnt == 0) new_classes = lv_mem_alloc(sizeof(lv_style_t *));
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	791b      	ldrb	r3, [r3, #4]
 800b39c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d104      	bne.n	800b3b0 <_lv_style_list_add_style+0x30>
 800b3a6:	2004      	movs	r0, #4
 800b3a8:	f011 f954 	bl	801c654 <lv_mem_alloc>
 800b3ac:	60f8      	str	r0, [r7, #12]
 800b3ae:	e00d      	b.n	800b3cc <_lv_style_list_add_style+0x4c>
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	791b      	ldrb	r3, [r3, #4]
 800b3b8:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	3301      	adds	r3, #1
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	4610      	mov	r0, r2
 800b3c6:	f011 f9e5 	bl	801c794 <lv_mem_realloc>
 800b3ca:	60f8      	str	r0, [r7, #12]
    LV_ASSERT_MEM(new_classes);
 800b3cc:	68f8      	ldr	r0, [r7, #12]
 800b3ce:	f010 fbb5 	bl	801bb3c <lv_debug_check_null>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	f083 0301 	eor.w	r3, r3, #1
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d008      	beq.n	800b3f0 <_lv_style_list_add_style+0x70>
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f04f 0400 	mov.w	r4, #0
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	4623      	mov	r3, r4
 800b3e8:	482a      	ldr	r0, [pc, #168]	; (800b494 <_lv_style_list_add_style+0x114>)
 800b3ea:	f010 fbb7 	bl	801bb5c <lv_debug_log_error>
 800b3ee:	e7fe      	b.n	800b3ee <_lv_style_list_add_style+0x6e>
    if(new_classes == NULL) {
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d04a      	beq.n	800b48c <_lv_style_list_add_style+0x10c>
        return;
    }

    /*Make space for the new style at the beginning. Leave local and trans style if exists*/
    uint8_t i;
    uint8_t first_style = 0;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	72bb      	strb	r3, [r7, #10]
    if(list->has_trans) first_style++;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	791b      	ldrb	r3, [r3, #4]
 800b3fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b402:	b2db      	uxtb	r3, r3
 800b404:	2b00      	cmp	r3, #0
 800b406:	d002      	beq.n	800b40e <_lv_style_list_add_style+0x8e>
 800b408:	7abb      	ldrb	r3, [r7, #10]
 800b40a:	3301      	adds	r3, #1
 800b40c:	72bb      	strb	r3, [r7, #10]
    if(list->has_local) first_style++;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	791b      	ldrb	r3, [r3, #4]
 800b412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b416:	b2db      	uxtb	r3, r3
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d002      	beq.n	800b422 <_lv_style_list_add_style+0xa2>
 800b41c:	7abb      	ldrb	r3, [r7, #10]
 800b41e:	3301      	adds	r3, #1
 800b420:	72bb      	strb	r3, [r7, #10]
    for(i = list->style_cnt; i > first_style; i--) {
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	791b      	ldrb	r3, [r3, #4]
 800b426:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	72fb      	strb	r3, [r7, #11]
 800b42e:	e00f      	b.n	800b450 <_lv_style_list_add_style+0xd0>
        new_classes[i] = new_classes[i - 1];
 800b430:	7afa      	ldrb	r2, [r7, #11]
 800b432:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b436:	4413      	add	r3, r2
 800b438:	009b      	lsls	r3, r3, #2
 800b43a:	68fa      	ldr	r2, [r7, #12]
 800b43c:	441a      	add	r2, r3
 800b43e:	7afb      	ldrb	r3, [r7, #11]
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	68f9      	ldr	r1, [r7, #12]
 800b444:	440b      	add	r3, r1
 800b446:	6812      	ldr	r2, [r2, #0]
 800b448:	601a      	str	r2, [r3, #0]
    for(i = list->style_cnt; i > first_style; i--) {
 800b44a:	7afb      	ldrb	r3, [r7, #11]
 800b44c:	3b01      	subs	r3, #1
 800b44e:	72fb      	strb	r3, [r7, #11]
 800b450:	7afa      	ldrb	r2, [r7, #11]
 800b452:	7abb      	ldrb	r3, [r7, #10]
 800b454:	429a      	cmp	r2, r3
 800b456:	d8eb      	bhi.n	800b430 <_lv_style_list_add_style+0xb0>
    }

    new_classes[first_style] = style;
 800b458:	7abb      	ldrb	r3, [r7, #10]
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	4413      	add	r3, r2
 800b460:	683a      	ldr	r2, [r7, #0]
 800b462:	601a      	str	r2, [r3, #0]
    list->style_cnt++;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	791b      	ldrb	r3, [r3, #4]
 800b468:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b46c:	b2db      	uxtb	r3, r3
 800b46e:	3301      	adds	r3, #1
 800b470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b474:	b2d9      	uxtb	r1, r3
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	7913      	ldrb	r3, [r2, #4]
 800b47a:	f361 0305 	bfi	r3, r1, #0, #6
 800b47e:	7113      	strb	r3, [r2, #4]
    list->style_list = new_classes;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	68fa      	ldr	r2, [r7, #12]
 800b484:	601a      	str	r2, [r3, #0]
 800b486:	e002      	b.n	800b48e <_lv_style_list_add_style+0x10e>
    if(list == NULL) return;
 800b488:	bf00      	nop
 800b48a:	e000      	b.n	800b48e <_lv_style_list_add_style+0x10e>
        return;
 800b48c:	bf00      	nop
}
 800b48e:	3714      	adds	r7, #20
 800b490:	46bd      	mov	sp, r7
 800b492:	bd90      	pop	{r4, r7, pc}
 800b494:	0802d7d4 	.word	0x0802d7d4

0800b498 <_lv_style_list_remove_style>:
 * Remove a style from a style list
 * @param style_list pointer to a style list
 * @param style pointer to a style to remove
 */
void _lv_style_list_remove_style(lv_style_list_t * list, lv_style_t * style)
{
 800b498:	b590      	push	{r4, r7, lr}
 800b49a:	b085      	sub	sp, #20
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
    LV_ASSERT_STYLE_LIST(list);
    LV_ASSERT_STYLE(style);

    if(list->style_cnt == 0) return;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	791b      	ldrb	r3, [r3, #4]
 800b4a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f000 809e 	beq.w	800b5ee <_lv_style_list_remove_style+0x156>

    /*Check if the style really exists here*/
    uint8_t i;
    bool found = false;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < list->style_cnt; i++) {
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	73fb      	strb	r3, [r7, #15]
 800b4ba:	e00e      	b.n	800b4da <_lv_style_list_remove_style+0x42>
        if(list->style_list[i] == style) {
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	7bfb      	ldrb	r3, [r7, #15]
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	4413      	add	r3, r2
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	683a      	ldr	r2, [r7, #0]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d102      	bne.n	800b4d4 <_lv_style_list_remove_style+0x3c>
            found = true;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	73bb      	strb	r3, [r7, #14]
            break;
 800b4d2:	e00b      	b.n	800b4ec <_lv_style_list_remove_style+0x54>
    for(i = 0; i < list->style_cnt; i++) {
 800b4d4:	7bfb      	ldrb	r3, [r7, #15]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	73fb      	strb	r3, [r7, #15]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	791b      	ldrb	r3, [r3, #4]
 800b4de:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	7bfb      	ldrb	r3, [r7, #15]
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d3e7      	bcc.n	800b4bc <_lv_style_list_remove_style+0x24>
        }
    }
    if(found == false) return;
 800b4ec:	7bbb      	ldrb	r3, [r7, #14]
 800b4ee:	f083 0301 	eor.w	r3, r3, #1
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d17c      	bne.n	800b5f2 <_lv_style_list_remove_style+0x15a>

    if(list->style_cnt == 1) {
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	791b      	ldrb	r3, [r3, #4]
 800b4fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b500:	b2db      	uxtb	r3, r3
 800b502:	2b01      	cmp	r3, #1
 800b504:	d112      	bne.n	800b52c <_lv_style_list_remove_style+0x94>
        lv_mem_free(list->style_list);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4618      	mov	r0, r3
 800b50c:	f011 f8ec 	bl	801c6e8 <lv_mem_free>
        list->style_list = NULL;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2200      	movs	r2, #0
 800b514:	601a      	str	r2, [r3, #0]
        list->style_cnt = 0;
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	7913      	ldrb	r3, [r2, #4]
 800b51a:	f36f 0305 	bfc	r3, #0, #6
 800b51e:	7113      	strb	r3, [r2, #4]
        list->has_local = 0;
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	7913      	ldrb	r3, [r2, #4]
 800b524:	f36f 1386 	bfc	r3, #6, #1
 800b528:	7113      	strb	r3, [r2, #4]
        return;
 800b52a:	e065      	b.n	800b5f8 <_lv_style_list_remove_style+0x160>
    }

    lv_style_t ** new_classes = lv_mem_alloc(sizeof(lv_style_t *) * (list->style_cnt - 1));
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	791b      	ldrb	r3, [r3, #4]
 800b530:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b534:	b2db      	uxtb	r3, r3
 800b536:	3b01      	subs	r3, #1
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	4618      	mov	r0, r3
 800b53c:	f011 f88a 	bl	801c654 <lv_mem_alloc>
 800b540:	60b8      	str	r0, [r7, #8]
    LV_ASSERT_MEM(new_classes);
 800b542:	68b8      	ldr	r0, [r7, #8]
 800b544:	f010 fafa 	bl	801bb3c <lv_debug_check_null>
 800b548:	4603      	mov	r3, r0
 800b54a:	f083 0301 	eor.w	r3, r3, #1
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	2b00      	cmp	r3, #0
 800b552:	d008      	beq.n	800b566 <_lv_style_list_remove_style+0xce>
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	f04f 0400 	mov.w	r4, #0
 800b55a:	461a      	mov	r2, r3
 800b55c:	4623      	mov	r3, r4
 800b55e:	4828      	ldr	r0, [pc, #160]	; (800b600 <_lv_style_list_remove_style+0x168>)
 800b560:	f010 fafc 	bl	801bb5c <lv_debug_log_error>
 800b564:	e7fe      	b.n	800b564 <_lv_style_list_remove_style+0xcc>
    if(new_classes == NULL) {
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d044      	beq.n	800b5f6 <_lv_style_list_remove_style+0x15e>
        LV_LOG_WARN("lv_style_list_remove_style: couldn't reallocate class list");
        return;
    }
    uint8_t j;
    for(i = 0, j = 0; i < list->style_cnt; i++) {
 800b56c:	2300      	movs	r3, #0
 800b56e:	73fb      	strb	r3, [r7, #15]
 800b570:	2300      	movs	r3, #0
 800b572:	737b      	strb	r3, [r7, #13]
 800b574:	e01b      	b.n	800b5ae <_lv_style_list_remove_style+0x116>
        if(list->style_list[i] == style) continue;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	7bfb      	ldrb	r3, [r7, #15]
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	4413      	add	r3, r2
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	683a      	ldr	r2, [r7, #0]
 800b584:	429a      	cmp	r2, r3
 800b586:	d00e      	beq.n	800b5a6 <_lv_style_list_remove_style+0x10e>
        new_classes[j] = list->style_list[i];
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681a      	ldr	r2, [r3, #0]
 800b58c:	7bfb      	ldrb	r3, [r7, #15]
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	441a      	add	r2, r3
 800b592:	7b7b      	ldrb	r3, [r7, #13]
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	68b9      	ldr	r1, [r7, #8]
 800b598:	440b      	add	r3, r1
 800b59a:	6812      	ldr	r2, [r2, #0]
 800b59c:	601a      	str	r2, [r3, #0]
        j++;
 800b59e:	7b7b      	ldrb	r3, [r7, #13]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	737b      	strb	r3, [r7, #13]
 800b5a4:	e000      	b.n	800b5a8 <_lv_style_list_remove_style+0x110>
        if(list->style_list[i] == style) continue;
 800b5a6:	bf00      	nop
    for(i = 0, j = 0; i < list->style_cnt; i++) {
 800b5a8:	7bfb      	ldrb	r3, [r7, #15]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	73fb      	strb	r3, [r7, #15]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	791b      	ldrb	r3, [r3, #4]
 800b5b2:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	7bfb      	ldrb	r3, [r7, #15]
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d3da      	bcc.n	800b576 <_lv_style_list_remove_style+0xde>

    }

    lv_mem_free(list->style_list);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f011 f88f 	bl	801c6e8 <lv_mem_free>

    list->style_cnt--;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	791b      	ldrb	r3, [r3, #4]
 800b5ce:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	333f      	adds	r3, #63	; 0x3f
 800b5d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5da:	b2d9      	uxtb	r1, r3
 800b5dc:	687a      	ldr	r2, [r7, #4]
 800b5de:	7913      	ldrb	r3, [r2, #4]
 800b5e0:	f361 0305 	bfi	r3, r1, #0, #6
 800b5e4:	7113      	strb	r3, [r2, #4]
    list->style_list = new_classes;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	68ba      	ldr	r2, [r7, #8]
 800b5ea:	601a      	str	r2, [r3, #0]
 800b5ec:	e004      	b.n	800b5f8 <_lv_style_list_remove_style+0x160>
    if(list->style_cnt == 0) return;
 800b5ee:	bf00      	nop
 800b5f0:	e002      	b.n	800b5f8 <_lv_style_list_remove_style+0x160>
    if(found == false) return;
 800b5f2:	bf00      	nop
 800b5f4:	e000      	b.n	800b5f8 <_lv_style_list_remove_style+0x160>
        return;
 800b5f6:	bf00      	nop
}
 800b5f8:	3714      	adds	r7, #20
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd90      	pop	{r4, r7, pc}
 800b5fe:	bf00      	nop
 800b600:	0802d7d4 	.word	0x0802d7d4

0800b604 <_lv_style_list_reset>:
 * Remove all styles added from style list, clear the local style, transition style and free all allocated memories.
 * Leave `ignore_trans` flag as it is.
 * @param list pointer to a style list.
 */
void _lv_style_list_reset(lv_style_list_t * list)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE_LIST(list);

    if(list == NULL) return;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d04b      	beq.n	800b6aa <_lv_style_list_reset+0xa6>

    if(list->has_local) {
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	791b      	ldrb	r3, [r3, #4]
 800b616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d00c      	beq.n	800b63a <_lv_style_list_reset+0x36>
        lv_style_t * local = lv_style_list_get_local_style(list);
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 fbc3 	bl	800bdac <lv_style_list_get_local_style>
 800b626:	60f8      	str	r0, [r7, #12]
        if(local) {
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d005      	beq.n	800b63a <_lv_style_list_reset+0x36>
            lv_style_reset(local);
 800b62e:	68f8      	ldr	r0, [r7, #12]
 800b630:	f000 f83f 	bl	800b6b2 <lv_style_reset>
            lv_mem_free(local);
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	f011 f857 	bl	801c6e8 <lv_mem_free>
        }
    }

    if(list->has_trans) {
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	791b      	ldrb	r3, [r3, #4]
 800b63e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b642:	b2db      	uxtb	r3, r3
 800b644:	2b00      	cmp	r3, #0
 800b646:	d00c      	beq.n	800b662 <_lv_style_list_reset+0x5e>
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 fbd0 	bl	800bdee <_lv_style_list_get_transition_style>
 800b64e:	60b8      	str	r0, [r7, #8]
        if(trans) {
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d005      	beq.n	800b662 <_lv_style_list_reset+0x5e>
            lv_style_reset(trans);
 800b656:	68b8      	ldr	r0, [r7, #8]
 800b658:	f000 f82b 	bl	800b6b2 <lv_style_reset>
            lv_mem_free(trans);
 800b65c:	68b8      	ldr	r0, [r7, #8]
 800b65e:	f011 f843 	bl	801c6e8 <lv_mem_free>
        }
    }

    if(list->style_cnt > 0) lv_mem_free(list->style_list);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	791b      	ldrb	r3, [r3, #4]
 800b666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d004      	beq.n	800b67a <_lv_style_list_reset+0x76>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4618      	mov	r0, r3
 800b676:	f011 f837 	bl	801c6e8 <lv_mem_free>
    list->style_list = NULL;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2200      	movs	r2, #0
 800b67e:	601a      	str	r2, [r3, #0]
    list->style_cnt = 0;
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	7913      	ldrb	r3, [r2, #4]
 800b684:	f36f 0305 	bfc	r3, #0, #6
 800b688:	7113      	strb	r3, [r2, #4]
    list->has_local = 0;
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	7913      	ldrb	r3, [r2, #4]
 800b68e:	f36f 1386 	bfc	r3, #6, #1
 800b692:	7113      	strb	r3, [r2, #4]
    list->has_trans = 0;
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	7913      	ldrb	r3, [r2, #4]
 800b698:	f36f 13c7 	bfc	r3, #7, #1
 800b69c:	7113      	strb	r3, [r2, #4]
    list->skip_trans = 0;
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	7953      	ldrb	r3, [r2, #5]
 800b6a2:	f36f 0300 	bfc	r3, #0, #1
 800b6a6:	7153      	strb	r3, [r2, #5]
 800b6a8:	e000      	b.n	800b6ac <_lv_style_list_reset+0xa8>
    if(list == NULL) return;
 800b6aa:	bf00      	nop

    /* Intentionally leave `ignore_trans` as it is,
     * because it's independent from the styles in the list*/
}
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <lv_style_reset>:
/**
 * Clear all properties from a style and all allocated memories.
 * @param style pointer to a style
 */
void lv_style_reset(lv_style_t * style)
{
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b082      	sub	sp, #8
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE(style);

    lv_mem_free(style->map);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f011 f812 	bl	801c6e8 <lv_mem_free>
    style->map = NULL;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	601a      	str	r2, [r3, #0]
}
 800b6ca:	bf00      	nop
 800b6cc:	3708      	adds	r7, #8
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <_lv_style_get_mem_size>:
 * Get the size of the properties in a style in bytes
 * @param style pointer to a style
 * @return size of the properties in bytes
 */
uint16_t _lv_style_get_mem_size(const lv_style_t * style)
{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b084      	sub	sp, #16
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE(style);

    if(style->map == NULL) return 0;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d101      	bne.n	800b6e6 <_lv_style_get_mem_size+0x14>
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	e015      	b.n	800b712 <_lv_style_get_mem_size+0x40>

    size_t i = 0;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	60fb      	str	r3, [r7, #12]
    uint8_t prop_id;
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 800b6ea:	e005      	b.n	800b6f8 <_lv_style_get_mem_size+0x26>
        i = get_next_prop_index(prop_id, i);
 800b6ec:	7afb      	ldrb	r3, [r7, #11]
 800b6ee:	68f9      	ldr	r1, [r7, #12]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f000 fef4 	bl	800c4de <get_next_prop_index>
 800b6f6:	60f8      	str	r0, [r7, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 800b6f8:	68f9      	ldr	r1, [r7, #12]
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 fea5 	bl	800c44a <get_style_prop_id>
 800b700:	4603      	mov	r3, r0
 800b702:	72fb      	strb	r3, [r7, #11]
 800b704:	7afb      	ldrb	r3, [r7, #11]
 800b706:	2bff      	cmp	r3, #255	; 0xff
 800b708:	d1f0      	bne.n	800b6ec <_lv_style_get_mem_size+0x1a>
    }

    return i + sizeof(lv_style_property_t);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	3302      	adds	r3, #2
 800b710:	b29b      	uxth	r3, r3
}
 800b712:	4618      	mov	r0, r3
 800b714:	3710      	adds	r7, #16
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
	...

0800b71c <_lv_style_set_int>:
 * @note shouldn't be used directly. Use the specific property set functions instead.
 *       For example: `lv_style_set_border_width()`
 * @note for performance reasons it's not checked if the property really has integer type
 */
void _lv_style_set_int(lv_style_t * style, lv_style_property_t prop, lv_style_int_t value)
{
 800b71c:	b590      	push	{r4, r7, lr}
 800b71e:	b087      	sub	sp, #28
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	460b      	mov	r3, r1
 800b726:	807b      	strh	r3, [r7, #2]
 800b728:	4613      	mov	r3, r2
 800b72a:	803b      	strh	r3, [r7, #0]
    LV_ASSERT_STYLE(style);

    int32_t id = get_property_index(style, prop);
 800b72c:	887b      	ldrh	r3, [r7, #2]
 800b72e:	4619      	mov	r1, r3
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 fdb8 	bl	800c2a6 <get_property_index>
 800b736:	6138      	str	r0, [r7, #16]
    /*The property already exists but not sure it's state is the same*/
    if(id >= 0) {
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	db1d      	blt.n	800b77a <_lv_style_set_int+0x5e>
        lv_style_attr_t attr_found;
        lv_style_attr_t attr_goal;

        attr_found = get_style_prop_attr(style, id);
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	4619      	mov	r1, r3
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 fe90 	bl	800c468 <get_style_prop_attr>
 800b748:	4603      	mov	r3, r0
 800b74a:	73fb      	strb	r3, [r7, #15]
        attr_goal = (prop >> 8) & 0xFFU;
 800b74c:	887b      	ldrh	r3, [r7, #2]
 800b74e:	0a1b      	lsrs	r3, r3, #8
 800b750:	b29b      	uxth	r3, r3
 800b752:	73bb      	strb	r3, [r7, #14]

        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 800b754:	7bfa      	ldrb	r2, [r7, #15]
 800b756:	7bbb      	ldrb	r3, [r7, #14]
 800b758:	4053      	eors	r3, r2
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b760:	2b00      	cmp	r3, #0
 800b762:	d10a      	bne.n	800b77a <_lv_style_set_int+0x5e>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	3302      	adds	r3, #2
 800b76c:	4413      	add	r3, r2
 800b76e:	4639      	mov	r1, r7
 800b770:	2202      	movs	r2, #2
 800b772:	4618      	mov	r0, r3
 800b774:	f7ff fc3a 	bl	800afec <_lv_memcpy_small>
            return;
 800b778:	e059      	b.n	800b82e <_lv_style_set_int+0x112>
        }
    }

    /*Add new property if not exists yet*/
    uint8_t new_prop_size = (sizeof(lv_style_property_t) + sizeof(lv_style_int_t));
 800b77a:	2304      	movs	r3, #4
 800b77c:	737b      	strb	r3, [r7, #13]
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 800b77e:	23ff      	movs	r3, #255	; 0xff
 800b780:	817b      	strh	r3, [r7, #10]
    uint8_t end_mark_size = sizeof(end_mark);
 800b782:	2302      	movs	r3, #2
 800b784:	733b      	strb	r3, [r7, #12]

    uint16_t size = _lv_style_get_mem_size(style);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f7ff ffa3 	bl	800b6d2 <_lv_style_get_mem_size>
 800b78c:	4603      	mov	r3, r0
 800b78e:	82fb      	strh	r3, [r7, #22]
    if(size == 0) size += end_mark_size;
 800b790:	8afb      	ldrh	r3, [r7, #22]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d104      	bne.n	800b7a0 <_lv_style_set_int+0x84>
 800b796:	7b3b      	ldrb	r3, [r7, #12]
 800b798:	b29a      	uxth	r2, r3
 800b79a:	8afb      	ldrh	r3, [r7, #22]
 800b79c:	4413      	add	r3, r2
 800b79e:	82fb      	strh	r3, [r7, #22]
    size += sizeof(lv_style_property_t) + sizeof(lv_style_int_t);
 800b7a0:	8afb      	ldrh	r3, [r7, #22]
 800b7a2:	3304      	adds	r3, #4
 800b7a4:	82fb      	strh	r3, [r7, #22]
    style_resize(style, size);
 800b7a6:	8afb      	ldrh	r3, [r7, #22]
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 fe1c 	bl	800c3e8 <style_resize>
    LV_ASSERT_MEM(style->map);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f010 f9c1 	bl	801bb3c <lv_debug_check_null>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	f083 0301 	eor.w	r3, r3, #1
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d009      	beq.n	800b7da <_lv_style_set_int+0xbe>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f04f 0400 	mov.w	r4, #0
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	4623      	mov	r3, r4
 800b7d2:	4818      	ldr	r0, [pc, #96]	; (800b834 <_lv_style_set_int+0x118>)
 800b7d4:	f010 f9c2 	bl	801bb5c <lv_debug_log_error>
 800b7d8:	e7fe      	b.n	800b7d8 <_lv_style_set_int+0xbc>
    if(style == NULL) return;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d025      	beq.n	800b82c <_lv_style_set_int+0x110>

    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681a      	ldr	r2, [r3, #0]
 800b7e4:	8af9      	ldrh	r1, [r7, #22]
 800b7e6:	7b7b      	ldrb	r3, [r7, #13]
 800b7e8:	1ac9      	subs	r1, r1, r3
 800b7ea:	7b3b      	ldrb	r3, [r7, #12]
 800b7ec:	1acb      	subs	r3, r1, r3
 800b7ee:	4413      	add	r3, r2
 800b7f0:	1cb9      	adds	r1, r7, #2
 800b7f2:	2202      	movs	r2, #2
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7ff fbf9 	bl	800afec <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	8af9      	ldrh	r1, [r7, #22]
 800b800:	7b3b      	ldrb	r3, [r7, #12]
 800b802:	1acb      	subs	r3, r1, r3
 800b804:	3b02      	subs	r3, #2
 800b806:	4413      	add	r3, r2
 800b808:	4639      	mov	r1, r7
 800b80a:	2202      	movs	r2, #2
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7ff fbed 	bl	800afec <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	8af9      	ldrh	r1, [r7, #22]
 800b818:	7b3b      	ldrb	r3, [r7, #12]
 800b81a:	1acb      	subs	r3, r1, r3
 800b81c:	4413      	add	r3, r2
 800b81e:	f107 010a 	add.w	r1, r7, #10
 800b822:	2202      	movs	r2, #2
 800b824:	4618      	mov	r0, r3
 800b826:	f7ff fbe1 	bl	800afec <_lv_memcpy_small>
 800b82a:	e000      	b.n	800b82e <_lv_style_set_int+0x112>
    if(style == NULL) return;
 800b82c:	bf00      	nop
}
 800b82e:	371c      	adds	r7, #28
 800b830:	46bd      	mov	sp, r7
 800b832:	bd90      	pop	{r4, r7, pc}
 800b834:	0802d7d4 	.word	0x0802d7d4

0800b838 <_lv_style_set_color>:
 * @note shouldn't be used directly. Use the specific property set functions instead.
 *       For example: `lv_style_set_border_color()`
 * @note for performance reasons it's not checked if the property really has color type
 */
void _lv_style_set_color(lv_style_t * style, lv_style_property_t prop, lv_color_t color)
{
 800b838:	b590      	push	{r4, r7, lr}
 800b83a:	b089      	sub	sp, #36	; 0x24
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	460b      	mov	r3, r1
 800b842:	607a      	str	r2, [r7, #4]
 800b844:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_STYLE(style);

    int32_t id = get_property_index(style, prop);
 800b846:	897b      	ldrh	r3, [r7, #10]
 800b848:	4619      	mov	r1, r3
 800b84a:	68f8      	ldr	r0, [r7, #12]
 800b84c:	f000 fd2b 	bl	800c2a6 <get_property_index>
 800b850:	61b8      	str	r0, [r7, #24]
    /*The property already exists but not sure it's state is the same*/
    if(id >= 0) {
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	2b00      	cmp	r3, #0
 800b856:	db1d      	blt.n	800b894 <_lv_style_set_color+0x5c>
        lv_style_attr_t attr_found;
        lv_style_attr_t attr_goal;

        attr_found = get_style_prop_attr(style, id);
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	4619      	mov	r1, r3
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	f000 fe03 	bl	800c468 <get_style_prop_attr>
 800b862:	4603      	mov	r3, r0
 800b864:	75fb      	strb	r3, [r7, #23]
        attr_goal = (prop >> 8) & 0xFFU;
 800b866:	897b      	ldrh	r3, [r7, #10]
 800b868:	0a1b      	lsrs	r3, r3, #8
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	75bb      	strb	r3, [r7, #22]

        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 800b86e:	7dfa      	ldrb	r2, [r7, #23]
 800b870:	7dbb      	ldrb	r3, [r7, #22]
 800b872:	4053      	eors	r3, r2
 800b874:	b2db      	uxtb	r3, r3
 800b876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d10a      	bne.n	800b894 <_lv_style_set_color+0x5c>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	69bb      	ldr	r3, [r7, #24]
 800b884:	3302      	adds	r3, #2
 800b886:	4413      	add	r3, r2
 800b888:	1d39      	adds	r1, r7, #4
 800b88a:	2204      	movs	r2, #4
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7ff fbad 	bl	800afec <_lv_memcpy_small>
            return;
 800b892:	e05a      	b.n	800b94a <_lv_style_set_color+0x112>
        }
    }

    /*Add new property if not exists yet*/
    uint8_t new_prop_size = (sizeof(lv_style_property_t) + sizeof(lv_color_t));
 800b894:	2306      	movs	r3, #6
 800b896:	757b      	strb	r3, [r7, #21]
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 800b898:	23ff      	movs	r3, #255	; 0xff
 800b89a:	827b      	strh	r3, [r7, #18]
    uint8_t end_mark_size = sizeof(end_mark);
 800b89c:	2302      	movs	r3, #2
 800b89e:	753b      	strb	r3, [r7, #20]

    uint16_t size = _lv_style_get_mem_size(style);
 800b8a0:	68f8      	ldr	r0, [r7, #12]
 800b8a2:	f7ff ff16 	bl	800b6d2 <_lv_style_get_mem_size>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	83fb      	strh	r3, [r7, #30]
    if(size == 0) size += end_mark_size;
 800b8aa:	8bfb      	ldrh	r3, [r7, #30]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d104      	bne.n	800b8ba <_lv_style_set_color+0x82>
 800b8b0:	7d3b      	ldrb	r3, [r7, #20]
 800b8b2:	b29a      	uxth	r2, r3
 800b8b4:	8bfb      	ldrh	r3, [r7, #30]
 800b8b6:	4413      	add	r3, r2
 800b8b8:	83fb      	strh	r3, [r7, #30]

    size += sizeof(lv_style_property_t) + sizeof(lv_color_t);
 800b8ba:	8bfb      	ldrh	r3, [r7, #30]
 800b8bc:	3306      	adds	r3, #6
 800b8be:	83fb      	strh	r3, [r7, #30]
    style_resize(style, size);
 800b8c0:	8bfb      	ldrh	r3, [r7, #30]
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	68f8      	ldr	r0, [r7, #12]
 800b8c6:	f000 fd8f 	bl	800c3e8 <style_resize>
    LV_ASSERT_MEM(style->map);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f010 f934 	bl	801bb3c <lv_debug_check_null>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	f083 0301 	eor.w	r3, r3, #1
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d009      	beq.n	800b8f4 <_lv_style_set_color+0xbc>
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f04f 0400 	mov.w	r4, #0
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	4623      	mov	r3, r4
 800b8ec:	4818      	ldr	r0, [pc, #96]	; (800b950 <_lv_style_set_color+0x118>)
 800b8ee:	f010 f935 	bl	801bb5c <lv_debug_log_error>
 800b8f2:	e7fe      	b.n	800b8f2 <_lv_style_set_color+0xba>
    if(style == NULL) return;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d026      	beq.n	800b948 <_lv_style_set_color+0x110>

    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	8bf9      	ldrh	r1, [r7, #30]
 800b900:	7d7b      	ldrb	r3, [r7, #21]
 800b902:	1ac9      	subs	r1, r1, r3
 800b904:	7d3b      	ldrb	r3, [r7, #20]
 800b906:	1acb      	subs	r3, r1, r3
 800b908:	4413      	add	r3, r2
 800b90a:	f107 010a 	add.w	r1, r7, #10
 800b90e:	2202      	movs	r2, #2
 800b910:	4618      	mov	r0, r3
 800b912:	f7ff fb6b 	bl	800afec <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	8bf9      	ldrh	r1, [r7, #30]
 800b91c:	7d3b      	ldrb	r3, [r7, #20]
 800b91e:	1acb      	subs	r3, r1, r3
 800b920:	3b04      	subs	r3, #4
 800b922:	4413      	add	r3, r2
 800b924:	1d39      	adds	r1, r7, #4
 800b926:	2204      	movs	r2, #4
 800b928:	4618      	mov	r0, r3
 800b92a:	f7ff fb5f 	bl	800afec <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	8bf9      	ldrh	r1, [r7, #30]
 800b934:	7d3b      	ldrb	r3, [r7, #20]
 800b936:	1acb      	subs	r3, r1, r3
 800b938:	4413      	add	r3, r2
 800b93a:	f107 0112 	add.w	r1, r7, #18
 800b93e:	2202      	movs	r2, #2
 800b940:	4618      	mov	r0, r3
 800b942:	f7ff fb53 	bl	800afec <_lv_memcpy_small>
 800b946:	e000      	b.n	800b94a <_lv_style_set_color+0x112>
    if(style == NULL) return;
 800b948:	bf00      	nop
}
 800b94a:	3724      	adds	r7, #36	; 0x24
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd90      	pop	{r4, r7, pc}
 800b950:	0802d7d4 	.word	0x0802d7d4

0800b954 <_lv_style_set_opa>:
 * @note shouldn't be used directly. Use the specific property set functions instead.
 *       For example: `lv_style_set_border_opa()`
 * @note for performance reasons it's not checked if the property really has opacity type
 */
void _lv_style_set_opa(lv_style_t * style, lv_style_property_t prop, lv_opa_t opa)
{
 800b954:	b590      	push	{r4, r7, lr}
 800b956:	b087      	sub	sp, #28
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	460b      	mov	r3, r1
 800b95e:	807b      	strh	r3, [r7, #2]
 800b960:	4613      	mov	r3, r2
 800b962:	707b      	strb	r3, [r7, #1]
    LV_ASSERT_STYLE(style);

    int32_t id = get_property_index(style, prop);
 800b964:	887b      	ldrh	r3, [r7, #2]
 800b966:	4619      	mov	r1, r3
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f000 fc9c 	bl	800c2a6 <get_property_index>
 800b96e:	6138      	str	r0, [r7, #16]
    /*The property already exists but not sure it's state is the same*/
    if(id >= 0) {
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	2b00      	cmp	r3, #0
 800b974:	db1d      	blt.n	800b9b2 <_lv_style_set_opa+0x5e>
        lv_style_attr_t attr_found;
        lv_style_attr_t attr_goal;

        attr_found = get_style_prop_attr(style, id);
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	4619      	mov	r1, r3
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f000 fd74 	bl	800c468 <get_style_prop_attr>
 800b980:	4603      	mov	r3, r0
 800b982:	73fb      	strb	r3, [r7, #15]
        attr_goal = (prop >> 8) & 0xFFU;
 800b984:	887b      	ldrh	r3, [r7, #2]
 800b986:	0a1b      	lsrs	r3, r3, #8
 800b988:	b29b      	uxth	r3, r3
 800b98a:	73bb      	strb	r3, [r7, #14]

        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 800b98c:	7bfa      	ldrb	r2, [r7, #15]
 800b98e:	7bbb      	ldrb	r3, [r7, #14]
 800b990:	4053      	eors	r3, r2
 800b992:	b2db      	uxtb	r3, r3
 800b994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d10a      	bne.n	800b9b2 <_lv_style_set_opa+0x5e>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &opa, sizeof(lv_opa_t));
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	3302      	adds	r3, #2
 800b9a4:	4413      	add	r3, r2
 800b9a6:	1c79      	adds	r1, r7, #1
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7ff fb1e 	bl	800afec <_lv_memcpy_small>
            return;
 800b9b0:	e059      	b.n	800ba66 <_lv_style_set_opa+0x112>
        }
    }

    /*Add new property if not exists yet*/
    uint8_t new_prop_size = (sizeof(lv_style_property_t) + sizeof(lv_opa_t));
 800b9b2:	2303      	movs	r3, #3
 800b9b4:	737b      	strb	r3, [r7, #13]
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 800b9b6:	23ff      	movs	r3, #255	; 0xff
 800b9b8:	817b      	strh	r3, [r7, #10]
    uint8_t end_mark_size = sizeof(end_mark);
 800b9ba:	2302      	movs	r3, #2
 800b9bc:	733b      	strb	r3, [r7, #12]

    uint16_t size = _lv_style_get_mem_size(style);
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f7ff fe87 	bl	800b6d2 <_lv_style_get_mem_size>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	82fb      	strh	r3, [r7, #22]
    if(size == 0) size += end_mark_size;
 800b9c8:	8afb      	ldrh	r3, [r7, #22]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d104      	bne.n	800b9d8 <_lv_style_set_opa+0x84>
 800b9ce:	7b3b      	ldrb	r3, [r7, #12]
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	8afb      	ldrh	r3, [r7, #22]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	82fb      	strh	r3, [r7, #22]

    size += sizeof(lv_style_property_t) + sizeof(lv_opa_t);
 800b9d8:	8afb      	ldrh	r3, [r7, #22]
 800b9da:	3303      	adds	r3, #3
 800b9dc:	82fb      	strh	r3, [r7, #22]
    style_resize(style, size);
 800b9de:	8afb      	ldrh	r3, [r7, #22]
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 fd00 	bl	800c3e8 <style_resize>
    LV_ASSERT_MEM(style->map);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f010 f8a5 	bl	801bb3c <lv_debug_check_null>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	f083 0301 	eor.w	r3, r3, #1
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d009      	beq.n	800ba12 <_lv_style_set_opa+0xbe>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f04f 0400 	mov.w	r4, #0
 800ba06:	461a      	mov	r2, r3
 800ba08:	4623      	mov	r3, r4
 800ba0a:	4818      	ldr	r0, [pc, #96]	; (800ba6c <_lv_style_set_opa+0x118>)
 800ba0c:	f010 f8a6 	bl	801bb5c <lv_debug_log_error>
 800ba10:	e7fe      	b.n	800ba10 <_lv_style_set_opa+0xbc>
    if(style == NULL) return;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d025      	beq.n	800ba64 <_lv_style_set_opa+0x110>

    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	8af9      	ldrh	r1, [r7, #22]
 800ba1e:	7b7b      	ldrb	r3, [r7, #13]
 800ba20:	1ac9      	subs	r1, r1, r3
 800ba22:	7b3b      	ldrb	r3, [r7, #12]
 800ba24:	1acb      	subs	r3, r1, r3
 800ba26:	4413      	add	r3, r2
 800ba28:	1cb9      	adds	r1, r7, #2
 800ba2a:	2202      	movs	r2, #2
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7ff fadd 	bl	800afec <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	8af9      	ldrh	r1, [r7, #22]
 800ba38:	7b3b      	ldrb	r3, [r7, #12]
 800ba3a:	1acb      	subs	r3, r1, r3
 800ba3c:	3b01      	subs	r3, #1
 800ba3e:	4413      	add	r3, r2
 800ba40:	1c79      	adds	r1, r7, #1
 800ba42:	2201      	movs	r2, #1
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7ff fad1 	bl	800afec <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	8af9      	ldrh	r1, [r7, #22]
 800ba50:	7b3b      	ldrb	r3, [r7, #12]
 800ba52:	1acb      	subs	r3, r1, r3
 800ba54:	4413      	add	r3, r2
 800ba56:	f107 010a 	add.w	r1, r7, #10
 800ba5a:	2202      	movs	r2, #2
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7ff fac5 	bl	800afec <_lv_memcpy_small>
 800ba62:	e000      	b.n	800ba66 <_lv_style_set_opa+0x112>
    if(style == NULL) return;
 800ba64:	bf00      	nop
}
 800ba66:	371c      	adds	r7, #28
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd90      	pop	{r4, r7, pc}
 800ba6c:	0802d7d4 	.word	0x0802d7d4

0800ba70 <_lv_style_set_ptr>:
 * @note shouldn't be used directly. Use the specific property set functions instead.
 *       For example: `lv_style_set_border_width()`
 * @note for performance reasons it's not checked if the property is really has pointer type
 */
void _lv_style_set_ptr(lv_style_t * style, lv_style_property_t prop, const void * p)
{
 800ba70:	b590      	push	{r4, r7, lr}
 800ba72:	b089      	sub	sp, #36	; 0x24
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	460b      	mov	r3, r1
 800ba7a:	607a      	str	r2, [r7, #4]
 800ba7c:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_STYLE(style);

    int32_t id = get_property_index(style, prop);
 800ba7e:	897b      	ldrh	r3, [r7, #10]
 800ba80:	4619      	mov	r1, r3
 800ba82:	68f8      	ldr	r0, [r7, #12]
 800ba84:	f000 fc0f 	bl	800c2a6 <get_property_index>
 800ba88:	61b8      	str	r0, [r7, #24]
    /*The property already exists but not sure it's state is the same*/
    if(id >= 0) {
 800ba8a:	69bb      	ldr	r3, [r7, #24]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	db1d      	blt.n	800bacc <_lv_style_set_ptr+0x5c>
        lv_style_attr_t attr_found;
        lv_style_attr_t attr_goal;

        attr_found = get_style_prop_attr(style, id);
 800ba90:	69bb      	ldr	r3, [r7, #24]
 800ba92:	4619      	mov	r1, r3
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f000 fce7 	bl	800c468 <get_style_prop_attr>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	75fb      	strb	r3, [r7, #23]
        attr_goal = (prop >> 8) & 0xFFU;
 800ba9e:	897b      	ldrh	r3, [r7, #10]
 800baa0:	0a1b      	lsrs	r3, r3, #8
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	75bb      	strb	r3, [r7, #22]

        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
 800baa6:	7dfa      	ldrb	r2, [r7, #23]
 800baa8:	7dbb      	ldrb	r3, [r7, #22]
 800baaa:	4053      	eors	r3, r2
 800baac:	b2db      	uxtb	r3, r3
 800baae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d10a      	bne.n	800bacc <_lv_style_set_ptr+0x5c>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &p, sizeof(const void *));
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	3302      	adds	r3, #2
 800babe:	4413      	add	r3, r2
 800bac0:	1d39      	adds	r1, r7, #4
 800bac2:	2204      	movs	r2, #4
 800bac4:	4618      	mov	r0, r3
 800bac6:	f7ff fa91 	bl	800afec <_lv_memcpy_small>
            return;
 800baca:	e05a      	b.n	800bb82 <_lv_style_set_ptr+0x112>
        }
    }

    /*Add new property if not exists yet*/
    uint8_t new_prop_size = (sizeof(lv_style_property_t) + sizeof(const void *));
 800bacc:	2306      	movs	r3, #6
 800bace:	757b      	strb	r3, [r7, #21]
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
 800bad0:	23ff      	movs	r3, #255	; 0xff
 800bad2:	827b      	strh	r3, [r7, #18]
    uint8_t end_mark_size = sizeof(end_mark);
 800bad4:	2302      	movs	r3, #2
 800bad6:	753b      	strb	r3, [r7, #20]

    uint16_t size = _lv_style_get_mem_size(style);
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	f7ff fdfa 	bl	800b6d2 <_lv_style_get_mem_size>
 800bade:	4603      	mov	r3, r0
 800bae0:	83fb      	strh	r3, [r7, #30]
    if(size == 0) size += end_mark_size;
 800bae2:	8bfb      	ldrh	r3, [r7, #30]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d104      	bne.n	800baf2 <_lv_style_set_ptr+0x82>
 800bae8:	7d3b      	ldrb	r3, [r7, #20]
 800baea:	b29a      	uxth	r2, r3
 800baec:	8bfb      	ldrh	r3, [r7, #30]
 800baee:	4413      	add	r3, r2
 800baf0:	83fb      	strh	r3, [r7, #30]

    size += sizeof(lv_style_property_t) + sizeof(const void *);
 800baf2:	8bfb      	ldrh	r3, [r7, #30]
 800baf4:	3306      	adds	r3, #6
 800baf6:	83fb      	strh	r3, [r7, #30]
    style_resize(style, size);
 800baf8:	8bfb      	ldrh	r3, [r7, #30]
 800bafa:	4619      	mov	r1, r3
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f000 fc73 	bl	800c3e8 <style_resize>
    LV_ASSERT_MEM(style->map);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	4618      	mov	r0, r3
 800bb08:	f010 f818 	bl	801bb3c <lv_debug_check_null>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	f083 0301 	eor.w	r3, r3, #1
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d009      	beq.n	800bb2c <_lv_style_set_ptr+0xbc>
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f04f 0400 	mov.w	r4, #0
 800bb20:	461a      	mov	r2, r3
 800bb22:	4623      	mov	r3, r4
 800bb24:	4818      	ldr	r0, [pc, #96]	; (800bb88 <_lv_style_set_ptr+0x118>)
 800bb26:	f010 f819 	bl	801bb5c <lv_debug_log_error>
 800bb2a:	e7fe      	b.n	800bb2a <_lv_style_set_ptr+0xba>
    if(style == NULL) return;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d026      	beq.n	800bb80 <_lv_style_set_ptr+0x110>

    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	8bf9      	ldrh	r1, [r7, #30]
 800bb38:	7d7b      	ldrb	r3, [r7, #21]
 800bb3a:	1ac9      	subs	r1, r1, r3
 800bb3c:	7d3b      	ldrb	r3, [r7, #20]
 800bb3e:	1acb      	subs	r3, r1, r3
 800bb40:	4413      	add	r3, r2
 800bb42:	f107 010a 	add.w	r1, r7, #10
 800bb46:	2202      	movs	r2, #2
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7ff fa4f 	bl	800afec <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	8bf9      	ldrh	r1, [r7, #30]
 800bb54:	7d3b      	ldrb	r3, [r7, #20]
 800bb56:	1acb      	subs	r3, r1, r3
 800bb58:	3b04      	subs	r3, #4
 800bb5a:	4413      	add	r3, r2
 800bb5c:	1d39      	adds	r1, r7, #4
 800bb5e:	2204      	movs	r2, #4
 800bb60:	4618      	mov	r0, r3
 800bb62:	f7ff fa43 	bl	800afec <_lv_memcpy_small>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	8bf9      	ldrh	r1, [r7, #30]
 800bb6c:	7d3b      	ldrb	r3, [r7, #20]
 800bb6e:	1acb      	subs	r3, r1, r3
 800bb70:	4413      	add	r3, r2
 800bb72:	f107 0112 	add.w	r1, r7, #18
 800bb76:	2202      	movs	r2, #2
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7ff fa37 	bl	800afec <_lv_memcpy_small>
 800bb7e:	e000      	b.n	800bb82 <_lv_style_set_ptr+0x112>
    if(style == NULL) return;
 800bb80:	bf00      	nop
}
 800bb82:	3724      	adds	r7, #36	; 0x24
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd90      	pop	{r4, r7, pc}
 800bb88:	0802d7d4 	.word	0x0802d7d4

0800bb8c <_lv_style_get_int>:
 * @return the weight of the found property (how well it fits to the style state).
 *         Higher number is means better fit
 *         -1 if the not found (`res` will be undefined)
 */
int16_t _lv_style_get_int(const lv_style_t * style, lv_style_property_t prop, void * v_res)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b088      	sub	sp, #32
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	460b      	mov	r3, r1
 800bb96:	607a      	str	r2, [r7, #4]
 800bb98:	817b      	strh	r3, [r7, #10]
    lv_style_int_t * res = (lv_style_int_t *)v_res;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	61fb      	str	r3, [r7, #28]
    LV_ASSERT_STYLE(style);

    if(style == NULL) return -1;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d102      	bne.n	800bbaa <_lv_style_get_int+0x1e>
 800bba4:	f04f 33ff 	mov.w	r3, #4294967295
 800bba8:	e030      	b.n	800bc0c <_lv_style_get_int+0x80>
    if(style->map == NULL) return -1;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d102      	bne.n	800bbb8 <_lv_style_get_int+0x2c>
 800bbb2:	f04f 33ff 	mov.w	r3, #4294967295
 800bbb6:	e029      	b.n	800bc0c <_lv_style_get_int+0x80>

    int32_t id = get_property_index(style, prop);
 800bbb8:	897b      	ldrh	r3, [r7, #10]
 800bbba:	4619      	mov	r1, r3
 800bbbc:	68f8      	ldr	r0, [r7, #12]
 800bbbe:	f000 fb72 	bl	800c2a6 <get_property_index>
 800bbc2:	61b8      	str	r0, [r7, #24]
    if(id < 0) {
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	da02      	bge.n	800bbd0 <_lv_style_get_int+0x44>
        return -1;
 800bbca:	f04f 33ff 	mov.w	r3, #4294967295
 800bbce:	e01d      	b.n	800bc0c <_lv_style_get_int+0x80>
    }
    else {
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	69bb      	ldr	r3, [r7, #24]
 800bbd6:	3302      	adds	r3, #2
 800bbd8:	4413      	add	r3, r2
 800bbda:	2202      	movs	r2, #2
 800bbdc:	4619      	mov	r1, r3
 800bbde:	69f8      	ldr	r0, [r7, #28]
 800bbe0:	f7ff fa04 	bl	800afec <_lv_memcpy_small>
        lv_style_attr_t attr_act;
        attr_act = get_style_prop_attr(style, id);
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	f000 fc3d 	bl	800c468 <get_style_prop_attr>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	75fb      	strb	r3, [r7, #23]

        lv_style_attr_t attr_goal;
        attr_goal = (prop >> 8) & 0xFF;
 800bbf2:	897b      	ldrh	r3, [r7, #10]
 800bbf4:	0a1b      	lsrs	r3, r3, #8
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	75bb      	strb	r3, [r7, #22]

        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
 800bbfa:	7dfb      	ldrb	r3, [r7, #23]
 800bbfc:	b21b      	sxth	r3, r3
 800bbfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc02:	b21a      	sxth	r2, r3
 800bc04:	7dbb      	ldrb	r3, [r7, #22]
 800bc06:	b21b      	sxth	r3, r3
 800bc08:	4013      	ands	r3, r2
 800bc0a:	b21b      	sxth	r3, r3
    }
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3720      	adds	r7, #32
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <_lv_style_get_opa>:
 * @note shouldn't be used directly. Use the specific property get functions instead.
 *       For example: `lv_style_get_border_opa()`
 * @note for performance reasons it's not checked if the property really has opacity type
 */
int16_t _lv_style_get_opa(const lv_style_t * style, lv_style_property_t prop, void * v_res)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b088      	sub	sp, #32
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	607a      	str	r2, [r7, #4]
 800bc20:	817b      	strh	r3, [r7, #10]
    lv_opa_t * res = (lv_opa_t *)v_res;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	61fb      	str	r3, [r7, #28]
    LV_ASSERT_STYLE(style);

    if(style == NULL) return -1;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d102      	bne.n	800bc32 <_lv_style_get_opa+0x1e>
 800bc2c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc30:	e030      	b.n	800bc94 <_lv_style_get_opa+0x80>
    if(style->map == NULL) return -1;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d102      	bne.n	800bc40 <_lv_style_get_opa+0x2c>
 800bc3a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc3e:	e029      	b.n	800bc94 <_lv_style_get_opa+0x80>

    int32_t id = get_property_index(style, prop);
 800bc40:	897b      	ldrh	r3, [r7, #10]
 800bc42:	4619      	mov	r1, r3
 800bc44:	68f8      	ldr	r0, [r7, #12]
 800bc46:	f000 fb2e 	bl	800c2a6 <get_property_index>
 800bc4a:	61b8      	str	r0, [r7, #24]
    if(id < 0) {
 800bc4c:	69bb      	ldr	r3, [r7, #24]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	da02      	bge.n	800bc58 <_lv_style_get_opa+0x44>
        return -1;
 800bc52:	f04f 33ff 	mov.w	r3, #4294967295
 800bc56:	e01d      	b.n	800bc94 <_lv_style_get_opa+0x80>
    }
    else {
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_opa_t));
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	69bb      	ldr	r3, [r7, #24]
 800bc5e:	3302      	adds	r3, #2
 800bc60:	4413      	add	r3, r2
 800bc62:	2201      	movs	r2, #1
 800bc64:	4619      	mov	r1, r3
 800bc66:	69f8      	ldr	r0, [r7, #28]
 800bc68:	f7ff f9c0 	bl	800afec <_lv_memcpy_small>
        lv_style_attr_t attr_act;
        attr_act = get_style_prop_attr(style, id);
 800bc6c:	69bb      	ldr	r3, [r7, #24]
 800bc6e:	4619      	mov	r1, r3
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f000 fbf9 	bl	800c468 <get_style_prop_attr>
 800bc76:	4603      	mov	r3, r0
 800bc78:	75fb      	strb	r3, [r7, #23]

        lv_style_attr_t attr_goal;
        attr_goal = (prop >> 8) & 0xFF;
 800bc7a:	897b      	ldrh	r3, [r7, #10]
 800bc7c:	0a1b      	lsrs	r3, r3, #8
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	75bb      	strb	r3, [r7, #22]

        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
 800bc82:	7dfb      	ldrb	r3, [r7, #23]
 800bc84:	b21b      	sxth	r3, r3
 800bc86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc8a:	b21a      	sxth	r2, r3
 800bc8c:	7dbb      	ldrb	r3, [r7, #22]
 800bc8e:	b21b      	sxth	r3, r3
 800bc90:	4013      	ands	r3, r2
 800bc92:	b21b      	sxth	r3, r3
    }
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3720      	adds	r7, #32
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <_lv_style_get_color>:
 * @note shouldn't be used directly. Use the specific property get functions instead.
 *       For example: `lv_style_get_border_color()`
 * @note for performance reasons it's not checked if the property really has color type
 */
int16_t _lv_style_get_color(const lv_style_t * style, lv_style_property_t prop, void * v_res)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b088      	sub	sp, #32
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	460b      	mov	r3, r1
 800bca6:	607a      	str	r2, [r7, #4]
 800bca8:	817b      	strh	r3, [r7, #10]
    lv_color_t * res = (lv_color_t *)v_res;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	61fb      	str	r3, [r7, #28]
    if(style == NULL) return -1;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d102      	bne.n	800bcba <_lv_style_get_color+0x1e>
 800bcb4:	f04f 33ff 	mov.w	r3, #4294967295
 800bcb8:	e030      	b.n	800bd1c <_lv_style_get_color+0x80>
    if(style->map == NULL) return -1;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d102      	bne.n	800bcc8 <_lv_style_get_color+0x2c>
 800bcc2:	f04f 33ff 	mov.w	r3, #4294967295
 800bcc6:	e029      	b.n	800bd1c <_lv_style_get_color+0x80>
    int32_t id = get_property_index(style, prop);
 800bcc8:	897b      	ldrh	r3, [r7, #10]
 800bcca:	4619      	mov	r1, r3
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	f000 faea 	bl	800c2a6 <get_property_index>
 800bcd2:	61b8      	str	r0, [r7, #24]
    if(id < 0) {
 800bcd4:	69bb      	ldr	r3, [r7, #24]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	da02      	bge.n	800bce0 <_lv_style_get_color+0x44>
        return -1;
 800bcda:	f04f 33ff 	mov.w	r3, #4294967295
 800bcde:	e01d      	b.n	800bd1c <_lv_style_get_color+0x80>
    }
    else {
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_color_t));
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	69bb      	ldr	r3, [r7, #24]
 800bce6:	3302      	adds	r3, #2
 800bce8:	4413      	add	r3, r2
 800bcea:	2204      	movs	r2, #4
 800bcec:	4619      	mov	r1, r3
 800bcee:	69f8      	ldr	r0, [r7, #28]
 800bcf0:	f7ff f97c 	bl	800afec <_lv_memcpy_small>
        lv_style_attr_t attr_act;
        attr_act = get_style_prop_attr(style, id);
 800bcf4:	69bb      	ldr	r3, [r7, #24]
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	68f8      	ldr	r0, [r7, #12]
 800bcfa:	f000 fbb5 	bl	800c468 <get_style_prop_attr>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	75fb      	strb	r3, [r7, #23]

        lv_style_attr_t attr_goal;
        attr_goal = (prop >> 8) & 0xFF;
 800bd02:	897b      	ldrh	r3, [r7, #10]
 800bd04:	0a1b      	lsrs	r3, r3, #8
 800bd06:	b29b      	uxth	r3, r3
 800bd08:	75bb      	strb	r3, [r7, #22]

        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
 800bd0a:	7dfb      	ldrb	r3, [r7, #23]
 800bd0c:	b21b      	sxth	r3, r3
 800bd0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd12:	b21a      	sxth	r2, r3
 800bd14:	7dbb      	ldrb	r3, [r7, #22]
 800bd16:	b21b      	sxth	r3, r3
 800bd18:	4013      	ands	r3, r2
 800bd1a:	b21b      	sxth	r3, r3
    }
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3720      	adds	r7, #32
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <_lv_style_get_ptr>:
 * @note shouldn't be used directly. Use the specific property get functions instead.
 *       For example: `lv_style_get_text_font()`
 * @note for performance reasons it's not checked if the property really has pointer type
 */
int16_t _lv_style_get_ptr(const lv_style_t * style, lv_style_property_t prop, void * v_res)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b088      	sub	sp, #32
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	607a      	str	r2, [r7, #4]
 800bd30:	817b      	strh	r3, [r7, #10]
    const void ** res = (const void **)v_res;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	61fb      	str	r3, [r7, #28]
    if(style == NULL) return -1;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d102      	bne.n	800bd42 <_lv_style_get_ptr+0x1e>
 800bd3c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd40:	e030      	b.n	800bda4 <_lv_style_get_ptr+0x80>
    if(style->map == NULL) return -1;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d102      	bne.n	800bd50 <_lv_style_get_ptr+0x2c>
 800bd4a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd4e:	e029      	b.n	800bda4 <_lv_style_get_ptr+0x80>

    int32_t id = get_property_index(style, prop);
 800bd50:	897b      	ldrh	r3, [r7, #10]
 800bd52:	4619      	mov	r1, r3
 800bd54:	68f8      	ldr	r0, [r7, #12]
 800bd56:	f000 faa6 	bl	800c2a6 <get_property_index>
 800bd5a:	61b8      	str	r0, [r7, #24]
    if(id < 0) {
 800bd5c:	69bb      	ldr	r3, [r7, #24]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	da02      	bge.n	800bd68 <_lv_style_get_ptr+0x44>
        return -1;
 800bd62:	f04f 33ff 	mov.w	r3, #4294967295
 800bd66:	e01d      	b.n	800bda4 <_lv_style_get_ptr+0x80>
    }
    else {
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(const void *));
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	69bb      	ldr	r3, [r7, #24]
 800bd6e:	3302      	adds	r3, #2
 800bd70:	4413      	add	r3, r2
 800bd72:	2204      	movs	r2, #4
 800bd74:	4619      	mov	r1, r3
 800bd76:	69f8      	ldr	r0, [r7, #28]
 800bd78:	f7ff f938 	bl	800afec <_lv_memcpy_small>
        lv_style_attr_t attr_act;
        attr_act = get_style_prop_attr(style, id);
 800bd7c:	69bb      	ldr	r3, [r7, #24]
 800bd7e:	4619      	mov	r1, r3
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f000 fb71 	bl	800c468 <get_style_prop_attr>
 800bd86:	4603      	mov	r3, r0
 800bd88:	75fb      	strb	r3, [r7, #23]

        lv_style_attr_t attr_goal;
        attr_goal = (prop >> 8) & 0xFF;
 800bd8a:	897b      	ldrh	r3, [r7, #10]
 800bd8c:	0a1b      	lsrs	r3, r3, #8
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	75bb      	strb	r3, [r7, #22]

        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
 800bd92:	7dfb      	ldrb	r3, [r7, #23]
 800bd94:	b21b      	sxth	r3, r3
 800bd96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd9a:	b21a      	sxth	r2, r3
 800bd9c:	7dbb      	ldrb	r3, [r7, #22]
 800bd9e:	b21b      	sxth	r3, r3
 800bda0:	4013      	ands	r3, r2
 800bda2:	b21b      	sxth	r3, r3
    }
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3720      	adds	r7, #32
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <lv_style_list_get_local_style>:
 * Get the local style of a style list
 * @param list pointer to a style list where the local property should be set
 * @return pointer to the local style if exists else `NULL`.
 */
lv_style_t * lv_style_list_get_local_style(lv_style_list_t * list)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE_LIST(list);

    if(!list->has_local) return NULL;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	791b      	ldrb	r3, [r3, #4]
 800bdb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdbc:	b2db      	uxtb	r3, r3
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d101      	bne.n	800bdc6 <lv_style_list_get_local_style+0x1a>
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	e00d      	b.n	800bde2 <lv_style_list_get_local_style+0x36>
    if(list->has_trans) return list->style_list[1];
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	791b      	ldrb	r3, [r3, #4]
 800bdca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bdce:	b2db      	uxtb	r3, r3
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d003      	beq.n	800bddc <lv_style_list_get_local_style+0x30>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	e002      	b.n	800bde2 <lv_style_list_get_local_style+0x36>
    else return list->style_list[0];
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	681b      	ldr	r3, [r3, #0]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	370c      	adds	r7, #12
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr

0800bdee <_lv_style_list_get_transition_style>:
 * Get the transition style of a style list
 * @param list pointer to a style list where the local property should be set
 * @return pointer to the transition style if exists else `NULL`.
 */
lv_style_t * _lv_style_list_get_transition_style(lv_style_list_t * list)
{
 800bdee:	b480      	push	{r7}
 800bdf0:	b083      	sub	sp, #12
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE_LIST(list);

    if(!list->has_trans) return NULL;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	791b      	ldrb	r3, [r3, #4]
 800bdfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	2b00      	cmp	r3, #0
 800be02:	d101      	bne.n	800be08 <_lv_style_list_get_transition_style+0x1a>
 800be04:	2300      	movs	r3, #0
 800be06:	e002      	b.n	800be0e <_lv_style_list_get_transition_style+0x20>
    return list->style_list[0];
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	681b      	ldr	r3, [r3, #0]
}
 800be0e:	4618      	mov	r0, r3
 800be10:	370c      	adds	r7, #12
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr
	...

0800be1c <_lv_style_list_add_trans_style>:
 * Allocate the transition style in a style list. If already exists simply return it.
 * @param list pointer to a style list
 * @return the transition style of a style list
 */
lv_style_t * _lv_style_list_add_trans_style(lv_style_list_t * list)
{
 800be1c:	b590      	push	{r4, r7, lr}
 800be1e:	b085      	sub	sp, #20
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE_LIST(list);
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	791b      	ldrb	r3, [r3, #4]
 800be28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d004      	beq.n	800be3c <_lv_style_list_add_trans_style+0x20>
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7ff ffdb 	bl	800bdee <_lv_style_list_get_transition_style>
 800be38:	4603      	mov	r3, r0
 800be3a:	e03d      	b.n	800beb8 <_lv_style_list_add_trans_style+0x9c>

    lv_style_t * trans_style = lv_mem_alloc(sizeof(lv_style_t));
 800be3c:	2004      	movs	r0, #4
 800be3e:	f010 fc09 	bl	801c654 <lv_mem_alloc>
 800be42:	60f8      	str	r0, [r7, #12]
    LV_ASSERT_MEM(trans_style);
 800be44:	68f8      	ldr	r0, [r7, #12]
 800be46:	f00f fe79 	bl	801bb3c <lv_debug_check_null>
 800be4a:	4603      	mov	r3, r0
 800be4c:	f083 0301 	eor.w	r3, r3, #1
 800be50:	b2db      	uxtb	r3, r3
 800be52:	2b00      	cmp	r3, #0
 800be54:	d008      	beq.n	800be68 <_lv_style_list_add_trans_style+0x4c>
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f04f 0400 	mov.w	r4, #0
 800be5c:	461a      	mov	r2, r3
 800be5e:	4623      	mov	r3, r4
 800be60:	4817      	ldr	r0, [pc, #92]	; (800bec0 <_lv_style_list_add_trans_style+0xa4>)
 800be62:	f00f fe7b 	bl	801bb5c <lv_debug_log_error>
 800be66:	e7fe      	b.n	800be66 <_lv_style_list_add_trans_style+0x4a>
    if(trans_style == NULL) {
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d101      	bne.n	800be72 <_lv_style_list_add_trans_style+0x56>
        LV_LOG_WARN("lv_style_list_add_trans_style: couldn't create transition style");
        return NULL;
 800be6e:	2300      	movs	r3, #0
 800be70:	e022      	b.n	800beb8 <_lv_style_list_add_trans_style+0x9c>
    }

    lv_style_init(trans_style);
 800be72:	68f8      	ldr	r0, [r7, #12]
 800be74:	f7ff f911 	bl	800b09a <lv_style_init>

    _lv_style_list_add_style(list, trans_style);
 800be78:	68f9      	ldr	r1, [r7, #12]
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f7ff fa80 	bl	800b380 <_lv_style_list_add_style>
    list->has_trans = 1;
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	7913      	ldrb	r3, [r2, #4]
 800be84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be88:	7113      	strb	r3, [r2, #4]

    /*If the list has local style trans was added after it. But trans should be the first so swap them*/
    if(list->has_local) {
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	791b      	ldrb	r3, [r3, #4]
 800be8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be92:	b2db      	uxtb	r3, r3
 800be94:	2b00      	cmp	r3, #0
 800be96:	d00e      	beq.n	800beb6 <_lv_style_list_add_trans_style+0x9a>
        lv_style_t * tmp = list->style_list[0];
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	60bb      	str	r3, [r7, #8]
        list->style_list[0] = list->style_list[1];
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681a      	ldr	r2, [r3, #0]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	6852      	ldr	r2, [r2, #4]
 800beaa:	601a      	str	r2, [r3, #0]
        list->style_list[1] = tmp;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	3304      	adds	r3, #4
 800beb2:	68ba      	ldr	r2, [r7, #8]
 800beb4:	601a      	str	r2, [r3, #0]
    }
    return trans_style;
 800beb6:	68fb      	ldr	r3, [r7, #12]
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3714      	adds	r7, #20
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd90      	pop	{r4, r7, pc}
 800bec0:	0802d7d4 	.word	0x0802d7d4

0800bec4 <_lv_style_list_get_int>:
 * @return LV_RES_OK: there was a matching property in the list
 *         LV_RES_INV: there was NO matching property in the list
 * @note for performance reasons it's not checked if the property really has integer type
 */
lv_res_t _lv_style_list_get_int(lv_style_list_t * list, lv_style_property_t prop, lv_style_int_t * res)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b088      	sub	sp, #32
 800bec8:	af00      	add	r7, sp, #0
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	460b      	mov	r3, r1
 800bece:	607a      	str	r2, [r7, #4]
 800bed0:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_STYLE_LIST(list);

    if(list == NULL) return LV_RES_INV;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d101      	bne.n	800bedc <_lv_style_list_get_int+0x18>
 800bed8:	2300      	movs	r3, #0
 800beda:	e06d      	b.n	800bfb8 <_lv_style_list_get_int+0xf4>
    if(list->style_list == NULL) return LV_RES_INV;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d101      	bne.n	800bee8 <_lv_style_list_get_int+0x24>
 800bee4:	2300      	movs	r3, #0
 800bee6:	e067      	b.n	800bfb8 <_lv_style_list_get_int+0xf4>

    lv_style_attr_t attr;
    attr = prop >> 8;
 800bee8:	897b      	ldrh	r3, [r7, #10]
 800beea:	0a1b      	lsrs	r3, r3, #8
 800beec:	b29b      	uxth	r3, r3
 800beee:	76fb      	strb	r3, [r7, #27]
    int16_t weight_goal = attr;
 800bef0:	7efb      	ldrb	r3, [r7, #27]
 800bef2:	833b      	strh	r3, [r7, #24]

    int16_t weight = -1;
 800bef4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bef8:	83fb      	strh	r3, [r7, #30]

    lv_style_int_t value_act = 0;
 800befa:	2300      	movs	r3, #0
 800befc:	823b      	strh	r3, [r7, #16]

    int16_t ci;
    for(ci = 0; ci < list->style_cnt; ci++) {
 800befe:	2300      	movs	r3, #0
 800bf00:	83bb      	strh	r3, [r7, #28]
 800bf02:	e049      	b.n	800bf98 <_lv_style_list_get_int+0xd4>
        /* changed class to _class to allow compilation as c++ */
        lv_style_t * _class = lv_style_list_get_style(list, ci);
 800bf04:	8bbb      	ldrh	r3, [r7, #28]
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	4619      	mov	r1, r3
 800bf0a:	68f8      	ldr	r0, [r7, #12]
 800bf0c:	f7ff f890 	bl	800b030 <lv_style_list_get_style>
 800bf10:	6178      	str	r0, [r7, #20]
        int16_t weight_act = _lv_style_get_int(_class, prop, &value_act);
 800bf12:	f107 0210 	add.w	r2, r7, #16
 800bf16:	897b      	ldrh	r3, [r7, #10]
 800bf18:	4619      	mov	r1, r3
 800bf1a:	6978      	ldr	r0, [r7, #20]
 800bf1c:	f7ff fe36 	bl	800bb8c <_lv_style_get_int>
 800bf20:	4603      	mov	r3, r0
 800bf22:	827b      	strh	r3, [r7, #18]

        /*On perfect match return the value immediately*/
        if(weight_act == weight_goal) {
 800bf24:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800bf28:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d105      	bne.n	800bf3c <_lv_style_list_get_int+0x78>
            *res = value_act;
 800bf30:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	801a      	strh	r2, [r3, #0]
            return LV_RES_OK;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e03d      	b.n	800bfb8 <_lv_style_list_get_int+0xf4>
        }
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	791b      	ldrb	r3, [r3, #4]
 800bf40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d014      	beq.n	800bf74 <_lv_style_list_get_int+0xb0>
 800bf4a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	db10      	blt.n	800bf74 <_lv_style_list_get_int+0xb0>
 800bf52:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d10c      	bne.n	800bf74 <_lv_style_list_get_int+0xb0>
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	795b      	ldrb	r3, [r3, #5]
 800bf5e:	f003 0301 	and.w	r3, r3, #1
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d105      	bne.n	800bf74 <_lv_style_list_get_int+0xb0>
            *res = value_act;
 800bf68:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	801a      	strh	r2, [r3, #0]
            return LV_RES_OK;
 800bf70:	2301      	movs	r3, #1
 800bf72:	e021      	b.n	800bfb8 <_lv_style_list_get_int+0xf4>
        }
        /*If the found ID is better the current candidate then use it*/
        else if(weight_act > weight) {
 800bf74:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800bf78:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	dd05      	ble.n	800bf8c <_lv_style_list_get_int+0xc8>
            weight =  weight_act;
 800bf80:	8a7b      	ldrh	r3, [r7, #18]
 800bf82:	83fb      	strh	r3, [r7, #30]
            *res = value_act;
 800bf84:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	801a      	strh	r2, [r3, #0]
    for(ci = 0; ci < list->style_cnt; ci++) {
 800bf8c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	3301      	adds	r3, #1
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	83bb      	strh	r3, [r7, #28]
 800bf98:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800bf9c:	68fa      	ldr	r2, [r7, #12]
 800bf9e:	7912      	ldrb	r2, [r2, #4]
 800bfa0:	f3c2 0205 	ubfx	r2, r2, #0, #6
 800bfa4:	b2d2      	uxtb	r2, r2
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	dbac      	blt.n	800bf04 <_lv_style_list_get_int+0x40>
        }
    }

    if(weight >= 0) return LV_RES_OK;
 800bfaa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	db01      	blt.n	800bfb6 <_lv_style_list_get_int+0xf2>
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e000      	b.n	800bfb8 <_lv_style_list_get_int+0xf4>
    else return LV_RES_INV;
 800bfb6:	2300      	movs	r3, #0

}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3720      	adds	r7, #32
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <_lv_style_list_get_color>:
 * @return LV_RES_OK: there was a matching property in the list
 *         LV_RES_INV: there was NO matching property in the list
 * @note for performance reasons it's not checked if the property really has color type
 */
lv_res_t _lv_style_list_get_color(lv_style_list_t * list, lv_style_property_t prop, lv_color_t * res)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b08a      	sub	sp, #40	; 0x28
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	460b      	mov	r3, r1
 800bfca:	607a      	str	r2, [r7, #4]
 800bfcc:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_STYLE_LIST(list);

    if(list == NULL) return LV_RES_INV;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d101      	bne.n	800bfd8 <_lv_style_list_get_color+0x18>
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	e06c      	b.n	800c0b2 <_lv_style_list_get_color+0xf2>
    if(list->style_list == NULL) return LV_RES_INV;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d101      	bne.n	800bfe4 <_lv_style_list_get_color+0x24>
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	e066      	b.n	800c0b2 <_lv_style_list_get_color+0xf2>

    lv_style_attr_t attr;
    attr = prop >> 8;
 800bfe4:	897b      	ldrh	r3, [r7, #10]
 800bfe6:	0a1b      	lsrs	r3, r3, #8
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    int16_t weight_goal = attr;
 800bfee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bff2:	843b      	strh	r3, [r7, #32]

    int16_t weight = -1;
 800bff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bff8:	84fb      	strh	r3, [r7, #38]	; 0x26

    lv_color_t value_act;
    value_act.full = 0;
 800bffa:	2300      	movs	r3, #0
 800bffc:	617b      	str	r3, [r7, #20]

    int16_t ci;
    for(ci = 0; ci < list->style_cnt; ci++) {
 800bffe:	2300      	movs	r3, #0
 800c000:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c002:	e046      	b.n	800c092 <_lv_style_list_get_color+0xd2>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
 800c004:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c006:	b2db      	uxtb	r3, r3
 800c008:	4619      	mov	r1, r3
 800c00a:	68f8      	ldr	r0, [r7, #12]
 800c00c:	f7ff f810 	bl	800b030 <lv_style_list_get_style>
 800c010:	61f8      	str	r0, [r7, #28]
        int16_t weight_act = _lv_style_get_color(_class, prop, &value_act);
 800c012:	f107 0214 	add.w	r2, r7, #20
 800c016:	897b      	ldrh	r3, [r7, #10]
 800c018:	4619      	mov	r1, r3
 800c01a:	69f8      	ldr	r0, [r7, #28]
 800c01c:	f7ff fe3e 	bl	800bc9c <_lv_style_get_color>
 800c020:	4603      	mov	r3, r0
 800c022:	837b      	strh	r3, [r7, #26]
        /*On perfect match return the value immediately*/
        if(weight_act == weight_goal) {
 800c024:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800c028:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d104      	bne.n	800c03a <_lv_style_list_get_color+0x7a>
            *res = value_act;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	697a      	ldr	r2, [r7, #20]
 800c034:	601a      	str	r2, [r3, #0]
            return LV_RES_OK;
 800c036:	2301      	movs	r3, #1
 800c038:	e03b      	b.n	800c0b2 <_lv_style_list_get_color+0xf2>
        }
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	791b      	ldrb	r3, [r3, #4]
 800c03e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c042:	b2db      	uxtb	r3, r3
 800c044:	2b00      	cmp	r3, #0
 800c046:	d013      	beq.n	800c070 <_lv_style_list_get_color+0xb0>
 800c048:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	db0f      	blt.n	800c070 <_lv_style_list_get_color+0xb0>
 800c050:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c054:	2b00      	cmp	r3, #0
 800c056:	d10b      	bne.n	800c070 <_lv_style_list_get_color+0xb0>
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	795b      	ldrb	r3, [r3, #5]
 800c05c:	f003 0301 	and.w	r3, r3, #1
 800c060:	b2db      	uxtb	r3, r3
 800c062:	2b00      	cmp	r3, #0
 800c064:	d104      	bne.n	800c070 <_lv_style_list_get_color+0xb0>
            *res = value_act;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	697a      	ldr	r2, [r7, #20]
 800c06a:	601a      	str	r2, [r3, #0]
            return LV_RES_OK;
 800c06c:	2301      	movs	r3, #1
 800c06e:	e020      	b.n	800c0b2 <_lv_style_list_get_color+0xf2>
        }
        /*If the found ID is better the current candidate then use it*/
        else if(weight_act > weight) {
 800c070:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800c074:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c078:	429a      	cmp	r2, r3
 800c07a:	dd04      	ble.n	800c086 <_lv_style_list_get_color+0xc6>
            weight =  weight_act;
 800c07c:	8b7b      	ldrh	r3, [r7, #26]
 800c07e:	84fb      	strh	r3, [r7, #38]	; 0x26
            *res = value_act;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	697a      	ldr	r2, [r7, #20]
 800c084:	601a      	str	r2, [r3, #0]
    for(ci = 0; ci < list->style_cnt; ci++) {
 800c086:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	3301      	adds	r3, #1
 800c08e:	b29b      	uxth	r3, r3
 800c090:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c092:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c096:	68fa      	ldr	r2, [r7, #12]
 800c098:	7912      	ldrb	r2, [r2, #4]
 800c09a:	f3c2 0205 	ubfx	r2, r2, #0, #6
 800c09e:	b2d2      	uxtb	r2, r2
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	dbaf      	blt.n	800c004 <_lv_style_list_get_color+0x44>
        }
    }

    if(weight >= 0)  return LV_RES_OK;
 800c0a4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	db01      	blt.n	800c0b0 <_lv_style_list_get_color+0xf0>
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	e000      	b.n	800c0b2 <_lv_style_list_get_color+0xf2>
    else return LV_RES_INV;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3728      	adds	r7, #40	; 0x28
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <_lv_style_list_get_opa>:
 * @return LV_RES_OK: there was a matching property in the list
 *         LV_RES_INV: there was NO matching property in the list
 * @note for performance reasons it's not checked if the property really has opacity type
 */
lv_res_t _lv_style_list_get_opa(lv_style_list_t * list, lv_style_property_t prop, lv_opa_t * res)
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b088      	sub	sp, #32
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	60f8      	str	r0, [r7, #12]
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	607a      	str	r2, [r7, #4]
 800c0c6:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_STYLE_LIST(list);

    if(list == NULL) return LV_RES_INV;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d101      	bne.n	800c0d2 <_lv_style_list_get_opa+0x18>
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	e06a      	b.n	800c1a8 <_lv_style_list_get_opa+0xee>
    if(list->style_list == NULL) return LV_RES_INV;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d101      	bne.n	800c0de <_lv_style_list_get_opa+0x24>
 800c0da:	2300      	movs	r3, #0
 800c0dc:	e064      	b.n	800c1a8 <_lv_style_list_get_opa+0xee>

    lv_style_attr_t attr;
    attr = prop >> 8;
 800c0de:	897b      	ldrh	r3, [r7, #10]
 800c0e0:	0a1b      	lsrs	r3, r3, #8
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	76fb      	strb	r3, [r7, #27]
    int16_t weight_goal = attr;
 800c0e6:	7efb      	ldrb	r3, [r7, #27]
 800c0e8:	833b      	strh	r3, [r7, #24]

    int16_t weight = -1;
 800c0ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c0ee:	83fb      	strh	r3, [r7, #30]

    lv_opa_t value_act = LV_OPA_TRANSP;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	747b      	strb	r3, [r7, #17]

    int16_t ci;
    for(ci = 0; ci < list->style_cnt; ci++) {
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	83bb      	strh	r3, [r7, #28]
 800c0f8:	e046      	b.n	800c188 <_lv_style_list_get_opa+0xce>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
 800c0fa:	8bbb      	ldrh	r3, [r7, #28]
 800c0fc:	b2db      	uxtb	r3, r3
 800c0fe:	4619      	mov	r1, r3
 800c100:	68f8      	ldr	r0, [r7, #12]
 800c102:	f7fe ff95 	bl	800b030 <lv_style_list_get_style>
 800c106:	6178      	str	r0, [r7, #20]
        int16_t weight_act = _lv_style_get_opa(_class, prop, &value_act);
 800c108:	f107 0211 	add.w	r2, r7, #17
 800c10c:	897b      	ldrh	r3, [r7, #10]
 800c10e:	4619      	mov	r1, r3
 800c110:	6978      	ldr	r0, [r7, #20]
 800c112:	f7ff fd7f 	bl	800bc14 <_lv_style_get_opa>
 800c116:	4603      	mov	r3, r0
 800c118:	827b      	strh	r3, [r7, #18]
        /*On perfect match return the value immediately*/
        if(weight_act == weight_goal) {
 800c11a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800c11e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800c122:	429a      	cmp	r2, r3
 800c124:	d104      	bne.n	800c130 <_lv_style_list_get_opa+0x76>
            *res = value_act;
 800c126:	7c7a      	ldrb	r2, [r7, #17]
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	701a      	strb	r2, [r3, #0]
            return LV_RES_OK;
 800c12c:	2301      	movs	r3, #1
 800c12e:	e03b      	b.n	800c1a8 <_lv_style_list_get_opa+0xee>
        }
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	791b      	ldrb	r3, [r3, #4]
 800c134:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d013      	beq.n	800c166 <_lv_style_list_get_opa+0xac>
 800c13e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c142:	2b00      	cmp	r3, #0
 800c144:	db0f      	blt.n	800c166 <_lv_style_list_get_opa+0xac>
 800c146:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d10b      	bne.n	800c166 <_lv_style_list_get_opa+0xac>
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	795b      	ldrb	r3, [r3, #5]
 800c152:	f003 0301 	and.w	r3, r3, #1
 800c156:	b2db      	uxtb	r3, r3
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d104      	bne.n	800c166 <_lv_style_list_get_opa+0xac>
            *res = value_act;
 800c15c:	7c7a      	ldrb	r2, [r7, #17]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	701a      	strb	r2, [r3, #0]
            return LV_RES_OK;
 800c162:	2301      	movs	r3, #1
 800c164:	e020      	b.n	800c1a8 <_lv_style_list_get_opa+0xee>
        }
        /*If the found ID is better the current candidate then use it*/
        else if(weight_act > weight) {
 800c166:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800c16a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c16e:	429a      	cmp	r2, r3
 800c170:	dd04      	ble.n	800c17c <_lv_style_list_get_opa+0xc2>
            weight =  weight_act;
 800c172:	8a7b      	ldrh	r3, [r7, #18]
 800c174:	83fb      	strh	r3, [r7, #30]
            *res = value_act;
 800c176:	7c7a      	ldrb	r2, [r7, #17]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	701a      	strb	r2, [r3, #0]
    for(ci = 0; ci < list->style_cnt; ci++) {
 800c17c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c180:	b29b      	uxth	r3, r3
 800c182:	3301      	adds	r3, #1
 800c184:	b29b      	uxth	r3, r3
 800c186:	83bb      	strh	r3, [r7, #28]
 800c188:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c18c:	68fa      	ldr	r2, [r7, #12]
 800c18e:	7912      	ldrb	r2, [r2, #4]
 800c190:	f3c2 0205 	ubfx	r2, r2, #0, #6
 800c194:	b2d2      	uxtb	r2, r2
 800c196:	4293      	cmp	r3, r2
 800c198:	dbaf      	blt.n	800c0fa <_lv_style_list_get_opa+0x40>
        }
    }

    if(weight >= 0)  return LV_RES_OK;
 800c19a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	db01      	blt.n	800c1a6 <_lv_style_list_get_opa+0xec>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e000      	b.n	800c1a8 <_lv_style_list_get_opa+0xee>
    else return LV_RES_INV;
 800c1a6:	2300      	movs	r3, #0
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3720      	adds	r7, #32
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <_lv_style_list_get_ptr>:
 * @return LV_RES_OK: there was a matching property in the list
 *         LV_RES_INV: there was NO matching property in the list
 * @note for performance reasons it's not checked if the property really has pointer type
 */
lv_res_t _lv_style_list_get_ptr(lv_style_list_t * list, lv_style_property_t prop, const void ** res)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b08a      	sub	sp, #40	; 0x28
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	607a      	str	r2, [r7, #4]
 800c1bc:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_STYLE_LIST(list);

    if(list == NULL) return LV_RES_INV;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d101      	bne.n	800c1c8 <_lv_style_list_get_ptr+0x18>
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	e06a      	b.n	800c29e <_lv_style_list_get_ptr+0xee>
    if(list->style_list == NULL) return LV_RES_INV;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d101      	bne.n	800c1d4 <_lv_style_list_get_ptr+0x24>
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	e064      	b.n	800c29e <_lv_style_list_get_ptr+0xee>

    lv_style_attr_t attr;
    attr = prop >> 8;
 800c1d4:	897b      	ldrh	r3, [r7, #10]
 800c1d6:	0a1b      	lsrs	r3, r3, #8
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    int16_t weight_goal = attr;
 800c1de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c1e2:	843b      	strh	r3, [r7, #32]

    int16_t weight = -1;
 800c1e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c1e8:	84fb      	strh	r3, [r7, #38]	; 0x26

    const void * value_act;

    int16_t ci;
    for(ci = 0; ci < list->style_cnt; ci++) {
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c1ee:	e046      	b.n	800c27e <_lv_style_list_get_ptr+0xce>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
 800c1f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	68f8      	ldr	r0, [r7, #12]
 800c1f8:	f7fe ff1a 	bl	800b030 <lv_style_list_get_style>
 800c1fc:	61f8      	str	r0, [r7, #28]
        int16_t weight_act = _lv_style_get_ptr(_class, prop, &value_act);
 800c1fe:	f107 0214 	add.w	r2, r7, #20
 800c202:	897b      	ldrh	r3, [r7, #10]
 800c204:	4619      	mov	r1, r3
 800c206:	69f8      	ldr	r0, [r7, #28]
 800c208:	f7ff fd8c 	bl	800bd24 <_lv_style_get_ptr>
 800c20c:	4603      	mov	r3, r0
 800c20e:	837b      	strh	r3, [r7, #26]
        /*On perfect match return the value immediately*/
        if(weight_act == weight_goal) {
 800c210:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800c214:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d104      	bne.n	800c226 <_lv_style_list_get_ptr+0x76>
            *res = value_act;
 800c21c:	697a      	ldr	r2, [r7, #20]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	601a      	str	r2, [r3, #0]
            return LV_RES_OK;
 800c222:	2301      	movs	r3, #1
 800c224:	e03b      	b.n	800c29e <_lv_style_list_get_ptr+0xee>
        }
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	791b      	ldrb	r3, [r3, #4]
 800c22a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	2b00      	cmp	r3, #0
 800c232:	d013      	beq.n	800c25c <_lv_style_list_get_ptr+0xac>
 800c234:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	db0f      	blt.n	800c25c <_lv_style_list_get_ptr+0xac>
 800c23c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c240:	2b00      	cmp	r3, #0
 800c242:	d10b      	bne.n	800c25c <_lv_style_list_get_ptr+0xac>
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	795b      	ldrb	r3, [r3, #5]
 800c248:	f003 0301 	and.w	r3, r3, #1
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d104      	bne.n	800c25c <_lv_style_list_get_ptr+0xac>
            *res = value_act;
 800c252:	697a      	ldr	r2, [r7, #20]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	601a      	str	r2, [r3, #0]
            return LV_RES_OK;
 800c258:	2301      	movs	r3, #1
 800c25a:	e020      	b.n	800c29e <_lv_style_list_get_ptr+0xee>
        }
        /*If the found ID is better the current candidate then use it*/
        else if(weight_act > weight) {
 800c25c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800c260:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c264:	429a      	cmp	r2, r3
 800c266:	dd04      	ble.n	800c272 <_lv_style_list_get_ptr+0xc2>
            weight =  weight_act;
 800c268:	8b7b      	ldrh	r3, [r7, #26]
 800c26a:	84fb      	strh	r3, [r7, #38]	; 0x26
            *res = value_act;
 800c26c:	697a      	ldr	r2, [r7, #20]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	601a      	str	r2, [r3, #0]
    for(ci = 0; ci < list->style_cnt; ci++) {
 800c272:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c276:	b29b      	uxth	r3, r3
 800c278:	3301      	adds	r3, #1
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c27e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c282:	68fa      	ldr	r2, [r7, #12]
 800c284:	7912      	ldrb	r2, [r2, #4]
 800c286:	f3c2 0205 	ubfx	r2, r2, #0, #6
 800c28a:	b2d2      	uxtb	r2, r2
 800c28c:	4293      	cmp	r3, r2
 800c28e:	dbaf      	blt.n	800c1f0 <_lv_style_list_get_ptr+0x40>
        }
    }

    if(weight >= 0)  return LV_RES_OK;
 800c290:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c294:	2b00      	cmp	r3, #0
 800c296:	db01      	blt.n	800c29c <_lv_style_list_get_ptr+0xec>
 800c298:	2301      	movs	r3, #1
 800c29a:	e000      	b.n	800c29e <_lv_style_list_get_ptr+0xee>
    else return LV_RES_INV;
 800c29c:	2300      	movs	r3, #0
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3728      	adds	r7, #40	; 0x28
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}

0800c2a6 <get_property_index>:
 * @param prop a style property ORed with a state.
 * E.g. `LV_STYLE_TEXT_FONT | (LV_STATE_PRESSED << LV_STYLE_STATE_POS)`
 * @return
 */
LV_ATTRIBUTE_FAST_MEM static inline int32_t get_property_index(const lv_style_t * style, lv_style_property_t prop)
{
 800c2a6:	b580      	push	{r7, lr}
 800c2a8:	b086      	sub	sp, #24
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	6078      	str	r0, [r7, #4]
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_STYLE(style);

    if(style->map == NULL) return -1;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d102      	bne.n	800c2c0 <get_property_index+0x1a>
 800c2ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c2be:	e04b      	b.n	800c358 <get_property_index+0xb2>

    uint8_t id_to_find = prop & 0xFF;
 800c2c0:	887b      	ldrh	r3, [r7, #2]
 800c2c2:	73fb      	strb	r3, [r7, #15]
    lv_style_attr_t attr;
    attr = (prop >> 8) & 0xFF;
 800c2c4:	887b      	ldrh	r3, [r7, #2]
 800c2c6:	0a1b      	lsrs	r3, r3, #8
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	73bb      	strb	r3, [r7, #14]

    int16_t weight = -1;
 800c2cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c2d0:	82fb      	strh	r3, [r7, #22]
    int16_t id_guess = -1;
 800c2d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c2d6:	82bb      	strh	r3, [r7, #20]

    size_t i = 0;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	613b      	str	r3, [r7, #16]

    uint8_t prop_id;
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 800c2dc:	e031      	b.n	800c342 <get_property_index+0x9c>
        if(prop_id == id_to_find) {
 800c2de:	7b7a      	ldrb	r2, [r7, #13]
 800c2e0:	7bfb      	ldrb	r3, [r7, #15]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d127      	bne.n	800c336 <get_property_index+0x90>
            lv_style_attr_t attr_i;
            attr_i = get_style_prop_attr(style, i);
 800c2e6:	6939      	ldr	r1, [r7, #16]
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 f8bd 	bl	800c468 <get_style_prop_attr>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	733b      	strb	r3, [r7, #12]

            /*If the state perfectly matches return this property*/
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
 800c2f2:	7b3a      	ldrb	r2, [r7, #12]
 800c2f4:	7bbb      	ldrb	r3, [r7, #14]
 800c2f6:	4053      	eors	r3, r2
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d101      	bne.n	800c306 <get_property_index+0x60>
                return i;
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	e028      	b.n	800c358 <get_property_index+0xb2>
            }
            /* Be sure the property not specifies other state than the requested.
             * E.g. For HOVER+PRESS, HOVER only is OK, but HOVER+FOCUS not*/
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
 800c306:	7b3b      	ldrb	r3, [r7, #12]
 800c308:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c30c:	7bbb      	ldrb	r3, [r7, #14]
 800c30e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c312:	43db      	mvns	r3, r3
 800c314:	4013      	ands	r3, r2
 800c316:	2b00      	cmp	r3, #0
 800c318:	d10d      	bne.n	800c336 <get_property_index+0x90>
                /* Use this property if it describes better the requested state than the current candidate.
                 * E.g. for HOVER+FOCUS+PRESS prefer HOVER+FOCUS over FOCUS*/
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
 800c31a:	7b3b      	ldrb	r3, [r7, #12]
 800c31c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c320:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c324:	429a      	cmp	r2, r3
 800c326:	dd06      	ble.n	800c336 <get_property_index+0x90>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
 800c328:	7b3b      	ldrb	r3, [r7, #12]
 800c32a:	b21b      	sxth	r3, r3
 800c32c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c330:	82fb      	strh	r3, [r7, #22]
                    id_guess = i;
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	82bb      	strh	r3, [r7, #20]
                }
            }
        }

        i = get_next_prop_index(prop_id, i);
 800c336:	7b7b      	ldrb	r3, [r7, #13]
 800c338:	6939      	ldr	r1, [r7, #16]
 800c33a:	4618      	mov	r0, r3
 800c33c:	f000 f8cf 	bl	800c4de <get_next_prop_index>
 800c340:	6138      	str	r0, [r7, #16]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
 800c342:	6939      	ldr	r1, [r7, #16]
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 f880 	bl	800c44a <get_style_prop_id>
 800c34a:	4603      	mov	r3, r0
 800c34c:	737b      	strb	r3, [r7, #13]
 800c34e:	7b7b      	ldrb	r3, [r7, #13]
 800c350:	2bff      	cmp	r3, #255	; 0xff
 800c352:	d1c4      	bne.n	800c2de <get_property_index+0x38>
    }

    return id_guess;
 800c354:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3718      	adds	r7, #24
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <get_alloc_local_style>:
 * Get he local style from a style list. Allocate it if not exists yet.
 * @param list pointer to a style list
 * @return pointer to the local style
 */
static lv_style_t * get_alloc_local_style(lv_style_list_t * list)
{
 800c360:	b590      	push	{r4, r7, lr}
 800c362:	b085      	sub	sp, #20
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE_LIST(list);

    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	791b      	ldrb	r3, [r3, #4]
 800c36c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c370:	b2db      	uxtb	r3, r3
 800c372:	2b00      	cmp	r3, #0
 800c374:	d009      	beq.n	800c38a <get_alloc_local_style+0x2a>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	791b      	ldrb	r3, [r3, #4]
 800c37a:	09db      	lsrs	r3, r3, #7
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	4619      	mov	r1, r3
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f7fe fe55 	bl	800b030 <lv_style_list_get_style>
 800c386:	4603      	mov	r3, r0
 800c388:	e027      	b.n	800c3da <get_alloc_local_style+0x7a>

    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
 800c38a:	2004      	movs	r0, #4
 800c38c:	f010 f962 	bl	801c654 <lv_mem_alloc>
 800c390:	60f8      	str	r0, [r7, #12]
    LV_ASSERT_MEM(local_style);
 800c392:	68f8      	ldr	r0, [r7, #12]
 800c394:	f00f fbd2 	bl	801bb3c <lv_debug_check_null>
 800c398:	4603      	mov	r3, r0
 800c39a:	f083 0301 	eor.w	r3, r3, #1
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d008      	beq.n	800c3b6 <get_alloc_local_style+0x56>
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f04f 0400 	mov.w	r4, #0
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	4623      	mov	r3, r4
 800c3ae:	480d      	ldr	r0, [pc, #52]	; (800c3e4 <get_alloc_local_style+0x84>)
 800c3b0:	f00f fbd4 	bl	801bb5c <lv_debug_log_error>
 800c3b4:	e7fe      	b.n	800c3b4 <get_alloc_local_style+0x54>
    if(local_style == NULL) {
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d101      	bne.n	800c3c0 <get_alloc_local_style+0x60>
        LV_LOG_WARN("get_local_style: couldn't create local style");
        return NULL;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	e00c      	b.n	800c3da <get_alloc_local_style+0x7a>
    }
    lv_style_init(local_style);
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	f7fe fe6a 	bl	800b09a <lv_style_init>

    /*Add the local style to the first place*/
    _lv_style_list_add_style(list, local_style);
 800c3c6:	68f9      	ldr	r1, [r7, #12]
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f7fe ffd9 	bl	800b380 <_lv_style_list_add_style>
    list->has_local = 1;
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	7913      	ldrb	r3, [r2, #4]
 800c3d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3d6:	7113      	strb	r3, [r2, #4]

    return local_style;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3714      	adds	r7, #20
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd90      	pop	{r4, r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	0802d7d4 	.word	0x0802d7d4

0800c3e8 <style_resize>:
 * Resizes a style map. Useful entry point for debugging.
 * @param style pointer to the style to be resized.
 * @param size new size
 */
static inline void style_resize(lv_style_t * style, size_t sz)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	6039      	str	r1, [r7, #0]
    style->map = lv_mem_realloc(style->map, sz);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	6839      	ldr	r1, [r7, #0]
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f010 f9cb 	bl	801c794 <lv_mem_realloc>
 800c3fe:	4602      	mov	r2, r0
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	601a      	str	r2, [r3, #0]
}
 800c404:	bf00      	nop
 800c406:	3708      	adds	r7, #8
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <get_style_prop>:
 * @param style pointer to style.
 * @param idx index of the style in style->map
 * @return property in style->map + idx
 */
static inline lv_style_property_t get_style_prop(const lv_style_t * style, size_t idx)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b085      	sub	sp, #20
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	6039      	str	r1, [r7, #0]
    lv_style_property_t prop;
    uint8_t * prop_p = (uint8_t *)&prop;
 800c416:	f107 030a 	add.w	r3, r7, #10
 800c41a:	60fb      	str	r3, [r7, #12]
    prop_p[0] = style->map[idx];
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681a      	ldr	r2, [r3, #0]
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	4413      	add	r3, r2
 800c424:	781a      	ldrb	r2, [r3, #0]
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	701a      	strb	r2, [r3, #0]
    prop_p[1] = style->map[idx + 1];
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	3301      	adds	r3, #1
 800c432:	441a      	add	r2, r3
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	3301      	adds	r3, #1
 800c438:	7812      	ldrb	r2, [r2, #0]
 800c43a:	701a      	strb	r2, [r3, #0]
    return prop;
 800c43c:	897b      	ldrh	r3, [r7, #10]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3714      	adds	r7, #20
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr

0800c44a <get_style_prop_id>:
 * @param style pointer to style.
 * @param idx index of the style in style->map
 * @return id of property in style->map + idx
 */
static inline uint8_t get_style_prop_id(const lv_style_t * style, size_t idx)
{
 800c44a:	b580      	push	{r7, lr}
 800c44c:	b082      	sub	sp, #8
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
 800c452:	6039      	str	r1, [r7, #0]
    return get_style_prop(style, idx) & 0xFF;
 800c454:	6839      	ldr	r1, [r7, #0]
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f7ff ffd8 	bl	800c40c <get_style_prop>
 800c45c:	4603      	mov	r3, r0
 800c45e:	b2db      	uxtb	r3, r3
}
 800c460:	4618      	mov	r0, r3
 800c462:	3708      	adds	r7, #8
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <get_style_prop_attr>:
 * @param style pointer to style.
 * @param idx index of the style in style->map
 * @return attribute of property in style->map + idx
 */
static inline uint8_t get_style_prop_attr(const lv_style_t * style, size_t idx)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	6039      	str	r1, [r7, #0]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
 800c472:	6839      	ldr	r1, [r7, #0]
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f7ff ffc9 	bl	800c40c <get_style_prop>
 800c47a:	4603      	mov	r3, r0
 800c47c:	0a1b      	lsrs	r3, r3, #8
 800c47e:	b29b      	uxth	r3, r3
 800c480:	b2db      	uxtb	r3, r3
}
 800c482:	4618      	mov	r0, r3
 800c484:	3708      	adds	r7, #8
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}

0800c48a <get_prop_size>:
 * @param prop_id property id.
 * @param idx index of the style in style->map
 * @return attribute of property in style->map + idx
 */
static inline size_t get_prop_size(uint8_t prop_id)
{
 800c48a:	b480      	push	{r7}
 800c48c:	b085      	sub	sp, #20
 800c48e:	af00      	add	r7, sp, #0
 800c490:	4603      	mov	r3, r0
 800c492:	71fb      	strb	r3, [r7, #7]
    prop_id &= 0xF;
 800c494:	79fb      	ldrb	r3, [r7, #7]
 800c496:	f003 030f 	and.w	r3, r3, #15
 800c49a:	71fb      	strb	r3, [r7, #7]
    size_t size = sizeof(lv_style_property_t);
 800c49c:	2302      	movs	r3, #2
 800c49e:	60fb      	str	r3, [r7, #12]
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
 800c4a0:	79fb      	ldrb	r3, [r7, #7]
 800c4a2:	2b08      	cmp	r3, #8
 800c4a4:	d803      	bhi.n	800c4ae <get_prop_size+0x24>
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	3302      	adds	r3, #2
 800c4aa:	60fb      	str	r3, [r7, #12]
 800c4ac:	e010      	b.n	800c4d0 <get_prop_size+0x46>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
 800c4ae:	79fb      	ldrb	r3, [r7, #7]
 800c4b0:	2b0b      	cmp	r3, #11
 800c4b2:	d803      	bhi.n	800c4bc <get_prop_size+0x32>
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	3304      	adds	r3, #4
 800c4b8:	60fb      	str	r3, [r7, #12]
 800c4ba:	e009      	b.n	800c4d0 <get_prop_size+0x46>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
 800c4bc:	79fb      	ldrb	r3, [r7, #7]
 800c4be:	2b0d      	cmp	r3, #13
 800c4c0:	d803      	bhi.n	800c4ca <get_prop_size+0x40>
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	60fb      	str	r3, [r7, #12]
 800c4c8:	e002      	b.n	800c4d0 <get_prop_size+0x46>
    else size += sizeof(const void *);
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	3304      	adds	r3, #4
 800c4ce:	60fb      	str	r3, [r7, #12]
    return size;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3714      	adds	r7, #20
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr

0800c4de <get_next_prop_index>:
 * @param prop_id property id.
 * @param idx index of the style in style->map
 * @return index of next property in style->map
 */
static inline size_t get_next_prop_index(uint8_t prop_id, size_t idx)
{
 800c4de:	b580      	push	{r7, lr}
 800c4e0:	b082      	sub	sp, #8
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	6039      	str	r1, [r7, #0]
 800c4e8:	71fb      	strb	r3, [r7, #7]
    return idx + get_prop_size(prop_id);
 800c4ea:	79fb      	ldrb	r3, [r7, #7]
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f7ff ffcc 	bl	800c48a <get_prop_size>
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	4413      	add	r3, r2
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3708      	adds	r7, #8
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 800c500:	b480      	push	{r7}
 800c502:	b087      	sub	sp, #28
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	4613      	mov	r3, r2
 800c50c:	71fb      	strb	r3, [r7, #7]
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800c50e:	7bbb      	ldrb	r3, [r7, #14]
 800c510:	461a      	mov	r2, r3
 800c512:	79fb      	ldrb	r3, [r7, #7]
 800c514:	fb03 f202 	mul.w	r2, r3, r2
 800c518:	7abb      	ldrb	r3, [r7, #10]
 800c51a:	4619      	mov	r1, r3
 800c51c:	79fb      	ldrb	r3, [r7, #7]
 800c51e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c522:	fb03 f301 	mul.w	r3, r3, r1
 800c526:	4413      	add	r3, r2
 800c528:	461a      	mov	r2, r3
 800c52a:	4613      	mov	r3, r2
 800c52c:	021b      	lsls	r3, r3, #8
 800c52e:	4413      	add	r3, r2
 800c530:	01db      	lsls	r3, r3, #7
 800c532:	4413      	add	r3, r2
 800c534:	0ddb      	lsrs	r3, r3, #23
 800c536:	b2db      	uxtb	r3, r3
 800c538:	75bb      	strb	r3, [r7, #22]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800c53a:	7b7b      	ldrb	r3, [r7, #13]
 800c53c:	461a      	mov	r2, r3
 800c53e:	79fb      	ldrb	r3, [r7, #7]
 800c540:	fb03 f202 	mul.w	r2, r3, r2
 800c544:	7a7b      	ldrb	r3, [r7, #9]
 800c546:	4619      	mov	r1, r3
 800c548:	79fb      	ldrb	r3, [r7, #7]
 800c54a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c54e:	fb03 f301 	mul.w	r3, r3, r1
 800c552:	4413      	add	r3, r2
 800c554:	461a      	mov	r2, r3
 800c556:	4613      	mov	r3, r2
 800c558:	021b      	lsls	r3, r3, #8
 800c55a:	4413      	add	r3, r2
 800c55c:	01db      	lsls	r3, r3, #7
 800c55e:	4413      	add	r3, r2
 800c560:	0ddb      	lsrs	r3, r3, #23
 800c562:	b2db      	uxtb	r3, r3
 800c564:	757b      	strb	r3, [r7, #21]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800c566:	7b3b      	ldrb	r3, [r7, #12]
 800c568:	461a      	mov	r2, r3
 800c56a:	79fb      	ldrb	r3, [r7, #7]
 800c56c:	fb03 f202 	mul.w	r2, r3, r2
 800c570:	7a3b      	ldrb	r3, [r7, #8]
 800c572:	4619      	mov	r1, r3
 800c574:	79fb      	ldrb	r3, [r7, #7]
 800c576:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c57a:	fb03 f301 	mul.w	r3, r3, r1
 800c57e:	4413      	add	r3, r2
 800c580:	461a      	mov	r2, r3
 800c582:	4613      	mov	r3, r2
 800c584:	021b      	lsls	r3, r3, #8
 800c586:	4413      	add	r3, r2
 800c588:	01db      	lsls	r3, r3, #7
 800c58a:	4413      	add	r3, r2
 800c58c:	0ddb      	lsrs	r3, r3, #23
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	753b      	strb	r3, [r7, #20]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
 800c592:	23ff      	movs	r3, #255	; 0xff
 800c594:	75fb      	strb	r3, [r7, #23]
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 800c596:	697b      	ldr	r3, [r7, #20]
}
 800c598:	4618      	mov	r0, r3
 800c59a:	371c      	adds	r7, #28
 800c59c:	46bd      	mov	sp, r7
 800c59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a2:	4770      	bx	lr

0800c5a4 <lv_color_premult>:

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b085      	sub	sp, #20
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	607a      	str	r2, [r7, #4]
 800c5b0:	72fb      	strb	r3, [r7, #11]
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 800c5b2:	7bbb      	ldrb	r3, [r7, #14]
 800c5b4:	b29a      	uxth	r2, r3
 800c5b6:	7afb      	ldrb	r3, [r7, #11]
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	fb12 f303 	smulbb	r3, r2, r3
 800c5be:	b29a      	uxth	r2, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	801a      	strh	r2, [r3, #0]
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 800c5c4:	7b7b      	ldrb	r3, [r7, #13]
 800c5c6:	b299      	uxth	r1, r3
 800c5c8:	7afb      	ldrb	r3, [r7, #11]
 800c5ca:	b29a      	uxth	r2, r3
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	3302      	adds	r3, #2
 800c5d0:	fb11 f202 	smulbb	r2, r1, r2
 800c5d4:	b292      	uxth	r2, r2
 800c5d6:	801a      	strh	r2, [r3, #0]
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 800c5d8:	7b3b      	ldrb	r3, [r7, #12]
 800c5da:	b299      	uxth	r1, r3
 800c5dc:	7afb      	ldrb	r3, [r7, #11]
 800c5de:	b29a      	uxth	r2, r3
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	3304      	adds	r3, #4
 800c5e4:	fb11 f202 	smulbb	r2, r1, r2
 800c5e8:	b292      	uxth	r2, r2
 800c5ea:	801a      	strh	r2, [r3, #0]
    out[0] = LV_COLOR_GET_R(c);
    out[1] = LV_COLOR_GET_G(c);
    out[2] = LV_COLOR_GET_B(c);
#endif

}
 800c5ec:	bf00      	nop
 800c5ee:	3714      	adds	r7, #20
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr

0800c5f8 <lv_color_mix_premult>:
 *            Should be modified like mix = `255 - mix`
 * @return the mixed color
 * @note 255 won't give clearly `c1`.
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b087      	sub	sp, #28
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	60f8      	str	r0, [r7, #12]
 800c600:	60b9      	str	r1, [r7, #8]
 800c602:	4613      	mov	r3, r2
 800c604:	71fb      	strb	r3, [r7, #7]
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	881b      	ldrh	r3, [r3, #0]
 800c60a:	461a      	mov	r2, r3
 800c60c:	7abb      	ldrb	r3, [r7, #10]
 800c60e:	4619      	mov	r1, r3
 800c610:	79fb      	ldrb	r3, [r7, #7]
 800c612:	fb03 f301 	mul.w	r3, r3, r1
 800c616:	4413      	add	r3, r2
 800c618:	461a      	mov	r2, r3
 800c61a:	4613      	mov	r3, r2
 800c61c:	021b      	lsls	r3, r3, #8
 800c61e:	4413      	add	r3, r2
 800c620:	01db      	lsls	r3, r3, #7
 800c622:	4413      	add	r3, r2
 800c624:	0ddb      	lsrs	r3, r3, #23
 800c626:	b2db      	uxtb	r3, r3
 800c628:	75bb      	strb	r3, [r7, #22]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	3302      	adds	r3, #2
 800c62e:	881b      	ldrh	r3, [r3, #0]
 800c630:	461a      	mov	r2, r3
 800c632:	7a7b      	ldrb	r3, [r7, #9]
 800c634:	4619      	mov	r1, r3
 800c636:	79fb      	ldrb	r3, [r7, #7]
 800c638:	fb03 f301 	mul.w	r3, r3, r1
 800c63c:	4413      	add	r3, r2
 800c63e:	461a      	mov	r2, r3
 800c640:	4613      	mov	r3, r2
 800c642:	021b      	lsls	r3, r3, #8
 800c644:	4413      	add	r3, r2
 800c646:	01db      	lsls	r3, r3, #7
 800c648:	4413      	add	r3, r2
 800c64a:	0ddb      	lsrs	r3, r3, #23
 800c64c:	b2db      	uxtb	r3, r3
 800c64e:	757b      	strb	r3, [r7, #21]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	3304      	adds	r3, #4
 800c654:	881b      	ldrh	r3, [r3, #0]
 800c656:	461a      	mov	r2, r3
 800c658:	7a3b      	ldrb	r3, [r7, #8]
 800c65a:	4619      	mov	r1, r3
 800c65c:	79fb      	ldrb	r3, [r7, #7]
 800c65e:	fb03 f301 	mul.w	r3, r3, r1
 800c662:	4413      	add	r3, r2
 800c664:	461a      	mov	r2, r3
 800c666:	4613      	mov	r3, r2
 800c668:	021b      	lsls	r3, r3, #8
 800c66a:	4413      	add	r3, r2
 800c66c:	01db      	lsls	r3, r3, #7
 800c66e:	4413      	add	r3, r2
 800c670:	0ddb      	lsrs	r3, r3, #23
 800c672:	b2db      	uxtb	r3, r3
 800c674:	753b      	strb	r3, [r7, #20]
    LV_COLOR_SET_A(ret, 0xFF);
 800c676:	23ff      	movs	r3, #255	; 0xff
 800c678:	75fb      	strb	r3, [r7, #23]
    LV_COLOR_SET_G(c1, premult_c1[1]);
    LV_COLOR_SET_B(c1, premult_c1[2]);
    ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
#endif

    return ret;
 800c67a:	697b      	ldr	r3, [r7, #20]
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	371c      	adds	r7, #28
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 800c688:	b480      	push	{r7}
 800c68a:	b083      	sub	sp, #12
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c696:	b29a      	uxth	r2, r3
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	1ad3      	subs	r3, r2, r3
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	b21b      	sxth	r3, r3
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	370c      	adds	r7, #12
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b4:	4770      	bx	lr

0800c6b6 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 800c6b6:	b480      	push	{r7}
 800c6b8:	b083      	sub	sp, #12
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c6c4:	b29a      	uxth	r2, r3
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	1ad3      	subs	r3, r2, r3
 800c6d0:	b29b      	uxth	r3, r3
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	b21b      	sxth	r3, r3
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	370c      	adds	r7, #12
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr

0800c6e4 <_lv_blend_fill>:
 * @param mode blend mode from `lv_blend_mode_t`
 */
LV_ATTRIBUTE_FAST_MEM void _lv_blend_fill(const lv_area_t * clip_area, const lv_area_t * fill_area,
                                          lv_color_t color, lv_opa_t * mask, lv_draw_mask_res_t mask_res, lv_opa_t opa,
                                          lv_blend_mode_t mode)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b092      	sub	sp, #72	; 0x48
 800c6e8:	af04      	add	r7, sp, #16
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	607a      	str	r2, [r7, #4]
 800c6f0:	603b      	str	r3, [r7, #0]
    /*Do not draw transparent things*/
    if(opa < LV_OPA_MIN) return;
 800c6f2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	f240 80bd 	bls.w	800c876 <_lv_blend_fill+0x192>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 800c6fc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c700:	2b00      	cmp	r3, #0
 800c702:	f000 80ba 	beq.w	800c87a <_lv_blend_fill+0x196>

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800c706:	f7fd fe0f 	bl	800a328 <_lv_refr_get_disp_refreshing>
 800c70a:	6338      	str	r0, [r7, #48]	; 0x30
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800c70c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c70e:	f00d fefb 	bl	801a508 <lv_disp_get_buf>
 800c712:	62f8      	str	r0, [r7, #44]	; 0x2c
    const lv_area_t * disp_area = &vdb->area;
 800c714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c716:	3310      	adds	r3, #16
 800c718:	62bb      	str	r3, [r7, #40]	; 0x28
    lv_color_t * disp_buf = vdb->buf_act;
 800c71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71c:	689b      	ldr	r3, [r3, #8]
 800c71e:	627b      	str	r3, [r7, #36]	; 0x24

    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 800c720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c724:	2b00      	cmp	r3, #0
 800c726:	d004      	beq.n	800c732 <_lv_blend_fill+0x4e>
 800c728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c72c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c72e:	4610      	mov	r0, r2
 800c730:	4798      	blx	r3

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
 800c732:	f107 0314 	add.w	r3, r7, #20
 800c736:	68ba      	ldr	r2, [r7, #8]
 800c738:	68f9      	ldr	r1, [r7, #12]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f00e fba4 	bl	801ae88 <_lv_area_intersect>
 800c740:	4603      	mov	r3, r0
 800c742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(!is_common) return;
 800c746:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c74a:	f083 0301 	eor.w	r3, r3, #1
 800c74e:	b2db      	uxtb	r3, r3
 800c750:	2b00      	cmp	r3, #0
 800c752:	f040 8094 	bne.w	800c87e <_lv_blend_fill+0x19a>

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 800c756:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c75a:	b29a      	uxth	r2, r3
 800c75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c762:	b29b      	uxth	r3, r3
 800c764:	1ad3      	subs	r3, r2, r3
 800c766:	b29b      	uxth	r3, r3
 800c768:	b21b      	sxth	r3, r3
 800c76a:	82bb      	strh	r3, [r7, #20]
    draw_area.y1 -= disp_area->y1;
 800c76c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c770:	b29a      	uxth	r2, r3
 800c772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c774:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c778:	b29b      	uxth	r3, r3
 800c77a:	1ad3      	subs	r3, r2, r3
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	b21b      	sxth	r3, r3
 800c780:	82fb      	strh	r3, [r7, #22]
    draw_area.x2 -= disp_area->x1;
 800c782:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800c786:	b29a      	uxth	r2, r3
 800c788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c78e:	b29b      	uxth	r3, r3
 800c790:	1ad3      	subs	r3, r2, r3
 800c792:	b29b      	uxth	r3, r3
 800c794:	b21b      	sxth	r3, r3
 800c796:	833b      	strh	r3, [r7, #24]
    draw_area.y2 -= disp_area->y1;
 800c798:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c79c:	b29a      	uxth	r2, r3
 800c79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c7a4:	b29b      	uxth	r3, r3
 800c7a6:	1ad3      	subs	r3, r2, r3
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	b21b      	sxth	r3, r3
 800c7ac:	837b      	strh	r3, [r7, #26]

    /*Round the values in the mask if anti-aliasing is disabled*/
#if LV_ANTIALIAS
    if(mask && disp->driver.antialiasing == 0)
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d025      	beq.n	800c800 <_lv_blend_fill+0x11c>
 800c7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b6:	7a1b      	ldrb	r3, [r3, #8]
 800c7b8:	f003 0301 	and.w	r3, r3, #1
 800c7bc:	b2db      	uxtb	r3, r3
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d11e      	bne.n	800c800 <_lv_blend_fill+0x11c>
#else
    if(mask)
#endif
    {
        int32_t mask_w = lv_area_get_width(&draw_area);
 800c7c2:	f107 0314 	add.w	r3, r7, #20
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f7ff ff5e 	bl	800c688 <lv_area_get_width>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	61fb      	str	r3, [r7, #28]
        int32_t i;
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	637b      	str	r3, [r7, #52]	; 0x34
 800c7d4:	e010      	b.n	800c7f8 <_lv_blend_fill+0x114>
 800c7d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7d8:	683a      	ldr	r2, [r7, #0]
 800c7da:	4413      	add	r3, r2
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	2b80      	cmp	r3, #128	; 0x80
 800c7e0:	d901      	bls.n	800c7e6 <_lv_blend_fill+0x102>
 800c7e2:	21ff      	movs	r1, #255	; 0xff
 800c7e4:	e000      	b.n	800c7e8 <_lv_blend_fill+0x104>
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ea:	683a      	ldr	r2, [r7, #0]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	460a      	mov	r2, r1
 800c7f0:	701a      	strb	r2, [r3, #0]
 800c7f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	637b      	str	r3, [r7, #52]	; 0x34
 800c7f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7fa:	69fb      	ldr	r3, [r7, #28]
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	dbea      	blt.n	800c7d6 <_lv_blend_fill+0xf2>
    }

    if(disp->driver.set_px_cb) {
 800c800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c802:	695b      	ldr	r3, [r3, #20]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d00f      	beq.n	800c828 <_lv_blend_fill+0x144>
        fill_set_px(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
 800c808:	f107 0214 	add.w	r2, r7, #20
 800c80c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c810:	9302      	str	r3, [sp, #8]
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	9301      	str	r3, [sp, #4]
 800c816:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c81a:	9300      	str	r3, [sp, #0]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c822:	f000 f907 	bl	800ca34 <fill_set_px>
 800c826:	e02b      	b.n	800c880 <_lv_blend_fill+0x19c>
    }
    else if(mode == LV_BLEND_MODE_NORMAL) {
 800c828:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d10f      	bne.n	800c850 <_lv_blend_fill+0x16c>
        fill_normal(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
 800c830:	f107 0214 	add.w	r2, r7, #20
 800c834:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c838:	9302      	str	r3, [sp, #8]
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	9301      	str	r3, [sp, #4]
 800c83e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c842:	9300      	str	r3, [sp, #0]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c84a:	f000 f98d 	bl	800cb68 <fill_normal>
 800c84e:	e017      	b.n	800c880 <_lv_blend_fill+0x19c>
    }
#if LV_USE_BLEND_MODES
    else {
        fill_blended(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res, mode);
 800c850:	f107 0214 	add.w	r2, r7, #20
 800c854:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800c858:	9303      	str	r3, [sp, #12]
 800c85a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c85e:	9302      	str	r3, [sp, #8]
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	9301      	str	r3, [sp, #4]
 800c864:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c868:	9300      	str	r3, [sp, #0]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c86e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c870:	f000 fc3c 	bl	800d0ec <fill_blended>
 800c874:	e004      	b.n	800c880 <_lv_blend_fill+0x19c>
    if(opa < LV_OPA_MIN) return;
 800c876:	bf00      	nop
 800c878:	e002      	b.n	800c880 <_lv_blend_fill+0x19c>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 800c87a:	bf00      	nop
 800c87c:	e000      	b.n	800c880 <_lv_blend_fill+0x19c>
    if(!is_common) return;
 800c87e:	bf00      	nop
    }
#endif
}
 800c880:	3738      	adds	r7, #56	; 0x38
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <_lv_blend_map>:
 */
LV_ATTRIBUTE_FAST_MEM void _lv_blend_map(const lv_area_t * clip_area, const lv_area_t * map_area,
                                         const lv_color_t * map_buf,
                                         lv_opa_t * mask, lv_draw_mask_res_t mask_res,
                                         lv_opa_t opa, lv_blend_mode_t mode)
{
 800c886:	b580      	push	{r7, lr}
 800c888:	b094      	sub	sp, #80	; 0x50
 800c88a:	af06      	add	r7, sp, #24
 800c88c:	60f8      	str	r0, [r7, #12]
 800c88e:	60b9      	str	r1, [r7, #8]
 800c890:	607a      	str	r2, [r7, #4]
 800c892:	603b      	str	r3, [r7, #0]
    /*Do not draw transparent things*/
    if(opa < LV_OPA_MIN) return;
 800c894:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c898:	2b01      	cmp	r3, #1
 800c89a:	f240 80c3 	bls.w	800ca24 <_lv_blend_map+0x19e>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 800c89e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	f000 80c0 	beq.w	800ca28 <_lv_blend_map+0x1a2>

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
 800c8a8:	f107 0314 	add.w	r3, r7, #20
 800c8ac:	68ba      	ldr	r2, [r7, #8]
 800c8ae:	68f9      	ldr	r1, [r7, #12]
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f00e fae9 	bl	801ae88 <_lv_area_intersect>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if(!is_common) return;
 800c8bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c8c0:	f083 0301 	eor.w	r3, r3, #1
 800c8c4:	b2db      	uxtb	r3, r3
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	f040 80b0 	bne.w	800ca2c <_lv_blend_map+0x1a6>

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800c8cc:	f7fd fd2c 	bl	800a328 <_lv_refr_get_disp_refreshing>
 800c8d0:	62f8      	str	r0, [r7, #44]	; 0x2c
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800c8d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8d4:	f00d fe18 	bl	801a508 <lv_disp_get_buf>
 800c8d8:	62b8      	str	r0, [r7, #40]	; 0x28
    const lv_area_t * disp_area = &vdb->area;
 800c8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8dc:	3310      	adds	r3, #16
 800c8de:	627b      	str	r3, [r7, #36]	; 0x24
    lv_color_t * disp_buf = vdb->buf_act;
 800c8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e2:	689b      	ldr	r3, [r3, #8]
 800c8e4:	623b      	str	r3, [r7, #32]

    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
 800c8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d004      	beq.n	800c8f8 <_lv_blend_map+0x72>
 800c8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8f4:	4610      	mov	r0, r2
 800c8f6:	4798      	blx	r3

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 800c8f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c8fc:	b29a      	uxth	r2, r3
 800c8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c900:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c904:	b29b      	uxth	r3, r3
 800c906:	1ad3      	subs	r3, r2, r3
 800c908:	b29b      	uxth	r3, r3
 800c90a:	b21b      	sxth	r3, r3
 800c90c:	82bb      	strh	r3, [r7, #20]
    draw_area.y1 -= disp_area->y1;
 800c90e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c912:	b29a      	uxth	r2, r3
 800c914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c916:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	1ad3      	subs	r3, r2, r3
 800c91e:	b29b      	uxth	r3, r3
 800c920:	b21b      	sxth	r3, r3
 800c922:	82fb      	strh	r3, [r7, #22]
    draw_area.x2 -= disp_area->x1;
 800c924:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800c928:	b29a      	uxth	r2, r3
 800c92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c930:	b29b      	uxth	r3, r3
 800c932:	1ad3      	subs	r3, r2, r3
 800c934:	b29b      	uxth	r3, r3
 800c936:	b21b      	sxth	r3, r3
 800c938:	833b      	strh	r3, [r7, #24]
    draw_area.y2 -= disp_area->y1;
 800c93a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c93e:	b29a      	uxth	r2, r3
 800c940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c942:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c946:	b29b      	uxth	r3, r3
 800c948:	1ad3      	subs	r3, r2, r3
 800c94a:	b29b      	uxth	r3, r3
 800c94c:	b21b      	sxth	r3, r3
 800c94e:	837b      	strh	r3, [r7, #26]

    /*Round the values in the mask if anti-aliasing is disabled*/
#if LV_ANTIALIAS
    if(mask && disp->driver.antialiasing == 0)
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d025      	beq.n	800c9a2 <_lv_blend_map+0x11c>
 800c956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c958:	7a1b      	ldrb	r3, [r3, #8]
 800c95a:	f003 0301 	and.w	r3, r3, #1
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	2b00      	cmp	r3, #0
 800c962:	d11e      	bne.n	800c9a2 <_lv_blend_map+0x11c>
#else
    if(mask)
#endif
    {
        int32_t mask_w = lv_area_get_width(&draw_area);
 800c964:	f107 0314 	add.w	r3, r7, #20
 800c968:	4618      	mov	r0, r3
 800c96a:	f7ff fe8d 	bl	800c688 <lv_area_get_width>
 800c96e:	4603      	mov	r3, r0
 800c970:	61fb      	str	r3, [r7, #28]
        int32_t i;
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 800c972:	2300      	movs	r3, #0
 800c974:	637b      	str	r3, [r7, #52]	; 0x34
 800c976:	e010      	b.n	800c99a <_lv_blend_map+0x114>
 800c978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c97a:	683a      	ldr	r2, [r7, #0]
 800c97c:	4413      	add	r3, r2
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	2b80      	cmp	r3, #128	; 0x80
 800c982:	d901      	bls.n	800c988 <_lv_blend_map+0x102>
 800c984:	21ff      	movs	r1, #255	; 0xff
 800c986:	e000      	b.n	800c98a <_lv_blend_map+0x104>
 800c988:	2100      	movs	r1, #0
 800c98a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c98c:	683a      	ldr	r2, [r7, #0]
 800c98e:	4413      	add	r3, r2
 800c990:	460a      	mov	r2, r1
 800c992:	701a      	strb	r2, [r3, #0]
 800c994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c996:	3301      	adds	r3, #1
 800c998:	637b      	str	r3, [r7, #52]	; 0x34
 800c99a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	dbea      	blt.n	800c978 <_lv_blend_map+0xf2>
    }
    if(disp->driver.set_px_cb) {
 800c9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a4:	695b      	ldr	r3, [r3, #20]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d011      	beq.n	800c9ce <_lv_blend_map+0x148>
        map_set_px(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res);
 800c9aa:	f107 0214 	add.w	r2, r7, #20
 800c9ae:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c9b2:	9303      	str	r3, [sp, #12]
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	9302      	str	r3, [sp, #8]
 800c9b8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c9bc:	9301      	str	r3, [sp, #4]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	9300      	str	r3, [sp, #0]
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	6a39      	ldr	r1, [r7, #32]
 800c9c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9c8:	f000 fca0 	bl	800d30c <map_set_px>
 800c9cc:	e02f      	b.n	800ca2e <_lv_blend_map+0x1a8>
    }
    else if(mode == LV_BLEND_MODE_NORMAL) {
 800c9ce:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d111      	bne.n	800c9fa <_lv_blend_map+0x174>
        map_normal(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res);
 800c9d6:	f107 0214 	add.w	r2, r7, #20
 800c9da:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c9de:	9303      	str	r3, [sp, #12]
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	9302      	str	r3, [sp, #8]
 800c9e4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c9e8:	9301      	str	r3, [sp, #4]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	9300      	str	r3, [sp, #0]
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	6a39      	ldr	r1, [r7, #32]
 800c9f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9f4:	f000 fd69 	bl	800d4ca <map_normal>
 800c9f8:	e019      	b.n	800ca2e <_lv_blend_map+0x1a8>
    }
#if LV_USE_BLEND_MODES
    else {
        map_blended(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res, mode);
 800c9fa:	f107 0214 	add.w	r2, r7, #20
 800c9fe:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800ca02:	9304      	str	r3, [sp, #16]
 800ca04:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ca08:	9303      	str	r3, [sp, #12]
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	9302      	str	r3, [sp, #8]
 800ca0e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800ca12:	9301      	str	r3, [sp, #4]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	9300      	str	r3, [sp, #0]
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	6a39      	ldr	r1, [r7, #32]
 800ca1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca1e:	f001 f817 	bl	800da50 <map_blended>
 800ca22:	e004      	b.n	800ca2e <_lv_blend_map+0x1a8>
    if(opa < LV_OPA_MIN) return;
 800ca24:	bf00      	nop
 800ca26:	e002      	b.n	800ca2e <_lv_blend_map+0x1a8>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 800ca28:	bf00      	nop
 800ca2a:	e000      	b.n	800ca2e <_lv_blend_map+0x1a8>
    if(!is_common) return;
 800ca2c:	bf00      	nop
    }
#endif
}
 800ca2e:	3738      	adds	r7, #56	; 0x38
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <fill_set_px>:
 **********************/

static void fill_set_px(const lv_area_t * disp_area, lv_color_t * disp_buf,  const lv_area_t * draw_area,
                        lv_color_t color, lv_opa_t opa,
                        const lv_opa_t * mask, lv_draw_mask_res_t mask_res)
{
 800ca34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca36:	b08f      	sub	sp, #60	; 0x3c
 800ca38:	af04      	add	r7, sp, #16
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	60b9      	str	r1, [r7, #8]
 800ca3e:	607a      	str	r2, [r7, #4]
 800ca40:	603b      	str	r3, [r7, #0]

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800ca42:	f7fd fc71 	bl	800a328 <_lv_refr_get_disp_refreshing>
 800ca46:	61b8      	str	r0, [r7, #24]

    /*Get the width of the `disp_area` it will be used to go to the next line*/
    int32_t disp_w = lv_area_get_width(disp_area);
 800ca48:	68f8      	ldr	r0, [r7, #12]
 800ca4a:	f7ff fe1d 	bl	800c688 <lv_area_get_width>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	617b      	str	r3, [r7, #20]

    int32_t x;
    int32_t y;

    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800ca52:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d131      	bne.n	800cabe <fill_set_px+0x8a>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ca60:	623b      	str	r3, [r7, #32]
 800ca62:	e024      	b.n	800caae <fill_set_px+0x7a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca6a:	627b      	str	r3, [r7, #36]	; 0x24
 800ca6c:	e015      	b.n	800ca9a <fill_set_px+0x66>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
 800ca6e:	69bb      	ldr	r3, [r7, #24]
 800ca70:	695c      	ldr	r4, [r3, #20]
 800ca72:	69b8      	ldr	r0, [r7, #24]
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	b219      	sxth	r1, r3
 800ca78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7a:	b21d      	sxth	r5, r3
 800ca7c:	6a3b      	ldr	r3, [r7, #32]
 800ca7e:	b21b      	sxth	r3, r3
 800ca80:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800ca84:	9202      	str	r2, [sp, #8]
 800ca86:	683a      	ldr	r2, [r7, #0]
 800ca88:	9201      	str	r2, [sp, #4]
 800ca8a:	9300      	str	r3, [sp, #0]
 800ca8c:	462b      	mov	r3, r5
 800ca8e:	460a      	mov	r2, r1
 800ca90:	68b9      	ldr	r1, [r7, #8]
 800ca92:	47a0      	blx	r4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800ca94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca96:	3301      	adds	r3, #1
 800ca98:	627b      	str	r3, [r7, #36]	; 0x24
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800caa0:	461a      	mov	r2, r3
 800caa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa4:	4293      	cmp	r3, r2
 800caa6:	dde2      	ble.n	800ca6e <fill_set_px+0x3a>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800caa8:	6a3b      	ldr	r3, [r7, #32]
 800caaa:	3301      	adds	r3, #1
 800caac:	623b      	str	r3, [r7, #32]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cab4:	461a      	mov	r2, r3
 800cab6:	6a3b      	ldr	r3, [r7, #32]
 800cab8:	4293      	cmp	r3, r2
 800caba:	ddd3      	ble.n	800ca64 <fill_set_px+0x30>
                }
            }
            mask_tmp += draw_area_w;
        }
    }
}
 800cabc:	e050      	b.n	800cb60 <fill_set_px+0x12c>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cac4:	425b      	negs	r3, r3
 800cac6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cac8:	4413      	add	r3, r2
 800caca:	61fb      	str	r3, [r7, #28]
        int32_t draw_area_w = lv_area_get_width(draw_area);
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f7ff fddb 	bl	800c688 <lv_area_get_width>
 800cad2:	4603      	mov	r3, r0
 800cad4:	613b      	str	r3, [r7, #16]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cadc:	623b      	str	r3, [r7, #32]
 800cade:	e038      	b.n	800cb52 <fill_set_px+0x11e>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cae6:	627b      	str	r3, [r7, #36]	; 0x24
 800cae8:	e025      	b.n	800cb36 <fill_set_px+0x102>
                if(mask_tmp[x]) {
 800caea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caec:	69fa      	ldr	r2, [r7, #28]
 800caee:	4413      	add	r3, r2
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d01c      	beq.n	800cb30 <fill_set_px+0xfc>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
 800caf6:	69bb      	ldr	r3, [r7, #24]
 800caf8:	695c      	ldr	r4, [r3, #20]
 800cafa:	69bd      	ldr	r5, [r7, #24]
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	b21e      	sxth	r6, r3
 800cb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb02:	fa0f fc83 	sxth.w	ip, r3
 800cb06:	6a3b      	ldr	r3, [r7, #32]
 800cb08:	b21b      	sxth	r3, r3
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 800cb0a:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800cb0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb10:	69f8      	ldr	r0, [r7, #28]
 800cb12:	4401      	add	r1, r0
 800cb14:	7809      	ldrb	r1, [r1, #0]
 800cb16:	fb01 f202 	mul.w	r2, r1, r2
 800cb1a:	0a12      	lsrs	r2, r2, #8
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
 800cb1c:	b2d2      	uxtb	r2, r2
 800cb1e:	9202      	str	r2, [sp, #8]
 800cb20:	683a      	ldr	r2, [r7, #0]
 800cb22:	9201      	str	r2, [sp, #4]
 800cb24:	9300      	str	r3, [sp, #0]
 800cb26:	4663      	mov	r3, ip
 800cb28:	4632      	mov	r2, r6
 800cb2a:	68b9      	ldr	r1, [r7, #8]
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	47a0      	blx	r4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800cb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb32:	3301      	adds	r3, #1
 800cb34:	627b      	str	r3, [r7, #36]	; 0x24
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb40:	4293      	cmp	r3, r2
 800cb42:	ddd2      	ble.n	800caea <fill_set_px+0xb6>
            mask_tmp += draw_area_w;
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	69fa      	ldr	r2, [r7, #28]
 800cb48:	4413      	add	r3, r2
 800cb4a:	61fb      	str	r3, [r7, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800cb4c:	6a3b      	ldr	r3, [r7, #32]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	623b      	str	r3, [r7, #32]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cb58:	461a      	mov	r2, r3
 800cb5a:	6a3b      	ldr	r3, [r7, #32]
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	ddbf      	ble.n	800cae0 <fill_set_px+0xac>
}
 800cb60:	bf00      	nop
 800cb62:	372c      	adds	r7, #44	; 0x2c
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb68 <fill_normal>:
 */
LV_ATTRIBUTE_FAST_MEM static void fill_normal(const lv_area_t * disp_area, lv_color_t * disp_buf,
                                              const lv_area_t * draw_area,
                                              lv_color_t color, lv_opa_t opa,
                                              const lv_opa_t * mask, lv_draw_mask_res_t mask_res)
{
 800cb68:	b590      	push	{r4, r7, lr}
 800cb6a:	b09b      	sub	sp, #108	; 0x6c
 800cb6c:	af02      	add	r7, sp, #8
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	607a      	str	r2, [r7, #4]
 800cb74:	603b      	str	r3, [r7, #0]

#if LV_USE_GPU || LV_COLOR_SCREEN_TRANSP
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800cb76:	f7fd fbd7 	bl	800a328 <_lv_refr_get_disp_refreshing>
 800cb7a:	63f8      	str	r0, [r7, #60]	; 0x3c
#endif

    /*Get the width of the `disp_area` it will be used to go to the next line*/
    int32_t disp_w = lv_area_get_width(disp_area);
 800cb7c:	68f8      	ldr	r0, [r7, #12]
 800cb7e:	f7ff fd83 	bl	800c688 <lv_area_get_width>
 800cb82:	4603      	mov	r3, r0
 800cb84:	63bb      	str	r3, [r7, #56]	; 0x38

    int32_t draw_area_w = lv_area_get_width(draw_area);
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f7ff fd7e 	bl	800c688 <lv_area_get_width>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t draw_area_h = lv_area_get_height(draw_area);
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f7ff fd90 	bl	800c6b6 <lv_area_get_height>
 800cb96:	4603      	mov	r3, r0
 800cb98:	633b      	str	r3, [r7, #48]	; 0x30

    /*Create a temp. disp_buf which always point to the first pixel of the destination area*/
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cba0:	461a      	mov	r2, r3
 800cba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba4:	fb03 f302 	mul.w	r3, r3, r2
 800cba8:	461a      	mov	r2, r3
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cbb0:	4413      	add	r3, r2
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	68ba      	ldr	r2, [r7, #8]
 800cbb6:	4413      	add	r3, r2
 800cbb8:	65fb      	str	r3, [r7, #92]	; 0x5c

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800cbba:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800cbbe:	2b01      	cmp	r3, #1
 800cbc0:	f040 80c5 	bne.w	800cd4e <fill_normal+0x1e6>
        if(opa > LV_OPA_MAX) {
 800cbc4:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800cbc8:	2bfd      	cmp	r3, #253	; 0xfd
 800cbca:	d92a      	bls.n	800cc22 <fill_normal+0xba>
            if(lv_area_get_size(draw_area) >= 240) {
                lv_gpu_stm32_dma2d_fill(disp_buf_first, disp_w, color, draw_area_w, draw_area_h);
                return;
            }
#elif LV_USE_GPU
            if(disp->driver.gpu_fill_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
 800cbcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d010      	beq.n	800cbf6 <fill_normal+0x8e>
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f00e f936 	bl	801ae46 <lv_area_get_size>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2bf0      	cmp	r3, #240	; 0xf0
 800cbde:	d90a      	bls.n	800cbf6 <fill_normal+0x8e>
                disp->driver.gpu_fill_cb(&disp->driver, disp_buf, disp_w, draw_area, color);
 800cbe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbe2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800cbe4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe8:	b21a      	sxth	r2, r3
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	9300      	str	r3, [sp, #0]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	68b9      	ldr	r1, [r7, #8]
 800cbf2:	47a0      	blx	r4
                return;
 800cbf4:	e277      	b.n	800d0e6 <fill_normal+0x57e>
            }
#endif
            /*Software rendering*/
            for(y = 0; y < draw_area_h; y++) {
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	657b      	str	r3, [r7, #84]	; 0x54
 800cbfa:	e00d      	b.n	800cc18 <fill_normal+0xb0>
                lv_color_fill(disp_buf_first, color, draw_area_w);
 800cbfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbfe:	461a      	mov	r2, r3
 800cc00:	6839      	ldr	r1, [r7, #0]
 800cc02:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cc04:	f00e feea 	bl	801b9dc <lv_color_fill>
                disp_buf_first += disp_w;
 800cc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0a:	009b      	lsls	r3, r3, #2
 800cc0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc0e:	4413      	add	r3, r2
 800cc10:	65fb      	str	r3, [r7, #92]	; 0x5c
            for(y = 0; y < draw_area_h; y++) {
 800cc12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc14:	3301      	adds	r3, #1
 800cc16:	657b      	str	r3, [r7, #84]	; 0x54
 800cc18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	dbed      	blt.n	800cbfc <fill_normal+0x94>
 800cc20:	e261      	b.n	800d0e6 <fill_normal+0x57e>
                    return;
                }
                /* Fall down to SW render in case of error */
            }
#elif LV_USE_GPU
            if(disp->driver.gpu_blend_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
 800cc22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d034      	beq.n	800cc94 <fill_normal+0x12c>
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f00e f90b 	bl	801ae46 <lv_area_get_size>
 800cc30:	4603      	mov	r3, r0
 800cc32:	2bf0      	cmp	r3, #240	; 0xf0
 800cc34:	d92e      	bls.n	800cc94 <fill_normal+0x12c>
                for(x = 0; x < draw_area_w ; x++) blend_buf[x].full = color.full;
 800cc36:	2300      	movs	r3, #0
 800cc38:	65bb      	str	r3, [r7, #88]	; 0x58
 800cc3a:	e007      	b.n	800cc4c <fill_normal+0xe4>
 800cc3c:	683a      	ldr	r2, [r7, #0]
 800cc3e:	4997      	ldr	r1, [pc, #604]	; (800ce9c <fill_normal+0x334>)
 800cc40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cc46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc48:	3301      	adds	r3, #1
 800cc4a:	65bb      	str	r3, [r7, #88]	; 0x58
 800cc4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc50:	429a      	cmp	r2, r3
 800cc52:	dbf3      	blt.n	800cc3c <fill_normal+0xd4>

                for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cc5a:	657b      	str	r3, [r7, #84]	; 0x54
 800cc5c:	e012      	b.n	800cc84 <fill_normal+0x11c>
                    disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, blend_buf, draw_area_w, opa);
 800cc5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc60:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800cc62:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cc64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc66:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800cc6a:	9300      	str	r3, [sp, #0]
 800cc6c:	4613      	mov	r3, r2
 800cc6e:	4a8b      	ldr	r2, [pc, #556]	; (800ce9c <fill_normal+0x334>)
 800cc70:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cc72:	47a0      	blx	r4
                    disp_buf_first += disp_w;
 800cc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc7a:	4413      	add	r3, r2
 800cc7c:	65fb      	str	r3, [r7, #92]	; 0x5c
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800cc7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc80:	3301      	adds	r3, #1
 800cc82:	657b      	str	r3, [r7, #84]	; 0x54
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	dde5      	ble.n	800cc5e <fill_normal+0xf6>
                }
                return;
 800cc92:	e228      	b.n	800d0e6 <fill_normal+0x57e>
                }

                return;
            }
#endif
            lv_color_t last_dest_color = LV_COLOR_BLACK;
 800cc94:	2300      	movs	r3, #0
 800cc96:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800cca0:	2300      	movs	r3, #0
 800cca2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cca6:	23ff      	movs	r3, #255	; 0xff
 800cca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 800ccac:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ccb4:	6838      	ldr	r0, [r7, #0]
 800ccb6:	f7ff fc23 	bl	800c500 <lv_color_mix>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	623b      	str	r3, [r7, #32]

            uint16_t color_premult[3];
            lv_color_premult(color, opa, color_premult);
 800ccbe:	f107 0218 	add.w	r2, r7, #24
 800ccc2:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	6838      	ldr	r0, [r7, #0]
 800ccca:	f7ff fc6b 	bl	800c5a4 <lv_color_premult>
            lv_opa_t opa_inv = 255 - opa;
 800ccce:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800ccd2:	43db      	mvns	r3, r3
 800ccd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            for(y = 0; y < draw_area_h; y++) {
 800ccd8:	2300      	movs	r3, #0
 800ccda:	657b      	str	r3, [r7, #84]	; 0x54
 800ccdc:	e032      	b.n	800cd44 <fill_normal+0x1dc>
                for(x = 0; x < draw_area_w; x++) {
 800ccde:	2300      	movs	r3, #0
 800cce0:	65bb      	str	r3, [r7, #88]	; 0x58
 800cce2:	e023      	b.n	800cd2c <fill_normal+0x1c4>
                    if(last_dest_color.full != disp_buf_first[x].full) {
 800cce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ccec:	440b      	add	r3, r1
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d012      	beq.n	800cd1a <fill_normal+0x1b2>
                        last_dest_color = disp_buf_first[x];
 800ccf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ccf6:	009b      	lsls	r3, r3, #2
 800ccf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ccfa:	4413      	add	r3, r2
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	627b      	str	r3, [r7, #36]	; 0x24
                                                    &last_res_color.ch.alpha);
                        }
                        else
#endif
                        {
                            last_res_color = lv_color_mix_premult(color_premult, disp_buf_first[x], opa_inv);
 800cd00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd02:	009b      	lsls	r3, r3, #2
 800cd04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cd06:	4413      	add	r3, r2
 800cd08:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800cd0c:	f107 0018 	add.w	r0, r7, #24
 800cd10:	6819      	ldr	r1, [r3, #0]
 800cd12:	f7ff fc71 	bl	800c5f8 <lv_color_mix_premult>
 800cd16:	4603      	mov	r3, r0
 800cd18:	623b      	str	r3, [r7, #32]
                        }
                    }
                    disp_buf_first[x] = last_res_color;
 800cd1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cd20:	4413      	add	r3, r2
 800cd22:	6a3a      	ldr	r2, [r7, #32]
 800cd24:	601a      	str	r2, [r3, #0]
                for(x = 0; x < draw_area_w; x++) {
 800cd26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd28:	3301      	adds	r3, #1
 800cd2a:	65bb      	str	r3, [r7, #88]	; 0x58
 800cd2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd30:	429a      	cmp	r2, r3
 800cd32:	dbd7      	blt.n	800cce4 <fill_normal+0x17c>
                }
                disp_buf_first += disp_w;
 800cd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd36:	009b      	lsls	r3, r3, #2
 800cd38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cd3a:	4413      	add	r3, r2
 800cd3c:	65fb      	str	r3, [r7, #92]	; 0x5c
            for(y = 0; y < draw_area_h; y++) {
 800cd3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd40:	3301      	adds	r3, #1
 800cd42:	657b      	str	r3, [r7, #84]	; 0x54
 800cd44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	dbc8      	blt.n	800ccde <fill_normal+0x176>
 800cd4c:	e1cb      	b.n	800d0e6 <fill_normal+0x57e>
#endif

        /*Buffer the result color to avoid recalculating the same color*/
        lv_color_t last_dest_color;
        lv_color_t last_res_color;
        lv_opa_t last_mask = LV_OPA_TRANSP;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        last_dest_color.full = disp_buf_first[0].full;
 800cd54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	617b      	str	r3, [r7, #20]
        last_res_color.full = disp_buf_first[0].full;
 800cd5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	613b      	str	r3, [r7, #16]

        int32_t x_end4 = draw_area_w - 4;
 800cd60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd62:	3b04      	subs	r3, #4
 800cd64:	62fb      	str	r3, [r7, #44]	; 0x2c

        /*Only the mask matters*/
        if(opa > LV_OPA_MAX) {
 800cd66:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800cd6a:	2bfd      	cmp	r3, #253	; 0xfd
 800cd6c:	f240 8144 	bls.w	800cff8 <fill_normal+0x490>
            for(y = 0; y < draw_area_h; y++) {
 800cd70:	2300      	movs	r3, #0
 800cd72:	657b      	str	r3, [r7, #84]	; 0x54
 800cd74:	e13a      	b.n	800cfec <fill_normal+0x484>
                const lv_opa_t * mask_tmp_x = mask;
 800cd76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd78:	64fb      	str	r3, [r7, #76]	; 0x4c
#else
                    FILL_NORMAL_MASK_PX(x, color)
#endif
                }
#else
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	65bb      	str	r3, [r7, #88]	; 0x58
 800cd7e:	e025      	b.n	800cdcc <fill_normal+0x264>
#if LV_COLOR_SCREEN_TRANSP
                    FILL_NORMAL_MASK_PX_SCR_TRANSP(x, color)
#else
                    FILL_NORMAL_MASK_PX(x, color)
 800cd80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d01b      	beq.n	800cdc0 <fill_normal+0x258>
 800cd88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd8a:	781b      	ldrb	r3, [r3, #0]
 800cd8c:	2bff      	cmp	r3, #255	; 0xff
 800cd8e:	d106      	bne.n	800cd9e <fill_normal+0x236>
 800cd90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cd96:	4413      	add	r3, r2
 800cd98:	683a      	ldr	r2, [r7, #0]
 800cd9a:	601a      	str	r2, [r3, #0]
 800cd9c:	e010      	b.n	800cdc0 <fill_normal+0x258>
 800cd9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cda0:	009b      	lsls	r3, r3, #2
 800cda2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cda4:	4413      	add	r3, r2
 800cda6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cda8:	7810      	ldrb	r0, [r2, #0]
 800cdaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cdac:	0092      	lsls	r2, r2, #2
 800cdae:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cdb0:	188c      	adds	r4, r1, r2
 800cdb2:	4602      	mov	r2, r0
 800cdb4:	6819      	ldr	r1, [r3, #0]
 800cdb6:	6838      	ldr	r0, [r7, #0]
 800cdb8:	f7ff fba2 	bl	800c500 <lv_color_mix>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	6023      	str	r3, [r4, #0]
 800cdc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	64fb      	str	r3, [r7, #76]	; 0x4c
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800cdc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdc8:	3301      	adds	r3, #1
 800cdca:	65bb      	str	r3, [r7, #88]	; 0x58
 800cdcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cdce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	da04      	bge.n	800cdde <fill_normal+0x276>
 800cdd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdd6:	f003 0303 	and.w	r3, r3, #3
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d1d0      	bne.n	800cd80 <fill_normal+0x218>
#endif
                }

                uint32_t * mask32 = (uint32_t *) mask_tmp_x;
 800cdde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cde0:	64bb      	str	r3, [r7, #72]	; 0x48
                for(; x <= x_end4; x += 4) {
 800cde2:	e0c5      	b.n	800cf70 <fill_normal+0x408>
                    if(*mask32) {
 800cde4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	f000 80bb 	beq.w	800cf64 <fill_normal+0x3fc>
                        if((*mask32) == 0xFFFFFFFF) {
 800cdee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdf6:	d11b      	bne.n	800ce30 <fill_normal+0x2c8>
                            disp_buf_first[x] = color;
 800cdf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdfa:	009b      	lsls	r3, r3, #2
 800cdfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cdfe:	4413      	add	r3, r2
 800ce00:	683a      	ldr	r2, [r7, #0]
 800ce02:	601a      	str	r2, [r3, #0]
                            disp_buf_first[x + 1] = color;
 800ce04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce06:	3301      	adds	r3, #1
 800ce08:	009b      	lsls	r3, r3, #2
 800ce0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ce0c:	4413      	add	r3, r2
 800ce0e:	683a      	ldr	r2, [r7, #0]
 800ce10:	601a      	str	r2, [r3, #0]
                            disp_buf_first[x + 2] = color;
 800ce12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce14:	3302      	adds	r3, #2
 800ce16:	009b      	lsls	r3, r3, #2
 800ce18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ce1a:	4413      	add	r3, r2
 800ce1c:	683a      	ldr	r2, [r7, #0]
 800ce1e:	601a      	str	r2, [r3, #0]
                            disp_buf_first[x + 3] = color;
 800ce20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce22:	3303      	adds	r3, #3
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ce28:	4413      	add	r3, r2
 800ce2a:	683a      	ldr	r2, [r7, #0]
 800ce2c:	601a      	str	r2, [r3, #0]
 800ce2e:	e099      	b.n	800cf64 <fill_normal+0x3fc>
                        }
                        else {
                            mask_tmp_x = (const lv_opa_t *)mask32;
 800ce30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce32:	64fb      	str	r3, [r7, #76]	; 0x4c
                            FILL_NORMAL_MASK_PX_SCR_TRANSP(x, color)
                            FILL_NORMAL_MASK_PX_SCR_TRANSP(x + 1, color)
                            FILL_NORMAL_MASK_PX_SCR_TRANSP(x + 2, color)
                            FILL_NORMAL_MASK_PX_SCR_TRANSP(x + 3, color)
#else
                            FILL_NORMAL_MASK_PX(x, color)
 800ce34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d01b      	beq.n	800ce74 <fill_normal+0x30c>
 800ce3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	2bff      	cmp	r3, #255	; 0xff
 800ce42:	d106      	bne.n	800ce52 <fill_normal+0x2ea>
 800ce44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ce4a:	4413      	add	r3, r2
 800ce4c:	683a      	ldr	r2, [r7, #0]
 800ce4e:	601a      	str	r2, [r3, #0]
 800ce50:	e010      	b.n	800ce74 <fill_normal+0x30c>
 800ce52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce54:	009b      	lsls	r3, r3, #2
 800ce56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ce58:	4413      	add	r3, r2
 800ce5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ce5c:	7810      	ldrb	r0, [r2, #0]
 800ce5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ce60:	0092      	lsls	r2, r2, #2
 800ce62:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ce64:	188c      	adds	r4, r1, r2
 800ce66:	4602      	mov	r2, r0
 800ce68:	6819      	ldr	r1, [r3, #0]
 800ce6a:	6838      	ldr	r0, [r7, #0]
 800ce6c:	f7ff fb48 	bl	800c500 <lv_color_mix>
 800ce70:	4603      	mov	r3, r0
 800ce72:	6023      	str	r3, [r4, #0]
 800ce74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce76:	3301      	adds	r3, #1
 800ce78:	64fb      	str	r3, [r7, #76]	; 0x4c
                            FILL_NORMAL_MASK_PX(x + 1, color)
 800ce7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d021      	beq.n	800cec6 <fill_normal+0x35e>
 800ce82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	2bff      	cmp	r3, #255	; 0xff
 800ce88:	d10a      	bne.n	800cea0 <fill_normal+0x338>
 800ce8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce8c:	3301      	adds	r3, #1
 800ce8e:	009b      	lsls	r3, r3, #2
 800ce90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ce92:	4413      	add	r3, r2
 800ce94:	683a      	ldr	r2, [r7, #0]
 800ce96:	601a      	str	r2, [r3, #0]
 800ce98:	e015      	b.n	800cec6 <fill_normal+0x35e>
 800ce9a:	bf00      	nop
 800ce9c:	20018b7c 	.word	0x20018b7c
 800cea0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cea2:	3301      	adds	r3, #1
 800cea4:	009b      	lsls	r3, r3, #2
 800cea6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cea8:	4413      	add	r3, r2
 800ceaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ceac:	7810      	ldrb	r0, [r2, #0]
 800ceae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ceb0:	3201      	adds	r2, #1
 800ceb2:	0092      	lsls	r2, r2, #2
 800ceb4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ceb6:	188c      	adds	r4, r1, r2
 800ceb8:	4602      	mov	r2, r0
 800ceba:	6819      	ldr	r1, [r3, #0]
 800cebc:	6838      	ldr	r0, [r7, #0]
 800cebe:	f7ff fb1f 	bl	800c500 <lv_color_mix>
 800cec2:	4603      	mov	r3, r0
 800cec4:	6023      	str	r3, [r4, #0]
 800cec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cec8:	3301      	adds	r3, #1
 800ceca:	64fb      	str	r3, [r7, #76]	; 0x4c
                            FILL_NORMAL_MASK_PX(x + 2, color)
 800cecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cece:	781b      	ldrb	r3, [r3, #0]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d01e      	beq.n	800cf12 <fill_normal+0x3aa>
 800ced4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	2bff      	cmp	r3, #255	; 0xff
 800ceda:	d107      	bne.n	800ceec <fill_normal+0x384>
 800cedc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cede:	3302      	adds	r3, #2
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cee4:	4413      	add	r3, r2
 800cee6:	683a      	ldr	r2, [r7, #0]
 800cee8:	601a      	str	r2, [r3, #0]
 800ceea:	e012      	b.n	800cf12 <fill_normal+0x3aa>
 800ceec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ceee:	3302      	adds	r3, #2
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cef4:	4413      	add	r3, r2
 800cef6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cef8:	7810      	ldrb	r0, [r2, #0]
 800cefa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cefc:	3202      	adds	r2, #2
 800cefe:	0092      	lsls	r2, r2, #2
 800cf00:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cf02:	188c      	adds	r4, r1, r2
 800cf04:	4602      	mov	r2, r0
 800cf06:	6819      	ldr	r1, [r3, #0]
 800cf08:	6838      	ldr	r0, [r7, #0]
 800cf0a:	f7ff faf9 	bl	800c500 <lv_color_mix>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	6023      	str	r3, [r4, #0]
 800cf12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf14:	3301      	adds	r3, #1
 800cf16:	64fb      	str	r3, [r7, #76]	; 0x4c
                            FILL_NORMAL_MASK_PX(x + 3, color)
 800cf18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf1a:	781b      	ldrb	r3, [r3, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d01e      	beq.n	800cf5e <fill_normal+0x3f6>
 800cf20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	2bff      	cmp	r3, #255	; 0xff
 800cf26:	d107      	bne.n	800cf38 <fill_normal+0x3d0>
 800cf28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf2a:	3303      	adds	r3, #3
 800cf2c:	009b      	lsls	r3, r3, #2
 800cf2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf30:	4413      	add	r3, r2
 800cf32:	683a      	ldr	r2, [r7, #0]
 800cf34:	601a      	str	r2, [r3, #0]
 800cf36:	e012      	b.n	800cf5e <fill_normal+0x3f6>
 800cf38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf3a:	3303      	adds	r3, #3
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf40:	4413      	add	r3, r2
 800cf42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf44:	7810      	ldrb	r0, [r2, #0]
 800cf46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf48:	3203      	adds	r2, #3
 800cf4a:	0092      	lsls	r2, r2, #2
 800cf4c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cf4e:	188c      	adds	r4, r1, r2
 800cf50:	4602      	mov	r2, r0
 800cf52:	6819      	ldr	r1, [r3, #0]
 800cf54:	6838      	ldr	r0, [r7, #0]
 800cf56:	f7ff fad3 	bl	800c500 <lv_color_mix>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	6023      	str	r3, [r4, #0]
 800cf5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf60:	3301      	adds	r3, #1
 800cf62:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif
                        }
                    }
                    mask32++;
 800cf64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf66:	3304      	adds	r3, #4
 800cf68:	64bb      	str	r3, [r7, #72]	; 0x48
                for(; x <= x_end4; x += 4) {
 800cf6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf6c:	3304      	adds	r3, #4
 800cf6e:	65bb      	str	r3, [r7, #88]	; 0x58
 800cf70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf74:	429a      	cmp	r2, r3
 800cf76:	f77f af35 	ble.w	800cde4 <fill_normal+0x27c>
                }

                mask_tmp_x = (const lv_opa_t *)mask32;
 800cf7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf7c:	64fb      	str	r3, [r7, #76]	; 0x4c
                for(; x < draw_area_w ; x++) {
 800cf7e:	e025      	b.n	800cfcc <fill_normal+0x464>
#if LV_COLOR_SCREEN_TRANSP
                    FILL_NORMAL_MASK_PX_SCR_TRANSP(x, color)
#else
                    FILL_NORMAL_MASK_PX(x, color)
 800cf80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d01b      	beq.n	800cfc0 <fill_normal+0x458>
 800cf88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	2bff      	cmp	r3, #255	; 0xff
 800cf8e:	d106      	bne.n	800cf9e <fill_normal+0x436>
 800cf90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf92:	009b      	lsls	r3, r3, #2
 800cf94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf96:	4413      	add	r3, r2
 800cf98:	683a      	ldr	r2, [r7, #0]
 800cf9a:	601a      	str	r2, [r3, #0]
 800cf9c:	e010      	b.n	800cfc0 <fill_normal+0x458>
 800cf9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cfa0:	009b      	lsls	r3, r3, #2
 800cfa2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cfa4:	4413      	add	r3, r2
 800cfa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cfa8:	7810      	ldrb	r0, [r2, #0]
 800cfaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cfac:	0092      	lsls	r2, r2, #2
 800cfae:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cfb0:	188c      	adds	r4, r1, r2
 800cfb2:	4602      	mov	r2, r0
 800cfb4:	6819      	ldr	r1, [r3, #0]
 800cfb6:	6838      	ldr	r0, [r7, #0]
 800cfb8:	f7ff faa2 	bl	800c500 <lv_color_mix>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	6023      	str	r3, [r4, #0]
 800cfc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	64fb      	str	r3, [r7, #76]	; 0x4c
                for(; x < draw_area_w ; x++) {
 800cfc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cfc8:	3301      	adds	r3, #1
 800cfca:	65bb      	str	r3, [r7, #88]	; 0x58
 800cfcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cfce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	dbd5      	blt.n	800cf80 <fill_normal+0x418>
#endif
                }
#endif
                disp_buf_first += disp_w;
 800cfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd6:	009b      	lsls	r3, r3, #2
 800cfd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cfda:	4413      	add	r3, r2
 800cfdc:	65fb      	str	r3, [r7, #92]	; 0x5c
                mask += draw_area_w;
 800cfde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfe0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800cfe2:	4413      	add	r3, r2
 800cfe4:	677b      	str	r3, [r7, #116]	; 0x74
            for(y = 0; y < draw_area_h; y++) {
 800cfe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cfe8:	3301      	adds	r3, #1
 800cfea:	657b      	str	r3, [r7, #84]	; 0x54
 800cfec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff0:	429a      	cmp	r2, r3
 800cff2:	f6ff aec0 	blt.w	800cd76 <fill_normal+0x20e>
 800cff6:	e076      	b.n	800d0e6 <fill_normal+0x57e>
            }
        }
        /*Handle opa and mask values too*/
        else {
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
 800cff8:	2300      	movs	r3, #0
 800cffa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d004:	657b      	str	r3, [r7, #84]	; 0x54
 800d006:	e067      	b.n	800d0d8 <fill_normal+0x570>
                const lv_opa_t * mask_tmp_x = mask;
 800d008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d00a:	643b      	str	r3, [r7, #64]	; 0x40
                for(x = 0; x < draw_area_w; x++) {
 800d00c:	2300      	movs	r3, #0
 800d00e:	65bb      	str	r3, [r7, #88]	; 0x58
 800d010:	e052      	b.n	800d0b8 <fill_normal+0x550>
                    if(*mask_tmp_x) {
 800d012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d014:	781b      	ldrb	r3, [r3, #0]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d048      	beq.n	800d0ac <fill_normal+0x544>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 800d01a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800d022:	429a      	cmp	r2, r3
 800d024:	d011      	beq.n	800d04a <fill_normal+0x4e2>
 800d026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	2bff      	cmp	r3, #255	; 0xff
 800d02c:	d009      	beq.n	800d042 <fill_normal+0x4da>
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
 800d02e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	461a      	mov	r2, r3
 800d034:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800d038:	fb03 f302 	mul.w	r3, r3, r2
 800d03c:	0a1b      	lsrs	r3, r3, #8
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 800d03e:	b2db      	uxtb	r3, r3
 800d040:	e001      	b.n	800d046 <fill_normal+0x4de>
 800d042:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800d046:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
 800d04a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800d052:	429a      	cmp	r2, r3
 800d054:	d107      	bne.n	800d066 <fill_normal+0x4fe>
 800d056:	697a      	ldr	r2, [r7, #20]
 800d058:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d05a:	009b      	lsls	r3, r3, #2
 800d05c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d05e:	440b      	add	r3, r1
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	429a      	cmp	r2, r3
 800d064:	d01c      	beq.n	800d0a0 <fill_normal+0x538>
                                                        &last_res_color.ch.alpha);
                            }
                            else
#endif
                            {
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
 800d066:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d06a:	2bff      	cmp	r3, #255	; 0xff
 800d06c:	d102      	bne.n	800d074 <fill_normal+0x50c>
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	613b      	str	r3, [r7, #16]
 800d072:	e00b      	b.n	800d08c <fill_normal+0x524>
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
 800d074:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d07a:	4413      	add	r3, r2
 800d07c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800d080:	6819      	ldr	r1, [r3, #0]
 800d082:	6838      	ldr	r0, [r7, #0]
 800d084:	f7ff fa3c 	bl	800c500 <lv_color_mix>
 800d088:	4603      	mov	r3, r0
 800d08a:	613b      	str	r3, [r7, #16]
                            }
                            last_mask = *mask_tmp_x;
 800d08c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                            last_dest_color.full = disp_buf_first[x].full;
 800d094:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d096:	009b      	lsls	r3, r3, #2
 800d098:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d09a:	4413      	add	r3, r2
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	617b      	str	r3, [r7, #20]
                        }
                        disp_buf_first[x] = last_res_color;
 800d0a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0a2:	009b      	lsls	r3, r3, #2
 800d0a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d0a6:	4413      	add	r3, r2
 800d0a8:	693a      	ldr	r2, [r7, #16]
 800d0aa:	601a      	str	r2, [r3, #0]
                    }
                    mask_tmp_x++;
 800d0ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	643b      	str	r3, [r7, #64]	; 0x40
                for(x = 0; x < draw_area_w; x++) {
 800d0b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	65bb      	str	r3, [r7, #88]	; 0x58
 800d0b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d0ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	dba8      	blt.n	800d012 <fill_normal+0x4aa>
                }
                disp_buf_first += disp_w;
 800d0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d0c6:	4413      	add	r3, r2
 800d0c8:	65fb      	str	r3, [r7, #92]	; 0x5c
                mask += draw_area_w;
 800d0ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0cc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d0ce:	4413      	add	r3, r2
 800d0d0:	677b      	str	r3, [r7, #116]	; 0x74
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d0d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0d4:	3301      	adds	r3, #1
 800d0d6:	657b      	str	r3, [r7, #84]	; 0x54
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d0de:	461a      	mov	r2, r3
 800d0e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	dd90      	ble.n	800d008 <fill_normal+0x4a0>
            }
        }
    }
}
 800d0e6:	3764      	adds	r7, #100	; 0x64
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd90      	pop	{r4, r7, pc}

0800d0ec <fill_blended>:
 * @param mode blend mode from `lv_blend_mode_t`
 */
static void fill_blended(const lv_area_t * disp_area, lv_color_t * disp_buf,  const lv_area_t * draw_area,
                         lv_color_t color, lv_opa_t opa,
                         const lv_opa_t * mask, lv_draw_mask_res_t mask_res, lv_blend_mode_t mode)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b092      	sub	sp, #72	; 0x48
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	607a      	str	r2, [r7, #4]
 800d0f8:	603b      	str	r3, [r7, #0]
    /*Get the width of the `disp_area` it will be used to go to the next line*/
    int32_t disp_w = lv_area_get_width(disp_area);
 800d0fa:	68f8      	ldr	r0, [r7, #12]
 800d0fc:	f7ff fac4 	bl	800c688 <lv_area_get_width>
 800d100:	4603      	mov	r3, r0
 800d102:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*Create a temp. disp_buf which always point to current line to draw*/
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d10a:	461a      	mov	r2, r3
 800d10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d10e:	fb03 f302 	mul.w	r3, r3, r2
 800d112:	009b      	lsls	r3, r3, #2
 800d114:	68ba      	ldr	r2, [r7, #8]
 800d116:	4413      	add	r3, r2
 800d118:	647b      	str	r3, [r7, #68]	; 0x44

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(mode) {
 800d11a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800d11e:	2b01      	cmp	r3, #1
 800d120:	d002      	beq.n	800d128 <fill_blended+0x3c>
 800d122:	2b02      	cmp	r3, #2
 800d124:	d003      	beq.n	800d12e <fill_blended+0x42>
        case LV_BLEND_MODE_SUBTRACTIVE:
            blend_fp = color_blend_true_color_subtractive;
            break;
        default:
            LV_LOG_WARN("fill_blended: unsupported blend mode");
            return;
 800d126:	e0ea      	b.n	800d2fe <fill_blended+0x212>
            blend_fp = color_blend_true_color_additive;
 800d128:	4b76      	ldr	r3, [pc, #472]	; (800d304 <fill_blended+0x218>)
 800d12a:	643b      	str	r3, [r7, #64]	; 0x40
            break;
 800d12c:	e002      	b.n	800d134 <fill_blended+0x48>
            blend_fp = color_blend_true_color_subtractive;
 800d12e:	4b76      	ldr	r3, [pc, #472]	; (800d308 <fill_blended+0x21c>)
 800d130:	643b      	str	r3, [r7, #64]	; 0x40
            break;
 800d132:	bf00      	nop

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800d134:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800d138:	2b01      	cmp	r3, #1
 800d13a:	d158      	bne.n	800d1ee <fill_blended+0x102>
        lv_color_t last_dest_color = LV_COLOR_BLACK;
 800d13c:	2300      	movs	r3, #0
 800d13e:	f887 3020 	strb.w	r3, [r7, #32]
 800d142:	2300      	movs	r3, #0
 800d144:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800d148:	2300      	movs	r3, #0
 800d14a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d14e:	23ff      	movs	r3, #255	; 0xff
 800d150:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 800d154:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800d158:	461a      	mov	r2, r3
 800d15a:	6a39      	ldr	r1, [r7, #32]
 800d15c:	6838      	ldr	r0, [r7, #0]
 800d15e:	f7ff f9cf 	bl	800c500 <lv_color_mix>
 800d162:	4603      	mov	r3, r0
 800d164:	61fb      	str	r3, [r7, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d16c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d16e:	e036      	b.n	800d1de <fill_blended+0xf2>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d176:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d178:	e022      	b.n	800d1c0 <fill_blended+0xd4>
                if(last_dest_color.full != disp_buf_tmp[x].full) {
 800d17a:	6a3a      	ldr	r2, [r7, #32]
 800d17c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d182:	440b      	add	r3, r1
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	429a      	cmp	r2, r3
 800d188:	d011      	beq.n	800d1ae <fill_blended+0xc2>
                    last_dest_color = disp_buf_tmp[x];
 800d18a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d18c:	009b      	lsls	r3, r3, #2
 800d18e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d190:	4413      	add	r3, r2
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	623b      	str	r3, [r7, #32]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
 800d196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d198:	009b      	lsls	r3, r3, #2
 800d19a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d19c:	18d1      	adds	r1, r2, r3
 800d19e:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d1a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1a4:	6809      	ldr	r1, [r1, #0]
 800d1a6:	6838      	ldr	r0, [r7, #0]
 800d1a8:	4798      	blx	r3
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	61fb      	str	r3, [r7, #28]
                }
                disp_buf_tmp[x] = last_res_color;
 800d1ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1b0:	009b      	lsls	r3, r3, #2
 800d1b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1b4:	4413      	add	r3, r2
 800d1b6:	69fa      	ldr	r2, [r7, #28]
 800d1b8:	601a      	str	r2, [r3, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800d1ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1bc:	3301      	adds	r3, #1
 800d1be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	ddd5      	ble.n	800d17a <fill_blended+0x8e>
            }
            disp_buf_tmp += disp_w;
 800d1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d0:	009b      	lsls	r3, r3, #2
 800d1d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1d4:	4413      	add	r3, r2
 800d1d6:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1da:	3301      	adds	r3, #1
 800d1dc:	63bb      	str	r3, [r7, #56]	; 0x38
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	ddc1      	ble.n	800d170 <fill_blended+0x84>
 800d1ec:	e087      	b.n	800d2fe <fill_blended+0x212>
        }
    }
    /*Masked*/
    else {
        /*Get the width of the `draw_area` it will be used to go to the next line of the mask*/
        int32_t draw_area_w = lv_area_get_width(draw_area);
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f7ff fa4a 	bl	800c688 <lv_area_get_width>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	62bb      	str	r3, [r7, #40]	; 0x28

        /* The mask is relative to the clipped area.
         * In the cycles below mask will be indexed from `draw_area.x1`
         * but it corresponds to zero index. So prepare `mask_tmp` accordingly. */
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1fe:	425b      	negs	r3, r3
 800d200:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d202:	4413      	add	r3, r2
 800d204:	637b      	str	r3, [r7, #52]	; 0x34

        /*Buffer the result color to avoid recalculating the same color*/
        lv_color_t last_dest_color;
        lv_color_t last_res_color;
        lv_opa_t last_mask = LV_OPA_TRANSP;
 800d206:	2300      	movs	r3, #0
 800d208:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        last_dest_color.full = disp_buf_tmp[0].full;
 800d20c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	61bb      	str	r3, [r7, #24]
        last_res_color.full = disp_buf_tmp[0].full;
 800d212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	617b      	str	r3, [r7, #20]

        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d21e:	63bb      	str	r3, [r7, #56]	; 0x38
 800d220:	e066      	b.n	800d2f0 <fill_blended+0x204>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d228:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d22a:	e04e      	b.n	800d2ca <fill_blended+0x1de>
                if(mask_tmp[x] == 0) continue;
 800d22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d22e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d230:	4413      	add	r3, r2
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d044      	beq.n	800d2c2 <fill_blended+0x1d6>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
 800d238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d23a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d23c:	4413      	add	r3, r2
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d244:	429a      	cmp	r2, r3
 800d246:	d107      	bne.n	800d258 <fill_blended+0x16c>
 800d248:	69ba      	ldr	r2, [r7, #24]
 800d24a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d24c:	009b      	lsls	r3, r3, #2
 800d24e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d250:	440b      	add	r3, r1
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	429a      	cmp	r2, r3
 800d256:	d02d      	beq.n	800d2b4 <fill_blended+0x1c8>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
 800d258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d25a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d25c:	4413      	add	r3, r2
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	2bfc      	cmp	r3, #252	; 0xfc
 800d262:	d80b      	bhi.n	800d27c <fill_blended+0x190>
 800d264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d268:	4413      	add	r3, r2
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	461a      	mov	r2, r3
 800d26e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800d272:	fb03 f302 	mul.w	r3, r3, r2
 800d276:	0a1b      	lsrs	r3, r3, #8
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	e001      	b.n	800d280 <fill_blended+0x194>
 800d27c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800d280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
 800d284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d28a:	18d1      	adds	r1, r2, r3
 800d28c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d292:	6809      	ldr	r1, [r1, #0]
 800d294:	6838      	ldr	r0, [r7, #0]
 800d296:	4798      	blx	r3
 800d298:	4603      	mov	r3, r0
 800d29a:	617b      	str	r3, [r7, #20]
                    last_mask = mask_tmp[x];
 800d29c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d29e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2a0:	4413      	add	r3, r2
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                    last_dest_color.full = disp_buf_tmp[x].full;
 800d2a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2aa:	009b      	lsls	r3, r3, #2
 800d2ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2ae:	4413      	add	r3, r2
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	61bb      	str	r3, [r7, #24]
                }
                disp_buf_tmp[x] = last_res_color;
 800d2b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2b6:	009b      	lsls	r3, r3, #2
 800d2b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2ba:	4413      	add	r3, r2
 800d2bc:	697a      	ldr	r2, [r7, #20]
 800d2be:	601a      	str	r2, [r3, #0]
 800d2c0:	e000      	b.n	800d2c4 <fill_blended+0x1d8>
                if(mask_tmp[x] == 0) continue;
 800d2c2:	bf00      	nop
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800d2c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	dda9      	ble.n	800d22c <fill_blended+0x140>
            }
            disp_buf_tmp += disp_w;
 800d2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2da:	009b      	lsls	r3, r3, #2
 800d2dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2de:	4413      	add	r3, r2
 800d2e0:	647b      	str	r3, [r7, #68]	; 0x44
            mask_tmp += draw_area_w;
 800d2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2e6:	4413      	add	r3, r2
 800d2e8:	637b      	str	r3, [r7, #52]	; 0x34
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	dd91      	ble.n	800d222 <fill_blended+0x136>
        }
    }
}
 800d2fe:	3748      	adds	r7, #72	; 0x48
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}
 800d304:	0800dc6d 	.word	0x0800dc6d
 800d308:	0800dcdd 	.word	0x0800dcdd

0800d30c <map_set_px>:

static void map_set_px(const lv_area_t * disp_area, lv_color_t * disp_buf,  const lv_area_t * draw_area,
                       const lv_area_t * map_area, const lv_color_t * map_buf, lv_opa_t opa,
                       const lv_opa_t * mask, lv_draw_mask_res_t mask_res)

{
 800d30c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d30e:	b091      	sub	sp, #68	; 0x44
 800d310:	af04      	add	r7, sp, #16
 800d312:	60f8      	str	r0, [r7, #12]
 800d314:	60b9      	str	r1, [r7, #8]
 800d316:	607a      	str	r2, [r7, #4]
 800d318:	603b      	str	r3, [r7, #0]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800d31a:	f7fd f805 	bl	800a328 <_lv_refr_get_disp_refreshing>
 800d31e:	61f8      	str	r0, [r7, #28]

    /*Get the width of the `disp_area` it will be used to go to the next line*/
    int32_t disp_w = lv_area_get_width(disp_area);
 800d320:	68f8      	ldr	r0, [r7, #12]
 800d322:	f7ff f9b1 	bl	800c688 <lv_area_get_width>
 800d326:	4603      	mov	r3, r0
 800d328:	61bb      	str	r3, [r7, #24]

    /*Get the width of the `draw_area` it will be used to go to the next line of the mask*/
    int32_t draw_area_w = lv_area_get_width(draw_area);
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f7ff f9ac 	bl	800c688 <lv_area_get_width>
 800d330:	4603      	mov	r3, r0
 800d332:	617b      	str	r3, [r7, #20]

    /*Get the width of the `mask_area` it will be used to go to the next line*/
    int32_t map_w = lv_area_get_width(map_area);
 800d334:	6838      	ldr	r0, [r7, #0]
 800d336:	f7ff f9a7 	bl	800c688 <lv_area_get_width>
 800d33a:	4603      	mov	r3, r0
 800d33c:	613b      	str	r3, [r7, #16]

    /*Create a temp. map_buf which always point to current line to draw*/
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d344:	461a      	mov	r2, r3
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d34c:	4619      	mov	r1, r3
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d354:	1acb      	subs	r3, r1, r3
 800d356:	1ad3      	subs	r3, r2, r3
 800d358:	693a      	ldr	r2, [r7, #16]
 800d35a:	fb02 f303 	mul.w	r3, r2, r3
 800d35e:	009b      	lsls	r3, r3, #2
 800d360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d362:	4413      	add	r3, r2
 800d364:	62fb      	str	r3, [r7, #44]	; 0x2c

    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d36c:	461a      	mov	r2, r3
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d374:	4619      	mov	r1, r3
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d37c:	1acb      	subs	r3, r1, r3
 800d37e:	1ad3      	subs	r3, r2, r3
 800d380:	009b      	lsls	r3, r3, #2
 800d382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d384:	4413      	add	r3, r2
 800d386:	62fb      	str	r3, [r7, #44]	; 0x2c
    map_buf_tmp -= draw_area->x1;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	425b      	negs	r3, r3
 800d392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d394:	4413      	add	r3, r2
 800d396:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t x;
    int32_t y;

    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800d398:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	d13a      	bne.n	800d416 <map_set_px+0x10a>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d3a6:	627b      	str	r3, [r7, #36]	; 0x24
 800d3a8:	e02d      	b.n	800d406 <map_set_px+0xfa>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d3b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d3b2:	e019      	b.n	800d3e8 <map_set_px+0xdc>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
 800d3b4:	69fb      	ldr	r3, [r7, #28]
 800d3b6:	695c      	ldr	r4, [r3, #20]
 800d3b8:	69f8      	ldr	r0, [r7, #28]
 800d3ba:	69bb      	ldr	r3, [r7, #24]
 800d3bc:	b21d      	sxth	r5, r3
 800d3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c0:	b21e      	sxth	r6, r3
 800d3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c4:	b21b      	sxth	r3, r3
 800d3c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3c8:	0092      	lsls	r2, r2, #2
 800d3ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3cc:	440a      	add	r2, r1
 800d3ce:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 800d3d2:	9102      	str	r1, [sp, #8]
 800d3d4:	6812      	ldr	r2, [r2, #0]
 800d3d6:	9201      	str	r2, [sp, #4]
 800d3d8:	9300      	str	r3, [sp, #0]
 800d3da:	4633      	mov	r3, r6
 800d3dc:	462a      	mov	r2, r5
 800d3de:	68b9      	ldr	r1, [r7, #8]
 800d3e0:	47a0      	blx	r4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800d3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	ddde      	ble.n	800d3b4 <map_set_px+0xa8>
            }
            map_buf_tmp += map_w;
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	009b      	lsls	r3, r3, #2
 800d3fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3fc:	4413      	add	r3, r2
 800d3fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d402:	3301      	adds	r3, #1
 800d404:	627b      	str	r3, [r7, #36]	; 0x24
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d40c:	461a      	mov	r2, r3
 800d40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d410:	4293      	cmp	r3, r2
 800d412:	ddca      	ble.n	800d3aa <map_set_px+0x9e>
            }
            mask_tmp += draw_area_w;
            map_buf_tmp += map_w;
        }
    }
}
 800d414:	e055      	b.n	800d4c2 <map_set_px+0x1b6>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d41c:	425b      	negs	r3, r3
 800d41e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d420:	4413      	add	r3, r2
 800d422:	623b      	str	r3, [r7, #32]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d42a:	627b      	str	r3, [r7, #36]	; 0x24
 800d42c:	e042      	b.n	800d4b4 <map_set_px+0x1a8>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d434:	62bb      	str	r3, [r7, #40]	; 0x28
 800d436:	e02a      	b.n	800d48e <map_set_px+0x182>
                if(mask_tmp[x]) {
 800d438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43a:	6a3a      	ldr	r2, [r7, #32]
 800d43c:	4413      	add	r3, r2
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d021      	beq.n	800d488 <map_set_px+0x17c>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 800d444:	69fb      	ldr	r3, [r7, #28]
 800d446:	695c      	ldr	r4, [r3, #20]
 800d448:	69fe      	ldr	r6, [r7, #28]
 800d44a:	69bb      	ldr	r3, [r7, #24]
 800d44c:	fa0f fc83 	sxth.w	ip, r3
 800d450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d452:	fa0f fe83 	sxth.w	lr, r3
 800d456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d458:	b21b      	sxth	r3, r3
 800d45a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d45c:	0092      	lsls	r2, r2, #2
 800d45e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d460:	440a      	add	r2, r1
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 800d462:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 800d466:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d468:	6a3d      	ldr	r5, [r7, #32]
 800d46a:	4428      	add	r0, r5
 800d46c:	7800      	ldrb	r0, [r0, #0]
 800d46e:	fb00 f101 	mul.w	r1, r0, r1
 800d472:	0a09      	lsrs	r1, r1, #8
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 800d474:	b2c9      	uxtb	r1, r1
 800d476:	9102      	str	r1, [sp, #8]
 800d478:	6812      	ldr	r2, [r2, #0]
 800d47a:	9201      	str	r2, [sp, #4]
 800d47c:	9300      	str	r3, [sp, #0]
 800d47e:	4673      	mov	r3, lr
 800d480:	4662      	mov	r2, ip
 800d482:	68b9      	ldr	r1, [r7, #8]
 800d484:	4630      	mov	r0, r6
 800d486:	47a0      	blx	r4
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800d488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48a:	3301      	adds	r3, #1
 800d48c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d494:	461a      	mov	r2, r3
 800d496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d498:	4293      	cmp	r3, r2
 800d49a:	ddcd      	ble.n	800d438 <map_set_px+0x12c>
            mask_tmp += draw_area_w;
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	6a3a      	ldr	r2, [r7, #32]
 800d4a0:	4413      	add	r3, r2
 800d4a2:	623b      	str	r3, [r7, #32]
            map_buf_tmp += map_w;
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	009b      	lsls	r3, r3, #2
 800d4a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4aa:	4413      	add	r3, r2
 800d4ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	627b      	str	r3, [r7, #36]	; 0x24
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	ddb5      	ble.n	800d42e <map_set_px+0x122>
}
 800d4c2:	bf00      	nop
 800d4c4:	3734      	adds	r7, #52	; 0x34
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d4ca <map_normal>:
 */
LV_ATTRIBUTE_FAST_MEM static void map_normal(const lv_area_t * disp_area, lv_color_t * disp_buf,
                                             const lv_area_t * draw_area,
                                             const lv_area_t * map_area, const lv_color_t * map_buf, lv_opa_t opa,
                                             const lv_opa_t * mask, lv_draw_mask_res_t mask_res)
{
 800d4ca:	b5b0      	push	{r4, r5, r7, lr}
 800d4cc:	b094      	sub	sp, #80	; 0x50
 800d4ce:	af02      	add	r7, sp, #8
 800d4d0:	60f8      	str	r0, [r7, #12]
 800d4d2:	60b9      	str	r1, [r7, #8]
 800d4d4:	607a      	str	r2, [r7, #4]
 800d4d6:	603b      	str	r3, [r7, #0]

    /*Get the width of the `disp_area` it will be used to go to the next line*/
    int32_t disp_w = lv_area_get_width(disp_area);
 800d4d8:	68f8      	ldr	r0, [r7, #12]
 800d4da:	f7ff f8d5 	bl	800c688 <lv_area_get_width>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	62fb      	str	r3, [r7, #44]	; 0x2c

    int32_t draw_area_w = lv_area_get_width(draw_area);
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f7ff f8d0 	bl	800c688 <lv_area_get_width>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t draw_area_h = lv_area_get_height(draw_area);
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f7ff f8e2 	bl	800c6b6 <lv_area_get_height>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	627b      	str	r3, [r7, #36]	; 0x24

    /*Get the width of the `mask_area` it will be used to go to the next line*/
    int32_t map_w = lv_area_get_width(map_area);
 800d4f6:	6838      	ldr	r0, [r7, #0]
 800d4f8:	f7ff f8c6 	bl	800c688 <lv_area_get_width>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	623b      	str	r3, [r7, #32]

    /*Create a temp. disp_buf which always point to first pixel to draw*/
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d506:	461a      	mov	r2, r3
 800d508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d50a:	fb03 f302 	mul.w	r3, r3, r2
 800d50e:	461a      	mov	r2, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d516:	4413      	add	r3, r2
 800d518:	009b      	lsls	r3, r3, #2
 800d51a:	68ba      	ldr	r2, [r7, #8]
 800d51c:	4413      	add	r3, r2
 800d51e:	647b      	str	r3, [r7, #68]	; 0x44

    /*Create a temp. map_buf which always point to first pixel to draw from the map*/
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d526:	461a      	mov	r2, r3
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d52e:	4619      	mov	r1, r3
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d536:	1acb      	subs	r3, r1, r3
 800d538:	1ad3      	subs	r3, r2, r3
 800d53a:	6a3a      	ldr	r2, [r7, #32]
 800d53c:	fb02 f303 	mul.w	r3, r2, r3
 800d540:	009b      	lsls	r3, r3, #2
 800d542:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d544:	4413      	add	r3, r2
 800d546:	643b      	str	r3, [r7, #64]	; 0x40
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d54e:	461a      	mov	r2, r3
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d556:	4619      	mov	r1, r3
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d55e:	1acb      	subs	r3, r1, r3
 800d560:	1ad3      	subs	r3, r2, r3
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d566:	4413      	add	r3, r2
 800d568:	643b      	str	r3, [r7, #64]	; 0x40

#if LV_COLOR_SCREEN_TRANSP || LV_USE_GPU
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800d56a:	f7fc fedd 	bl	800a328 <_lv_refr_get_disp_refreshing>
 800d56e:	61f8      	str	r0, [r7, #28]

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800d570:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800d574:	2b01      	cmp	r3, #1
 800d576:	f040 8082 	bne.w	800d67e <map_normal+0x1b4>
#if LV_USE_GPU
        if(disp->driver.gpu_blend_cb && (lv_area_get_size(draw_area) > GPU_SIZE_LIMIT)) {
 800d57a:	69fb      	ldr	r3, [r7, #28]
 800d57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d02a      	beq.n	800d5d8 <map_normal+0x10e>
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f00d fc5f 	bl	801ae46 <lv_area_get_size>
 800d588:	4603      	mov	r3, r0
 800d58a:	2bf0      	cmp	r3, #240	; 0xf0
 800d58c:	d924      	bls.n	800d5d8 <map_normal+0x10e>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d594:	63bb      	str	r3, [r7, #56]	; 0x38
 800d596:	e017      	b.n	800d5c8 <map_normal+0xfe>
                disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, map_buf_first, draw_area_w, opa);
 800d598:	69fb      	ldr	r3, [r7, #28]
 800d59a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800d59c:	69f8      	ldr	r0, [r7, #28]
 800d59e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5a0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800d5a4:	9300      	str	r3, [sp, #0]
 800d5a6:	4613      	mov	r3, r2
 800d5a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d5aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5ac:	47a0      	blx	r4
                disp_buf_first += disp_w;
 800d5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b0:	009b      	lsls	r3, r3, #2
 800d5b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d5b4:	4413      	add	r3, r2
 800d5b6:	647b      	str	r3, [r7, #68]	; 0x44
                map_buf_first += map_w;
 800d5b8:	6a3b      	ldr	r3, [r7, #32]
 800d5ba:	009b      	lsls	r3, r3, #2
 800d5bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d5be:	4413      	add	r3, r2
 800d5c0:	643b      	str	r3, [r7, #64]	; 0x40
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800d5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	dde0      	ble.n	800d598 <map_normal+0xce>
            }
            return;
 800d5d6:	e238      	b.n	800da4a <map_normal+0x580>
        }
#endif

        if(opa > LV_OPA_MAX) {
 800d5d8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800d5dc:	2bfd      	cmp	r3, #253	; 0xfd
 800d5de:	d91b      	bls.n	800d618 <map_normal+0x14e>
                return;
            }
#endif

            /*Software rendering*/
            for(y = 0; y < draw_area_h; y++) {
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	63bb      	str	r3, [r7, #56]	; 0x38
 800d5e4:	e013      	b.n	800d60e <map_normal+0x144>
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 800d5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e8:	009b      	lsls	r3, r3, #2
 800d5ea:	461a      	mov	r2, r3
 800d5ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d5ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d5f0:	f00f faf6 	bl	801cbe0 <_lv_memcpy>
                disp_buf_first += disp_w;
 800d5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f6:	009b      	lsls	r3, r3, #2
 800d5f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d5fa:	4413      	add	r3, r2
 800d5fc:	647b      	str	r3, [r7, #68]	; 0x44
                map_buf_first += map_w;
 800d5fe:	6a3b      	ldr	r3, [r7, #32]
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d604:	4413      	add	r3, r2
 800d606:	643b      	str	r3, [r7, #64]	; 0x40
            for(y = 0; y < draw_area_h; y++) {
 800d608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d60a:	3301      	adds	r3, #1
 800d60c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d60e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d612:	429a      	cmp	r2, r3
 800d614:	dbe7      	blt.n	800d5e6 <map_normal+0x11c>
 800d616:	e218      	b.n	800da4a <map_normal+0x580>
            }
#endif

            /*Software rendering*/

            for(y = 0; y < draw_area_h; y++) {
 800d618:	2300      	movs	r3, #0
 800d61a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d61c:	e02a      	b.n	800d674 <map_normal+0x1aa>
                for(x = 0; x < draw_area_w; x++) {
 800d61e:	2300      	movs	r3, #0
 800d620:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d622:	e016      	b.n	800d652 <map_normal+0x188>
                                                &disp_buf_first[x].ch.alpha);
                    }
                    else
#endif
                    {
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
 800d624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d626:	009b      	lsls	r3, r3, #2
 800d628:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d62a:	4413      	add	r3, r2
 800d62c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d62e:	0092      	lsls	r2, r2, #2
 800d630:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d632:	4411      	add	r1, r2
 800d634:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d636:	0092      	lsls	r2, r2, #2
 800d638:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d63a:	1884      	adds	r4, r0, r2
 800d63c:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800d640:	6809      	ldr	r1, [r1, #0]
 800d642:	6818      	ldr	r0, [r3, #0]
 800d644:	f7fe ff5c 	bl	800c500 <lv_color_mix>
 800d648:	4603      	mov	r3, r0
 800d64a:	6023      	str	r3, [r4, #0]
                for(x = 0; x < draw_area_w; x++) {
 800d64c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d64e:	3301      	adds	r3, #1
 800d650:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d652:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d656:	429a      	cmp	r2, r3
 800d658:	dbe4      	blt.n	800d624 <map_normal+0x15a>
                    }
                }
                disp_buf_first += disp_w;
 800d65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d65c:	009b      	lsls	r3, r3, #2
 800d65e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d660:	4413      	add	r3, r2
 800d662:	647b      	str	r3, [r7, #68]	; 0x44
                map_buf_first += map_w;
 800d664:	6a3b      	ldr	r3, [r7, #32]
 800d666:	009b      	lsls	r3, r3, #2
 800d668:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d66a:	4413      	add	r3, r2
 800d66c:	643b      	str	r3, [r7, #64]	; 0x40
            for(y = 0; y < draw_area_h; y++) {
 800d66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d670:	3301      	adds	r3, #1
 800d672:	63bb      	str	r3, [r7, #56]	; 0x38
 800d674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d678:	429a      	cmp	r2, r3
 800d67a:	dbd0      	blt.n	800d61e <map_normal+0x154>
 800d67c:	e1e5      	b.n	800da4a <map_normal+0x580>
        }
    }
    /*Masked*/
    else {
        /*Only the mask matters*/
        if(opa > LV_OPA_MAX) {
 800d67e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800d682:	2bfd      	cmp	r3, #253	; 0xfd
 800d684:	f240 8192 	bls.w	800d9ac <map_normal+0x4e2>
            /*Go to the first pixel of the row */

            int32_t x_end4 = draw_area_w - 4;
 800d688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d68a:	3b04      	subs	r3, #4
 800d68c:	617b      	str	r3, [r7, #20]

            for(y = 0; y < draw_area_h; y++) {
 800d68e:	2300      	movs	r3, #0
 800d690:	63bb      	str	r3, [r7, #56]	; 0x38
 800d692:	e185      	b.n	800d9a0 <map_normal+0x4d6>
                const lv_opa_t * mask_tmp_x = mask;
 800d694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d696:	637b      	str	r3, [r7, #52]	; 0x34
#if 0
                for(x = 0; x < draw_area_w; x++) {
                    MAP_NORMAL_MASK_PX(x);
                }
#else
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800d698:	2300      	movs	r3, #0
 800d69a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d69c:	e02d      	b.n	800d6fa <map_normal+0x230>
#if LV_COLOR_SCREEN_TRANSP
                    MAP_NORMAL_MASK_PX_SCR_TRANSP(x)
#else
                    MAP_NORMAL_MASK_PX(x)
 800d69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d023      	beq.n	800d6ee <map_normal+0x224>
 800d6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	2bff      	cmp	r3, #255	; 0xff
 800d6ac:	d10a      	bne.n	800d6c4 <map_normal+0x1fa>
 800d6ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6b0:	009b      	lsls	r3, r3, #2
 800d6b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d6b4:	441a      	add	r2, r3
 800d6b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6b8:	009b      	lsls	r3, r3, #2
 800d6ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d6bc:	440b      	add	r3, r1
 800d6be:	6812      	ldr	r2, [r2, #0]
 800d6c0:	601a      	str	r2, [r3, #0]
 800d6c2:	e014      	b.n	800d6ee <map_normal+0x224>
 800d6c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6c6:	009b      	lsls	r3, r3, #2
 800d6c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d6ca:	4413      	add	r3, r2
 800d6cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d6ce:	0092      	lsls	r2, r2, #2
 800d6d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d6d2:	4411      	add	r1, r2
 800d6d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6d6:	7815      	ldrb	r5, [r2, #0]
 800d6d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d6da:	0092      	lsls	r2, r2, #2
 800d6dc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d6de:	1884      	adds	r4, r0, r2
 800d6e0:	462a      	mov	r2, r5
 800d6e2:	6809      	ldr	r1, [r1, #0]
 800d6e4:	6818      	ldr	r0, [r3, #0]
 800d6e6:	f7fe ff0b 	bl	800c500 <lv_color_mix>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	6023      	str	r3, [r4, #0]
 800d6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	637b      	str	r3, [r7, #52]	; 0x34
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800d6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fe:	429a      	cmp	r2, r3
 800d700:	da04      	bge.n	800d70c <map_normal+0x242>
 800d702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d704:	f003 0303 	and.w	r3, r3, #3
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d1c8      	bne.n	800d69e <map_normal+0x1d4>
#endif
                }

                uint32_t * mask32 = (uint32_t *) mask_tmp_x;
 800d70c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d70e:	633b      	str	r3, [r7, #48]	; 0x30
                for(; x < x_end4; x += 4) {
 800d710:	e0fb      	b.n	800d90a <map_normal+0x440>
                    if(*mask32) {
 800d712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	2b00      	cmp	r3, #0
 800d718:	f000 80f1 	beq.w	800d8fe <map_normal+0x434>
                        if((*mask32) == 0xFFFFFFFF) {
 800d71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d724:	d12e      	bne.n	800d784 <map_normal+0x2ba>
                            disp_buf_first[x] = map_buf_first[x];
 800d726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d728:	009b      	lsls	r3, r3, #2
 800d72a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d72c:	441a      	add	r2, r3
 800d72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d730:	009b      	lsls	r3, r3, #2
 800d732:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d734:	440b      	add	r3, r1
 800d736:	6812      	ldr	r2, [r2, #0]
 800d738:	601a      	str	r2, [r3, #0]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
 800d73a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d73c:	3301      	adds	r3, #1
 800d73e:	009b      	lsls	r3, r3, #2
 800d740:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d742:	441a      	add	r2, r3
 800d744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d746:	3301      	adds	r3, #1
 800d748:	009b      	lsls	r3, r3, #2
 800d74a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d74c:	440b      	add	r3, r1
 800d74e:	6812      	ldr	r2, [r2, #0]
 800d750:	601a      	str	r2, [r3, #0]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
 800d752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d754:	3302      	adds	r3, #2
 800d756:	009b      	lsls	r3, r3, #2
 800d758:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d75a:	441a      	add	r2, r3
 800d75c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d75e:	3302      	adds	r3, #2
 800d760:	009b      	lsls	r3, r3, #2
 800d762:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d764:	440b      	add	r3, r1
 800d766:	6812      	ldr	r2, [r2, #0]
 800d768:	601a      	str	r2, [r3, #0]
                            disp_buf_first[x + 3] = map_buf_first[x + 3];
 800d76a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d76c:	3303      	adds	r3, #3
 800d76e:	009b      	lsls	r3, r3, #2
 800d770:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d772:	441a      	add	r2, r3
 800d774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d776:	3303      	adds	r3, #3
 800d778:	009b      	lsls	r3, r3, #2
 800d77a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d77c:	440b      	add	r3, r1
 800d77e:	6812      	ldr	r2, [r2, #0]
 800d780:	601a      	str	r2, [r3, #0]
 800d782:	e0bc      	b.n	800d8fe <map_normal+0x434>
                        }
                        else {
                            mask_tmp_x = (const lv_opa_t *)mask32;
 800d784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d786:	637b      	str	r3, [r7, #52]	; 0x34
                            MAP_NORMAL_MASK_PX_SCR_TRANSP(x)
                            MAP_NORMAL_MASK_PX_SCR_TRANSP(x + 1)
                            MAP_NORMAL_MASK_PX_SCR_TRANSP(x + 2)
                            MAP_NORMAL_MASK_PX_SCR_TRANSP(x + 3)
#else
                            MAP_NORMAL_MASK_PX(x)
 800d788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d023      	beq.n	800d7d8 <map_normal+0x30e>
 800d790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d792:	781b      	ldrb	r3, [r3, #0]
 800d794:	2bff      	cmp	r3, #255	; 0xff
 800d796:	d10a      	bne.n	800d7ae <map_normal+0x2e4>
 800d798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d79e:	441a      	add	r2, r3
 800d7a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7a2:	009b      	lsls	r3, r3, #2
 800d7a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d7a6:	440b      	add	r3, r1
 800d7a8:	6812      	ldr	r2, [r2, #0]
 800d7aa:	601a      	str	r2, [r3, #0]
 800d7ac:	e014      	b.n	800d7d8 <map_normal+0x30e>
 800d7ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7b0:	009b      	lsls	r3, r3, #2
 800d7b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7b4:	4413      	add	r3, r2
 800d7b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d7b8:	0092      	lsls	r2, r2, #2
 800d7ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d7bc:	4411      	add	r1, r2
 800d7be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d7c0:	7815      	ldrb	r5, [r2, #0]
 800d7c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d7c4:	0092      	lsls	r2, r2, #2
 800d7c6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d7c8:	1884      	adds	r4, r0, r2
 800d7ca:	462a      	mov	r2, r5
 800d7cc:	6809      	ldr	r1, [r1, #0]
 800d7ce:	6818      	ldr	r0, [r3, #0]
 800d7d0:	f7fe fe96 	bl	800c500 <lv_color_mix>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	6023      	str	r3, [r4, #0]
 800d7d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7da:	3301      	adds	r3, #1
 800d7dc:	637b      	str	r3, [r7, #52]	; 0x34
                            MAP_NORMAL_MASK_PX(x + 1)
 800d7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d028      	beq.n	800d838 <map_normal+0x36e>
 800d7e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7e8:	781b      	ldrb	r3, [r3, #0]
 800d7ea:	2bff      	cmp	r3, #255	; 0xff
 800d7ec:	d10c      	bne.n	800d808 <map_normal+0x33e>
 800d7ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	009b      	lsls	r3, r3, #2
 800d7f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7f6:	441a      	add	r2, r3
 800d7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	009b      	lsls	r3, r3, #2
 800d7fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d800:	440b      	add	r3, r1
 800d802:	6812      	ldr	r2, [r2, #0]
 800d804:	601a      	str	r2, [r3, #0]
 800d806:	e017      	b.n	800d838 <map_normal+0x36e>
 800d808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d80a:	3301      	adds	r3, #1
 800d80c:	009b      	lsls	r3, r3, #2
 800d80e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d810:	4413      	add	r3, r2
 800d812:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d814:	3201      	adds	r2, #1
 800d816:	0092      	lsls	r2, r2, #2
 800d818:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d81a:	4411      	add	r1, r2
 800d81c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d81e:	7815      	ldrb	r5, [r2, #0]
 800d820:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d822:	3201      	adds	r2, #1
 800d824:	0092      	lsls	r2, r2, #2
 800d826:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d828:	1884      	adds	r4, r0, r2
 800d82a:	462a      	mov	r2, r5
 800d82c:	6809      	ldr	r1, [r1, #0]
 800d82e:	6818      	ldr	r0, [r3, #0]
 800d830:	f7fe fe66 	bl	800c500 <lv_color_mix>
 800d834:	4603      	mov	r3, r0
 800d836:	6023      	str	r3, [r4, #0]
 800d838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d83a:	3301      	adds	r3, #1
 800d83c:	637b      	str	r3, [r7, #52]	; 0x34
                            MAP_NORMAL_MASK_PX(x + 2)
 800d83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d028      	beq.n	800d898 <map_normal+0x3ce>
 800d846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	2bff      	cmp	r3, #255	; 0xff
 800d84c:	d10c      	bne.n	800d868 <map_normal+0x39e>
 800d84e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d850:	3302      	adds	r3, #2
 800d852:	009b      	lsls	r3, r3, #2
 800d854:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d856:	441a      	add	r2, r3
 800d858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d85a:	3302      	adds	r3, #2
 800d85c:	009b      	lsls	r3, r3, #2
 800d85e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d860:	440b      	add	r3, r1
 800d862:	6812      	ldr	r2, [r2, #0]
 800d864:	601a      	str	r2, [r3, #0]
 800d866:	e017      	b.n	800d898 <map_normal+0x3ce>
 800d868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d86a:	3302      	adds	r3, #2
 800d86c:	009b      	lsls	r3, r3, #2
 800d86e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d870:	4413      	add	r3, r2
 800d872:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d874:	3202      	adds	r2, #2
 800d876:	0092      	lsls	r2, r2, #2
 800d878:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d87a:	4411      	add	r1, r2
 800d87c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d87e:	7815      	ldrb	r5, [r2, #0]
 800d880:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d882:	3202      	adds	r2, #2
 800d884:	0092      	lsls	r2, r2, #2
 800d886:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d888:	1884      	adds	r4, r0, r2
 800d88a:	462a      	mov	r2, r5
 800d88c:	6809      	ldr	r1, [r1, #0]
 800d88e:	6818      	ldr	r0, [r3, #0]
 800d890:	f7fe fe36 	bl	800c500 <lv_color_mix>
 800d894:	4603      	mov	r3, r0
 800d896:	6023      	str	r3, [r4, #0]
 800d898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d89a:	3301      	adds	r3, #1
 800d89c:	637b      	str	r3, [r7, #52]	; 0x34
                            MAP_NORMAL_MASK_PX(x + 3)
 800d89e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8a0:	781b      	ldrb	r3, [r3, #0]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d028      	beq.n	800d8f8 <map_normal+0x42e>
 800d8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	2bff      	cmp	r3, #255	; 0xff
 800d8ac:	d10c      	bne.n	800d8c8 <map_normal+0x3fe>
 800d8ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8b0:	3303      	adds	r3, #3
 800d8b2:	009b      	lsls	r3, r3, #2
 800d8b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8b6:	441a      	add	r2, r3
 800d8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8ba:	3303      	adds	r3, #3
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d8c0:	440b      	add	r3, r1
 800d8c2:	6812      	ldr	r2, [r2, #0]
 800d8c4:	601a      	str	r2, [r3, #0]
 800d8c6:	e017      	b.n	800d8f8 <map_normal+0x42e>
 800d8c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8ca:	3303      	adds	r3, #3
 800d8cc:	009b      	lsls	r3, r3, #2
 800d8ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8d0:	4413      	add	r3, r2
 800d8d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d8d4:	3203      	adds	r2, #3
 800d8d6:	0092      	lsls	r2, r2, #2
 800d8d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d8da:	4411      	add	r1, r2
 800d8dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8de:	7815      	ldrb	r5, [r2, #0]
 800d8e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d8e2:	3203      	adds	r2, #3
 800d8e4:	0092      	lsls	r2, r2, #2
 800d8e6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d8e8:	1884      	adds	r4, r0, r2
 800d8ea:	462a      	mov	r2, r5
 800d8ec:	6809      	ldr	r1, [r1, #0]
 800d8ee:	6818      	ldr	r0, [r3, #0]
 800d8f0:	f7fe fe06 	bl	800c500 <lv_color_mix>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	6023      	str	r3, [r4, #0]
 800d8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	637b      	str	r3, [r7, #52]	; 0x34
#endif
                        }
                    }
                    mask32++;
 800d8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d900:	3304      	adds	r3, #4
 800d902:	633b      	str	r3, [r7, #48]	; 0x30
                for(; x < x_end4; x += 4) {
 800d904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d906:	3304      	adds	r3, #4
 800d908:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d90a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	429a      	cmp	r2, r3
 800d910:	f6ff aeff 	blt.w	800d712 <map_normal+0x248>
                }

                mask_tmp_x = (const lv_opa_t *)mask32;
 800d914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d916:	637b      	str	r3, [r7, #52]	; 0x34
                for(; x < draw_area_w ; x++) {
 800d918:	e02d      	b.n	800d976 <map_normal+0x4ac>
#if LV_COLOR_SCREEN_TRANSP
                    MAP_NORMAL_MASK_PX_SCR_TRANSP(x)
#else
                    MAP_NORMAL_MASK_PX(x)
 800d91a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d91c:	781b      	ldrb	r3, [r3, #0]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d023      	beq.n	800d96a <map_normal+0x4a0>
 800d922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d924:	781b      	ldrb	r3, [r3, #0]
 800d926:	2bff      	cmp	r3, #255	; 0xff
 800d928:	d10a      	bne.n	800d940 <map_normal+0x476>
 800d92a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d92c:	009b      	lsls	r3, r3, #2
 800d92e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d930:	441a      	add	r2, r3
 800d932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d934:	009b      	lsls	r3, r3, #2
 800d936:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d938:	440b      	add	r3, r1
 800d93a:	6812      	ldr	r2, [r2, #0]
 800d93c:	601a      	str	r2, [r3, #0]
 800d93e:	e014      	b.n	800d96a <map_normal+0x4a0>
 800d940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d942:	009b      	lsls	r3, r3, #2
 800d944:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d946:	4413      	add	r3, r2
 800d948:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d94a:	0092      	lsls	r2, r2, #2
 800d94c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d94e:	4411      	add	r1, r2
 800d950:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d952:	7815      	ldrb	r5, [r2, #0]
 800d954:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d956:	0092      	lsls	r2, r2, #2
 800d958:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d95a:	1884      	adds	r4, r0, r2
 800d95c:	462a      	mov	r2, r5
 800d95e:	6809      	ldr	r1, [r1, #0]
 800d960:	6818      	ldr	r0, [r3, #0]
 800d962:	f7fe fdcd 	bl	800c500 <lv_color_mix>
 800d966:	4603      	mov	r3, r0
 800d968:	6023      	str	r3, [r4, #0]
 800d96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d96c:	3301      	adds	r3, #1
 800d96e:	637b      	str	r3, [r7, #52]	; 0x34
                for(; x < draw_area_w ; x++) {
 800d970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d972:	3301      	adds	r3, #1
 800d974:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d976:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d97a:	429a      	cmp	r2, r3
 800d97c:	dbcd      	blt.n	800d91a <map_normal+0x450>
#endif
                }
#endif
                disp_buf_first += disp_w;
 800d97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d980:	009b      	lsls	r3, r3, #2
 800d982:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d984:	4413      	add	r3, r2
 800d986:	647b      	str	r3, [r7, #68]	; 0x44
                mask += draw_area_w;
 800d988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d98c:	4413      	add	r3, r2
 800d98e:	663b      	str	r3, [r7, #96]	; 0x60
                map_buf_first += map_w;
 800d990:	6a3b      	ldr	r3, [r7, #32]
 800d992:	009b      	lsls	r3, r3, #2
 800d994:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d996:	4413      	add	r3, r2
 800d998:	643b      	str	r3, [r7, #64]	; 0x40
            for(y = 0; y < draw_area_h; y++) {
 800d99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d99c:	3301      	adds	r3, #1
 800d99e:	63bb      	str	r3, [r7, #56]	; 0x38
 800d9a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	f6ff ae75 	blt.w	800d694 <map_normal+0x1ca>
 800d9aa:	e04e      	b.n	800da4a <map_normal+0x580>
            }
        }
        /*Handle opa and mask values too*/
        else {
            for(y = 0; y < draw_area_h; y++) {
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800d9b0:	e047      	b.n	800da42 <map_normal+0x578>
                for(x = 0; x < draw_area_w; x++) {
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d9b6:	e02f      	b.n	800da18 <map_normal+0x54e>
                    if(mask[x]) {
 800d9b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d9bc:	4413      	add	r3, r2
 800d9be:	781b      	ldrb	r3, [r3, #0]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d026      	beq.n	800da12 <map_normal+0x548>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 800d9c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d9c8:	4413      	add	r3, r2
 800d9ca:	781b      	ldrb	r3, [r3, #0]
 800d9cc:	2bfc      	cmp	r3, #252	; 0xfc
 800d9ce:	d80a      	bhi.n	800d9e6 <map_normal+0x51c>
 800d9d0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800d9d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d9d6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d9d8:	440a      	add	r2, r1
 800d9da:	7812      	ldrb	r2, [r2, #0]
 800d9dc:	fb02 f303 	mul.w	r3, r2, r3
 800d9e0:	121b      	asrs	r3, r3, #8
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	e001      	b.n	800d9ea <map_normal+0x520>
 800d9e6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800d9ea:	76fb      	strb	r3, [r7, #27]
                                                    &disp_buf_first[x].ch.alpha);
                        }
                        else
#endif
                        {
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
 800d9ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9ee:	009b      	lsls	r3, r3, #2
 800d9f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d9f2:	4413      	add	r3, r2
 800d9f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d9f6:	0092      	lsls	r2, r2, #2
 800d9f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d9fa:	4411      	add	r1, r2
 800d9fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d9fe:	0092      	lsls	r2, r2, #2
 800da00:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800da02:	1884      	adds	r4, r0, r2
 800da04:	7efa      	ldrb	r2, [r7, #27]
 800da06:	6809      	ldr	r1, [r1, #0]
 800da08:	6818      	ldr	r0, [r3, #0]
 800da0a:	f7fe fd79 	bl	800c500 <lv_color_mix>
 800da0e:	4603      	mov	r3, r0
 800da10:	6023      	str	r3, [r4, #0]
                for(x = 0; x < draw_area_w; x++) {
 800da12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da14:	3301      	adds	r3, #1
 800da16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1c:	429a      	cmp	r2, r3
 800da1e:	dbcb      	blt.n	800d9b8 <map_normal+0x4ee>
                        }
                    }
                }
                disp_buf_first += disp_w;
 800da20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da22:	009b      	lsls	r3, r3, #2
 800da24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da26:	4413      	add	r3, r2
 800da28:	647b      	str	r3, [r7, #68]	; 0x44
                mask += draw_area_w;
 800da2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da2e:	4413      	add	r3, r2
 800da30:	663b      	str	r3, [r7, #96]	; 0x60
                map_buf_first += map_w;
 800da32:	6a3b      	ldr	r3, [r7, #32]
 800da34:	009b      	lsls	r3, r3, #2
 800da36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800da38:	4413      	add	r3, r2
 800da3a:	643b      	str	r3, [r7, #64]	; 0x40
            for(y = 0; y < draw_area_h; y++) {
 800da3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da3e:	3301      	adds	r3, #1
 800da40:	63bb      	str	r3, [r7, #56]	; 0x38
 800da42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da46:	429a      	cmp	r2, r3
 800da48:	dbb3      	blt.n	800d9b2 <map_normal+0x4e8>
            }
        }
    }
}
 800da4a:	3748      	adds	r7, #72	; 0x48
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bdb0      	pop	{r4, r5, r7, pc}

0800da50 <map_blended>:
#if LV_USE_BLEND_MODES
static void map_blended(const lv_area_t * disp_area, lv_color_t * disp_buf,  const lv_area_t * draw_area,
                        const lv_area_t * map_area, const lv_color_t * map_buf, lv_opa_t opa,
                        const lv_opa_t * mask, lv_draw_mask_res_t mask_res, lv_blend_mode_t mode)
{
 800da50:	b590      	push	{r4, r7, lr}
 800da52:	b08f      	sub	sp, #60	; 0x3c
 800da54:	af00      	add	r7, sp, #0
 800da56:	60f8      	str	r0, [r7, #12]
 800da58:	60b9      	str	r1, [r7, #8]
 800da5a:	607a      	str	r2, [r7, #4]
 800da5c:	603b      	str	r3, [r7, #0]

    /*Get the width of the `disp_area` it will be used to go to the next line*/
    int32_t disp_w = lv_area_get_width(disp_area);
 800da5e:	68f8      	ldr	r0, [r7, #12]
 800da60:	f7fe fe12 	bl	800c688 <lv_area_get_width>
 800da64:	4603      	mov	r3, r0
 800da66:	61fb      	str	r3, [r7, #28]

    /*Get the width of the `draw_area` it will be used to go to the next line of the mask*/
    int32_t draw_area_w = lv_area_get_width(draw_area);
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f7fe fe0d 	bl	800c688 <lv_area_get_width>
 800da6e:	4603      	mov	r3, r0
 800da70:	61bb      	str	r3, [r7, #24]

    /*Get the width of the `mask_area` it will be used to go to the next line*/
    int32_t map_w = lv_area_get_width(map_area);
 800da72:	6838      	ldr	r0, [r7, #0]
 800da74:	f7fe fe08 	bl	800c688 <lv_area_get_width>
 800da78:	4603      	mov	r3, r0
 800da7a:	617b      	str	r3, [r7, #20]

    /*Create a temp. disp_buf which always point to current line to draw*/
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800da82:	461a      	mov	r2, r3
 800da84:	69fb      	ldr	r3, [r7, #28]
 800da86:	fb03 f302 	mul.w	r3, r3, r2
 800da8a:	009b      	lsls	r3, r3, #2
 800da8c:	68ba      	ldr	r2, [r7, #8]
 800da8e:	4413      	add	r3, r2
 800da90:	637b      	str	r3, [r7, #52]	; 0x34

    /*Create a temp. map_buf which always point to current line to draw*/
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800da98:	461a      	mov	r2, r3
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800daa0:	4619      	mov	r1, r3
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800daa8:	1acb      	subs	r3, r1, r3
 800daaa:	1ad3      	subs	r3, r2, r3
 800daac:	697a      	ldr	r2, [r7, #20]
 800daae:	fb02 f303 	mul.w	r3, r2, r3
 800dab2:	009b      	lsls	r3, r3, #2
 800dab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dab6:	4413      	add	r3, r2
 800dab8:	633b      	str	r3, [r7, #48]	; 0x30

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(mode) {
 800daba:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	d002      	beq.n	800dac8 <map_blended+0x78>
 800dac2:	2b02      	cmp	r3, #2
 800dac4:	d003      	beq.n	800dace <map_blended+0x7e>
        case LV_BLEND_MODE_SUBTRACTIVE:
            blend_fp = color_blend_true_color_subtractive;
            break;
        default:
            LV_LOG_WARN("fill_blended: unsupported blend mode");
            return;
 800dac6:	e0c9      	b.n	800dc5c <map_blended+0x20c>
            blend_fp = color_blend_true_color_additive;
 800dac8:	4b66      	ldr	r3, [pc, #408]	; (800dc64 <map_blended+0x214>)
 800daca:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800dacc:	e002      	b.n	800dad4 <map_blended+0x84>
            blend_fp = color_blend_true_color_subtractive;
 800dace:	4b66      	ldr	r3, [pc, #408]	; (800dc68 <map_blended+0x218>)
 800dad0:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800dad2:	bf00      	nop

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800dad4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d155      	bne.n	800db88 <map_blended+0x138>
        /*Go to the first px of the row*/
        map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dae2:	461a      	mov	r2, r3
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800daea:	4619      	mov	r1, r3
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800daf2:	1acb      	subs	r3, r1, r3
 800daf4:	1ad3      	subs	r3, r2, r3
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dafa:	4413      	add	r3, r2
 800dafc:	633b      	str	r3, [r7, #48]	; 0x30

        /*The map will be indexed from `draw_area->x1` so compensate it.*/
        map_buf_tmp -= draw_area->x1;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db04:	009b      	lsls	r3, r3, #2
 800db06:	425b      	negs	r3, r3
 800db08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db0a:	4413      	add	r3, r2
 800db0c:	633b      	str	r3, [r7, #48]	; 0x30

        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800db14:	627b      	str	r3, [r7, #36]	; 0x24
 800db16:	e02f      	b.n	800db78 <map_blended+0x128>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db1e:	62bb      	str	r3, [r7, #40]	; 0x28
 800db20:	e016      	b.n	800db50 <map_blended+0x100>
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
 800db22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db24:	009b      	lsls	r3, r3, #2
 800db26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db28:	18d0      	adds	r0, r2, r3
 800db2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db2c:	009b      	lsls	r3, r3, #2
 800db2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db30:	18d1      	adds	r1, r2, r3
 800db32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db38:	18d4      	adds	r4, r2, r3
 800db3a:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800db3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db40:	6809      	ldr	r1, [r1, #0]
 800db42:	6800      	ldr	r0, [r0, #0]
 800db44:	4798      	blx	r3
 800db46:	4603      	mov	r3, r0
 800db48:	6023      	str	r3, [r4, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800db4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4c:	3301      	adds	r3, #1
 800db4e:	62bb      	str	r3, [r7, #40]	; 0x28
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800db56:	461a      	mov	r2, r3
 800db58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5a:	4293      	cmp	r3, r2
 800db5c:	dde1      	ble.n	800db22 <map_blended+0xd2>
            }
            disp_buf_tmp += disp_w;
 800db5e:	69fb      	ldr	r3, [r7, #28]
 800db60:	009b      	lsls	r3, r3, #2
 800db62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db64:	4413      	add	r3, r2
 800db66:	637b      	str	r3, [r7, #52]	; 0x34
            map_buf_tmp += map_w;
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	009b      	lsls	r3, r3, #2
 800db6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db6e:	4413      	add	r3, r2
 800db70:	633b      	str	r3, [r7, #48]	; 0x30
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800db72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db74:	3301      	adds	r3, #1
 800db76:	627b      	str	r3, [r7, #36]	; 0x24
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800db7e:	461a      	mov	r2, r3
 800db80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db82:	4293      	cmp	r3, r2
 800db84:	ddc8      	ble.n	800db18 <map_blended+0xc8>
 800db86:	e069      	b.n	800dc5c <map_blended+0x20c>
    /*Masked*/
    else {
        /* The mask is relative to the clipped area.
         * In the cycles below mask will be indexed from `draw_area.x1`
         * but it corresponds to zero index. So prepare `mask_tmp` accordingly. */
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db8e:	425b      	negs	r3, r3
 800db90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800db92:	4413      	add	r3, r2
 800db94:	623b      	str	r3, [r7, #32]

        map_buf_tmp -= draw_area->x1;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db9c:	009b      	lsls	r3, r3, #2
 800db9e:	425b      	negs	r3, r3
 800dba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dba2:	4413      	add	r3, r2
 800dba4:	633b      	str	r3, [r7, #48]	; 0x30
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dbac:	627b      	str	r3, [r7, #36]	; 0x24
 800dbae:	e04e      	b.n	800dc4e <map_blended+0x1fe>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbb6:	62bb      	str	r3, [r7, #40]	; 0x28
 800dbb8:	e031      	b.n	800dc1e <map_blended+0x1ce>
                if(mask_tmp[x] == 0) continue;
 800dbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbbc:	6a3a      	ldr	r2, [r7, #32]
 800dbbe:	4413      	add	r3, r2
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d027      	beq.n	800dc16 <map_blended+0x1c6>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
 800dbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc8:	6a3a      	ldr	r2, [r7, #32]
 800dbca:	4413      	add	r3, r2
 800dbcc:	781b      	ldrb	r3, [r3, #0]
 800dbce:	2bfc      	cmp	r3, #252	; 0xfc
 800dbd0:	d80a      	bhi.n	800dbe8 <map_blended+0x198>
 800dbd2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800dbd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbd8:	6a39      	ldr	r1, [r7, #32]
 800dbda:	440a      	add	r2, r1
 800dbdc:	7812      	ldrb	r2, [r2, #0]
 800dbde:	fb02 f303 	mul.w	r3, r2, r3
 800dbe2:	121b      	asrs	r3, r3, #8
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	e001      	b.n	800dbec <map_blended+0x19c>
 800dbe8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800dbec:	74fb      	strb	r3, [r7, #19]
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
 800dbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbf4:	18d0      	adds	r0, r2, r3
 800dbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf8:	009b      	lsls	r3, r3, #2
 800dbfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dbfc:	18d1      	adds	r1, r2, r3
 800dbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc00:	009b      	lsls	r3, r3, #2
 800dc02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc04:	18d4      	adds	r4, r2, r3
 800dc06:	7cfa      	ldrb	r2, [r7, #19]
 800dc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc0a:	6809      	ldr	r1, [r1, #0]
 800dc0c:	6800      	ldr	r0, [r0, #0]
 800dc0e:	4798      	blx	r3
 800dc10:	4603      	mov	r3, r0
 800dc12:	6023      	str	r3, [r4, #0]
 800dc14:	e000      	b.n	800dc18 <map_blended+0x1c8>
                if(mask_tmp[x] == 0) continue;
 800dc16:	bf00      	nop
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800dc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dc24:	461a      	mov	r2, r3
 800dc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	ddc6      	ble.n	800dbba <map_blended+0x16a>
            }
            disp_buf_tmp += disp_w;
 800dc2c:	69fb      	ldr	r3, [r7, #28]
 800dc2e:	009b      	lsls	r3, r3, #2
 800dc30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc32:	4413      	add	r3, r2
 800dc34:	637b      	str	r3, [r7, #52]	; 0x34
            mask_tmp += draw_area_w;
 800dc36:	69bb      	ldr	r3, [r7, #24]
 800dc38:	6a3a      	ldr	r2, [r7, #32]
 800dc3a:	4413      	add	r3, r2
 800dc3c:	623b      	str	r3, [r7, #32]
            map_buf_tmp += map_w;
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	009b      	lsls	r3, r3, #2
 800dc42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc44:	4413      	add	r3, r2
 800dc46:	633b      	str	r3, [r7, #48]	; 0x30
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800dc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	627b      	str	r3, [r7, #36]	; 0x24
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dc54:	461a      	mov	r2, r3
 800dc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	dda9      	ble.n	800dbb0 <map_blended+0x160>
        }
    }
}
 800dc5c:	373c      	adds	r7, #60	; 0x3c
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd90      	pop	{r4, r7, pc}
 800dc62:	bf00      	nop
 800dc64:	0800dc6d 	.word	0x0800dc6d
 800dc68:	0800dcdd 	.word	0x0800dcdd

0800dc6c <color_blend_true_color_additive>:

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b086      	sub	sp, #24
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	60f8      	str	r0, [r7, #12]
 800dc74:	60b9      	str	r1, [r7, #8]
 800dc76:	4613      	mov	r3, r2
 800dc78:	71fb      	strb	r3, [r7, #7]

    if(opa <= LV_OPA_MIN) return bg;
 800dc7a:	79fb      	ldrb	r3, [r7, #7]
 800dc7c:	2b02      	cmp	r3, #2
 800dc7e:	d801      	bhi.n	800dc84 <color_blend_true_color_additive+0x18>
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	e027      	b.n	800dcd4 <color_blend_true_color_additive+0x68>
    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
    fg.full = LV_MATH_MIN(tmp, 1);
#else
    tmp = bg.ch.red + fg.ch.red;
 800dc84:	7abb      	ldrb	r3, [r7, #10]
 800dc86:	461a      	mov	r2, r3
 800dc88:	7bbb      	ldrb	r3, [r7, #14]
 800dc8a:	4413      	add	r3, r2
 800dc8c:	617b      	str	r3, [r7, #20]
#if LV_COLOR_DEPTH == 8
    fg.ch.red = LV_MATH_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
    fg.ch.red = LV_MATH_MIN(tmp, 31);
#elif LV_COLOR_DEPTH == 32
    fg.ch.red = LV_MATH_MIN(tmp, 255);
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	2bff      	cmp	r3, #255	; 0xff
 800dc92:	bf28      	it	cs
 800dc94:	23ff      	movcs	r3, #255	; 0xff
 800dc96:	b2db      	uxtb	r3, r3
 800dc98:	73bb      	strb	r3, [r7, #14]
    fg.ch.green_h = tmp >> 3;
    fg.ch.green_l = tmp & 0x7;
#endif

#elif LV_COLOR_DEPTH == 32
    fg.ch.green = LV_MATH_MIN(tmp, 255);
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	2bff      	cmp	r3, #255	; 0xff
 800dc9e:	bf28      	it	cs
 800dca0:	23ff      	movcs	r3, #255	; 0xff
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	737b      	strb	r3, [r7, #13]
#endif

    tmp = bg.ch.blue + fg.ch.blue;
 800dca6:	7a3b      	ldrb	r3, [r7, #8]
 800dca8:	461a      	mov	r2, r3
 800dcaa:	7b3b      	ldrb	r3, [r7, #12]
 800dcac:	4413      	add	r3, r2
 800dcae:	617b      	str	r3, [r7, #20]
#if LV_COLOR_DEPTH == 8
    fg.ch.blue = LV_MATH_MIN(tmp, 4);
#elif LV_COLOR_DEPTH == 16
    fg.ch.blue = LV_MATH_MIN(tmp, 31);
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MATH_MIN(tmp, 255);
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	2bff      	cmp	r3, #255	; 0xff
 800dcb4:	bf28      	it	cs
 800dcb6:	23ff      	movcs	r3, #255	; 0xff
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	733b      	strb	r3, [r7, #12]
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
 800dcbc:	79fb      	ldrb	r3, [r7, #7]
 800dcbe:	2bff      	cmp	r3, #255	; 0xff
 800dcc0:	d101      	bne.n	800dcc6 <color_blend_true_color_additive+0x5a>
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	e006      	b.n	800dcd4 <color_blend_true_color_additive+0x68>

    return lv_color_mix(fg, bg, opa);
 800dcc6:	79fb      	ldrb	r3, [r7, #7]
 800dcc8:	461a      	mov	r2, r3
 800dcca:	68b9      	ldr	r1, [r7, #8]
 800dccc:	68f8      	ldr	r0, [r7, #12]
 800dcce:	f7fe fc17 	bl	800c500 <lv_color_mix>
 800dcd2:	4603      	mov	r3, r0
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3718      	adds	r7, #24
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}

0800dcdc <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b086      	sub	sp, #24
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	60b9      	str	r1, [r7, #8]
 800dce6:	4613      	mov	r3, r2
 800dce8:	71fb      	strb	r3, [r7, #7]

    if(opa <= LV_OPA_MIN) return bg;
 800dcea:	79fb      	ldrb	r3, [r7, #7]
 800dcec:	2b02      	cmp	r3, #2
 800dcee:	d801      	bhi.n	800dcf4 <color_blend_true_color_subtractive+0x18>
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	e029      	b.n	800dd48 <color_blend_true_color_subtractive+0x6c>

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
 800dcf4:	7abb      	ldrb	r3, [r7, #10]
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	7bbb      	ldrb	r3, [r7, #14]
 800dcfa:	1ad3      	subs	r3, r2, r3
 800dcfc:	617b      	str	r3, [r7, #20]
    fg.ch.red = LV_MATH_MAX(tmp, 0);
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	73bb      	strb	r3, [r7, #14]

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
 800dd08:	7a7b      	ldrb	r3, [r7, #9]
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	7b7b      	ldrb	r3, [r7, #13]
 800dd0e:	1ad3      	subs	r3, r2, r3
 800dd10:	617b      	str	r3, [r7, #20]
    fg.ch.green = LV_MATH_MAX(tmp, 0);
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	737b      	strb	r3, [r7, #13]
    tmp = LV_MATH_MAX(tmp, 0);
    fg.ch.green_h = tmp >> 3;
    fg.ch.green_l = tmp & 0x7;
#endif

    tmp = bg.ch.blue - fg.ch.blue;
 800dd1c:	7a3b      	ldrb	r3, [r7, #8]
 800dd1e:	461a      	mov	r2, r3
 800dd20:	7b3b      	ldrb	r3, [r7, #12]
 800dd22:	1ad3      	subs	r3, r2, r3
 800dd24:	617b      	str	r3, [r7, #20]
    fg.ch.blue = LV_MATH_MAX(tmp, 0);
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	733b      	strb	r3, [r7, #12]

    if(opa == LV_OPA_COVER) return fg;
 800dd30:	79fb      	ldrb	r3, [r7, #7]
 800dd32:	2bff      	cmp	r3, #255	; 0xff
 800dd34:	d101      	bne.n	800dd3a <color_blend_true_color_subtractive+0x5e>
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	e006      	b.n	800dd48 <color_blend_true_color_subtractive+0x6c>

    return lv_color_mix(fg, bg, opa);
 800dd3a:	79fb      	ldrb	r3, [r7, #7]
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	68b9      	ldr	r1, [r7, #8]
 800dd40:	68f8      	ldr	r0, [r7, #12]
 800dd42:	f7fe fbdd 	bl	800c500 <lv_color_mix>
 800dd46:	4603      	mov	r3, r0
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3718      	adds	r7, #24
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <lv_color_premult>:
{
 800dd50:	b480      	push	{r7}
 800dd52:	b085      	sub	sp, #20
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	60f8      	str	r0, [r7, #12]
 800dd58:	460b      	mov	r3, r1
 800dd5a:	607a      	str	r2, [r7, #4]
 800dd5c:	72fb      	strb	r3, [r7, #11]
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 800dd5e:	7bbb      	ldrb	r3, [r7, #14]
 800dd60:	b29a      	uxth	r2, r3
 800dd62:	7afb      	ldrb	r3, [r7, #11]
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	fb12 f303 	smulbb	r3, r2, r3
 800dd6a:	b29a      	uxth	r2, r3
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	801a      	strh	r2, [r3, #0]
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 800dd70:	7b7b      	ldrb	r3, [r7, #13]
 800dd72:	b299      	uxth	r1, r3
 800dd74:	7afb      	ldrb	r3, [r7, #11]
 800dd76:	b29a      	uxth	r2, r3
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	3302      	adds	r3, #2
 800dd7c:	fb11 f202 	smulbb	r2, r1, r2
 800dd80:	b292      	uxth	r2, r2
 800dd82:	801a      	strh	r2, [r3, #0]
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 800dd84:	7b3b      	ldrb	r3, [r7, #12]
 800dd86:	b299      	uxth	r1, r3
 800dd88:	7afb      	ldrb	r3, [r7, #11]
 800dd8a:	b29a      	uxth	r2, r3
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	3304      	adds	r3, #4
 800dd90:	fb11 f202 	smulbb	r2, r1, r2
 800dd94:	b292      	uxth	r2, r2
 800dd96:	801a      	strh	r2, [r3, #0]
}
 800dd98:	bf00      	nop
 800dd9a:	3714      	adds	r7, #20
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr

0800dda4 <lv_color_mix_premult>:
{
 800dda4:	b480      	push	{r7}
 800dda6:	b087      	sub	sp, #28
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	60f8      	str	r0, [r7, #12]
 800ddac:	60b9      	str	r1, [r7, #8]
 800ddae:	4613      	mov	r3, r2
 800ddb0:	71fb      	strb	r3, [r7, #7]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	881b      	ldrh	r3, [r3, #0]
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	7abb      	ldrb	r3, [r7, #10]
 800ddba:	4619      	mov	r1, r3
 800ddbc:	79fb      	ldrb	r3, [r7, #7]
 800ddbe:	fb03 f301 	mul.w	r3, r3, r1
 800ddc2:	4413      	add	r3, r2
 800ddc4:	461a      	mov	r2, r3
 800ddc6:	4613      	mov	r3, r2
 800ddc8:	021b      	lsls	r3, r3, #8
 800ddca:	4413      	add	r3, r2
 800ddcc:	01db      	lsls	r3, r3, #7
 800ddce:	4413      	add	r3, r2
 800ddd0:	0ddb      	lsrs	r3, r3, #23
 800ddd2:	b2db      	uxtb	r3, r3
 800ddd4:	75bb      	strb	r3, [r7, #22]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	3302      	adds	r3, #2
 800ddda:	881b      	ldrh	r3, [r3, #0]
 800dddc:	461a      	mov	r2, r3
 800ddde:	7a7b      	ldrb	r3, [r7, #9]
 800dde0:	4619      	mov	r1, r3
 800dde2:	79fb      	ldrb	r3, [r7, #7]
 800dde4:	fb03 f301 	mul.w	r3, r3, r1
 800dde8:	4413      	add	r3, r2
 800ddea:	461a      	mov	r2, r3
 800ddec:	4613      	mov	r3, r2
 800ddee:	021b      	lsls	r3, r3, #8
 800ddf0:	4413      	add	r3, r2
 800ddf2:	01db      	lsls	r3, r3, #7
 800ddf4:	4413      	add	r3, r2
 800ddf6:	0ddb      	lsrs	r3, r3, #23
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	757b      	strb	r3, [r7, #21]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	3304      	adds	r3, #4
 800de00:	881b      	ldrh	r3, [r3, #0]
 800de02:	461a      	mov	r2, r3
 800de04:	7a3b      	ldrb	r3, [r7, #8]
 800de06:	4619      	mov	r1, r3
 800de08:	79fb      	ldrb	r3, [r7, #7]
 800de0a:	fb03 f301 	mul.w	r3, r3, r1
 800de0e:	4413      	add	r3, r2
 800de10:	461a      	mov	r2, r3
 800de12:	4613      	mov	r3, r2
 800de14:	021b      	lsls	r3, r3, #8
 800de16:	4413      	add	r3, r2
 800de18:	01db      	lsls	r3, r3, #7
 800de1a:	4413      	add	r3, r2
 800de1c:	0ddb      	lsrs	r3, r3, #23
 800de1e:	b2db      	uxtb	r3, r3
 800de20:	753b      	strb	r3, [r7, #20]
    LV_COLOR_SET_A(ret, 0xFF);
 800de22:	23ff      	movs	r3, #255	; 0xff
 800de24:	75fb      	strb	r3, [r7, #23]
    return ret;
 800de26:	697b      	ldr	r3, [r7, #20]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	371c      	adds	r7, #28
 800de2c:	46bd      	mov	sp, r7
 800de2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de32:	4770      	bx	lr

0800de34 <_lv_memcpy_small>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
 800de34:	b480      	push	{r7}
 800de36:	b087      	sub	sp, #28
 800de38:	af00      	add	r7, sp, #0
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	60b9      	str	r1, [r7, #8]
 800de3e:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	613b      	str	r3, [r7, #16]

    while(len) {
 800de48:	e00c      	b.n	800de64 <_lv_memcpy_small+0x30>
        *d8 = *s8;
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	781a      	ldrb	r2, [r3, #0]
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	701a      	strb	r2, [r3, #0]
        d8++;
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	3301      	adds	r3, #1
 800de56:	617b      	str	r3, [r7, #20]
        s8++;
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	3301      	adds	r3, #1
 800de5c:	613b      	str	r3, [r7, #16]
        len--;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	3b01      	subs	r3, #1
 800de62:	607b      	str	r3, [r7, #4]
    while(len) {
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d1ef      	bne.n	800de4a <_lv_memcpy_small+0x16>
    }

    return dst;
 800de6a:	68fb      	ldr	r3, [r7, #12]
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	371c      	adds	r7, #28
 800de70:	46bd      	mov	sp, r7
 800de72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de76:	4770      	bx	lr

0800de78 <lv_area_copy>:
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b082      	sub	sp, #8
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	6039      	str	r1, [r7, #0]
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
 800de82:	2208      	movs	r2, #8
 800de84:	6839      	ldr	r1, [r7, #0]
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f7ff ffd4 	bl	800de34 <_lv_memcpy_small>
}
 800de8c:	bf00      	nop
 800de8e:	3708      	adds	r7, #8
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}

0800de94 <lv_area_get_width>:
{
 800de94:	b480      	push	{r7}
 800de96:	b083      	sub	sp, #12
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dea2:	b29a      	uxth	r2, r3
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800deaa:	b29b      	uxth	r3, r3
 800deac:	1ad3      	subs	r3, r2, r3
 800deae:	b29b      	uxth	r3, r3
 800deb0:	3301      	adds	r3, #1
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	b21b      	sxth	r3, r3
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	370c      	adds	r7, #12
 800deba:	46bd      	mov	sp, r7
 800debc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec0:	4770      	bx	lr

0800dec2 <lv_area_get_height>:
{
 800dec2:	b480      	push	{r7}
 800dec4:	b083      	sub	sp, #12
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ded0:	b29a      	uxth	r2, r3
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ded8:	b29b      	uxth	r3, r3
 800deda:	1ad3      	subs	r3, r2, r3
 800dedc:	b29b      	uxth	r3, r3
 800dede:	3301      	adds	r3, #1
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	b21b      	sxth	r3, r3
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	370c      	adds	r7, #12
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr

0800def0 <_lv_img_buf_transform>:
 * @param y the coordinate which color and opa should be get
 * @return true: there is valid pixel on these x/y coordinates; false: the rotated pixel was out of the image
 * @note the result is written back to `dsc->res_color` and `dsc->res_opa`
 */
static inline bool _lv_img_buf_transform(lv_img_transform_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
 800def0:	b590      	push	{r4, r7, lr}
 800def2:	b08f      	sub	sp, #60	; 0x3c
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	460b      	mov	r3, r1
 800defa:	807b      	strh	r3, [r7, #2]
 800defc:	4613      	mov	r3, r2
 800defe:	803b      	strh	r3, [r7, #0]
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	627b      	str	r3, [r7, #36]	; 0x24

    /*Get the target point relative coordinates to the pivot*/
    int32_t xt = x - dsc->cfg.pivot_x;
 800df06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800df0a:	687a      	ldr	r2, [r7, #4]
 800df0c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800df10:	1a9b      	subs	r3, r3, r2
 800df12:	623b      	str	r3, [r7, #32]
    int32_t yt = y - dsc->cfg.pivot_y;
 800df14:	f9b7 3000 	ldrsh.w	r3, [r7]
 800df18:	687a      	ldr	r2, [r7, #4]
 800df1a:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800df1e:	1a9b      	subs	r3, r3, r2
 800df20:	61fb      	str	r3, [r7, #28]

    int32_t xs;
    int32_t ys;
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	89db      	ldrh	r3, [r3, #14]
 800df26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df2a:	d120      	bne.n	800df6e <_lv_img_buf_transform+0x7e>
        /*Get the source pixel from the upscaled image*/
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df30:	6a3a      	ldr	r2, [r7, #32]
 800df32:	fb02 f203 	mul.w	r2, r2, r3
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df3a:	69f9      	ldr	r1, [r7, #28]
 800df3c:	fb01 f303 	mul.w	r3, r1, r3
 800df40:	1ad3      	subs	r3, r2, r3
 800df42:	109a      	asrs	r2, r3, #2
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df48:	4413      	add	r3, r2
 800df4a:	637b      	str	r3, [r7, #52]	; 0x34
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df50:	6a3a      	ldr	r2, [r7, #32]
 800df52:	fb02 f203 	mul.w	r2, r2, r3
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df5a:	69f9      	ldr	r1, [r7, #28]
 800df5c:	fb01 f303 	mul.w	r3, r1, r3
 800df60:	4413      	add	r3, r2
 800df62:	109a      	asrs	r2, r3, #2
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df68:	4413      	add	r3, r2
 800df6a:	633b      	str	r3, [r7, #48]	; 0x30
 800df6c:	e04b      	b.n	800e006 <_lv_img_buf_transform+0x116>
    }
    else if(dsc->cfg.angle == 0) {
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d118      	bne.n	800dfaa <_lv_img_buf_transform+0xba>
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df7c:	6a3a      	ldr	r2, [r7, #32]
 800df7e:	fb02 f303 	mul.w	r3, r2, r3
 800df82:	115b      	asrs	r3, r3, #5
 800df84:	623b      	str	r3, [r7, #32]
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df8a:	69fa      	ldr	r2, [r7, #28]
 800df8c:	fb02 f303 	mul.w	r3, r2, r3
 800df90:	115b      	asrs	r3, r3, #5
 800df92:	61fb      	str	r3, [r7, #28]
        xs = xt + dsc->tmp.pivot_x_256;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df98:	6a3a      	ldr	r2, [r7, #32]
 800df9a:	4413      	add	r3, r2
 800df9c:	637b      	str	r3, [r7, #52]	; 0x34
        ys = yt + dsc->tmp.pivot_y_256;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfa2:	69fa      	ldr	r2, [r7, #28]
 800dfa4:	4413      	add	r3, r2
 800dfa6:	633b      	str	r3, [r7, #48]	; 0x30
 800dfa8:	e02d      	b.n	800e006 <_lv_img_buf_transform+0x116>
    }
    else {
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfae:	6a3a      	ldr	r2, [r7, #32]
 800dfb0:	fb02 f303 	mul.w	r3, r2, r3
 800dfb4:	115b      	asrs	r3, r3, #5
 800dfb6:	623b      	str	r3, [r7, #32]
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfbc:	69fa      	ldr	r2, [r7, #28]
 800dfbe:	fb02 f303 	mul.w	r3, r2, r3
 800dfc2:	115b      	asrs	r3, r3, #5
 800dfc4:	61fb      	str	r3, [r7, #28]
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfca:	6a3a      	ldr	r2, [r7, #32]
 800dfcc:	fb02 f203 	mul.w	r2, r2, r3
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfd4:	69f9      	ldr	r1, [r7, #28]
 800dfd6:	fb01 f303 	mul.w	r3, r1, r3
 800dfda:	1ad3      	subs	r3, r2, r3
 800dfdc:	129a      	asrs	r2, r3, #10
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfe2:	4413      	add	r3, r2
 800dfe4:	637b      	str	r3, [r7, #52]	; 0x34
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfea:	6a3a      	ldr	r2, [r7, #32]
 800dfec:	fb02 f203 	mul.w	r2, r2, r3
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dff4:	69f9      	ldr	r1, [r7, #28]
 800dff6:	fb01 f303 	mul.w	r3, r1, r3
 800dffa:	4413      	add	r3, r2
 800dffc:	129a      	asrs	r2, r3, #10
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e002:	4413      	add	r3, r2
 800e004:	633b      	str	r3, [r7, #48]	; 0x30
    }

    /*Get the integer part of the source pixel*/
    int32_t xs_int = xs >> 8;
 800e006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e008:	121b      	asrs	r3, r3, #8
 800e00a:	61bb      	str	r3, [r7, #24]
    int32_t ys_int = ys >> 8;
 800e00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e00e:	121b      	asrs	r3, r3, #8
 800e010:	617b      	str	r3, [r7, #20]

    if(xs_int >= dsc->cfg.src_w) return false;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e018:	461a      	mov	r2, r3
 800e01a:	69bb      	ldr	r3, [r7, #24]
 800e01c:	4293      	cmp	r3, r2
 800e01e:	db01      	blt.n	800e024 <_lv_img_buf_transform+0x134>
 800e020:	2300      	movs	r3, #0
 800e022:	e0c8      	b.n	800e1b6 <_lv_img_buf_transform+0x2c6>
    else if(xs_int < 0) return false;
 800e024:	69bb      	ldr	r3, [r7, #24]
 800e026:	2b00      	cmp	r3, #0
 800e028:	da01      	bge.n	800e02e <_lv_img_buf_transform+0x13e>
 800e02a:	2300      	movs	r3, #0
 800e02c:	e0c3      	b.n	800e1b6 <_lv_img_buf_transform+0x2c6>

    if(ys_int >= dsc->cfg.src_h) return false;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e034:	461a      	mov	r2, r3
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	4293      	cmp	r3, r2
 800e03a:	db01      	blt.n	800e040 <_lv_img_buf_transform+0x150>
 800e03c:	2300      	movs	r3, #0
 800e03e:	e0ba      	b.n	800e1b6 <_lv_img_buf_transform+0x2c6>
    else if(ys_int < 0) return false;
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	2b00      	cmp	r3, #0
 800e044:	da01      	bge.n	800e04a <_lv_img_buf_transform+0x15a>
 800e046:	2300      	movs	r3, #0
 800e048:	e0b5      	b.n	800e1b6 <_lv_img_buf_transform+0x2c6>

    uint8_t px_size;
    uint32_t pxi;
    if(dsc->tmp.native_color) {
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e050:	f003 0304 	and.w	r3, r3, #4
 800e054:	b2db      	uxtb	r3, r3
 800e056:	2b00      	cmp	r3, #0
 800e058:	d04c      	beq.n	800e0f4 <_lv_img_buf_transform+0x204>
        if(dsc->tmp.has_alpha == 0) {
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e060:	f003 0302 	and.w	r3, r3, #2
 800e064:	b2db      	uxtb	r3, r3
 800e066:	2b00      	cmp	r3, #0
 800e068:	d11c      	bne.n	800e0a4 <_lv_img_buf_transform+0x1b4>
            px_size = LV_COLOR_SIZE >> 3;
 800e06a:	2304      	movs	r3, #4
 800e06c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e076:	461a      	mov	r2, r3
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	fb03 f202 	mul.w	r2, r3, r2
 800e07e:	69bb      	ldr	r3, [r7, #24]
 800e080:	4413      	add	r3, r2
 800e082:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e086:	fb02 f303 	mul.w	r3, r2, r3
 800e08a:	62bb      	str	r3, [r7, #40]	; 0x28
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f103 0018 	add.w	r0, r3, #24
 800e092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e096:	4413      	add	r3, r2
 800e098:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e09c:	4619      	mov	r1, r3
 800e09e:	f7ff fec9 	bl	800de34 <_lv_memcpy_small>
 800e0a2:	e046      	b.n	800e132 <_lv_img_buf_transform+0x242>
        }
        else {
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
 800e0a4:	2304      	movs	r3, #4
 800e0a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e0b0:	461a      	mov	r2, r3
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	fb03 f202 	mul.w	r2, r3, r2
 800e0b8:	69bb      	ldr	r3, [r7, #24]
 800e0ba:	4413      	add	r3, r2
 800e0bc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e0c0:	fb02 f303 	mul.w	r3, r2, r3
 800e0c4:	62bb      	str	r3, [r7, #40]	; 0x28
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f103 0018 	add.w	r0, r3, #24
 800e0cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d0:	18d1      	adds	r1, r2, r3
 800e0d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e0d6:	3b01      	subs	r3, #1
 800e0d8:	461a      	mov	r2, r3
 800e0da:	f7ff feab 	bl	800de34 <_lv_memcpy_small>
            dsc->res.opa = src_u8[pxi + px_size - 1];
 800e0de:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e4:	4413      	add	r3, r2
 800e0e6:	3b01      	subs	r3, #1
 800e0e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0ea:	4413      	add	r3, r2
 800e0ec:	781a      	ldrb	r2, [r3, #0]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	771a      	strb	r2, [r3, #28]
 800e0f2:	e01e      	b.n	800e132 <_lv_img_buf_transform+0x242>
        }
    }
    else {
        pxi = 0; /*unused*/
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	62bb      	str	r3, [r7, #40]	; 0x28
        px_size = 0;    /*unused*/
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f103 0020 	add.w	r0, r3, #32
 800e104:	69bb      	ldr	r3, [r7, #24]
 800e106:	b219      	sxth	r1, r3
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	b21a      	sxth	r2, r3
 800e10c:	687c      	ldr	r4, [r7, #4]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	691b      	ldr	r3, [r3, #16]
 800e112:	f008 fed5 	bl	8016ec0 <lv_img_buf_get_px_color>
 800e116:	61a0      	str	r0, [r4, #24]
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	3320      	adds	r3, #32
 800e11c:	69ba      	ldr	r2, [r7, #24]
 800e11e:	b211      	sxth	r1, r2
 800e120:	697a      	ldr	r2, [r7, #20]
 800e122:	b212      	sxth	r2, r2
 800e124:	4618      	mov	r0, r3
 800e126:	f009 f80d 	bl	8017144 <lv_img_buf_get_px_alpha>
 800e12a:	4603      	mov	r3, r0
 800e12c:	461a      	mov	r2, r3
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	771a      	strb	r2, [r3, #28]
    }

    if(dsc->tmp.chroma_keyed) {
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e138:	f003 0301 	and.w	r3, r3, #1
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d00e      	beq.n	800e160 <_lv_img_buf_transform+0x270>
        lv_color_t ct = LV_COLOR_TRANSP;
 800e142:	2300      	movs	r3, #0
 800e144:	733b      	strb	r3, [r7, #12]
 800e146:	23ff      	movs	r3, #255	; 0xff
 800e148:	737b      	strb	r3, [r7, #13]
 800e14a:	2300      	movs	r3, #0
 800e14c:	73bb      	strb	r3, [r7, #14]
 800e14e:	23ff      	movs	r3, #255	; 0xff
 800e150:	73fb      	strb	r3, [r7, #15]
        if(dsc->res.color.full == ct.full) return false;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	699a      	ldr	r2, [r3, #24]
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	429a      	cmp	r2, r3
 800e15a:	d101      	bne.n	800e160 <_lv_img_buf_transform+0x270>
 800e15c:	2300      	movs	r3, #0
 800e15e:	e02a      	b.n	800e1b6 <_lv_img_buf_transform+0x2c6>
    }

    if(dsc->cfg.antialias == false) return true;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	7d5b      	ldrb	r3, [r3, #21]
 800e164:	f083 0301 	eor.w	r3, r3, #1
 800e168:	b2db      	uxtb	r3, r3
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d001      	beq.n	800e172 <_lv_img_buf_transform+0x282>
 800e16e:	2301      	movs	r3, #1
 800e170:	e021      	b.n	800e1b6 <_lv_img_buf_transform+0x2c6>

    dsc->tmp.xs = xs;
 800e172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e174:	b21a      	sxth	r2, r3
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    dsc->tmp.ys = ys;
 800e17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e17e:	b21a      	sxth	r2, r3
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    dsc->tmp.xs_int = xs_int;
 800e186:	69bb      	ldr	r3, [r7, #24]
 800e188:	b21a      	sxth	r2, r3
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    dsc->tmp.ys_int = ys_int;
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	b21a      	sxth	r2, r3
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    dsc->tmp.pxi = pxi;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e19e:	64da      	str	r2, [r3, #76]	; 0x4c
    dsc->tmp.px_size = px_size;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e1a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    bool ret;
    ret = _lv_img_buf_transform_anti_alias(dsc);
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f009 fc02 	bl	80179b4 <_lv_img_buf_transform_anti_alias>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	74fb      	strb	r3, [r7, #19]

    return ret;
 800e1b4:	7cfb      	ldrb	r3, [r7, #19]
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	373c      	adds	r7, #60	; 0x3c
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd90      	pop	{r4, r7, pc}

0800e1be <lv_draw_img_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_img_dsc_init(lv_draw_img_dsc_t * dsc)
{
 800e1be:	b580      	push	{r7, lr}
 800e1c0:	b082      	sub	sp, #8
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 800e1c6:	2114      	movs	r1, #20
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f00e ffae 	bl	801d12a <_lv_memset_00>
    dsc->recolor = LV_COLOR_BLACK;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	731a      	strb	r2, [r3, #12]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	735a      	strb	r2, [r3, #13]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	739a      	strb	r2, [r3, #14]
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	22ff      	movs	r2, #255	; 0xff
 800e1e4:	73da      	strb	r2, [r3, #15]
    dsc->opa = LV_OPA_COVER;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	22ff      	movs	r2, #255	; 0xff
 800e1ea:	701a      	strb	r2, [r3, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e1f2:	811a      	strh	r2, [r3, #8]
    dsc->antialias = LV_ANTIALIAS;
 800e1f4:	687a      	ldr	r2, [r7, #4]
 800e1f6:	7c53      	ldrb	r3, [r2, #17]
 800e1f8:	f043 0301 	orr.w	r3, r3, #1
 800e1fc:	7453      	strb	r3, [r2, #17]

}
 800e1fe:	bf00      	nop
 800e200:	3708      	adds	r7, #8
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
	...

0800e208 <lv_draw_img>:
 * @param mask the image will be drawn only in this area
 * @param src pointer to a lv_color_t array which contains the pixels of the image
 * @param dsc pointer to an initialized `lv_draw_img_dsc_t` variable
 */
void lv_draw_img(const lv_area_t * coords, const lv_area_t * mask, const void * src, const lv_draw_img_dsc_t * dsc)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b086      	sub	sp, #24
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	60f8      	str	r0, [r7, #12]
 800e210:	60b9      	str	r1, [r7, #8]
 800e212:	607a      	str	r2, [r7, #4]
 800e214:	603b      	str	r3, [r7, #0]
    if(src == NULL) {
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d105      	bne.n	800e228 <lv_draw_img+0x20>
        LV_LOG_WARN("Image draw: src is NULL");
        show_error(coords, mask, "No\ndata");
 800e21c:	4a0f      	ldr	r2, [pc, #60]	; (800e25c <lv_draw_img+0x54>)
 800e21e:	68b9      	ldr	r1, [r7, #8]
 800e220:	68f8      	ldr	r0, [r7, #12]
 800e222:	f000 feeb 	bl	800effc <show_error>
        return;
 800e226:	e016      	b.n	800e256 <lv_draw_img+0x4e>
    }

    if(dsc->opa <= LV_OPA_MIN) return;
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	2b02      	cmp	r3, #2
 800e22e:	d911      	bls.n	800e254 <lv_draw_img+0x4c>

    lv_res_t res;
    res = lv_img_draw_core(coords, mask, src, dsc);
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	687a      	ldr	r2, [r7, #4]
 800e234:	68b9      	ldr	r1, [r7, #8]
 800e236:	68f8      	ldr	r0, [r7, #12]
 800e238:	f000 f8da 	bl	800e3f0 <lv_img_draw_core>
 800e23c:	4603      	mov	r3, r0
 800e23e:	75fb      	strb	r3, [r7, #23]

    if(res == LV_RES_INV) {
 800e240:	7dfb      	ldrb	r3, [r7, #23]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d107      	bne.n	800e256 <lv_draw_img+0x4e>
        LV_LOG_WARN("Image draw error");
        show_error(coords, mask, "No\ndata");
 800e246:	4a05      	ldr	r2, [pc, #20]	; (800e25c <lv_draw_img+0x54>)
 800e248:	68b9      	ldr	r1, [r7, #8]
 800e24a:	68f8      	ldr	r0, [r7, #12]
 800e24c:	f000 fed6 	bl	800effc <show_error>
        return;
 800e250:	bf00      	nop
 800e252:	e000      	b.n	800e256 <lv_draw_img+0x4e>
    if(dsc->opa <= LV_OPA_MIN) return;
 800e254:	bf00      	nop
    }
}
 800e256:	3718      	adds	r7, #24
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}
 800e25c:	0802d7e4 	.word	0x0802d7e4

0800e260 <lv_img_cf_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_cf_get_px_size(lv_img_cf_t cf)
{
 800e260:	b480      	push	{r7}
 800e262:	b085      	sub	sp, #20
 800e264:	af00      	add	r7, sp, #0
 800e266:	4603      	mov	r3, r0
 800e268:	71fb      	strb	r3, [r7, #7]
    uint8_t px_size = 0;
 800e26a:	2300      	movs	r3, #0
 800e26c:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800e26e:	79fb      	ldrb	r3, [r7, #7]
 800e270:	2b0e      	cmp	r3, #14
 800e272:	d836      	bhi.n	800e2e2 <lv_img_cf_get_px_size+0x82>
 800e274:	a201      	add	r2, pc, #4	; (adr r2, 800e27c <lv_img_cf_get_px_size+0x1c>)
 800e276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e27a:	bf00      	nop
 800e27c:	0800e2b9 	.word	0x0800e2b9
 800e280:	0800e2b9 	.word	0x0800e2b9
 800e284:	0800e2e3 	.word	0x0800e2e3
 800e288:	0800e2e3 	.word	0x0800e2e3
 800e28c:	0800e2bf 	.word	0x0800e2bf
 800e290:	0800e2c5 	.word	0x0800e2c5
 800e294:	0800e2bf 	.word	0x0800e2bf
 800e298:	0800e2cb 	.word	0x0800e2cb
 800e29c:	0800e2d1 	.word	0x0800e2d1
 800e2a0:	0800e2d7 	.word	0x0800e2d7
 800e2a4:	0800e2dd 	.word	0x0800e2dd
 800e2a8:	0800e2cb 	.word	0x0800e2cb
 800e2ac:	0800e2d1 	.word	0x0800e2d1
 800e2b0:	0800e2d7 	.word	0x0800e2d7
 800e2b4:	0800e2dd 	.word	0x0800e2dd
        case LV_IMG_CF_UNKNOWN:
        case LV_IMG_CF_RAW:
            px_size = 0;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	73fb      	strb	r3, [r7, #15]
            break;
 800e2bc:	e014      	b.n	800e2e8 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR:
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
            px_size = LV_COLOR_SIZE;
 800e2be:	2320      	movs	r3, #32
 800e2c0:	73fb      	strb	r3, [r7, #15]
            break;
 800e2c2:	e011      	b.n	800e2e8 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR_ALPHA:
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
 800e2c4:	2320      	movs	r3, #32
 800e2c6:	73fb      	strb	r3, [r7, #15]
            break;
 800e2c8:	e00e      	b.n	800e2e8 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_ALPHA_1BIT:
            px_size = 1;
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	73fb      	strb	r3, [r7, #15]
            break;
 800e2ce:	e00b      	b.n	800e2e8 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_ALPHA_2BIT:
            px_size = 2;
 800e2d0:	2302      	movs	r3, #2
 800e2d2:	73fb      	strb	r3, [r7, #15]
            break;
 800e2d4:	e008      	b.n	800e2e8 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_ALPHA_4BIT:
            px_size = 4;
 800e2d6:	2304      	movs	r3, #4
 800e2d8:	73fb      	strb	r3, [r7, #15]
            break;
 800e2da:	e005      	b.n	800e2e8 <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_8BIT:
            px_size = 8;
 800e2dc:	2308      	movs	r3, #8
 800e2de:	73fb      	strb	r3, [r7, #15]
            break;
 800e2e0:	e002      	b.n	800e2e8 <lv_img_cf_get_px_size+0x88>
        default:
            px_size = 0;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	73fb      	strb	r3, [r7, #15]
            break;
 800e2e6:	bf00      	nop
    }

    return px_size;
 800e2e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3714      	adds	r7, #20
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f4:	4770      	bx	lr
 800e2f6:	bf00      	nop

0800e2f8 <lv_img_cf_is_chroma_keyed>:
 * Check if a color format is chroma keyed or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: chroma keyed; false: not chroma keyed
 */
bool lv_img_cf_is_chroma_keyed(lv_img_cf_t cf)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b085      	sub	sp, #20
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	4603      	mov	r3, r0
 800e300:	71fb      	strb	r3, [r7, #7]
    bool is_chroma_keyed = false;
 800e302:	2300      	movs	r3, #0
 800e304:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800e306:	79fb      	ldrb	r3, [r7, #7]
 800e308:	2b03      	cmp	r3, #3
 800e30a:	d004      	beq.n	800e316 <lv_img_cf_is_chroma_keyed+0x1e>
 800e30c:	2b03      	cmp	r3, #3
 800e30e:	db05      	blt.n	800e31c <lv_img_cf_is_chroma_keyed+0x24>
 800e310:	3b06      	subs	r3, #6
 800e312:	2b04      	cmp	r3, #4
 800e314:	d802      	bhi.n	800e31c <lv_img_cf_is_chroma_keyed+0x24>
        case LV_IMG_CF_RAW_CHROMA_KEYED:
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_INDEXED_8BIT:
            is_chroma_keyed = true;
 800e316:	2301      	movs	r3, #1
 800e318:	73fb      	strb	r3, [r7, #15]
            break;
 800e31a:	e002      	b.n	800e322 <lv_img_cf_is_chroma_keyed+0x2a>

        default:
            is_chroma_keyed = false;
 800e31c:	2300      	movs	r3, #0
 800e31e:	73fb      	strb	r3, [r7, #15]
            break;
 800e320:	bf00      	nop
    }

    return is_chroma_keyed;
 800e322:	7bfb      	ldrb	r3, [r7, #15]
}
 800e324:	4618      	mov	r0, r3
 800e326:	3714      	adds	r7, #20
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr

0800e330 <lv_img_cf_has_alpha>:
 * Check if a color format has alpha channel or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: has alpha channel; false: doesn't have alpha channel
 */
bool lv_img_cf_has_alpha(lv_img_cf_t cf)
{
 800e330:	b480      	push	{r7}
 800e332:	b085      	sub	sp, #20
 800e334:	af00      	add	r7, sp, #0
 800e336:	4603      	mov	r3, r0
 800e338:	71fb      	strb	r3, [r7, #7]
    bool has_alpha = false;
 800e33a:	2300      	movs	r3, #0
 800e33c:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 800e33e:	79fb      	ldrb	r3, [r7, #7]
 800e340:	3b02      	subs	r3, #2
 800e342:	2b0c      	cmp	r3, #12
 800e344:	d81f      	bhi.n	800e386 <lv_img_cf_has_alpha+0x56>
 800e346:	a201      	add	r2, pc, #4	; (adr r2, 800e34c <lv_img_cf_has_alpha+0x1c>)
 800e348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e34c:	0800e381 	.word	0x0800e381
 800e350:	0800e387 	.word	0x0800e387
 800e354:	0800e387 	.word	0x0800e387
 800e358:	0800e381 	.word	0x0800e381
 800e35c:	0800e387 	.word	0x0800e387
 800e360:	0800e381 	.word	0x0800e381
 800e364:	0800e381 	.word	0x0800e381
 800e368:	0800e381 	.word	0x0800e381
 800e36c:	0800e381 	.word	0x0800e381
 800e370:	0800e381 	.word	0x0800e381
 800e374:	0800e381 	.word	0x0800e381
 800e378:	0800e381 	.word	0x0800e381
 800e37c:	0800e381 	.word	0x0800e381
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_1BIT:
        case LV_IMG_CF_ALPHA_2BIT:
        case LV_IMG_CF_ALPHA_4BIT:
        case LV_IMG_CF_ALPHA_8BIT:
            has_alpha = true;
 800e380:	2301      	movs	r3, #1
 800e382:	73fb      	strb	r3, [r7, #15]
            break;
 800e384:	e002      	b.n	800e38c <lv_img_cf_has_alpha+0x5c>
        default:
            has_alpha = false;
 800e386:	2300      	movs	r3, #0
 800e388:	73fb      	strb	r3, [r7, #15]
            break;
 800e38a:	bf00      	nop
    }

    return has_alpha;
 800e38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3714      	adds	r7, #20
 800e392:	46bd      	mov	sp, r7
 800e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e398:	4770      	bx	lr
 800e39a:	bf00      	nop

0800e39c <lv_img_src_get_type>:
 *  - a path to a file (e.g. "S:/folder/image.bin")
 *  - or a symbol (e.g. LV_SYMBOL_CLOSE)
 * @return type of the image source LV_IMG_SRC_VARIABLE/FILE/SYMBOL/UNKNOWN
 */
lv_img_src_t lv_img_src_get_type(const void * src)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b085      	sub	sp, #20
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
    lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;
 800e3a4:	2303      	movs	r3, #3
 800e3a6:	73fb      	strb	r3, [r7, #15]

    if(src == NULL) return img_src_type;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d101      	bne.n	800e3b2 <lv_img_src_get_type+0x16>
 800e3ae:	7bfb      	ldrb	r3, [r7, #15]
 800e3b0:	e018      	b.n	800e3e4 <lv_img_src_get_type+0x48>
    const uint8_t * u8_p = src;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	60bb      	str	r3, [r7, #8]

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	2b1f      	cmp	r3, #31
 800e3bc:	d907      	bls.n	800e3ce <lv_img_src_get_type+0x32>
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	b25b      	sxtb	r3, r3
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	db02      	blt.n	800e3ce <lv_img_src_get_type+0x32>
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	73fb      	strb	r3, [r7, #15]
 800e3cc:	e009      	b.n	800e3e2 <lv_img_src_get_type+0x46>
    }
    else if(u8_p[0] >= 0x80) {
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	b25b      	sxtb	r3, r3
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	da02      	bge.n	800e3de <lv_img_src_get_type+0x42>
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
 800e3d8:	2302      	movs	r3, #2
 800e3da:	73fb      	strb	r3, [r7, #15]
 800e3dc:	e001      	b.n	800e3e2 <lv_img_src_get_type+0x46>
    }
    else {
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 800e3de:	2300      	movs	r3, #0
 800e3e0:	73fb      	strb	r3, [r7, #15]

    if(LV_IMG_SRC_UNKNOWN == img_src_type) {
        LV_LOG_WARN("lv_img_src_get_type: unknown image type");
    }

    return img_src_type;
 800e3e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3714      	adds	r7, #20
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr

0800e3f0 <lv_img_draw_core>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_res_t lv_img_draw_core(const lv_area_t * coords, const lv_area_t * clip_area,
                                                       const void * src,
                                                       const lv_draw_img_dsc_t * draw_dsc)
{
 800e3f0:	b5b0      	push	{r4, r5, r7, lr}
 800e3f2:	b09c      	sub	sp, #112	; 0x70
 800e3f4:	af02      	add	r7, sp, #8
 800e3f6:	60f8      	str	r0, [r7, #12]
 800e3f8:	60b9      	str	r1, [r7, #8]
 800e3fa:	607a      	str	r2, [r7, #4]
 800e3fc:	603b      	str	r3, [r7, #0]
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	781b      	ldrb	r3, [r3, #0]
 800e402:	2b02      	cmp	r3, #2
 800e404:	d801      	bhi.n	800e40a <lv_img_draw_core+0x1a>
 800e406:	2301      	movs	r3, #1
 800e408:	e15a      	b.n	800e6c0 <lv_img_draw_core+0x2d0>

    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	68d9      	ldr	r1, [r3, #12]
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f009 fd6c 	bl	8017eec <_lv_img_cache_open>
 800e414:	65f8      	str	r0, [r7, #92]	; 0x5c

    if(cdsc == NULL) return LV_RES_INV;
 800e416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d101      	bne.n	800e420 <lv_img_draw_core+0x30>
 800e41c:	2300      	movs	r3, #0
 800e41e:	e14f      	b.n	800e6c0 <lv_img_draw_core+0x2d0>

    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
 800e420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e422:	7c1b      	ldrb	r3, [r3, #16]
 800e424:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800e428:	b2db      	uxtb	r3, r3
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7ff ff64 	bl	800e2f8 <lv_img_cf_is_chroma_keyed>
 800e430:	4603      	mov	r3, r0
 800e432:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
 800e436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e438:	7c1b      	ldrb	r3, [r3, #16]
 800e43a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800e43e:	b2db      	uxtb	r3, r3
 800e440:	4618      	mov	r0, r3
 800e442:	f7ff ff75 	bl	800e330 <lv_img_cf_has_alpha>
 800e446:	4603      	mov	r3, r0
 800e448:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a

    if(cdsc->dec_dsc.error_msg != NULL) {
 800e44c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e44e:	69db      	ldr	r3, [r3, #28]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d007      	beq.n	800e464 <lv_img_draw_core+0x74>
        LV_LOG_WARN("Image draw error");

        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
 800e454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e456:	69db      	ldr	r3, [r3, #28]
 800e458:	461a      	mov	r2, r3
 800e45a:	68b9      	ldr	r1, [r7, #8]
 800e45c:	68f8      	ldr	r0, [r7, #12]
 800e45e:	f000 fdcd 	bl	800effc <show_error>
 800e462:	e129      	b.n	800e6b8 <lv_img_draw_core+0x2c8>
    }
    /* The decoder could open the image and gave the entire uncompressed image.
     * Just draw it!*/
    else if(cdsc->dec_dsc.img_data) {
 800e464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e466:	695b      	ldr	r3, [r3, #20]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d07d      	beq.n	800e568 <lv_img_draw_core+0x178>
        lv_area_t map_area_rot;
        lv_area_copy(&map_area_rot, coords);
 800e46c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e470:	68f9      	ldr	r1, [r7, #12]
 800e472:	4618      	mov	r0, r3
 800e474:	f7ff fd00 	bl	800de78 <lv_area_copy>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	885b      	ldrh	r3, [r3, #2]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d104      	bne.n	800e48a <lv_img_draw_core+0x9a>
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	891b      	ldrh	r3, [r3, #8]
 800e484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e488:	d048      	beq.n	800e51c <lv_img_draw_core+0x12c>
            int32_t w = lv_area_get_width(coords);
 800e48a:	68f8      	ldr	r0, [r7, #12]
 800e48c:	f7ff fd02 	bl	800de94 <lv_area_get_width>
 800e490:	4603      	mov	r3, r0
 800e492:	647b      	str	r3, [r7, #68]	; 0x44
            int32_t h = lv_area_get_height(coords);
 800e494:	68f8      	ldr	r0, [r7, #12]
 800e496:	f7ff fd14 	bl	800dec2 <lv_area_get_height>
 800e49a:	4603      	mov	r3, r0
 800e49c:	643b      	str	r3, [r7, #64]	; 0x40

            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 800e49e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4a0:	b219      	sxth	r1, r3
 800e4a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4a4:	b21c      	sxth	r4, r3
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	885b      	ldrh	r3, [r3, #2]
 800e4aa:	b21d      	sxth	r5, r3
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	891b      	ldrh	r3, [r3, #8]
 800e4b0:	683a      	ldr	r2, [r7, #0]
 800e4b2:	3204      	adds	r2, #4
 800e4b4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800e4b8:	9201      	str	r2, [sp, #4]
 800e4ba:	9300      	str	r3, [sp, #0]
 800e4bc:	462b      	mov	r3, r5
 800e4be:	4622      	mov	r2, r4
 800e4c0:	f009 f854 	bl	801756c <_lv_img_buf_get_transformed_area>

            map_area_rot.x1 += coords->x1;
 800e4c4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800e4c8:	b29a      	uxth	r2, r3
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4d0:	b29b      	uxth	r3, r3
 800e4d2:	4413      	add	r3, r2
 800e4d4:	b29b      	uxth	r3, r3
 800e4d6:	b21b      	sxth	r3, r3
 800e4d8:	86bb      	strh	r3, [r7, #52]	; 0x34
            map_area_rot.y1 += coords->y1;
 800e4da:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800e4de:	b29a      	uxth	r2, r3
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	4413      	add	r3, r2
 800e4ea:	b29b      	uxth	r3, r3
 800e4ec:	b21b      	sxth	r3, r3
 800e4ee:	86fb      	strh	r3, [r7, #54]	; 0x36
            map_area_rot.x2 += coords->x1;
 800e4f0:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800e4f4:	b29a      	uxth	r2, r3
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4fc:	b29b      	uxth	r3, r3
 800e4fe:	4413      	add	r3, r2
 800e500:	b29b      	uxth	r3, r3
 800e502:	b21b      	sxth	r3, r3
 800e504:	873b      	strh	r3, [r7, #56]	; 0x38
            map_area_rot.y2 += coords->y1;
 800e506:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800e50a:	b29a      	uxth	r2, r3
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e512:	b29b      	uxth	r3, r3
 800e514:	4413      	add	r3, r2
 800e516:	b29b      	uxth	r3, r3
 800e518:	b21b      	sxth	r3, r3
 800e51a:	877b      	strh	r3, [r7, #58]	; 0x3a
        }

        lv_area_t mask_com; /*Common area of mask and coords*/
        bool union_ok;
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
 800e51c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e520:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e524:	68b9      	ldr	r1, [r7, #8]
 800e526:	4618      	mov	r0, r3
 800e528:	f00c fcae 	bl	801ae88 <_lv_area_intersect>
 800e52c:	4603      	mov	r3, r0
 800e52e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        /*Out of mask. There is nothing to draw so the image is drawn successfully.*/
        if(union_ok == false) {
 800e532:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e536:	f083 0301 	eor.w	r3, r3, #1
 800e53a:	b2db      	uxtb	r3, r3
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d004      	beq.n	800e54a <lv_img_draw_core+0x15a>
            draw_cleanup(cdsc);
 800e540:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e542:	f000 fd8b 	bl	800f05c <draw_cleanup>
            return LV_RES_OK;
 800e546:	2301      	movs	r3, #1
 800e548:	e0ba      	b.n	800e6c0 <lv_img_draw_core+0x2d0>
        }

        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
 800e54a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e54c:	695a      	ldr	r2, [r3, #20]
 800e54e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800e552:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800e556:	9301      	str	r3, [sp, #4]
 800e558:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e55c:	9300      	str	r3, [sp, #0]
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	68f8      	ldr	r0, [r7, #12]
 800e562:	f000 f8b1 	bl	800e6c8 <lv_draw_map>
 800e566:	e0a7      	b.n	800e6b8 <lv_img_draw_core+0x2c8>
    }
    /* The whole uncompressed image is not available. Try to read it line-by-line*/
    else {
        lv_area_t mask_com; /*Common area of mask and coords*/
        bool union_ok;
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
 800e568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e56c:	68fa      	ldr	r2, [r7, #12]
 800e56e:	68b9      	ldr	r1, [r7, #8]
 800e570:	4618      	mov	r0, r3
 800e572:	f00c fc89 	bl	801ae88 <_lv_area_intersect>
 800e576:	4603      	mov	r3, r0
 800e578:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
        /*Out of mask. There is nothing to draw so the image is drawn successfully.*/
        if(union_ok == false) {
 800e57c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800e580:	f083 0301 	eor.w	r3, r3, #1
 800e584:	b2db      	uxtb	r3, r3
 800e586:	2b00      	cmp	r3, #0
 800e588:	d004      	beq.n	800e594 <lv_img_draw_core+0x1a4>
            draw_cleanup(cdsc);
 800e58a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e58c:	f000 fd66 	bl	800f05c <draw_cleanup>
            return LV_RES_OK;
 800e590:	2301      	movs	r3, #1
 800e592:	e095      	b.n	800e6c0 <lv_img_draw_core+0x2d0>
        }

        int32_t width = lv_area_get_width(&mask_com);
 800e594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e598:	4618      	mov	r0, r3
 800e59a:	f7ff fc7b 	bl	800de94 <lv_area_get_width>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	657b      	str	r3, [r7, #84]	; 0x54

        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
 800e5a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7ff fc74 	bl	800de94 <lv_area_get_width>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	009b      	lsls	r3, r3, #2
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f00e f9b1 	bl	801c918 <_lv_mem_buf_get>
 800e5b6:	6538      	str	r0, [r7, #80]	; 0x50
                                         LV_IMG_PX_SIZE_ALPHA_BYTE);  /*+1 because of the possible alpha byte*/

        lv_area_t line;
        lv_area_copy(&line, &mask_com);
 800e5b8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e5bc:	f107 031c 	add.w	r3, r7, #28
 800e5c0:	4611      	mov	r1, r2
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7ff fc58 	bl	800de78 <lv_area_copy>
        lv_area_set_height(&line, 1);
 800e5c8:	f107 031c 	add.w	r3, r7, #28
 800e5cc:	2101      	movs	r1, #1
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f00c fc21 	bl	801ae16 <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 800e5d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e5d8:	461a      	mov	r2, r3
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e5e0:	1ad3      	subs	r3, r2, r3
 800e5e2:	64fb      	str	r3, [r7, #76]	; 0x4c
        int32_t y = mask_com.y1 - coords->y1;
 800e5e4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e5f0:	1ad3      	subs	r3, r2, r3
 800e5f2:	667b      	str	r3, [r7, #100]	; 0x64
        int32_t row;
        lv_res_t read_res;
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800e5f4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e5f8:	663b      	str	r3, [r7, #96]	; 0x60
 800e5fa:	e054      	b.n	800e6a6 <lv_img_draw_core+0x2b6>
            lv_area_t mask_line;
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
 800e5fc:	f107 021c 	add.w	r2, r7, #28
 800e600:	f107 0314 	add.w	r3, r7, #20
 800e604:	68b9      	ldr	r1, [r7, #8]
 800e606:	4618      	mov	r0, r3
 800e608:	f00c fc3e 	bl	801ae88 <_lv_area_intersect>
 800e60c:	4603      	mov	r3, r0
 800e60e:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
            if(union_ok == false) continue;
 800e612:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800e616:	f083 0301 	eor.w	r3, r3, #1
 800e61a:	b2db      	uxtb	r3, r3
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d13e      	bne.n	800e69e <lv_img_draw_core+0x2ae>

            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800e620:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e624:	b219      	sxth	r1, r3
 800e626:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e628:	b21a      	sxth	r2, r3
 800e62a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e62c:	b21c      	sxth	r4, r3
 800e62e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e630:	9300      	str	r3, [sp, #0]
 800e632:	4623      	mov	r3, r4
 800e634:	f009 ff66 	bl	8018504 <lv_img_decoder_read_line>
 800e638:	4603      	mov	r3, r0
 800e63a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if(read_res != LV_RES_OK) {
 800e63e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800e642:	2b01      	cmp	r3, #1
 800e644:	d00b      	beq.n	800e65e <lv_img_draw_core+0x26e>
                lv_img_decoder_close(&cdsc->dec_dsc);
 800e646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e648:	4618      	mov	r0, r3
 800e64a:	f009 ff87 	bl	801855c <lv_img_decoder_close>
                LV_LOG_WARN("Image draw can't read the line");
                _lv_mem_buf_release(buf);
 800e64e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e650:	f00e fa40 	bl	801cad4 <_lv_mem_buf_release>
                draw_cleanup(cdsc);
 800e654:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e656:	f000 fd01 	bl	800f05c <draw_cleanup>
                return LV_RES_INV;
 800e65a:	2300      	movs	r3, #0
            return LV_RES_OK;
 800e65c:	e030      	b.n	800e6c0 <lv_img_draw_core+0x2d0>
            }

            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
 800e65e:	f107 0114 	add.w	r1, r7, #20
 800e662:	f107 001c 	add.w	r0, r7, #28
 800e666:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800e66a:	9301      	str	r3, [sp, #4]
 800e66c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e670:	9300      	str	r3, [sp, #0]
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e676:	f000 f827 	bl	800e6c8 <lv_draw_map>
            line.y1++;
 800e67a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e67e:	b29b      	uxth	r3, r3
 800e680:	3301      	adds	r3, #1
 800e682:	b29b      	uxth	r3, r3
 800e684:	b21b      	sxth	r3, r3
 800e686:	83fb      	strh	r3, [r7, #30]
            line.y2++;
 800e688:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e68c:	b29b      	uxth	r3, r3
 800e68e:	3301      	adds	r3, #1
 800e690:	b29b      	uxth	r3, r3
 800e692:	b21b      	sxth	r3, r3
 800e694:	847b      	strh	r3, [r7, #34]	; 0x22
            y++;
 800e696:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e698:	3301      	adds	r3, #1
 800e69a:	667b      	str	r3, [r7, #100]	; 0x64
 800e69c:	e000      	b.n	800e6a0 <lv_img_draw_core+0x2b0>
            if(union_ok == false) continue;
 800e69e:	bf00      	nop
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800e6a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	663b      	str	r3, [r7, #96]	; 0x60
 800e6a6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800e6aa:	461a      	mov	r2, r3
 800e6ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6ae:	4293      	cmp	r3, r2
 800e6b0:	dda4      	ble.n	800e5fc <lv_img_draw_core+0x20c>
        }
        _lv_mem_buf_release(buf);
 800e6b2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e6b4:	f00e fa0e 	bl	801cad4 <_lv_mem_buf_release>
    }

    draw_cleanup(cdsc);
 800e6b8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e6ba:	f000 fccf 	bl	800f05c <draw_cleanup>
    return LV_RES_OK;
 800e6be:	2301      	movs	r3, #1
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3768      	adds	r7, #104	; 0x68
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bdb0      	pop	{r4, r5, r7, pc}

0800e6c8 <lv_draw_map>:
 */
LV_ATTRIBUTE_FAST_MEM static void lv_draw_map(const lv_area_t * map_area, const lv_area_t * clip_area,
                                              const uint8_t * map_p,
                                              const lv_draw_img_dsc_t * draw_dsc,
                                              bool chroma_key, bool alpha_byte)
{
 800e6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6ca:	b0c3      	sub	sp, #268	; 0x10c
 800e6cc:	af04      	add	r7, sp, #16
 800e6ce:	60f8      	str	r0, [r7, #12]
 800e6d0:	60b9      	str	r1, [r7, #8]
 800e6d2:	607a      	str	r2, [r7, #4]
 800e6d4:	603b      	str	r3, [r7, #0]
    /* Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, clip_area);
 800e6d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e6da:	68b9      	ldr	r1, [r7, #8]
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f7ff fbcb 	bl	800de78 <lv_area_copy>

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 800e6e2:	f7fb fe21 	bl	800a328 <_lv_refr_get_disp_refreshing>
 800e6e6:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 800e6ea:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800e6ee:	f00b ff0b 	bl	801a508 <lv_disp_get_buf>
 800e6f2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    const lv_area_t * disp_area = &vdb->area;
 800e6f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e6fa:	3310      	adds	r3, #16
 800e6fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 800e700:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 800e704:	b29a      	uxth	r2, r3
 800e706:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e70a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e70e:	b29b      	uxth	r3, r3
 800e710:	1ad3      	subs	r3, r2, r3
 800e712:	b29b      	uxth	r3, r3
 800e714:	b21b      	sxth	r3, r3
 800e716:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
    draw_area.y1 -= disp_area->y1;
 800e71a:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800e71e:	b29a      	uxth	r2, r3
 800e720:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e724:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e728:	b29b      	uxth	r3, r3
 800e72a:	1ad3      	subs	r3, r2, r3
 800e72c:	b29b      	uxth	r3, r3
 800e72e:	b21b      	sxth	r3, r3
 800e730:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
    draw_area.x2 -= disp_area->x1;
 800e734:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 800e738:	b29a      	uxth	r2, r3
 800e73a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e73e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e742:	b29b      	uxth	r3, r3
 800e744:	1ad3      	subs	r3, r2, r3
 800e746:	b29b      	uxth	r3, r3
 800e748:	b21b      	sxth	r3, r3
 800e74a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
    draw_area.y2 -= disp_area->y1;
 800e74e:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 800e752:	b29a      	uxth	r2, r3
 800e754:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e758:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e75c:	b29b      	uxth	r3, r3
 800e75e:	1ad3      	subs	r3, r2, r3
 800e760:	b29b      	uxth	r3, r3
 800e762:	b21b      	sxth	r3, r3
 800e764:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800e768:	f003 fa86 	bl	8011c78 <lv_draw_mask_get_cnt>
 800e76c:	4603      	mov	r3, r0
 800e76e:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

    /*The simplest case just copy the pixels into the VDB*/
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
 800e772:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800e776:	2b00      	cmp	r3, #0
 800e778:	d12a      	bne.n	800e7d0 <lv_draw_map+0x108>
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	885b      	ldrh	r3, [r3, #2]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d126      	bne.n	800e7d0 <lv_draw_map+0x108>
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	891b      	ldrh	r3, [r3, #8]
 800e786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e78a:	d121      	bne.n	800e7d0 <lv_draw_map+0x108>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 800e78c:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800e790:	f083 0301 	eor.w	r3, r3, #1
 800e794:	b2db      	uxtb	r3, r3
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
 800e796:	2b00      	cmp	r3, #0
 800e798:	d01a      	beq.n	800e7d0 <lv_draw_map+0x108>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 800e79a:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800e79e:	f083 0301 	eor.w	r3, r3, #1
 800e7a2:	b2db      	uxtb	r3, r3
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d013      	beq.n	800e7d0 <lv_draw_map+0x108>
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	7a9b      	ldrb	r3, [r3, #10]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d10f      	bne.n	800e7d0 <lv_draw_map+0x108>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	781b      	ldrb	r3, [r3, #0]
 800e7b4:	683a      	ldr	r2, [r7, #0]
 800e7b6:	7c12      	ldrb	r2, [r2, #16]
 800e7b8:	9202      	str	r2, [sp, #8]
 800e7ba:	9301      	str	r3, [sp, #4]
 800e7bc:	2301      	movs	r3, #1
 800e7be:	9300      	str	r3, [sp, #0]
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	68f9      	ldr	r1, [r7, #12]
 800e7c6:	68b8      	ldr	r0, [r7, #8]
 800e7c8:	f7fe f85d 	bl	800c886 <_lv_blend_map>
 800e7cc:	f000 bc12 	b.w	800eff4 <lv_draw_map+0x92c>
    }
#endif
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        /*The pixel size in byte is different if an alpha byte is added too*/
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 800e7d0:	2304      	movs	r3, #4
 800e7d2:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca

        /*Go to the first displayed pixel of the map*/
        int32_t map_w = lv_area_get_width(map_area);
 800e7d6:	68f8      	ldr	r0, [r7, #12]
 800e7d8:	f7ff fb5c 	bl	800de94 <lv_area_get_width>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        const uint8_t * map_buf_tmp = map_p;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 800e7e8:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e7fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e7fe:	1acb      	subs	r3, r1, r3
 800e800:	1ad3      	subs	r3, r2, r3
 800e802:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e806:	fb02 f303 	mul.w	r3, r2, r3
 800e80a:	f897 20ca 	ldrb.w	r2, [r7, #202]	; 0xca
 800e80e:	fb02 f303 	mul.w	r3, r2, r3
 800e812:	461a      	mov	r2, r3
 800e814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e818:	4413      	add	r3, r2
 800e81a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 800e81e:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 800e822:	461a      	mov	r2, r3
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e82a:	4619      	mov	r1, r3
 800e82c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e830:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e834:	1acb      	subs	r3, r1, r3
 800e836:	1ad3      	subs	r3, r2, r3
 800e838:	f897 20ca 	ldrb.w	r2, [r7, #202]	; 0xca
 800e83c:	fb02 f303 	mul.w	r3, r2, r3
 800e840:	461a      	mov	r2, r3
 800e842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e846:	4413      	add	r3, r2
 800e848:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

        lv_color_t c;
        lv_color_t chroma_keyed_color = LV_COLOR_TRANSP;
 800e84c:	2300      	movs	r3, #0
 800e84e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 800e852:	23ff      	movs	r3, #255	; 0xff
 800e854:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 800e858:	2300      	movs	r3, #0
 800e85a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800e85e:	23ff      	movs	r3, #255	; 0xff
 800e860:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        uint32_t px_i = 0;
 800e864:	2300      	movs	r3, #0
 800e866:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

        const uint8_t * map_px;

        lv_area_t blend_area;
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 800e86a:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 800e86e:	b29a      	uxth	r2, r3
 800e870:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e874:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e878:	b29b      	uxth	r3, r3
 800e87a:	4413      	add	r3, r2
 800e87c:	b29b      	uxth	r3, r3
 800e87e:	b21b      	sxth	r3, r3
 800e880:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
 800e884:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800e888:	b29c      	uxth	r4, r3
 800e88a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e88e:	4618      	mov	r0, r3
 800e890:	f7ff fb00 	bl	800de94 <lv_area_get_width>
 800e894:	4603      	mov	r3, r0
 800e896:	b29b      	uxth	r3, r3
 800e898:	4423      	add	r3, r4
 800e89a:	b29b      	uxth	r3, r3
 800e89c:	3b01      	subs	r3, #1
 800e89e:	b29b      	uxth	r3, r3
 800e8a0:	b21b      	sxth	r3, r3
 800e8a2:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 800e8a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e8aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e8ae:	b29a      	uxth	r2, r3
 800e8b0:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800e8b4:	b29b      	uxth	r3, r3
 800e8b6:	4413      	add	r3, r2
 800e8b8:	b29b      	uxth	r3, r3
 800e8ba:	b21b      	sxth	r3, r3
 800e8bc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        blend_area.y2 = blend_area.y1;
 800e8c0:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800e8c4:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

        lv_coord_t draw_area_h = lv_area_get_height(&draw_area);
 800e8c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f7ff faf8 	bl	800dec2 <lv_area_get_height>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        lv_coord_t draw_area_w = lv_area_get_width(&draw_area);
 800e8d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f7ff fad9 	bl	800de94 <lv_area_get_width>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0

#if LV_USE_IMG_TRANSFORM
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	885b      	ldrh	r3, [r3, #2]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d104      	bne.n	800e8fa <lv_draw_map+0x232>
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	891b      	ldrh	r3, [r3, #8]
 800e8f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8f8:	d001      	beq.n	800e8fe <lv_draw_map+0x236>
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	e000      	b.n	800e900 <lv_draw_map+0x238>
 800e8fe:	2300      	movs	r3, #0
 800e900:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 800e904:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800e908:	f003 0301 	and.w	r3, r3, #1
 800e90c:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
#else
        bool transform = false;
#endif
        /*Simple ARGB image. Handle it as special case because it's very common*/
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
 800e910:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800e914:	2b00      	cmp	r3, #0
 800e916:	f040 8101 	bne.w	800eb1c <lv_draw_map+0x454>
 800e91a:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800e91e:	f083 0301 	eor.w	r3, r3, #1
 800e922:	b2db      	uxtb	r3, r3
 800e924:	2b00      	cmp	r3, #0
 800e926:	f000 80f9 	beq.w	800eb1c <lv_draw_map+0x454>
 800e92a:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800e92e:	f083 0301 	eor.w	r3, r3, #1
 800e932:	b2db      	uxtb	r3, r3
 800e934:	2b00      	cmp	r3, #0
 800e936:	f000 80f1 	beq.w	800eb1c <lv_draw_map+0x454>
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	7a9b      	ldrb	r3, [r3, #10]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	f040 80ec 	bne.w	800eb1c <lv_draw_map+0x454>
 800e944:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800e948:	2b00      	cmp	r3, #0
 800e94a:	f000 80e7 	beq.w	800eb1c <lv_draw_map+0x454>
                lv_gpu_stm32_dma2d_blend(disp_buf_first, disp_w, (const lv_color_t *)map_buf_tmp, draw_dsc->opa, map_w, draw_area_w,
                                         draw_area_h);
                return;
            }
#endif
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 800e94e:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800e952:	f00b fd19 	bl	801a388 <lv_disp_get_hor_res>
 800e956:	4603      	mov	r3, r0
 800e958:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
 800e95c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e960:	4618      	mov	r0, r3
 800e962:	f00c fa70 	bl	801ae46 <lv_area_get_size>
 800e966:	4602      	mov	r2, r0
 800e968:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d306      	bcc.n	800e97e <lv_draw_map+0x2b6>
 800e970:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e974:	4618      	mov	r0, r3
 800e976:	f00c fa66 	bl	801ae46 <lv_area_get_size>
 800e97a:	4603      	mov	r3, r0
 800e97c:	e001      	b.n	800e982 <lv_draw_map+0x2ba>
 800e97e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e982:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800e986:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e98a:	009b      	lsls	r3, r3, #2
 800e98c:	4618      	mov	r0, r3
 800e98e:	f00d ffc3 	bl	801c918 <_lv_mem_buf_get>
 800e992:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800e996:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800e99a:	f00d ffbd 	bl	801c918 <_lv_mem_buf_get>
 800e99e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac

            int32_t x;
            int32_t y;
            for(y = 0; y < draw_area_h; y++) {
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e9a8:	e089      	b.n	800eabe <lv_draw_map+0x3f6>
                map_px = map_buf_tmp;
 800e9aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e9ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e9b8:	e033      	b.n	800ea22 <lv_draw_map+0x35a>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800e9ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e9be:	78db      	ldrb	r3, [r3, #3]
 800e9c0:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
                    mask_buf[px_i] = px_opa;
 800e9c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e9c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e9cc:	4413      	add	r3, r2
 800e9ce:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800e9d2:	701a      	strb	r2, [r3, #0]
                    if(px_opa) {
 800e9d4:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d009      	beq.n	800e9f0 <lv_draw_map+0x328>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
                        map2[px_i].full =  map_px[0];
#elif LV_COLOR_DEPTH == 16
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
#elif LV_COLOR_DEPTH == 32
                        map2[px_i].full =  *((uint32_t *)map_px);
 800e9dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e9e0:	009b      	lsls	r3, r3, #2
 800e9e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e9e6:	4413      	add	r3, r2
 800e9e8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800e9ec:	6812      	ldr	r2, [r2, #0]
 800e9ee:	601a      	str	r2, [r3, #0]
#endif
                    }
#if LV_COLOR_DEPTH == 32
                    map2[px_i].ch.alpha = 0xFF;
 800e9f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e9fa:	4413      	add	r3, r2
 800e9fc:	22ff      	movs	r2, #255	; 0xff
 800e9fe:	70da      	strb	r2, [r3, #3]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800ea00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ea04:	3301      	adds	r3, #1
 800ea06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ea0a:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800ea0e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800ea12:	4413      	add	r3, r2
 800ea14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ea18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ea1c:	3301      	adds	r3, #1
 800ea1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ea22:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 800ea26:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	dbc5      	blt.n	800e9ba <lv_draw_map+0x2f2>
#endif
                }

                map_buf_tmp += map_w * px_size_byte;
 800ea2e:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800ea32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ea36:	fb02 f303 	mul.w	r3, r2, r3
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ea40:	4413      	add	r3, r2
 800ea42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 800ea46:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7ff fa22 	bl	800de94 <lv_area_get_width>
 800ea50:	4603      	mov	r3, r0
 800ea52:	461a      	mov	r2, r3
 800ea54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ea58:	4413      	add	r3, r2
 800ea5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d908      	bls.n	800ea74 <lv_draw_map+0x3ac>
                    blend_area.y2 ++;
 800ea62:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800ea66:	b29b      	uxth	r3, r3
 800ea68:	3301      	adds	r3, #1
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	b21b      	sxth	r3, r3
 800ea6e:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 800ea72:	e01f      	b.n	800eab4 <lv_draw_map+0x3ec>
                }
                else {
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	781b      	ldrb	r3, [r3, #0]
 800ea78:	683a      	ldr	r2, [r7, #0]
 800ea7a:	7c12      	ldrb	r2, [r2, #16]
 800ea7c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800ea80:	9202      	str	r2, [sp, #8]
 800ea82:	9301      	str	r3, [sp, #4]
 800ea84:	2302      	movs	r3, #2
 800ea86:	9300      	str	r3, [sp, #0]
 800ea88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ea8c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ea90:	68b8      	ldr	r0, [r7, #8]
 800ea92:	f7fd fef8 	bl	800c886 <_lv_blend_map>

                    blend_area.y1 = blend_area.y2 + 1;
 800ea96:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	b29b      	uxth	r3, r3
 800eaa0:	b21b      	sxth	r3, r3
 800eaa2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
                    blend_area.y2 = blend_area.y1;
 800eaa6:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800eaaa:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

                    px_i = 0;
 800eaae:	2300      	movs	r3, #0
 800eab0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
            for(y = 0; y < draw_area_h; y++) {
 800eab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eab8:	3301      	adds	r3, #1
 800eaba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800eabe:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 800eac2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800eac6:	429a      	cmp	r2, r3
 800eac8:	f6ff af6f 	blt.w	800e9aa <lv_draw_map+0x2e2>
                }
            }
            /*Flush the last part*/
            if(blend_area.y1 != blend_area.y2) {
 800eacc:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	; 0x6e
 800ead0:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800ead4:	429a      	cmp	r2, r3
 800ead6:	d018      	beq.n	800eb0a <lv_draw_map+0x442>
                blend_area.y2--;
 800ead8:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800eadc:	b29b      	uxth	r3, r3
 800eade:	3b01      	subs	r3, #1
 800eae0:	b29b      	uxth	r3, r3
 800eae2:	b21b      	sxth	r3, r3
 800eae4:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	683a      	ldr	r2, [r7, #0]
 800eaee:	7c12      	ldrb	r2, [r2, #16]
 800eaf0:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800eaf4:	9202      	str	r2, [sp, #8]
 800eaf6:	9301      	str	r3, [sp, #4]
 800eaf8:	2302      	movs	r3, #2
 800eafa:	9300      	str	r3, [sp, #0]
 800eafc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eb00:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800eb04:	68b8      	ldr	r0, [r7, #8]
 800eb06:	f7fd febe 	bl	800c886 <_lv_blend_map>
            }

            _lv_mem_buf_release(mask_buf);
 800eb0a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800eb0e:	f00d ffe1 	bl	801cad4 <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
 800eb12:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800eb16:	f00d ffdd 	bl	801cad4 <_lv_mem_buf_release>
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
 800eb1a:	e26b      	b.n	800eff4 <lv_draw_map+0x92c>
        }
        /*Most complicated case: transform or other mask or chroma keyed*/
        else {
            /*Build the image and a mask line-by-line*/
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 800eb1c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800eb20:	f00b fc32 	bl	801a388 <lv_disp_get_hor_res>
 800eb24:	4603      	mov	r3, r0
 800eb26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
 800eb2a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f00c f989 	bl	801ae46 <lv_area_get_size>
 800eb34:	4602      	mov	r2, r0
 800eb36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d306      	bcc.n	800eb4c <lv_draw_map+0x484>
 800eb3e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800eb42:	4618      	mov	r0, r3
 800eb44:	f00c f97f 	bl	801ae46 <lv_area_get_size>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	e001      	b.n	800eb50 <lv_draw_map+0x488>
 800eb4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800eb50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800eb54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800eb58:	009b      	lsls	r3, r3, #2
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f00d fedc 	bl	801c918 <_lv_mem_buf_get>
 800eb60:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800eb64:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800eb68:	f00d fed6 	bl	801c918 <_lv_mem_buf_get>
 800eb6c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

#if LV_USE_IMG_TRANSFORM
            lv_img_transform_dsc_t trans_dsc;
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
 800eb70:	f107 0310 	add.w	r3, r7, #16
 800eb74:	2154      	movs	r1, #84	; 0x54
 800eb76:	4618      	mov	r0, r3
 800eb78:	f00e fad7 	bl	801d12a <_lv_memset_00>
            if(transform) {
 800eb7c:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d043      	beq.n	800ec0c <lv_draw_map+0x544>
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
 800eb84:	2304      	movs	r3, #4
 800eb86:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 800eb8a:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d003      	beq.n	800eb9a <lv_draw_map+0x4d2>
 800eb92:	2305      	movs	r3, #5
 800eb94:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
 800eb98:	e006      	b.n	800eba8 <lv_draw_map+0x4e0>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 800eb9a:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d002      	beq.n	800eba8 <lv_draw_map+0x4e0>
 800eba2:	2306      	movs	r3, #6
 800eba4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3

                trans_dsc.cfg.angle = draw_dsc->angle;
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	885b      	ldrh	r3, [r3, #2]
 800ebac:	b21b      	sxth	r3, r3
 800ebae:	83bb      	strh	r3, [r7, #28]
                trans_dsc.cfg.zoom = draw_dsc->zoom;
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	891b      	ldrh	r3, [r3, #8]
 800ebb4:	83fb      	strh	r3, [r7, #30]
                trans_dsc.cfg.src = map_p;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	613b      	str	r3, [r7, #16]
                trans_dsc.cfg.src_w = map_w;
 800ebba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ebbe:	b21b      	sxth	r3, r3
 800ebc0:	82bb      	strh	r3, [r7, #20]
                trans_dsc.cfg.src_h = lv_area_get_height(map_area);;
 800ebc2:	68f8      	ldr	r0, [r7, #12]
 800ebc4:	f7ff f97d 	bl	800dec2 <lv_area_get_height>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	82fb      	strh	r3, [r7, #22]
                trans_dsc.cfg.cf = cf;
 800ebcc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ebd0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ebda:	833b      	strh	r3, [r7, #24]
                trans_dsc.cfg.pivot_y = draw_dsc->pivot.y;
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ebe2:	837b      	strh	r3, [r7, #26]
                trans_dsc.cfg.color = draw_dsc->recolor;
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	68db      	ldr	r3, [r3, #12]
 800ebe8:	623b      	str	r3, [r7, #32]
                trans_dsc.cfg.antialias = draw_dsc->antialias;
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	7c5b      	ldrb	r3, [r3, #17]
 800ebee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ebf2:	b2db      	uxtb	r3, r3
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	bf14      	ite	ne
 800ebf8:	2301      	movne	r3, #1
 800ebfa:	2300      	moveq	r3, #0
 800ebfc:	b2db      	uxtb	r3, r3
 800ebfe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

                _lv_img_buf_transform_init(&trans_dsc);
 800ec02:	f107 0310 	add.w	r3, r7, #16
 800ec06:	4618      	mov	r0, r3
 800ec08:	f008 fbae 	bl	8017368 <_lv_img_buf_transform_init>
            }
#endif
            uint16_t recolor_premult[3] = {0};
 800ec0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ec10:	2200      	movs	r2, #0
 800ec12:	601a      	str	r2, [r3, #0]
 800ec14:	809a      	strh	r2, [r3, #4]
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	7a9b      	ldrb	r3, [r3, #10]
 800ec1a:	43db      	mvns	r3, r3
 800ec1c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
            if(draw_dsc->recolor_opa != 0) {
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	7a9b      	ldrb	r3, [r3, #10]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d007      	beq.n	800ec38 <lv_draw_map+0x570>
                lv_color_premult(draw_dsc->recolor, draw_dsc->recolor_opa, recolor_premult);
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	7a99      	ldrb	r1, [r3, #10]
 800ec2c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	68d8      	ldr	r0, [r3, #12]
 800ec34:	f7ff f88c 	bl	800dd50 <lv_color_premult>
            }

            lv_draw_mask_res_t mask_res;
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800ec38:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d10c      	bne.n	800ec5a <lv_draw_map+0x592>
 800ec40:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d108      	bne.n	800ec5a <lv_draw_map+0x592>
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	885b      	ldrh	r3, [r3, #2]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d104      	bne.n	800ec5a <lv_draw_map+0x592>
                        draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	891b      	ldrh	r3, [r3, #8]
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800ec54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec58:	d001      	beq.n	800ec5e <lv_draw_map+0x596>
 800ec5a:	2302      	movs	r3, #2
 800ec5c:	e000      	b.n	800ec60 <lv_draw_map+0x598>
 800ec5e:	2301      	movs	r3, #1
 800ec60:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

            /*Prepare the `mask_buf`if there are other masks*/
            if(other_mask_cnt) {
 800ec64:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d005      	beq.n	800ec78 <lv_draw_map+0x5b0>
                _lv_memset_ff(mask_buf, mask_buf_size);
 800ec6c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800ec70:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800ec74:	f00e fad9 	bl	801d22a <_lv_memset_ff>
            }

            int32_t x;
            int32_t y;
#if LV_USE_IMG_TRANSFORM
            int32_t rot_y = disp_area->y1 + draw_area.y1 - map_area->y1;
 800ec78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ec7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ec80:	461a      	mov	r2, r3
 800ec82:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800ec86:	4413      	add	r3, r2
 800ec88:	68fa      	ldr	r2, [r7, #12]
 800ec8a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800ec8e:	1a9b      	subs	r3, r3, r2
 800ec90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
#endif
            for(y = 0; y < draw_area_h; y++) {
 800ec94:	2300      	movs	r3, #0
 800ec96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ec9a:	e17c      	b.n	800ef96 <lv_draw_map+0x8ce>
                map_px = map_buf_tmp;
 800ec9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eca0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                uint32_t px_i_start = px_i;
 800eca4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800eca8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

#if LV_USE_IMG_TRANSFORM
                int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
 800ecac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ecb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ecb4:	461a      	mov	r2, r3
 800ecb6:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 800ecba:	4413      	add	r3, r2
 800ecbc:	68fa      	ldr	r2, [r7, #12]
 800ecbe:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ecc2:	1a9b      	subs	r3, r3, r2
 800ecc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
#endif
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800ecc8:	2300      	movs	r3, #0
 800ecca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ecce:	e0a2      	b.n	800ee16 <lv_draw_map+0x74e>

#if LV_USE_IMG_TRANSFORM
                    if(transform) {
 800ecd0:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d033      	beq.n	800ed40 <lv_draw_map+0x678>

                        /*Transform*/
                        bool ret;
                        ret = _lv_img_buf_transform(&trans_dsc, rot_x + x, rot_y + y);
 800ecd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ecdc:	b29a      	uxth	r2, r3
 800ecde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ece2:	b29b      	uxth	r3, r3
 800ece4:	4413      	add	r3, r2
 800ece6:	b29b      	uxth	r3, r3
 800ece8:	b219      	sxth	r1, r3
 800ecea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ecee:	b29a      	uxth	r2, r3
 800ecf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ecf4:	b29b      	uxth	r3, r3
 800ecf6:	4413      	add	r3, r2
 800ecf8:	b29b      	uxth	r3, r3
 800ecfa:	b21a      	sxth	r2, r3
 800ecfc:	f107 0310 	add.w	r3, r7, #16
 800ed00:	4618      	mov	r0, r3
 800ed02:	f7ff f8f5 	bl	800def0 <_lv_img_buf_transform>
 800ed06:	4603      	mov	r3, r0
 800ed08:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                        if(ret == false) {
 800ed0c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800ed10:	f083 0301 	eor.w	r3, r3, #1
 800ed14:	b2db      	uxtb	r3, r3
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d007      	beq.n	800ed2a <lv_draw_map+0x662>
                            mask_buf[px_i] = LV_OPA_TRANSP;
 800ed1a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ed1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ed22:	4413      	add	r3, r2
 800ed24:	2200      	movs	r2, #0
 800ed26:	701a      	strb	r2, [r3, #0]
                            continue;
 800ed28:	e064      	b.n	800edf4 <lv_draw_map+0x72c>
                        }
                        else {
                            mask_buf[px_i] = trans_dsc.res.opa;
 800ed2a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ed2e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ed32:	4413      	add	r3, r2
 800ed34:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ed38:	701a      	strb	r2, [r3, #0]
                            c.full = trans_dsc.res.color.full;
 800ed3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed3c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ed3e:	e043      	b.n	800edc8 <lv_draw_map+0x700>
                    }
                    /*No transform*/
                    else
#endif
                    {
                        if(alpha_byte) {
 800ed40:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d019      	beq.n	800ed7c <lv_draw_map+0x6b4>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800ed48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ed4c:	78db      	ldrb	r3, [r3, #3]
 800ed4e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
                            mask_buf[px_i] = px_opa;
 800ed52:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ed56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ed5a:	4413      	add	r3, r2
 800ed5c:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800ed60:	701a      	strb	r2, [r3, #0]
                            if(px_opa == 0) {
 800ed62:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d10f      	bne.n	800ed8a <lv_draw_map+0x6c2>
#if LV_COLOR_DEPTH == 32
                                map2[px_i].full = 0;
 800ed6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ed6e:	009b      	lsls	r3, r3, #2
 800ed70:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ed74:	4413      	add	r3, r2
 800ed76:	2200      	movs	r2, #0
 800ed78:	601a      	str	r2, [r3, #0]
#endif
                                continue;
 800ed7a:	e03b      	b.n	800edf4 <lv_draw_map+0x72c>
                            }
                        }
                        else {
                            mask_buf[px_i] = 0xFF;
 800ed7c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ed80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ed84:	4413      	add	r3, r2
 800ed86:	22ff      	movs	r2, #255	; 0xff
 800ed88:	701a      	strb	r2, [r3, #0]
#elif LV_COLOR_DEPTH == 8
                        c.full =  map_px[0];
#elif LV_COLOR_DEPTH == 16
                        c.full =  map_px[0] + (map_px[1] << 8);
#elif LV_COLOR_DEPTH == 32
                        c.full =  *((uint32_t *)map_px);
 800ed8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	67bb      	str	r3, [r7, #120]	; 0x78
                        c.ch.alpha = 0xFF;
 800ed92:	23ff      	movs	r3, #255	; 0xff
 800ed94:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
#endif
                        if(chroma_key) {
 800ed98:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d013      	beq.n	800edc8 <lv_draw_map+0x700>
                            if(c.full == chroma_keyed_color.full) {
 800eda0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800eda2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d10f      	bne.n	800edc8 <lv_draw_map+0x700>
                                mask_buf[px_i] = LV_OPA_TRANSP;
 800eda8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800edac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800edb0:	4413      	add	r3, r2
 800edb2:	2200      	movs	r2, #0
 800edb4:	701a      	strb	r2, [r3, #0]
#if LV_COLOR_DEPTH == 32
                                map2[px_i].full = 0;
 800edb6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800edba:	009b      	lsls	r3, r3, #2
 800edbc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800edc0:	4413      	add	r3, r2
 800edc2:	2200      	movs	r2, #0
 800edc4:	601a      	str	r2, [r3, #0]
#endif
                                continue;
 800edc6:	e015      	b.n	800edf4 <lv_draw_map+0x72c>
                            }
                        }
                    }

                    if(draw_dsc->recolor_opa != 0) {
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	7a9b      	ldrb	r3, [r3, #10]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d009      	beq.n	800ede4 <lv_draw_map+0x71c>
                        c = lv_color_mix_premult(recolor_premult, c, recolor_opa_inv);
 800edd0:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 800edd4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800edd8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800edda:	4618      	mov	r0, r3
 800eddc:	f7fe ffe2 	bl	800dda4 <lv_color_mix_premult>
 800ede0:	4603      	mov	r3, r0
 800ede2:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    map2[px_i].full = c.full;
 800ede4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ede8:	009b      	lsls	r3, r3, #2
 800edea:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800edee:	4413      	add	r3, r2
 800edf0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800edf2:	601a      	str	r2, [r3, #0]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800edf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800edf8:	3301      	adds	r3, #1
 800edfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800edfe:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800ee02:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800ee06:	4413      	add	r3, r2
 800ee08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ee0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ee10:	3301      	adds	r3, #1
 800ee12:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ee16:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 800ee1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	f6ff af56 	blt.w	800ecd0 <lv_draw_map+0x608>
                }

                /*Apply the masks if any*/
                if(other_mask_cnt) {
 800ee24:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d04b      	beq.n	800eec4 <lv_draw_map+0x7fc>
                    lv_draw_mask_res_t mask_res_sub;
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
 800ee2c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ee30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee34:	18d4      	adds	r4, r2, r3
 800ee36:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 800ee3a:	b29a      	uxth	r2, r3
 800ee3c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ee40:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	4413      	add	r3, r2
 800ee48:	b29b      	uxth	r3, r3
 800ee4a:	b21d      	sxth	r5, r3
 800ee4c:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800ee50:	b29a      	uxth	r2, r3
 800ee52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ee56:	b29b      	uxth	r3, r3
 800ee58:	4413      	add	r3, r2
 800ee5a:	b29a      	uxth	r2, r3
 800ee5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ee60:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ee64:	b29b      	uxth	r3, r3
 800ee66:	4413      	add	r3, r2
 800ee68:	b29b      	uxth	r3, r3
 800ee6a:	b21e      	sxth	r6, r3
 800ee6c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ee70:	4618      	mov	r0, r3
 800ee72:	f7ff f80f 	bl	800de94 <lv_area_get_width>
 800ee76:	4603      	mov	r3, r0
 800ee78:	4632      	mov	r2, r6
 800ee7a:	4629      	mov	r1, r5
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	f002 fe5f 	bl	8011b40 <lv_draw_mask_apply>
 800ee82:	4603      	mov	r3, r0
 800ee84:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
                                                      lv_area_get_width(&draw_area));
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
 800ee88:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d112      	bne.n	800eeb6 <lv_draw_map+0x7ee>
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
 800ee90:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ee94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee98:	18d4      	adds	r4, r2, r3
 800ee9a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f7fe fff8 	bl	800de94 <lv_area_get_width>
 800eea4:	4603      	mov	r3, r0
 800eea6:	4619      	mov	r1, r3
 800eea8:	4620      	mov	r0, r4
 800eeaa:	f00e f93e 	bl	801d12a <_lv_memset_00>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
 800eeae:	2302      	movs	r3, #2
 800eeb0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800eeb4:	e006      	b.n	800eec4 <lv_draw_map+0x7fc>
                    }
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
 800eeb6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800eeba:	2b02      	cmp	r3, #2
 800eebc:	d102      	bne.n	800eec4 <lv_draw_map+0x7fc>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
 800eebe:	2302      	movs	r3, #2
 800eec0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
                    }
                }

                map_buf_tmp += map_w * px_size_byte;
 800eec4:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800eec8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800eecc:	fb02 f303 	mul.w	r3, r2, r3
 800eed0:	461a      	mov	r2, r3
 800eed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eed6:	4413      	add	r3, r2
 800eed8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 800eedc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7fe ffd7 	bl	800de94 <lv_area_get_width>
 800eee6:	4603      	mov	r3, r0
 800eee8:	461a      	mov	r2, r3
 800eeea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800eeee:	4413      	add	r3, r2
 800eef0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d908      	bls.n	800ef0a <lv_draw_map+0x842>
                    blend_area.y2 ++;
 800eef8:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	3301      	adds	r3, #1
 800ef00:	b29b      	uxth	r3, r3
 800ef02:	b21b      	sxth	r3, r3
 800ef04:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 800ef08:	e040      	b.n	800ef8c <lv_draw_map+0x8c4>
                }
                else {

                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	683a      	ldr	r2, [r7, #0]
 800ef10:	7c12      	ldrb	r2, [r2, #16]
 800ef12:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800ef16:	9202      	str	r2, [sp, #8]
 800ef18:	9301      	str	r3, [sp, #4]
 800ef1a:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 800ef1e:	9300      	str	r3, [sp, #0]
 800ef20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ef24:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ef28:	68b8      	ldr	r0, [r7, #8]
 800ef2a:	f7fd fcac 	bl	800c886 <_lv_blend_map>

                    blend_area.y1 = blend_area.y2 + 1;
 800ef2e:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800ef32:	b29b      	uxth	r3, r3
 800ef34:	3301      	adds	r3, #1
 800ef36:	b29b      	uxth	r3, r3
 800ef38:	b21b      	sxth	r3, r3
 800ef3a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
                    blend_area.y2 = blend_area.y1;
 800ef3e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800ef42:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

                    px_i = 0;
 800ef46:	2300      	movs	r3, #0
 800ef48:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800ef4c:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d10c      	bne.n	800ef6e <lv_draw_map+0x8a6>
 800ef54:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d108      	bne.n	800ef6e <lv_draw_map+0x8a6>
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	885b      	ldrh	r3, [r3, #2]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d104      	bne.n	800ef6e <lv_draw_map+0x8a6>
                                draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	891b      	ldrh	r3, [r3, #8]
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800ef68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef6c:	d001      	beq.n	800ef72 <lv_draw_map+0x8aa>
 800ef6e:	2302      	movs	r3, #2
 800ef70:	e000      	b.n	800ef74 <lv_draw_map+0x8ac>
 800ef72:	2301      	movs	r3, #1
 800ef74:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

                    /*Prepare the `mask_buf`if there are other masks*/
                    if(other_mask_cnt) {
 800ef78:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d005      	beq.n	800ef8c <lv_draw_map+0x8c4>
                        _lv_memset_ff(mask_buf, mask_buf_size);
 800ef80:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800ef84:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800ef88:	f00e f94f 	bl	801d22a <_lv_memset_ff>
            for(y = 0; y < draw_area_h; y++) {
 800ef8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ef90:	3301      	adds	r3, #1
 800ef92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ef96:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 800ef9a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	f6ff ae7c 	blt.w	800ec9c <lv_draw_map+0x5d4>
                    }
                }
            }

            /*Flush the last part*/
            if(blend_area.y1 != blend_area.y2) {
 800efa4:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	; 0x6e
 800efa8:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800efac:	429a      	cmp	r2, r3
 800efae:	d019      	beq.n	800efe4 <lv_draw_map+0x91c>
                blend_area.y2--;
 800efb0:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800efb4:	b29b      	uxth	r3, r3
 800efb6:	3b01      	subs	r3, #1
 800efb8:	b29b      	uxth	r3, r3
 800efba:	b21b      	sxth	r3, r3
 800efbc:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	781b      	ldrb	r3, [r3, #0]
 800efc4:	683a      	ldr	r2, [r7, #0]
 800efc6:	7c12      	ldrb	r2, [r2, #16]
 800efc8:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800efcc:	9202      	str	r2, [sp, #8]
 800efce:	9301      	str	r3, [sp, #4]
 800efd0:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 800efd4:	9300      	str	r3, [sp, #0]
 800efd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800efda:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800efde:	68b8      	ldr	r0, [r7, #8]
 800efe0:	f7fd fc51 	bl	800c886 <_lv_blend_map>
            }

            _lv_mem_buf_release(mask_buf);
 800efe4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800efe8:	f00d fd74 	bl	801cad4 <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
 800efec:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800eff0:	f00d fd70 	bl	801cad4 <_lv_mem_buf_release>
        }
    }
}
 800eff4:	bf00      	nop
 800eff6:	37fc      	adds	r7, #252	; 0xfc
 800eff8:	46bd      	mov	sp, r7
 800effa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800effc <show_error>:

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b0aa      	sub	sp, #168	; 0xa8
 800f000:	af02      	add	r7, sp, #8
 800f002:	60f8      	str	r0, [r7, #12]
 800f004:	60b9      	str	r1, [r7, #8]
 800f006:	607a      	str	r2, [r7, #4]
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
 800f008:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f00c:	4618      	mov	r0, r3
 800f00e:	f004 f9a3 	bl	8013358 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = LV_COLOR_WHITE;
 800f012:	23ff      	movs	r3, #255	; 0xff
 800f014:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800f018:	23ff      	movs	r3, #255	; 0xff
 800f01a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800f01e:	23ff      	movs	r3, #255	; 0xff
 800f020:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800f024:	23ff      	movs	r3, #255	; 0xff
 800f026:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    lv_draw_rect(coords, clip_area, &rect_dsc);
 800f02a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f02e:	461a      	mov	r2, r3
 800f030:	68b9      	ldr	r1, [r7, #8]
 800f032:	68f8      	ldr	r0, [r7, #12]
 800f034:	f004 fa14 	bl	8013460 <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 800f038:	f107 0310 	add.w	r3, r7, #16
 800f03c:	4618      	mov	r0, r3
 800f03e:	f000 f879 	bl	800f134 <lv_draw_label_dsc_init>
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
 800f042:	f107 0210 	add.w	r2, r7, #16
 800f046:	2300      	movs	r3, #0
 800f048:	9300      	str	r3, [sp, #0]
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	68b9      	ldr	r1, [r7, #8]
 800f04e:	68f8      	ldr	r0, [r7, #12]
 800f050:	f000 f8b4 	bl	800f1bc <lv_draw_label>
}
 800f054:	bf00      	nop
 800f056:	37a0      	adds	r7, #160	; 0xa0
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <draw_cleanup>:

static void draw_cleanup(lv_img_cache_entry_t * cache)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b083      	sub	sp, #12
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
#if LV_IMG_CACHE_DEF_SIZE == 0
    lv_img_decoder_close(&cache->dec_dsc);
#else
    LV_UNUSED(cache);
#endif
}
 800f064:	bf00      	nop
 800f066:	370c      	adds	r7, #12
 800f068:	46bd      	mov	sp, r7
 800f06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06e:	4770      	bx	lr

0800f070 <_lv_memcpy_small>:
{
 800f070:	b480      	push	{r7}
 800f072:	b087      	sub	sp, #28
 800f074:	af00      	add	r7, sp, #0
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	60b9      	str	r1, [r7, #8]
 800f07a:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	613b      	str	r3, [r7, #16]
    while(len) {
 800f084:	e00c      	b.n	800f0a0 <_lv_memcpy_small+0x30>
        *d8 = *s8;
 800f086:	693b      	ldr	r3, [r7, #16]
 800f088:	781a      	ldrb	r2, [r3, #0]
 800f08a:	697b      	ldr	r3, [r7, #20]
 800f08c:	701a      	strb	r2, [r3, #0]
        d8++;
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	3301      	adds	r3, #1
 800f092:	617b      	str	r3, [r7, #20]
        s8++;
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	3301      	adds	r3, #1
 800f098:	613b      	str	r3, [r7, #16]
        len--;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	3b01      	subs	r3, #1
 800f09e:	607b      	str	r3, [r7, #4]
    while(len) {
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d1ef      	bne.n	800f086 <_lv_memcpy_small+0x16>
    return dst;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	371c      	adds	r7, #28
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b2:	4770      	bx	lr

0800f0b4 <lv_area_get_width>:
{
 800f0b4:	b480      	push	{r7}
 800f0b6:	b083      	sub	sp, #12
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f0c2:	b29a      	uxth	r2, r3
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f0ca:	b29b      	uxth	r3, r3
 800f0cc:	1ad3      	subs	r3, r2, r3
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	3301      	adds	r3, #1
 800f0d2:	b29b      	uxth	r3, r3
 800f0d4:	b21b      	sxth	r3, r3
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	370c      	adds	r7, #12
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e0:	4770      	bx	lr

0800f0e2 <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
 800f0e2:	b480      	push	{r7}
 800f0e4:	b083      	sub	sp, #12
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	370c      	adds	r7, #12
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fa:	4770      	bx	lr

0800f0fc <lv_color_make>:
#elif LV_COLOR_DEPTH == 32
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 800f0fc:	b490      	push	{r4, r7}
 800f0fe:	b082      	sub	sp, #8
 800f100:	af00      	add	r7, sp, #0
 800f102:	4604      	mov	r4, r0
 800f104:	4608      	mov	r0, r1
 800f106:	4611      	mov	r1, r2
 800f108:	4622      	mov	r2, r4
 800f10a:	71fa      	strb	r2, [r7, #7]
 800f10c:	4602      	mov	r2, r0
 800f10e:	71ba      	strb	r2, [r7, #6]
 800f110:	460a      	mov	r2, r1
 800f112:	717a      	strb	r2, [r7, #5]
    return LV_COLOR_MAKE(r, g, b);
 800f114:	797a      	ldrb	r2, [r7, #5]
 800f116:	f362 0307 	bfi	r3, r2, #0, #8
 800f11a:	79ba      	ldrb	r2, [r7, #6]
 800f11c:	f362 230f 	bfi	r3, r2, #8, #8
 800f120:	79fa      	ldrb	r2, [r7, #7]
 800f122:	f362 4317 	bfi	r3, r2, #16, #8
 800f126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3708      	adds	r7, #8
 800f12e:	46bd      	mov	sp, r7
 800f130:	bc90      	pop	{r4, r7}
 800f132:	4770      	bx	lr

0800f134 <lv_draw_label_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_label_dsc_init(lv_draw_label_dsc_t * dsc)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 800f13c:	2128      	movs	r1, #40	; 0x28
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f00d fff3 	bl	801d12a <_lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	22ff      	movs	r2, #255	; 0xff
 800f148:	741a      	strb	r2, [r3, #16]
    dsc->color = LV_COLOR_BLACK;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2200      	movs	r2, #0
 800f14e:	701a      	strb	r2, [r3, #0]
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2200      	movs	r2, #0
 800f154:	705a      	strb	r2, [r3, #1]
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	2200      	movs	r2, #0
 800f15a:	709a      	strb	r2, [r3, #2]
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	22ff      	movs	r2, #255	; 0xff
 800f160:	70da      	strb	r2, [r3, #3]
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	4a14      	ldr	r2, [pc, #80]	; (800f1b8 <lv_draw_label_dsc_init+0x84>)
 800f166:	60da      	str	r2, [r3, #12]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f16e:	619a      	str	r2, [r3, #24]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f176:	61da      	str	r2, [r3, #28]
    dsc->sel_color = LV_COLOR_BLACK;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2200      	movs	r2, #0
 800f17c:	711a      	strb	r2, [r3, #4]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2200      	movs	r2, #0
 800f182:	715a      	strb	r2, [r3, #5]
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2200      	movs	r2, #0
 800f188:	719a      	strb	r2, [r3, #6]
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	22ff      	movs	r2, #255	; 0xff
 800f18e:	71da      	strb	r2, [r3, #7]
    dsc->sel_bg_color = LV_COLOR_BLUE;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	22ff      	movs	r2, #255	; 0xff
 800f194:	721a      	strb	r2, [r3, #8]
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2200      	movs	r2, #0
 800f19a:	725a      	strb	r2, [r3, #9]
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	729a      	strb	r2, [r3, #10]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	22ff      	movs	r2, #255	; 0xff
 800f1a6:	72da      	strb	r2, [r3, #11]
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800f1b0:	bf00      	nop
 800f1b2:	3708      	adds	r7, #8
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}
 800f1b8:	200013e8 	.word	0x200013e8

0800f1bc <lv_draw_label>:
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_label(const lv_area_t * coords, const lv_area_t * mask,
                                         const lv_draw_label_dsc_t * dsc,
                                         const char * txt,
                                         lv_draw_label_hint_t * hint)
{
 800f1bc:	b5b0      	push	{r4, r5, r7, lr}
 800f1be:	b0ce      	sub	sp, #312	; 0x138
 800f1c0:	af04      	add	r7, sp, #16
 800f1c2:	f107 040c 	add.w	r4, r7, #12
 800f1c6:	6020      	str	r0, [r4, #0]
 800f1c8:	f107 0008 	add.w	r0, r7, #8
 800f1cc:	6001      	str	r1, [r0, #0]
 800f1ce:	1d39      	adds	r1, r7, #4
 800f1d0:	600a      	str	r2, [r1, #0]
 800f1d2:	463a      	mov	r2, r7
 800f1d4:	6013      	str	r3, [r2, #0]

    if(dsc->opa <= LV_OPA_MIN) return;
 800f1d6:	1d3b      	adds	r3, r7, #4
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	7c1b      	ldrb	r3, [r3, #16]
 800f1dc:	2b02      	cmp	r3, #2
 800f1de:	f240 8507 	bls.w	800fbf0 <lv_draw_label+0xa34>
    const lv_font_t * font = dsc->font;
 800f1e2:	1d3b      	adds	r3, r7, #4
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	68db      	ldr	r3, [r3, #12]
 800f1e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    int32_t w;

    /*No need to waste processor time if string is empty*/
    if(txt[0] == '\0')  return;
 800f1ec:	463b      	mov	r3, r7
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	781b      	ldrb	r3, [r3, #0]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	f000 84fe 	beq.w	800fbf4 <lv_draw_label+0xa38>

    lv_area_t clipped_area;
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
 800f1f8:	f107 0208 	add.w	r2, r7, #8
 800f1fc:	f107 030c 	add.w	r3, r7, #12
 800f200:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 800f204:	6812      	ldr	r2, [r2, #0]
 800f206:	6819      	ldr	r1, [r3, #0]
 800f208:	f00b fe3e 	bl	801ae88 <_lv_area_intersect>
 800f20c:	4603      	mov	r3, r0
 800f20e:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
    if(!clip_ok) return;
 800f212:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800f216:	f083 0301 	eor.w	r3, r3, #1
 800f21a:	b2db      	uxtb	r3, r3
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	f040 84eb 	bne.w	800fbf8 <lv_draw_label+0xa3c>

    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
 800f222:	1d3b      	adds	r3, r7, #4
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f22a:	f003 0302 	and.w	r3, r3, #2
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d108      	bne.n	800f244 <lv_draw_label+0x88>
        /*Normally use the label's width as width*/
        w = lv_area_get_width(coords);
 800f232:	f107 030c 	add.w	r3, r7, #12
 800f236:	6818      	ldr	r0, [r3, #0]
 800f238:	f7ff ff3c 	bl	800f0b4 <lv_area_get_width>
 800f23c:	4603      	mov	r3, r0
 800f23e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800f242:	e01f      	b.n	800f284 <lv_draw_label+0xc8>
    }
    else {
        /*If EXAPND is enabled then not limit the text's width to the object's width*/
        lv_point_t p;
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 800f244:	1d3b      	adds	r3, r7, #4
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	68dc      	ldr	r4, [r3, #12]
 800f24a:	1d3b      	adds	r3, r7, #4
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f9b3 5014 	ldrsh.w	r5, [r3, #20]
 800f252:	1d3b      	adds	r3, r7, #4
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800f25a:	1d3a      	adds	r2, r7, #4
 800f25c:	6812      	ldr	r2, [r2, #0]
 800f25e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800f262:	4639      	mov	r1, r7
 800f264:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800f268:	9202      	str	r2, [sp, #8]
 800f26a:	f647 4218 	movw	r2, #31768	; 0x7c18
 800f26e:	9201      	str	r2, [sp, #4]
 800f270:	9300      	str	r3, [sp, #0]
 800f272:	462b      	mov	r3, r5
 800f274:	4622      	mov	r2, r4
 800f276:	6809      	ldr	r1, [r1, #0]
 800f278:	f00e fbd8 	bl	801da2c <_lv_txt_get_size>
                         dsc->flag);
        w = p.x;
 800f27c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800f280:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    }

    int32_t line_height_font = lv_font_get_line_height(font);
 800f284:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800f288:	f7ff ff2b 	bl	800f0e2 <lv_font_get_line_height>
 800f28c:	4603      	mov	r3, r0
 800f28e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    int32_t line_height = line_height_font + dsc->line_space;
 800f292:	1d3b      	adds	r3, r7, #4
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800f29a:	461a      	mov	r2, r3
 800f29c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f2a0:	4413      	add	r3, r2
 800f2a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /*Init variables for the first line*/
    int32_t line_width = 0;
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    lv_point_t pos;
    pos.x = coords->x1;
 800f2ac:	f107 030c 	add.w	r3, r7, #12
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f2b6:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
    pos.y = coords->y1;
 800f2ba:	f107 030c 	add.w	r3, r7, #12
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f2c4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

    int32_t x_ofs = 0;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    int32_t y_ofs = 0;
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    x_ofs = dsc->ofs_x;
 800f2d4:	1d3b      	adds	r3, r7, #4
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800f2dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    y_ofs = dsc->ofs_y;
 800f2e0:	1d3b      	adds	r3, r7, #4
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f2e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    pos.y += y_ofs;
 800f2ec:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f2f0:	b29a      	uxth	r2, r3
 800f2f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	4413      	add	r3, r2
 800f2fa:	b29b      	uxth	r3, r3
 800f2fc:	b21b      	sxth	r3, r3
 800f2fe:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

    uint32_t line_start     = 0;
 800f302:	2300      	movs	r3, #0
 800f304:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    int32_t last_line_start = -1;
 800f308:	f04f 33ff 	mov.w	r3, #4294967295
 800f30c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

    /*Check the hint to use the cached info*/
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800f310:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f314:	2b00      	cmp	r3, #0
 800f316:	d028      	beq.n	800f36a <lv_draw_label+0x1ae>
 800f318:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d124      	bne.n	800f36a <lv_draw_label+0x1ae>
 800f320:	f107 030c 	add.w	r3, r7, #12
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	da1d      	bge.n	800f36a <lv_draw_label+0x1ae>
        /*If the label changed too much recalculate the hint.*/
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 800f32e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f332:	689b      	ldr	r3, [r3, #8]
 800f334:	f107 020c 	add.w	r2, r7, #12
 800f338:	6812      	ldr	r2, [r2, #0]
 800f33a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800f33e:	1a9b      	subs	r3, r3, r2
 800f340:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800f344:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800f348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f34c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f350:	005b      	lsls	r3, r3, #1
 800f352:	429a      	cmp	r2, r3
 800f354:	dd04      	ble.n	800f360 <lv_draw_label+0x1a4>
            hint->line_start = -1;
 800f356:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f35a:	f04f 32ff 	mov.w	r2, #4294967295
 800f35e:	601a      	str	r2, [r3, #0]
        }
        last_line_start = hint->line_start;
 800f360:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    }

    /*Use the hint if it's valid*/
    if(hint && last_line_start >= 0) {
 800f36a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d013      	beq.n	800f39a <lv_draw_label+0x1de>
 800f372:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f376:	2b00      	cmp	r3, #0
 800f378:	db0f      	blt.n	800f39a <lv_draw_label+0x1de>
        line_start = last_line_start;
 800f37a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f37e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        pos.y += hint->y;
 800f382:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f386:	b29a      	uxth	r2, r3
 800f388:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f38c:	685b      	ldr	r3, [r3, #4]
 800f38e:	b29b      	uxth	r3, r3
 800f390:	4413      	add	r3, r2
 800f392:	b29b      	uxth	r3, r3
 800f394:	b21b      	sxth	r3, r3
 800f396:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
    }

    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800f39a:	463b      	mov	r3, r7
 800f39c:	681a      	ldr	r2, [r3, #0]
 800f39e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f3a2:	18d0      	adds	r0, r2, r3
 800f3a4:	1d3b      	adds	r3, r7, #4
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800f3ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f3b0:	b219      	sxth	r1, r3
 800f3b2:	1d3b      	adds	r3, r7, #4
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f3ba:	9300      	str	r3, [sp, #0]
 800f3bc:	460b      	mov	r3, r1
 800f3be:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800f3c2:	f00e fccd 	bl	801dd60 <_lv_txt_get_next_line>
 800f3c6:	4602      	mov	r2, r0
 800f3c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f3cc:	4413      	add	r3, r2
 800f3ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    /*Go the first visible line*/
    while(pos.y + line_height_font < mask->y1) {
 800f3d2:	e05b      	b.n	800f48c <lv_draw_label+0x2d0>
        /*Go to next line*/
        line_start = line_end;
 800f3d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f3d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800f3dc:	463b      	mov	r3, r7
 800f3de:	681a      	ldr	r2, [r3, #0]
 800f3e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f3e4:	18d0      	adds	r0, r2, r3
 800f3e6:	1d3b      	adds	r3, r7, #4
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800f3ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f3f2:	b219      	sxth	r1, r3
 800f3f4:	1d3b      	adds	r3, r7, #4
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f3fc:	9300      	str	r3, [sp, #0]
 800f3fe:	460b      	mov	r3, r1
 800f400:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800f404:	f00e fcac 	bl	801dd60 <_lv_txt_get_next_line>
 800f408:	4602      	mov	r2, r0
 800f40a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f40e:	4413      	add	r3, r2
 800f410:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
        pos.y += line_height;
 800f414:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f418:	b29a      	uxth	r2, r3
 800f41a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f41e:	b29b      	uxth	r3, r3
 800f420:	4413      	add	r3, r2
 800f422:	b29b      	uxth	r3, r3
 800f424:	b21b      	sxth	r3, r3
 800f426:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

        /*Save at the threshold coordinate*/
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800f42a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d023      	beq.n	800f47a <lv_draw_label+0x2be>
 800f432:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f436:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800f43a:	db1e      	blt.n	800f47a <lv_draw_label+0x2be>
 800f43c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	2b00      	cmp	r3, #0
 800f444:	da19      	bge.n	800f47a <lv_draw_label+0x2be>
            hint->line_start = line_start;
 800f446:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800f44a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f44e:	601a      	str	r2, [r3, #0]
            hint->y          = pos.y - coords->y1;
 800f450:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f454:	461a      	mov	r2, r3
 800f456:	f107 030c 	add.w	r3, r7, #12
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f460:	1ad2      	subs	r2, r2, r3
 800f462:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f466:	605a      	str	r2, [r3, #4]
            hint->coord_y    = coords->y1;
 800f468:	f107 030c 	add.w	r3, r7, #12
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f472:	461a      	mov	r2, r3
 800f474:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f478:	609a      	str	r2, [r3, #8]
        }

        if(txt[line_start] == '\0') return;
 800f47a:	463b      	mov	r3, r7
 800f47c:	681a      	ldr	r2, [r3, #0]
 800f47e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f482:	4413      	add	r3, r2
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	2b00      	cmp	r3, #0
 800f488:	f000 83b8 	beq.w	800fbfc <lv_draw_label+0xa40>
    while(pos.y + line_height_font < mask->y1) {
 800f48c:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f490:	461a      	mov	r2, r3
 800f492:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f496:	4413      	add	r3, r2
 800f498:	f107 0208 	add.w	r2, r7, #8
 800f49c:	6812      	ldr	r2, [r2, #0]
 800f49e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800f4a2:	4293      	cmp	r3, r2
 800f4a4:	db96      	blt.n	800f3d4 <lv_draw_label+0x218>
    }

    /*Align to middle*/
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
 800f4a6:	1d3b      	adds	r3, r7, #4
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f4ae:	f003 0304 	and.w	r3, r3, #4
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d033      	beq.n	800f51e <lv_draw_label+0x362>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800f4b6:	463b      	mov	r3, r7
 800f4b8:	681a      	ldr	r2, [r3, #0]
 800f4ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f4be:	18d0      	adds	r0, r2, r3
 800f4c0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f4c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f4c8:	1ad1      	subs	r1, r2, r3
 800f4ca:	1d3b      	adds	r3, r7, #4
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800f4d2:	1d3b      	adds	r3, r7, #4
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f4da:	9300      	str	r3, [sp, #0]
 800f4dc:	4613      	mov	r3, r2
 800f4de:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800f4e2:	f00e fcfb 	bl	801dedc <_lv_txt_get_width>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800f4ec:	f107 030c 	add.w	r3, r7, #12
 800f4f0:	6818      	ldr	r0, [r3, #0]
 800f4f2:	f7ff fddf 	bl	800f0b4 <lv_area_get_width>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	461a      	mov	r2, r3
 800f4fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f4fe:	1ad3      	subs	r3, r2, r3
 800f500:	2b00      	cmp	r3, #0
 800f502:	da00      	bge.n	800f506 <lv_draw_label+0x34a>
 800f504:	3301      	adds	r3, #1
 800f506:	105b      	asrs	r3, r3, #1
 800f508:	4619      	mov	r1, r3
 800f50a:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 800f50e:	b29a      	uxth	r2, r3
 800f510:	b28b      	uxth	r3, r1
 800f512:	4413      	add	r3, r2
 800f514:	b29b      	uxth	r3, r3
 800f516:	b21b      	sxth	r3, r3
 800f518:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800f51c:	e035      	b.n	800f58a <lv_draw_label+0x3ce>

    }
    /*Align to the right*/
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
 800f51e:	1d3b      	adds	r3, r7, #4
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f526:	f003 0308 	and.w	r3, r3, #8
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d02d      	beq.n	800f58a <lv_draw_label+0x3ce>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800f52e:	463b      	mov	r3, r7
 800f530:	681a      	ldr	r2, [r3, #0]
 800f532:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f536:	18d0      	adds	r0, r2, r3
 800f538:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f53c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f540:	1ad1      	subs	r1, r2, r3
 800f542:	1d3b      	adds	r3, r7, #4
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800f54a:	1d3b      	adds	r3, r7, #4
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f552:	9300      	str	r3, [sp, #0]
 800f554:	4613      	mov	r3, r2
 800f556:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800f55a:	f00e fcbf 	bl	801dedc <_lv_txt_get_width>
 800f55e:	4603      	mov	r3, r0
 800f560:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        pos.x += lv_area_get_width(coords) - line_width;
 800f564:	f107 030c 	add.w	r3, r7, #12
 800f568:	6818      	ldr	r0, [r3, #0]
 800f56a:	f7ff fda3 	bl	800f0b4 <lv_area_get_width>
 800f56e:	4603      	mov	r3, r0
 800f570:	461a      	mov	r2, r3
 800f572:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f576:	1ad3      	subs	r3, r2, r3
 800f578:	f9b7 20b4 	ldrsh.w	r2, [r7, #180]	; 0xb4
 800f57c:	b292      	uxth	r2, r2
 800f57e:	b29b      	uxth	r3, r3
 800f580:	4413      	add	r3, r2
 800f582:	b29b      	uxth	r3, r3
 800f584:	b21b      	sxth	r3, r3
 800f586:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
    }

    lv_opa_t opa = dsc->opa;
 800f58a:	1d3b      	adds	r3, r7, #4
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	7c1b      	ldrb	r3, [r3, #16]
 800f590:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7

    uint32_t sel_start = dsc->sel_start;
 800f594:	1d3b      	adds	r3, r7, #4
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	699b      	ldr	r3, [r3, #24]
 800f59a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    uint32_t sel_end = dsc->sel_end;
 800f59e:	1d3b      	adds	r3, r7, #4
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	69db      	ldr	r3, [r3, #28]
 800f5a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    if(sel_start > sel_end) {
 800f5a8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800f5ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d90b      	bls.n	800f5cc <lv_draw_label+0x410>
        uint32_t tmp = sel_start;
 800f5b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
        sel_start = sel_end;
 800f5bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f5c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        sel_end = tmp;
 800f5c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f5c8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    }
    lv_draw_line_dsc_t line_dsc;

    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 800f5cc:	1d3b      	adds	r3, r7, #4
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800f5d4:	f003 0301 	and.w	r3, r3, #1
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d107      	bne.n	800f5ec <lv_draw_label+0x430>
 800f5dc:	1d3b      	adds	r3, r7, #4
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800f5e4:	f003 0302 	and.w	r3, r3, #2
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d02a      	beq.n	800f642 <lv_draw_label+0x486>
        lv_draw_line_dsc_init(&line_dsc);
 800f5ec:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f001 f924 	bl	801083e <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 800f5f6:	1d3b      	adds	r3, r7, #4
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 800f600:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f604:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d005      	beq.n	800f618 <lv_draw_label+0x45c>
 800f60c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f610:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800f614:	b21b      	sxth	r3, r3
 800f616:	e000      	b.n	800f61a <lv_draw_label+0x45e>
 800f618:	2301      	movs	r3, #1
 800f61a:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
        line_dsc.opa = dsc->opa;
 800f61e:	1d3b      	adds	r3, r7, #4
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	7c1b      	ldrb	r3, [r3, #16]
 800f624:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
        line_dsc.blend_mode = dsc->blend_mode;
 800f628:	1d3b      	adds	r3, r7, #4
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800f630:	f003 0303 	and.w	r3, r3, #3
 800f634:	b2da      	uxtb	r2, r3
 800f636:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800f63a:	f362 0301 	bfi	r3, r2, #0, #2
 800f63e:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
    }

    cmd_state_t cmd_state = CMD_STATE_WAIT;
 800f642:	2300      	movs	r3, #0
 800f644:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    uint32_t i;
    uint32_t par_start = 0;
 800f648:	2300      	movs	r3, #0
 800f64a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    lv_color_t recolor;
    int32_t letter_w;

    lv_draw_rect_dsc_t draw_dsc_sel;
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 800f64e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f652:	4618      	mov	r0, r3
 800f654:	f003 fe80 	bl	8013358 <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 800f658:	1d3b      	adds	r3, r7, #4
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	689b      	ldr	r3, [r3, #8]
 800f65e:	63fb      	str	r3, [r7, #60]	; 0x3c

    int32_t pos_x_start = pos.x;
 800f660:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 800f664:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    /*Write out all lines*/
    while(txt[line_start] != '\0') {
 800f668:	e2b8      	b.n	800fbdc <lv_draw_label+0xa20>
        pos.x += x_ofs;
 800f66a:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 800f66e:	b29a      	uxth	r2, r3
 800f670:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f674:	b29b      	uxth	r3, r3
 800f676:	4413      	add	r3, r2
 800f678:	b29b      	uxth	r3, r3
 800f67a:	b21b      	sxth	r3, r3
 800f67c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4

        /*Write all letter of a line*/
        cmd_state = CMD_STATE_WAIT;
 800f680:	2300      	movs	r3, #0
 800f682:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
        i         = 0;
 800f686:	2300      	movs	r3, #0
 800f688:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
#if LV_USE_BIDI
        char * bidi_txt = _lv_mem_buf_get(line_end - line_start + 1);
        _lv_bidi_process_paragraph(txt + line_start, bidi_txt, line_end - line_start, dsc->bidi_dir, NULL, 0);
#else
        const char * bidi_txt = txt + line_start;
 800f68c:	463b      	mov	r3, r7
 800f68e:	681a      	ldr	r2, [r3, #0]
 800f690:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f694:	4413      	add	r3, r2
 800f696:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
#endif

        while(i < line_end - line_start) {
 800f69a:	e162      	b.n	800f962 <lv_draw_label+0x7a6>
            uint32_t logical_char_pos = 0;
 800f69c:	2300      	movs	r3, #0
 800f69e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800f6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6aa:	4293      	cmp	r3, r2
 800f6ac:	d011      	beq.n	800f6d2 <lv_draw_label+0x516>
 800f6ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f6b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6b6:	4293      	cmp	r3, r2
 800f6b8:	d00b      	beq.n	800f6d2 <lv_draw_label+0x516>
#if LV_USE_BIDI
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start);
                uint32_t t = _lv_txt_encoded_get_char_id(bidi_txt, i);
                logical_char_pos += _lv_bidi_get_logical_pos(bidi_txt, NULL, line_end - line_start, dsc->bidi_dir, t, NULL);
#else
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 800f6ba:	4ba7      	ldr	r3, [pc, #668]	; (800f958 <lv_draw_label+0x79c>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f6c2:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800f6c6:	4411      	add	r1, r2
 800f6c8:	463a      	mov	r2, r7
 800f6ca:	6810      	ldr	r0, [r2, #0]
 800f6cc:	4798      	blx	r3
 800f6ce:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
#endif
            }

            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
 800f6d2:	4ba2      	ldr	r3, [pc, #648]	; (800f95c <lv_draw_label+0x7a0>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800f6da:	4611      	mov	r1, r2
 800f6dc:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800f6e0:	4798      	blx	r3
 800f6e2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
 800f6e6:	4b9d      	ldr	r3, [pc, #628]	; (800f95c <lv_draw_label+0x7a0>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f6ee:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800f6f2:	440a      	add	r2, r1
 800f6f4:	2100      	movs	r1, #0
 800f6f6:	4610      	mov	r0, r2
 800f6f8:	4798      	blx	r3
 800f6fa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

            /*Handle the re-color command*/
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
 800f6fe:	1d3b      	adds	r3, r7, #4
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f706:	f003 0301 	and.w	r3, r3, #1
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	f000 8090 	beq.w	800f830 <lv_draw_label+0x674>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800f710:	2323      	movs	r3, #35	; 0x23
 800f712:	461a      	mov	r2, r3
 800f714:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f718:	4293      	cmp	r3, r2
 800f71a:	d11b      	bne.n	800f754 <lv_draw_label+0x598>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800f71c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f720:	2b00      	cmp	r3, #0
 800f722:	d107      	bne.n	800f734 <lv_draw_label+0x578>
                        par_start = i;
 800f724:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f728:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                        cmd_state = CMD_STATE_PAR;
 800f72c:	2301      	movs	r3, #1
 800f72e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                        continue;
 800f732:	e116      	b.n	800f962 <lv_draw_label+0x7a6>
                    }
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
 800f734:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f738:	2b01      	cmp	r3, #1
 800f73a:	d103      	bne.n	800f744 <lv_draw_label+0x588>
                        cmd_state = CMD_STATE_WAIT;
 800f73c:	2300      	movs	r3, #0
 800f73e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800f742:	e007      	b.n	800f754 <lv_draw_label+0x598>
                    }
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
 800f744:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f748:	2b02      	cmp	r3, #2
 800f74a:	d103      	bne.n	800f754 <lv_draw_label+0x598>
                        cmd_state = CMD_STATE_WAIT;
 800f74c:	2300      	movs	r3, #0
 800f74e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                        continue;
 800f752:	e106      	b.n	800f962 <lv_draw_label+0x7a6>
                    }
                }

                /*Skip the color parameter and wait the space after it*/
                if(cmd_state == CMD_STATE_PAR) {
 800f754:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f758:	2b01      	cmp	r3, #1
 800f75a:	d169      	bne.n	800f830 <lv_draw_label+0x674>
                    if(letter == ' ') {
 800f75c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f760:	2b20      	cmp	r3, #32
 800f762:	f040 80fd 	bne.w	800f960 <lv_draw_label+0x7a4>
                        /*Get the parameter*/
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800f766:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f76a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f76e:	1ad3      	subs	r3, r2, r3
 800f770:	2b07      	cmp	r3, #7
 800f772:	d154      	bne.n	800f81e <lv_draw_label+0x662>
                            char buf[LABEL_RECOLOR_PAR_LENGTH + 1];
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800f774:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800f778:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f77c:	18d1      	adds	r1, r2, r3
 800f77e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f782:	2206      	movs	r2, #6
 800f784:	4618      	mov	r0, r3
 800f786:	f7ff fc73 	bl	800f070 <_lv_memcpy_small>
                            buf[LABEL_RECOLOR_PAR_LENGTH] = '\0';
 800f78a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f78e:	2200      	movs	r2, #0
 800f790:	719a      	strb	r2, [r3, #6]
                            int r, g, b;
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800f792:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	4618      	mov	r0, r3
 800f79a:	f000 fff3 	bl	8010784 <hex_char_to_num>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	011c      	lsls	r4, r3, #4
 800f7a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f7a6:	785b      	ldrb	r3, [r3, #1]
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f000 ffeb 	bl	8010784 <hex_char_to_num>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	4423      	add	r3, r4
 800f7b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800f7b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f7ba:	789b      	ldrb	r3, [r3, #2]
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f000 ffe1 	bl	8010784 <hex_char_to_num>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	011c      	lsls	r4, r3, #4
 800f7c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f7ca:	78db      	ldrb	r3, [r3, #3]
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f000 ffd9 	bl	8010784 <hex_char_to_num>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	4423      	add	r3, r4
 800f7d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800f7da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f7de:	791b      	ldrb	r3, [r3, #4]
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f000 ffcf 	bl	8010784 <hex_char_to_num>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	011c      	lsls	r4, r3, #4
 800f7ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f7ee:	795b      	ldrb	r3, [r3, #5]
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f000 ffc7 	bl	8010784 <hex_char_to_num>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	4423      	add	r3, r4
 800f7fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                            recolor = lv_color_make(r, g, b);
 800f7fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f802:	b2db      	uxtb	r3, r3
 800f804:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800f808:	b2d1      	uxtb	r1, r2
 800f80a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f80e:	b2d2      	uxtb	r2, r2
 800f810:	4618      	mov	r0, r3
 800f812:	f7ff fc73 	bl	800f0fc <lv_color_make>
 800f816:	4603      	mov	r3, r0
 800f818:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f81c:	e004      	b.n	800f828 <lv_draw_label+0x66c>
                        }
                        else {
                            recolor.full = dsc->color.full;
 800f81e:	1d3b      	adds	r3, r7, #4
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                        }
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800f828:	2302      	movs	r3, #2
 800f82a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                    }
                    continue;
 800f82e:	e097      	b.n	800f960 <lv_draw_label+0x7a4>
                }
            }

            lv_color_t color = dsc->color;
 800f830:	1d3b      	adds	r3, r7, #4
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	633b      	str	r3, [r7, #48]	; 0x30

            if(cmd_state == CMD_STATE_IN) color = recolor;
 800f838:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800f83c:	2b02      	cmp	r3, #2
 800f83e:	d102      	bne.n	800f846 <lv_draw_label+0x68a>
 800f840:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f844:	633b      	str	r3, [r7, #48]	; 0x30

            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800f846:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f84a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800f84e:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800f852:	f009 fdcb 	bl	80193ec <lv_font_get_glyph_width>
 800f856:	4603      	mov	r3, r0
 800f858:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800f85c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f860:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f864:	4293      	cmp	r3, r2
 800f866:	d04b      	beq.n	800f900 <lv_draw_label+0x744>
 800f868:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f86c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f870:	4293      	cmp	r3, r2
 800f872:	d045      	beq.n	800f900 <lv_draw_label+0x744>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 800f874:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800f878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f87c:	429a      	cmp	r2, r3
 800f87e:	d33f      	bcc.n	800f900 <lv_draw_label+0x744>
 800f880:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800f884:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f888:	429a      	cmp	r2, r3
 800f88a:	d239      	bcs.n	800f900 <lv_draw_label+0x744>
                    lv_area_t sel_coords;
                    sel_coords.x1 = pos.x;
 800f88c:	f9b7 20b4 	ldrsh.w	r2, [r7, #180]	; 0xb4
 800f890:	f107 0320 	add.w	r3, r7, #32
 800f894:	801a      	strh	r2, [r3, #0]
                    sel_coords.y1 = pos.y;
 800f896:	f9b7 20b6 	ldrsh.w	r2, [r7, #182]	; 0xb6
 800f89a:	f107 0320 	add.w	r3, r7, #32
 800f89e:	805a      	strh	r2, [r3, #2]
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800f8a0:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 800f8a4:	b29a      	uxth	r2, r3
 800f8a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f8aa:	b29b      	uxth	r3, r3
 800f8ac:	4413      	add	r3, r2
 800f8ae:	b29a      	uxth	r2, r3
 800f8b0:	1d3b      	adds	r3, r7, #4
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800f8b8:	b29b      	uxth	r3, r3
 800f8ba:	4413      	add	r3, r2
 800f8bc:	b29b      	uxth	r3, r3
 800f8be:	3b01      	subs	r3, #1
 800f8c0:	b29b      	uxth	r3, r3
 800f8c2:	b21a      	sxth	r2, r3
 800f8c4:	f107 0320 	add.w	r3, r7, #32
 800f8c8:	809a      	strh	r2, [r3, #4]
                    sel_coords.y2 = pos.y + line_height - 1;
 800f8ca:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f8ce:	b29a      	uxth	r2, r3
 800f8d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f8d4:	b29b      	uxth	r3, r3
 800f8d6:	4413      	add	r3, r2
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	3b01      	subs	r3, #1
 800f8dc:	b29b      	uxth	r3, r3
 800f8de:	b21a      	sxth	r2, r3
 800f8e0:	f107 0320 	add.w	r3, r7, #32
 800f8e4:	80da      	strh	r2, [r3, #6]
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 800f8e6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800f8ea:	f107 0308 	add.w	r3, r7, #8
 800f8ee:	f107 0020 	add.w	r0, r7, #32
 800f8f2:	6819      	ldr	r1, [r3, #0]
 800f8f4:	f003 fdb4 	bl	8013460 <lv_draw_rect>
                    color = dsc->sel_color;
 800f8f8:	1d3b      	adds	r3, r7, #4
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	685b      	ldr	r3, [r3, #4]
 800f8fe:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
 800f900:	1d3b      	adds	r3, r7, #4
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800f908:	f107 0108 	add.w	r1, r7, #8
 800f90c:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 800f910:	9302      	str	r3, [sp, #8]
 800f912:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800f916:	9301      	str	r3, [sp, #4]
 800f918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f91a:	9300      	str	r3, [sp, #0]
 800f91c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f920:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800f924:	6809      	ldr	r1, [r1, #0]
 800f926:	f000 f971 	bl	800fc0c <lv_draw_letter>

            if(letter_w > 0) {
 800f92a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f92e:	2b00      	cmp	r3, #0
 800f930:	dd17      	ble.n	800f962 <lv_draw_label+0x7a6>
                pos.x += letter_w + dsc->letter_space;
 800f932:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 800f936:	b29a      	uxth	r2, r3
 800f938:	1d3b      	adds	r3, r7, #4
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800f940:	b299      	uxth	r1, r3
 800f942:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f946:	b29b      	uxth	r3, r3
 800f948:	440b      	add	r3, r1
 800f94a:	b29b      	uxth	r3, r3
 800f94c:	4413      	add	r3, r2
 800f94e:	b29b      	uxth	r3, r3
 800f950:	b21b      	sxth	r3, r3
 800f952:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800f956:	e004      	b.n	800f962 <lv_draw_label+0x7a6>
 800f958:	20001410 	.word	0x20001410
 800f95c:	2000140c 	.word	0x2000140c
                    continue;
 800f960:	bf00      	nop
        while(i < line_end - line_start) {
 800f962:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f966:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f96a:	1ad2      	subs	r2, r2, r3
 800f96c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f970:	429a      	cmp	r2, r3
 800f972:	f63f ae93 	bhi.w	800f69c <lv_draw_label+0x4e0>
            }
        }

        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 800f976:	1d3b      	adds	r3, r7, #4
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800f97e:	f003 0302 	and.w	r3, r3, #2
 800f982:	2b00      	cmp	r3, #0
 800f984:	d03a      	beq.n	800f9fc <lv_draw_label+0x840>
            lv_point_t p1;
            lv_point_t p2;
            p1.x = pos_x_start;
 800f986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f98a:	b21a      	sxth	r2, r3
 800f98c:	f107 031c 	add.w	r3, r7, #28
 800f990:	801a      	strh	r2, [r3, #0]
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800f992:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800f996:	b29a      	uxth	r2, r3
 800f998:	1d3b      	adds	r3, r7, #4
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	68db      	ldr	r3, [r3, #12]
 800f99e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	da00      	bge.n	800f9a8 <lv_draw_label+0x7ec>
 800f9a6:	3301      	adds	r3, #1
 800f9a8:	105b      	asrs	r3, r3, #1
 800f9aa:	b21b      	sxth	r3, r3
 800f9ac:	b29b      	uxth	r3, r3
 800f9ae:	4413      	add	r3, r2
 800f9b0:	b29a      	uxth	r2, r3
 800f9b2:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	da00      	bge.n	800f9bc <lv_draw_label+0x800>
 800f9ba:	3301      	adds	r3, #1
 800f9bc:	105b      	asrs	r3, r3, #1
 800f9be:	b21b      	sxth	r3, r3
 800f9c0:	b29b      	uxth	r3, r3
 800f9c2:	4413      	add	r3, r2
 800f9c4:	b29b      	uxth	r3, r3
 800f9c6:	b21a      	sxth	r2, r3
 800f9c8:	f107 031c 	add.w	r3, r7, #28
 800f9cc:	805a      	strh	r2, [r3, #2]
            p2.x = pos.x;
 800f9ce:	f9b7 20b4 	ldrsh.w	r2, [r7, #180]	; 0xb4
 800f9d2:	f107 0318 	add.w	r3, r7, #24
 800f9d6:	801a      	strh	r2, [r3, #0]
            p2.y = p1.y;
 800f9d8:	f107 031c 	add.w	r3, r7, #28
 800f9dc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f9e0:	f107 0318 	add.w	r3, r7, #24
 800f9e4:	805a      	strh	r2, [r3, #2]
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800f9e6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800f9ea:	f107 0208 	add.w	r2, r7, #8
 800f9ee:	f107 0118 	add.w	r1, r7, #24
 800f9f2:	f107 001c 	add.w	r0, r7, #28
 800f9f6:	6812      	ldr	r2, [r2, #0]
 800f9f8:	f000 ff3f 	bl	801087a <lv_draw_line>
        }

        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 800f9fc:	1d3b      	adds	r3, r7, #4
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800fa04:	f003 0301 	and.w	r3, r3, #1
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d03a      	beq.n	800fa82 <lv_draw_label+0x8c6>
            lv_point_t p1;
            lv_point_t p2;
            p1.x = pos_x_start;
 800fa0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa10:	b21a      	sxth	r2, r3
 800fa12:	f107 0314 	add.w	r3, r7, #20
 800fa16:	801a      	strh	r2, [r3, #0]
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800fa18:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800fa1c:	b29a      	uxth	r2, r3
 800fa1e:	1d3b      	adds	r3, r7, #4
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	68db      	ldr	r3, [r3, #12]
 800fa24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fa28:	b29b      	uxth	r3, r3
 800fa2a:	4413      	add	r3, r2
 800fa2c:	b29a      	uxth	r2, r3
 800fa2e:	1d3b      	adds	r3, r7, #4
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	68db      	ldr	r3, [r3, #12]
 800fa34:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800fa38:	b29b      	uxth	r3, r3
 800fa3a:	1ad3      	subs	r3, r2, r3
 800fa3c:	b29a      	uxth	r2, r3
 800fa3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fa42:	f993 300d 	ldrsb.w	r3, [r3, #13]
 800fa46:	b29b      	uxth	r3, r3
 800fa48:	1ad3      	subs	r3, r2, r3
 800fa4a:	b29b      	uxth	r3, r3
 800fa4c:	b21a      	sxth	r2, r3
 800fa4e:	f107 0314 	add.w	r3, r7, #20
 800fa52:	805a      	strh	r2, [r3, #2]
            p2.x = pos.x;
 800fa54:	f9b7 20b4 	ldrsh.w	r2, [r7, #180]	; 0xb4
 800fa58:	f107 0310 	add.w	r3, r7, #16
 800fa5c:	801a      	strh	r2, [r3, #0]
            p2.y = p1.y;
 800fa5e:	f107 0314 	add.w	r3, r7, #20
 800fa62:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800fa66:	f107 0310 	add.w	r3, r7, #16
 800fa6a:	805a      	strh	r2, [r3, #2]
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800fa6c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800fa70:	f107 0208 	add.w	r2, r7, #8
 800fa74:	f107 0110 	add.w	r1, r7, #16
 800fa78:	f107 0014 	add.w	r0, r7, #20
 800fa7c:	6812      	ldr	r2, [r2, #0]
 800fa7e:	f000 fefc 	bl	801087a <lv_draw_line>
#if LV_USE_BIDI
        _lv_mem_buf_release(bidi_txt);
        bidi_txt = NULL;
#endif
        /*Go to next line*/
        line_start = line_end;
 800fa82:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800fa86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800fa8a:	463b      	mov	r3, r7
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800fa92:	18d0      	adds	r0, r2, r3
 800fa94:	1d3b      	adds	r3, r7, #4
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800fa9c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800faa0:	b219      	sxth	r1, r3
 800faa2:	1d3b      	adds	r3, r7, #4
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800faaa:	9300      	str	r3, [sp, #0]
 800faac:	460b      	mov	r3, r1
 800faae:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800fab2:	f00e f955 	bl	801dd60 <_lv_txt_get_next_line>
 800fab6:	4602      	mov	r2, r0
 800fab8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800fabc:	4413      	add	r3, r2
 800fabe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

        pos.x = coords->x1;
 800fac2:	f107 030c 	add.w	r3, r7, #12
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800facc:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        /*Align to middle*/
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
 800fad0:	1d3b      	adds	r3, r7, #4
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800fad8:	f003 0304 	and.w	r3, r3, #4
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d033      	beq.n	800fb48 <lv_draw_label+0x98c>
            line_width =
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800fae0:	463b      	mov	r3, r7
 800fae2:	681a      	ldr	r2, [r3, #0]
 800fae4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800fae8:	18d0      	adds	r0, r2, r3
 800faea:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800faee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800faf2:	1ad1      	subs	r1, r2, r3
 800faf4:	1d3b      	adds	r3, r7, #4
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800fafc:	1d3b      	adds	r3, r7, #4
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800fb04:	9300      	str	r3, [sp, #0]
 800fb06:	4613      	mov	r3, r2
 800fb08:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800fb0c:	f00e f9e6 	bl	801dedc <_lv_txt_get_width>
 800fb10:	4603      	mov	r3, r0
            line_width =
 800fb12:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800fb16:	f107 030c 	add.w	r3, r7, #12
 800fb1a:	6818      	ldr	r0, [r3, #0]
 800fb1c:	f7ff faca 	bl	800f0b4 <lv_area_get_width>
 800fb20:	4603      	mov	r3, r0
 800fb22:	461a      	mov	r2, r3
 800fb24:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fb28:	1ad3      	subs	r3, r2, r3
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	da00      	bge.n	800fb30 <lv_draw_label+0x974>
 800fb2e:	3301      	adds	r3, #1
 800fb30:	105b      	asrs	r3, r3, #1
 800fb32:	4619      	mov	r1, r3
 800fb34:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 800fb38:	b29a      	uxth	r2, r3
 800fb3a:	b28b      	uxth	r3, r1
 800fb3c:	4413      	add	r3, r2
 800fb3e:	b29b      	uxth	r3, r3
 800fb40:	b21b      	sxth	r3, r3
 800fb42:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800fb46:	e035      	b.n	800fbb4 <lv_draw_label+0x9f8>

        }
        /*Align to the right*/
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
 800fb48:	1d3b      	adds	r3, r7, #4
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800fb50:	f003 0308 	and.w	r3, r3, #8
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d02d      	beq.n	800fbb4 <lv_draw_label+0x9f8>
            line_width =
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800fb58:	463b      	mov	r3, r7
 800fb5a:	681a      	ldr	r2, [r3, #0]
 800fb5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800fb60:	18d0      	adds	r0, r2, r3
 800fb62:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800fb66:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800fb6a:	1ad1      	subs	r1, r2, r3
 800fb6c:	1d3b      	adds	r3, r7, #4
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800fb74:	1d3b      	adds	r3, r7, #4
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800fb7c:	9300      	str	r3, [sp, #0]
 800fb7e:	4613      	mov	r3, r2
 800fb80:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800fb84:	f00e f9aa 	bl	801dedc <_lv_txt_get_width>
 800fb88:	4603      	mov	r3, r0
            line_width =
 800fb8a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
            pos.x += lv_area_get_width(coords) - line_width;
 800fb8e:	f107 030c 	add.w	r3, r7, #12
 800fb92:	6818      	ldr	r0, [r3, #0]
 800fb94:	f7ff fa8e 	bl	800f0b4 <lv_area_get_width>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	461a      	mov	r2, r3
 800fb9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fba0:	1ad3      	subs	r3, r2, r3
 800fba2:	f9b7 20b4 	ldrsh.w	r2, [r7, #180]	; 0xb4
 800fba6:	b292      	uxth	r2, r2
 800fba8:	b29b      	uxth	r3, r3
 800fbaa:	4413      	add	r3, r2
 800fbac:	b29b      	uxth	r3, r3
 800fbae:	b21b      	sxth	r3, r3
 800fbb0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        }

        /*Go the next line position*/
        pos.y += line_height;
 800fbb4:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800fbb8:	b29a      	uxth	r2, r3
 800fbba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fbbe:	b29b      	uxth	r3, r3
 800fbc0:	4413      	add	r3, r2
 800fbc2:	b29b      	uxth	r3, r3
 800fbc4:	b21b      	sxth	r3, r3
 800fbc6:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

        if(pos.y > mask->y2) return;
 800fbca:	f9b7 20b6 	ldrsh.w	r2, [r7, #182]	; 0xb6
 800fbce:	f107 0308 	add.w	r3, r7, #8
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800fbd8:	429a      	cmp	r2, r3
 800fbda:	dc11      	bgt.n	800fc00 <lv_draw_label+0xa44>
    while(txt[line_start] != '\0') {
 800fbdc:	463b      	mov	r3, r7
 800fbde:	681a      	ldr	r2, [r3, #0]
 800fbe0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800fbe4:	4413      	add	r3, r2
 800fbe6:	781b      	ldrb	r3, [r3, #0]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	f47f ad3e 	bne.w	800f66a <lv_draw_label+0x4ae>
 800fbee:	e008      	b.n	800fc02 <lv_draw_label+0xa46>
    if(dsc->opa <= LV_OPA_MIN) return;
 800fbf0:	bf00      	nop
 800fbf2:	e006      	b.n	800fc02 <lv_draw_label+0xa46>
    if(txt[0] == '\0')  return;
 800fbf4:	bf00      	nop
 800fbf6:	e004      	b.n	800fc02 <lv_draw_label+0xa46>
    if(!clip_ok) return;
 800fbf8:	bf00      	nop
 800fbfa:	e002      	b.n	800fc02 <lv_draw_label+0xa46>
        if(txt[line_start] == '\0') return;
 800fbfc:	bf00      	nop
 800fbfe:	e000      	b.n	800fc02 <lv_draw_label+0xa46>
        if(pos.y > mask->y2) return;
 800fc00:	bf00      	nop
    }

    LV_ASSERT_MEM_INTEGRITY();
}
 800fc02:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bdb0      	pop	{r4, r5, r7, pc}
 800fc0a:	bf00      	nop

0800fc0c <lv_draw_letter>:
 */
LV_ATTRIBUTE_FAST_MEM static void lv_draw_letter(const lv_point_t * pos_p, const lv_area_t * clip_area,
                                                 const lv_font_t * font_p,
                                                 uint32_t letter,
                                                 lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b090      	sub	sp, #64	; 0x40
 800fc10:	af04      	add	r7, sp, #16
 800fc12:	60f8      	str	r0, [r7, #12]
 800fc14:	60b9      	str	r1, [r7, #8]
 800fc16:	607a      	str	r2, [r7, #4]
 800fc18:	603b      	str	r3, [r7, #0]
    if(opa < LV_OPA_MIN) return;
 800fc1a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fc1e:	2b01      	cmp	r3, #1
 800fc20:	f240 8094 	bls.w	800fd4c <lv_draw_letter+0x140>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800fc24:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fc28:	2bfd      	cmp	r3, #253	; 0xfd
 800fc2a:	d902      	bls.n	800fc32 <lv_draw_letter+0x26>
 800fc2c:	23ff      	movs	r3, #255	; 0xff
 800fc2e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    if(font_p == NULL) {
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	f000 808b 	beq.w	800fd50 <lv_draw_letter+0x144>
        LV_LOG_WARN("lv_draw_letter: font is NULL");
        return;
    }

    lv_font_glyph_dsc_t g;
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 800fc3a:	f107 0114 	add.w	r1, r7, #20
 800fc3e:	2300      	movs	r3, #0
 800fc40:	683a      	ldr	r2, [r7, #0]
 800fc42:	6878      	ldr	r0, [r7, #4]
 800fc44:	f009 fbbf 	bl	80193c6 <lv_font_get_glyph_dsc>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(g_ret == false)  {
 800fc4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc52:	f083 0301 	eor.w	r3, r3, #1
 800fc56:	b2db      	uxtb	r3, r3
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d17b      	bne.n	800fd54 <lv_draw_letter+0x148>
        }
        return;
    }

    /* Don't draw anything if the character is empty. E.g. space */
    if((g.box_h == 0) || (g.box_w == 0)) return;
 800fc5c:	8b3b      	ldrh	r3, [r7, #24]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d07a      	beq.n	800fd58 <lv_draw_letter+0x14c>
 800fc62:	8afb      	ldrh	r3, [r7, #22]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d077      	beq.n	800fd58 <lv_draw_letter+0x14c>

    int32_t pos_x = pos_p->x + g.ofs_x;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc6e:	461a      	mov	r2, r3
 800fc70:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800fc74:	4413      	add	r3, r2
 800fc76:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fc7e:	461a      	mov	r2, r3
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fc86:	4619      	mov	r1, r3
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800fc8e:	1acb      	subs	r3, r1, r3
 800fc90:	4413      	add	r3, r2
 800fc92:	8b3a      	ldrh	r2, [r7, #24]
 800fc94:	1a9b      	subs	r3, r3, r2
 800fc96:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800fc9a:	1a9b      	subs	r3, r3, r2
 800fc9c:	627b      	str	r3, [r7, #36]	; 0x24

    /*If the letter is completely out of mask don't draw it */
    if(pos_x + g.box_w < clip_area->x1 ||
 800fc9e:	8afb      	ldrh	r3, [r7, #22]
 800fca0:	461a      	mov	r2, r3
 800fca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca4:	4413      	add	r3, r2
 800fca6:	68ba      	ldr	r2, [r7, #8]
 800fca8:	f9b2 2000 	ldrsh.w	r2, [r2]
 800fcac:	4293      	cmp	r3, r2
 800fcae:	db55      	blt.n	800fd5c <lv_draw_letter+0x150>
       pos_x > clip_area->x2 ||
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fcb6:	461a      	mov	r2, r3
    if(pos_x + g.box_w < clip_area->x1 ||
 800fcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	dc4e      	bgt.n	800fd5c <lv_draw_letter+0x150>
       pos_y + g.box_h < clip_area->y1 ||
 800fcbe:	8b3b      	ldrh	r3, [r7, #24]
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc4:	4413      	add	r3, r2
 800fcc6:	68ba      	ldr	r2, [r7, #8]
 800fcc8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
       pos_x > clip_area->x2 ||
 800fccc:	4293      	cmp	r3, r2
 800fcce:	db45      	blt.n	800fd5c <lv_draw_letter+0x150>
       pos_y > clip_area->y2)  {
 800fcd0:	68bb      	ldr	r3, [r7, #8]
 800fcd2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800fcd6:	461a      	mov	r2, r3
       pos_y + g.box_h < clip_area->y1 ||
 800fcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcda:	4293      	cmp	r3, r2
 800fcdc:	dc3e      	bgt.n	800fd5c <lv_draw_letter+0x150>
        return;
    }

    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 800fcde:	6839      	ldr	r1, [r7, #0]
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f009 fb61 	bl	80193a8 <lv_font_get_glyph_bitmap>
 800fce6:	6238      	str	r0, [r7, #32]
    if(map_p == NULL) {
 800fce8:	6a3b      	ldr	r3, [r7, #32]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d038      	beq.n	800fd60 <lv_draw_letter+0x154>
        LV_LOG_WARN("lv_draw_letter: character's bitmap not found");
        return;
    }

    if(font_p->subpx) {
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	7b1b      	ldrb	r3, [r3, #12]
 800fcf2:	f003 0303 	and.w	r3, r3, #3
 800fcf6:	b2db      	uxtb	r3, r3
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d013      	beq.n	800fd24 <lv_draw_letter+0x118>
        draw_letter_subpx(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
 800fcfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcfe:	b218      	sxth	r0, r3
 800fd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd02:	b219      	sxth	r1, r3
 800fd04:	f107 0214 	add.w	r2, r7, #20
 800fd08:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800fd0c:	9303      	str	r3, [sp, #12]
 800fd0e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fd12:	9302      	str	r3, [sp, #8]
 800fd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd16:	9301      	str	r3, [sp, #4]
 800fd18:	6a3b      	ldr	r3, [r7, #32]
 800fd1a:	9300      	str	r3, [sp, #0]
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	f000 fa3f 	bl	80101a0 <draw_letter_subpx>
 800fd22:	e01e      	b.n	800fd62 <lv_draw_letter+0x156>
    }
    else {
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
 800fd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd26:	b218      	sxth	r0, r3
 800fd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd2a:	b219      	sxth	r1, r3
 800fd2c:	f107 0214 	add.w	r2, r7, #20
 800fd30:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800fd34:	9303      	str	r3, [sp, #12]
 800fd36:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fd3a:	9302      	str	r3, [sp, #8]
 800fd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd3e:	9301      	str	r3, [sp, #4]
 800fd40:	6a3b      	ldr	r3, [r7, #32]
 800fd42:	9300      	str	r3, [sp, #0]
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	f000 f80f 	bl	800fd68 <draw_letter_normal>
 800fd4a:	e00a      	b.n	800fd62 <lv_draw_letter+0x156>
    if(opa < LV_OPA_MIN) return;
 800fd4c:	bf00      	nop
 800fd4e:	e008      	b.n	800fd62 <lv_draw_letter+0x156>
        return;
 800fd50:	bf00      	nop
 800fd52:	e006      	b.n	800fd62 <lv_draw_letter+0x156>
        return;
 800fd54:	bf00      	nop
 800fd56:	e004      	b.n	800fd62 <lv_draw_letter+0x156>
    if((g.box_h == 0) || (g.box_w == 0)) return;
 800fd58:	bf00      	nop
 800fd5a:	e002      	b.n	800fd62 <lv_draw_letter+0x156>
        return;
 800fd5c:	bf00      	nop
 800fd5e:	e000      	b.n	800fd62 <lv_draw_letter+0x156>
        return;
 800fd60:	bf00      	nop
    }
}
 800fd62:	3730      	adds	r7, #48	; 0x30
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}

0800fd68 <draw_letter_normal>:

LV_ATTRIBUTE_FAST_MEM static void draw_letter_normal(lv_coord_t pos_x, lv_coord_t pos_y, lv_font_glyph_dsc_t * g,
                                                     const lv_area_t * clip_area,
                                                     const uint8_t * map_p, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 800fd68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd6a:	b0a5      	sub	sp, #148	; 0x94
 800fd6c:	af04      	add	r7, sp, #16
 800fd6e:	60ba      	str	r2, [r7, #8]
 800fd70:	607b      	str	r3, [r7, #4]
 800fd72:	4603      	mov	r3, r0
 800fd74:	81fb      	strh	r3, [r7, #14]
 800fd76:	460b      	mov	r3, r1
 800fd78:	81bb      	strh	r3, [r7, #12]
    const uint8_t * bpp_opa_table_p;
    uint32_t bitmask_init;
    uint32_t bitmask;
    uint32_t bpp = g->bpp;
 800fd7a:	68bb      	ldr	r3, [r7, #8]
 800fd7c:	7a9b      	ldrb	r3, [r3, #10]
 800fd7e:	673b      	str	r3, [r7, #112]	; 0x70
    uint32_t shades;
    if(bpp == 3) bpp = 4;
 800fd80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fd82:	2b03      	cmp	r3, #3
 800fd84:	d101      	bne.n	800fd8a <draw_letter_normal+0x22>
 800fd86:	2304      	movs	r3, #4
 800fd88:	673b      	str	r3, [r7, #112]	; 0x70

    switch(bpp) {
 800fd8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fd8c:	3b01      	subs	r3, #1
 800fd8e:	2b07      	cmp	r3, #7
 800fd90:	f200 8202 	bhi.w	8010198 <draw_letter_normal+0x430>
 800fd94:	a201      	add	r2, pc, #4	; (adr r2, 800fd9c <draw_letter_normal+0x34>)
 800fd96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd9a:	bf00      	nop
 800fd9c:	0800fdbd 	.word	0x0800fdbd
 800fda0:	0800fdcb 	.word	0x0800fdcb
 800fda4:	08010199 	.word	0x08010199
 800fda8:	0800fdd9 	.word	0x0800fdd9
 800fdac:	08010199 	.word	0x08010199
 800fdb0:	08010199 	.word	0x08010199
 800fdb4:	08010199 	.word	0x08010199
 800fdb8:	0800fde7 	.word	0x0800fde7
        case 1:
            bpp_opa_table_p = _lv_bpp1_opa_table;
 800fdbc:	4b9f      	ldr	r3, [pc, #636]	; (801003c <draw_letter_normal+0x2d4>)
 800fdbe:	67fb      	str	r3, [r7, #124]	; 0x7c
            bitmask_init  = 0x80;
 800fdc0:	2380      	movs	r3, #128	; 0x80
 800fdc2:	67bb      	str	r3, [r7, #120]	; 0x78
            shades = 2;
 800fdc4:	2302      	movs	r3, #2
 800fdc6:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 800fdc8:	e015      	b.n	800fdf6 <draw_letter_normal+0x8e>
        case 2:
            bpp_opa_table_p = _lv_bpp2_opa_table;
 800fdca:	4b9d      	ldr	r3, [pc, #628]	; (8010040 <draw_letter_normal+0x2d8>)
 800fdcc:	67fb      	str	r3, [r7, #124]	; 0x7c
            bitmask_init  = 0xC0;
 800fdce:	23c0      	movs	r3, #192	; 0xc0
 800fdd0:	67bb      	str	r3, [r7, #120]	; 0x78
            shades = 4;
 800fdd2:	2304      	movs	r3, #4
 800fdd4:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 800fdd6:	e00e      	b.n	800fdf6 <draw_letter_normal+0x8e>
        case 4:
            bpp_opa_table_p = _lv_bpp4_opa_table;
 800fdd8:	4b9a      	ldr	r3, [pc, #616]	; (8010044 <draw_letter_normal+0x2dc>)
 800fdda:	67fb      	str	r3, [r7, #124]	; 0x7c
            bitmask_init  = 0xF0;
 800fddc:	23f0      	movs	r3, #240	; 0xf0
 800fdde:	67bb      	str	r3, [r7, #120]	; 0x78
            shades = 16;
 800fde0:	2310      	movs	r3, #16
 800fde2:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 800fde4:	e007      	b.n	800fdf6 <draw_letter_normal+0x8e>
        case 8:
            bpp_opa_table_p = _lv_bpp8_opa_table;
 800fde6:	4b98      	ldr	r3, [pc, #608]	; (8010048 <draw_letter_normal+0x2e0>)
 800fde8:	67fb      	str	r3, [r7, #124]	; 0x7c
            bitmask_init  = 0xFF;
 800fdea:	23ff      	movs	r3, #255	; 0xff
 800fdec:	67bb      	str	r3, [r7, #120]	; 0x78
            shades = 256;
 800fdee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fdf2:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;       /*No opa table, pixel value will be used directly*/
 800fdf4:	bf00      	nop
    }

    static lv_opa_t opa_table[256];
    static lv_opa_t prev_opa = LV_OPA_TRANSP;
    static uint32_t prev_bpp = 0;
    if(opa < LV_OPA_MAX) {
 800fdf6:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 800fdfa:	2bfc      	cmp	r3, #252	; 0xfc
 800fdfc:	d835      	bhi.n	800fe6a <draw_letter_normal+0x102>
        if(prev_opa != opa || prev_bpp != bpp) {
 800fdfe:	4b93      	ldr	r3, [pc, #588]	; (801004c <draw_letter_normal+0x2e4>)
 800fe00:	781b      	ldrb	r3, [r3, #0]
 800fe02:	f897 20a0 	ldrb.w	r2, [r7, #160]	; 0xa0
 800fe06:	429a      	cmp	r2, r3
 800fe08:	d104      	bne.n	800fe14 <draw_letter_normal+0xac>
 800fe0a:	4b91      	ldr	r3, [pc, #580]	; (8010050 <draw_letter_normal+0x2e8>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fe10:	429a      	cmp	r2, r3
 800fe12:	d021      	beq.n	800fe58 <draw_letter_normal+0xf0>
            uint32_t i;
            for(i = 0; i < shades; i++) {
 800fe14:	2300      	movs	r3, #0
 800fe16:	66bb      	str	r3, [r7, #104]	; 0x68
 800fe18:	e01a      	b.n	800fe50 <draw_letter_normal+0xe8>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800fe1a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fe1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe1e:	4413      	add	r3, r2
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	2bff      	cmp	r3, #255	; 0xff
 800fe24:	d00b      	beq.n	800fe3e <draw_letter_normal+0xd6>
 800fe26:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fe28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe2a:	4413      	add	r3, r2
 800fe2c:	781b      	ldrb	r3, [r3, #0]
 800fe2e:	461a      	mov	r2, r3
 800fe30:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 800fe34:	fb03 f302 	mul.w	r3, r3, r2
 800fe38:	121b      	asrs	r3, r3, #8
 800fe3a:	b2db      	uxtb	r3, r3
 800fe3c:	e001      	b.n	800fe42 <draw_letter_normal+0xda>
 800fe3e:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 800fe42:	4984      	ldr	r1, [pc, #528]	; (8010054 <draw_letter_normal+0x2ec>)
 800fe44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fe46:	440a      	add	r2, r1
 800fe48:	7013      	strb	r3, [r2, #0]
            for(i = 0; i < shades; i++) {
 800fe4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe4c:	3301      	adds	r3, #1
 800fe4e:	66bb      	str	r3, [r7, #104]	; 0x68
 800fe50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fe52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe54:	429a      	cmp	r2, r3
 800fe56:	d3e0      	bcc.n	800fe1a <draw_letter_normal+0xb2>
            }
        }
        bpp_opa_table_p = opa_table;
 800fe58:	4b7e      	ldr	r3, [pc, #504]	; (8010054 <draw_letter_normal+0x2ec>)
 800fe5a:	67fb      	str	r3, [r7, #124]	; 0x7c
        prev_opa = opa;
 800fe5c:	4a7b      	ldr	r2, [pc, #492]	; (801004c <draw_letter_normal+0x2e4>)
 800fe5e:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 800fe62:	7013      	strb	r3, [r2, #0]
        prev_bpp = bpp;
 800fe64:	4a7a      	ldr	r2, [pc, #488]	; (8010050 <draw_letter_normal+0x2e8>)
 800fe66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fe68:	6013      	str	r3, [r2, #0]
    }

    int32_t col, row;
    int32_t box_w = g->box_w;
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	885b      	ldrh	r3, [r3, #2]
 800fe6e:	657b      	str	r3, [r7, #84]	; 0x54
    int32_t box_h = g->box_h;
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	889b      	ldrh	r3, [r3, #4]
 800fe74:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 800fe76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe78:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fe7a:	fb02 f303 	mul.w	r3, r2, r3
 800fe7e:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Calculate the col/row start/end on the map*/
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe86:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fe8a:	429a      	cmp	r2, r3
 800fe8c:	da07      	bge.n	800fe9e <draw_letter_normal+0x136>
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe94:	461a      	mov	r2, r3
 800fe96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fe9a:	1ad3      	subs	r3, r2, r3
 800fe9c:	e000      	b.n	800fea0 <draw_letter_normal+0x138>
 800fe9e:	2300      	movs	r3, #0
 800fea0:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800fea2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fea8:	4413      	add	r3, r2
 800feaa:	687a      	ldr	r2, [r7, #4]
 800feac:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800feb0:	4293      	cmp	r3, r2
 800feb2:	dd08      	ble.n	800fec6 <draw_letter_normal+0x15e>
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800feba:	461a      	mov	r2, r3
 800febc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fec0:	1ad3      	subs	r3, r2, r3
 800fec2:	3301      	adds	r3, #1
 800fec4:	e000      	b.n	800fec8 <draw_letter_normal+0x160>
 800fec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fec8:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fed0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fed4:	429a      	cmp	r2, r3
 800fed6:	da07      	bge.n	800fee8 <draw_letter_normal+0x180>
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fede:	461a      	mov	r2, r3
 800fee0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fee4:	1ad3      	subs	r3, r2, r3
 800fee6:	e000      	b.n	800feea <draw_letter_normal+0x182>
 800fee8:	2300      	movs	r3, #0
 800feea:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800feec:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fef2:	4413      	add	r3, r2
 800fef4:	687a      	ldr	r2, [r7, #4]
 800fef6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800fefa:	4293      	cmp	r3, r2
 800fefc:	dd08      	ble.n	800ff10 <draw_letter_normal+0x1a8>
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ff04:	461a      	mov	r2, r3
 800ff06:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ff0a:	1ad3      	subs	r3, r2, r3
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	e000      	b.n	800ff12 <draw_letter_normal+0x1aa>
 800ff10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff12:	63fb      	str	r3, [r7, #60]	; 0x3c

    /*Move on the map too*/
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 800ff14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ff18:	fb02 f303 	mul.w	r3, r2, r3
 800ff1c:	4619      	mov	r1, r3
 800ff1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff20:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ff22:	fb02 f303 	mul.w	r3, r2, r3
 800ff26:	440b      	add	r3, r1
 800ff28:	63bb      	str	r3, [r7, #56]	; 0x38
    map_p += bit_ofs >> 3;
 800ff2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff2c:	08db      	lsrs	r3, r3, #3
 800ff2e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ff32:	4413      	add	r3, r2
 800ff34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    uint8_t letter_px;
    uint32_t col_bit;
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 800ff38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff3a:	f003 0307 	and.w	r3, r3, #7
 800ff3e:	65fb      	str	r3, [r7, #92]	; 0x5c

    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 800ff40:	f7fa f9f2 	bl	800a328 <_lv_refr_get_disp_refreshing>
 800ff44:	4603      	mov	r3, r0
 800ff46:	4618      	mov	r0, r3
 800ff48:	f00a fa1e 	bl	801a388 <lv_disp_get_hor_res>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800ff50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ff54:	fb02 f203 	mul.w	r2, r2, r3
 800ff58:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800ff5c:	4293      	cmp	r3, r2
 800ff5e:	bfa8      	it	ge
 800ff60:	4613      	movge	r3, r2
 800ff62:	633b      	str	r3, [r7, #48]	; 0x30
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 800ff64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff66:	f00c fcd7 	bl	801c918 <_lv_mem_buf_get>
 800ff6a:	62f8      	str	r0, [r7, #44]	; 0x2c
    int32_t mask_p = 0;
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	65bb      	str	r3, [r7, #88]	; 0x58

    lv_area_t fill_area;
    fill_area.x1 = col_start + pos_x;
 800ff70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff72:	b29a      	uxth	r2, r3
 800ff74:	89fb      	ldrh	r3, [r7, #14]
 800ff76:	4413      	add	r3, r2
 800ff78:	b29b      	uxth	r3, r3
 800ff7a:	b21b      	sxth	r3, r3
 800ff7c:	823b      	strh	r3, [r7, #16]
    fill_area.x2 = col_end  + pos_x - 1;
 800ff7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff80:	b29a      	uxth	r2, r3
 800ff82:	89fb      	ldrh	r3, [r7, #14]
 800ff84:	4413      	add	r3, r2
 800ff86:	b29b      	uxth	r3, r3
 800ff88:	3b01      	subs	r3, #1
 800ff8a:	b29b      	uxth	r3, r3
 800ff8c:	b21b      	sxth	r3, r3
 800ff8e:	82bb      	strh	r3, [r7, #20]
    fill_area.y1 = row_start + pos_y;
 800ff90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff92:	b29a      	uxth	r2, r3
 800ff94:	89bb      	ldrh	r3, [r7, #12]
 800ff96:	4413      	add	r3, r2
 800ff98:	b29b      	uxth	r3, r3
 800ff9a:	b21b      	sxth	r3, r3
 800ff9c:	827b      	strh	r3, [r7, #18]
    fill_area.y2 = fill_area.y1;
 800ff9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ffa2:	82fb      	strh	r3, [r7, #22]

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800ffa4:	f001 fe68 	bl	8011c78 <lv_draw_mask_get_cnt>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    uint32_t col_bit_max = 8 - bpp;
 800ffae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ffb0:	f1c3 0308 	rsb	r3, r3, #8
 800ffb4:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800ffb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ffb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffba:	441a      	add	r2, r3
 800ffbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffbe:	1ad3      	subs	r3, r2, r3
 800ffc0:	461a      	mov	r2, r3
 800ffc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ffc4:	fb02 f303 	mul.w	r3, r2, r3
 800ffc8:	623b      	str	r3, [r7, #32]

    for(row = row_start ; row < row_end; row++) {
 800ffca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffcc:	663b      	str	r3, [r7, #96]	; 0x60
 800ffce:	e0bc      	b.n	801014a <draw_letter_normal+0x3e2>
        int32_t mask_p_start = mask_p;
 800ffd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ffd2:	61fb      	str	r3, [r7, #28]

        bitmask = bitmask_init >> col_bit;
 800ffd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ffd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ffd8:	fa22 f303 	lsr.w	r3, r2, r3
 800ffdc:	677b      	str	r3, [r7, #116]	; 0x74
        for(col = col_start; col < col_end; col++) {
 800ffde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffe0:	667b      	str	r3, [r7, #100]	; 0x64
 800ffe2:	e048      	b.n	8010076 <draw_letter_normal+0x30e>
            /*Load the pixel's opacity into the mask*/
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 800ffe4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	461a      	mov	r2, r3
 800ffec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ffee:	401a      	ands	r2, r3
 800fff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fff4:	1acb      	subs	r3, r1, r3
 800fff6:	fa22 f303 	lsr.w	r3, r2, r3
 800fffa:	76bb      	strb	r3, [r7, #26]
            if(letter_px) {
 800fffc:	7ebb      	ldrb	r3, [r7, #26]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d008      	beq.n	8010014 <draw_letter_normal+0x2ac>
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 8010002:	7ebb      	ldrb	r3, [r7, #26]
 8010004:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010006:	441a      	add	r2, r3
 8010008:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801000a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801000c:	440b      	add	r3, r1
 801000e:	7812      	ldrb	r2, [r2, #0]
 8010010:	701a      	strb	r2, [r3, #0]
 8010012:	e004      	b.n	801001e <draw_letter_normal+0x2b6>
            }
            else {
                mask_buf[mask_p] = 0;
 8010014:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010018:	4413      	add	r3, r2
 801001a:	2200      	movs	r2, #0
 801001c:	701a      	strb	r2, [r3, #0]
            }

            /*Go to the next column*/
            if(col_bit < col_bit_max) {
 801001e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010022:	429a      	cmp	r2, r3
 8010024:	d218      	bcs.n	8010058 <draw_letter_normal+0x2f0>
                col_bit += bpp;
 8010026:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010028:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801002a:	4413      	add	r3, r2
 801002c:	65fb      	str	r3, [r7, #92]	; 0x5c
                bitmask = bitmask >> bpp;
 801002e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010030:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010032:	fa22 f303 	lsr.w	r3, r2, r3
 8010036:	677b      	str	r3, [r7, #116]	; 0x74
 8010038:	e017      	b.n	801006a <draw_letter_normal+0x302>
 801003a:	bf00      	nop
 801003c:	0802d99c 	.word	0x0802d99c
 8010040:	0802d9a0 	.word	0x0802d9a0
 8010044:	0802d9a4 	.word	0x0802d9a4
 8010048:	0802d9b4 	.word	0x0802d9b4
 801004c:	200192fc 	.word	0x200192fc
 8010050:	20019300 	.word	0x20019300
 8010054:	20019304 	.word	0x20019304
            }
            else {
                col_bit = 0;
 8010058:	2300      	movs	r3, #0
 801005a:	65fb      	str	r3, [r7, #92]	; 0x5c
                bitmask = bitmask_init;
 801005c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801005e:	677b      	str	r3, [r7, #116]	; 0x74
                map_p++;
 8010060:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010064:	3301      	adds	r3, #1
 8010066:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            }

            /*Next mask byte*/
            mask_p++;
 801006a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801006c:	3301      	adds	r3, #1
 801006e:	65bb      	str	r3, [r7, #88]	; 0x58
        for(col = col_start; col < col_end; col++) {
 8010070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010072:	3301      	adds	r3, #1
 8010074:	667b      	str	r3, [r7, #100]	; 0x64
 8010076:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801007a:	429a      	cmp	r2, r3
 801007c:	dbb2      	blt.n	800ffe4 <draw_letter_normal+0x27c>
        }

        /*Apply masks if any*/
        if(other_mask_cnt) {
 801007e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010082:	2b00      	cmp	r3, #0
 8010084:	d023      	beq.n	80100ce <draw_letter_normal+0x366>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
 8010086:	69fb      	ldr	r3, [r7, #28]
 8010088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801008a:	18d4      	adds	r4, r2, r3
 801008c:	f9b7 5010 	ldrsh.w	r5, [r7, #16]
 8010090:	f9b7 6016 	ldrsh.w	r6, [r7, #22]
 8010094:	f107 0310 	add.w	r3, r7, #16
 8010098:	4618      	mov	r0, r3
 801009a:	f7ff f80b 	bl	800f0b4 <lv_area_get_width>
 801009e:	4603      	mov	r3, r0
 80100a0:	4632      	mov	r2, r6
 80100a2:	4629      	mov	r1, r5
 80100a4:	4620      	mov	r0, r4
 80100a6:	f001 fd4b 	bl	8011b40 <lv_draw_mask_apply>
 80100aa:	4603      	mov	r3, r0
 80100ac:	76fb      	strb	r3, [r7, #27]
                                                             lv_area_get_width(&fill_area));
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 80100ae:	7efb      	ldrb	r3, [r7, #27]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d10c      	bne.n	80100ce <draw_letter_normal+0x366>
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
 80100b4:	69fb      	ldr	r3, [r7, #28]
 80100b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80100b8:	18d4      	adds	r4, r2, r3
 80100ba:	f107 0310 	add.w	r3, r7, #16
 80100be:	4618      	mov	r0, r3
 80100c0:	f7fe fff8 	bl	800f0b4 <lv_area_get_width>
 80100c4:	4603      	mov	r3, r0
 80100c6:	4619      	mov	r1, r3
 80100c8:	4620      	mov	r0, r4
 80100ca:	f00d f82e 	bl	801d12a <_lv_memset_00>
            }
        }

        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 80100ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80100d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100d2:	1ad3      	subs	r3, r2, r3
 80100d4:	461a      	mov	r2, r3
 80100d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100d8:	4413      	add	r3, r2
 80100da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100dc:	429a      	cmp	r2, r3
 80100de:	d907      	bls.n	80100f0 <draw_letter_normal+0x388>
            fill_area.y2 ++;
 80100e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80100e4:	b29b      	uxth	r3, r3
 80100e6:	3301      	adds	r3, #1
 80100e8:	b29b      	uxth	r3, r3
 80100ea:	b21b      	sxth	r3, r3
 80100ec:	82fb      	strh	r3, [r7, #22]
 80100ee:	e01a      	b.n	8010126 <draw_letter_normal+0x3be>
        }
        else {
            _lv_blend_fill(clip_area, &fill_area,
 80100f0:	f107 0110 	add.w	r1, r7, #16
 80100f4:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 80100f8:	9302      	str	r3, [sp, #8]
 80100fa:	23ff      	movs	r3, #255	; 0xff
 80100fc:	9301      	str	r3, [sp, #4]
 80100fe:	2302      	movs	r3, #2
 8010100:	9300      	str	r3, [sp, #0]
 8010102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010104:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f7fc faeb 	bl	800c6e4 <_lv_blend_fill>
                           color, mask_buf, LV_DRAW_MASK_RES_CHANGED, LV_OPA_COVER,
                           blend_mode);

            fill_area.y1 = fill_area.y2 + 1;
 801010e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010112:	b29b      	uxth	r3, r3
 8010114:	3301      	adds	r3, #1
 8010116:	b29b      	uxth	r3, r3
 8010118:	b21b      	sxth	r3, r3
 801011a:	827b      	strh	r3, [r7, #18]
            fill_area.y2 = fill_area.y1;
 801011c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010120:	82fb      	strh	r3, [r7, #22]
            mask_p = 0;
 8010122:	2300      	movs	r3, #0
 8010124:	65bb      	str	r3, [r7, #88]	; 0x58
        }

        col_bit += col_bit_row_ofs;
 8010126:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010128:	6a3b      	ldr	r3, [r7, #32]
 801012a:	4413      	add	r3, r2
 801012c:	65fb      	str	r3, [r7, #92]	; 0x5c
        map_p += (col_bit >> 3);
 801012e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010130:	08db      	lsrs	r3, r3, #3
 8010132:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010136:	4413      	add	r3, r2
 8010138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        col_bit = col_bit & 0x7;
 801013c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801013e:	f003 0307 	and.w	r3, r3, #7
 8010142:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(row = row_start ; row < row_end; row++) {
 8010144:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010146:	3301      	adds	r3, #1
 8010148:	663b      	str	r3, [r7, #96]	; 0x60
 801014a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801014c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801014e:	429a      	cmp	r2, r3
 8010150:	f6ff af3e 	blt.w	800ffd0 <draw_letter_normal+0x268>
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 8010154:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8010158:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801015c:	429a      	cmp	r2, r3
 801015e:	d017      	beq.n	8010190 <draw_letter_normal+0x428>
        fill_area.y2--;
 8010160:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010164:	b29b      	uxth	r3, r3
 8010166:	3b01      	subs	r3, #1
 8010168:	b29b      	uxth	r3, r3
 801016a:	b21b      	sxth	r3, r3
 801016c:	82fb      	strh	r3, [r7, #22]
        _lv_blend_fill(clip_area, &fill_area,
 801016e:	f107 0110 	add.w	r1, r7, #16
 8010172:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8010176:	9302      	str	r3, [sp, #8]
 8010178:	23ff      	movs	r3, #255	; 0xff
 801017a:	9301      	str	r3, [sp, #4]
 801017c:	2302      	movs	r3, #2
 801017e:	9300      	str	r3, [sp, #0]
 8010180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010182:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8010186:	6878      	ldr	r0, [r7, #4]
 8010188:	f7fc faac 	bl	800c6e4 <_lv_blend_fill>
                       color, mask_buf, LV_DRAW_MASK_RES_CHANGED, LV_OPA_COVER,
                       blend_mode);
        mask_p = 0;
 801018c:	2300      	movs	r3, #0
 801018e:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    _lv_mem_buf_release(mask_buf);
 8010190:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010192:	f00c fc9f 	bl	801cad4 <_lv_mem_buf_release>
 8010196:	e000      	b.n	801019a <draw_letter_normal+0x432>
            return; /*Invalid bpp. Can't render the letter*/
 8010198:	bf00      	nop
}
 801019a:	3784      	adds	r7, #132	; 0x84
 801019c:	46bd      	mov	sp, r7
 801019e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080101a0 <draw_letter_subpx>:

static void draw_letter_subpx(lv_coord_t pos_x, lv_coord_t pos_y, lv_font_glyph_dsc_t * g, const lv_area_t * clip_area,
                              const uint8_t * map_p, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 80101a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101a2:	b0ab      	sub	sp, #172	; 0xac
 80101a4:	af04      	add	r7, sp, #16
 80101a6:	60ba      	str	r2, [r7, #8]
 80101a8:	607b      	str	r3, [r7, #4]
 80101aa:	4603      	mov	r3, r0
 80101ac:	81fb      	strh	r3, [r7, #14]
 80101ae:	460b      	mov	r3, r1
 80101b0:	81bb      	strh	r3, [r7, #12]
#if LV_USE_FONT_SUBPX
    const uint8_t * bpp_opa_table;
    uint32_t bitmask_init;
    uint32_t bitmask;
    uint32_t bpp = g->bpp;
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	7a9b      	ldrb	r3, [r3, #10]
 80101b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if(bpp == 3) bpp = 4;
 80101ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80101be:	2b03      	cmp	r3, #3
 80101c0:	d102      	bne.n	80101c8 <draw_letter_subpx+0x28>
 80101c2:	2304      	movs	r3, #4
 80101c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    switch(bpp) {
 80101c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80101cc:	3b01      	subs	r3, #1
 80101ce:	2b07      	cmp	r3, #7
 80101d0:	f200 82d2 	bhi.w	8010778 <draw_letter_subpx+0x5d8>
 80101d4:	a201      	add	r2, pc, #4	; (adr r2, 80101dc <draw_letter_subpx+0x3c>)
 80101d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101da:	bf00      	nop
 80101dc:	080101fd 	.word	0x080101fd
 80101e0:	0801020b 	.word	0x0801020b
 80101e4:	08010779 	.word	0x08010779
 80101e8:	08010219 	.word	0x08010219
 80101ec:	08010779 	.word	0x08010779
 80101f0:	08010779 	.word	0x08010779
 80101f4:	08010779 	.word	0x08010779
 80101f8:	08010227 	.word	0x08010227
        case 1:
            bpp_opa_table = _lv_bpp1_opa_table;
 80101fc:	4bb9      	ldr	r3, [pc, #740]	; (80104e4 <draw_letter_subpx+0x344>)
 80101fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            bitmask_init  = 0x80;
 8010202:	2380      	movs	r3, #128	; 0x80
 8010204:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            break;
 8010208:	e014      	b.n	8010234 <draw_letter_subpx+0x94>
        case 2:
            bpp_opa_table = _lv_bpp2_opa_table;
 801020a:	4bb7      	ldr	r3, [pc, #732]	; (80104e8 <draw_letter_subpx+0x348>)
 801020c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            bitmask_init  = 0xC0;
 8010210:	23c0      	movs	r3, #192	; 0xc0
 8010212:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            break;
 8010216:	e00d      	b.n	8010234 <draw_letter_subpx+0x94>
        case 4:
            bpp_opa_table = _lv_bpp4_opa_table;
 8010218:	4bb4      	ldr	r3, [pc, #720]	; (80104ec <draw_letter_subpx+0x34c>)
 801021a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            bitmask_init  = 0xF0;
 801021e:	23f0      	movs	r3, #240	; 0xf0
 8010220:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            break;
 8010224:	e006      	b.n	8010234 <draw_letter_subpx+0x94>
        case 8:
            bpp_opa_table = _lv_bpp8_opa_table;
 8010226:	4bb2      	ldr	r3, [pc, #712]	; (80104f0 <draw_letter_subpx+0x350>)
 8010228:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            bitmask_init  = 0xFF;
 801022c:	23ff      	movs	r3, #255	; 0xff
 801022e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            break;       /*No opa table, pixel value will be used directly*/
 8010232:	bf00      	nop
            return; /*Invalid bpp. Can't render the letter*/
    }

    int32_t col, row;

    int32_t box_w = g->box_w;
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	885b      	ldrh	r3, [r3, #2]
 8010238:	66bb      	str	r3, [r7, #104]	; 0x68
    int32_t box_h = g->box_h;
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	889b      	ldrh	r3, [r3, #4]
 801023e:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 8010240:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010242:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010246:	fb02 f303 	mul.w	r3, r2, r3
 801024a:	663b      	str	r3, [r7, #96]	; 0x60

    /* Calculate the col/row start/end on the map*/
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010252:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010256:	429a      	cmp	r2, r3
 8010258:	da0a      	bge.n	8010270 <draw_letter_subpx+0xd0>
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010260:	461a      	mov	r2, r3
 8010262:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010266:	1ad2      	subs	r2, r2, r3
 8010268:	4613      	mov	r3, r2
 801026a:	005b      	lsls	r3, r3, #1
 801026c:	4413      	add	r3, r2
 801026e:	e000      	b.n	8010272 <draw_letter_subpx+0xd2>
 8010270:	2300      	movs	r3, #0
 8010272:	65fb      	str	r3, [r7, #92]	; 0x5c
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
 8010274:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010278:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801027a:	499e      	ldr	r1, [pc, #632]	; (80104f4 <draw_letter_subpx+0x354>)
 801027c:	fb81 0103 	smull	r0, r1, r1, r3
 8010280:	17db      	asrs	r3, r3, #31
 8010282:	1acb      	subs	r3, r1, r3
 8010284:	4413      	add	r3, r2
 8010286:	687a      	ldr	r2, [r7, #4]
 8010288:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801028c:	4293      	cmp	r3, r2
 801028e:	dd0b      	ble.n	80102a8 <draw_letter_subpx+0x108>
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010296:	461a      	mov	r2, r3
 8010298:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801029c:	1ad3      	subs	r3, r2, r3
 801029e:	1c5a      	adds	r2, r3, #1
 80102a0:	4613      	mov	r3, r2
 80102a2:	005b      	lsls	r3, r3, #1
 80102a4:	4413      	add	r3, r2
 80102a6:	e000      	b.n	80102aa <draw_letter_subpx+0x10a>
 80102a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80102aa:	65bb      	str	r3, [r7, #88]	; 0x58
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80102b2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80102b6:	429a      	cmp	r2, r3
 80102b8:	da07      	bge.n	80102ca <draw_letter_subpx+0x12a>
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80102c0:	461a      	mov	r2, r3
 80102c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80102c6:	1ad3      	subs	r3, r2, r3
 80102c8:	e000      	b.n	80102cc <draw_letter_subpx+0x12c>
 80102ca:	2300      	movs	r3, #0
 80102cc:	657b      	str	r3, [r7, #84]	; 0x54
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 80102ce:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80102d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80102d4:	4413      	add	r3, r2
 80102d6:	687a      	ldr	r2, [r7, #4]
 80102d8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80102dc:	4293      	cmp	r3, r2
 80102de:	dd08      	ble.n	80102f2 <draw_letter_subpx+0x152>
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80102e6:	461a      	mov	r2, r3
 80102e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80102ec:	1ad3      	subs	r3, r2, r3
 80102ee:	3301      	adds	r3, #1
 80102f0:	e000      	b.n	80102f4 <draw_letter_subpx+0x154>
 80102f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80102f4:	653b      	str	r3, [r7, #80]	; 0x50

    /*Move on the map too*/
    int32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 80102f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80102fa:	fb02 f303 	mul.w	r3, r2, r3
 80102fe:	4619      	mov	r1, r3
 8010300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010302:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010306:	fb02 f303 	mul.w	r3, r2, r3
 801030a:	440b      	add	r3, r1
 801030c:	64fb      	str	r3, [r7, #76]	; 0x4c
    map_p += bit_ofs >> 3;
 801030e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010310:	10db      	asrs	r3, r3, #3
 8010312:	461a      	mov	r2, r3
 8010314:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010318:	4413      	add	r3, r2
 801031a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    uint8_t letter_px;
    lv_opa_t px_opa;
    int32_t col_bit;
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 801031e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010320:	f003 0307 	and.w	r3, r3, #7
 8010324:	67bb      	str	r3, [r7, #120]	; 0x78

    int32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : g->box_w * g->box_h;
 8010326:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010328:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801032a:	fb02 f303 	mul.w	r3, r2, r3
 801032e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8010332:	dc07      	bgt.n	8010344 <draw_letter_subpx+0x1a4>
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	885b      	ldrh	r3, [r3, #2]
 8010338:	461a      	mov	r2, r3
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	889b      	ldrh	r3, [r3, #4]
 801033e:	fb03 f302 	mul.w	r3, r3, r2
 8010342:	e001      	b.n	8010348 <draw_letter_subpx+0x1a8>
 8010344:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8010348:	64bb      	str	r3, [r7, #72]	; 0x48
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 801034a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801034c:	4618      	mov	r0, r3
 801034e:	f00c fae3 	bl	801c918 <_lv_mem_buf_get>
 8010352:	6478      	str	r0, [r7, #68]	; 0x44
    int32_t mask_p = 0;
 8010354:	2300      	movs	r3, #0
 8010356:	677b      	str	r3, [r7, #116]	; 0x74

    lv_color_t * color_buf = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 8010358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801035a:	009b      	lsls	r3, r3, #2
 801035c:	4618      	mov	r0, r3
 801035e:	f00c fadb 	bl	801c918 <_lv_mem_buf_get>
 8010362:	6438      	str	r0, [r7, #64]	; 0x40

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8010364:	f7f9 ffe0 	bl	800a328 <_lv_refr_get_disp_refreshing>
 8010368:	63f8      	str	r0, [r7, #60]	; 0x3c
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 801036a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801036c:	f00a f8cc 	bl	801a508 <lv_disp_get_buf>
 8010370:	63b8      	str	r0, [r7, #56]	; 0x38

    int32_t vdb_width     = lv_area_get_width(&vdb->area);
 8010372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010374:	3310      	adds	r3, #16
 8010376:	4618      	mov	r0, r3
 8010378:	f7fe fe9c 	bl	800f0b4 <lv_area_get_width>
 801037c:	4603      	mov	r3, r0
 801037e:	637b      	str	r3, [r7, #52]	; 0x34
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 8010380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010382:	689b      	ldr	r3, [r3, #8]
 8010384:	673b      	str	r3, [r7, #112]	; 0x70

    /*Set a pointer on VDB to the first pixel of the letter*/
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 8010386:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801038a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801038c:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8010390:	1a9b      	subs	r3, r3, r2
 8010392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010394:	fb02 f203 	mul.w	r2, r2, r3
 8010398:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801039c:	4413      	add	r3, r2
 801039e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103a0:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80103a4:	1a9b      	subs	r3, r3, r2
 80103a6:	009b      	lsls	r3, r3, #2
 80103a8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80103aa:	4413      	add	r3, r2
 80103ac:	673b      	str	r3, [r7, #112]	; 0x70

    /*If the letter is partially out of mask the move there on VDB*/
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
 80103ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103b2:	fb02 f203 	mul.w	r2, r2, r3
 80103b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103b8:	494e      	ldr	r1, [pc, #312]	; (80104f4 <draw_letter_subpx+0x354>)
 80103ba:	fb81 0103 	smull	r0, r1, r1, r3
 80103be:	17db      	asrs	r3, r3, #31
 80103c0:	1acb      	subs	r3, r1, r3
 80103c2:	4413      	add	r3, r2
 80103c4:	009b      	lsls	r3, r3, #2
 80103c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80103c8:	4413      	add	r3, r2
 80103ca:	673b      	str	r3, [r7, #112]	; 0x70

    lv_area_t map_area;
    map_area.x1 = col_start / 3 + pos_x;
 80103cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103ce:	4a49      	ldr	r2, [pc, #292]	; (80104f4 <draw_letter_subpx+0x354>)
 80103d0:	fb82 1203 	smull	r1, r2, r2, r3
 80103d4:	17db      	asrs	r3, r3, #31
 80103d6:	1ad3      	subs	r3, r2, r3
 80103d8:	b29a      	uxth	r2, r3
 80103da:	89fb      	ldrh	r3, [r7, #14]
 80103dc:	4413      	add	r3, r2
 80103de:	b29b      	uxth	r3, r3
 80103e0:	b21b      	sxth	r3, r3
 80103e2:	843b      	strh	r3, [r7, #32]
    map_area.x2 = col_end / 3  + pos_x - 1;
 80103e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103e6:	4a43      	ldr	r2, [pc, #268]	; (80104f4 <draw_letter_subpx+0x354>)
 80103e8:	fb82 1203 	smull	r1, r2, r2, r3
 80103ec:	17db      	asrs	r3, r3, #31
 80103ee:	1ad3      	subs	r3, r2, r3
 80103f0:	b29a      	uxth	r2, r3
 80103f2:	89fb      	ldrh	r3, [r7, #14]
 80103f4:	4413      	add	r3, r2
 80103f6:	b29b      	uxth	r3, r3
 80103f8:	3b01      	subs	r3, #1
 80103fa:	b29b      	uxth	r3, r3
 80103fc:	b21b      	sxth	r3, r3
 80103fe:	84bb      	strh	r3, [r7, #36]	; 0x24
    map_area.y1 = row_start + pos_y;
 8010400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010402:	b29a      	uxth	r2, r3
 8010404:	89bb      	ldrh	r3, [r7, #12]
 8010406:	4413      	add	r3, r2
 8010408:	b29b      	uxth	r3, r3
 801040a:	b21b      	sxth	r3, r3
 801040c:	847b      	strh	r3, [r7, #34]	; 0x22
    map_area.y2 = map_area.y1;
 801040e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010412:	84fb      	strh	r3, [r7, #38]	; 0x26

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 8010414:	f001 fc30 	bl	8011c78 <lv_draw_mask_get_cnt>
 8010418:	4603      	mov	r3, r0
 801041a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    uint8_t font_rgb[3];

#if LV_COLOR_16_SWAP == 0
    uint8_t txt_rgb[3] = {color.ch.red, color.ch.green, color.ch.blue};
 801041e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8010422:	763b      	strb	r3, [r7, #24]
 8010424:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8010428:	767b      	strb	r3, [r7, #25]
 801042a:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 801042e:	76bb      	strb	r3, [r7, #26]
#else
    uint8_t txt_rgb[3] = {color.ch.red, (color.ch.green_h << 3) + color.ch.green_l, color.ch.blue};
#endif

    for(row = row_start ; row < row_end; row++) {
 8010430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010432:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010436:	e176      	b.n	8010726 <draw_letter_subpx+0x586>
        uint32_t subpx_cnt = 0;
 8010438:	2300      	movs	r3, #0
 801043a:	66fb      	str	r3, [r7, #108]	; 0x6c
        bitmask = bitmask_init >> col_bit;
 801043c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8010440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010442:	fa22 f303 	lsr.w	r3, r2, r3
 8010446:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        int32_t mask_p_start = mask_p;
 801044a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801044c:	62fb      	str	r3, [r7, #44]	; 0x2c

        for(col = col_start; col < col_end; col++) {
 801044e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010450:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010454:	e0e0      	b.n	8010618 <draw_letter_subpx+0x478>
            /*Load the pixel's opacity into the mask*/
            letter_px = (*map_p & bitmask) >> (8 - col_bit - bpp);
 8010456:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801045a:	781b      	ldrb	r3, [r3, #0]
 801045c:	461a      	mov	r2, r3
 801045e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010462:	401a      	ands	r2, r3
 8010464:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010466:	4259      	negs	r1, r3
 8010468:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801046c:	1acb      	subs	r3, r1, r3
 801046e:	3308      	adds	r3, #8
 8010470:	fa22 f303 	lsr.w	r3, r2, r3
 8010474:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            if(letter_px != 0) {
 8010478:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801047c:	2b00      	cmp	r3, #0
 801047e:	d03b      	beq.n	80104f8 <draw_letter_subpx+0x358>
                if(opa == LV_OPA_COVER) {
 8010480:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8010484:	2bff      	cmp	r3, #255	; 0xff
 8010486:	d10f      	bne.n	80104a8 <draw_letter_subpx+0x308>
                    px_opa = bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 8010488:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801048c:	2b08      	cmp	r3, #8
 801048e:	d006      	beq.n	801049e <draw_letter_subpx+0x2fe>
 8010490:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8010494:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010498:	4413      	add	r3, r2
 801049a:	781b      	ldrb	r3, [r3, #0]
 801049c:	e001      	b.n	80104a2 <draw_letter_subpx+0x302>
 801049e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80104a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80104a6:	e02a      	b.n	80104fe <draw_letter_subpx+0x35e>
                }
                else {
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
 80104a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80104ac:	2b08      	cmp	r3, #8
 80104ae:	d108      	bne.n	80104c2 <draw_letter_subpx+0x322>
 80104b0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80104b4:	f897 20b8 	ldrb.w	r2, [r7, #184]	; 0xb8
 80104b8:	fb02 f303 	mul.w	r3, r2, r3
 80104bc:	0a1b      	lsrs	r3, r3, #8
 80104be:	b2db      	uxtb	r3, r3
 80104c0:	e00c      	b.n	80104dc <draw_letter_subpx+0x33c>
                             : (uint32_t)((uint32_t)bpp_opa_table[letter_px] * opa) >> 8;
 80104c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80104c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80104ca:	4413      	add	r3, r2
 80104cc:	781b      	ldrb	r3, [r3, #0]
 80104ce:	461a      	mov	r2, r3
 80104d0:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 80104d4:	fb03 f302 	mul.w	r3, r3, r2
 80104d8:	0a1b      	lsrs	r3, r3, #8
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
 80104da:	b2db      	uxtb	r3, r3
 80104dc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80104e0:	e00d      	b.n	80104fe <draw_letter_subpx+0x35e>
 80104e2:	bf00      	nop
 80104e4:	0802d99c 	.word	0x0802d99c
 80104e8:	0802d9a0 	.word	0x0802d9a0
 80104ec:	0802d9a4 	.word	0x0802d9a4
 80104f0:	0802d9b4 	.word	0x0802d9b4
 80104f4:	55555556 	.word	0x55555556
                }
            }
            else {
                px_opa = 0;
 80104f8:	2300      	movs	r3, #0
 80104fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }

            font_rgb[subpx_cnt] = px_opa;
 80104fe:	f107 021c 	add.w	r2, r7, #28
 8010502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010504:	4413      	add	r3, r2
 8010506:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 801050a:	701a      	strb	r2, [r3, #0]

            subpx_cnt ++;
 801050c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801050e:	3301      	adds	r3, #1
 8010510:	66fb      	str	r3, [r7, #108]	; 0x6c
            if(subpx_cnt == 3) {
 8010512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010514:	2b03      	cmp	r3, #3
 8010516:	d159      	bne.n	80105cc <draw_letter_subpx+0x42c>
                subpx_cnt = 0;
 8010518:	2300      	movs	r3, #0
 801051a:	66fb      	str	r3, [r7, #108]	; 0x6c

                lv_color_t res_color;
#if LV_COLOR_16_SWAP == 0
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
 801051c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801051e:	789b      	ldrb	r3, [r3, #2]
 8010520:	743b      	strb	r3, [r7, #16]
 8010522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010524:	785b      	ldrb	r3, [r3, #1]
 8010526:	747b      	strb	r3, [r7, #17]
 8010528:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801052a:	781b      	ldrb	r3, [r3, #0]
 801052c:	74bb      	strb	r3, [r7, #18]

#if LV_FONT_SUBPX_BGR
                res_color.ch.blue = (uint32_t)((uint32_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
                res_color.ch.red = (uint32_t)((uint32_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
#else
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
 801052e:	7e3b      	ldrb	r3, [r7, #24]
 8010530:	7f3a      	ldrb	r2, [r7, #28]
 8010532:	fb02 f203 	mul.w	r2, r2, r3
 8010536:	7c3b      	ldrb	r3, [r7, #16]
 8010538:	4619      	mov	r1, r3
 801053a:	7f3b      	ldrb	r3, [r7, #28]
 801053c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8010540:	fb03 f301 	mul.w	r3, r3, r1
 8010544:	4413      	add	r3, r2
 8010546:	0a1b      	lsrs	r3, r3, #8
 8010548:	b2db      	uxtb	r3, r3
 801054a:	75bb      	strb	r3, [r7, #22]
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
 801054c:	7ebb      	ldrb	r3, [r7, #26]
 801054e:	7fba      	ldrb	r2, [r7, #30]
 8010550:	fb02 f203 	mul.w	r2, r2, r3
 8010554:	7cbb      	ldrb	r3, [r7, #18]
 8010556:	4619      	mov	r1, r3
 8010558:	7fbb      	ldrb	r3, [r7, #30]
 801055a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801055e:	fb03 f301 	mul.w	r3, r3, r1
 8010562:	4413      	add	r3, r2
 8010564:	0a1b      	lsrs	r3, r3, #8
 8010566:	b2db      	uxtb	r3, r3
 8010568:	753b      	strb	r3, [r7, #20]
#endif

#if LV_COLOR_16_SWAP == 0
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
 801056a:	7e7b      	ldrb	r3, [r7, #25]
 801056c:	7f7a      	ldrb	r2, [r7, #29]
 801056e:	fb02 f303 	mul.w	r3, r2, r3
 8010572:	7c7a      	ldrb	r2, [r7, #17]
 8010574:	4611      	mov	r1, r2
 8010576:	7f7a      	ldrb	r2, [r7, #29]
 8010578:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801057c:	fb02 f201 	mul.w	r2, r2, r1
 8010580:	4413      	add	r3, r2
 8010582:	0a1b      	lsrs	r3, r3, #8
 8010584:	b2db      	uxtb	r3, r3
 8010586:	757b      	strb	r3, [r7, #21]
                res_color.ch.green_h = green >> 3;
                res_color.ch.green_l = green & 0x7;
#endif

#if LV_COLOR_DEPTH == 32
                res_color.ch.alpha =  0xff;
 8010588:	23ff      	movs	r3, #255	; 0xff
 801058a:	75fb      	strb	r3, [r7, #23]
#endif

                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
 801058c:	7f3b      	ldrb	r3, [r7, #28]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d10b      	bne.n	80105aa <draw_letter_subpx+0x40a>
 8010592:	7f7b      	ldrb	r3, [r7, #29]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d108      	bne.n	80105aa <draw_letter_subpx+0x40a>
 8010598:	7fbb      	ldrb	r3, [r7, #30]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d105      	bne.n	80105aa <draw_letter_subpx+0x40a>
 801059e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80105a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80105a2:	4413      	add	r3, r2
 80105a4:	2200      	movs	r2, #0
 80105a6:	701a      	strb	r2, [r3, #0]
 80105a8:	e004      	b.n	80105b4 <draw_letter_subpx+0x414>
                else mask_buf[mask_p] = LV_OPA_COVER;
 80105aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80105ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80105ae:	4413      	add	r3, r2
 80105b0:	22ff      	movs	r2, #255	; 0xff
 80105b2:	701a      	strb	r2, [r3, #0]
                color_buf[mask_p] = res_color;
 80105b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80105b6:	009b      	lsls	r3, r3, #2
 80105b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80105ba:	4413      	add	r3, r2
 80105bc:	697a      	ldr	r2, [r7, #20]
 80105be:	601a      	str	r2, [r3, #0]

                /*Next mask byte*/
                mask_p++;
 80105c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80105c2:	3301      	adds	r3, #1
 80105c4:	677b      	str	r3, [r7, #116]	; 0x74
                vdb_buf_tmp++;
 80105c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80105c8:	3304      	adds	r3, #4
 80105ca:	673b      	str	r3, [r7, #112]	; 0x70
            }

            /*Go to the next column*/
            if(col_bit < (int32_t)(8 - bpp)) {
 80105cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80105d0:	f1c3 0308 	rsb	r3, r3, #8
 80105d4:	461a      	mov	r2, r3
 80105d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105d8:	4293      	cmp	r3, r2
 80105da:	da0d      	bge.n	80105f8 <draw_letter_subpx+0x458>
                col_bit += bpp;
 80105dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80105de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80105e2:	4413      	add	r3, r2
 80105e4:	67bb      	str	r3, [r7, #120]	; 0x78
                bitmask = bitmask >> bpp;
 80105e6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80105ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80105ee:	fa22 f303 	lsr.w	r3, r2, r3
 80105f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80105f6:	e00a      	b.n	801060e <draw_letter_subpx+0x46e>
            }
            else {
                col_bit = 0;
 80105f8:	2300      	movs	r3, #0
 80105fa:	67bb      	str	r3, [r7, #120]	; 0x78
                bitmask = bitmask_init;
 80105fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010600:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                map_p++;
 8010604:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010608:	3301      	adds	r3, #1
 801060a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        for(col = col_start; col < col_end; col++) {
 801060e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010612:	3301      	adds	r3, #1
 8010614:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010618:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801061c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801061e:	429a      	cmp	r2, r3
 8010620:	f6ff af19 	blt.w	8010456 <draw_letter_subpx+0x2b6>
            }
        }

        /*Apply masks if any*/
        if(other_mask_cnt) {
 8010624:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010628:	2b00      	cmp	r3, #0
 801062a:	d025      	beq.n	8010678 <draw_letter_subpx+0x4d8>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, map_area.x1, map_area.y2,
 801062c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801062e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010630:	18d4      	adds	r4, r2, r3
 8010632:	f9b7 5020 	ldrsh.w	r5, [r7, #32]
 8010636:	f9b7 6026 	ldrsh.w	r6, [r7, #38]	; 0x26
 801063a:	f107 0320 	add.w	r3, r7, #32
 801063e:	4618      	mov	r0, r3
 8010640:	f7fe fd38 	bl	800f0b4 <lv_area_get_width>
 8010644:	4603      	mov	r3, r0
 8010646:	4632      	mov	r2, r6
 8010648:	4629      	mov	r1, r5
 801064a:	4620      	mov	r0, r4
 801064c:	f001 fa78 	bl	8011b40 <lv_draw_mask_apply>
 8010650:	4603      	mov	r3, r0
 8010652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                                             lv_area_get_width(&map_area));
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 8010656:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801065a:	2b00      	cmp	r3, #0
 801065c:	d10c      	bne.n	8010678 <draw_letter_subpx+0x4d8>
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&map_area));
 801065e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010660:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010662:	18d4      	adds	r4, r2, r3
 8010664:	f107 0320 	add.w	r3, r7, #32
 8010668:	4618      	mov	r0, r3
 801066a:	f7fe fd23 	bl	800f0b4 <lv_area_get_width>
 801066e:	4603      	mov	r3, r0
 8010670:	4619      	mov	r1, r3
 8010672:	4620      	mov	r0, r4
 8010674:	f00c fd59 	bl	801d12a <_lv_memset_00>
            }
        }

        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 8010678:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801067a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801067c:	1ad2      	subs	r2, r2, r3
 801067e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010680:	4413      	add	r3, r2
 8010682:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010684:	429a      	cmp	r2, r3
 8010686:	dd07      	ble.n	8010698 <draw_letter_subpx+0x4f8>
            map_area.y2 ++;
 8010688:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801068c:	b29b      	uxth	r3, r3
 801068e:	3301      	adds	r3, #1
 8010690:	b29b      	uxth	r3, r3
 8010692:	b21b      	sxth	r3, r3
 8010694:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010696:	e01a      	b.n	80106ce <draw_letter_subpx+0x52e>
        }
        else {
            _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
 8010698:	f107 0120 	add.w	r1, r7, #32
 801069c:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 80106a0:	9302      	str	r3, [sp, #8]
 80106a2:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 80106a6:	9301      	str	r3, [sp, #4]
 80106a8:	2302      	movs	r3, #2
 80106aa:	9300      	str	r3, [sp, #0]
 80106ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80106b0:	6878      	ldr	r0, [r7, #4]
 80106b2:	f7fc f8e8 	bl	800c886 <_lv_blend_map>

            map_area.y1 = map_area.y2 + 1;
 80106b6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80106ba:	b29b      	uxth	r3, r3
 80106bc:	3301      	adds	r3, #1
 80106be:	b29b      	uxth	r3, r3
 80106c0:	b21b      	sxth	r3, r3
 80106c2:	847b      	strh	r3, [r7, #34]	; 0x22
            map_area.y2 = map_area.y1;
 80106c4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80106c8:	84fb      	strh	r3, [r7, #38]	; 0x26
            mask_p = 0;
 80106ca:	2300      	movs	r3, #0
 80106cc:	677b      	str	r3, [r7, #116]	; 0x74
        }

        col_bit += ((box_w - col_end) + col_start) * bpp;
 80106ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80106d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80106d2:	1ad2      	subs	r2, r2, r3
 80106d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106d6:	4413      	add	r3, r2
 80106d8:	461a      	mov	r2, r3
 80106da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80106de:	fb03 f202 	mul.w	r2, r3, r2
 80106e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80106e4:	4413      	add	r3, r2
 80106e6:	67bb      	str	r3, [r7, #120]	; 0x78

        map_p += (col_bit >> 3);
 80106e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80106ea:	10db      	asrs	r3, r3, #3
 80106ec:	461a      	mov	r2, r3
 80106ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80106f2:	4413      	add	r3, r2
 80106f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        col_bit = col_bit & 0x7;
 80106f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80106fa:	f003 0307 	and.w	r3, r3, #7
 80106fe:	67bb      	str	r3, [r7, #120]	; 0x78

        /*Next row in VDB*/
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
 8010700:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010704:	1ad3      	subs	r3, r2, r3
 8010706:	4a1e      	ldr	r2, [pc, #120]	; (8010780 <draw_letter_subpx+0x5e0>)
 8010708:	fb82 1203 	smull	r1, r2, r2, r3
 801070c:	17db      	asrs	r3, r3, #31
 801070e:	1a9a      	subs	r2, r3, r2
 8010710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010712:	4413      	add	r3, r2
 8010714:	009b      	lsls	r3, r3, #2
 8010716:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010718:	4413      	add	r3, r2
 801071a:	673b      	str	r3, [r7, #112]	; 0x70
    for(row = row_start ; row < row_end; row++) {
 801071c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010720:	3301      	adds	r3, #1
 8010722:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010726:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801072a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801072c:	429a      	cmp	r2, r3
 801072e:	f6ff ae83 	blt.w	8010438 <draw_letter_subpx+0x298>
    }

    /*Flush the last part*/
    if(map_area.y1 != map_area.y2) {
 8010732:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8010736:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801073a:	429a      	cmp	r2, r3
 801073c:	d015      	beq.n	801076a <draw_letter_subpx+0x5ca>
        map_area.y2--;
 801073e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010742:	b29b      	uxth	r3, r3
 8010744:	3b01      	subs	r3, #1
 8010746:	b29b      	uxth	r3, r3
 8010748:	b21b      	sxth	r3, r3
 801074a:	84fb      	strh	r3, [r7, #38]	; 0x26
        _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
 801074c:	f107 0120 	add.w	r1, r7, #32
 8010750:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8010754:	9302      	str	r3, [sp, #8]
 8010756:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 801075a:	9301      	str	r3, [sp, #4]
 801075c:	2302      	movs	r3, #2
 801075e:	9300      	str	r3, [sp, #0]
 8010760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010762:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010764:	6878      	ldr	r0, [r7, #4]
 8010766:	f7fc f88e 	bl	800c886 <_lv_blend_map>
    }

    _lv_mem_buf_release(mask_buf);
 801076a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801076c:	f00c f9b2 	bl	801cad4 <_lv_mem_buf_release>
    _lv_mem_buf_release(color_buf);
 8010770:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010772:	f00c f9af 	bl	801cad4 <_lv_mem_buf_release>
 8010776:	e000      	b.n	801077a <draw_letter_subpx+0x5da>
            return; /*Invalid bpp. Can't render the letter*/
 8010778:	bf00      	nop
#else
    LV_LOG_WARN("Can't draw sub-pixel rendered letter because LV_USE_FONT_SUBPX == 0 in lv_conf.h");
#endif
}
 801077a:	379c      	adds	r7, #156	; 0x9c
 801077c:	46bd      	mov	sp, r7
 801077e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010780:	55555556 	.word	0x55555556

08010784 <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 8010784:	b480      	push	{r7}
 8010786:	b085      	sub	sp, #20
 8010788:	af00      	add	r7, sp, #0
 801078a:	4603      	mov	r3, r0
 801078c:	71fb      	strb	r3, [r7, #7]
    uint8_t result = 0;
 801078e:	2300      	movs	r3, #0
 8010790:	73fb      	strb	r3, [r7, #15]

    if(hex >= '0' && hex <= '9') {
 8010792:	79fb      	ldrb	r3, [r7, #7]
 8010794:	2b2f      	cmp	r3, #47	; 0x2f
 8010796:	d906      	bls.n	80107a6 <hex_char_to_num+0x22>
 8010798:	79fb      	ldrb	r3, [r7, #7]
 801079a:	2b39      	cmp	r3, #57	; 0x39
 801079c:	d803      	bhi.n	80107a6 <hex_char_to_num+0x22>
        result = hex - '0';
 801079e:	79fb      	ldrb	r3, [r7, #7]
 80107a0:	3b30      	subs	r3, #48	; 0x30
 80107a2:	73fb      	strb	r3, [r7, #15]
 80107a4:	e02d      	b.n	8010802 <hex_char_to_num+0x7e>
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 80107a6:	79fb      	ldrb	r3, [r7, #7]
 80107a8:	2b60      	cmp	r3, #96	; 0x60
 80107aa:	d902      	bls.n	80107b2 <hex_char_to_num+0x2e>
 80107ac:	79fb      	ldrb	r3, [r7, #7]
 80107ae:	3b20      	subs	r3, #32
 80107b0:	71fb      	strb	r3, [r7, #7]

        switch(hex) {
 80107b2:	79fb      	ldrb	r3, [r7, #7]
 80107b4:	3b41      	subs	r3, #65	; 0x41
 80107b6:	2b05      	cmp	r3, #5
 80107b8:	d820      	bhi.n	80107fc <hex_char_to_num+0x78>
 80107ba:	a201      	add	r2, pc, #4	; (adr r2, 80107c0 <hex_char_to_num+0x3c>)
 80107bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107c0:	080107d9 	.word	0x080107d9
 80107c4:	080107df 	.word	0x080107df
 80107c8:	080107e5 	.word	0x080107e5
 80107cc:	080107eb 	.word	0x080107eb
 80107d0:	080107f1 	.word	0x080107f1
 80107d4:	080107f7 	.word	0x080107f7
            case 'A':
                result = 10;
 80107d8:	230a      	movs	r3, #10
 80107da:	73fb      	strb	r3, [r7, #15]
                break;
 80107dc:	e011      	b.n	8010802 <hex_char_to_num+0x7e>
            case 'B':
                result = 11;
 80107de:	230b      	movs	r3, #11
 80107e0:	73fb      	strb	r3, [r7, #15]
                break;
 80107e2:	e00e      	b.n	8010802 <hex_char_to_num+0x7e>
            case 'C':
                result = 12;
 80107e4:	230c      	movs	r3, #12
 80107e6:	73fb      	strb	r3, [r7, #15]
                break;
 80107e8:	e00b      	b.n	8010802 <hex_char_to_num+0x7e>
            case 'D':
                result = 13;
 80107ea:	230d      	movs	r3, #13
 80107ec:	73fb      	strb	r3, [r7, #15]
                break;
 80107ee:	e008      	b.n	8010802 <hex_char_to_num+0x7e>
            case 'E':
                result = 14;
 80107f0:	230e      	movs	r3, #14
 80107f2:	73fb      	strb	r3, [r7, #15]
                break;
 80107f4:	e005      	b.n	8010802 <hex_char_to_num+0x7e>
            case 'F':
                result = 15;
 80107f6:	230f      	movs	r3, #15
 80107f8:	73fb      	strb	r3, [r7, #15]
                break;
 80107fa:	e002      	b.n	8010802 <hex_char_to_num+0x7e>
            default:
                result = 0;
 80107fc:	2300      	movs	r3, #0
 80107fe:	73fb      	strb	r3, [r7, #15]
                break;
 8010800:	bf00      	nop
        }
    }

    return result;
 8010802:	7bfb      	ldrb	r3, [r7, #15]
}
 8010804:	4618      	mov	r0, r3
 8010806:	3714      	adds	r7, #20
 8010808:	46bd      	mov	sp, r7
 801080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080e:	4770      	bx	lr

08010810 <lv_area_get_width>:
{
 8010810:	b480      	push	{r7}
 8010812:	b083      	sub	sp, #12
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801081e:	b29a      	uxth	r2, r3
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010826:	b29b      	uxth	r3, r3
 8010828:	1ad3      	subs	r3, r2, r3
 801082a:	b29b      	uxth	r3, r3
 801082c:	3301      	adds	r3, #1
 801082e:	b29b      	uxth	r3, r3
 8010830:	b21b      	sxth	r3, r3
}
 8010832:	4618      	mov	r0, r3
 8010834:	370c      	adds	r7, #12
 8010836:	46bd      	mov	sp, r7
 8010838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083c:	4770      	bx	lr

0801083e <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 801083e:	b580      	push	{r7, lr}
 8010840:	b082      	sub	sp, #8
 8010842:	af00      	add	r7, sp, #0
 8010844:	6078      	str	r0, [r7, #4]
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 8010846:	210c      	movs	r1, #12
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	f00c fc6e 	bl	801d12a <_lv_memset_00>
    dsc->width = 1;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	2201      	movs	r2, #1
 8010852:	809a      	strh	r2, [r3, #4]
    dsc->opa = LV_OPA_COVER;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	22ff      	movs	r2, #255	; 0xff
 8010858:	729a      	strb	r2, [r3, #10]
    dsc->color = LV_COLOR_BLACK;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2200      	movs	r2, #0
 801085e:	701a      	strb	r2, [r3, #0]
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2200      	movs	r2, #0
 8010864:	705a      	strb	r2, [r3, #1]
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2200      	movs	r2, #0
 801086a:	709a      	strb	r2, [r3, #2]
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	22ff      	movs	r2, #255	; 0xff
 8010870:	70da      	strb	r2, [r3, #3]
}
 8010872:	bf00      	nop
 8010874:	3708      	adds	r7, #8
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}

0801087a <lv_draw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * clip,
                                        const lv_draw_line_dsc_t * dsc)
{
 801087a:	b580      	push	{r7, lr}
 801087c:	b0a6      	sub	sp, #152	; 0x98
 801087e:	af00      	add	r7, sp, #0
 8010880:	60f8      	str	r0, [r7, #12]
 8010882:	60b9      	str	r1, [r7, #8]
 8010884:	607a      	str	r2, [r7, #4]
 8010886:	603b      	str	r3, [r7, #0]
    if(dsc->width == 0) return;
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801088e:	2b00      	cmp	r3, #0
 8010890:	f000 8179 	beq.w	8010b86 <lv_draw_line+0x30c>
    if(dsc->opa <= LV_OPA_MIN) return;
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	7a9b      	ldrb	r3, [r3, #10]
 8010898:	2b02      	cmp	r3, #2
 801089a:	f240 8176 	bls.w	8010b8a <lv_draw_line+0x310>

    if(point1->x == point2->x && point1->y == point2->y) return;
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80108a4:	68bb      	ldr	r3, [r7, #8]
 80108a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d108      	bne.n	80108c0 <lv_draw_line+0x46>
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80108ba:	429a      	cmp	r2, r3
 80108bc:	f000 8167 	beq.w	8010b8e <lv_draw_line+0x314>

    lv_area_t clip_line;
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80108cc:	4293      	cmp	r3, r2
 80108ce:	bfa8      	it	ge
 80108d0:	4613      	movge	r3, r2
 80108d2:	b21b      	sxth	r3, r3
 80108d4:	b29a      	uxth	r2, r3
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	da00      	bge.n	80108e2 <lv_draw_line+0x68>
 80108e0:	3301      	adds	r3, #1
 80108e2:	105b      	asrs	r3, r3, #1
 80108e4:	b21b      	sxth	r3, r3
 80108e6:	b29b      	uxth	r3, r3
 80108e8:	1ad3      	subs	r3, r2, r3
 80108ea:	b29b      	uxth	r3, r3
 80108ec:	b21b      	sxth	r3, r3
 80108ee:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80108fe:	4293      	cmp	r3, r2
 8010900:	bfb8      	it	lt
 8010902:	4613      	movlt	r3, r2
 8010904:	b21b      	sxth	r3, r3
 8010906:	b29a      	uxth	r2, r3
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801090e:	2b00      	cmp	r3, #0
 8010910:	da00      	bge.n	8010914 <lv_draw_line+0x9a>
 8010912:	3301      	adds	r3, #1
 8010914:	105b      	asrs	r3, r3, #1
 8010916:	b21b      	sxth	r3, r3
 8010918:	b29b      	uxth	r3, r3
 801091a:	4413      	add	r3, r2
 801091c:	b29b      	uxth	r3, r3
 801091e:	b21b      	sxth	r3, r3
 8010920:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010930:	4293      	cmp	r3, r2
 8010932:	bfa8      	it	ge
 8010934:	4613      	movge	r3, r2
 8010936:	b21b      	sxth	r3, r3
 8010938:	b29a      	uxth	r2, r3
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010940:	2b00      	cmp	r3, #0
 8010942:	da00      	bge.n	8010946 <lv_draw_line+0xcc>
 8010944:	3301      	adds	r3, #1
 8010946:	105b      	asrs	r3, r3, #1
 8010948:	b21b      	sxth	r3, r3
 801094a:	b29b      	uxth	r3, r3
 801094c:	1ad3      	subs	r3, r2, r3
 801094e:	b29b      	uxth	r3, r3
 8010950:	b21b      	sxth	r3, r3
 8010952:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
 8010956:	68bb      	ldr	r3, [r7, #8]
 8010958:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010962:	4293      	cmp	r3, r2
 8010964:	bfb8      	it	lt
 8010966:	4613      	movlt	r3, r2
 8010968:	b21b      	sxth	r3, r3
 801096a:	b29a      	uxth	r2, r3
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010972:	2b00      	cmp	r3, #0
 8010974:	da00      	bge.n	8010978 <lv_draw_line+0xfe>
 8010976:	3301      	adds	r3, #1
 8010978:	105b      	asrs	r3, r3, #1
 801097a:	b21b      	sxth	r3, r3
 801097c:	b29b      	uxth	r3, r3
 801097e:	4413      	add	r3, r2
 8010980:	b29b      	uxth	r3, r3
 8010982:	b21b      	sxth	r3, r3
 8010984:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 8010988:	f107 0184 	add.w	r1, r7, #132	; 0x84
 801098c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8010990:	687a      	ldr	r2, [r7, #4]
 8010992:	4618      	mov	r0, r3
 8010994:	f00a fa78 	bl	801ae88 <_lv_area_intersect>
 8010998:	4603      	mov	r3, r0
 801099a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    if(!is_common) return;
 801099e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80109a2:	f083 0301 	eor.w	r3, r3, #1
 80109a6:	b2db      	uxtb	r3, r3
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	f040 80f2 	bne.w	8010b92 <lv_draw_line+0x318>

    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80109b4:	68bb      	ldr	r3, [r7, #8]
 80109b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80109ba:	429a      	cmp	r2, r3
 80109bc:	d107      	bne.n	80109ce <lv_draw_line+0x154>
 80109be:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	68b9      	ldr	r1, [r7, #8]
 80109c6:	68f8      	ldr	r0, [r7, #12]
 80109c8:	f000 f8e7 	bl	8010b9a <draw_line_hor>
 80109cc:	e016      	b.n	80109fc <lv_draw_line+0x182>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80109d4:	68bb      	ldr	r3, [r7, #8]
 80109d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80109da:	429a      	cmp	r2, r3
 80109dc:	d107      	bne.n	80109ee <lv_draw_line+0x174>
 80109de:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	68b9      	ldr	r1, [r7, #8]
 80109e6:	68f8      	ldr	r0, [r7, #12]
 80109e8:	f000 faa6 	bl	8010f38 <draw_line_ver>
 80109ec:	e006      	b.n	80109fc <lv_draw_line+0x182>
    else draw_line_skew(point1, point2, &clip_line, dsc);
 80109ee:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	68b9      	ldr	r1, [r7, #8]
 80109f6:	68f8      	ldr	r0, [r7, #12]
 80109f8:	f000 fc3a 	bl	8011270 <draw_line_skew>

    if(dsc->round_end || dsc->round_start) {
 80109fc:	683b      	ldr	r3, [r7, #0]
 80109fe:	7adb      	ldrb	r3, [r3, #11]
 8010a00:	f003 0308 	and.w	r3, r3, #8
 8010a04:	b2db      	uxtb	r3, r3
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d107      	bne.n	8010a1a <lv_draw_line+0x1a0>
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	7adb      	ldrb	r3, [r3, #11]
 8010a0e:	f003 0304 	and.w	r3, r3, #4
 8010a12:	b2db      	uxtb	r3, r3
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	f000 80bd 	beq.w	8010b94 <lv_draw_line+0x31a>
        lv_draw_rect_dsc_t cir_dsc;
        lv_draw_rect_dsc_init(&cir_dsc);
 8010a1a:	f107 0314 	add.w	r3, r7, #20
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f002 fc9a 	bl	8013358 <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	61bb      	str	r3, [r7, #24]
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 8010a2a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8010a2e:	82bb      	strh	r3, [r7, #20]
        cir_dsc.bg_opa = dsc->opa;
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	7a9b      	ldrb	r3, [r3, #10]
 8010a34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        int32_t r = (dsc->width >> 1);
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010a3e:	105b      	asrs	r3, r3, #1
 8010a40:	b21b      	sxth	r3, r3
 8010a42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010a4c:	b29b      	uxth	r3, r3
 8010a4e:	f003 0301 	and.w	r3, r3, #1
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	bf0c      	ite	eq
 8010a56:	2301      	moveq	r3, #1
 8010a58:	2300      	movne	r3, #0
 8010a5a:	b2db      	uxtb	r3, r3
 8010a5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        lv_area_t cir_area;

        if(dsc->round_start) {
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	7adb      	ldrb	r3, [r3, #11]
 8010a64:	f003 0304 	and.w	r3, r3, #4
 8010a68:	b2db      	uxtb	r3, r3
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d041      	beq.n	8010af2 <lv_draw_line+0x278>
            cir_area.x1 = point1->x - r;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010a74:	b29a      	uxth	r2, r3
 8010a76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010a7a:	b29b      	uxth	r3, r3
 8010a7c:	1ad3      	subs	r3, r2, r3
 8010a7e:	b29b      	uxth	r3, r3
 8010a80:	b21b      	sxth	r3, r3
 8010a82:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
            cir_area.y1 = point1->y - r;
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010a8c:	b29a      	uxth	r2, r3
 8010a8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010a92:	b29b      	uxth	r3, r3
 8010a94:	1ad3      	subs	r3, r2, r3
 8010a96:	b29b      	uxth	r3, r3
 8010a98:	b21b      	sxth	r3, r3
 8010a9a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            cir_area.x2 = point1->x + r - r_corr;
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010aa4:	b29a      	uxth	r2, r3
 8010aa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010aaa:	b29b      	uxth	r3, r3
 8010aac:	4413      	add	r3, r2
 8010aae:	b29a      	uxth	r2, r3
 8010ab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010ab4:	b29b      	uxth	r3, r3
 8010ab6:	1ad3      	subs	r3, r2, r3
 8010ab8:	b29b      	uxth	r3, r3
 8010aba:	b21b      	sxth	r3, r3
 8010abc:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
            cir_area.y2 = point1->y + r - r_corr ;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010ac6:	b29a      	uxth	r2, r3
 8010ac8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010acc:	b29b      	uxth	r3, r3
 8010ace:	4413      	add	r3, r2
 8010ad0:	b29a      	uxth	r2, r3
 8010ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010ad6:	b29b      	uxth	r3, r3
 8010ad8:	1ad3      	subs	r3, r2, r3
 8010ada:	b29b      	uxth	r3, r3
 8010adc:	b21b      	sxth	r3, r3
 8010ade:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 8010ae2:	f107 0214 	add.w	r2, r7, #20
 8010ae6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010aea:	6879      	ldr	r1, [r7, #4]
 8010aec:	4618      	mov	r0, r3
 8010aee:	f002 fcb7 	bl	8013460 <lv_draw_rect>
        }

        if(dsc->round_end) {
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	7adb      	ldrb	r3, [r3, #11]
 8010af6:	f003 0308 	and.w	r3, r3, #8
 8010afa:	b2db      	uxtb	r3, r3
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d049      	beq.n	8010b94 <lv_draw_line+0x31a>
            cir_area.x1 = point2->x - r;
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010b06:	b29a      	uxth	r2, r3
 8010b08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010b0c:	b29b      	uxth	r3, r3
 8010b0e:	1ad3      	subs	r3, r2, r3
 8010b10:	b29b      	uxth	r3, r3
 8010b12:	b21b      	sxth	r3, r3
 8010b14:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
            cir_area.y1 = point2->y - r;
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010b1e:	b29a      	uxth	r2, r3
 8010b20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010b24:	b29b      	uxth	r3, r3
 8010b26:	1ad3      	subs	r3, r2, r3
 8010b28:	b29b      	uxth	r3, r3
 8010b2a:	b21b      	sxth	r3, r3
 8010b2c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            cir_area.x2 = point2->x + r - r_corr;
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010b36:	b29a      	uxth	r2, r3
 8010b38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010b3c:	b29b      	uxth	r3, r3
 8010b3e:	4413      	add	r3, r2
 8010b40:	b29a      	uxth	r2, r3
 8010b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b46:	b29b      	uxth	r3, r3
 8010b48:	1ad3      	subs	r3, r2, r3
 8010b4a:	b29b      	uxth	r3, r3
 8010b4c:	b21b      	sxth	r3, r3
 8010b4e:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
            cir_area.y2 = point2->y + r - r_corr ;
 8010b52:	68bb      	ldr	r3, [r7, #8]
 8010b54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010b58:	b29a      	uxth	r2, r3
 8010b5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010b5e:	b29b      	uxth	r3, r3
 8010b60:	4413      	add	r3, r2
 8010b62:	b29a      	uxth	r2, r3
 8010b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b68:	b29b      	uxth	r3, r3
 8010b6a:	1ad3      	subs	r3, r2, r3
 8010b6c:	b29b      	uxth	r3, r3
 8010b6e:	b21b      	sxth	r3, r3
 8010b70:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 8010b74:	f107 0214 	add.w	r2, r7, #20
 8010b78:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010b7c:	6879      	ldr	r1, [r7, #4]
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f002 fc6e 	bl	8013460 <lv_draw_rect>
 8010b84:	e006      	b.n	8010b94 <lv_draw_line+0x31a>
    if(dsc->width == 0) return;
 8010b86:	bf00      	nop
 8010b88:	e004      	b.n	8010b94 <lv_draw_line+0x31a>
    if(dsc->opa <= LV_OPA_MIN) return;
 8010b8a:	bf00      	nop
 8010b8c:	e002      	b.n	8010b94 <lv_draw_line+0x31a>
    if(point1->x == point2->x && point1->y == point2->y) return;
 8010b8e:	bf00      	nop
 8010b90:	e000      	b.n	8010b94 <lv_draw_line+0x31a>
    if(!is_common) return;
 8010b92:	bf00      	nop
        }
    }
}
 8010b94:	3798      	adds	r7, #152	; 0x98
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}

08010b9a <draw_line_hor>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
 8010b9a:	b580      	push	{r7, lr}
 8010b9c:	b09a      	sub	sp, #104	; 0x68
 8010b9e:	af04      	add	r7, sp, #16
 8010ba0:	60f8      	str	r0, [r7, #12]
 8010ba2:	60b9      	str	r1, [r7, #8]
 8010ba4:	607a      	str	r2, [r7, #4]
 8010ba6:	603b      	str	r3, [r7, #0]
    lv_opa_t opa = dsc->opa;
 8010ba8:	683b      	ldr	r3, [r7, #0]
 8010baa:	7a9b      	ldrb	r3, [r3, #10]
 8010bac:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8010bb0:	f7f9 fbba 	bl	800a328 <_lv_refr_get_disp_refreshing>
 8010bb4:	6478      	str	r0, [r7, #68]	; 0x44
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8010bb6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010bb8:	f009 fca6 	bl	801a508 <lv_disp_get_buf>
 8010bbc:	6438      	str	r0, [r7, #64]	; 0x40

    const lv_area_t * disp_area = &vdb->area;
 8010bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bc0:	3310      	adds	r3, #16
 8010bc2:	63fb      	str	r3, [r7, #60]	; 0x3c

    int32_t w = dsc->width - 1;
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010bca:	3b01      	subs	r3, #1
 8010bcc:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t w_half0 = w >> 1;
 8010bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bd0:	105b      	asrs	r3, r3, #1
 8010bd2:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8010bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bd6:	f003 0301 	and.w	r3, r3, #1
 8010bda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010bdc:	4413      	add	r3, r2
 8010bde:	633b      	str	r3, [r7, #48]	; 0x30

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 8010be0:	683b      	ldr	r3, [r7, #0]
 8010be2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d006      	beq.n	8010bf8 <draw_line_hor+0x5e>
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d001      	beq.n	8010bf8 <draw_line_hor+0x5e>
 8010bf4:	2301      	movs	r3, #1
 8010bf6:	e000      	b.n	8010bfa <draw_line_hor+0x60>
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010bfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c02:	f003 0301 	and.w	r3, r3, #1
 8010c06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    bool simple_mode = true;
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 8010c10:	f001 f832 	bl	8011c78 <lv_draw_mask_get_cnt>
 8010c14:	4603      	mov	r3, r0
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d003      	beq.n	8010c22 <draw_line_hor+0x88>
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8010c20:	e006      	b.n	8010c30 <draw_line_hor+0x96>
    else if(dashed) simple_mode = false;
 8010c22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d002      	beq.n	8010c30 <draw_line_hor+0x96>
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
 8010c30:	68bb      	ldr	r3, [r7, #8]
 8010c32:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c3c:	4293      	cmp	r3, r2
 8010c3e:	bfa8      	it	ge
 8010c40:	4613      	movge	r3, r2
 8010c42:	b21b      	sxth	r3, r3
 8010c44:	833b      	strh	r3, [r7, #24]
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
 8010c46:	68bb      	ldr	r3, [r7, #8]
 8010c48:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c52:	4293      	cmp	r3, r2
 8010c54:	bfb8      	it	lt
 8010c56:	4613      	movlt	r3, r2
 8010c58:	b21b      	sxth	r3, r3
 8010c5a:	b29b      	uxth	r3, r3
 8010c5c:	3b01      	subs	r3, #1
 8010c5e:	b29b      	uxth	r3, r3
 8010c60:	b21b      	sxth	r3, r3
 8010c62:	83bb      	strh	r3, [r7, #28]
    draw_area.y1 = point1->y - w_half1;
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010c6a:	b29a      	uxth	r2, r3
 8010c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c6e:	b29b      	uxth	r3, r3
 8010c70:	1ad3      	subs	r3, r2, r3
 8010c72:	b29b      	uxth	r3, r3
 8010c74:	b21b      	sxth	r3, r3
 8010c76:	837b      	strh	r3, [r7, #26]
    draw_area.y2 = point1->y + w_half0;
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010c7e:	b29a      	uxth	r2, r3
 8010c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c82:	b29b      	uxth	r3, r3
 8010c84:	4413      	add	r3, r2
 8010c86:	b29b      	uxth	r3, r3
 8010c88:	b21b      	sxth	r3, r3
 8010c8a:	83fb      	strh	r3, [r7, #30]

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 8010c8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d013      	beq.n	8010cbc <draw_line_hor+0x122>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	7adb      	ldrb	r3, [r3, #11]
 8010c98:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8010c9c:	b2db      	uxtb	r3, r3
        _lv_blend_fill(clip, &draw_area,
 8010c9e:	683a      	ldr	r2, [r7, #0]
 8010ca0:	f107 0118 	add.w	r1, r7, #24
 8010ca4:	9302      	str	r3, [sp, #8]
 8010ca6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8010caa:	9301      	str	r3, [sp, #4]
 8010cac:	2301      	movs	r3, #1
 8010cae:	9300      	str	r3, [sp, #0]
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	6812      	ldr	r2, [r2, #0]
 8010cb4:	6878      	ldr	r0, [r7, #4]
 8010cb6:	f7fb fd15 	bl	800c6e4 <_lv_blend_fill>
 8010cba:	e13a      	b.n	8010f32 <draw_line_hor+0x398>
    /*If there other mask apply it*/
    else {
        /* Get clipped fill area which is the real draw area.
         * It is always the same or inside `fill_area` */
        bool is_common;
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 8010cbc:	f107 0218 	add.w	r2, r7, #24
 8010cc0:	f107 0318 	add.w	r3, r7, #24
 8010cc4:	6879      	ldr	r1, [r7, #4]
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f00a f8de 	bl	801ae88 <_lv_area_intersect>
 8010ccc:	4603      	mov	r3, r0
 8010cce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        if(!is_common) return;
 8010cd2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010cd6:	f083 0301 	eor.w	r3, r3, #1
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	f040 8128 	bne.w	8010f32 <draw_line_hor+0x398>

        /* Now `draw_area` has absolute coordinates.
         * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
        draw_area.x1 -= disp_area->x1;
 8010ce2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010ce6:	b29a      	uxth	r2, r3
 8010ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010cee:	b29b      	uxth	r3, r3
 8010cf0:	1ad3      	subs	r3, r2, r3
 8010cf2:	b29b      	uxth	r3, r3
 8010cf4:	b21b      	sxth	r3, r3
 8010cf6:	833b      	strh	r3, [r7, #24]
        draw_area.y1 -= disp_area->y1;
 8010cf8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010cfc:	b29a      	uxth	r2, r3
 8010cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010d04:	b29b      	uxth	r3, r3
 8010d06:	1ad3      	subs	r3, r2, r3
 8010d08:	b29b      	uxth	r3, r3
 8010d0a:	b21b      	sxth	r3, r3
 8010d0c:	837b      	strh	r3, [r7, #26]
        draw_area.x2 -= disp_area->x1;
 8010d0e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010d12:	b29a      	uxth	r2, r3
 8010d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010d1a:	b29b      	uxth	r3, r3
 8010d1c:	1ad3      	subs	r3, r2, r3
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	b21b      	sxth	r3, r3
 8010d22:	83bb      	strh	r3, [r7, #28]
        draw_area.y2 -= disp_area->y1;
 8010d24:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010d28:	b29a      	uxth	r2, r3
 8010d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010d30:	b29b      	uxth	r3, r3
 8010d32:	1ad3      	subs	r3, r2, r3
 8010d34:	b29b      	uxth	r3, r3
 8010d36:	b21b      	sxth	r3, r3
 8010d38:	83fb      	strh	r3, [r7, #30]

        int32_t draw_area_w = lv_area_get_width(&draw_area);
 8010d3a:	f107 0318 	add.w	r3, r7, #24
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f7ff fd66 	bl	8010810 <lv_area_get_width>
 8010d44:	4603      	mov	r3, r0
 8010d46:	62bb      	str	r3, [r7, #40]	; 0x28

        lv_area_t fill_area;
        fill_area.x1 = draw_area.x1 + disp_area->x1;
 8010d48:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010d4c:	b29a      	uxth	r2, r3
 8010d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010d54:	b29b      	uxth	r3, r3
 8010d56:	4413      	add	r3, r2
 8010d58:	b29b      	uxth	r3, r3
 8010d5a:	b21b      	sxth	r3, r3
 8010d5c:	823b      	strh	r3, [r7, #16]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
 8010d5e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010d62:	b29a      	uxth	r2, r3
 8010d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010d6a:	b29b      	uxth	r3, r3
 8010d6c:	4413      	add	r3, r2
 8010d6e:	b29b      	uxth	r3, r3
 8010d70:	b21b      	sxth	r3, r3
 8010d72:	82bb      	strh	r3, [r7, #20]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
 8010d74:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010d78:	b29a      	uxth	r2, r3
 8010d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010d80:	b29b      	uxth	r3, r3
 8010d82:	4413      	add	r3, r2
 8010d84:	b29b      	uxth	r3, r3
 8010d86:	b21b      	sxth	r3, r3
 8010d88:	827b      	strh	r3, [r7, #18]
        fill_area.y2 = fill_area.y1;
 8010d8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010d8e:	82fb      	strh	r3, [r7, #22]

        lv_style_int_t dash_start = 0;
 8010d90:	2300      	movs	r3, #0
 8010d92:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        if(dashed) {
 8010d96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d015      	beq.n	8010dca <draw_line_hor+0x230>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
 8010d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010da0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010da4:	461a      	mov	r2, r3
 8010da6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010daa:	4413      	add	r3, r2
 8010dac:	683a      	ldr	r2, [r7, #0]
 8010dae:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8010db2:	4611      	mov	r1, r2
 8010db4:	683a      	ldr	r2, [r7, #0]
 8010db6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8010dba:	440a      	add	r2, r1
 8010dbc:	fb93 f1f2 	sdiv	r1, r3, r2
 8010dc0:	fb02 f201 	mul.w	r2, r2, r1
 8010dc4:	1a9b      	subs	r3, r3, r2
 8010dc6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        }

        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 8010dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f00b fda3 	bl	801c918 <_lv_mem_buf_get>
 8010dd2:	6278      	str	r0, [r7, #36]	; 0x24
        int32_t h;
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8010dd4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010dd8:	653b      	str	r3, [r7, #80]	; 0x50
 8010dda:	e0a0      	b.n	8010f1e <draw_line_hor+0x384>
            _lv_memset_ff(mask_buf, draw_area_w);
 8010ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dde:	4619      	mov	r1, r3
 8010de0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010de2:	f00c fa22 	bl	801d22a <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 8010de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010de8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010dec:	b29a      	uxth	r2, r3
 8010dee:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010df2:	b29b      	uxth	r3, r3
 8010df4:	4413      	add	r3, r2
 8010df6:	b29b      	uxth	r3, r3
 8010df8:	b219      	sxth	r1, r3
 8010dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010dfc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8010e00:	b29a      	uxth	r2, r3
 8010e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	4413      	add	r3, r2
 8010e08:	b29b      	uxth	r3, r3
 8010e0a:	b21a      	sxth	r2, r3
 8010e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e0e:	b21b      	sxth	r3, r3
 8010e10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e12:	f000 fe95 	bl	8011b40 <lv_draw_mask_apply>
 8010e16:	4603      	mov	r3, r0
 8010e18:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

            if(dashed) {
 8010e1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d056      	beq.n	8010ed2 <draw_line_hor+0x338>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
 8010e24:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d052      	beq.n	8010ed2 <draw_line_hor+0x338>
                    lv_style_int_t dash_cnt = dash_start;
 8010e2c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8010e30:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
                    lv_coord_t i;
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 8010e34:	2300      	movs	r3, #0
 8010e36:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8010e3a:	e042      	b.n	8010ec2 <draw_line_hor+0x328>
                        if(dash_cnt <= dsc->dash_width) {
 8010e3c:	683b      	ldr	r3, [r7, #0]
 8010e3e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010e42:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8010e46:	429a      	cmp	r2, r3
 8010e48:	dc17      	bgt.n	8010e7a <draw_line_hor+0x2e0>
                            int16_t diff = dsc->dash_width - dash_cnt;
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010e50:	b29a      	uxth	r2, r3
 8010e52:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8010e56:	1ad3      	subs	r3, r2, r3
 8010e58:	b29b      	uxth	r3, r3
 8010e5a:	847b      	strh	r3, [r7, #34]	; 0x22
                            i += diff;
 8010e5c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8010e60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e62:	4413      	add	r3, r2
 8010e64:	b29b      	uxth	r3, r3
 8010e66:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                            dash_cnt += diff;
 8010e6a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8010e6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e70:	4413      	add	r3, r2
 8010e72:	b29b      	uxth	r3, r3
 8010e74:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8010e78:	e015      	b.n	8010ea6 <draw_line_hor+0x30c>
                        }
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 8010e7a:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010e84:	4619      	mov	r1, r3
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010e8c:	440b      	add	r3, r1
 8010e8e:	429a      	cmp	r2, r3
 8010e90:	db03      	blt.n	8010e9a <draw_line_hor+0x300>
                            dash_cnt = 0;
 8010e92:	2300      	movs	r3, #0
 8010e94:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8010e98:	e005      	b.n	8010ea6 <draw_line_hor+0x30c>
                        }
                        else {
                            mask_buf[i] = 0x00;
 8010e9a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8010e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ea0:	4413      	add	r3, r2
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	701a      	strb	r2, [r3, #0]
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 8010ea6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8010eaa:	b29b      	uxth	r3, r3
 8010eac:	3301      	adds	r3, #1
 8010eae:	b29b      	uxth	r3, r3
 8010eb0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8010eb4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8010eb8:	b29b      	uxth	r3, r3
 8010eba:	3301      	adds	r3, #1
 8010ebc:	b29b      	uxth	r3, r3
 8010ebe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8010ec2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8010ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ec8:	429a      	cmp	r2, r3
 8010eca:	dcb7      	bgt.n	8010e3c <draw_line_hor+0x2a2>
                        }
                    }

                    mask_res = LV_DRAW_MASK_RES_CHANGED;
 8010ecc:	2302      	movs	r3, #2
 8010ece:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                }
            }

            _lv_blend_fill(clip, &fill_area,
 8010ed2:	683b      	ldr	r3, [r7, #0]
 8010ed4:	7a9b      	ldrb	r3, [r3, #10]
                           dsc->color, mask_buf, mask_res, dsc->opa,
                           dsc->blend_mode);
 8010ed6:	683a      	ldr	r2, [r7, #0]
 8010ed8:	7ad2      	ldrb	r2, [r2, #11]
 8010eda:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8010ede:	b2d2      	uxtb	r2, r2
            _lv_blend_fill(clip, &fill_area,
 8010ee0:	4610      	mov	r0, r2
 8010ee2:	683a      	ldr	r2, [r7, #0]
 8010ee4:	f107 0110 	add.w	r1, r7, #16
 8010ee8:	9002      	str	r0, [sp, #8]
 8010eea:	9301      	str	r3, [sp, #4]
 8010eec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010ef0:	9300      	str	r3, [sp, #0]
 8010ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ef4:	6812      	ldr	r2, [r2, #0]
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f7fb fbf4 	bl	800c6e4 <_lv_blend_fill>

            fill_area.y1++;
 8010efc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010f00:	b29b      	uxth	r3, r3
 8010f02:	3301      	adds	r3, #1
 8010f04:	b29b      	uxth	r3, r3
 8010f06:	b21b      	sxth	r3, r3
 8010f08:	827b      	strh	r3, [r7, #18]
            fill_area.y2++;
 8010f0a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010f0e:	b29b      	uxth	r3, r3
 8010f10:	3301      	adds	r3, #1
 8010f12:	b29b      	uxth	r3, r3
 8010f14:	b21b      	sxth	r3, r3
 8010f16:	82fb      	strh	r3, [r7, #22]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8010f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f1a:	3301      	adds	r3, #1
 8010f1c:	653b      	str	r3, [r7, #80]	; 0x50
 8010f1e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010f22:	461a      	mov	r2, r3
 8010f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f26:	4293      	cmp	r3, r2
 8010f28:	f77f af58 	ble.w	8010ddc <draw_line_hor+0x242>
        }
        _lv_mem_buf_release(mask_buf);
 8010f2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f2e:	f00b fdd1 	bl	801cad4 <_lv_mem_buf_release>
    }
}
 8010f32:	3758      	adds	r7, #88	; 0x58
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}

08010f38 <draw_line_ver>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_ver(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b09a      	sub	sp, #104	; 0x68
 8010f3c:	af04      	add	r7, sp, #16
 8010f3e:	60f8      	str	r0, [r7, #12]
 8010f40:	60b9      	str	r1, [r7, #8]
 8010f42:	607a      	str	r2, [r7, #4]
 8010f44:	603b      	str	r3, [r7, #0]
    lv_opa_t opa = dsc->opa;
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	7a9b      	ldrb	r3, [r3, #10]
 8010f4a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8010f4e:	f7f9 f9eb 	bl	800a328 <_lv_refr_get_disp_refreshing>
 8010f52:	6478      	str	r0, [r7, #68]	; 0x44
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8010f54:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010f56:	f009 fad7 	bl	801a508 <lv_disp_get_buf>
 8010f5a:	6438      	str	r0, [r7, #64]	; 0x40

    const lv_area_t * disp_area = &vdb->area;
 8010f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f5e:	3310      	adds	r3, #16
 8010f60:	63fb      	str	r3, [r7, #60]	; 0x3c

    int32_t w = dsc->width - 1;
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010f68:	3b01      	subs	r3, #1
 8010f6a:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t w_half0 = w >> 1;
 8010f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f6e:	105b      	asrs	r3, r3, #1
 8010f70:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8010f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f74:	f003 0301 	and.w	r3, r3, #1
 8010f78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010f7a:	4413      	add	r3, r2
 8010f7c:	633b      	str	r3, [r7, #48]	; 0x30

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 8010f7e:	683b      	ldr	r3, [r7, #0]
 8010f80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d006      	beq.n	8010f96 <draw_line_ver+0x5e>
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d001      	beq.n	8010f96 <draw_line_ver+0x5e>
 8010f92:	2301      	movs	r3, #1
 8010f94:	e000      	b.n	8010f98 <draw_line_ver+0x60>
 8010f96:	2300      	movs	r3, #0
 8010f98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010f9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010fa0:	f003 0301 	and.w	r3, r3, #1
 8010fa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    bool simple_mode = true;
 8010fa8:	2301      	movs	r3, #1
 8010faa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 8010fae:	f000 fe63 	bl	8011c78 <lv_draw_mask_get_cnt>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d003      	beq.n	8010fc0 <draw_line_ver+0x88>
 8010fb8:	2300      	movs	r3, #0
 8010fba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8010fbe:	e006      	b.n	8010fce <draw_line_ver+0x96>
    else if(dashed) simple_mode = false;
 8010fc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d002      	beq.n	8010fce <draw_line_ver+0x96>
 8010fc8:	2300      	movs	r3, #0
 8010fca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    lv_area_t draw_area;
    draw_area.x1 = point1->x - w_half1;
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010fd4:	b29a      	uxth	r2, r3
 8010fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd8:	b29b      	uxth	r3, r3
 8010fda:	1ad3      	subs	r3, r2, r3
 8010fdc:	b29b      	uxth	r3, r3
 8010fde:	b21b      	sxth	r3, r3
 8010fe0:	83bb      	strh	r3, [r7, #28]
    draw_area.x2 = point1->x + w_half0;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010fe8:	b29a      	uxth	r2, r3
 8010fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fec:	b29b      	uxth	r3, r3
 8010fee:	4413      	add	r3, r2
 8010ff0:	b29b      	uxth	r3, r3
 8010ff2:	b21b      	sxth	r3, r3
 8010ff4:	843b      	strh	r3, [r7, #32]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
 8010ff6:	68bb      	ldr	r3, [r7, #8]
 8010ff8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011002:	4293      	cmp	r3, r2
 8011004:	bfa8      	it	ge
 8011006:	4613      	movge	r3, r2
 8011008:	b21b      	sxth	r3, r3
 801100a:	83fb      	strh	r3, [r7, #30]
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
 801100c:	68bb      	ldr	r3, [r7, #8]
 801100e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011018:	4293      	cmp	r3, r2
 801101a:	bfb8      	it	lt
 801101c:	4613      	movlt	r3, r2
 801101e:	b21b      	sxth	r3, r3
 8011020:	b29b      	uxth	r3, r3
 8011022:	3b01      	subs	r3, #1
 8011024:	b29b      	uxth	r3, r3
 8011026:	b21b      	sxth	r3, r3
 8011028:	847b      	strh	r3, [r7, #34]	; 0x22

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 801102a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801102e:	2b00      	cmp	r3, #0
 8011030:	d013      	beq.n	801105a <draw_line_ver+0x122>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color,  NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	7adb      	ldrb	r3, [r3, #11]
 8011036:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801103a:	b2db      	uxtb	r3, r3
        _lv_blend_fill(clip, &draw_area,
 801103c:	683a      	ldr	r2, [r7, #0]
 801103e:	f107 011c 	add.w	r1, r7, #28
 8011042:	9302      	str	r3, [sp, #8]
 8011044:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8011048:	9301      	str	r3, [sp, #4]
 801104a:	2301      	movs	r3, #1
 801104c:	9300      	str	r3, [sp, #0]
 801104e:	2300      	movs	r3, #0
 8011050:	6812      	ldr	r2, [r2, #0]
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f7fb fb46 	bl	800c6e4 <_lv_blend_fill>
 8011058:	e106      	b.n	8011268 <draw_line_ver+0x330>
    /*If there other mask apply it*/
    else {
        /* Get clipped fill area which is the real draw area.
         * It is always the same or inside `fill_area` */
        bool is_common;
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 801105a:	f107 021c 	add.w	r2, r7, #28
 801105e:	f107 031c 	add.w	r3, r7, #28
 8011062:	6879      	ldr	r1, [r7, #4]
 8011064:	4618      	mov	r0, r3
 8011066:	f009 ff0f 	bl	801ae88 <_lv_area_intersect>
 801106a:	4603      	mov	r3, r0
 801106c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        if(!is_common) return;
 8011070:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011074:	f083 0301 	eor.w	r3, r3, #1
 8011078:	b2db      	uxtb	r3, r3
 801107a:	2b00      	cmp	r3, #0
 801107c:	f040 80f4 	bne.w	8011268 <draw_line_ver+0x330>

        /* Now `draw_area` has absolute coordinates.
         * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
        draw_area.x1 -= vdb->area.x1;
 8011080:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8011084:	b29a      	uxth	r2, r3
 8011086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011088:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801108c:	b29b      	uxth	r3, r3
 801108e:	1ad3      	subs	r3, r2, r3
 8011090:	b29b      	uxth	r3, r3
 8011092:	b21b      	sxth	r3, r3
 8011094:	83bb      	strh	r3, [r7, #28]
        draw_area.y1 -= vdb->area.y1;
 8011096:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801109a:	b29a      	uxth	r2, r3
 801109c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801109e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80110a2:	b29b      	uxth	r3, r3
 80110a4:	1ad3      	subs	r3, r2, r3
 80110a6:	b29b      	uxth	r3, r3
 80110a8:	b21b      	sxth	r3, r3
 80110aa:	83fb      	strh	r3, [r7, #30]
        draw_area.x2 -= vdb->area.x1;
 80110ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80110b0:	b29a      	uxth	r2, r3
 80110b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110b4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80110b8:	b29b      	uxth	r3, r3
 80110ba:	1ad3      	subs	r3, r2, r3
 80110bc:	b29b      	uxth	r3, r3
 80110be:	b21b      	sxth	r3, r3
 80110c0:	843b      	strh	r3, [r7, #32]
        draw_area.y2 -= vdb->area.y1;
 80110c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80110c6:	b29a      	uxth	r2, r3
 80110c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110ca:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80110ce:	b29b      	uxth	r3, r3
 80110d0:	1ad3      	subs	r3, r2, r3
 80110d2:	b29b      	uxth	r3, r3
 80110d4:	b21b      	sxth	r3, r3
 80110d6:	847b      	strh	r3, [r7, #34]	; 0x22

        int32_t draw_area_w = lv_area_get_width(&draw_area);
 80110d8:	f107 031c 	add.w	r3, r7, #28
 80110dc:	4618      	mov	r0, r3
 80110de:	f7ff fb97 	bl	8010810 <lv_area_get_width>
 80110e2:	4603      	mov	r3, r0
 80110e4:	62bb      	str	r3, [r7, #40]	; 0x28

        lv_area_t fill_area;
        fill_area.x1 = draw_area.x1 + disp_area->x1;
 80110e6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80110ea:	b29a      	uxth	r2, r3
 80110ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80110f2:	b29b      	uxth	r3, r3
 80110f4:	4413      	add	r3, r2
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	b21b      	sxth	r3, r3
 80110fa:	82bb      	strh	r3, [r7, #20]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
 80110fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011100:	b29a      	uxth	r2, r3
 8011102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011108:	b29b      	uxth	r3, r3
 801110a:	4413      	add	r3, r2
 801110c:	b29b      	uxth	r3, r3
 801110e:	b21b      	sxth	r3, r3
 8011110:	833b      	strh	r3, [r7, #24]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
 8011112:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011116:	b29a      	uxth	r2, r3
 8011118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801111a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801111e:	b29b      	uxth	r3, r3
 8011120:	4413      	add	r3, r2
 8011122:	b29b      	uxth	r3, r3
 8011124:	b21b      	sxth	r3, r3
 8011126:	82fb      	strh	r3, [r7, #22]
        fill_area.y2 = fill_area.y1;
 8011128:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801112c:	837b      	strh	r3, [r7, #26]

        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 801112e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011130:	4618      	mov	r0, r3
 8011132:	f00b fbf1 	bl	801c918 <_lv_mem_buf_get>
 8011136:	6278      	str	r0, [r7, #36]	; 0x24

        lv_style_int_t dash_start = 0;
 8011138:	2300      	movs	r3, #0
 801113a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        if(dashed) {
 801113e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011142:	2b00      	cmp	r3, #0
 8011144:	d015      	beq.n	8011172 <draw_line_ver+0x23a>
            dash_start = (vdb->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
 8011146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011148:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801114c:	461a      	mov	r2, r3
 801114e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011152:	4413      	add	r3, r2
 8011154:	683a      	ldr	r2, [r7, #0]
 8011156:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801115a:	4611      	mov	r1, r2
 801115c:	683a      	ldr	r2, [r7, #0]
 801115e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8011162:	440a      	add	r2, r1
 8011164:	fb93 f1f2 	sdiv	r1, r3, r2
 8011168:	fb02 f201 	mul.w	r2, r2, r1
 801116c:	1a9b      	subs	r3, r3, r2
 801116e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        }

        lv_style_int_t dash_cnt = dash_start;
 8011172:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8011176:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        int32_t h;
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 801117a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801117e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011180:	e069      	b.n	8011256 <draw_line_ver+0x31e>
            _lv_memset_ff(mask_buf, draw_area_w);
 8011182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011184:	4619      	mov	r1, r3
 8011186:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011188:	f00c f84f 	bl	801d22a <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 801118c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801118e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8011192:	b29a      	uxth	r2, r3
 8011194:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8011198:	b29b      	uxth	r3, r3
 801119a:	4413      	add	r3, r2
 801119c:	b29b      	uxth	r3, r3
 801119e:	b219      	sxth	r1, r3
 80111a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111a2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80111a6:	b29a      	uxth	r2, r3
 80111a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111aa:	b29b      	uxth	r3, r3
 80111ac:	4413      	add	r3, r2
 80111ae:	b29b      	uxth	r3, r3
 80111b0:	b21a      	sxth	r2, r3
 80111b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111b4:	b21b      	sxth	r3, r3
 80111b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111b8:	f000 fcc2 	bl	8011b40 <lv_draw_mask_apply>
 80111bc:	4603      	mov	r3, r0
 80111be:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            if(dashed) {
 80111c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d023      	beq.n	8011212 <draw_line_ver+0x2da>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
 80111ca:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d018      	beq.n	8011204 <draw_line_ver+0x2cc>
                    if(dash_cnt > dsc->dash_width) {
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80111d8:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 80111dc:	429a      	cmp	r2, r3
 80111de:	dd02      	ble.n	80111e6 <draw_line_ver+0x2ae>
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
 80111e0:	2300      	movs	r3, #0
 80111e2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                    }

                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 80111e6:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80111f0:	4619      	mov	r1, r3
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80111f8:	440b      	add	r3, r1
 80111fa:	429a      	cmp	r2, r3
 80111fc:	db02      	blt.n	8011204 <draw_line_ver+0x2cc>
                        dash_cnt = 0;
 80111fe:	2300      	movs	r3, #0
 8011200:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                    }
                }
                dash_cnt ++;
 8011204:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8011208:	b29b      	uxth	r3, r3
 801120a:	3301      	adds	r3, #1
 801120c:	b29b      	uxth	r3, r3
 801120e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            }

            _lv_blend_fill(clip, &fill_area,
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	7a9b      	ldrb	r3, [r3, #10]
 8011216:	683a      	ldr	r2, [r7, #0]
 8011218:	f107 0014 	add.w	r0, r7, #20
 801121c:	2100      	movs	r1, #0
 801121e:	9102      	str	r1, [sp, #8]
 8011220:	9301      	str	r3, [sp, #4]
 8011222:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8011226:	9300      	str	r3, [sp, #0]
 8011228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801122a:	6812      	ldr	r2, [r2, #0]
 801122c:	4601      	mov	r1, r0
 801122e:	6878      	ldr	r0, [r7, #4]
 8011230:	f7fb fa58 	bl	800c6e4 <_lv_blend_fill>
                           dsc->color, mask_buf, mask_res, dsc->opa,
                           LV_BLEND_MODE_NORMAL);

            fill_area.y1++;
 8011234:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011238:	b29b      	uxth	r3, r3
 801123a:	3301      	adds	r3, #1
 801123c:	b29b      	uxth	r3, r3
 801123e:	b21b      	sxth	r3, r3
 8011240:	82fb      	strh	r3, [r7, #22]
            fill_area.y2++;
 8011242:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011246:	b29b      	uxth	r3, r3
 8011248:	3301      	adds	r3, #1
 801124a:	b29b      	uxth	r3, r3
 801124c:	b21b      	sxth	r3, r3
 801124e:	837b      	strh	r3, [r7, #26]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8011250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011252:	3301      	adds	r3, #1
 8011254:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011256:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801125a:	461a      	mov	r2, r3
 801125c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801125e:	4293      	cmp	r3, r2
 8011260:	dd8f      	ble.n	8011182 <draw_line_ver+0x24a>
        }
        _lv_mem_buf_release(mask_buf);
 8011262:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011264:	f00b fc36 	bl	801cad4 <_lv_mem_buf_release>
    }
}
 8011268:	3758      	adds	r7, #88	; 0x58
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}
	...

08011270 <draw_line_skew>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_skew(const lv_point_t * point1, const lv_point_t * point2,
                                                 const lv_area_t * clip,
                                                 const lv_draw_line_dsc_t * dsc)
{
 8011270:	b5b0      	push	{r4, r5, r7, lr}
 8011272:	b0d0      	sub	sp, #320	; 0x140
 8011274:	af04      	add	r7, sp, #16
 8011276:	f107 040c 	add.w	r4, r7, #12
 801127a:	6020      	str	r0, [r4, #0]
 801127c:	f107 0008 	add.w	r0, r7, #8
 8011280:	6001      	str	r1, [r0, #0]
 8011282:	1d39      	adds	r1, r7, #4
 8011284:	600a      	str	r2, [r1, #0]
 8011286:	463a      	mov	r2, r7
 8011288:	6013      	str	r3, [r2, #0]
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
 801128a:	f107 030c 	add.w	r3, r7, #12
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011294:	f107 0308 	add.w	r3, r7, #8
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801129e:	429a      	cmp	r2, r3
 80112a0:	da1c      	bge.n	80112dc <draw_line_skew+0x6c>
        p1.y = point1->y;
 80112a2:	f107 030c 	add.w	r3, r7, #12
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80112ac:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
        p2.y = point2->y;
 80112b0:	f107 0308 	add.w	r3, r7, #8
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80112ba:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
        p1.x = point1->x;
 80112be:	f107 030c 	add.w	r3, r7, #12
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80112c8:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
        p2.x = point2->x;
 80112cc:	f107 0308 	add.w	r3, r7, #8
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80112d6:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
 80112da:	e01b      	b.n	8011314 <draw_line_skew+0xa4>
    }
    else {
        p1.y = point2->y;
 80112dc:	f107 0308 	add.w	r3, r7, #8
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80112e6:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
        p2.y = point1->y;
 80112ea:	f107 030c 	add.w	r3, r7, #12
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80112f4:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
        p1.x = point2->x;
 80112f8:	f107 0308 	add.w	r3, r7, #8
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011302:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
        p2.x = point1->x;
 8011306:	f107 030c 	add.w	r3, r7, #12
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011310:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
    }

    int32_t xdiff = p2.x - p1.x;
 8011314:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8011318:	461a      	mov	r2, r3
 801131a:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 801131e:	1ad3      	subs	r3, r2, r3
 8011320:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    int32_t ydiff = p2.y - p1.y;
 8011324:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8011328:	461a      	mov	r2, r3
 801132a:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 801132e:	1ad3      	subs	r3, r2, r3
 8011330:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
 8011334:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011338:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 801133c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8011340:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011344:	2b00      	cmp	r3, #0
 8011346:	bfb8      	it	lt
 8011348:	425b      	neglt	r3, r3
 801134a:	429a      	cmp	r2, r3
 801134c:	bfcc      	ite	gt
 801134e:	2301      	movgt	r3, #1
 8011350:	2300      	movle	r3, #0
 8011352:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
 8011356:	463b      	mov	r3, r7
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801135e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int32_t wcorr_i = 0;
 8011362:	2300      	movs	r3, #0
 8011364:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
 8011368:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801136c:	2b00      	cmp	r3, #0
 801136e:	d00f      	beq.n	8011390 <draw_line_skew+0x120>
 8011370:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8011374:	2b00      	cmp	r3, #0
 8011376:	bfb8      	it	lt
 8011378:	425b      	neglt	r3, r3
 801137a:	015a      	lsls	r2, r3, #5
 801137c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011380:	2b00      	cmp	r3, #0
 8011382:	bfb8      	it	lt
 8011384:	425b      	neglt	r3, r3
 8011386:	fb92 f3f3 	sdiv	r3, r2, r3
 801138a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801138e:	e00e      	b.n	80113ae <draw_line_skew+0x13e>
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
 8011390:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011394:	2b00      	cmp	r3, #0
 8011396:	bfb8      	it	lt
 8011398:	425b      	neglt	r3, r3
 801139a:	015a      	lsls	r2, r3, #5
 801139c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	bfb8      	it	lt
 80113a4:	425b      	neglt	r3, r3
 80113a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80113aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 80113ae:	4a7d      	ldr	r2, [pc, #500]	; (80115a4 <draw_line_skew+0x334>)
 80113b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80113b4:	4413      	add	r3, r2
 80113b6:	781b      	ldrb	r3, [r3, #0]
 80113b8:	461a      	mov	r2, r3
 80113ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80113be:	fb03 f302 	mul.w	r3, r3, r2
 80113c2:	333f      	adds	r3, #63	; 0x3f
 80113c4:	11db      	asrs	r3, r3, #7
 80113c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int32_t w_half0 = w >> 1;
 80113ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80113ce:	105b      	asrs	r3, r3, #1
 80113d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 80113d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80113d8:	f003 0301 	and.w	r3, r3, #1
 80113dc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80113e0:	4413      	add	r3, r2
 80113e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
 80113e6:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 80113ea:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 80113ee:	4293      	cmp	r3, r2
 80113f0:	bfa8      	it	ge
 80113f2:	4613      	movge	r3, r2
 80113f4:	b21b      	sxth	r3, r3
 80113f6:	b29a      	uxth	r2, r3
 80113f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80113fc:	b29b      	uxth	r3, r3
 80113fe:	1ad3      	subs	r3, r2, r3
 8011400:	b29b      	uxth	r3, r3
 8011402:	b21b      	sxth	r3, r3
 8011404:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
 8011408:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 801140c:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8011410:	4293      	cmp	r3, r2
 8011412:	bfb8      	it	lt
 8011414:	4613      	movlt	r3, r2
 8011416:	b21b      	sxth	r3, r3
 8011418:	b29a      	uxth	r2, r3
 801141a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801141e:	b29b      	uxth	r3, r3
 8011420:	4413      	add	r3, r2
 8011422:	b29b      	uxth	r3, r3
 8011424:	b21b      	sxth	r3, r3
 8011426:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
 801142a:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 801142e:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8011432:	4293      	cmp	r3, r2
 8011434:	bfa8      	it	ge
 8011436:	4613      	movge	r3, r2
 8011438:	b21b      	sxth	r3, r3
 801143a:	b29a      	uxth	r2, r3
 801143c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011440:	b29b      	uxth	r3, r3
 8011442:	1ad3      	subs	r3, r2, r3
 8011444:	b29b      	uxth	r3, r3
 8011446:	b21b      	sxth	r3, r3
 8011448:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
 801144c:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 8011450:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8011454:	4293      	cmp	r3, r2
 8011456:	bfb8      	it	lt
 8011458:	4613      	movlt	r3, r2
 801145a:	b21b      	sxth	r3, r3
 801145c:	b29a      	uxth	r2, r3
 801145e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011462:	b29b      	uxth	r3, r3
 8011464:	4413      	add	r3, r2
 8011466:	b29b      	uxth	r3, r3
 8011468:	b21b      	sxth	r3, r3
 801146a:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 801146e:	1d3b      	adds	r3, r7, #4
 8011470:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8011474:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 8011478:	681a      	ldr	r2, [r3, #0]
 801147a:	f009 fd05 	bl	801ae88 <_lv_area_intersect>
 801147e:	4603      	mov	r3, r0
 8011480:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
    if(is_common == false) return;
 8011484:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8011488:	f083 0301 	eor.w	r3, r3, #1
 801148c:	b2db      	uxtb	r3, r3
 801148e:	2b00      	cmp	r3, #0
 8011490:	f040 82c1 	bne.w	8011a16 <draw_line_skew+0x7a6>
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
 8011494:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011498:	2b00      	cmp	r3, #0
 801149a:	f000 8085 	beq.w	80115a8 <draw_line_skew+0x338>
        if(xdiff > 0) {
 801149e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	dd3e      	ble.n	8011524 <draw_line_skew+0x2b4>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 80114a6:	f9b7 10d8 	ldrsh.w	r1, [r7, #216]	; 0xd8
 80114aa:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 80114ae:	b29a      	uxth	r2, r3
 80114b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80114b4:	b29b      	uxth	r3, r3
 80114b6:	1ad3      	subs	r3, r2, r3
 80114b8:	b29b      	uxth	r3, r3
 80114ba:	b21c      	sxth	r4, r3
 80114bc:	f9b7 50d4 	ldrsh.w	r5, [r7, #212]	; 0xd4
 80114c0:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80114c4:	b29a      	uxth	r2, r3
 80114c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80114ca:	b29b      	uxth	r3, r3
 80114cc:	1ad3      	subs	r3, r2, r3
 80114ce:	b29b      	uxth	r3, r3
 80114d0:	b21b      	sxth	r3, r3
 80114d2:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 80114d6:	2200      	movs	r2, #0
 80114d8:	9201      	str	r2, [sp, #4]
 80114da:	9300      	str	r3, [sp, #0]
 80114dc:	462b      	mov	r3, r5
 80114de:	4622      	mov	r2, r4
 80114e0:	f000 fbea 	bl	8011cb8 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 80114e4:	f9b7 10d8 	ldrsh.w	r1, [r7, #216]	; 0xd8
 80114e8:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 80114ec:	b29a      	uxth	r2, r3
 80114ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80114f2:	b29b      	uxth	r3, r3
 80114f4:	4413      	add	r3, r2
 80114f6:	b29b      	uxth	r3, r3
 80114f8:	b21c      	sxth	r4, r3
 80114fa:	f9b7 50d4 	ldrsh.w	r5, [r7, #212]	; 0xd4
 80114fe:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8011502:	b29a      	uxth	r2, r3
 8011504:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011508:	b29b      	uxth	r3, r3
 801150a:	4413      	add	r3, r2
 801150c:	b29b      	uxth	r3, r3
 801150e:	b21b      	sxth	r3, r3
 8011510:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8011514:	2201      	movs	r2, #1
 8011516:	9201      	str	r2, [sp, #4]
 8011518:	9300      	str	r3, [sp, #0]
 801151a:	462b      	mov	r3, r5
 801151c:	4622      	mov	r2, r4
 801151e:	f000 fbcb 	bl	8011cb8 <lv_draw_mask_line_points_init>
 8011522:	e07f      	b.n	8011624 <draw_line_skew+0x3b4>
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 8011524:	f9b7 10d8 	ldrsh.w	r1, [r7, #216]	; 0xd8
 8011528:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 801152c:	b29a      	uxth	r2, r3
 801152e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011532:	b29b      	uxth	r3, r3
 8011534:	4413      	add	r3, r2
 8011536:	b29b      	uxth	r3, r3
 8011538:	b21c      	sxth	r4, r3
 801153a:	f9b7 50d4 	ldrsh.w	r5, [r7, #212]	; 0xd4
 801153e:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8011542:	b29a      	uxth	r2, r3
 8011544:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8011548:	b29b      	uxth	r3, r3
 801154a:	4413      	add	r3, r2
 801154c:	b29b      	uxth	r3, r3
 801154e:	b21b      	sxth	r3, r3
 8011550:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8011554:	2200      	movs	r2, #0
 8011556:	9201      	str	r2, [sp, #4]
 8011558:	9300      	str	r3, [sp, #0]
 801155a:	462b      	mov	r3, r5
 801155c:	4622      	mov	r2, r4
 801155e:	f000 fbab 	bl	8011cb8 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 8011562:	f9b7 10d8 	ldrsh.w	r1, [r7, #216]	; 0xd8
 8011566:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 801156a:	b29a      	uxth	r2, r3
 801156c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011570:	b29b      	uxth	r3, r3
 8011572:	1ad3      	subs	r3, r2, r3
 8011574:	b29b      	uxth	r3, r3
 8011576:	b21c      	sxth	r4, r3
 8011578:	f9b7 50d4 	ldrsh.w	r5, [r7, #212]	; 0xd4
 801157c:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8011580:	b29a      	uxth	r2, r3
 8011582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011586:	b29b      	uxth	r3, r3
 8011588:	1ad3      	subs	r3, r2, r3
 801158a:	b29b      	uxth	r3, r3
 801158c:	b21b      	sxth	r3, r3
 801158e:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8011592:	2201      	movs	r2, #1
 8011594:	9201      	str	r2, [sp, #4]
 8011596:	9300      	str	r3, [sp, #0]
 8011598:	462b      	mov	r3, r5
 801159a:	4622      	mov	r2, r4
 801159c:	f000 fb8c 	bl	8011cb8 <lv_draw_mask_line_points_init>
 80115a0:	e040      	b.n	8011624 <draw_line_skew+0x3b4>
 80115a2:	bf00      	nop
 80115a4:	0802dab4 	.word	0x0802dab4
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 80115a8:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 80115ac:	b29a      	uxth	r2, r3
 80115ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80115b2:	b29b      	uxth	r3, r3
 80115b4:	4413      	add	r3, r2
 80115b6:	b29b      	uxth	r3, r3
 80115b8:	b219      	sxth	r1, r3
 80115ba:	f9b7 40da 	ldrsh.w	r4, [r7, #218]	; 0xda
 80115be:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 80115c2:	b29a      	uxth	r2, r3
 80115c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80115c8:	b29b      	uxth	r3, r3
 80115ca:	4413      	add	r3, r2
 80115cc:	b29b      	uxth	r3, r3
 80115ce:	b21d      	sxth	r5, r3
 80115d0:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80115d4:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 80115d8:	2200      	movs	r2, #0
 80115da:	9201      	str	r2, [sp, #4]
 80115dc:	9300      	str	r3, [sp, #0]
 80115de:	462b      	mov	r3, r5
 80115e0:	4622      	mov	r2, r4
 80115e2:	f000 fb69 	bl	8011cb8 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 80115e6:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 80115ea:	b29a      	uxth	r2, r3
 80115ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80115f0:	b29b      	uxth	r3, r3
 80115f2:	1ad3      	subs	r3, r2, r3
 80115f4:	b29b      	uxth	r3, r3
 80115f6:	b219      	sxth	r1, r3
 80115f8:	f9b7 40da 	ldrsh.w	r4, [r7, #218]	; 0xda
 80115fc:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8011600:	b29a      	uxth	r2, r3
 8011602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011606:	b29b      	uxth	r3, r3
 8011608:	1ad3      	subs	r3, r2, r3
 801160a:	b29b      	uxth	r3, r3
 801160c:	b21d      	sxth	r5, r3
 801160e:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8011612:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8011616:	2201      	movs	r2, #1
 8011618:	9201      	str	r2, [sp, #4]
 801161a:	9300      	str	r3, [sp, #0]
 801161c:	462b      	mov	r3, r5
 801161e:	4622      	mov	r2, r4
 8011620:	f000 fb4a 	bl	8011cb8 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 8011624:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011628:	2100      	movs	r1, #0
 801162a:	4618      	mov	r0, r3
 801162c:	f000 fa56 	bl	8011adc <lv_draw_mask_add>
 8011630:	4603      	mov	r3, r0
 8011632:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 8011636:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801163a:	2100      	movs	r1, #0
 801163c:	4618      	mov	r0, r3
 801163e:	f000 fa4d 	bl	8011adc <lv_draw_mask_add>
 8011642:	4603      	mov	r3, r0
 8011644:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
    int16_t mask_top_id = LV_MASK_ID_INV;
 8011648:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801164c:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 8011650:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011654:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128

    if(!dsc->raw_end) {
 8011658:	463b      	mov	r3, r7
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	7adb      	ldrb	r3, [r3, #11]
 801165e:	f003 0310 	and.w	r3, r3, #16
 8011662:	b2db      	uxtb	r3, r3
 8011664:	2b00      	cmp	r3, #0
 8011666:	d14f      	bne.n	8011708 <draw_line_skew+0x498>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 8011668:	f9b7 10d8 	ldrsh.w	r1, [r7, #216]	; 0xd8
 801166c:	f9b7 40da 	ldrsh.w	r4, [r7, #218]	; 0xda
 8011670:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8011674:	b29a      	uxth	r2, r3
 8011676:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801167a:	b29b      	uxth	r3, r3
 801167c:	1ad3      	subs	r3, r2, r3
 801167e:	b29b      	uxth	r3, r3
 8011680:	b21d      	sxth	r5, r3
 8011682:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8011686:	b29a      	uxth	r2, r3
 8011688:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801168c:	b29b      	uxth	r3, r3
 801168e:	4413      	add	r3, r2
 8011690:	b29b      	uxth	r3, r3
 8011692:	b21b      	sxth	r3, r3
 8011694:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8011698:	2203      	movs	r2, #3
 801169a:	9201      	str	r2, [sp, #4]
 801169c:	9300      	str	r3, [sp, #0]
 801169e:	462b      	mov	r3, r5
 80116a0:	4622      	mov	r2, r4
 80116a2:	f000 fb09 	bl	8011cb8 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 80116a6:	f9b7 10d4 	ldrsh.w	r1, [r7, #212]	; 0xd4
 80116aa:	f9b7 40d6 	ldrsh.w	r4, [r7, #214]	; 0xd6
 80116ae:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 80116b2:	b29a      	uxth	r2, r3
 80116b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80116b8:	b29b      	uxth	r3, r3
 80116ba:	1ad3      	subs	r3, r2, r3
 80116bc:	b29b      	uxth	r3, r3
 80116be:	b21d      	sxth	r5, r3
 80116c0:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80116c4:	b29a      	uxth	r2, r3
 80116c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80116ca:	b29b      	uxth	r3, r3
 80116cc:	4413      	add	r3, r2
 80116ce:	b29b      	uxth	r3, r3
 80116d0:	b21b      	sxth	r3, r3
 80116d2:	f107 001c 	add.w	r0, r7, #28
 80116d6:	2202      	movs	r2, #2
 80116d8:	9201      	str	r2, [sp, #4]
 80116da:	9300      	str	r3, [sp, #0]
 80116dc:	462b      	mov	r3, r5
 80116de:	4622      	mov	r2, r4
 80116e0:	f000 faea 	bl	8011cb8 <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 80116e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80116e8:	2100      	movs	r1, #0
 80116ea:	4618      	mov	r0, r3
 80116ec:	f000 f9f6 	bl	8011adc <lv_draw_mask_add>
 80116f0:	4603      	mov	r3, r0
 80116f2:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 80116f6:	f107 031c 	add.w	r3, r7, #28
 80116fa:	2100      	movs	r1, #0
 80116fc:	4618      	mov	r0, r3
 80116fe:	f000 f9ed 	bl	8011adc <lv_draw_mask_add>
 8011702:	4603      	mov	r3, r0
 8011704:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8011708:	f7f8 fe0e 	bl	800a328 <_lv_refr_get_disp_refreshing>
 801170c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8011710:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8011714:	f008 fef8 	bl	801a508 <lv_disp_get_buf>
 8011718:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8

    const lv_area_t * disp_area = &vdb->area;
 801171c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011720:	3310      	adds	r3, #16
 8011722:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
 8011726:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	; 0xcc
 801172a:	b29a      	uxth	r2, r3
 801172c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011734:	b29b      	uxth	r3, r3
 8011736:	1ad3      	subs	r3, r2, r3
 8011738:	b29b      	uxth	r3, r3
 801173a:	b21b      	sxth	r3, r3
 801173c:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
    draw_area.y1 -= disp_area->y1;
 8011740:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 8011744:	b29a      	uxth	r2, r3
 8011746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801174a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801174e:	b29b      	uxth	r3, r3
 8011750:	1ad3      	subs	r3, r2, r3
 8011752:	b29b      	uxth	r3, r3
 8011754:	b21b      	sxth	r3, r3
 8011756:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    draw_area.x2 -= disp_area->x1;
 801175a:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 801175e:	b29a      	uxth	r2, r3
 8011760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011768:	b29b      	uxth	r3, r3
 801176a:	1ad3      	subs	r3, r2, r3
 801176c:	b29b      	uxth	r3, r3
 801176e:	b21b      	sxth	r3, r3
 8011770:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
    draw_area.y2 -= disp_area->y1;
 8011774:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8011778:	b29a      	uxth	r2, r3
 801177a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801177e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011782:	b29b      	uxth	r3, r3
 8011784:	1ad3      	subs	r3, r2, r3
 8011786:	b29b      	uxth	r3, r3
 8011788:	b21b      	sxth	r3, r3
 801178a:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2

    /* The real draw area is around the line.
     * It's easy to calculate with steep lines, but the area can be very wide with very flat lines.
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);
 801178e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8011792:	4618      	mov	r0, r3
 8011794:	f7ff f83c 	bl	8010810 <lv_area_get_width>
 8011798:	4603      	mov	r3, r0
 801179a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
 801179e:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 80117a2:	f008 fdf1 	bl	801a388 <lv_disp_get_hor_res>
 80117a6:	4603      	mov	r3, r0
 80117a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
 80117ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80117b0:	4618      	mov	r0, r3
 80117b2:	f009 fb48 	bl	801ae46 <lv_area_get_size>
 80117b6:	4602      	mov	r2, r0
 80117b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80117bc:	4293      	cmp	r3, r2
 80117be:	d906      	bls.n	80117ce <draw_line_skew+0x55e>
 80117c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80117c4:	4618      	mov	r0, r3
 80117c6:	f009 fb3e 	bl	801ae46 <lv_area_get_size>
 80117ca:	4603      	mov	r3, r0
 80117cc:	e001      	b.n	80117d2 <draw_line_skew+0x562>
 80117ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80117d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
 80117d6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80117da:	f00b f89d 	bl	801c918 <_lv_mem_buf_get>
 80117de:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

    lv_area_t fill_area;
    fill_area.x1 = draw_area.x1 + disp_area->x1;
 80117e2:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	; 0xcc
 80117e6:	b29a      	uxth	r2, r3
 80117e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80117ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80117f0:	b29b      	uxth	r3, r3
 80117f2:	4413      	add	r3, r2
 80117f4:	b29b      	uxth	r3, r3
 80117f6:	b21a      	sxth	r2, r3
 80117f8:	f107 0314 	add.w	r3, r7, #20
 80117fc:	801a      	strh	r2, [r3, #0]
    fill_area.x2 = draw_area.x2 + disp_area->x1;
 80117fe:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8011802:	b29a      	uxth	r2, r3
 8011804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011808:	f9b3 3000 	ldrsh.w	r3, [r3]
 801180c:	b29b      	uxth	r3, r3
 801180e:	4413      	add	r3, r2
 8011810:	b29b      	uxth	r3, r3
 8011812:	b21a      	sxth	r2, r3
 8011814:	f107 0314 	add.w	r3, r7, #20
 8011818:	809a      	strh	r2, [r3, #4]
    fill_area.y1 = draw_area.y1 + disp_area->y1;
 801181a:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 801181e:	b29a      	uxth	r2, r3
 8011820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011824:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011828:	b29b      	uxth	r3, r3
 801182a:	4413      	add	r3, r2
 801182c:	b29b      	uxth	r3, r3
 801182e:	b21a      	sxth	r2, r3
 8011830:	f107 0314 	add.w	r3, r7, #20
 8011834:	805a      	strh	r2, [r3, #2]
    fill_area.y2 = fill_area.y1;
 8011836:	f107 0314 	add.w	r3, r7, #20
 801183a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801183e:	f107 0314 	add.w	r3, r7, #20
 8011842:	80da      	strh	r2, [r3, #6]

    int32_t x = vdb->area.x1 + draw_area.x1;
 8011844:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011848:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801184c:	461a      	mov	r2, r3
 801184e:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	; 0xcc
 8011852:	4413      	add	r3, r2
 8011854:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    uint32_t mask_p = 0;
 8011858:	2300      	movs	r3, #0
 801185a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

    _lv_memset_ff(mask_buf, mask_buf_size);
 801185e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8011862:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8011866:	f00b fce0 	bl	801d22a <_lv_memset_ff>
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 801186a:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 801186e:	461a      	mov	r2, r3
 8011870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011874:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011878:	4413      	add	r3, r2
 801187a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801187e:	e076      	b.n	801196e <draw_line_skew+0x6fe>

        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
 8011880:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8011884:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011888:	18d0      	adds	r0, r2, r3
 801188a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801188e:	b219      	sxth	r1, r3
 8011890:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011894:	b21a      	sxth	r2, r3
 8011896:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801189a:	b21b      	sxth	r3, r3
 801189c:	f000 f950 	bl	8011b40 <lv_draw_mask_apply>
 80118a0:	4603      	mov	r3, r0
 80118a2:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 80118a6:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d10a      	bne.n	80118c4 <draw_line_skew+0x654>
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
 80118ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80118b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80118b6:	4413      	add	r3, r2
 80118b8:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80118bc:	4611      	mov	r1, r2
 80118be:	4618      	mov	r0, r3
 80118c0:	f00b fc33 	bl	801d12a <_lv_memset_00>
        }

        mask_p += draw_area_w;
 80118c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80118c8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80118cc:	4413      	add	r3, r2
 80118ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 80118d2:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80118d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80118da:	4413      	add	r3, r2
 80118dc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80118e0:	429a      	cmp	r2, r3
 80118e2:	d90b      	bls.n	80118fc <draw_line_skew+0x68c>
            fill_area.y2 ++;
 80118e4:	f107 0314 	add.w	r3, r7, #20
 80118e8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80118ec:	b29b      	uxth	r3, r3
 80118ee:	3301      	adds	r3, #1
 80118f0:	b29b      	uxth	r3, r3
 80118f2:	b21a      	sxth	r2, r3
 80118f4:	f107 0314 	add.w	r3, r7, #20
 80118f8:	80da      	strh	r2, [r3, #6]
 80118fa:	e033      	b.n	8011964 <draw_line_skew+0x6f4>
        }
        else {
            _lv_blend_fill(&fill_area, clip,
 80118fc:	463b      	mov	r3, r7
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	7a9b      	ldrb	r3, [r3, #10]
                           dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                           dsc->blend_mode);
 8011902:	463a      	mov	r2, r7
 8011904:	6812      	ldr	r2, [r2, #0]
 8011906:	7ad2      	ldrb	r2, [r2, #11]
 8011908:	f3c2 0201 	ubfx	r2, r2, #0, #2
 801190c:	b2d2      	uxtb	r2, r2
            _lv_blend_fill(&fill_area, clip,
 801190e:	4614      	mov	r4, r2
 8011910:	463a      	mov	r2, r7
 8011912:	6812      	ldr	r2, [r2, #0]
 8011914:	1d39      	adds	r1, r7, #4
 8011916:	f107 0014 	add.w	r0, r7, #20
 801191a:	9402      	str	r4, [sp, #8]
 801191c:	9301      	str	r3, [sp, #4]
 801191e:	2302      	movs	r3, #2
 8011920:	9300      	str	r3, [sp, #0]
 8011922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011926:	6812      	ldr	r2, [r2, #0]
 8011928:	6809      	ldr	r1, [r1, #0]
 801192a:	f7fa fedb 	bl	800c6e4 <_lv_blend_fill>

            fill_area.y1 = fill_area.y2 + 1;
 801192e:	f107 0314 	add.w	r3, r7, #20
 8011932:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011936:	b29b      	uxth	r3, r3
 8011938:	3301      	adds	r3, #1
 801193a:	b29b      	uxth	r3, r3
 801193c:	b21a      	sxth	r2, r3
 801193e:	f107 0314 	add.w	r3, r7, #20
 8011942:	805a      	strh	r2, [r3, #2]
            fill_area.y2 = fill_area.y1;
 8011944:	f107 0314 	add.w	r3, r7, #20
 8011948:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801194c:	f107 0314 	add.w	r3, r7, #20
 8011950:	80da      	strh	r2, [r3, #6]
            mask_p = 0;
 8011952:	2300      	movs	r3, #0
 8011954:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            _lv_memset_ff(mask_buf, mask_buf_size);
 8011958:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 801195c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8011960:	f00b fc63 	bl	801d22a <_lv_memset_ff>
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 8011964:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011968:	3301      	adds	r3, #1
 801196a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801196e:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8011972:	461a      	mov	r2, r3
 8011974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011978:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801197c:	4413      	add	r3, r2
 801197e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8011982:	429a      	cmp	r2, r3
 8011984:	f77f af7c 	ble.w	8011880 <draw_line_skew+0x610>
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 8011988:	f107 0314 	add.w	r3, r7, #20
 801198c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011990:	f107 0314 	add.w	r3, r7, #20
 8011994:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011998:	429a      	cmp	r2, r3
 801199a:	d023      	beq.n	80119e4 <draw_line_skew+0x774>
        fill_area.y2--;
 801199c:	f107 0314 	add.w	r3, r7, #20
 80119a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80119a4:	b29b      	uxth	r3, r3
 80119a6:	3b01      	subs	r3, #1
 80119a8:	b29b      	uxth	r3, r3
 80119aa:	b21a      	sxth	r2, r3
 80119ac:	f107 0314 	add.w	r3, r7, #20
 80119b0:	80da      	strh	r2, [r3, #6]
        _lv_blend_fill(&fill_area, clip,
 80119b2:	463b      	mov	r3, r7
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	7a9b      	ldrb	r3, [r3, #10]
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
 80119b8:	463a      	mov	r2, r7
 80119ba:	6812      	ldr	r2, [r2, #0]
 80119bc:	7ad2      	ldrb	r2, [r2, #11]
 80119be:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80119c2:	b2d2      	uxtb	r2, r2
        _lv_blend_fill(&fill_area, clip,
 80119c4:	4614      	mov	r4, r2
 80119c6:	463a      	mov	r2, r7
 80119c8:	6812      	ldr	r2, [r2, #0]
 80119ca:	1d39      	adds	r1, r7, #4
 80119cc:	f107 0014 	add.w	r0, r7, #20
 80119d0:	9402      	str	r4, [sp, #8]
 80119d2:	9301      	str	r3, [sp, #4]
 80119d4:	2302      	movs	r3, #2
 80119d6:	9300      	str	r3, [sp, #0]
 80119d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80119dc:	6812      	ldr	r2, [r2, #0]
 80119de:	6809      	ldr	r1, [r1, #0]
 80119e0:	f7fa fe80 	bl	800c6e4 <_lv_blend_fill>

    }

    _lv_mem_buf_release(mask_buf);
 80119e4:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80119e8:	f00b f874 	bl	801cad4 <_lv_mem_buf_release>

    lv_draw_mask_remove_id(mask_left_id);
 80119ec:	f9b7 3104 	ldrsh.w	r3, [r7, #260]	; 0x104
 80119f0:	4618      	mov	r0, r3
 80119f2:	f000 f8e9 	bl	8011bc8 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
 80119f6:	f9b7 3102 	ldrsh.w	r3, [r7, #258]	; 0x102
 80119fa:	4618      	mov	r0, r3
 80119fc:	f000 f8e4 	bl	8011bc8 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
 8011a00:	f9b7 312a 	ldrsh.w	r3, [r7, #298]	; 0x12a
 8011a04:	4618      	mov	r0, r3
 8011a06:	f000 f8df 	bl	8011bc8 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
 8011a0a:	f9b7 3128 	ldrsh.w	r3, [r7, #296]	; 0x128
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f000 f8da 	bl	8011bc8 <lv_draw_mask_remove_id>
 8011a14:	e000      	b.n	8011a18 <draw_line_skew+0x7a8>
    if(is_common == false) return;
 8011a16:	bf00      	nop
}
 8011a18:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bdb0      	pop	{r4, r5, r7, pc}

08011a20 <_lv_memcpy_small>:
{
 8011a20:	b480      	push	{r7}
 8011a22:	b087      	sub	sp, #28
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	60f8      	str	r0, [r7, #12]
 8011a28:	60b9      	str	r1, [r7, #8]
 8011a2a:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 8011a30:	68bb      	ldr	r3, [r7, #8]
 8011a32:	613b      	str	r3, [r7, #16]
    while(len) {
 8011a34:	e00c      	b.n	8011a50 <_lv_memcpy_small+0x30>
        *d8 = *s8;
 8011a36:	693b      	ldr	r3, [r7, #16]
 8011a38:	781a      	ldrb	r2, [r3, #0]
 8011a3a:	697b      	ldr	r3, [r7, #20]
 8011a3c:	701a      	strb	r2, [r3, #0]
        d8++;
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	3301      	adds	r3, #1
 8011a42:	617b      	str	r3, [r7, #20]
        s8++;
 8011a44:	693b      	ldr	r3, [r7, #16]
 8011a46:	3301      	adds	r3, #1
 8011a48:	613b      	str	r3, [r7, #16]
        len--;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	3b01      	subs	r3, #1
 8011a4e:	607b      	str	r3, [r7, #4]
    while(len) {
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d1ef      	bne.n	8011a36 <_lv_memcpy_small+0x16>
    return dst;
 8011a56:	68fb      	ldr	r3, [r7, #12]
}
 8011a58:	4618      	mov	r0, r3
 8011a5a:	371c      	adds	r7, #28
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a62:	4770      	bx	lr

08011a64 <lv_area_copy>:
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b082      	sub	sp, #8
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
 8011a6c:	6039      	str	r1, [r7, #0]
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
 8011a6e:	2208      	movs	r2, #8
 8011a70:	6839      	ldr	r1, [r7, #0]
 8011a72:	6878      	ldr	r0, [r7, #4]
 8011a74:	f7ff ffd4 	bl	8011a20 <_lv_memcpy_small>
}
 8011a78:	bf00      	nop
 8011a7a:	3708      	adds	r7, #8
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}

08011a80 <lv_area_get_width>:
{
 8011a80:	b480      	push	{r7}
 8011a82:	b083      	sub	sp, #12
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011a8e:	b29a      	uxth	r2, r3
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a96:	b29b      	uxth	r3, r3
 8011a98:	1ad3      	subs	r3, r2, r3
 8011a9a:	b29b      	uxth	r3, r3
 8011a9c:	3301      	adds	r3, #1
 8011a9e:	b29b      	uxth	r3, r3
 8011aa0:	b21b      	sxth	r3, r3
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	370c      	adds	r7, #12
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aac:	4770      	bx	lr

08011aae <lv_area_get_height>:
{
 8011aae:	b480      	push	{r7}
 8011ab0:	b083      	sub	sp, #12
 8011ab2:	af00      	add	r7, sp, #0
 8011ab4:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011abc:	b29a      	uxth	r2, r3
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011ac4:	b29b      	uxth	r3, r3
 8011ac6:	1ad3      	subs	r3, r2, r3
 8011ac8:	b29b      	uxth	r3, r3
 8011aca:	3301      	adds	r3, #1
 8011acc:	b29b      	uxth	r3, r3
 8011ace:	b21b      	sxth	r3, r3
}
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	370c      	adds	r7, #12
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ada:	4770      	bx	lr

08011adc <lv_draw_mask_add>:
 * @param param an initialized mask parameter. Only the pointer is saved.
 * @param custom_id a custom pointer to identify the mask. Used in `lv_draw_mask_remove_custom`.
 * @return the an integer, the ID of the mask. Can be used in `lv_draw_mask_remove_id`.
 */
int16_t lv_draw_mask_add(void * param, void * custom_id)
{
 8011adc:	b480      	push	{r7}
 8011ade:	b085      	sub	sp, #20
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
 8011ae4:	6039      	str	r1, [r7, #0]
    /*Look for a free entry*/
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	73fb      	strb	r3, [r7, #15]
 8011aea:	e008      	b.n	8011afe <lv_draw_mask_add+0x22>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 8011aec:	7bfb      	ldrb	r3, [r7, #15]
 8011aee:	4a13      	ldr	r2, [pc, #76]	; (8011b3c <lv_draw_mask_add+0x60>)
 8011af0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d006      	beq.n	8011b06 <lv_draw_mask_add+0x2a>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011af8:	7bfb      	ldrb	r3, [r7, #15]
 8011afa:	3301      	adds	r3, #1
 8011afc:	73fb      	strb	r3, [r7, #15]
 8011afe:	7bfb      	ldrb	r3, [r7, #15]
 8011b00:	2b0f      	cmp	r3, #15
 8011b02:	d9f3      	bls.n	8011aec <lv_draw_mask_add+0x10>
 8011b04:	e000      	b.n	8011b08 <lv_draw_mask_add+0x2c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 8011b06:	bf00      	nop
    }

    if(i >= _LV_MASK_MAX_NUM) {
 8011b08:	7bfb      	ldrb	r3, [r7, #15]
 8011b0a:	2b0f      	cmp	r3, #15
 8011b0c:	d902      	bls.n	8011b14 <lv_draw_mask_add+0x38>
        LV_LOG_WARN("lv_mask_add: no place to add the mask");
        return LV_MASK_ID_INV;
 8011b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8011b12:	e00c      	b.n	8011b2e <lv_draw_mask_add+0x52>
    }

    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 8011b14:	7bfb      	ldrb	r3, [r7, #15]
 8011b16:	4909      	ldr	r1, [pc, #36]	; (8011b3c <lv_draw_mask_add+0x60>)
 8011b18:	687a      	ldr	r2, [r7, #4]
 8011b1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 8011b1e:	7bfb      	ldrb	r3, [r7, #15]
 8011b20:	4a06      	ldr	r2, [pc, #24]	; (8011b3c <lv_draw_mask_add+0x60>)
 8011b22:	00db      	lsls	r3, r3, #3
 8011b24:	4413      	add	r3, r2
 8011b26:	683a      	ldr	r2, [r7, #0]
 8011b28:	605a      	str	r2, [r3, #4]

    return i;
 8011b2a:	7bfb      	ldrb	r3, [r7, #15]
 8011b2c:	b21b      	sxth	r3, r3
}
 8011b2e:	4618      	mov	r0, r3
 8011b30:	3714      	adds	r7, #20
 8011b32:	46bd      	mov	sp, r7
 8011b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b38:	4770      	bx	lr
 8011b3a:	bf00      	nop
 8011b3c:	20021870 	.word	0x20021870

08011b40 <lv_draw_mask_apply>:
 * - `LV_DRAW_MASK_RES_FULL_COVER`: the whole line is fully visible. `mask_buf` is unchanged
 * - `LV_DRAW_MASK_RES_CHANGED`: `mask_buf` has changed, it shows the desired opacity of each pixel in the given line
 */
LV_ATTRIBUTE_FAST_MEM lv_draw_mask_res_t lv_draw_mask_apply(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                            lv_coord_t len)
{
 8011b40:	b590      	push	{r4, r7, lr}
 8011b42:	b08b      	sub	sp, #44	; 0x2c
 8011b44:	af02      	add	r7, sp, #8
 8011b46:	60f8      	str	r0, [r7, #12]
 8011b48:	4608      	mov	r0, r1
 8011b4a:	4611      	mov	r1, r2
 8011b4c:	461a      	mov	r2, r3
 8011b4e:	4603      	mov	r3, r0
 8011b50:	817b      	strh	r3, [r7, #10]
 8011b52:	460b      	mov	r3, r1
 8011b54:	813b      	strh	r3, [r7, #8]
 8011b56:	4613      	mov	r3, r2
 8011b58:	80fb      	strh	r3, [r7, #6]
    bool changed = false;
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	77fb      	strb	r3, [r7, #31]
    lv_draw_mask_common_dsc_t * dsc;

    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
 8011b5e:	4b19      	ldr	r3, [pc, #100]	; (8011bc4 <lv_draw_mask_apply+0x84>)
 8011b60:	61bb      	str	r3, [r7, #24]

    while(m->param) {
 8011b62:	e021      	b.n	8011ba8 <lv_draw_mask_apply+0x68>
        dsc = m->param;
 8011b64:	69bb      	ldr	r3, [r7, #24]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	617b      	str	r3, [r7, #20]
        lv_draw_mask_res_t res = LV_DRAW_MASK_RES_FULL_COVER;
 8011b6a:	2301      	movs	r3, #1
 8011b6c:	74fb      	strb	r3, [r7, #19]
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
 8011b6e:	697b      	ldr	r3, [r7, #20]
 8011b70:	681c      	ldr	r4, [r3, #0]
 8011b72:	69bb      	ldr	r3, [r7, #24]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011b7a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011b7e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8011b82:	9300      	str	r3, [sp, #0]
 8011b84:	4603      	mov	r3, r0
 8011b86:	68f8      	ldr	r0, [r7, #12]
 8011b88:	47a0      	blx	r4
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	74fb      	strb	r3, [r7, #19]
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 8011b8e:	7cfb      	ldrb	r3, [r7, #19]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d101      	bne.n	8011b98 <lv_draw_mask_apply+0x58>
 8011b94:	2300      	movs	r3, #0
 8011b96:	e011      	b.n	8011bbc <lv_draw_mask_apply+0x7c>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 8011b98:	7cfb      	ldrb	r3, [r7, #19]
 8011b9a:	2b02      	cmp	r3, #2
 8011b9c:	d101      	bne.n	8011ba2 <lv_draw_mask_apply+0x62>
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	77fb      	strb	r3, [r7, #31]

        m++;
 8011ba2:	69bb      	ldr	r3, [r7, #24]
 8011ba4:	3308      	adds	r3, #8
 8011ba6:	61bb      	str	r3, [r7, #24]
    while(m->param) {
 8011ba8:	69bb      	ldr	r3, [r7, #24]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d1d9      	bne.n	8011b64 <lv_draw_mask_apply+0x24>
    }

    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 8011bb0:	7ffb      	ldrb	r3, [r7, #31]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d001      	beq.n	8011bba <lv_draw_mask_apply+0x7a>
 8011bb6:	2302      	movs	r3, #2
 8011bb8:	e000      	b.n	8011bbc <lv_draw_mask_apply+0x7c>
 8011bba:	2301      	movs	r3, #1
}
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	3724      	adds	r7, #36	; 0x24
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	bd90      	pop	{r4, r7, pc}
 8011bc4:	20021870 	.word	0x20021870

08011bc8 <lv_draw_mask_remove_id>:
 * @param id the ID of the mask.  Returned by `lv_draw_mask_add`
 * @return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_id(int16_t id)
{
 8011bc8:	b480      	push	{r7}
 8011bca:	b085      	sub	sp, #20
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	4603      	mov	r3, r0
 8011bd0:	80fb      	strh	r3, [r7, #6]
    void * p = NULL;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	60fb      	str	r3, [r7, #12]

    if(id != LV_MASK_ID_INV) {
 8011bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bde:	d012      	beq.n	8011c06 <lv_draw_mask_remove_id+0x3e>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 8011be0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011be4:	4a0b      	ldr	r2, [pc, #44]	; (8011c14 <lv_draw_mask_remove_id+0x4c>)
 8011be6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011bea:	60fb      	str	r3, [r7, #12]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 8011bec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011bf0:	4a08      	ldr	r2, [pc, #32]	; (8011c14 <lv_draw_mask_remove_id+0x4c>)
 8011bf2:	2100      	movs	r1, #0
 8011bf4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 8011bf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011bfc:	4a05      	ldr	r2, [pc, #20]	; (8011c14 <lv_draw_mask_remove_id+0x4c>)
 8011bfe:	00db      	lsls	r3, r3, #3
 8011c00:	4413      	add	r3, r2
 8011c02:	2200      	movs	r2, #0
 8011c04:	605a      	str	r2, [r3, #4]
    }

    return p;
 8011c06:	68fb      	ldr	r3, [r7, #12]
}
 8011c08:	4618      	mov	r0, r3
 8011c0a:	3714      	adds	r7, #20
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c12:	4770      	bx	lr
 8011c14:	20021870 	.word	0x20021870

08011c18 <lv_draw_mask_remove_custom>:
 * @param custom_id a pointer used in `lv_draw_mask_add`
 * @return return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_custom(void * custom_id)
{
 8011c18:	b480      	push	{r7}
 8011c1a:	b085      	sub	sp, #20
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
    void * p = NULL;
 8011c20:	2300      	movs	r3, #0
 8011c22:	60fb      	str	r3, [r7, #12]
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011c24:	2300      	movs	r3, #0
 8011c26:	72fb      	strb	r3, [r7, #11]
 8011c28:	e01a      	b.n	8011c60 <lv_draw_mask_remove_custom+0x48>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 8011c2a:	7afb      	ldrb	r3, [r7, #11]
 8011c2c:	4a11      	ldr	r2, [pc, #68]	; (8011c74 <lv_draw_mask_remove_custom+0x5c>)
 8011c2e:	00db      	lsls	r3, r3, #3
 8011c30:	4413      	add	r3, r2
 8011c32:	685b      	ldr	r3, [r3, #4]
 8011c34:	687a      	ldr	r2, [r7, #4]
 8011c36:	429a      	cmp	r2, r3
 8011c38:	d10f      	bne.n	8011c5a <lv_draw_mask_remove_custom+0x42>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 8011c3a:	7afb      	ldrb	r3, [r7, #11]
 8011c3c:	4a0d      	ldr	r2, [pc, #52]	; (8011c74 <lv_draw_mask_remove_custom+0x5c>)
 8011c3e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011c42:	60fb      	str	r3, [r7, #12]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 8011c44:	7afb      	ldrb	r3, [r7, #11]
 8011c46:	4a0b      	ldr	r2, [pc, #44]	; (8011c74 <lv_draw_mask_remove_custom+0x5c>)
 8011c48:	2100      	movs	r1, #0
 8011c4a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
 8011c4e:	7afb      	ldrb	r3, [r7, #11]
 8011c50:	4a08      	ldr	r2, [pc, #32]	; (8011c74 <lv_draw_mask_remove_custom+0x5c>)
 8011c52:	00db      	lsls	r3, r3, #3
 8011c54:	4413      	add	r3, r2
 8011c56:	2200      	movs	r2, #0
 8011c58:	605a      	str	r2, [r3, #4]
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011c5a:	7afb      	ldrb	r3, [r7, #11]
 8011c5c:	3301      	adds	r3, #1
 8011c5e:	72fb      	strb	r3, [r7, #11]
 8011c60:	7afb      	ldrb	r3, [r7, #11]
 8011c62:	2b0f      	cmp	r3, #15
 8011c64:	d9e1      	bls.n	8011c2a <lv_draw_mask_remove_custom+0x12>
        }
    }
    return p;
 8011c66:	68fb      	ldr	r3, [r7, #12]
}
 8011c68:	4618      	mov	r0, r3
 8011c6a:	3714      	adds	r7, #20
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c72:	4770      	bx	lr
 8011c74:	20021870 	.word	0x20021870

08011c78 <lv_draw_mask_get_cnt>:
/**
 * Count the currently added masks
 * @return number of active masks
 */
LV_ATTRIBUTE_FAST_MEM uint8_t lv_draw_mask_get_cnt(void)
{
 8011c78:	b480      	push	{r7}
 8011c7a:	b083      	sub	sp, #12
 8011c7c:	af00      	add	r7, sp, #0
    uint8_t cnt = 0;
 8011c7e:	2300      	movs	r3, #0
 8011c80:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011c82:	2300      	movs	r3, #0
 8011c84:	71bb      	strb	r3, [r7, #6]
 8011c86:	e00b      	b.n	8011ca0 <lv_draw_mask_get_cnt+0x28>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
 8011c88:	79bb      	ldrb	r3, [r7, #6]
 8011c8a:	4a0a      	ldr	r2, [pc, #40]	; (8011cb4 <lv_draw_mask_get_cnt+0x3c>)
 8011c8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d002      	beq.n	8011c9a <lv_draw_mask_get_cnt+0x22>
 8011c94:	79fb      	ldrb	r3, [r7, #7]
 8011c96:	3301      	adds	r3, #1
 8011c98:	71fb      	strb	r3, [r7, #7]
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8011c9a:	79bb      	ldrb	r3, [r7, #6]
 8011c9c:	3301      	adds	r3, #1
 8011c9e:	71bb      	strb	r3, [r7, #6]
 8011ca0:	79bb      	ldrb	r3, [r7, #6]
 8011ca2:	2b0f      	cmp	r3, #15
 8011ca4:	d9f0      	bls.n	8011c88 <lv_draw_mask_get_cnt+0x10>
    }
    return cnt;
 8011ca6:	79fb      	ldrb	r3, [r7, #7]
}
 8011ca8:	4618      	mov	r0, r3
 8011caa:	370c      	adds	r7, #12
 8011cac:	46bd      	mov	sp, r7
 8011cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb2:	4770      	bx	lr
 8011cb4:	20021870 	.word	0x20021870

08011cb8 <lv_draw_mask_line_points_init>:
 * With `LV_DRAW_MASK_LINE_SIDE_LEFT/RIGHT` and horizontal line all pixels are kept
 * With `LV_DRAW_MASK_LINE_SIDE_TOP/BOTTOM` and vertical line all pixels are kept
 */
void lv_draw_mask_line_points_init(lv_draw_mask_line_param_t * param, lv_coord_t p1x, lv_coord_t p1y, lv_coord_t p2x,
                                   lv_coord_t p2y, lv_draw_mask_line_side_t side)
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	b08a      	sub	sp, #40	; 0x28
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	60f8      	str	r0, [r7, #12]
 8011cc0:	4608      	mov	r0, r1
 8011cc2:	4611      	mov	r1, r2
 8011cc4:	461a      	mov	r2, r3
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	817b      	strh	r3, [r7, #10]
 8011cca:	460b      	mov	r3, r1
 8011ccc:	813b      	strh	r3, [r7, #8]
 8011cce:	4613      	mov	r3, r2
 8011cd0:	80fb      	strh	r3, [r7, #6]
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 8011cd2:	212c      	movs	r1, #44	; 0x2c
 8011cd4:	68f8      	ldr	r0, [r7, #12]
 8011cd6:	f00b fa28 	bl	801d12a <_lv_memset_00>

    if(p1y > p2y) {
 8011cda:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011cde:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8011ce2:	429a      	cmp	r2, r3
 8011ce4:	dd0b      	ble.n	8011cfe <lv_draw_mask_line_points_init+0x46>
        lv_coord_t t;
        t = p2x;
 8011ce6:	88fb      	ldrh	r3, [r7, #6]
 8011ce8:	84fb      	strh	r3, [r7, #38]	; 0x26
        p2x = p1x;
 8011cea:	897b      	ldrh	r3, [r7, #10]
 8011cec:	80fb      	strh	r3, [r7, #6]
        p1x = t;
 8011cee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011cf0:	817b      	strh	r3, [r7, #10]

        t = p2y;
 8011cf2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011cf4:	84fb      	strh	r3, [r7, #38]	; 0x26
        p2y = p1y;
 8011cf6:	893b      	ldrh	r3, [r7, #8]
 8011cf8:	863b      	strh	r3, [r7, #48]	; 0x30
        p1y = t;
 8011cfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011cfc:	813b      	strh	r3, [r7, #8]
    }

    param->cfg.p1.x = p1x;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	897a      	ldrh	r2, [r7, #10]
 8011d02:	811a      	strh	r2, [r3, #8]
    param->cfg.p1.y = p1y;
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	893a      	ldrh	r2, [r7, #8]
 8011d08:	815a      	strh	r2, [r3, #10]
    param->cfg.p2.x = p2x;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	88fa      	ldrh	r2, [r7, #6]
 8011d0e:	819a      	strh	r2, [r3, #12]
    param->cfg.p2.y = p2y;
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8011d14:	81da      	strh	r2, [r3, #14]
    param->cfg.side = side;
 8011d16:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8011d1a:	f003 0303 	and.w	r3, r3, #3
 8011d1e:	b2d9      	uxtb	r1, r3
 8011d20:	68fa      	ldr	r2, [r7, #12]
 8011d22:	7c13      	ldrb	r3, [r2, #16]
 8011d24:	f361 0301 	bfi	r3, r1, #0, #2
 8011d28:	7413      	strb	r3, [r2, #16]

    param->origo.x = p1x;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	897a      	ldrh	r2, [r7, #10]
 8011d2e:	825a      	strh	r2, [r3, #18]
    param->origo.y = p1y;
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	893a      	ldrh	r2, [r7, #8]
 8011d34:	829a      	strh	r2, [r3, #20]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
 8011d36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011d3a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011d3e:	1ad3      	subs	r3, r2, r3
 8011d40:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8011d44:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8011d48:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 8011d4c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011d50:	1acb      	subs	r3, r1, r3
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	bfb8      	it	lt
 8011d56:	425b      	neglt	r3, r3
 8011d58:	429a      	cmp	r2, r3
 8011d5a:	bfcc      	ite	gt
 8011d5c:	2301      	movgt	r3, #1
 8011d5e:	2300      	movle	r3, #0
 8011d60:	b2d9      	uxtb	r1, r3
 8011d62:	68fa      	ldr	r2, [r7, #12]
 8011d64:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011d68:	f361 0300 	bfi	r3, r1, #0, #1
 8011d6c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    param->yx_steep = 0;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	2200      	movs	r2, #0
 8011d74:	61da      	str	r2, [r3, #28]
    param->xy_steep = 0;
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	2200      	movs	r2, #0
 8011d7a:	619a      	str	r2, [r3, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	4a63      	ldr	r2, [pc, #396]	; (8011f0c <lv_draw_mask_line_points_init+0x254>)
 8011d80:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	2200      	movs	r2, #0
 8011d86:	711a      	strb	r2, [r3, #4]

    int32_t dx = p2x - p1x;
 8011d88:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011d8c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011d90:	1ad3      	subs	r3, r2, r3
 8011d92:	623b      	str	r3, [r7, #32]
    int32_t dy = p2y - p1y;
 8011d94:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8011d98:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011d9c:	1ad3      	subs	r3, r2, r3
 8011d9e:	61fb      	str	r3, [r7, #28]

    if(param->flat) {
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011da6:	f003 0301 	and.w	r3, r3, #1
 8011daa:	b2db      	uxtb	r3, r3
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d024      	beq.n	8011dfa <lv_draw_mask_line_points_init+0x142>
        /*Normalize the steep. Delta x should be relative to delta x = 1024*/
        int32_t m;

        if(dx) {
 8011db0:	6a3b      	ldr	r3, [r7, #32]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d00c      	beq.n	8011dd0 <lv_draw_mask_line_points_init+0x118>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 8011db6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011dba:	6a3b      	ldr	r3, [r7, #32]
 8011dbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8011dc0:	617b      	str	r3, [r7, #20]
            param->yx_steep = (m * dy) >> 10;
 8011dc2:	697b      	ldr	r3, [r7, #20]
 8011dc4:	69fa      	ldr	r2, [r7, #28]
 8011dc6:	fb02 f303 	mul.w	r3, r2, r3
 8011dca:	129a      	asrs	r2, r3, #10
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	61da      	str	r2, [r3, #28]
        }

        if(dy) {
 8011dd0:	69fb      	ldr	r3, [r7, #28]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d00c      	beq.n	8011df0 <lv_draw_mask_line_points_init+0x138>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8011dd6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011dda:	69fb      	ldr	r3, [r7, #28]
 8011ddc:	fb92 f3f3 	sdiv	r3, r2, r3
 8011de0:	617b      	str	r3, [r7, #20]
            param->xy_steep = (m * dx) >> 10;
 8011de2:	697b      	ldr	r3, [r7, #20]
 8011de4:	6a3a      	ldr	r2, [r7, #32]
 8011de6:	fb02 f303 	mul.w	r3, r2, r3
 8011dea:	129a      	asrs	r2, r3, #10
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	619a      	str	r2, [r3, #24]
        }
        param->steep = param->yx_steep;
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	69da      	ldr	r2, [r3, #28]
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	621a      	str	r2, [r3, #32]
 8011df8:	e023      	b.n	8011e42 <lv_draw_mask_line_points_init+0x18a>
    }
    else {
        /*Normalize the steep. Delta y should be relative to delta x = 1024*/
        int32_t m;

        if(dy) {
 8011dfa:	69fb      	ldr	r3, [r7, #28]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d00c      	beq.n	8011e1a <lv_draw_mask_line_points_init+0x162>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8011e00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011e04:	69fb      	ldr	r3, [r7, #28]
 8011e06:	fb92 f3f3 	sdiv	r3, r2, r3
 8011e0a:	61bb      	str	r3, [r7, #24]
            param->xy_steep = (m * dx) >> 10;
 8011e0c:	69bb      	ldr	r3, [r7, #24]
 8011e0e:	6a3a      	ldr	r2, [r7, #32]
 8011e10:	fb02 f303 	mul.w	r3, r2, r3
 8011e14:	129a      	asrs	r2, r3, #10
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	619a      	str	r2, [r3, #24]
        }

        if(dx) {
 8011e1a:	6a3b      	ldr	r3, [r7, #32]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d00c      	beq.n	8011e3a <lv_draw_mask_line_points_init+0x182>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8011e20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011e24:	6a3b      	ldr	r3, [r7, #32]
 8011e26:	fb92 f3f3 	sdiv	r3, r2, r3
 8011e2a:	61bb      	str	r3, [r7, #24]
            param->yx_steep = (m * dy) >> 10;
 8011e2c:	69bb      	ldr	r3, [r7, #24]
 8011e2e:	69fa      	ldr	r2, [r7, #28]
 8011e30:	fb02 f303 	mul.w	r3, r2, r3
 8011e34:	129a      	asrs	r2, r3, #10
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	61da      	str	r2, [r3, #28]
        }
        param->steep = param->xy_steep;
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	699a      	ldr	r2, [r3, #24]
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	621a      	str	r2, [r3, #32]
    }

    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	7c1b      	ldrb	r3, [r3, #16]
 8011e46:	f003 0303 	and.w	r3, r3, #3
 8011e4a:	b2db      	uxtb	r3, r3
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d107      	bne.n	8011e60 <lv_draw_mask_line_points_init+0x1a8>
 8011e50:	68fa      	ldr	r2, [r7, #12]
 8011e52:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011e56:	f36f 0341 	bfc	r3, #1, #1
 8011e5a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011e5e:	e043      	b.n	8011ee8 <lv_draw_mask_line_points_init+0x230>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	7c1b      	ldrb	r3, [r3, #16]
 8011e64:	f003 0303 	and.w	r3, r3, #3
 8011e68:	b2db      	uxtb	r3, r3
 8011e6a:	2b01      	cmp	r3, #1
 8011e6c:	d107      	bne.n	8011e7e <lv_draw_mask_line_points_init+0x1c6>
 8011e6e:	68fa      	ldr	r2, [r7, #12]
 8011e70:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011e74:	f043 0302 	orr.w	r3, r3, #2
 8011e78:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011e7c:	e034      	b.n	8011ee8 <lv_draw_mask_line_points_init+0x230>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	7c1b      	ldrb	r3, [r3, #16]
 8011e82:	f003 0303 	and.w	r3, r3, #3
 8011e86:	b2db      	uxtb	r3, r3
 8011e88:	2b02      	cmp	r3, #2
 8011e8a:	d113      	bne.n	8011eb4 <lv_draw_mask_line_points_init+0x1fc>
        if(param->steep > 0) param->inv = 1;
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	6a1b      	ldr	r3, [r3, #32]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	dd07      	ble.n	8011ea4 <lv_draw_mask_line_points_init+0x1ec>
 8011e94:	68fa      	ldr	r2, [r7, #12]
 8011e96:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011e9a:	f043 0302 	orr.w	r3, r3, #2
 8011e9e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011ea2:	e021      	b.n	8011ee8 <lv_draw_mask_line_points_init+0x230>
        else param->inv = 0;
 8011ea4:	68fa      	ldr	r2, [r7, #12]
 8011ea6:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011eaa:	f36f 0341 	bfc	r3, #1, #1
 8011eae:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011eb2:	e019      	b.n	8011ee8 <lv_draw_mask_line_points_init+0x230>
    }
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	7c1b      	ldrb	r3, [r3, #16]
 8011eb8:	f003 0303 	and.w	r3, r3, #3
 8011ebc:	b2db      	uxtb	r3, r3
 8011ebe:	2b03      	cmp	r3, #3
 8011ec0:	d112      	bne.n	8011ee8 <lv_draw_mask_line_points_init+0x230>
        if(param->steep > 0) param->inv = 0;
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	6a1b      	ldr	r3, [r3, #32]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	dd07      	ble.n	8011eda <lv_draw_mask_line_points_init+0x222>
 8011eca:	68fa      	ldr	r2, [r7, #12]
 8011ecc:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011ed0:	f36f 0341 	bfc	r3, #1, #1
 8011ed4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011ed8:	e006      	b.n	8011ee8 <lv_draw_mask_line_points_init+0x230>
        else param->inv = 1;
 8011eda:	68fa      	ldr	r2, [r7, #12]
 8011edc:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8011ee0:	f043 0302 	orr.w	r3, r3, #2
 8011ee4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    }

    param->spx = param->steep >> 2;
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	6a1b      	ldr	r3, [r3, #32]
 8011eec:	109a      	asrs	r2, r3, #2
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	625a      	str	r2, [r3, #36]	; 0x24
    if(param->steep < 0) param->spx = -param->spx;
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	6a1b      	ldr	r3, [r3, #32]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	da04      	bge.n	8011f04 <lv_draw_mask_line_points_init+0x24c>
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011efe:	425a      	negs	r2, r3
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011f04:	bf00      	nop
 8011f06:	3728      	adds	r7, #40	; 0x28
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	bd80      	pop	{r7, pc}
 8011f0c:	08011fa9 	.word	0x08011fa9

08011f10 <lv_draw_mask_radius_init>:
 * @param rect coordinates of the rectangle to affect (absolute coordinates)
 * @param radius radius of the rectangle
 * @param inv: true: keep the pixels inside the rectangle; keep the pixels outside of the rectangle
 */
void lv_draw_mask_radius_init(lv_draw_mask_radius_param_t * param, const lv_area_t * rect, lv_coord_t radius, bool inv)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b086      	sub	sp, #24
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	60f8      	str	r0, [r7, #12]
 8011f18:	60b9      	str	r1, [r7, #8]
 8011f1a:	4611      	mov	r1, r2
 8011f1c:	461a      	mov	r2, r3
 8011f1e:	460b      	mov	r3, r1
 8011f20:	80fb      	strh	r3, [r7, #6]
 8011f22:	4613      	mov	r3, r2
 8011f24:	717b      	strb	r3, [r7, #5]
    lv_coord_t w = lv_area_get_width(rect);
 8011f26:	68b8      	ldr	r0, [r7, #8]
 8011f28:	f7ff fdaa 	bl	8011a80 <lv_area_get_width>
 8011f2c:	4603      	mov	r3, r0
 8011f2e:	82fb      	strh	r3, [r7, #22]
    lv_coord_t h = lv_area_get_height(rect);
 8011f30:	68b8      	ldr	r0, [r7, #8]
 8011f32:	f7ff fdbc 	bl	8011aae <lv_area_get_height>
 8011f36:	4603      	mov	r3, r0
 8011f38:	82bb      	strh	r3, [r7, #20]
    int32_t short_side = LV_MATH_MIN(w, h);
 8011f3a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8011f3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011f42:	4293      	cmp	r3, r2
 8011f44:	bfa8      	it	ge
 8011f46:	4613      	movge	r3, r2
 8011f48:	b21b      	sxth	r3, r3
 8011f4a:	613b      	str	r3, [r7, #16]
    if(radius > short_side >> 1) radius = short_side >> 1;
 8011f4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011f50:	693b      	ldr	r3, [r7, #16]
 8011f52:	105b      	asrs	r3, r3, #1
 8011f54:	429a      	cmp	r2, r3
 8011f56:	dd02      	ble.n	8011f5e <lv_draw_mask_radius_init+0x4e>
 8011f58:	693b      	ldr	r3, [r7, #16]
 8011f5a:	105b      	asrs	r3, r3, #1
 8011f5c:	80fb      	strh	r3, [r7, #6]

    lv_area_copy(&param->cfg.rect, rect);
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	3308      	adds	r3, #8
 8011f62:	68b9      	ldr	r1, [r7, #8]
 8011f64:	4618      	mov	r0, r3
 8011f66:	f7ff fd7d 	bl	8011a64 <lv_area_copy>
    param->cfg.radius = radius;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	88fa      	ldrh	r2, [r7, #6]
 8011f6e:	821a      	strh	r2, [r3, #16]
    param->cfg.outer = inv ? 1 : 0;
 8011f70:	7979      	ldrb	r1, [r7, #5]
 8011f72:	68fa      	ldr	r2, [r7, #12]
 8011f74:	7c93      	ldrb	r3, [r2, #18]
 8011f76:	f361 0300 	bfi	r3, r1, #0, #1
 8011f7a:	7493      	strb	r3, [r2, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	4a09      	ldr	r2, [pc, #36]	; (8011fa4 <lv_draw_mask_radius_init+0x94>)
 8011f80:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	2202      	movs	r2, #2
 8011f86:	711a      	strb	r2, [r3, #4]
    param->y_prev = INT32_MIN;
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011f8e:	615a      	str	r2, [r3, #20]
    param->y_prev_x.f = 0;
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	2200      	movs	r2, #0
 8011f94:	835a      	strh	r2, [r3, #26]
    param->y_prev_x.i = 0;
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	2200      	movs	r2, #0
 8011f9a:	831a      	strh	r2, [r3, #24]
}
 8011f9c:	bf00      	nop
 8011f9e:	3718      	adds	r7, #24
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}
 8011fa4:	08012929 	.word	0x08012929

08011fa8 <lv_draw_mask_line>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_line(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                  lv_coord_t abs_y, lv_coord_t len,
                                                                  lv_draw_mask_line_param_t * p)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b08a      	sub	sp, #40	; 0x28
 8011fac:	af02      	add	r7, sp, #8
 8011fae:	60f8      	str	r0, [r7, #12]
 8011fb0:	4608      	mov	r0, r1
 8011fb2:	4611      	mov	r1, r2
 8011fb4:	461a      	mov	r2, r3
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	817b      	strh	r3, [r7, #10]
 8011fba:	460b      	mov	r3, r1
 8011fbc:	813b      	strh	r3, [r7, #8]
 8011fbe:	4613      	mov	r3, r2
 8011fc0:	80fb      	strh	r3, [r7, #6]
    /*Make to points relative to the vertex*/
    abs_y -= p->origo.y;
 8011fc2:	893a      	ldrh	r2, [r7, #8]
 8011fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fc6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8011fca:	b29b      	uxth	r3, r3
 8011fcc:	1ad3      	subs	r3, r2, r3
 8011fce:	b29b      	uxth	r3, r3
 8011fd0:	813b      	strh	r3, [r7, #8]
    abs_x -= p->origo.x;
 8011fd2:	897a      	ldrh	r2, [r7, #10]
 8011fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fd6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8011fda:	b29b      	uxth	r3, r3
 8011fdc:	1ad3      	subs	r3, r2, r3
 8011fde:	b29b      	uxth	r3, r3
 8011fe0:	817b      	strh	r3, [r7, #10]

    /*Handle special cases*/
    if(p->steep == 0) {
 8011fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fe4:	6a1b      	ldr	r3, [r3, #32]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	f040 80a7 	bne.w	801213a <lv_draw_mask_line+0x192>
        /*Horizontal*/
        if(p->flat) {
 8011fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ff2:	f003 0301 	and.w	r3, r3, #1
 8011ff6:	b2db      	uxtb	r3, r3
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d02c      	beq.n	8012056 <lv_draw_mask_line+0xae>
            /*Non sense: Can't be on the right/left of a horizontal line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 8011ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ffe:	7c1b      	ldrb	r3, [r3, #16]
 8012000:	f003 0303 	and.w	r3, r3, #3
 8012004:	b2db      	uxtb	r3, r3
 8012006:	2b00      	cmp	r3, #0
 8012008:	d006      	beq.n	8012018 <lv_draw_mask_line+0x70>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 801200a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801200c:	7c1b      	ldrb	r3, [r3, #16]
 801200e:	f003 0303 	and.w	r3, r3, #3
 8012012:	b2db      	uxtb	r3, r3
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 8012014:	2b01      	cmp	r3, #1
 8012016:	d101      	bne.n	801201c <lv_draw_mask_line+0x74>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 8012018:	2301      	movs	r3, #1
 801201a:	e0b4      	b.n	8012186 <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 801201c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801201e:	7c1b      	ldrb	r3, [r3, #16]
 8012020:	f003 0303 	and.w	r3, r3, #3
 8012024:	b2db      	uxtb	r3, r3
 8012026:	2b02      	cmp	r3, #2
 8012028:	d106      	bne.n	8012038 <lv_draw_mask_line+0x90>
 801202a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801202e:	3301      	adds	r3, #1
 8012030:	2b00      	cmp	r3, #0
 8012032:	da01      	bge.n	8012038 <lv_draw_mask_line+0x90>
 8012034:	2301      	movs	r3, #1
 8012036:	e0a6      	b.n	8012186 <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8012038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801203a:	7c1b      	ldrb	r3, [r3, #16]
 801203c:	f003 0303 	and.w	r3, r3, #3
 8012040:	b2db      	uxtb	r3, r3
 8012042:	2b03      	cmp	r3, #3
 8012044:	d105      	bne.n	8012052 <lv_draw_mask_line+0xaa>
 8012046:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801204a:	2b00      	cmp	r3, #0
 801204c:	dd01      	ble.n	8012052 <lv_draw_mask_line+0xaa>
 801204e:	2301      	movs	r3, #1
 8012050:	e099      	b.n	8012186 <lv_draw_mask_line+0x1de>
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 8012052:	2300      	movs	r3, #0
 8012054:	e097      	b.n	8012186 <lv_draw_mask_line+0x1de>
            }
        }
        /*Vertical*/
        else {
            /*Non sense: Can't be on the top/bottom of a vertical line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 8012056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012058:	7c1b      	ldrb	r3, [r3, #16]
 801205a:	f003 0303 	and.w	r3, r3, #3
 801205e:	b2db      	uxtb	r3, r3
 8012060:	2b02      	cmp	r3, #2
 8012062:	d006      	beq.n	8012072 <lv_draw_mask_line+0xca>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
 8012064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012066:	7c1b      	ldrb	r3, [r3, #16]
 8012068:	f003 0303 	and.w	r3, r3, #3
 801206c:	b2db      	uxtb	r3, r3
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 801206e:	2b03      	cmp	r3, #3
 8012070:	d101      	bne.n	8012076 <lv_draw_mask_line+0xce>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
 8012072:	2301      	movs	r3, #1
 8012074:	e087      	b.n	8012186 <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8012076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012078:	7c1b      	ldrb	r3, [r3, #16]
 801207a:	f003 0303 	and.w	r3, r3, #3
 801207e:	b2db      	uxtb	r3, r3
 8012080:	2b01      	cmp	r3, #1
 8012082:	d105      	bne.n	8012090 <lv_draw_mask_line+0xe8>
 8012084:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012088:	2b00      	cmp	r3, #0
 801208a:	dd01      	ble.n	8012090 <lv_draw_mask_line+0xe8>
 801208c:	2301      	movs	r3, #1
 801208e:	e07a      	b.n	8012186 <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
 8012090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012092:	7c1b      	ldrb	r3, [r3, #16]
 8012094:	f003 0303 	and.w	r3, r3, #3
 8012098:	b2db      	uxtb	r3, r3
 801209a:	2b00      	cmp	r3, #0
 801209c:	d125      	bne.n	80120ea <lv_draw_mask_line+0x142>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 801209e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80120a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80120a6:	4413      	add	r3, r2
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	da01      	bge.n	80120b0 <lv_draw_mask_line+0x108>
 80120ac:	2301      	movs	r3, #1
 80120ae:	e06a      	b.n	8012186 <lv_draw_mask_line+0x1de>
                else {
                    int32_t k = - abs_x;
 80120b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80120b4:	425b      	negs	r3, r3
 80120b6:	617b      	str	r3, [r7, #20]
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
 80120b8:	697b      	ldr	r3, [r7, #20]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	da01      	bge.n	80120c2 <lv_draw_mask_line+0x11a>
 80120be:	2300      	movs	r3, #0
 80120c0:	e061      	b.n	8012186 <lv_draw_mask_line+0x1de>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
 80120c2:	697b      	ldr	r3, [r7, #20]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	db0e      	blt.n	80120e6 <lv_draw_mask_line+0x13e>
 80120c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80120cc:	697a      	ldr	r2, [r7, #20]
 80120ce:	429a      	cmp	r2, r3
 80120d0:	da09      	bge.n	80120e6 <lv_draw_mask_line+0x13e>
 80120d2:	697b      	ldr	r3, [r7, #20]
 80120d4:	68fa      	ldr	r2, [r7, #12]
 80120d6:	18d0      	adds	r0, r2, r3
 80120d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80120dc:	697b      	ldr	r3, [r7, #20]
 80120de:	1ad3      	subs	r3, r2, r3
 80120e0:	4619      	mov	r1, r3
 80120e2:	f00b f822 	bl	801d12a <_lv_memset_00>
                    return LV_DRAW_MASK_RES_CHANGED;
 80120e6:	2302      	movs	r3, #2
 80120e8:	e04d      	b.n	8012186 <lv_draw_mask_line+0x1de>
                }
            }
            else {
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 80120ea:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80120ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80120f2:	4413      	add	r3, r2
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	da01      	bge.n	80120fc <lv_draw_mask_line+0x154>
 80120f8:	2300      	movs	r3, #0
 80120fa:	e044      	b.n	8012186 <lv_draw_mask_line+0x1de>
                else {
                    int32_t k = - abs_x;
 80120fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012100:	425b      	negs	r3, r3
 8012102:	61fb      	str	r3, [r7, #28]
                    if(k < 0) k = 0;
 8012104:	69fb      	ldr	r3, [r7, #28]
 8012106:	2b00      	cmp	r3, #0
 8012108:	da01      	bge.n	801210e <lv_draw_mask_line+0x166>
 801210a:	2300      	movs	r3, #0
 801210c:	61fb      	str	r3, [r7, #28]
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 801210e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012112:	69fa      	ldr	r2, [r7, #28]
 8012114:	429a      	cmp	r2, r3
 8012116:	db01      	blt.n	801211c <lv_draw_mask_line+0x174>
 8012118:	2300      	movs	r3, #0
 801211a:	e034      	b.n	8012186 <lv_draw_mask_line+0x1de>
                    else if(k >= 0 && k < len) _lv_memset_00(&mask_buf[0], k);
 801211c:	69fb      	ldr	r3, [r7, #28]
 801211e:	2b00      	cmp	r3, #0
 8012120:	db09      	blt.n	8012136 <lv_draw_mask_line+0x18e>
 8012122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012126:	69fa      	ldr	r2, [r7, #28]
 8012128:	429a      	cmp	r2, r3
 801212a:	da04      	bge.n	8012136 <lv_draw_mask_line+0x18e>
 801212c:	69fb      	ldr	r3, [r7, #28]
 801212e:	4619      	mov	r1, r3
 8012130:	68f8      	ldr	r0, [r7, #12]
 8012132:	f00a fffa 	bl	801d12a <_lv_memset_00>
                    return LV_DRAW_MASK_RES_CHANGED;
 8012136:	2302      	movs	r3, #2
 8012138:	e025      	b.n	8012186 <lv_draw_mask_line+0x1de>
            }
        }
    }

    lv_draw_mask_res_t res;
    if(p->flat) {
 801213a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801213c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012140:	f003 0301 	and.w	r3, r3, #1
 8012144:	b2db      	uxtb	r3, r3
 8012146:	2b00      	cmp	r3, #0
 8012148:	d00e      	beq.n	8012168 <lv_draw_mask_line+0x1c0>
        res = line_mask_flat(mask_buf, abs_x, abs_y, len, p);
 801214a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801214e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012152:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8012156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012158:	9300      	str	r3, [sp, #0]
 801215a:	4603      	mov	r3, r0
 801215c:	68f8      	ldr	r0, [r7, #12]
 801215e:	f000 f816 	bl	801218e <line_mask_flat>
 8012162:	4603      	mov	r3, r0
 8012164:	76fb      	strb	r3, [r7, #27]
 8012166:	e00d      	b.n	8012184 <lv_draw_mask_line+0x1dc>
    }
    else {
        res = line_mask_steep(mask_buf, abs_x, abs_y, len, p);
 8012168:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801216c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012170:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8012174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012176:	9300      	str	r3, [sp, #0]
 8012178:	4603      	mov	r3, r0
 801217a:	68f8      	ldr	r0, [r7, #12]
 801217c:	f000 f991 	bl	80124a2 <line_mask_steep>
 8012180:	4603      	mov	r3, r0
 8012182:	76fb      	strb	r3, [r7, #27]
    }

    return res;
 8012184:	7efb      	ldrb	r3, [r7, #27]
}
 8012186:	4618      	mov	r0, r3
 8012188:	3720      	adds	r7, #32
 801218a:	46bd      	mov	sp, r7
 801218c:	bd80      	pop	{r7, pc}

0801218e <line_mask_flat>:

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_flat(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                               lv_coord_t len,
                                                               lv_draw_mask_line_param_t * p)
{
 801218e:	b590      	push	{r4, r7, lr}
 8012190:	b08d      	sub	sp, #52	; 0x34
 8012192:	af00      	add	r7, sp, #0
 8012194:	60f8      	str	r0, [r7, #12]
 8012196:	4608      	mov	r0, r1
 8012198:	4611      	mov	r1, r2
 801219a:	461a      	mov	r2, r3
 801219c:	4603      	mov	r3, r0
 801219e:	817b      	strh	r3, [r7, #10]
 80121a0:	460b      	mov	r3, r1
 80121a2:	813b      	strh	r3, [r7, #8]
 80121a4:	4613      	mov	r3, r2
 80121a6:	80fb      	strh	r3, [r7, #6]
    int32_t y_at_x;
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 80121a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80121aa:	69db      	ldr	r3, [r3, #28]
 80121ac:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80121b0:	fb02 f303 	mul.w	r3, r2, r3
 80121b4:	129b      	asrs	r3, r3, #10
 80121b6:	61fb      	str	r3, [r7, #28]

    if(p->yx_steep > 0) {
 80121b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80121ba:	69db      	ldr	r3, [r3, #28]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	dd10      	ble.n	80121e2 <line_mask_flat+0x54>
        if(y_at_x > abs_y) {
 80121c0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80121c4:	69fa      	ldr	r2, [r7, #28]
 80121c6:	429a      	cmp	r2, r3
 80121c8:	dd1c      	ble.n	8012204 <line_mask_flat+0x76>
            if(p->inv) {
 80121ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80121cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80121d0:	f003 0302 	and.w	r3, r3, #2
 80121d4:	b2db      	uxtb	r3, r3
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d001      	beq.n	80121de <line_mask_flat+0x50>
                return LV_DRAW_MASK_RES_FULL_COVER;
 80121da:	2301      	movs	r3, #1
 80121dc:	e15d      	b.n	801249a <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 80121de:	2300      	movs	r3, #0
 80121e0:	e15b      	b.n	801249a <line_mask_flat+0x30c>
            }
        }
    }
    else {
        if(y_at_x < abs_y) {
 80121e2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80121e6:	69fa      	ldr	r2, [r7, #28]
 80121e8:	429a      	cmp	r2, r3
 80121ea:	da0b      	bge.n	8012204 <line_mask_flat+0x76>
            if(p->inv) {
 80121ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80121ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80121f2:	f003 0302 	and.w	r3, r3, #2
 80121f6:	b2db      	uxtb	r3, r3
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d001      	beq.n	8012200 <line_mask_flat+0x72>
                return LV_DRAW_MASK_RES_FULL_COVER;
 80121fc:	2301      	movs	r3, #1
 80121fe:	e14c      	b.n	801249a <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 8012200:	2300      	movs	r3, #0
 8012202:	e14a      	b.n	801249a <line_mask_flat+0x30c>
        }
    }

    /* At the end of the mask if the limit line is smaller then the mask's y.
     * Then the mask is in the "good" area*/
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 8012204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012206:	69db      	ldr	r3, [r3, #28]
 8012208:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801220c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012210:	440a      	add	r2, r1
 8012212:	fb02 f303 	mul.w	r3, r2, r3
 8012216:	129b      	asrs	r3, r3, #10
 8012218:	61fb      	str	r3, [r7, #28]
    if(p->yx_steep > 0) {
 801221a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801221c:	69db      	ldr	r3, [r3, #28]
 801221e:	2b00      	cmp	r3, #0
 8012220:	dd10      	ble.n	8012244 <line_mask_flat+0xb6>
        if(y_at_x < abs_y) {
 8012222:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012226:	69fa      	ldr	r2, [r7, #28]
 8012228:	429a      	cmp	r2, r3
 801222a:	da1c      	bge.n	8012266 <line_mask_flat+0xd8>
            if(p->inv) {
 801222c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801222e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012232:	f003 0302 	and.w	r3, r3, #2
 8012236:	b2db      	uxtb	r3, r3
 8012238:	2b00      	cmp	r3, #0
 801223a:	d001      	beq.n	8012240 <line_mask_flat+0xb2>
                return LV_DRAW_MASK_RES_TRANSP;
 801223c:	2300      	movs	r3, #0
 801223e:	e12c      	b.n	801249a <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_FULL_COVER;
 8012240:	2301      	movs	r3, #1
 8012242:	e12a      	b.n	801249a <line_mask_flat+0x30c>
            }
        }
    }
    else {
        if(y_at_x > abs_y) {
 8012244:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012248:	69fa      	ldr	r2, [r7, #28]
 801224a:	429a      	cmp	r2, r3
 801224c:	dd0b      	ble.n	8012266 <line_mask_flat+0xd8>
            if(p->inv) {
 801224e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012254:	f003 0302 	and.w	r3, r3, #2
 8012258:	b2db      	uxtb	r3, r3
 801225a:	2b00      	cmp	r3, #0
 801225c:	d001      	beq.n	8012262 <line_mask_flat+0xd4>
                return LV_DRAW_MASK_RES_TRANSP;
 801225e:	2300      	movs	r3, #0
 8012260:	e11b      	b.n	801249a <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_FULL_COVER;
 8012262:	2301      	movs	r3, #1
 8012264:	e119      	b.n	801249a <line_mask_flat+0x30c>
            }
        }
    }

    int32_t xe;
    if(p->yx_steep > 0) xe = ((abs_y << 8) * p->xy_steep) >> 10;
 8012266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012268:	69db      	ldr	r3, [r3, #28]
 801226a:	2b00      	cmp	r3, #0
 801226c:	dd09      	ble.n	8012282 <line_mask_flat+0xf4>
 801226e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012272:	021b      	lsls	r3, r3, #8
 8012274:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012276:	6992      	ldr	r2, [r2, #24]
 8012278:	fb02 f303 	mul.w	r3, r2, r3
 801227c:	129b      	asrs	r3, r3, #10
 801227e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012280:	e009      	b.n	8012296 <line_mask_flat+0x108>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 8012282:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012286:	3301      	adds	r3, #1
 8012288:	021b      	lsls	r3, r3, #8
 801228a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801228c:	6992      	ldr	r2, [r2, #24]
 801228e:	fb02 f303 	mul.w	r3, r2, r3
 8012292:	129b      	asrs	r3, r3, #10
 8012294:	62fb      	str	r3, [r7, #44]	; 0x2c

    int32_t xei = xe >> 8;
 8012296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012298:	121b      	asrs	r3, r3, #8
 801229a:	61bb      	str	r3, [r7, #24]
    int32_t xef = xe & 0xFF;
 801229c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801229e:	b2db      	uxtb	r3, r3
 80122a0:	617b      	str	r3, [r7, #20]

    int32_t px_h;
    if(xef == 0) px_h = 255;
 80122a2:	697b      	ldr	r3, [r7, #20]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d102      	bne.n	80122ae <line_mask_flat+0x120>
 80122a8:	23ff      	movs	r3, #255	; 0xff
 80122aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80122ac:	e00a      	b.n	80122c4 <line_mask_flat+0x136>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 80122ae:	697b      	ldr	r3, [r7, #20]
 80122b0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80122b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80122b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80122b8:	fb02 f303 	mul.w	r3, r2, r3
 80122bc:	121b      	asrs	r3, r3, #8
 80122be:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80122c2:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t k = xei - abs_x;
 80122c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80122c8:	69ba      	ldr	r2, [r7, #24]
 80122ca:	1ad3      	subs	r3, r2, r3
 80122cc:	627b      	str	r3, [r7, #36]	; 0x24
    lv_opa_t m;

    if(xef) {
 80122ce:	697b      	ldr	r3, [r7, #20]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d06c      	beq.n	80123ae <line_mask_flat+0x220>
        if(k >= 0 && k < len) {
 80122d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	db2c      	blt.n	8012334 <line_mask_flat+0x1a6>
 80122da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80122de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122e0:	429a      	cmp	r2, r3
 80122e2:	da27      	bge.n	8012334 <line_mask_flat+0x1a6>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 80122e4:	697b      	ldr	r3, [r7, #20]
 80122e6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80122ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80122ec:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80122f0:	fb02 f303 	mul.w	r3, r2, r3
 80122f4:	125b      	asrs	r3, r3, #9
 80122f6:	b2db      	uxtb	r3, r3
 80122f8:	43db      	mvns	r3, r3
 80122fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if(p->inv) m = 255 - m;
 80122fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012300:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012304:	f003 0302 	and.w	r3, r3, #2
 8012308:	b2db      	uxtb	r3, r3
 801230a:	2b00      	cmp	r3, #0
 801230c:	d004      	beq.n	8012318 <line_mask_flat+0x18a>
 801230e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012312:	43db      	mvns	r3, r3
 8012314:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            mask_buf[k] = mask_mix(mask_buf[k], m);
 8012318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801231a:	68fa      	ldr	r2, [r7, #12]
 801231c:	4413      	add	r3, r2
 801231e:	7818      	ldrb	r0, [r3, #0]
 8012320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012322:	68fa      	ldr	r2, [r7, #12]
 8012324:	18d4      	adds	r4, r2, r3
 8012326:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801232a:	4619      	mov	r1, r3
 801232c:	f000 ff09 	bl	8013142 <mask_mix>
 8012330:	4603      	mov	r3, r0
 8012332:	7023      	strb	r3, [r4, #0]
        }
        k++;
 8012334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012336:	3301      	adds	r3, #1
 8012338:	627b      	str	r3, [r7, #36]	; 0x24
    }

    while(px_h > p->spx) {
 801233a:	e038      	b.n	80123ae <line_mask_flat+0x220>
        if(k >= 0 && k < len) {
 801233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801233e:	2b00      	cmp	r3, #0
 8012340:	db28      	blt.n	8012394 <line_mask_flat+0x206>
 8012342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012348:	429a      	cmp	r2, r3
 801234a:	da23      	bge.n	8012394 <line_mask_flat+0x206>
            m = px_h - (p->spx >> 1);
 801234c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801234e:	b2da      	uxtb	r2, r3
 8012350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012354:	105b      	asrs	r3, r3, #1
 8012356:	b2db      	uxtb	r3, r3
 8012358:	1ad3      	subs	r3, r2, r3
 801235a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if(p->inv) m = 255 - m;
 801235e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012360:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012364:	f003 0302 	and.w	r3, r3, #2
 8012368:	b2db      	uxtb	r3, r3
 801236a:	2b00      	cmp	r3, #0
 801236c:	d004      	beq.n	8012378 <line_mask_flat+0x1ea>
 801236e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012372:	43db      	mvns	r3, r3
 8012374:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            mask_buf[k] = mask_mix(mask_buf[k], m);
 8012378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801237a:	68fa      	ldr	r2, [r7, #12]
 801237c:	4413      	add	r3, r2
 801237e:	7818      	ldrb	r0, [r3, #0]
 8012380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012382:	68fa      	ldr	r2, [r7, #12]
 8012384:	18d4      	adds	r4, r2, r3
 8012386:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801238a:	4619      	mov	r1, r3
 801238c:	f000 fed9 	bl	8013142 <mask_mix>
 8012390:	4603      	mov	r3, r0
 8012392:	7023      	strb	r3, [r4, #0]
        }
        px_h -= p->spx;
 8012394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801239a:	1ad3      	subs	r3, r2, r3
 801239c:	62bb      	str	r3, [r7, #40]	; 0x28
        k++;
 801239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123a0:	3301      	adds	r3, #1
 80123a2:	627b      	str	r3, [r7, #36]	; 0x24
        if(k >= len) break;
 80123a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123aa:	429a      	cmp	r2, r3
 80123ac:	da05      	bge.n	80123ba <line_mask_flat+0x22c>
    while(px_h > p->spx) {
 80123ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123b4:	429a      	cmp	r2, r3
 80123b6:	dcc1      	bgt.n	801233c <line_mask_flat+0x1ae>
 80123b8:	e000      	b.n	80123bc <line_mask_flat+0x22e>
        if(k >= len) break;
 80123ba:	bf00      	nop
    }

    if(k < len && k >= 0) {
 80123bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123c2:	429a      	cmp	r2, r3
 80123c4:	da34      	bge.n	8012430 <line_mask_flat+0x2a2>
 80123c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	db31      	blt.n	8012430 <line_mask_flat+0x2a2>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 80123cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123ce:	699b      	ldr	r3, [r3, #24]
 80123d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123d2:	fb02 f303 	mul.w	r3, r2, r3
 80123d6:	129b      	asrs	r3, r3, #10
 80123d8:	613b      	str	r3, [r7, #16]
        m = (x_inters * px_h) >> 9;
 80123da:	693b      	ldr	r3, [r7, #16]
 80123dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123de:	fb02 f303 	mul.w	r3, r2, r3
 80123e2:	125b      	asrs	r3, r3, #9
 80123e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(p->yx_steep < 0) m = 255 - m;
 80123e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123ea:	69db      	ldr	r3, [r3, #28]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	da04      	bge.n	80123fa <line_mask_flat+0x26c>
 80123f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80123f4:	43db      	mvns	r3, r3
 80123f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(p->inv) m = 255 - m;
 80123fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012400:	f003 0302 	and.w	r3, r3, #2
 8012404:	b2db      	uxtb	r3, r3
 8012406:	2b00      	cmp	r3, #0
 8012408:	d004      	beq.n	8012414 <line_mask_flat+0x286>
 801240a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801240e:	43db      	mvns	r3, r3
 8012410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        mask_buf[k] = mask_mix(mask_buf[k], m);
 8012414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012416:	68fa      	ldr	r2, [r7, #12]
 8012418:	4413      	add	r3, r2
 801241a:	7818      	ldrb	r0, [r3, #0]
 801241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801241e:	68fa      	ldr	r2, [r7, #12]
 8012420:	18d4      	adds	r4, r2, r3
 8012422:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012426:	4619      	mov	r1, r3
 8012428:	f000 fe8b 	bl	8013142 <mask_mix>
 801242c:	4603      	mov	r3, r0
 801242e:	7023      	strb	r3, [r4, #0]
    }

    if(p->inv) {
 8012430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012432:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012436:	f003 0302 	and.w	r3, r3, #2
 801243a:	b2db      	uxtb	r3, r3
 801243c:	2b00      	cmp	r3, #0
 801243e:	d014      	beq.n	801246a <line_mask_flat+0x2dc>
        k = xei - abs_x;
 8012440:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012444:	69ba      	ldr	r2, [r7, #24]
 8012446:	1ad3      	subs	r3, r2, r3
 8012448:	627b      	str	r3, [r7, #36]	; 0x24
        if(k > len) {
 801244a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801244e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012450:	429a      	cmp	r2, r3
 8012452:	dd01      	ble.n	8012458 <line_mask_flat+0x2ca>
            return LV_DRAW_MASK_RES_TRANSP;
 8012454:	2300      	movs	r3, #0
 8012456:	e020      	b.n	801249a <line_mask_flat+0x30c>
        }
        if(k >= 0) {
 8012458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801245a:	2b00      	cmp	r3, #0
 801245c:	db1c      	blt.n	8012498 <line_mask_flat+0x30a>
            _lv_memset_00(&mask_buf[0], k);
 801245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012460:	4619      	mov	r1, r3
 8012462:	68f8      	ldr	r0, [r7, #12]
 8012464:	f00a fe61 	bl	801d12a <_lv_memset_00>
 8012468:	e016      	b.n	8012498 <line_mask_flat+0x30a>
        }
    }
    else {
        k++;
 801246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801246c:	3301      	adds	r3, #1
 801246e:	627b      	str	r3, [r7, #36]	; 0x24
        if(k < 0) {
 8012470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012472:	2b00      	cmp	r3, #0
 8012474:	da01      	bge.n	801247a <line_mask_flat+0x2ec>
            return LV_DRAW_MASK_RES_TRANSP;
 8012476:	2300      	movs	r3, #0
 8012478:	e00f      	b.n	801249a <line_mask_flat+0x30c>
        }
        if(k <= len) {
 801247a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801247e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012480:	429a      	cmp	r2, r3
 8012482:	dc09      	bgt.n	8012498 <line_mask_flat+0x30a>
            _lv_memset_00(&mask_buf[k], len - k);
 8012484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012486:	68fa      	ldr	r2, [r7, #12]
 8012488:	18d0      	adds	r0, r2, r3
 801248a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012490:	1ad3      	subs	r3, r2, r3
 8012492:	4619      	mov	r1, r3
 8012494:	f00a fe49 	bl	801d12a <_lv_memset_00>
        }
    }

    return LV_DRAW_MASK_RES_CHANGED;
 8012498:	2302      	movs	r3, #2
}
 801249a:	4618      	mov	r0, r3
 801249c:	3734      	adds	r7, #52	; 0x34
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd90      	pop	{r4, r7, pc}

080124a2 <line_mask_steep>:

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_steep(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                                lv_coord_t len,
                                                                lv_draw_mask_line_param_t * p)
{
 80124a2:	b590      	push	{r4, r7, lr}
 80124a4:	b091      	sub	sp, #68	; 0x44
 80124a6:	af00      	add	r7, sp, #0
 80124a8:	60f8      	str	r0, [r7, #12]
 80124aa:	4608      	mov	r0, r1
 80124ac:	4611      	mov	r1, r2
 80124ae:	461a      	mov	r2, r3
 80124b0:	4603      	mov	r3, r0
 80124b2:	817b      	strh	r3, [r7, #10]
 80124b4:	460b      	mov	r3, r1
 80124b6:	813b      	strh	r3, [r7, #8]
 80124b8:	4613      	mov	r3, r2
 80124ba:	80fb      	strh	r3, [r7, #6]
    int32_t k;
    int32_t x_at_y;
    /* At the beginning of the mask if the limit line is greater then the mask's y.
     * Then the mask is in the "wrong" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 80124bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124be:	699b      	ldr	r3, [r3, #24]
 80124c0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80124c4:	fb02 f303 	mul.w	r3, r2, r3
 80124c8:	129b      	asrs	r3, r3, #10
 80124ca:	63bb      	str	r3, [r7, #56]	; 0x38
    if(p->xy_steep > 0) x_at_y++;
 80124cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124ce:	699b      	ldr	r3, [r3, #24]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	dd02      	ble.n	80124da <line_mask_steep+0x38>
 80124d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124d6:	3301      	adds	r3, #1
 80124d8:	63bb      	str	r3, [r7, #56]	; 0x38
    if(x_at_y < abs_x) {
 80124da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80124de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80124e0:	429a      	cmp	r2, r3
 80124e2:	da0b      	bge.n	80124fc <line_mask_steep+0x5a>
        if(p->inv) {
 80124e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124ea:	f003 0302 	and.w	r3, r3, #2
 80124ee:	b2db      	uxtb	r3, r3
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d001      	beq.n	80124f8 <line_mask_steep+0x56>
            return LV_DRAW_MASK_RES_FULL_COVER;
 80124f4:	2301      	movs	r3, #1
 80124f6:	e213      	b.n	8012920 <line_mask_steep+0x47e>
        }
        else {
            return LV_DRAW_MASK_RES_TRANSP;
 80124f8:	2300      	movs	r3, #0
 80124fa:	e211      	b.n	8012920 <line_mask_steep+0x47e>
        }
    }

    /* At the end of the mask if the limit line is smaller then the mask's y.
     * Then the mask is in the "good" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * (abs_y)) >> 10;
 80124fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124fe:	699b      	ldr	r3, [r3, #24]
 8012500:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012504:	fb02 f303 	mul.w	r3, r2, r3
 8012508:	129b      	asrs	r3, r3, #10
 801250a:	63bb      	str	r3, [r7, #56]	; 0x38
    if(x_at_y > abs_x + len) {
 801250c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012510:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012514:	4413      	add	r3, r2
 8012516:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012518:	429a      	cmp	r2, r3
 801251a:	dd0b      	ble.n	8012534 <line_mask_steep+0x92>
        if(p->inv) {
 801251c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801251e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012522:	f003 0302 	and.w	r3, r3, #2
 8012526:	b2db      	uxtb	r3, r3
 8012528:	2b00      	cmp	r3, #0
 801252a:	d001      	beq.n	8012530 <line_mask_steep+0x8e>
            return LV_DRAW_MASK_RES_TRANSP;
 801252c:	2300      	movs	r3, #0
 801252e:	e1f7      	b.n	8012920 <line_mask_steep+0x47e>
        }
        else {
            return LV_DRAW_MASK_RES_FULL_COVER;
 8012530:	2301      	movs	r3, #1
 8012532:	e1f5      	b.n	8012920 <line_mask_steep+0x47e>
        }
    }

    /*X start*/
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
 8012534:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012538:	021b      	lsls	r3, r3, #8
 801253a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801253c:	6992      	ldr	r2, [r2, #24]
 801253e:	fb02 f303 	mul.w	r3, r2, r3
 8012542:	129b      	asrs	r3, r3, #10
 8012544:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t xsi = xs >> 8;
 8012546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012548:	121b      	asrs	r3, r3, #8
 801254a:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t xsf = xs & 0xFF;
 801254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801254e:	b2db      	uxtb	r3, r3
 8012550:	633b      	str	r3, [r7, #48]	; 0x30

    /*X end*/
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
 8012552:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012556:	3301      	adds	r3, #1
 8012558:	021b      	lsls	r3, r3, #8
 801255a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801255c:	6992      	ldr	r2, [r2, #24]
 801255e:	fb02 f303 	mul.w	r3, r2, r3
 8012562:	129b      	asrs	r3, r3, #10
 8012564:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t xei = xe >> 8;
 8012566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012568:	121b      	asrs	r3, r3, #8
 801256a:	623b      	str	r3, [r7, #32]
    int32_t xef = xe & 0xFF;
 801256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801256e:	b2db      	uxtb	r3, r3
 8012570:	61fb      	str	r3, [r7, #28]

    lv_opa_t m;

    k = xsi - abs_x;
 8012572:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012578:	1ad3      	subs	r3, r2, r3
 801257a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 801257c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801257e:	6a3b      	ldr	r3, [r7, #32]
 8012580:	429a      	cmp	r2, r3
 8012582:	d00d      	beq.n	80125a0 <line_mask_steep+0xfe>
 8012584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012586:	699b      	ldr	r3, [r3, #24]
 8012588:	2b00      	cmp	r3, #0
 801258a:	da09      	bge.n	80125a0 <line_mask_steep+0xfe>
 801258c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801258e:	2b00      	cmp	r3, #0
 8012590:	d106      	bne.n	80125a0 <line_mask_steep+0xfe>
        xsf = 0xFF;
 8012592:	23ff      	movs	r3, #255	; 0xff
 8012594:	633b      	str	r3, [r7, #48]	; 0x30
        xsi = xei;
 8012596:	6a3b      	ldr	r3, [r7, #32]
 8012598:	637b      	str	r3, [r7, #52]	; 0x34
        k--;
 801259a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801259c:	3b01      	subs	r3, #1
 801259e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if(xsi == xei) {
 80125a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80125a2:	6a3b      	ldr	r3, [r7, #32]
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d165      	bne.n	8012674 <line_mask_steep+0x1d2>
        if(k >= 0 && k < len) {
 80125a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	db25      	blt.n	80125fa <line_mask_steep+0x158>
 80125ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80125b4:	429a      	cmp	r2, r3
 80125b6:	da20      	bge.n	80125fa <line_mask_steep+0x158>
            m = (xsf + xef) >> 1;
 80125b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125ba:	69fb      	ldr	r3, [r7, #28]
 80125bc:	4413      	add	r3, r2
 80125be:	105b      	asrs	r3, r3, #1
 80125c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            if(p->inv) m = 255 - m;
 80125c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80125ca:	f003 0302 	and.w	r3, r3, #2
 80125ce:	b2db      	uxtb	r3, r3
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d004      	beq.n	80125de <line_mask_steep+0x13c>
 80125d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80125d8:	43db      	mvns	r3, r3
 80125da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            mask_buf[k] = mask_mix(mask_buf[k], m);
 80125de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125e0:	68fa      	ldr	r2, [r7, #12]
 80125e2:	4413      	add	r3, r2
 80125e4:	7818      	ldrb	r0, [r3, #0]
 80125e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125e8:	68fa      	ldr	r2, [r7, #12]
 80125ea:	18d4      	adds	r4, r2, r3
 80125ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80125f0:	4619      	mov	r1, r3
 80125f2:	f000 fda6 	bl	8013142 <mask_mix>
 80125f6:	4603      	mov	r3, r0
 80125f8:	7023      	strb	r3, [r4, #0]
        }
        k++;
 80125fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125fc:	3301      	adds	r3, #1
 80125fe:	63fb      	str	r3, [r7, #60]	; 0x3c

        if(p->inv) {
 8012600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012602:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012606:	f003 0302 	and.w	r3, r3, #2
 801260a:	b2db      	uxtb	r3, r3
 801260c:	2b00      	cmp	r3, #0
 801260e:	d015      	beq.n	801263c <line_mask_steep+0x19a>
            k = xsi - abs_x;
 8012610:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012616:	1ad3      	subs	r3, r2, r3
 8012618:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(k >= len) {
 801261a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801261e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012620:	429a      	cmp	r2, r3
 8012622:	db01      	blt.n	8012628 <line_mask_steep+0x186>
                return LV_DRAW_MASK_RES_TRANSP;
 8012624:	2300      	movs	r3, #0
 8012626:	e17b      	b.n	8012920 <line_mask_steep+0x47e>
            }
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
 8012628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801262a:	2b00      	cmp	r3, #0
 801262c:	f2c0 8177 	blt.w	801291e <line_mask_steep+0x47c>
 8012630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012632:	4619      	mov	r1, r3
 8012634:	68f8      	ldr	r0, [r7, #12]
 8012636:	f00a fd78 	bl	801d12a <_lv_memset_00>
 801263a:	e170      	b.n	801291e <line_mask_steep+0x47c>

        }
        else {
            if(k > len) k = len;
 801263c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012640:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012642:	429a      	cmp	r2, r3
 8012644:	dd02      	ble.n	801264c <line_mask_steep+0x1aa>
 8012646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801264a:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 801264c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801264e:	2b00      	cmp	r3, #0
 8012650:	d101      	bne.n	8012656 <line_mask_steep+0x1b4>
 8012652:	2300      	movs	r3, #0
 8012654:	e164      	b.n	8012920 <line_mask_steep+0x47e>
            else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
 8012656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012658:	2b00      	cmp	r3, #0
 801265a:	f340 8160 	ble.w	801291e <line_mask_steep+0x47c>
 801265e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012660:	68fa      	ldr	r2, [r7, #12]
 8012662:	18d0      	adds	r0, r2, r3
 8012664:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801266a:	1ad3      	subs	r3, r2, r3
 801266c:	4619      	mov	r1, r3
 801266e:	f00a fd5c 	bl	801d12a <_lv_memset_00>
 8012672:	e154      	b.n	801291e <line_mask_steep+0x47c>
        }

    }
    else {
        int32_t y_inters;
        if(p->xy_steep < 0) {
 8012674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012676:	699b      	ldr	r3, [r3, #24]
 8012678:	2b00      	cmp	r3, #0
 801267a:	f280 80a7 	bge.w	80127cc <line_mask_steep+0x32a>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 801267e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012680:	69db      	ldr	r3, [r3, #28]
 8012682:	425b      	negs	r3, r3
 8012684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012686:	fb02 f303 	mul.w	r3, r2, r3
 801268a:	129b      	asrs	r3, r3, #10
 801268c:	61bb      	str	r3, [r7, #24]
            if(k >= 0 && k < len) {
 801268e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012690:	2b00      	cmp	r3, #0
 8012692:	db26      	blt.n	80126e2 <line_mask_steep+0x240>
 8012694:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012698:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801269a:	429a      	cmp	r2, r3
 801269c:	da21      	bge.n	80126e2 <line_mask_steep+0x240>
                m = (y_inters * xsf) >> 9;
 801269e:	69bb      	ldr	r3, [r7, #24]
 80126a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80126a2:	fb02 f303 	mul.w	r3, r2, r3
 80126a6:	125b      	asrs	r3, r3, #9
 80126a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 80126ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126b2:	f003 0302 	and.w	r3, r3, #2
 80126b6:	b2db      	uxtb	r3, r3
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d004      	beq.n	80126c6 <line_mask_steep+0x224>
 80126bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126c0:	43db      	mvns	r3, r3
 80126c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 80126c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126c8:	68fa      	ldr	r2, [r7, #12]
 80126ca:	4413      	add	r3, r2
 80126cc:	7818      	ldrb	r0, [r3, #0]
 80126ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126d0:	68fa      	ldr	r2, [r7, #12]
 80126d2:	18d4      	adds	r4, r2, r3
 80126d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126d8:	4619      	mov	r1, r3
 80126da:	f000 fd32 	bl	8013142 <mask_mix>
 80126de:	4603      	mov	r3, r0
 80126e0:	7023      	strb	r3, [r4, #0]
            }
            k--;
 80126e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126e4:	3b01      	subs	r3, #1
 80126e6:	63fb      	str	r3, [r7, #60]	; 0x3c

            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 80126e8:	69bb      	ldr	r3, [r7, #24]
 80126ea:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80126ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80126f0:	6992      	ldr	r2, [r2, #24]
 80126f2:	4252      	negs	r2, r2
 80126f4:	fb02 f303 	mul.w	r3, r2, r3
 80126f8:	129b      	asrs	r3, r3, #10
 80126fa:	613b      	str	r3, [r7, #16]

            if(k >= 0 && k < len) {
 80126fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126fe:	2b00      	cmp	r3, #0
 8012700:	db2a      	blt.n	8012758 <line_mask_steep+0x2b6>
 8012702:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012706:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012708:	429a      	cmp	r2, r3
 801270a:	da25      	bge.n	8012758 <line_mask_steep+0x2b6>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 801270c:	69bb      	ldr	r3, [r7, #24]
 801270e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012712:	693a      	ldr	r2, [r7, #16]
 8012714:	fb02 f303 	mul.w	r3, r2, r3
 8012718:	125b      	asrs	r3, r3, #9
 801271a:	b2db      	uxtb	r3, r3
 801271c:	43db      	mvns	r3, r3
 801271e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 8012722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012728:	f003 0302 	and.w	r3, r3, #2
 801272c:	b2db      	uxtb	r3, r3
 801272e:	2b00      	cmp	r3, #0
 8012730:	d004      	beq.n	801273c <line_mask_steep+0x29a>
 8012732:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012736:	43db      	mvns	r3, r3
 8012738:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 801273c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801273e:	68fa      	ldr	r2, [r7, #12]
 8012740:	4413      	add	r3, r2
 8012742:	7818      	ldrb	r0, [r3, #0]
 8012744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012746:	68fa      	ldr	r2, [r7, #12]
 8012748:	18d4      	adds	r4, r2, r3
 801274a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801274e:	4619      	mov	r1, r3
 8012750:	f000 fcf7 	bl	8013142 <mask_mix>
 8012754:	4603      	mov	r3, r0
 8012756:	7023      	strb	r3, [r4, #0]
            }

            k += 2;
 8012758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801275a:	3302      	adds	r3, #2
 801275c:	63fb      	str	r3, [r7, #60]	; 0x3c

            if(p->inv) {
 801275e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012760:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012764:	f003 0302 	and.w	r3, r3, #2
 8012768:	b2db      	uxtb	r3, r3
 801276a:	2b00      	cmp	r3, #0
 801276c:	d018      	beq.n	80127a0 <line_mask_steep+0x2fe>
                k = xsi - abs_x - 1;
 801276e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012774:	1ad3      	subs	r3, r2, r3
 8012776:	3b01      	subs	r3, #1
 8012778:	63fb      	str	r3, [r7, #60]	; 0x3c

                if(k > len) k = len;
 801277a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801277e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012780:	429a      	cmp	r2, r3
 8012782:	dd03      	ble.n	801278c <line_mask_steep+0x2ea>
 8012784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012788:	63fb      	str	r3, [r7, #60]	; 0x3c
 801278a:	e0c8      	b.n	801291e <line_mask_steep+0x47c>
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
 801278c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801278e:	2b00      	cmp	r3, #0
 8012790:	f340 80c5 	ble.w	801291e <line_mask_steep+0x47c>
 8012794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012796:	4619      	mov	r1, r3
 8012798:	68f8      	ldr	r0, [r7, #12]
 801279a:	f00a fcc6 	bl	801d12a <_lv_memset_00>
 801279e:	e0be      	b.n	801291e <line_mask_steep+0x47c>

            }
            else {
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 80127a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80127a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80127a6:	429a      	cmp	r2, r3
 80127a8:	dd01      	ble.n	80127ae <line_mask_steep+0x30c>
 80127aa:	2301      	movs	r3, #1
 80127ac:	e0b8      	b.n	8012920 <line_mask_steep+0x47e>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
 80127ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	f2c0 80b4 	blt.w	801291e <line_mask_steep+0x47c>
 80127b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127b8:	68fa      	ldr	r2, [r7, #12]
 80127ba:	18d0      	adds	r0, r2, r3
 80127bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80127c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127c2:	1ad3      	subs	r3, r2, r3
 80127c4:	4619      	mov	r1, r3
 80127c6:	f00a fcb0 	bl	801d12a <_lv_memset_00>
 80127ca:	e0a8      	b.n	801291e <line_mask_steep+0x47c>
            }

        }
        else {
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 80127cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ce:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80127d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80127d4:	69d2      	ldr	r2, [r2, #28]
 80127d6:	fb02 f303 	mul.w	r3, r2, r3
 80127da:	129b      	asrs	r3, r3, #10
 80127dc:	61bb      	str	r3, [r7, #24]
            if(k >= 0 && k < len) {
 80127de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	db2a      	blt.n	801283a <line_mask_steep+0x398>
 80127e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80127e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80127ea:	429a      	cmp	r2, r3
 80127ec:	da25      	bge.n	801283a <line_mask_steep+0x398>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 80127ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127f0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80127f4:	69ba      	ldr	r2, [r7, #24]
 80127f6:	fb02 f303 	mul.w	r3, r2, r3
 80127fa:	125b      	asrs	r3, r3, #9
 80127fc:	b2db      	uxtb	r3, r3
 80127fe:	43db      	mvns	r3, r3
 8012800:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 8012804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012806:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801280a:	f003 0302 	and.w	r3, r3, #2
 801280e:	b2db      	uxtb	r3, r3
 8012810:	2b00      	cmp	r3, #0
 8012812:	d004      	beq.n	801281e <line_mask_steep+0x37c>
 8012814:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012818:	43db      	mvns	r3, r3
 801281a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 801281e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012820:	68fa      	ldr	r2, [r7, #12]
 8012822:	4413      	add	r3, r2
 8012824:	7818      	ldrb	r0, [r3, #0]
 8012826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012828:	68fa      	ldr	r2, [r7, #12]
 801282a:	18d4      	adds	r4, r2, r3
 801282c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012830:	4619      	mov	r1, r3
 8012832:	f000 fc86 	bl	8013142 <mask_mix>
 8012836:	4603      	mov	r3, r0
 8012838:	7023      	strb	r3, [r4, #0]
            }

            k++;
 801283a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801283c:	3301      	adds	r3, #1
 801283e:	63fb      	str	r3, [r7, #60]	; 0x3c

            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 8012840:	69bb      	ldr	r3, [r7, #24]
 8012842:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012846:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012848:	6992      	ldr	r2, [r2, #24]
 801284a:	fb02 f303 	mul.w	r3, r2, r3
 801284e:	129b      	asrs	r3, r3, #10
 8012850:	617b      	str	r3, [r7, #20]
            if(k >= 0 && k < len) {
 8012852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012854:	2b00      	cmp	r3, #0
 8012856:	db28      	blt.n	80128aa <line_mask_steep+0x408>
 8012858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801285c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801285e:	429a      	cmp	r2, r3
 8012860:	da23      	bge.n	80128aa <line_mask_steep+0x408>
                m = ((255 - y_inters) * x_inters) >> 9;
 8012862:	69bb      	ldr	r3, [r7, #24]
 8012864:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012868:	697a      	ldr	r2, [r7, #20]
 801286a:	fb02 f303 	mul.w	r3, r2, r3
 801286e:	125b      	asrs	r3, r3, #9
 8012870:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 8012874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801287a:	f003 0302 	and.w	r3, r3, #2
 801287e:	b2db      	uxtb	r3, r3
 8012880:	2b00      	cmp	r3, #0
 8012882:	d004      	beq.n	801288e <line_mask_steep+0x3ec>
 8012884:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012888:	43db      	mvns	r3, r3
 801288a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 801288e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012890:	68fa      	ldr	r2, [r7, #12]
 8012892:	4413      	add	r3, r2
 8012894:	7818      	ldrb	r0, [r3, #0]
 8012896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012898:	68fa      	ldr	r2, [r7, #12]
 801289a:	18d4      	adds	r4, r2, r3
 801289c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128a0:	4619      	mov	r1, r3
 80128a2:	f000 fc4e 	bl	8013142 <mask_mix>
 80128a6:	4603      	mov	r3, r0
 80128a8:	7023      	strb	r3, [r4, #0]
            }
            k++;
 80128aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128ac:	3301      	adds	r3, #1
 80128ae:	63fb      	str	r3, [r7, #60]	; 0x3c

            if(p->inv) {
 80128b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80128b6:	f003 0302 	and.w	r3, r3, #2
 80128ba:	b2db      	uxtb	r3, r3
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d014      	beq.n	80128ea <line_mask_steep+0x448>
                k = xsi - abs_x;
 80128c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80128c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80128c6:	1ad3      	subs	r3, r2, r3
 80128c8:	63fb      	str	r3, [r7, #60]	; 0x3c
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 80128ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80128ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80128d0:	429a      	cmp	r2, r3
 80128d2:	dd01      	ble.n	80128d8 <line_mask_steep+0x436>
 80128d4:	2300      	movs	r3, #0
 80128d6:	e023      	b.n	8012920 <line_mask_steep+0x47e>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
 80128d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128da:	2b00      	cmp	r3, #0
 80128dc:	db1f      	blt.n	801291e <line_mask_steep+0x47c>
 80128de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128e0:	4619      	mov	r1, r3
 80128e2:	68f8      	ldr	r0, [r7, #12]
 80128e4:	f00a fc21 	bl	801d12a <_lv_memset_00>
 80128e8:	e019      	b.n	801291e <line_mask_steep+0x47c>

            }
            else {
                if(k > len) k = len;
 80128ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80128ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80128f0:	429a      	cmp	r2, r3
 80128f2:	dd02      	ble.n	80128fa <line_mask_steep+0x458>
 80128f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80128f8:	63fb      	str	r3, [r7, #60]	; 0x3c
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 80128fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d101      	bne.n	8012904 <line_mask_steep+0x462>
 8012900:	2300      	movs	r3, #0
 8012902:	e00d      	b.n	8012920 <line_mask_steep+0x47e>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
 8012904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012906:	2b00      	cmp	r3, #0
 8012908:	dd09      	ble.n	801291e <line_mask_steep+0x47c>
 801290a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801290c:	68fa      	ldr	r2, [r7, #12]
 801290e:	18d0      	adds	r0, r2, r3
 8012910:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012916:	1ad3      	subs	r3, r2, r3
 8012918:	4619      	mov	r1, r3
 801291a:	f00a fc06 	bl	801d12a <_lv_memset_00>
            }
        }
    }

    return LV_DRAW_MASK_RES_CHANGED;
 801291e:	2302      	movs	r3, #2
}
 8012920:	4618      	mov	r0, r3
 8012922:	3744      	adds	r7, #68	; 0x44
 8012924:	46bd      	mov	sp, r7
 8012926:	bd90      	pop	{r4, r7, pc}

08012928 <lv_draw_mask_radius>:
}

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_radius(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                    lv_coord_t abs_y, lv_coord_t len,
                                                                    lv_draw_mask_radius_param_t * p)
{
 8012928:	b590      	push	{r4, r7, lr}
 801292a:	b0a3      	sub	sp, #140	; 0x8c
 801292c:	af00      	add	r7, sp, #0
 801292e:	60f8      	str	r0, [r7, #12]
 8012930:	4608      	mov	r0, r1
 8012932:	4611      	mov	r1, r2
 8012934:	461a      	mov	r2, r3
 8012936:	4603      	mov	r3, r0
 8012938:	817b      	strh	r3, [r7, #10]
 801293a:	460b      	mov	r3, r1
 801293c:	813b      	strh	r3, [r7, #8]
 801293e:	4613      	mov	r3, r2
 8012940:	80fb      	strh	r3, [r7, #6]
    bool outer = p->cfg.outer;
 8012942:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012946:	7c9b      	ldrb	r3, [r3, #18]
 8012948:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801294c:	b2db      	uxtb	r3, r3
 801294e:	2b00      	cmp	r3, #0
 8012950:	bf14      	ite	ne
 8012952:	2301      	movne	r3, #1
 8012954:	2300      	moveq	r3, #0
 8012956:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    int32_t radius = p->cfg.radius;
 801295a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801295e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012962:	653b      	str	r3, [r7, #80]	; 0x50
    lv_area_t rect;
    lv_area_copy(&rect, &p->cfg.rect);
 8012964:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012968:	f103 0208 	add.w	r2, r3, #8
 801296c:	f107 0320 	add.w	r3, r7, #32
 8012970:	4611      	mov	r1, r2
 8012972:	4618      	mov	r0, r3
 8012974:	f7ff f876 	bl	8011a64 <lv_area_copy>

    if(outer == false) {
 8012978:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 801297c:	f083 0301 	eor.w	r3, r3, #1
 8012980:	b2db      	uxtb	r3, r3
 8012982:	2b00      	cmp	r3, #0
 8012984:	d00d      	beq.n	80129a2 <lv_draw_mask_radius+0x7a>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 8012986:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801298a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801298e:	429a      	cmp	r2, r3
 8012990:	db05      	blt.n	801299e <lv_draw_mask_radius+0x76>
 8012992:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012996:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801299a:	429a      	cmp	r2, r3
 801299c:	dd0f      	ble.n	80129be <lv_draw_mask_radius+0x96>
            return LV_DRAW_MASK_RES_TRANSP;
 801299e:	2300      	movs	r3, #0
 80129a0:	e3cb      	b.n	801313a <lv_draw_mask_radius+0x812>
        }
    }
    else {
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 80129a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80129a6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80129aa:	429a      	cmp	r2, r3
 80129ac:	db05      	blt.n	80129ba <lv_draw_mask_radius+0x92>
 80129ae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80129b2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80129b6:	429a      	cmp	r2, r3
 80129b8:	dd01      	ble.n	80129be <lv_draw_mask_radius+0x96>
            return LV_DRAW_MASK_RES_FULL_COVER;
 80129ba:	2301      	movs	r3, #1
 80129bc:	e3bd      	b.n	801313a <lv_draw_mask_radius+0x812>
        }
    }

    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 80129be:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80129c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80129c6:	4619      	mov	r1, r3
 80129c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129ca:	440b      	add	r3, r1
 80129cc:	429a      	cmp	r2, r3
 80129ce:	db0b      	blt.n	80129e8 <lv_draw_mask_radius+0xc0>
 80129d0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80129d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80129d8:	441a      	add	r2, r3
 80129da:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80129de:	4619      	mov	r1, r3
 80129e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129e2:	1acb      	subs	r3, r1, r3
 80129e4:	429a      	cmp	r2, r3
 80129e6:	dd13      	ble.n	8012a10 <lv_draw_mask_radius+0xe8>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 80129e8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80129ec:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80129f0:	4619      	mov	r1, r3
 80129f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129f4:	440b      	add	r3, r1
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 80129f6:	429a      	cmp	r2, r3
 80129f8:	f2c0 8090 	blt.w	8012b1c <lv_draw_mask_radius+0x1f4>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 80129fc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012a00:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012a04:	4619      	mov	r1, r3
 8012a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a08:	1acb      	subs	r3, r1, r3
 8012a0a:	429a      	cmp	r2, r3
 8012a0c:	f300 8086 	bgt.w	8012b1c <lv_draw_mask_radius+0x1f4>
        if(outer == false) {
 8012a10:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012a14:	f083 0301 	eor.w	r3, r3, #1
 8012a18:	b2db      	uxtb	r3, r3
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d03d      	beq.n	8012a9a <lv_draw_mask_radius+0x172>
            /*Remove the edges*/
            int32_t last =  rect.x1 - abs_x;
 8012a1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012a22:	461a      	mov	r2, r3
 8012a24:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012a28:	1ad3      	subs	r3, r2, r3
 8012a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 8012a2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a32:	429a      	cmp	r2, r3
 8012a34:	dd01      	ble.n	8012a3a <lv_draw_mask_radius+0x112>
 8012a36:	2300      	movs	r3, #0
 8012a38:	e37f      	b.n	801313a <lv_draw_mask_radius+0x812>
            if(last >= 0) {
 8012a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	db04      	blt.n	8012a4a <lv_draw_mask_radius+0x122>
                _lv_memset_00(&mask_buf[0], last);
 8012a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a42:	4619      	mov	r1, r3
 8012a44:	68f8      	ldr	r0, [r7, #12]
 8012a46:	f00a fb70 	bl	801d12a <_lv_memset_00>
            }

            int32_t first = rect.x2 - abs_x + 1;
 8012a4a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012a4e:	461a      	mov	r2, r3
 8012a50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012a54:	1ad3      	subs	r3, r2, r3
 8012a56:	3301      	adds	r3, #1
 8012a58:	62bb      	str	r3, [r7, #40]	; 0x28
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 8012a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	dc01      	bgt.n	8012a64 <lv_draw_mask_radius+0x13c>
 8012a60:	2300      	movs	r3, #0
 8012a62:	e36a      	b.n	801313a <lv_draw_mask_radius+0x812>
            else if(first < len) {
 8012a64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	da09      	bge.n	8012a82 <lv_draw_mask_radius+0x15a>
                _lv_memset_00(&mask_buf[first], len - first);
 8012a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a70:	68fa      	ldr	r2, [r7, #12]
 8012a72:	18d0      	adds	r0, r2, r3
 8012a74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a7a:	1ad3      	subs	r3, r2, r3
 8012a7c:	4619      	mov	r1, r3
 8012a7e:	f00a fb54 	bl	801d12a <_lv_memset_00>
            }
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 8012a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d106      	bne.n	8012a96 <lv_draw_mask_radius+0x16e>
 8012a88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a8e:	429a      	cmp	r2, r3
 8012a90:	d101      	bne.n	8012a96 <lv_draw_mask_radius+0x16e>
 8012a92:	2301      	movs	r3, #1
 8012a94:	e351      	b.n	801313a <lv_draw_mask_radius+0x812>
            else return LV_DRAW_MASK_RES_CHANGED;
 8012a96:	2302      	movs	r3, #2
 8012a98:	e34f      	b.n	801313a <lv_draw_mask_radius+0x812>
        }
        else {
            int32_t first = rect.x1 - abs_x;
 8012a9a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012a9e:	461a      	mov	r2, r3
 8012aa0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012aa4:	1ad3      	subs	r3, r2, r3
 8012aa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            if(first < 0) first = 0;
 8012aaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	da02      	bge.n	8012ab8 <lv_draw_mask_radius+0x190>
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            if(first <= len) {
 8012ab8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012abc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012ac0:	429a      	cmp	r2, r3
 8012ac2:	dc29      	bgt.n	8012b18 <lv_draw_mask_radius+0x1f0>
                int32_t last =  rect.x2 - abs_x - first + 1;
 8012ac4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012ac8:	461a      	mov	r2, r3
 8012aca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012ace:	1ad2      	subs	r2, r2, r3
 8012ad0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012ad4:	1ad3      	subs	r3, r2, r3
 8012ad6:	3301      	adds	r3, #1
 8012ad8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                if(first + last > len) last = len - first;
 8012adc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012ae0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012ae4:	441a      	add	r2, r3
 8012ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012aea:	429a      	cmp	r2, r3
 8012aec:	dd06      	ble.n	8012afc <lv_draw_mask_radius+0x1d4>
 8012aee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012af2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012af6:	1ad3      	subs	r3, r2, r3
 8012af8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                if(last >= 0) {
 8012afc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	db09      	blt.n	8012b18 <lv_draw_mask_radius+0x1f0>
                    _lv_memset_00(&mask_buf[first], last);
 8012b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012b08:	68fa      	ldr	r2, [r7, #12]
 8012b0a:	4413      	add	r3, r2
 8012b0c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012b10:	4611      	mov	r1, r2
 8012b12:	4618      	mov	r0, r3
 8012b14:	f00a fb09 	bl	801d12a <_lv_memset_00>
                }
            }
        }
        return LV_DRAW_MASK_RES_CHANGED;
 8012b18:	2302      	movs	r3, #2
 8012b1a:	e30e      	b.n	801313a <lv_draw_mask_radius+0x812>
    }

    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
 8012b1c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b20:	461a      	mov	r2, r3
 8012b22:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012b26:	1ad3      	subs	r3, r2, r3
 8012b28:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t w = lv_area_get_width(&rect);
 8012b2a:	f107 0320 	add.w	r3, r7, #32
 8012b2e:	4618      	mov	r0, r3
 8012b30:	f7fe ffa6 	bl	8011a80 <lv_area_get_width>
 8012b34:	4603      	mov	r3, r0
 8012b36:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t h = lv_area_get_height(&rect);
 8012b38:	f107 0320 	add.w	r3, r7, #32
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f7fe ffb6 	bl	8011aae <lv_area_get_height>
 8012b42:	4603      	mov	r3, r0
 8012b44:	647b      	str	r3, [r7, #68]	; 0x44
    abs_x -= rect.x1;
 8012b46:	897a      	ldrh	r2, [r7, #10]
 8012b48:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b4c:	b29b      	uxth	r3, r3
 8012b4e:	1ad3      	subs	r3, r2, r3
 8012b50:	b29b      	uxth	r3, r3
 8012b52:	817b      	strh	r3, [r7, #10]
    abs_y -= rect.y1;
 8012b54:	893a      	ldrh	r2, [r7, #8]
 8012b56:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012b5a:	b29b      	uxth	r3, r3
 8012b5c:	1ad3      	subs	r3, r2, r3
 8012b5e:	b29b      	uxth	r3, r3
 8012b60:	813b      	strh	r3, [r7, #8]

    uint32_t r2 = p->cfg.radius * p->cfg.radius;
 8012b62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012b66:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012b6a:	461a      	mov	r2, r3
 8012b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012b70:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012b74:	fb03 f302 	mul.w	r3, r3, r2
 8012b78:	643b      	str	r3, [r7, #64]	; 0x40

    /*Handle corner areas*/
    if(abs_y < radius || abs_y > h - radius - 1) {
 8012b7a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012b7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012b80:	429a      	cmp	r2, r3
 8012b82:	dc08      	bgt.n	8012b96 <lv_draw_mask_radius+0x26e>
 8012b84:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012b88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b8c:	1acb      	subs	r3, r1, r3
 8012b8e:	3b01      	subs	r3, #1
 8012b90:	429a      	cmp	r2, r3
 8012b92:	f340 82d1 	ble.w	8013138 <lv_draw_mask_radius+0x810>

        uint32_t sqrt_mask;
        if(radius <= 32) sqrt_mask = 0x200;
 8012b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b98:	2b20      	cmp	r3, #32
 8012b9a:	dc02      	bgt.n	8012ba2 <lv_draw_mask_radius+0x27a>
 8012b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012ba0:	67fb      	str	r3, [r7, #124]	; 0x7c
        if(radius <= 256) sqrt_mask = 0x800;
 8012ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012ba8:	dc03      	bgt.n	8012bb2 <lv_draw_mask_radius+0x28a>
 8012baa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012bae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012bb0:	e002      	b.n	8012bb8 <lv_draw_mask_radius+0x290>
        else sqrt_mask = 0x8000;
 8012bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012bb6:	67fb      	str	r3, [r7, #124]	; 0x7c

        lv_sqrt_res_t x0;
        lv_sqrt_res_t x1;
        /* y = 0 should mean the top of the circle */
        int32_t y;
        if(abs_y < radius) {
 8012bb8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012bbc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012bbe:	429a      	cmp	r2, r3
 8012bc0:	dd3d      	ble.n	8012c3e <lv_draw_mask_radius+0x316>
            y = radius - abs_y;
 8012bc2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012bc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012bc8:	1ad3      	subs	r3, r2, r3
 8012bca:	67bb      	str	r3, [r7, #120]	; 0x78

            /* Get the x intersection points for `abs_y` and `abs_y-1`
             * Use the circle's equation x = sqrt(r^2 - y^2)
             * Try to use the values from the previous run*/
            if(y == p->y_prev) {
 8012bcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012bd0:	695b      	ldr	r3, [r3, #20]
 8012bd2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012bd4:	429a      	cmp	r2, r3
 8012bd6:	d108      	bne.n	8012bea <lv_draw_mask_radius+0x2c2>
                x0.f = p->y_prev_x.f;
 8012bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012bdc:	8b5b      	ldrh	r3, [r3, #26]
 8012bde:	83fb      	strh	r3, [r7, #30]
                x0.i = p->y_prev_x.i;
 8012be0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012be4:	8b1b      	ldrh	r3, [r3, #24]
 8012be6:	83bb      	strh	r3, [r7, #28]
 8012be8:	e00c      	b.n	8012c04 <lv_draw_mask_radius+0x2dc>
            }
            else {
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
 8012bea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012bec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012bee:	fb02 f303 	mul.w	r3, r2, r3
 8012bf2:	461a      	mov	r2, r3
 8012bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bf6:	1a9b      	subs	r3, r3, r2
 8012bf8:	f107 011c 	add.w	r1, r7, #28
 8012bfc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012bfe:	4618      	mov	r0, r3
 8012c00:	f009 fcd6 	bl	801c5b0 <_lv_sqrt>
            }
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
 8012c04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012c06:	3b01      	subs	r3, #1
 8012c08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012c0a:	3a01      	subs	r2, #1
 8012c0c:	fb02 f303 	mul.w	r3, r2, r3
 8012c10:	461a      	mov	r2, r3
 8012c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c14:	1a9b      	subs	r3, r3, r2
 8012c16:	f107 0118 	add.w	r1, r7, #24
 8012c1a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	f009 fcc7 	bl	801c5b0 <_lv_sqrt>
            p->y_prev = y - 1;
 8012c22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012c24:	1e5a      	subs	r2, r3, #1
 8012c26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012c2a:	615a      	str	r2, [r3, #20]
            p->y_prev_x.f = x1.f;
 8012c2c:	8b7a      	ldrh	r2, [r7, #26]
 8012c2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012c32:	835a      	strh	r2, [r3, #26]
            p->y_prev_x.i = x1.i;
 8012c34:	8b3a      	ldrh	r2, [r7, #24]
 8012c36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012c3a:	831a      	strh	r2, [r3, #24]
 8012c3c:	e03f      	b.n	8012cbe <lv_draw_mask_radius+0x396>
        }
        else {
            y = radius - (h - abs_y) + 1;
 8012c3e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012c42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012c44:	1ad3      	subs	r3, r2, r3
 8012c46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012c48:	1ad3      	subs	r3, r2, r3
 8012c4a:	3301      	adds	r3, #1
 8012c4c:	67bb      	str	r3, [r7, #120]	; 0x78

            /* Get the x intersection points for `abs_y` and `abs_y-1`
             * Use the circle's equation x = sqrt(r^2 - y^2)
             * Try to use the values from the previous run*/
            if((y - 1) == p->y_prev) {
 8012c4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012c50:	1e5a      	subs	r2, r3, #1
 8012c52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012c56:	695b      	ldr	r3, [r3, #20]
 8012c58:	429a      	cmp	r2, r3
 8012c5a:	d108      	bne.n	8012c6e <lv_draw_mask_radius+0x346>
                x1.f = p->y_prev_x.f;
 8012c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012c60:	8b5b      	ldrh	r3, [r3, #26]
 8012c62:	837b      	strh	r3, [r7, #26]
                x1.i = p->y_prev_x.i;
 8012c64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012c68:	8b1b      	ldrh	r3, [r3, #24]
 8012c6a:	833b      	strh	r3, [r7, #24]
 8012c6c:	e00e      	b.n	8012c8c <lv_draw_mask_radius+0x364>
            }
            else {
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
 8012c6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012c70:	3b01      	subs	r3, #1
 8012c72:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012c74:	3a01      	subs	r2, #1
 8012c76:	fb02 f303 	mul.w	r3, r2, r3
 8012c7a:	461a      	mov	r2, r3
 8012c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c7e:	1a9b      	subs	r3, r3, r2
 8012c80:	f107 0118 	add.w	r1, r7, #24
 8012c84:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012c86:	4618      	mov	r0, r3
 8012c88:	f009 fc92 	bl	801c5b0 <_lv_sqrt>
            }

            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
 8012c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012c8e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012c90:	fb02 f303 	mul.w	r3, r2, r3
 8012c94:	461a      	mov	r2, r3
 8012c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c98:	1a9b      	subs	r3, r3, r2
 8012c9a:	f107 011c 	add.w	r1, r7, #28
 8012c9e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	f009 fc85 	bl	801c5b0 <_lv_sqrt>
            p->y_prev = y;
 8012ca6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012caa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012cac:	615a      	str	r2, [r3, #20]
            p->y_prev_x.f = x0.f;
 8012cae:	8bfa      	ldrh	r2, [r7, #30]
 8012cb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012cb4:	835a      	strh	r2, [r3, #26]
            p->y_prev_x.i = x0.i;
 8012cb6:	8bba      	ldrh	r2, [r7, #28]
 8012cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012cbc:	831a      	strh	r2, [r3, #24]
        }

        /* If x1 is on the next round coordinate (e.g. x0: 3.5, x1:4.0)
         * then treat x1 as x1: 3.99 to handle them as they were on the same pixel*/
        if(x0.i == x1.i - 1 && x1.f == 0) {
 8012cbe:	8bbb      	ldrh	r3, [r7, #28]
 8012cc0:	461a      	mov	r2, r3
 8012cc2:	8b3b      	ldrh	r3, [r7, #24]
 8012cc4:	3b01      	subs	r3, #1
 8012cc6:	429a      	cmp	r2, r3
 8012cc8:	d108      	bne.n	8012cdc <lv_draw_mask_radius+0x3b4>
 8012cca:	8b7b      	ldrh	r3, [r7, #26]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d105      	bne.n	8012cdc <lv_draw_mask_radius+0x3b4>
            x1.i--;
 8012cd0:	8b3b      	ldrh	r3, [r7, #24]
 8012cd2:	3b01      	subs	r3, #1
 8012cd4:	b29b      	uxth	r3, r3
 8012cd6:	833b      	strh	r3, [r7, #24]
            x1.f = 0xFF;
 8012cd8:	23ff      	movs	r3, #255	; 0xff
 8012cda:	837b      	strh	r3, [r7, #26]
        }

        /*If the two x intersections are on the same x then just get average of the fractions*/
        if(x0.i == x1.i) {
 8012cdc:	8bba      	ldrh	r2, [r7, #28]
 8012cde:	8b3b      	ldrh	r3, [r7, #24]
 8012ce0:	429a      	cmp	r2, r3
 8012ce2:	f040 80a9 	bne.w	8012e38 <lv_draw_mask_radius+0x510>
            lv_opa_t m = (x0.f + x1.f) >> 1;
 8012ce6:	8bfb      	ldrh	r3, [r7, #30]
 8012ce8:	461a      	mov	r2, r3
 8012cea:	8b7b      	ldrh	r3, [r7, #26]
 8012cec:	4413      	add	r3, r2
 8012cee:	105b      	asrs	r3, r3, #1
 8012cf0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            if(outer) m = 255 - m;
 8012cf4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d004      	beq.n	8012d06 <lv_draw_mask_radius+0x3de>
 8012cfc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012d00:	43db      	mvns	r3, r3
 8012d02:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            int32_t ofs = radius - x0.i - 1;
 8012d06:	8bbb      	ldrh	r3, [r7, #28]
 8012d08:	461a      	mov	r2, r3
 8012d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d0c:	1a9b      	subs	r3, r3, r2
 8012d0e:	3b01      	subs	r3, #1
 8012d10:	63bb      	str	r3, [r7, #56]	; 0x38

            /*Left corner*/
            int32_t kl = k + ofs;
 8012d12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d16:	4413      	add	r3, r2
 8012d18:	637b      	str	r3, [r7, #52]	; 0x34

            if(kl >= 0 && kl < len) {
 8012d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	db12      	blt.n	8012d46 <lv_draw_mask_radius+0x41e>
 8012d20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d26:	429a      	cmp	r2, r3
 8012d28:	da0d      	bge.n	8012d46 <lv_draw_mask_radius+0x41e>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
 8012d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d2c:	68fa      	ldr	r2, [r7, #12]
 8012d2e:	4413      	add	r3, r2
 8012d30:	7818      	ldrb	r0, [r3, #0]
 8012d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d34:	68fa      	ldr	r2, [r7, #12]
 8012d36:	18d4      	adds	r4, r2, r3
 8012d38:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012d3c:	4619      	mov	r1, r3
 8012d3e:	f000 fa00 	bl	8013142 <mask_mix>
 8012d42:	4603      	mov	r3, r0
 8012d44:	7023      	strb	r3, [r4, #0]
            }

            /*Right corner*/
            int32_t kr = k + (w - ofs - 1);
 8012d46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d4a:	1ad3      	subs	r3, r2, r3
 8012d4c:	3b01      	subs	r3, #1
 8012d4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012d50:	4413      	add	r3, r2
 8012d52:	633b      	str	r3, [r7, #48]	; 0x30
            if(kr >= 0 && kr < len) {
 8012d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	db12      	blt.n	8012d80 <lv_draw_mask_radius+0x458>
 8012d5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d60:	429a      	cmp	r2, r3
 8012d62:	da0d      	bge.n	8012d80 <lv_draw_mask_radius+0x458>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
 8012d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d66:	68fa      	ldr	r2, [r7, #12]
 8012d68:	4413      	add	r3, r2
 8012d6a:	7818      	ldrb	r0, [r3, #0]
 8012d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d6e:	68fa      	ldr	r2, [r7, #12]
 8012d70:	18d4      	adds	r4, r2, r3
 8012d72:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012d76:	4619      	mov	r1, r3
 8012d78:	f000 f9e3 	bl	8013142 <mask_mix>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	7023      	strb	r3, [r4, #0]
            }

            /*Clear the unused parts*/
            if(outer == false) {
 8012d80:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012d84:	f083 0301 	eor.w	r3, r3, #1
 8012d88:	b2db      	uxtb	r3, r3
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d027      	beq.n	8012dde <lv_draw_mask_radius+0x4b6>
                kr++;
 8012d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d90:	3301      	adds	r3, #1
 8012d92:	633b      	str	r3, [r7, #48]	; 0x30
                if(kl > len)  {
 8012d94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d9a:	429a      	cmp	r2, r3
 8012d9c:	dd01      	ble.n	8012da2 <lv_draw_mask_radius+0x47a>
                    return LV_DRAW_MASK_RES_TRANSP;
 8012d9e:	2300      	movs	r3, #0
 8012da0:	e1cb      	b.n	801313a <lv_draw_mask_radius+0x812>
                }
                if(kl >= 0) {
 8012da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	db04      	blt.n	8012db2 <lv_draw_mask_radius+0x48a>
                    _lv_memset_00(&mask_buf[0], kl);
 8012da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012daa:	4619      	mov	r1, r3
 8012dac:	68f8      	ldr	r0, [r7, #12]
 8012dae:	f00a f9bc 	bl	801d12a <_lv_memset_00>
                }
                if(kr < 0) {
 8012db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	da01      	bge.n	8012dbc <lv_draw_mask_radius+0x494>
                    return LV_DRAW_MASK_RES_TRANSP;
 8012db8:	2300      	movs	r3, #0
 8012dba:	e1be      	b.n	801313a <lv_draw_mask_radius+0x812>
                }
                if(kr <= len) {
 8012dbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012dc2:	429a      	cmp	r2, r3
 8012dc4:	f300 81b8 	bgt.w	8013138 <lv_draw_mask_radius+0x810>
                    _lv_memset_00(&mask_buf[kr], len - kr);
 8012dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dca:	68fa      	ldr	r2, [r7, #12]
 8012dcc:	18d0      	adds	r0, r2, r3
 8012dce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd4:	1ad3      	subs	r3, r2, r3
 8012dd6:	4619      	mov	r1, r3
 8012dd8:	f00a f9a7 	bl	801d12a <_lv_memset_00>
 8012ddc:	e1ac      	b.n	8013138 <lv_draw_mask_radius+0x810>
                }
            }
            else {
                kl++;
 8012dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012de0:	3301      	adds	r3, #1
 8012de2:	637b      	str	r3, [r7, #52]	; 0x34
                int32_t first = kl;
 8012de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012de6:	673b      	str	r3, [r7, #112]	; 0x70
                if(first < 0) first = 0;
 8012de8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	da01      	bge.n	8012df2 <lv_draw_mask_radius+0x4ca>
 8012dee:	2300      	movs	r3, #0
 8012df0:	673b      	str	r3, [r7, #112]	; 0x70

                int32_t len_tmp = kr - first;
 8012df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012df4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012df6:	1ad3      	subs	r3, r2, r3
 8012df8:	66fb      	str	r3, [r7, #108]	; 0x6c
                if(len_tmp + first > len) len_tmp = len - first;
 8012dfa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012dfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012dfe:	441a      	add	r2, r3
 8012e00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e04:	429a      	cmp	r2, r3
 8012e06:	dd04      	ble.n	8012e12 <lv_draw_mask_radius+0x4ea>
 8012e08:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012e0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012e0e:	1ad3      	subs	r3, r2, r3
 8012e10:	66fb      	str	r3, [r7, #108]	; 0x6c
                if(first < len && len_tmp >= 0) {
 8012e12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e16:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012e18:	429a      	cmp	r2, r3
 8012e1a:	f280 818d 	bge.w	8013138 <lv_draw_mask_radius+0x810>
 8012e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	f2c0 8189 	blt.w	8013138 <lv_draw_mask_radius+0x810>
                    _lv_memset_00(&mask_buf[first], len_tmp);
 8012e26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012e28:	68fa      	ldr	r2, [r7, #12]
 8012e2a:	4413      	add	r3, r2
 8012e2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012e2e:	4611      	mov	r1, r2
 8012e30:	4618      	mov	r0, r3
 8012e32:	f00a f97a 	bl	801d12a <_lv_memset_00>
 8012e36:	e17f      	b.n	8013138 <lv_draw_mask_radius+0x810>
                }
            }
        }
        /*Multiple pixels are affected. Get y intersection of the pixels*/
        else {
            int32_t ofs = radius - (x0.i + 1);
 8012e38:	8bbb      	ldrh	r3, [r7, #28]
 8012e3a:	3301      	adds	r3, #1
 8012e3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012e3e:	1ad3      	subs	r3, r2, r3
 8012e40:	63fb      	str	r3, [r7, #60]	; 0x3c
            int32_t kl = k + ofs;
 8012e42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e46:	4413      	add	r3, r2
 8012e48:	66bb      	str	r3, [r7, #104]	; 0x68
            int32_t kr = k + (w - ofs - 1);
 8012e4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e4e:	1ad3      	subs	r3, r2, r3
 8012e50:	3b01      	subs	r3, #1
 8012e52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012e54:	4413      	add	r3, r2
 8012e56:	667b      	str	r3, [r7, #100]	; 0x64

            if(outer) {
 8012e58:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d027      	beq.n	8012eb0 <lv_draw_mask_radius+0x588>
                int32_t first = kl + 1;
 8012e60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012e62:	3301      	adds	r3, #1
 8012e64:	663b      	str	r3, [r7, #96]	; 0x60
                if(first < 0) first = 0;
 8012e66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	da01      	bge.n	8012e70 <lv_draw_mask_radius+0x548>
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	663b      	str	r3, [r7, #96]	; 0x60

                int32_t len_tmp = kr - first;
 8012e70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e74:	1ad3      	subs	r3, r2, r3
 8012e76:	65fb      	str	r3, [r7, #92]	; 0x5c
                if(len_tmp + first > len) len_tmp = len - first;
 8012e78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e7c:	441a      	add	r2, r3
 8012e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e82:	429a      	cmp	r2, r3
 8012e84:	dd04      	ble.n	8012e90 <lv_draw_mask_radius+0x568>
 8012e86:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012e8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e8c:	1ad3      	subs	r3, r2, r3
 8012e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
                if(first < len && len_tmp >= 0) {
 8012e90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012e96:	429a      	cmp	r2, r3
 8012e98:	da0a      	bge.n	8012eb0 <lv_draw_mask_radius+0x588>
 8012e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	db07      	blt.n	8012eb0 <lv_draw_mask_radius+0x588>
                    _lv_memset_00(&mask_buf[first], len_tmp);
 8012ea0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ea2:	68fa      	ldr	r2, [r7, #12]
 8012ea4:	4413      	add	r3, r2
 8012ea6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012ea8:	4611      	mov	r1, r2
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f00a f93d 	bl	801d12a <_lv_memset_00>
                }
            }

            uint32_t i = x0.i + 1;
 8012eb0:	8bbb      	ldrh	r3, [r7, #28]
 8012eb2:	3301      	adds	r3, #1
 8012eb4:	65bb      	str	r3, [r7, #88]	; 0x58
            lv_opa_t m;
            lv_sqrt_res_t y_prev;
            lv_sqrt_res_t y_next;

            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
 8012eb6:	8bbb      	ldrh	r3, [r7, #28]
 8012eb8:	8bba      	ldrh	r2, [r7, #28]
 8012eba:	fb02 f303 	mul.w	r3, r2, r3
 8012ebe:	461a      	mov	r2, r3
 8012ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ec2:	1a9b      	subs	r3, r3, r2
 8012ec4:	f107 0114 	add.w	r1, r7, #20
 8012ec8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012eca:	4618      	mov	r0, r3
 8012ecc:	f009 fb70 	bl	801c5b0 <_lv_sqrt>

            if(y_prev.f == 0) {
 8012ed0:	8afb      	ldrh	r3, [r7, #22]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d105      	bne.n	8012ee2 <lv_draw_mask_radius+0x5ba>
                y_prev.i--;
 8012ed6:	8abb      	ldrh	r3, [r7, #20]
 8012ed8:	3b01      	subs	r3, #1
 8012eda:	b29b      	uxth	r3, r3
 8012edc:	82bb      	strh	r3, [r7, #20]
                y_prev.f = 0xFF;
 8012ede:	23ff      	movs	r3, #255	; 0xff
 8012ee0:	82fb      	strh	r3, [r7, #22]
            }

            /*The first y intersection is special as it might be in the previous line*/
            if(y_prev.i >= y) {
 8012ee2:	8abb      	ldrh	r3, [r7, #20]
 8012ee4:	461a      	mov	r2, r3
 8012ee6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012ee8:	4293      	cmp	r3, r2
 8012eea:	f300 80ae 	bgt.w	801304a <lv_draw_mask_radius+0x722>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
 8012eee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012ef0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012ef2:	fb02 f303 	mul.w	r3, r2, r3
 8012ef6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012ef8:	1ad3      	subs	r3, r2, r3
 8012efa:	f107 0110 	add.w	r1, r7, #16
 8012efe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012f00:	4618      	mov	r0, r3
 8012f02:	f009 fb55 	bl	801c5b0 <_lv_sqrt>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 8012f06:	8bfb      	ldrh	r3, [r7, #30]
 8012f08:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8012f0c:	8a7a      	ldrh	r2, [r7, #18]
 8012f0e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8012f12:	fb02 f303 	mul.w	r3, r2, r3
 8012f16:	125b      	asrs	r3, r3, #9
 8012f18:	b2db      	uxtb	r3, r3
 8012f1a:	43db      	mvns	r3, r3
 8012f1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

                if(outer) m = 255 - m;
 8012f20:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d004      	beq.n	8012f32 <lv_draw_mask_radius+0x60a>
 8012f28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f2c:	43db      	mvns	r3, r3
 8012f2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 8012f32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	db12      	blt.n	8012f5e <lv_draw_mask_radius+0x636>
 8012f38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012f3e:	429a      	cmp	r2, r3
 8012f40:	da0d      	bge.n	8012f5e <lv_draw_mask_radius+0x636>
 8012f42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f44:	68fa      	ldr	r2, [r7, #12]
 8012f46:	4413      	add	r3, r2
 8012f48:	7818      	ldrb	r0, [r3, #0]
 8012f4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f4c:	68fa      	ldr	r2, [r7, #12]
 8012f4e:	18d4      	adds	r4, r2, r3
 8012f50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f54:	4619      	mov	r1, r3
 8012f56:	f000 f8f4 	bl	8013142 <mask_mix>
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	7023      	strb	r3, [r4, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 8012f5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	db12      	blt.n	8012f8a <lv_draw_mask_radius+0x662>
 8012f64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f68:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012f6a:	429a      	cmp	r2, r3
 8012f6c:	da0d      	bge.n	8012f8a <lv_draw_mask_radius+0x662>
 8012f6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f70:	68fa      	ldr	r2, [r7, #12]
 8012f72:	4413      	add	r3, r2
 8012f74:	7818      	ldrb	r0, [r3, #0]
 8012f76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f78:	68fa      	ldr	r2, [r7, #12]
 8012f7a:	18d4      	adds	r4, r2, r3
 8012f7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f80:	4619      	mov	r1, r3
 8012f82:	f000 f8de 	bl	8013142 <mask_mix>
 8012f86:	4603      	mov	r3, r0
 8012f88:	7023      	strb	r3, [r4, #0]
                kl--;
 8012f8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f8c:	3b01      	subs	r3, #1
 8012f8e:	66bb      	str	r3, [r7, #104]	; 0x68
                kr++;
 8012f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f92:	3301      	adds	r3, #1
 8012f94:	667b      	str	r3, [r7, #100]	; 0x64
                y_prev.f = y_next.f;
 8012f96:	8a7b      	ldrh	r3, [r7, #18]
 8012f98:	82fb      	strh	r3, [r7, #22]
                i++;
 8012f9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f9c:	3301      	adds	r3, #1
 8012f9e:	65bb      	str	r3, [r7, #88]	; 0x58
            }

            /*Set all points which are crossed by the circle*/
            for(; i <= x1.i; i++) {
 8012fa0:	e053      	b.n	801304a <lv_draw_mask_radius+0x722>
                /* These values are very close to each other. It's enough to approximate sqrt
                 * The non-approximated version is lv_sqrt(r2 - (i * i), &y_next, sqrt_mask); */
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
 8012fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012fa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012fa6:	fb02 f303 	mul.w	r3, r2, r3
 8012faa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012fac:	1ad2      	subs	r2, r2, r3
 8012fae:	f107 0114 	add.w	r1, r7, #20
 8012fb2:	f107 0310 	add.w	r3, r7, #16
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f000 f8e7 	bl	801318a <sqrt_approx>

                m = (y_prev.f + y_next.f) >> 1;
 8012fbc:	8afb      	ldrh	r3, [r7, #22]
 8012fbe:	461a      	mov	r2, r3
 8012fc0:	8a7b      	ldrh	r3, [r7, #18]
 8012fc2:	4413      	add	r3, r2
 8012fc4:	105b      	asrs	r3, r3, #1
 8012fc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                if(outer) m = 255 - m;
 8012fca:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d004      	beq.n	8012fdc <lv_draw_mask_radius+0x6b4>
 8012fd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012fd6:	43db      	mvns	r3, r3
 8012fd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 8012fdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	db12      	blt.n	8013008 <lv_draw_mask_radius+0x6e0>
 8012fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012fe6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	da0d      	bge.n	8013008 <lv_draw_mask_radius+0x6e0>
 8012fec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012fee:	68fa      	ldr	r2, [r7, #12]
 8012ff0:	4413      	add	r3, r2
 8012ff2:	7818      	ldrb	r0, [r3, #0]
 8012ff4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012ff6:	68fa      	ldr	r2, [r7, #12]
 8012ff8:	18d4      	adds	r4, r2, r3
 8012ffa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ffe:	4619      	mov	r1, r3
 8013000:	f000 f89f 	bl	8013142 <mask_mix>
 8013004:	4603      	mov	r3, r0
 8013006:	7023      	strb	r3, [r4, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 8013008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801300a:	2b00      	cmp	r3, #0
 801300c:	db12      	blt.n	8013034 <lv_draw_mask_radius+0x70c>
 801300e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013012:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013014:	429a      	cmp	r2, r3
 8013016:	da0d      	bge.n	8013034 <lv_draw_mask_radius+0x70c>
 8013018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801301a:	68fa      	ldr	r2, [r7, #12]
 801301c:	4413      	add	r3, r2
 801301e:	7818      	ldrb	r0, [r3, #0]
 8013020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013022:	68fa      	ldr	r2, [r7, #12]
 8013024:	18d4      	adds	r4, r2, r3
 8013026:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801302a:	4619      	mov	r1, r3
 801302c:	f000 f889 	bl	8013142 <mask_mix>
 8013030:	4603      	mov	r3, r0
 8013032:	7023      	strb	r3, [r4, #0]
                kl--;
 8013034:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013036:	3b01      	subs	r3, #1
 8013038:	66bb      	str	r3, [r7, #104]	; 0x68
                kr++;
 801303a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801303c:	3301      	adds	r3, #1
 801303e:	667b      	str	r3, [r7, #100]	; 0x64
                y_prev.f = y_next.f;
 8013040:	8a7b      	ldrh	r3, [r7, #18]
 8013042:	82fb      	strh	r3, [r7, #22]
            for(; i <= x1.i; i++) {
 8013044:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013046:	3301      	adds	r3, #1
 8013048:	65bb      	str	r3, [r7, #88]	; 0x58
 801304a:	8b3b      	ldrh	r3, [r7, #24]
 801304c:	461a      	mov	r2, r3
 801304e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013050:	4293      	cmp	r3, r2
 8013052:	d9a6      	bls.n	8012fa2 <lv_draw_mask_radius+0x67a>
            }

            /*If the last pixel was left in its middle therefore
             * the circle still has parts on the next one*/
            if(y_prev.f) {
 8013054:	8afb      	ldrh	r3, [r7, #22]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d041      	beq.n	80130de <lv_draw_mask_radius+0x7b6>
                m = (y_prev.f * x1.f) >> 9;
 801305a:	8afb      	ldrh	r3, [r7, #22]
 801305c:	8b7a      	ldrh	r2, [r7, #26]
 801305e:	fb02 f303 	mul.w	r3, r2, r3
 8013062:	125b      	asrs	r3, r3, #9
 8013064:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                if(outer) m = 255 - m;
 8013068:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 801306c:	2b00      	cmp	r3, #0
 801306e:	d004      	beq.n	801307a <lv_draw_mask_radius+0x752>
 8013070:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013074:	43db      	mvns	r3, r3
 8013076:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 801307a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801307c:	2b00      	cmp	r3, #0
 801307e:	db12      	blt.n	80130a6 <lv_draw_mask_radius+0x77e>
 8013080:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013084:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013086:	429a      	cmp	r2, r3
 8013088:	da0d      	bge.n	80130a6 <lv_draw_mask_radius+0x77e>
 801308a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801308c:	68fa      	ldr	r2, [r7, #12]
 801308e:	4413      	add	r3, r2
 8013090:	7818      	ldrb	r0, [r3, #0]
 8013092:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013094:	68fa      	ldr	r2, [r7, #12]
 8013096:	18d4      	adds	r4, r2, r3
 8013098:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801309c:	4619      	mov	r1, r3
 801309e:	f000 f850 	bl	8013142 <mask_mix>
 80130a2:	4603      	mov	r3, r0
 80130a4:	7023      	strb	r3, [r4, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 80130a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	db12      	blt.n	80130d2 <lv_draw_mask_radius+0x7aa>
 80130ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80130b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80130b2:	429a      	cmp	r2, r3
 80130b4:	da0d      	bge.n	80130d2 <lv_draw_mask_radius+0x7aa>
 80130b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80130b8:	68fa      	ldr	r2, [r7, #12]
 80130ba:	4413      	add	r3, r2
 80130bc:	7818      	ldrb	r0, [r3, #0]
 80130be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80130c0:	68fa      	ldr	r2, [r7, #12]
 80130c2:	18d4      	adds	r4, r2, r3
 80130c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80130c8:	4619      	mov	r1, r3
 80130ca:	f000 f83a 	bl	8013142 <mask_mix>
 80130ce:	4603      	mov	r3, r0
 80130d0:	7023      	strb	r3, [r4, #0]
                kl--;
 80130d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80130d4:	3b01      	subs	r3, #1
 80130d6:	66bb      	str	r3, [r7, #104]	; 0x68
                kr++;
 80130d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80130da:	3301      	adds	r3, #1
 80130dc:	667b      	str	r3, [r7, #100]	; 0x64
            }

            if(outer == 0) {
 80130de:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80130e2:	f083 0301 	eor.w	r3, r3, #1
 80130e6:	b2db      	uxtb	r3, r3
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d025      	beq.n	8013138 <lv_draw_mask_radius+0x810>
                kl++;
 80130ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80130ee:	3301      	adds	r3, #1
 80130f0:	66bb      	str	r3, [r7, #104]	; 0x68
                if(kl > len) {
 80130f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80130f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80130f8:	429a      	cmp	r2, r3
 80130fa:	dd01      	ble.n	8013100 <lv_draw_mask_radius+0x7d8>
                    return LV_DRAW_MASK_RES_TRANSP;
 80130fc:	2300      	movs	r3, #0
 80130fe:	e01c      	b.n	801313a <lv_draw_mask_radius+0x812>
                }
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
 8013100:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013102:	2b00      	cmp	r3, #0
 8013104:	db04      	blt.n	8013110 <lv_draw_mask_radius+0x7e8>
 8013106:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013108:	4619      	mov	r1, r3
 801310a:	68f8      	ldr	r0, [r7, #12]
 801310c:	f00a f80d 	bl	801d12a <_lv_memset_00>

                if(kr < 0) {
 8013110:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013112:	2b00      	cmp	r3, #0
 8013114:	da01      	bge.n	801311a <lv_draw_mask_radius+0x7f2>
                    return LV_DRAW_MASK_RES_TRANSP;
 8013116:	2300      	movs	r3, #0
                    return LV_DRAW_MASK_RES_TRANSP;
 8013118:	e00f      	b.n	801313a <lv_draw_mask_radius+0x812>
                }
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
 801311a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801311e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013120:	429a      	cmp	r2, r3
 8013122:	da09      	bge.n	8013138 <lv_draw_mask_radius+0x810>
 8013124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013126:	68fa      	ldr	r2, [r7, #12]
 8013128:	18d0      	adds	r0, r2, r3
 801312a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801312e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013130:	1ad3      	subs	r3, r2, r3
 8013132:	4619      	mov	r1, r3
 8013134:	f009 fff9 	bl	801d12a <_lv_memset_00>
            }
        }
    }

    return LV_DRAW_MASK_RES_CHANGED;
 8013138:	2302      	movs	r3, #2
}
 801313a:	4618      	mov	r0, r3
 801313c:	378c      	adds	r7, #140	; 0x8c
 801313e:	46bd      	mov	sp, r7
 8013140:	bd90      	pop	{r4, r7, pc}

08013142 <mask_mix>:

    return LV_DRAW_MASK_RES_CHANGED;
}

LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
 8013142:	b480      	push	{r7}
 8013144:	b083      	sub	sp, #12
 8013146:	af00      	add	r7, sp, #0
 8013148:	4603      	mov	r3, r0
 801314a:	460a      	mov	r2, r1
 801314c:	71fb      	strb	r3, [r7, #7]
 801314e:	4613      	mov	r3, r2
 8013150:	71bb      	strb	r3, [r7, #6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8013152:	79bb      	ldrb	r3, [r7, #6]
 8013154:	2bfc      	cmp	r3, #252	; 0xfc
 8013156:	d901      	bls.n	801315c <mask_mix+0x1a>
 8013158:	79fb      	ldrb	r3, [r7, #7]
 801315a:	e010      	b.n	801317e <mask_mix+0x3c>
    if(mask_new <= LV_OPA_MIN) return 0;
 801315c:	79bb      	ldrb	r3, [r7, #6]
 801315e:	2b02      	cmp	r3, #2
 8013160:	d801      	bhi.n	8013166 <mask_mix+0x24>
 8013162:	2300      	movs	r3, #0
 8013164:	e00b      	b.n	801317e <mask_mix+0x3c>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
 8013166:	79fb      	ldrb	r3, [r7, #7]
 8013168:	79ba      	ldrb	r2, [r7, #6]
 801316a:	fb02 f303 	mul.w	r3, r2, r3
 801316e:	461a      	mov	r2, r3
 8013170:	4613      	mov	r3, r2
 8013172:	021b      	lsls	r3, r3, #8
 8013174:	4413      	add	r3, r2
 8013176:	01db      	lsls	r3, r3, #7
 8013178:	4413      	add	r3, r2
 801317a:	0ddb      	lsrs	r3, r3, #23
 801317c:	b2db      	uxtb	r3, r3
}
 801317e:	4618      	mov	r0, r3
 8013180:	370c      	adds	r7, #12
 8013182:	46bd      	mov	sp, r7
 8013184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013188:	4770      	bx	lr

0801318a <sqrt_approx>:
 * @param q store the result here
 * @param ref the reference point (already calculated sqrt)
 * @param x the value which sqrt should be approximated
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
 801318a:	b480      	push	{r7}
 801318c:	b089      	sub	sp, #36	; 0x24
 801318e:	af00      	add	r7, sp, #0
 8013190:	60f8      	str	r0, [r7, #12]
 8013192:	60b9      	str	r1, [r7, #8]
 8013194:	607a      	str	r2, [r7, #4]
    x = x << 8; /*Upscale for extra precision*/
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	021b      	lsls	r3, r3, #8
 801319a:	607b      	str	r3, [r7, #4]

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 801319c:	68bb      	ldr	r3, [r7, #8]
 801319e:	881b      	ldrh	r3, [r3, #0]
 80131a0:	011b      	lsls	r3, r3, #4
 80131a2:	68ba      	ldr	r2, [r7, #8]
 80131a4:	8852      	ldrh	r2, [r2, #2]
 80131a6:	0912      	lsrs	r2, r2, #4
 80131a8:	b292      	uxth	r2, r2
 80131aa:	4413      	add	r3, r2
 80131ac:	61fb      	str	r3, [r7, #28]
    uint32_t raw2 = raw * raw;
 80131ae:	69fb      	ldr	r3, [r7, #28]
 80131b0:	69fa      	ldr	r2, [r7, #28]
 80131b2:	fb02 f303 	mul.w	r3, r2, r3
 80131b6:	61bb      	str	r3, [r7, #24]

    int32_t d = x - raw2;
 80131b8:	687a      	ldr	r2, [r7, #4]
 80131ba:	69bb      	ldr	r3, [r7, #24]
 80131bc:	1ad3      	subs	r3, r2, r3
 80131be:	617b      	str	r3, [r7, #20]
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 80131c0:	69fb      	ldr	r3, [r7, #28]
 80131c2:	005b      	lsls	r3, r3, #1
 80131c4:	461a      	mov	r2, r3
 80131c6:	697b      	ldr	r3, [r7, #20]
 80131c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80131cc:	461a      	mov	r2, r3
 80131ce:	69fb      	ldr	r3, [r7, #28]
 80131d0:	4413      	add	r3, r2
 80131d2:	617b      	str	r3, [r7, #20]

    q->i = d >> 4;
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	111b      	asrs	r3, r3, #4
 80131d8:	b29a      	uxth	r2, r3
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	801a      	strh	r2, [r3, #0]
    q->f = (d & 0xF) << 4;
 80131de:	697b      	ldr	r3, [r7, #20]
 80131e0:	011b      	lsls	r3, r3, #4
 80131e2:	b29b      	uxth	r3, r3
 80131e4:	b2db      	uxtb	r3, r3
 80131e6:	b29a      	uxth	r2, r3
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	805a      	strh	r2, [r3, #2]
}
 80131ec:	bf00      	nop
 80131ee:	3724      	adds	r7, #36	; 0x24
 80131f0:	46bd      	mov	sp, r7
 80131f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f6:	4770      	bx	lr

080131f8 <_lv_memcpy_small>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
 80131f8:	b480      	push	{r7}
 80131fa:	b087      	sub	sp, #28
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	60f8      	str	r0, [r7, #12]
 8013200:	60b9      	str	r1, [r7, #8]
 8013202:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	613b      	str	r3, [r7, #16]

    while(len) {
 801320c:	e00c      	b.n	8013228 <_lv_memcpy_small+0x30>
        *d8 = *s8;
 801320e:	693b      	ldr	r3, [r7, #16]
 8013210:	781a      	ldrb	r2, [r3, #0]
 8013212:	697b      	ldr	r3, [r7, #20]
 8013214:	701a      	strb	r2, [r3, #0]
        d8++;
 8013216:	697b      	ldr	r3, [r7, #20]
 8013218:	3301      	adds	r3, #1
 801321a:	617b      	str	r3, [r7, #20]
        s8++;
 801321c:	693b      	ldr	r3, [r7, #16]
 801321e:	3301      	adds	r3, #1
 8013220:	613b      	str	r3, [r7, #16]
        len--;
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	3b01      	subs	r3, #1
 8013226:	607b      	str	r3, [r7, #4]
    while(len) {
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d1ef      	bne.n	801320e <_lv_memcpy_small+0x16>
    }

    return dst;
 801322e:	68fb      	ldr	r3, [r7, #12]
}
 8013230:	4618      	mov	r0, r3
 8013232:	371c      	adds	r7, #28
 8013234:	46bd      	mov	sp, r7
 8013236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323a:	4770      	bx	lr

0801323c <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b082      	sub	sp, #8
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
 8013244:	6039      	str	r1, [r7, #0]
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
 8013246:	2208      	movs	r2, #8
 8013248:	6839      	ldr	r1, [r7, #0]
 801324a:	6878      	ldr	r0, [r7, #4]
 801324c:	f7ff ffd4 	bl	80131f8 <_lv_memcpy_small>
}
 8013250:	bf00      	nop
 8013252:	3708      	adds	r7, #8
 8013254:	46bd      	mov	sp, r7
 8013256:	bd80      	pop	{r7, pc}

08013258 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8013258:	b480      	push	{r7}
 801325a:	b083      	sub	sp, #12
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013266:	b29a      	uxth	r2, r3
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801326e:	b29b      	uxth	r3, r3
 8013270:	1ad3      	subs	r3, r2, r3
 8013272:	b29b      	uxth	r3, r3
 8013274:	3301      	adds	r3, #1
 8013276:	b29b      	uxth	r3, r3
 8013278:	b21b      	sxth	r3, r3
}
 801327a:	4618      	mov	r0, r3
 801327c:	370c      	adds	r7, #12
 801327e:	46bd      	mov	sp, r7
 8013280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013284:	4770      	bx	lr

08013286 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8013286:	b480      	push	{r7}
 8013288:	b083      	sub	sp, #12
 801328a:	af00      	add	r7, sp, #0
 801328c:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013294:	b29a      	uxth	r2, r3
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801329c:	b29b      	uxth	r3, r3
 801329e:	1ad3      	subs	r3, r2, r3
 80132a0:	b29b      	uxth	r3, r3
 80132a2:	3301      	adds	r3, #1
 80132a4:	b29b      	uxth	r3, r3
 80132a6:	b21b      	sxth	r3, r3
}
 80132a8:	4618      	mov	r0, r3
 80132aa:	370c      	adds	r7, #12
 80132ac:	46bd      	mov	sp, r7
 80132ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b2:	4770      	bx	lr

080132b4 <lv_color_mix>:
{
 80132b4:	b480      	push	{r7}
 80132b6:	b087      	sub	sp, #28
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	60f8      	str	r0, [r7, #12]
 80132bc:	60b9      	str	r1, [r7, #8]
 80132be:	4613      	mov	r3, r2
 80132c0:	71fb      	strb	r3, [r7, #7]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80132c2:	7bbb      	ldrb	r3, [r7, #14]
 80132c4:	461a      	mov	r2, r3
 80132c6:	79fb      	ldrb	r3, [r7, #7]
 80132c8:	fb03 f202 	mul.w	r2, r3, r2
 80132cc:	7abb      	ldrb	r3, [r7, #10]
 80132ce:	4619      	mov	r1, r3
 80132d0:	79fb      	ldrb	r3, [r7, #7]
 80132d2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80132d6:	fb03 f301 	mul.w	r3, r3, r1
 80132da:	4413      	add	r3, r2
 80132dc:	461a      	mov	r2, r3
 80132de:	4613      	mov	r3, r2
 80132e0:	021b      	lsls	r3, r3, #8
 80132e2:	4413      	add	r3, r2
 80132e4:	01db      	lsls	r3, r3, #7
 80132e6:	4413      	add	r3, r2
 80132e8:	0ddb      	lsrs	r3, r3, #23
 80132ea:	b2db      	uxtb	r3, r3
 80132ec:	75bb      	strb	r3, [r7, #22]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80132ee:	7b7b      	ldrb	r3, [r7, #13]
 80132f0:	461a      	mov	r2, r3
 80132f2:	79fb      	ldrb	r3, [r7, #7]
 80132f4:	fb03 f202 	mul.w	r2, r3, r2
 80132f8:	7a7b      	ldrb	r3, [r7, #9]
 80132fa:	4619      	mov	r1, r3
 80132fc:	79fb      	ldrb	r3, [r7, #7]
 80132fe:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8013302:	fb03 f301 	mul.w	r3, r3, r1
 8013306:	4413      	add	r3, r2
 8013308:	461a      	mov	r2, r3
 801330a:	4613      	mov	r3, r2
 801330c:	021b      	lsls	r3, r3, #8
 801330e:	4413      	add	r3, r2
 8013310:	01db      	lsls	r3, r3, #7
 8013312:	4413      	add	r3, r2
 8013314:	0ddb      	lsrs	r3, r3, #23
 8013316:	b2db      	uxtb	r3, r3
 8013318:	757b      	strb	r3, [r7, #21]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801331a:	7b3b      	ldrb	r3, [r7, #12]
 801331c:	461a      	mov	r2, r3
 801331e:	79fb      	ldrb	r3, [r7, #7]
 8013320:	fb03 f202 	mul.w	r2, r3, r2
 8013324:	7a3b      	ldrb	r3, [r7, #8]
 8013326:	4619      	mov	r1, r3
 8013328:	79fb      	ldrb	r3, [r7, #7]
 801332a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801332e:	fb03 f301 	mul.w	r3, r3, r1
 8013332:	4413      	add	r3, r2
 8013334:	461a      	mov	r2, r3
 8013336:	4613      	mov	r3, r2
 8013338:	021b      	lsls	r3, r3, #8
 801333a:	4413      	add	r3, r2
 801333c:	01db      	lsls	r3, r3, #7
 801333e:	4413      	add	r3, r2
 8013340:	0ddb      	lsrs	r3, r3, #23
 8013342:	b2db      	uxtb	r3, r3
 8013344:	753b      	strb	r3, [r7, #20]
    LV_COLOR_SET_A(ret, 0xFF);
 8013346:	23ff      	movs	r3, #255	; 0xff
 8013348:	75fb      	strb	r3, [r7, #23]
    return ret;
 801334a:	697b      	ldr	r3, [r7, #20]
}
 801334c:	4618      	mov	r0, r3
 801334e:	371c      	adds	r7, #28
 8013350:	46bd      	mov	sp, r7
 8013352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013356:	4770      	bx	lr

08013358 <lv_draw_rect_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b082      	sub	sp, #8
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 8013360:	2168      	movs	r1, #104	; 0x68
 8013362:	6878      	ldr	r0, [r7, #4]
 8013364:	f009 fee1 	bl	801d12a <_lv_memset_00>
    dsc->bg_color = LV_COLOR_WHITE;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	22ff      	movs	r2, #255	; 0xff
 801336c:	711a      	strb	r2, [r3, #4]
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	22ff      	movs	r2, #255	; 0xff
 8013372:	715a      	strb	r2, [r3, #5]
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	22ff      	movs	r2, #255	; 0xff
 8013378:	719a      	strb	r2, [r3, #6]
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	22ff      	movs	r2, #255	; 0xff
 801337e:	71da      	strb	r2, [r3, #7]
    dsc->bg_grad_color = LV_COLOR_BLACK;
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	2200      	movs	r2, #0
 8013384:	721a      	strb	r2, [r3, #8]
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	2200      	movs	r2, #0
 801338a:	725a      	strb	r2, [r3, #9]
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	2200      	movs	r2, #0
 8013390:	729a      	strb	r2, [r3, #10]
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	22ff      	movs	r2, #255	; 0xff
 8013396:	72da      	strb	r2, [r3, #11]
    dsc->border_color = LV_COLOR_BLACK;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	2200      	movs	r2, #0
 801339c:	751a      	strb	r2, [r3, #20]
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	2200      	movs	r2, #0
 80133a2:	755a      	strb	r2, [r3, #21]
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	2200      	movs	r2, #0
 80133a8:	759a      	strb	r2, [r3, #22]
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	22ff      	movs	r2, #255	; 0xff
 80133ae:	75da      	strb	r2, [r3, #23]
    dsc->pattern_recolor = LV_COLOR_BLACK;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	2200      	movs	r2, #0
 80133b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	2200      	movs	r2, #0
 80133bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	2200      	movs	r2, #0
 80133c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	22ff      	movs	r2, #255	; 0xff
 80133cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    dsc->value_color = LV_COLOR_BLACK;
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	2200      	movs	r2, #0
 80133d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	2200      	movs	r2, #0
 80133dc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	2200      	movs	r2, #0
 80133e4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	22ff      	movs	r2, #255	; 0xff
 80133ec:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    dsc->shadow_color = LV_COLOR_BLACK;
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	2200      	movs	r2, #0
 80133f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	2200      	movs	r2, #0
 80133fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	2200      	movs	r2, #0
 8013404:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	22ff      	movs	r2, #255	; 0xff
 801340c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    dsc->bg_grad_color_stop = 0xFF;
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	22ff      	movs	r2, #255	; 0xff
 8013414:	821a      	strh	r2, [r3, #16]
    dsc->bg_opa = LV_OPA_COVER;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	22ff      	movs	r2, #255	; 0xff
 801341a:	749a      	strb	r2, [r3, #18]
    dsc->outline_opa = LV_OPA_COVER;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	22ff      	movs	r2, #255	; 0xff
 8013420:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    dsc->border_opa = LV_OPA_COVER;
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	22ff      	movs	r2, #255	; 0xff
 8013428:	771a      	strb	r2, [r3, #28]
    dsc->pattern_opa = LV_OPA_COVER;
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	22ff      	movs	r2, #255	; 0xff
 801342e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	4a09      	ldr	r2, [pc, #36]	; (801345c <lv_draw_rect_dsc_init+0x104>)
 8013436:	641a      	str	r2, [r3, #64]	; 0x40
    dsc->value_opa = LV_OPA_COVER;
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	22ff      	movs	r2, #255	; 0xff
 801343c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	4a06      	ldr	r2, [pc, #24]	; (801345c <lv_draw_rect_dsc_init+0x104>)
 8013444:	651a      	str	r2, [r3, #80]	; 0x50
    dsc->shadow_opa = LV_OPA_COVER;
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	22ff      	movs	r2, #255	; 0xff
 801344a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    dsc->border_side = LV_BORDER_SIDE_FULL;
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	220f      	movs	r2, #15
 8013452:	835a      	strh	r2, [r3, #26]

}
 8013454:	bf00      	nop
 8013456:	3708      	adds	r7, #8
 8013458:	46bd      	mov	sp, r7
 801345a:	bd80      	pop	{r7, pc}
 801345c:	200013e8 	.word	0x200013e8

08013460 <lv_draw_rect>:
 * @param coords the coordinates of the rectangle
 * @param mask the rectangle will be drawn only in this mask
 * @param dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_rect(const lv_area_t * coords, const lv_area_t * clip, const lv_draw_rect_dsc_t * dsc)
{
 8013460:	b580      	push	{r7, lr}
 8013462:	b084      	sub	sp, #16
 8013464:	af00      	add	r7, sp, #0
 8013466:	60f8      	str	r0, [r7, #12]
 8013468:	60b9      	str	r1, [r7, #8]
 801346a:	607a      	str	r2, [r7, #4]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 801346c:	68f8      	ldr	r0, [r7, #12]
 801346e:	f7ff ff0a 	bl	8013286 <lv_area_get_height>
 8013472:	4603      	mov	r3, r0
 8013474:	2b00      	cmp	r3, #0
 8013476:	dd24      	ble.n	80134c2 <lv_draw_rect+0x62>
 8013478:	68f8      	ldr	r0, [r7, #12]
 801347a:	f7ff feed 	bl	8013258 <lv_area_get_width>
 801347e:	4603      	mov	r3, r0
 8013480:	2b00      	cmp	r3, #0
 8013482:	dd1e      	ble.n	80134c2 <lv_draw_rect+0x62>
#if LV_USE_SHADOW
    draw_shadow(coords, clip, dsc);
 8013484:	687a      	ldr	r2, [r7, #4]
 8013486:	68b9      	ldr	r1, [r7, #8]
 8013488:	68f8      	ldr	r0, [r7, #12]
 801348a:	f000 ff08 	bl	801429e <draw_shadow>
#endif

    draw_bg(coords, clip, dsc);
 801348e:	687a      	ldr	r2, [r7, #4]
 8013490:	68b9      	ldr	r1, [r7, #8]
 8013492:	68f8      	ldr	r0, [r7, #12]
 8013494:	f000 f819 	bl	80134ca <draw_bg>

#if LV_USE_PATTERN
    draw_pattern(coords, clip, dsc);
 8013498:	687a      	ldr	r2, [r7, #4]
 801349a:	68b9      	ldr	r1, [r7, #8]
 801349c:	68f8      	ldr	r0, [r7, #12]
 801349e:	f002 fdd5 	bl	801604c <draw_pattern>
#endif
    draw_border(coords, clip, dsc);
 80134a2:	687a      	ldr	r2, [r7, #4]
 80134a4:	68b9      	ldr	r1, [r7, #8]
 80134a6:	68f8      	ldr	r0, [r7, #12]
 80134a8:	f000 fbf6 	bl	8013c98 <draw_border>

#if LV_USE_VALUE_STR
    draw_value_str(coords, clip, dsc);
 80134ac:	687a      	ldr	r2, [r7, #4]
 80134ae:	68b9      	ldr	r1, [r7, #8]
 80134b0:	68f8      	ldr	r0, [r7, #12]
 80134b2:	f002 ffe5 	bl	8016480 <draw_value_str>
#endif

#if LV_USE_OUTLINE
    draw_outline(coords, clip, dsc);
 80134b6:	687a      	ldr	r2, [r7, #4]
 80134b8:	68b9      	ldr	r1, [r7, #8]
 80134ba:	68f8      	ldr	r0, [r7, #12]
 80134bc:	f002 fd23 	bl	8015f06 <draw_outline>
 80134c0:	e000      	b.n	80134c4 <lv_draw_rect+0x64>
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 80134c2:	bf00      	nop
#endif

    LV_ASSERT_MEM_INTEGRITY();
}
 80134c4:	3710      	adds	r7, #16
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bd80      	pop	{r7, pc}

080134ca <draw_bg>:
 *   STATIC FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM static void draw_bg(const lv_area_t * coords, const lv_area_t * clip,
                                          const lv_draw_rect_dsc_t * dsc)
{
 80134ca:	b590      	push	{r4, r7, lr}
 80134cc:	b0ad      	sub	sp, #180	; 0xb4
 80134ce:	af04      	add	r7, sp, #16
 80134d0:	60f8      	str	r0, [r7, #12]
 80134d2:	60b9      	str	r1, [r7, #8]
 80134d4:	607a      	str	r2, [r7, #4]
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	7c9b      	ldrb	r3, [r3, #18]
 80134da:	2b02      	cmp	r3, #2
 80134dc:	f240 83d6 	bls.w	8013c8c <draw_bg+0x7c2>

    lv_area_t coords_bg;
    lv_area_copy(&coords_bg, coords);
 80134e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80134e4:	68f9      	ldr	r1, [r7, #12]
 80134e6:	4618      	mov	r0, r3
 80134e8:	f7ff fea8 	bl	801323c <lv_area_copy>

    /*If the border fully covers make the bg area 1px smaller to avoid artifacts on the corners*/
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80134f2:	2b01      	cmp	r3, #1
 80134f4:	dd4a      	ble.n	801358c <draw_bg+0xc2>
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	7f1b      	ldrb	r3, [r3, #28]
 80134fa:	2bfc      	cmp	r3, #252	; 0xfc
 80134fc:	d946      	bls.n	801358c <draw_bg+0xc2>
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d041      	beq.n	801358c <draw_bg+0xc2>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 8013508:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 801350c:	b29a      	uxth	r2, r3
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013514:	b29b      	uxth	r3, r3
 8013516:	109b      	asrs	r3, r3, #2
 8013518:	b29b      	uxth	r3, r3
 801351a:	f003 0301 	and.w	r3, r3, #1
 801351e:	b29b      	uxth	r3, r3
 8013520:	4413      	add	r3, r2
 8013522:	b29b      	uxth	r3, r3
 8013524:	b21b      	sxth	r3, r3
 8013526:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 801352a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801352e:	b29a      	uxth	r2, r3
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013536:	b29b      	uxth	r3, r3
 8013538:	105b      	asrs	r3, r3, #1
 801353a:	b29b      	uxth	r3, r3
 801353c:	f003 0301 	and.w	r3, r3, #1
 8013540:	b29b      	uxth	r3, r3
 8013542:	4413      	add	r3, r2
 8013544:	b29b      	uxth	r3, r3
 8013546:	b21b      	sxth	r3, r3
 8013548:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 801354c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013550:	b29a      	uxth	r2, r3
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013558:	b29b      	uxth	r3, r3
 801355a:	10db      	asrs	r3, r3, #3
 801355c:	b29b      	uxth	r3, r3
 801355e:	f003 0301 	and.w	r3, r3, #1
 8013562:	b29b      	uxth	r3, r3
 8013564:	1ad3      	subs	r3, r2, r3
 8013566:	b29b      	uxth	r3, r3
 8013568:	b21b      	sxth	r3, r3
 801356a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 801356e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013572:	b29a      	uxth	r2, r3
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801357a:	b29b      	uxth	r3, r3
 801357c:	f003 0301 	and.w	r3, r3, #1
 8013580:	b29b      	uxth	r3, r3
 8013582:	1ad3      	subs	r3, r2, r3
 8013584:	b29b      	uxth	r3, r3
 8013586:	b21b      	sxth	r3, r3
 8013588:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }

    lv_opa_t opa = dsc->bg_opa;
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	7c9b      	ldrb	r3, [r3, #18]
 8013590:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8013594:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8013598:	2bfd      	cmp	r3, #253	; 0xfd
 801359a:	d902      	bls.n	80135a2 <draw_bg+0xd8>
 801359c:	23ff      	movs	r3, #255	; 0xff
 801359e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 80135a2:	f7f6 fec1 	bl	800a328 <_lv_refr_get_disp_refreshing>
 80135a6:	67b8      	str	r0, [r7, #120]	; 0x78
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80135a8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80135aa:	f006 ffad 	bl	801a508 <lv_disp_get_buf>
 80135ae:	6778      	str	r0, [r7, #116]	; 0x74

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
 80135b0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80135b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80135b8:	68ba      	ldr	r2, [r7, #8]
 80135ba:	4618      	mov	r0, r3
 80135bc:	f007 fc64 	bl	801ae88 <_lv_area_intersect>
 80135c0:	4603      	mov	r3, r0
 80135c2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    if(is_common == false) return;
 80135c6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80135ca:	f083 0301 	eor.w	r3, r3, #1
 80135ce:	b2db      	uxtb	r3, r3
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	f040 835d 	bne.w	8013c90 <draw_bg+0x7c6>

    const lv_area_t * disp_area = &vdb->area;
 80135d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80135d8:	3310      	adds	r3, #16
 80135da:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 80135dc:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80135e0:	b29a      	uxth	r2, r3
 80135e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80135e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80135e8:	b29b      	uxth	r3, r3
 80135ea:	1ad3      	subs	r3, r2, r3
 80135ec:	b29b      	uxth	r3, r3
 80135ee:	b21b      	sxth	r3, r3
 80135f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    draw_area.y1 -= disp_area->y1;
 80135f4:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80135f8:	b29a      	uxth	r2, r3
 80135fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80135fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013600:	b29b      	uxth	r3, r3
 8013602:	1ad3      	subs	r3, r2, r3
 8013604:	b29b      	uxth	r3, r3
 8013606:	b21b      	sxth	r3, r3
 8013608:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    draw_area.x2 -= disp_area->x1;
 801360c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8013610:	b29a      	uxth	r2, r3
 8013612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013618:	b29b      	uxth	r3, r3
 801361a:	1ad3      	subs	r3, r2, r3
 801361c:	b29b      	uxth	r3, r3
 801361e:	b21b      	sxth	r3, r3
 8013620:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    draw_area.y2 -= disp_area->y1;
 8013624:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8013628:	b29a      	uxth	r2, r3
 801362a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801362c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013630:	b29b      	uxth	r3, r3
 8013632:	1ad3      	subs	r3, r2, r3
 8013634:	b29b      	uxth	r3, r3
 8013636:	b21b      	sxth	r3, r3
 8013638:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    int32_t draw_area_w = lv_area_get_width(&draw_area);
 801363c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013640:	4618      	mov	r0, r3
 8013642:	f7ff fe09 	bl	8013258 <lv_area_get_width>
 8013646:	4603      	mov	r3, r0
 8013648:	66bb      	str	r3, [r7, #104]	; 0x68

    /*Create a mask if there is a radius*/
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 801364a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801364c:	4618      	mov	r0, r3
 801364e:	f009 f963 	bl	801c918 <_lv_mem_buf_get>
 8013652:	6678      	str	r0, [r7, #100]	; 0x64

    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	7b1b      	ldrb	r3, [r3, #12]
 8013658:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	685a      	ldr	r2, [r3, #4]
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	689b      	ldr	r3, [r3, #8]
 8013664:	429a      	cmp	r2, r3
 8013666:	d102      	bne.n	801366e <draw_bg+0x1a4>
 8013668:	2300      	movs	r3, #0
 801366a:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e

    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
 801366e:	f7fe fb03 	bl	8011c78 <lv_draw_mask_get_cnt>
 8013672:	4603      	mov	r3, r0
 8013674:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    bool simple_mode = true;
 8013678:	2301      	movs	r3, #1
 801367a:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
    if(other_mask_cnt) simple_mode = false;
 801367e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8013682:	2b00      	cmp	r3, #0
 8013684:	d003      	beq.n	801368e <draw_bg+0x1c4>
 8013686:	2300      	movs	r3, #0
 8013688:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 801368c:	e006      	b.n	801369c <draw_bg+0x1d2>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
 801368e:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8013692:	2b02      	cmp	r3, #2
 8013694:	d102      	bne.n	801369c <draw_bg+0x1d2>
 8013696:	2300      	movs	r3, #0
 8013698:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d

    int16_t mask_rout_id = LV_MASK_ID_INV;
 801369c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80136a0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

    int32_t coords_w = lv_area_get_width(&coords_bg);
 80136a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80136a8:	4618      	mov	r0, r3
 80136aa:	f7ff fdd5 	bl	8013258 <lv_area_get_width>
 80136ae:	4603      	mov	r3, r0
 80136b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    int32_t coords_h = lv_area_get_height(&coords_bg);
 80136b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80136b6:	4618      	mov	r0, r3
 80136b8:	f7ff fde5 	bl	8013286 <lv_area_get_height>
 80136bc:	4603      	mov	r3, r0
 80136be:	65bb      	str	r3, [r7, #88]	; 0x58

    /*Get the real radius*/
    int32_t rout = dsc->radius;
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80136c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
 80136ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80136cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80136ce:	4293      	cmp	r3, r2
 80136d0:	bfa8      	it	ge
 80136d2:	4613      	movge	r3, r2
 80136d4:	657b      	str	r3, [r7, #84]	; 0x54
    if(rout > short_side >> 1) rout = short_side >> 1;
 80136d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136d8:	105b      	asrs	r3, r3, #1
 80136da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80136de:	429a      	cmp	r2, r3
 80136e0:	dd03      	ble.n	80136ea <draw_bg+0x220>
 80136e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136e4:	105b      	asrs	r3, r3, #1
 80136e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /*Most simple case: just a plain rectangle*/
    if(simple_mode && rout == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 80136ea:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d018      	beq.n	8013724 <draw_bg+0x25a>
 80136f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d114      	bne.n	8013724 <draw_bg+0x25a>
 80136fa:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d110      	bne.n	8013724 <draw_bg+0x25a>
        _lv_blend_fill(clip, &coords_bg,
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	7cdb      	ldrb	r3, [r3, #19]
 8013706:	687a      	ldr	r2, [r7, #4]
 8013708:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801370c:	9302      	str	r3, [sp, #8]
 801370e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8013712:	9301      	str	r3, [sp, #4]
 8013714:	2301      	movs	r3, #1
 8013716:	9300      	str	r3, [sp, #0]
 8013718:	2300      	movs	r3, #0
 801371a:	6852      	ldr	r2, [r2, #4]
 801371c:	68b8      	ldr	r0, [r7, #8]
 801371e:	f7f8 ffe1 	bl	800c6e4 <_lv_blend_fill>
 8013722:	e2aa      	b.n	8013c7a <draw_bg+0x7b0>
                       dsc->bg_blend_mode);
    }
    /*More complex case: there is a radius, gradient or other mask.*/
    else {
        lv_draw_mask_radius_param_t mask_rout_param;
        if(rout > 0) {
 8013724:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013728:	2b00      	cmp	r3, #0
 801372a:	dd12      	ble.n	8013752 <draw_bg+0x288>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
 801372c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013730:	b21a      	sxth	r2, r3
 8013732:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8013736:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801373a:	2300      	movs	r3, #0
 801373c:	f7fe fbe8 	bl	8011f10 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 8013740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013744:	2100      	movs	r1, #0
 8013746:	4618      	mov	r0, r3
 8013748:	f7fe f9c8 	bl	8011adc <lv_draw_mask_add>
 801374c:	4603      	mov	r3, r0
 801374e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
        }

        /*Draw the background line by line*/
        int32_t h;
        lv_draw_mask_res_t mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 8013752:	2301      	movs	r3, #1
 8013754:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        lv_color_t grad_color = dsc->bg_color;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	685b      	ldr	r3, [r3, #4]
 801375c:	623b      	str	r3, [r7, #32]

        lv_color_t * grad_map = NULL;
 801375e:	2300      	movs	r3, #0
 8013760:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        /*In case of horizontal gradient pre-compute a line with a gradient*/
        if(grad_dir == LV_GRAD_DIR_HOR) {
 8013764:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8013768:	2b02      	cmp	r3, #2
 801376a:	d125      	bne.n	80137b8 <draw_bg+0x2ee>
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
 801376c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801376e:	009b      	lsls	r3, r3, #2
 8013770:	4618      	mov	r0, r3
 8013772:	f009 f8d1 	bl	801c918 <_lv_mem_buf_get>
 8013776:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

            int32_t i;
            for(i = 0; i < coords_w; i++) {
 801377a:	2300      	movs	r3, #0
 801377c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013780:	e015      	b.n	80137ae <draw_bg+0x2e4>
                grad_map[i] = grad_get(dsc, coords_w, i);
 8013782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013784:	b219      	sxth	r1, r3
 8013786:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801378a:	b218      	sxth	r0, r3
 801378c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013790:	009b      	lsls	r3, r3, #2
 8013792:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013796:	18d4      	adds	r4, r2, r3
 8013798:	4602      	mov	r2, r0
 801379a:	6878      	ldr	r0, [r7, #4]
 801379c:	f000 fd28 	bl	80141f0 <grad_get>
 80137a0:	4603      	mov	r3, r0
 80137a2:	6023      	str	r3, [r4, #0]
            for(i = 0; i < coords_w; i++) {
 80137a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80137a8:	3301      	adds	r3, #1
 80137aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80137ae:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80137b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80137b4:	429a      	cmp	r2, r3
 80137b6:	dbe4      	blt.n	8013782 <draw_bg+0x2b8>
            }
        }

        bool split = false;
 80137b8:	2300      	movs	r3, #0
 80137ba:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
 80137be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80137c2:	4618      	mov	r0, r3
 80137c4:	f7ff fd48 	bl	8013258 <lv_area_get_width>
 80137c8:	4603      	mov	r3, r0
 80137ca:	461a      	mov	r2, r3
 80137cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80137d0:	005b      	lsls	r3, r3, #1
 80137d2:	1ad3      	subs	r3, r2, r3
 80137d4:	2b32      	cmp	r3, #50	; 0x32
 80137d6:	dd02      	ble.n	80137de <draw_bg+0x314>
 80137d8:	2301      	movs	r3, #1
 80137da:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

        lv_opa_t opa2;

        lv_area_t fill_area;
        fill_area.x1 = coords_bg.x1;
 80137de:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80137e2:	833b      	strh	r3, [r7, #24]
        fill_area.x2 = coords_bg.x2;
 80137e4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80137e8:	83bb      	strh	r3, [r7, #28]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 80137ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80137ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80137f0:	b29a      	uxth	r2, r3
 80137f2:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80137f6:	b29b      	uxth	r3, r3
 80137f8:	4413      	add	r3, r2
 80137fa:	b29b      	uxth	r3, r3
 80137fc:	b21b      	sxth	r3, r3
 80137fe:	837b      	strh	r3, [r7, #26]
        fill_area.y2 = fill_area.y1;
 8013800:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8013804:	83fb      	strh	r3, [r7, #30]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8013806:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801380a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801380e:	e18c      	b.n	8013b2a <draw_bg+0x660>
            int32_t y = h + vdb->area.y1;
 8013810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013812:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8013816:	461a      	mov	r2, r3
 8013818:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801381c:	4413      	add	r3, r2
 801381e:	653b      	str	r3, [r7, #80]	; 0x50

            opa2 = opa;
 8013820:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8013824:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

            /*In not corner areas apply the mask only if required*/
            if(y > coords_bg.y1 + rout + 1 &&
 8013828:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801382c:	461a      	mov	r2, r3
 801382e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013832:	4413      	add	r3, r2
 8013834:	3301      	adds	r3, #1
 8013836:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013838:	429a      	cmp	r2, r3
 801383a:	dd37      	ble.n	80138ac <draw_bg+0x3e2>
               y < coords_bg.y2 - rout - 1) {
 801383c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013840:	461a      	mov	r2, r3
 8013842:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013846:	1ad3      	subs	r3, r2, r3
 8013848:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
 801384a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801384c:	429a      	cmp	r2, r3
 801384e:	da2d      	bge.n	80138ac <draw_bg+0x3e2>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 8013850:	2301      	movs	r3, #1
 8013852:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                if(simple_mode == false) {
 8013856:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 801385a:	f083 0301 	eor.w	r3, r3, #1
 801385e:	b2db      	uxtb	r3, r3
 8013860:	2b00      	cmp	r3, #0
 8013862:	d046      	beq.n	80138f2 <draw_bg+0x428>
                    _lv_memset(mask_buf, opa, draw_area_w);
 8013864:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013866:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 801386a:	4619      	mov	r1, r3
 801386c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801386e:	f009 fbcf 	bl	801d010 <_lv_memset>
                    mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 8013872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013874:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013878:	b29a      	uxth	r2, r3
 801387a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 801387e:	b29b      	uxth	r3, r3
 8013880:	4413      	add	r3, r2
 8013882:	b29b      	uxth	r3, r3
 8013884:	b219      	sxth	r1, r3
 8013886:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013888:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801388c:	b29a      	uxth	r2, r3
 801388e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013892:	b29b      	uxth	r3, r3
 8013894:	4413      	add	r3, r2
 8013896:	b29b      	uxth	r3, r3
 8013898:	b21a      	sxth	r2, r3
 801389a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801389c:	b21b      	sxth	r3, r3
 801389e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80138a0:	f7fe f94e 	bl	8011b40 <lv_draw_mask_apply>
 80138a4:	4603      	mov	r3, r0
 80138a6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                if(simple_mode == false) {
 80138aa:	e022      	b.n	80138f2 <draw_bg+0x428>
                }
            }
            /*In corner areas apply the mask anyway*/
            else {
                _lv_memset(mask_buf, opa, draw_area_w);
 80138ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80138ae:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80138b2:	4619      	mov	r1, r3
 80138b4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80138b6:	f009 fbab 	bl	801d010 <_lv_memset>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 80138ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80138bc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80138c0:	b29a      	uxth	r2, r3
 80138c2:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80138c6:	b29b      	uxth	r3, r3
 80138c8:	4413      	add	r3, r2
 80138ca:	b29b      	uxth	r3, r3
 80138cc:	b219      	sxth	r1, r3
 80138ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80138d0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80138d4:	b29a      	uxth	r2, r3
 80138d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80138da:	b29b      	uxth	r3, r3
 80138dc:	4413      	add	r3, r2
 80138de:	b29b      	uxth	r3, r3
 80138e0:	b21a      	sxth	r2, r3
 80138e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80138e4:	b21b      	sxth	r3, r3
 80138e6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80138e8:	f7fe f92a 	bl	8011b40 <lv_draw_mask_apply>
 80138ec:	4603      	mov	r3, r0
 80138ee:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            }

            /*If mask will taken into account its base opacity was already set by memset above*/
            if(mask_res == LV_DRAW_MASK_RES_CHANGED) {
 80138f2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80138f6:	2b02      	cmp	r3, #2
 80138f8:	d102      	bne.n	8013900 <draw_bg+0x436>
                opa2 = LV_OPA_COVER;
 80138fa:	23ff      	movs	r3, #255	; 0xff
 80138fc:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
            }

            /*Get the current line color*/
            if(grad_dir == LV_GRAD_DIR_VER) {
 8013900:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8013904:	2b01      	cmp	r3, #1
 8013906:	d114      	bne.n	8013932 <draw_bg+0x468>
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
 8013908:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801390c:	4618      	mov	r0, r3
 801390e:	f7ff fcba 	bl	8013286 <lv_area_get_height>
 8013912:	4603      	mov	r3, r0
 8013914:	4619      	mov	r1, r3
 8013916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013918:	b29a      	uxth	r2, r3
 801391a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801391e:	b29b      	uxth	r3, r3
 8013920:	1ad3      	subs	r3, r2, r3
 8013922:	b29b      	uxth	r3, r3
 8013924:	b21b      	sxth	r3, r3
 8013926:	461a      	mov	r2, r3
 8013928:	6878      	ldr	r0, [r7, #4]
 801392a:	f000 fc61 	bl	80141f0 <grad_get>
 801392e:	4603      	mov	r3, r0
 8013930:	623b      	str	r3, [r7, #32]
            }

            /* If there is not other mask and drawing the corner area split the drawing to corner and middle areas
             * because it the middle mask shouldn't be taken into account (therefore its faster)*/
            if(simple_mode && split &&
 8013932:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8013936:	2b00      	cmp	r3, #0
 8013938:	f000 809e 	beq.w	8013a78 <draw_bg+0x5ae>
 801393c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013940:	2b00      	cmp	r3, #0
 8013942:	f000 8099 	beq.w	8013a78 <draw_bg+0x5ae>
               (y < coords_bg.y1 + rout + 1 ||
 8013946:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801394a:	461a      	mov	r2, r3
 801394c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013950:	4413      	add	r3, r2
 8013952:	3301      	adds	r3, #1
            if(simple_mode && split &&
 8013954:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013956:	429a      	cmp	r2, r3
 8013958:	db0a      	blt.n	8013970 <draw_bg+0x4a6>
                y > coords_bg.y2 - rout - 1)) {
 801395a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801395e:	461a      	mov	r2, r3
 8013960:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013964:	1ad3      	subs	r3, r2, r3
 8013966:	3b01      	subs	r3, #1
               (y < coords_bg.y1 + rout + 1 ||
 8013968:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801396a:	429a      	cmp	r2, r3
 801396c:	f340 8084 	ble.w	8013a78 <draw_bg+0x5ae>

                /*Left part*/
                lv_area_t fill_area2;
                fill_area2.x1 = coords_bg.x1;
 8013970:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8013974:	823b      	strh	r3, [r7, #16]
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 8013976:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 801397a:	b29a      	uxth	r2, r3
 801397c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013980:	b29b      	uxth	r3, r3
 8013982:	4413      	add	r3, r2
 8013984:	b29b      	uxth	r3, r3
 8013986:	3b01      	subs	r3, #1
 8013988:	b29b      	uxth	r3, r3
 801398a:	b21b      	sxth	r3, r3
 801398c:	82bb      	strh	r3, [r7, #20]
                fill_area2.y1 = fill_area.y1;
 801398e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8013992:	827b      	strh	r3, [r7, #18]
                fill_area2.y2 = fill_area.y2;
 8013994:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013998:	82fb      	strh	r3, [r7, #22]

                _lv_blend_fill(clip, &fill_area2,
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	7cdb      	ldrb	r3, [r3, #19]
 801399e:	f107 0110 	add.w	r1, r7, #16
 80139a2:	9302      	str	r3, [sp, #8]
 80139a4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80139a8:	9301      	str	r3, [sp, #4]
 80139aa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80139ae:	9300      	str	r3, [sp, #0]
 80139b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80139b2:	6a3a      	ldr	r2, [r7, #32]
 80139b4:	68b8      	ldr	r0, [r7, #8]
 80139b6:	f7f8 fe95 	bl	800c6e4 <_lv_blend_fill>
                               grad_color, mask_buf, mask_res, opa2, dsc->bg_blend_mode);

                /*Center part*/
                if(grad_dir == LV_GRAD_DIR_VER) {
 80139ba:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80139be:	2b01      	cmp	r3, #1
 80139c0:	d122      	bne.n	8013a08 <draw_bg+0x53e>
                    fill_area2.x1 = coords_bg.x1 + rout;
 80139c2:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80139c6:	b29a      	uxth	r2, r3
 80139c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80139cc:	b29b      	uxth	r3, r3
 80139ce:	4413      	add	r3, r2
 80139d0:	b29b      	uxth	r3, r3
 80139d2:	b21b      	sxth	r3, r3
 80139d4:	823b      	strh	r3, [r7, #16]
                    fill_area2.x2 = coords_bg.x2 - rout;
 80139d6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80139da:	b29a      	uxth	r2, r3
 80139dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80139e0:	b29b      	uxth	r3, r3
 80139e2:	1ad3      	subs	r3, r2, r3
 80139e4:	b29b      	uxth	r3, r3
 80139e6:	b21b      	sxth	r3, r3
 80139e8:	82bb      	strh	r3, [r7, #20]
                    _lv_blend_fill(clip, &fill_area2,
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	7cdb      	ldrb	r3, [r3, #19]
 80139ee:	f107 0110 	add.w	r1, r7, #16
 80139f2:	9302      	str	r3, [sp, #8]
 80139f4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80139f8:	9301      	str	r3, [sp, #4]
 80139fa:	2301      	movs	r3, #1
 80139fc:	9300      	str	r3, [sp, #0]
 80139fe:	2300      	movs	r3, #0
 8013a00:	6a3a      	ldr	r2, [r7, #32]
 8013a02:	68b8      	ldr	r0, [r7, #8]
 8013a04:	f7f8 fe6e 	bl	800c6e4 <_lv_blend_fill>
                                   grad_color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, dsc->bg_blend_mode);
                }

                /*Right part*/
                fill_area2.x1 = coords_bg.x2 - rout + 1;
 8013a08:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013a0c:	b29a      	uxth	r2, r3
 8013a0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013a12:	b29b      	uxth	r3, r3
 8013a14:	1ad3      	subs	r3, r2, r3
 8013a16:	b29b      	uxth	r3, r3
 8013a18:	3301      	adds	r3, #1
 8013a1a:	b29b      	uxth	r3, r3
 8013a1c:	b21b      	sxth	r3, r3
 8013a1e:	823b      	strh	r3, [r7, #16]
                fill_area2.x2 = coords_bg.x2;
 8013a20:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013a24:	82bb      	strh	r3, [r7, #20]

                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 8013a26:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013a2a:	461a      	mov	r2, r3
 8013a2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013a30:	1ad3      	subs	r3, r2, r3
 8013a32:	1c5a      	adds	r2, r3, #1
 8013a34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013a36:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013a3a:	4619      	mov	r1, r3
 8013a3c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8013a40:	440b      	add	r3, r1
 8013a42:	1ad3      	subs	r3, r2, r3
 8013a44:	67fb      	str	r3, [r7, #124]	; 0x7c
                if(mask_ofs < 0) mask_ofs = 0;
 8013a46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	da01      	bge.n	8013a50 <draw_bg+0x586>
 8013a4c:	2300      	movs	r3, #0
 8013a4e:	67fb      	str	r3, [r7, #124]	; 0x7c
                _lv_blend_fill(clip, &fill_area2,
 8013a50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013a52:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013a54:	441a      	add	r2, r3
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	7cdb      	ldrb	r3, [r3, #19]
 8013a5a:	f107 0110 	add.w	r1, r7, #16
 8013a5e:	9302      	str	r3, [sp, #8]
 8013a60:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013a64:	9301      	str	r3, [sp, #4]
 8013a66:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8013a6a:	9300      	str	r3, [sp, #0]
 8013a6c:	4613      	mov	r3, r2
 8013a6e:	6a3a      	ldr	r2, [r7, #32]
 8013a70:	68b8      	ldr	r0, [r7, #8]
 8013a72:	f7f8 fe37 	bl	800c6e4 <_lv_blend_fill>
                y > coords_bg.y2 - rout - 1)) {
 8013a76:	e045      	b.n	8013b04 <draw_bg+0x63a>
                               grad_color, mask_buf + mask_ofs, mask_res, opa2, dsc->bg_blend_mode);

            }
            else {
                if(grad_dir == LV_GRAD_DIR_HOR) {
 8013a78:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8013a7c:	2b02      	cmp	r3, #2
 8013a7e:	d111      	bne.n	8013aa4 <draw_bg+0x5da>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	7cdb      	ldrb	r3, [r3, #19]
 8013a84:	f107 0118 	add.w	r1, r7, #24
 8013a88:	9302      	str	r3, [sp, #8]
 8013a8a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013a8e:	9301      	str	r3, [sp, #4]
 8013a90:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8013a94:	9300      	str	r3, [sp, #0]
 8013a96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013a98:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013a9c:	68b8      	ldr	r0, [r7, #8]
 8013a9e:	f7f8 fef2 	bl	800c886 <_lv_blend_map>
 8013aa2:	e02f      	b.n	8013b04 <draw_bg+0x63a>
                }
                else if(grad_dir == LV_GRAD_DIR_VER) {
 8013aa4:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8013aa8:	2b01      	cmp	r3, #1
 8013aaa:	d110      	bne.n	8013ace <draw_bg+0x604>
                    _lv_blend_fill(clip, &fill_area,
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	7cdb      	ldrb	r3, [r3, #19]
 8013ab0:	f107 0118 	add.w	r1, r7, #24
 8013ab4:	9302      	str	r3, [sp, #8]
 8013ab6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013aba:	9301      	str	r3, [sp, #4]
 8013abc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8013ac0:	9300      	str	r3, [sp, #0]
 8013ac2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013ac4:	6a3a      	ldr	r2, [r7, #32]
 8013ac6:	68b8      	ldr	r0, [r7, #8]
 8013ac8:	f7f8 fe0c 	bl	800c6e4 <_lv_blend_fill>
 8013acc:	e01a      	b.n	8013b04 <draw_bg+0x63a>
                                   grad_color, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
                }
                else if(other_mask_cnt != 0 || !split) {
 8013ace:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d106      	bne.n	8013ae4 <draw_bg+0x61a>
 8013ad6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013ada:	f083 0301 	eor.w	r3, r3, #1
 8013ade:	b2db      	uxtb	r3, r3
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d00f      	beq.n	8013b04 <draw_bg+0x63a>
                    _lv_blend_fill(clip, &fill_area,
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	7cdb      	ldrb	r3, [r3, #19]
 8013ae8:	f107 0118 	add.w	r1, r7, #24
 8013aec:	9302      	str	r3, [sp, #8]
 8013aee:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8013af2:	9301      	str	r3, [sp, #4]
 8013af4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8013af8:	9300      	str	r3, [sp, #0]
 8013afa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013afc:	6a3a      	ldr	r2, [r7, #32]
 8013afe:	68b8      	ldr	r0, [r7, #8]
 8013b00:	f7f8 fdf0 	bl	800c6e4 <_lv_blend_fill>
                                   grad_color, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
                }
            }
            fill_area.y1++;
 8013b04:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8013b08:	b29b      	uxth	r3, r3
 8013b0a:	3301      	adds	r3, #1
 8013b0c:	b29b      	uxth	r3, r3
 8013b0e:	b21b      	sxth	r3, r3
 8013b10:	837b      	strh	r3, [r7, #26]
            fill_area.y2++;
 8013b12:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013b16:	b29b      	uxth	r3, r3
 8013b18:	3301      	adds	r3, #1
 8013b1a:	b29b      	uxth	r3, r3
 8013b1c:	b21b      	sxth	r3, r3
 8013b1e:	83fb      	strh	r3, [r7, #30]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8013b20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013b24:	3301      	adds	r3, #1
 8013b26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013b2a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8013b2e:	461a      	mov	r2, r3
 8013b30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013b34:	4293      	cmp	r3, r2
 8013b36:	f77f ae6b 	ble.w	8013810 <draw_bg+0x346>
        }

        if(grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
 8013b3a:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	f040 8093 	bne.w	8013c6a <draw_bg+0x7a0>
 8013b44:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	f040 808e 	bne.w	8013c6a <draw_bg+0x7a0>
 8013b4e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	f000 8089 	beq.w	8013c6a <draw_bg+0x7a0>
            /*Central part*/
            fill_area.x1 = coords_bg.x1 + rout;
 8013b58:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8013b5c:	b29a      	uxth	r2, r3
 8013b5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013b62:	b29b      	uxth	r3, r3
 8013b64:	4413      	add	r3, r2
 8013b66:	b29b      	uxth	r3, r3
 8013b68:	b21b      	sxth	r3, r3
 8013b6a:	833b      	strh	r3, [r7, #24]
            fill_area.x2 = coords_bg.x2 - rout;
 8013b6c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013b70:	b29a      	uxth	r2, r3
 8013b72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013b76:	b29b      	uxth	r3, r3
 8013b78:	1ad3      	subs	r3, r2, r3
 8013b7a:	b29b      	uxth	r3, r3
 8013b7c:	b21b      	sxth	r3, r3
 8013b7e:	83bb      	strh	r3, [r7, #28]
            fill_area.y1 = coords_bg.y1;
 8013b80:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8013b84:	837b      	strh	r3, [r7, #26]
            fill_area.y2 = coords_bg.y1 + rout;
 8013b86:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8013b8a:	b29a      	uxth	r2, r3
 8013b8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013b90:	b29b      	uxth	r3, r3
 8013b92:	4413      	add	r3, r2
 8013b94:	b29b      	uxth	r3, r3
 8013b96:	b21b      	sxth	r3, r3
 8013b98:	83fb      	strh	r3, [r7, #30]

            _lv_blend_fill(clip, &fill_area,
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	7cdb      	ldrb	r3, [r3, #19]
 8013b9e:	687a      	ldr	r2, [r7, #4]
 8013ba0:	f107 0118 	add.w	r1, r7, #24
 8013ba4:	9302      	str	r3, [sp, #8]
 8013ba6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8013baa:	9301      	str	r3, [sp, #4]
 8013bac:	2301      	movs	r3, #1
 8013bae:	9300      	str	r3, [sp, #0]
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	6852      	ldr	r2, [r2, #4]
 8013bb4:	68b8      	ldr	r0, [r7, #8]
 8013bb6:	f7f8 fd95 	bl	800c6e4 <_lv_blend_fill>
                           dsc->bg_color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, dsc->bg_blend_mode);

            fill_area.y1 = coords_bg.y2 - rout;
 8013bba:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013bbe:	b29a      	uxth	r2, r3
 8013bc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013bc4:	b29b      	uxth	r3, r3
 8013bc6:	1ad3      	subs	r3, r2, r3
 8013bc8:	b29b      	uxth	r3, r3
 8013bca:	b21b      	sxth	r3, r3
 8013bcc:	837b      	strh	r3, [r7, #26]
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 8013bce:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8013bd2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013bd6:	429a      	cmp	r2, r3
 8013bd8:	dc06      	bgt.n	8013be8 <draw_bg+0x71e>
 8013bda:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013bde:	b29b      	uxth	r3, r3
 8013be0:	3301      	adds	r3, #1
 8013be2:	b29b      	uxth	r3, r3
 8013be4:	b21b      	sxth	r3, r3
 8013be6:	837b      	strh	r3, [r7, #26]
            fill_area.y2 = coords_bg.y2;
 8013be8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013bec:	83fb      	strh	r3, [r7, #30]

            _lv_blend_fill(clip, &fill_area,
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	7cdb      	ldrb	r3, [r3, #19]
 8013bf2:	687a      	ldr	r2, [r7, #4]
 8013bf4:	f107 0118 	add.w	r1, r7, #24
 8013bf8:	9302      	str	r3, [sp, #8]
 8013bfa:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8013bfe:	9301      	str	r3, [sp, #4]
 8013c00:	2301      	movs	r3, #1
 8013c02:	9300      	str	r3, [sp, #0]
 8013c04:	2300      	movs	r3, #0
 8013c06:	6852      	ldr	r2, [r2, #4]
 8013c08:	68b8      	ldr	r0, [r7, #8]
 8013c0a:	f7f8 fd6b 	bl	800c6e4 <_lv_blend_fill>
                           dsc->bg_color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, dsc->bg_blend_mode);

            fill_area.x1 = coords_bg.x1;
 8013c0e:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8013c12:	833b      	strh	r3, [r7, #24]
            fill_area.x2 = coords_bg.x2;
 8013c14:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8013c18:	83bb      	strh	r3, [r7, #28]
            fill_area.y1 = coords_bg.y1 + rout + 1;
 8013c1a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8013c1e:	b29a      	uxth	r2, r3
 8013c20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013c24:	b29b      	uxth	r3, r3
 8013c26:	4413      	add	r3, r2
 8013c28:	b29b      	uxth	r3, r3
 8013c2a:	3301      	adds	r3, #1
 8013c2c:	b29b      	uxth	r3, r3
 8013c2e:	b21b      	sxth	r3, r3
 8013c30:	837b      	strh	r3, [r7, #26]
            fill_area.y2 = coords_bg.y2 - rout - 1;
 8013c32:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c36:	b29a      	uxth	r2, r3
 8013c38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013c3c:	b29b      	uxth	r3, r3
 8013c3e:	1ad3      	subs	r3, r2, r3
 8013c40:	b29b      	uxth	r3, r3
 8013c42:	3b01      	subs	r3, #1
 8013c44:	b29b      	uxth	r3, r3
 8013c46:	b21b      	sxth	r3, r3
 8013c48:	83fb      	strh	r3, [r7, #30]

            _lv_blend_fill(clip, &fill_area,
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	7cdb      	ldrb	r3, [r3, #19]
 8013c4e:	687a      	ldr	r2, [r7, #4]
 8013c50:	f107 0118 	add.w	r1, r7, #24
 8013c54:	9302      	str	r3, [sp, #8]
 8013c56:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8013c5a:	9301      	str	r3, [sp, #4]
 8013c5c:	2301      	movs	r3, #1
 8013c5e:	9300      	str	r3, [sp, #0]
 8013c60:	2300      	movs	r3, #0
 8013c62:	6852      	ldr	r2, [r2, #4]
 8013c64:	68b8      	ldr	r0, [r7, #8]
 8013c66:	f7f8 fd3d 	bl	800c6e4 <_lv_blend_fill>
                           dsc->bg_color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, dsc->bg_blend_mode);

        }

        if(grad_map) _lv_mem_buf_release(grad_map);
 8013c6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d003      	beq.n	8013c7a <draw_bg+0x7b0>
 8013c72:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8013c76:	f008 ff2d 	bl	801cad4 <_lv_mem_buf_release>
    }

    lv_draw_mask_remove_id(mask_rout_id);
 8013c7a:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8013c7e:	4618      	mov	r0, r3
 8013c80:	f7fd ffa2 	bl	8011bc8 <lv_draw_mask_remove_id>

    _lv_mem_buf_release(mask_buf);
 8013c84:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8013c86:	f008 ff25 	bl	801cad4 <_lv_mem_buf_release>
 8013c8a:	e002      	b.n	8013c92 <draw_bg+0x7c8>
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 8013c8c:	bf00      	nop
 8013c8e:	e000      	b.n	8013c92 <draw_bg+0x7c8>
    if(is_common == false) return;
 8013c90:	bf00      	nop

}
 8013c92:	37a4      	adds	r7, #164	; 0xa4
 8013c94:	46bd      	mov	sp, r7
 8013c96:	bd90      	pop	{r4, r7, pc}

08013c98 <draw_border>:

LV_ATTRIBUTE_FAST_MEM static void draw_border(const lv_area_t * coords, const lv_area_t * clip,
                                              const lv_draw_rect_dsc_t * dsc)
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b0b0      	sub	sp, #192	; 0xc0
 8013c9c:	af04      	add	r7, sp, #16
 8013c9e:	60f8      	str	r0, [r7, #12]
 8013ca0:	60b9      	str	r1, [r7, #8]
 8013ca2:	607a      	str	r2, [r7, #4]
    if(dsc->border_opa <= LV_OPA_MIN) return;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	7f1b      	ldrb	r3, [r3, #28]
 8013ca8:	2b02      	cmp	r3, #2
 8013caa:	f240 8295 	bls.w	80141d8 <draw_border+0x540>
    if(dsc->border_width == 0) return;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	f000 8291 	beq.w	80141dc <draw_border+0x544>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	f000 828d 	beq.w	80141e0 <draw_border+0x548>
    if(dsc->border_post) return;
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	7f9b      	ldrb	r3, [r3, #30]
 8013cca:	f003 0301 	and.w	r3, r3, #1
 8013cce:	b2db      	uxtb	r3, r3
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	f040 8287 	bne.w	80141e4 <draw_border+0x54c>

    int32_t coords_w = lv_area_get_width(coords);
 8013cd6:	68f8      	ldr	r0, [r7, #12]
 8013cd8:	f7ff fabe 	bl	8013258 <lv_area_get_width>
 8013cdc:	4603      	mov	r3, r0
 8013cde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    int32_t coords_h = lv_area_get_height(coords);
 8013ce2:	68f8      	ldr	r0, [r7, #12]
 8013ce4:	f7ff facf 	bl	8013286 <lv_area_get_height>
 8013ce8:	4603      	mov	r3, r0
 8013cea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /*Get the real radius*/
    int32_t rout = dsc->radius;
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
 8013cf8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8013cfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013d00:	4293      	cmp	r3, r2
 8013d02:	bfa8      	it	ge
 8013d04:	4613      	movge	r3, r2
 8013d06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if(rout > short_side >> 1) rout = short_side >> 1;
 8013d0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013d0e:	105b      	asrs	r3, r3, #1
 8013d10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8013d14:	429a      	cmp	r2, r3
 8013d16:	dd04      	ble.n	8013d22 <draw_border+0x8a>
 8013d18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013d1c:	105b      	asrs	r3, r3, #1
 8013d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /*Get the inner area*/
    lv_area_t area_inner;
    lv_area_copy(&area_inner, coords);
 8013d22:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013d26:	68f9      	ldr	r1, [r7, #12]
 8013d28:	4618      	mov	r0, r3
 8013d2a:	f7ff fa87 	bl	801323c <lv_area_copy>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 8013d2e:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8013d32:	b29a      	uxth	r2, r3
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013d3a:	b29b      	uxth	r3, r3
 8013d3c:	f003 0304 	and.w	r3, r3, #4
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d004      	beq.n	8013d4e <draw_border+0xb6>
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013d4a:	b29b      	uxth	r3, r3
 8013d4c:	e00a      	b.n	8013d64 <draw_border+0xcc>
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013d54:	b299      	uxth	r1, r3
 8013d56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013d5a:	b29b      	uxth	r3, r3
 8013d5c:	440b      	add	r3, r1
 8013d5e:	b29b      	uxth	r3, r3
 8013d60:	425b      	negs	r3, r3
 8013d62:	b29b      	uxth	r3, r3
 8013d64:	4413      	add	r3, r2
 8013d66:	b29b      	uxth	r3, r3
 8013d68:	b21b      	sxth	r3, r3
 8013d6a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 8013d6e:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 8013d72:	b29a      	uxth	r2, r3
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013d7a:	b29b      	uxth	r3, r3
 8013d7c:	f003 0308 	and.w	r3, r3, #8
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d004      	beq.n	8013d8e <draw_border+0xf6>
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013d8a:	b29b      	uxth	r3, r3
 8013d8c:	e00a      	b.n	8013da4 <draw_border+0x10c>
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013d94:	b299      	uxth	r1, r3
 8013d96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013d9a:	b29b      	uxth	r3, r3
 8013d9c:	440b      	add	r3, r1
 8013d9e:	b29b      	uxth	r3, r3
 8013da0:	425b      	negs	r3, r3
 8013da2:	b29b      	uxth	r3, r3
 8013da4:	1ad3      	subs	r3, r2, r3
 8013da6:	b29b      	uxth	r3, r3
 8013da8:	b21b      	sxth	r3, r3
 8013daa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 8013dae:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8013db2:	b29a      	uxth	r2, r3
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013dba:	b29b      	uxth	r3, r3
 8013dbc:	f003 0302 	and.w	r3, r3, #2
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d004      	beq.n	8013dce <draw_border+0x136>
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013dca:	b29b      	uxth	r3, r3
 8013dcc:	e00a      	b.n	8013de4 <draw_border+0x14c>
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013dd4:	b299      	uxth	r1, r3
 8013dd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013dda:	b29b      	uxth	r3, r3
 8013ddc:	440b      	add	r3, r1
 8013dde:	b29b      	uxth	r3, r3
 8013de0:	425b      	negs	r3, r3
 8013de2:	b29b      	uxth	r3, r3
 8013de4:	4413      	add	r3, r2
 8013de6:	b29b      	uxth	r3, r3
 8013de8:	b21b      	sxth	r3, r3
 8013dea:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 8013dee:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8013df2:	b29a      	uxth	r2, r3
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013dfa:	b29b      	uxth	r3, r3
 8013dfc:	f003 0301 	and.w	r3, r3, #1
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d004      	beq.n	8013e0e <draw_border+0x176>
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013e0a:	b29b      	uxth	r3, r3
 8013e0c:	e00a      	b.n	8013e24 <draw_border+0x18c>
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013e14:	b299      	uxth	r1, r3
 8013e16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013e1a:	b29b      	uxth	r3, r3
 8013e1c:	440b      	add	r3, r1
 8013e1e:	b29b      	uxth	r3, r3
 8013e20:	425b      	negs	r3, r3
 8013e22:	b29b      	uxth	r3, r3
 8013e24:	1ad3      	subs	r3, r2, r3
 8013e26:	b29b      	uxth	r3, r3
 8013e28:	b21b      	sxth	r3, r3
 8013e2a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013e34:	2b0f      	cmp	r3, #15
 8013e36:	d115      	bne.n	8013e64 <draw_border+0x1cc>
        draw_full_border(&area_inner, coords, clip, dsc->radius, false, dsc->border_color, dsc->border_opa,
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	7f1b      	ldrb	r3, [r3, #28]
 8013e42:	687a      	ldr	r2, [r7, #4]
 8013e44:	7f52      	ldrb	r2, [r2, #29]
 8013e46:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8013e4a:	9203      	str	r2, [sp, #12]
 8013e4c:	9302      	str	r3, [sp, #8]
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	695b      	ldr	r3, [r3, #20]
 8013e52:	9301      	str	r3, [sp, #4]
 8013e54:	2300      	movs	r3, #0
 8013e56:	9300      	str	r3, [sp, #0]
 8013e58:	460b      	mov	r3, r1
 8013e5a:	68ba      	ldr	r2, [r7, #8]
 8013e5c:	68f9      	ldr	r1, [r7, #12]
 8013e5e:	f002 fbc5 	bl	80165ec <draw_full_border>
 8013e62:	e1c2      	b.n	80141ea <draw_border+0x552>
                         dsc->border_blend_mode);
    }
    else {
        lv_opa_t opa = dsc->border_opa;
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	7f1b      	ldrb	r3, [r3, #28]
 8013e68:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
        if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8013e6c:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8013e70:	2bfd      	cmp	r3, #253	; 0xfd
 8013e72:	d902      	bls.n	8013e7a <draw_border+0x1e2>
 8013e74:	23ff      	movs	r3, #255	; 0xff
 8013e76:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

        lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 8013e7a:	f7f6 fa55 	bl	800a328 <_lv_refr_get_disp_refreshing>
 8013e7e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8013e82:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8013e86:	f006 fb3f 	bl	801a508 <lv_disp_get_buf>
 8013e8a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

        /* Get clipped fill area which is the real draw area.
         * It is always the same or inside `fill_area` */
        lv_area_t draw_area;
        bool is_common;
        is_common = _lv_area_intersect(&draw_area, coords, clip);
 8013e8e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013e92:	68ba      	ldr	r2, [r7, #8]
 8013e94:	68f9      	ldr	r1, [r7, #12]
 8013e96:	4618      	mov	r0, r3
 8013e98:	f006 fff6 	bl	801ae88 <_lv_area_intersect>
 8013e9c:	4603      	mov	r3, r0
 8013e9e:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
        if(is_common == false) return;
 8013ea2:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8013ea6:	f083 0301 	eor.w	r3, r3, #1
 8013eaa:	b2db      	uxtb	r3, r3
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	f040 819b 	bne.w	80141e8 <draw_border+0x550>

        const lv_area_t * disp_area = &vdb->area;
 8013eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013eb6:	3310      	adds	r3, #16
 8013eb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        /* Now `draw_area` has absolute coordinates.
         * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
        draw_area.x1 -= disp_area->x1;
 8013ebc:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8013ec0:	b29a      	uxth	r2, r3
 8013ec2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013eca:	b29b      	uxth	r3, r3
 8013ecc:	1ad3      	subs	r3, r2, r3
 8013ece:	b29b      	uxth	r3, r3
 8013ed0:	b21b      	sxth	r3, r3
 8013ed2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        draw_area.y1 -= disp_area->y1;
 8013ed6:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8013eda:	b29a      	uxth	r2, r3
 8013edc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013ee0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013ee4:	b29b      	uxth	r3, r3
 8013ee6:	1ad3      	subs	r3, r2, r3
 8013ee8:	b29b      	uxth	r3, r3
 8013eea:	b21b      	sxth	r3, r3
 8013eec:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        draw_area.x2 -= disp_area->x1;
 8013ef0:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8013ef4:	b29a      	uxth	r2, r3
 8013ef6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013efe:	b29b      	uxth	r3, r3
 8013f00:	1ad3      	subs	r3, r2, r3
 8013f02:	b29b      	uxth	r3, r3
 8013f04:	b21b      	sxth	r3, r3
 8013f06:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        draw_area.y2 -= disp_area->y1;
 8013f0a:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8013f0e:	b29a      	uxth	r2, r3
 8013f10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013f14:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013f18:	b29b      	uxth	r3, r3
 8013f1a:	1ad3      	subs	r3, r2, r3
 8013f1c:	b29b      	uxth	r3, r3
 8013f1e:	b21b      	sxth	r3, r3
 8013f20:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        int32_t draw_area_w = lv_area_get_width(&draw_area);
 8013f24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7ff f995 	bl	8013258 <lv_area_get_width>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /*Create a mask if there is a radius*/
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 8013f34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013f38:	4618      	mov	r0, r3
 8013f3a:	f008 fced 	bl	801c918 <_lv_mem_buf_get>
 8013f3e:	67f8      	str	r0, [r7, #124]	; 0x7c

        /*Create mask for the outer area*/
        int16_t mask_rout_id = LV_MASK_ID_INV;
 8013f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013f44:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        lv_draw_mask_radius_param_t mask_rout_param;
        if(rout > 0) {
 8013f48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	dd11      	ble.n	8013f74 <draw_border+0x2dc>
            lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
 8013f50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013f54:	b21a      	sxth	r2, r3
 8013f56:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	68f9      	ldr	r1, [r7, #12]
 8013f5e:	f7fd ffd7 	bl	8011f10 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 8013f62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013f66:	2100      	movs	r1, #0
 8013f68:	4618      	mov	r0, r3
 8013f6a:	f7fd fdb7 	bl	8011adc <lv_draw_mask_add>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        }

        /*Create mask for the inner mask*/
        int32_t rin = rout - dsc->border_width;
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013f7a:	461a      	mov	r2, r3
 8013f7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013f80:	1a9b      	subs	r3, r3, r2
 8013f82:	67bb      	str	r3, [r7, #120]	; 0x78
        if(rin < 0) rin = 0;
 8013f84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	da01      	bge.n	8013f8e <draw_border+0x2f6>
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	67bb      	str	r3, [r7, #120]	; 0x78
        lv_draw_mask_radius_param_t mask_rin_param;
        lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rout - dsc->border_width, true);
 8013f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013f92:	b29a      	uxth	r2, r3
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013f9a:	b29b      	uxth	r3, r3
 8013f9c:	1ad3      	subs	r3, r2, r3
 8013f9e:	b29b      	uxth	r3, r3
 8013fa0:	b21a      	sxth	r2, r3
 8013fa2:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8013fa6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013faa:	2301      	movs	r3, #1
 8013fac:	f7fd ffb0 	bl	8011f10 <lv_draw_mask_radius_init>
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 8013fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013fb4:	2100      	movs	r1, #0
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f7fd fd90 	bl	8011adc <lv_draw_mask_add>
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013fc8:	3b01      	subs	r3, #1
 8013fca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8013fce:	4293      	cmp	r3, r2
 8013fd0:	bfb8      	it	lt
 8013fd2:	4613      	movlt	r3, r2
 8013fd4:	673b      	str	r3, [r7, #112]	; 0x70

        int32_t h;
        lv_draw_mask_res_t mask_res;
        lv_area_t fill_area;

        lv_color_t color = dsc->border_color;
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	695b      	ldr	r3, [r3, #20]
 8013fda:	61bb      	str	r3, [r7, #24]
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	7f5b      	ldrb	r3, [r3, #29]
 8013fe0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

        fill_area.x1 = coords->x1;
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013fea:	83bb      	strh	r3, [r7, #28]
        fill_area.x2 = coords->x2;
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013ff2:	843b      	strh	r3, [r7, #32]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 8013ff4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013ff8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013ffc:	b29a      	uxth	r2, r3
 8013ffe:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8014002:	b29b      	uxth	r3, r3
 8014004:	4413      	add	r3, r2
 8014006:	b29b      	uxth	r3, r3
 8014008:	b21b      	sxth	r3, r3
 801400a:	83fb      	strh	r3, [r7, #30]
        fill_area.y2 = fill_area.y1;
 801400c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014010:	847b      	strh	r3, [r7, #34]	; 0x22

        uint32_t buf_ofs = 0;
 8014012:	2300      	movs	r3, #0
 8014014:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801401e:	2b04      	cmp	r3, #4
 8014020:	d10a      	bne.n	8014038 <draw_border+0x3a0>
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014028:	b29a      	uxth	r2, r3
 801402a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801402c:	b29b      	uxth	r3, r3
 801402e:	4413      	add	r3, r2
 8014030:	b29b      	uxth	r3, r3
 8014032:	b21b      	sxth	r3, r3
 8014034:	843b      	strh	r3, [r7, #32]
 8014036:	e017      	b.n	8014068 <draw_border+0x3d0>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) {
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801403e:	2b08      	cmp	r3, #8
 8014040:	d112      	bne.n	8014068 <draw_border+0x3d0>
            fill_area.x1 = coords->x2 - corner_size;
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014048:	b29a      	uxth	r2, r3
 801404a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801404c:	b29b      	uxth	r3, r3
 801404e:	1ad3      	subs	r3, r2, r3
 8014050:	b29b      	uxth	r3, r3
 8014052:	b21b      	sxth	r3, r3
 8014054:	83bb      	strh	r3, [r7, #28]
            buf_ofs = fill_area.x1 - coords->x1;
 8014056:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801405a:	461a      	mov	r2, r3
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014062:	1ad3      	subs	r3, r2, r3
 8014064:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        }

        volatile bool top_only = false;
 8014068:	2300      	movs	r3, #0
 801406a:	75fb      	strb	r3, [r7, #23]
        volatile bool bottom_only = false;
 801406c:	2300      	movs	r3, #0
 801406e:	75bb      	strb	r3, [r7, #22]
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8014076:	2b02      	cmp	r3, #2
 8014078:	d101      	bne.n	801407e <draw_border+0x3e6>
 801407a:	2301      	movs	r3, #1
 801407c:	75fb      	strb	r3, [r7, #23]
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8014084:	2b01      	cmp	r3, #1
 8014086:	d101      	bne.n	801408c <draw_border+0x3f4>
 8014088:	2301      	movs	r3, #1
 801408a:	75bb      	strb	r3, [r7, #22]
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8014092:	2b03      	cmp	r3, #3
 8014094:	d103      	bne.n	801409e <draw_border+0x406>
            top_only = true;
 8014096:	2301      	movs	r3, #1
 8014098:	75fb      	strb	r3, [r7, #23]
            bottom_only = true;
 801409a:	2301      	movs	r3, #1
 801409c:	75bb      	strb	r3, [r7, #22]
        }

        volatile bool normal = !top_only && !bottom_only ? true : false;
 801409e:	7dfb      	ldrb	r3, [r7, #23]
 80140a0:	b2db      	uxtb	r3, r3
 80140a2:	f083 0301 	eor.w	r3, r3, #1
 80140a6:	b2db      	uxtb	r3, r3
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d008      	beq.n	80140be <draw_border+0x426>
 80140ac:	7dbb      	ldrb	r3, [r7, #22]
 80140ae:	b2db      	uxtb	r3, r3
 80140b0:	f083 0301 	eor.w	r3, r3, #1
 80140b4:	b2db      	uxtb	r3, r3
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d001      	beq.n	80140be <draw_border+0x426>
 80140ba:	2301      	movs	r3, #1
 80140bc:	e000      	b.n	80140c0 <draw_border+0x428>
 80140be:	2300      	movs	r3, #0
 80140c0:	f003 0301 	and.w	r3, r3, #1
 80140c4:	b2db      	uxtb	r3, r3
 80140c6:	757b      	strb	r3, [r7, #21]

        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 80140c8:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80140cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80140d0:	e06d      	b.n	80141ae <draw_border+0x516>
            if(normal ||
 80140d2:	7d7b      	ldrb	r3, [r7, #21]
 80140d4:	b2db      	uxtb	r3, r3
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d11d      	bne.n	8014116 <draw_border+0x47e>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 80140da:	7dfb      	ldrb	r3, [r7, #23]
 80140dc:	b2db      	uxtb	r3, r3
            if(normal ||
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d00a      	beq.n	80140f8 <draw_border+0x460>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 80140e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80140e6:	461a      	mov	r2, r3
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80140ee:	4619      	mov	r1, r3
 80140f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80140f2:	440b      	add	r3, r1
 80140f4:	429a      	cmp	r2, r3
 80140f6:	dd0e      	ble.n	8014116 <draw_border+0x47e>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
 80140f8:	7dbb      	ldrb	r3, [r7, #22]
 80140fa:	b2db      	uxtb	r3, r3
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d043      	beq.n	8014188 <draw_border+0x4f0>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
 8014100:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014104:	461a      	mov	r2, r3
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801410c:	4619      	mov	r1, r3
 801410e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014110:	1acb      	subs	r3, r1, r3
 8014112:	429a      	cmp	r2, r3
 8014114:	db38      	blt.n	8014188 <draw_border+0x4f0>
                _lv_memset_ff(mask_buf, draw_area_w);
 8014116:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801411a:	4619      	mov	r1, r3
 801411c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801411e:	f009 f884 	bl	801d22a <_lv_memset_ff>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 8014122:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014126:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801412a:	b29a      	uxth	r2, r3
 801412c:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8014130:	b29b      	uxth	r3, r3
 8014132:	4413      	add	r3, r2
 8014134:	b29b      	uxth	r3, r3
 8014136:	b219      	sxth	r1, r3
 8014138:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801413c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8014140:	b29a      	uxth	r2, r3
 8014142:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014146:	b29b      	uxth	r3, r3
 8014148:	4413      	add	r3, r2
 801414a:	b29b      	uxth	r3, r3
 801414c:	b21a      	sxth	r2, r3
 801414e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014152:	b21b      	sxth	r3, r3
 8014154:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8014156:	f7fd fcf3 	bl	8011b40 <lv_draw_mask_apply>
 801415a:	4603      	mov	r3, r0
 801415c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
 8014160:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014166:	441a      	add	r2, r3
 8014168:	f107 011c 	add.w	r1, r7, #28
 801416c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014170:	9302      	str	r3, [sp, #8]
 8014172:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8014176:	9301      	str	r3, [sp, #4]
 8014178:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 801417c:	9300      	str	r3, [sp, #0]
 801417e:	4613      	mov	r3, r2
 8014180:	69ba      	ldr	r2, [r7, #24]
 8014182:	68b8      	ldr	r0, [r7, #8]
 8014184:	f7f8 faae 	bl	800c6e4 <_lv_blend_fill>
            }
            fill_area.y1++;
 8014188:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801418c:	b29b      	uxth	r3, r3
 801418e:	3301      	adds	r3, #1
 8014190:	b29b      	uxth	r3, r3
 8014192:	b21b      	sxth	r3, r3
 8014194:	83fb      	strh	r3, [r7, #30]
            fill_area.y2++;
 8014196:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801419a:	b29b      	uxth	r3, r3
 801419c:	3301      	adds	r3, #1
 801419e:	b29b      	uxth	r3, r3
 80141a0:	b21b      	sxth	r3, r3
 80141a2:	847b      	strh	r3, [r7, #34]	; 0x22
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 80141a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80141a8:	3301      	adds	r3, #1
 80141aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80141ae:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 80141b2:	461a      	mov	r2, r3
 80141b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80141b8:	4293      	cmp	r3, r2
 80141ba:	dd8a      	ble.n	80140d2 <draw_border+0x43a>

        }
        lv_draw_mask_remove_id(mask_rin_id);
 80141bc:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80141c0:	4618      	mov	r0, r3
 80141c2:	f7fd fd01 	bl	8011bc8 <lv_draw_mask_remove_id>
        lv_draw_mask_remove_id(mask_rout_id);
 80141c6:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	; 0xa8
 80141ca:	4618      	mov	r0, r3
 80141cc:	f7fd fcfc 	bl	8011bc8 <lv_draw_mask_remove_id>
        _lv_mem_buf_release(mask_buf);
 80141d0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80141d2:	f008 fc7f 	bl	801cad4 <_lv_mem_buf_release>
 80141d6:	e008      	b.n	80141ea <draw_border+0x552>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 80141d8:	bf00      	nop
 80141da:	e006      	b.n	80141ea <draw_border+0x552>
    if(dsc->border_width == 0) return;
 80141dc:	bf00      	nop
 80141de:	e004      	b.n	80141ea <draw_border+0x552>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 80141e0:	bf00      	nop
 80141e2:	e002      	b.n	80141ea <draw_border+0x552>
    if(dsc->border_post) return;
 80141e4:	bf00      	nop
 80141e6:	e000      	b.n	80141ea <draw_border+0x552>
        if(is_common == false) return;
 80141e8:	bf00      	nop
    }
}
 80141ea:	37b0      	adds	r7, #176	; 0xb0
 80141ec:	46bd      	mov	sp, r7
 80141ee:	bd80      	pop	{r7, pc}

080141f0 <grad_get>:

LV_ATTRIBUTE_FAST_MEM static inline lv_color_t grad_get(const lv_draw_rect_dsc_t * dsc, lv_coord_t s, lv_coord_t i)
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b086      	sub	sp, #24
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]
 80141f8:	460b      	mov	r3, r1
 80141fa:	807b      	strh	r3, [r7, #2]
 80141fc:	4613      	mov	r3, r2
 80141fe:	803b      	strh	r3, [r7, #0]
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014206:	461a      	mov	r2, r3
 8014208:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801420c:	fb03 f302 	mul.w	r3, r3, r2
 8014210:	121b      	asrs	r3, r3, #8
 8014212:	617b      	str	r3, [r7, #20]
    if(i <= min) return dsc->bg_color;
 8014214:	f9b7 3000 	ldrsh.w	r3, [r7]
 8014218:	697a      	ldr	r2, [r7, #20]
 801421a:	429a      	cmp	r2, r3
 801421c:	db02      	blt.n	8014224 <grad_get+0x34>
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	685b      	ldr	r3, [r3, #4]
 8014222:	e038      	b.n	8014296 <grad_get+0xa6>

    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801422a:	461a      	mov	r2, r3
 801422c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014230:	fb03 f302 	mul.w	r3, r3, r2
 8014234:	121b      	asrs	r3, r3, #8
 8014236:	613b      	str	r3, [r7, #16]
    if(i >= max) return dsc->bg_grad_color;
 8014238:	f9b7 3000 	ldrsh.w	r3, [r7]
 801423c:	693a      	ldr	r2, [r7, #16]
 801423e:	429a      	cmp	r2, r3
 8014240:	dc02      	bgt.n	8014248 <grad_get+0x58>
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	689b      	ldr	r3, [r3, #8]
 8014246:	e026      	b.n	8014296 <grad_get+0xa6>

    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801424e:	461a      	mov	r2, r3
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014256:	1ad3      	subs	r3, r2, r3
 8014258:	60fb      	str	r3, [r7, #12]
    d = (s * d) >> 8;
 801425a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801425e:	68fa      	ldr	r2, [r7, #12]
 8014260:	fb02 f303 	mul.w	r3, r2, r3
 8014264:	121b      	asrs	r3, r3, #8
 8014266:	60fb      	str	r3, [r7, #12]
    i -= min;
 8014268:	883a      	ldrh	r2, [r7, #0]
 801426a:	697b      	ldr	r3, [r7, #20]
 801426c:	b29b      	uxth	r3, r3
 801426e:	1ad3      	subs	r3, r2, r3
 8014270:	b29b      	uxth	r3, r3
 8014272:	803b      	strh	r3, [r7, #0]
    lv_opa_t mix = (i * 255) / d;
 8014274:	f9b7 2000 	ldrsh.w	r2, [r7]
 8014278:	4613      	mov	r3, r2
 801427a:	021b      	lsls	r3, r3, #8
 801427c:	1a9a      	subs	r2, r3, r2
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	fb92 f3f3 	sdiv	r3, r2, r3
 8014284:	72fb      	strb	r3, [r7, #11]
    return lv_color_mix(dsc->bg_grad_color, dsc->bg_color, mix);
 8014286:	7afa      	ldrb	r2, [r7, #11]
 8014288:	6879      	ldr	r1, [r7, #4]
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	6849      	ldr	r1, [r1, #4]
 801428e:	6898      	ldr	r0, [r3, #8]
 8014290:	f7ff f810 	bl	80132b4 <lv_color_mix>
 8014294:	4603      	mov	r3, r0
}
 8014296:	4618      	mov	r0, r3
 8014298:	3718      	adds	r7, #24
 801429a:	46bd      	mov	sp, r7
 801429c:	bd80      	pop	{r7, pc}

0801429e <draw_shadow>:

#if LV_USE_SHADOW
LV_ATTRIBUTE_FAST_MEM static void draw_shadow(const lv_area_t * coords, const lv_area_t * clip,
                                              const lv_draw_rect_dsc_t * dsc)
{
 801429e:	b590      	push	{r4, r7, lr}
 80142a0:	b0cb      	sub	sp, #300	; 0x12c
 80142a2:	af04      	add	r7, sp, #16
 80142a4:	f107 030c 	add.w	r3, r7, #12
 80142a8:	6018      	str	r0, [r3, #0]
 80142aa:	f107 0308 	add.w	r3, r7, #8
 80142ae:	6019      	str	r1, [r3, #0]
 80142b0:	1d3b      	adds	r3, r7, #4
 80142b2:	601a      	str	r2, [r3, #0]
    /*Check whether the shadow is visible*/
    if(dsc->shadow_width == 0) return;
 80142b4:	1d3b      	adds	r3, r7, #4
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80142bc:	2b00      	cmp	r3, #0
 80142be:	f001 832a 	beq.w	8015916 <draw_shadow+0x1678>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 80142c2:	1d3b      	adds	r3, r7, #4
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80142ca:	2b02      	cmp	r3, #2
 80142cc:	f241 8325 	bls.w	801591a <draw_shadow+0x167c>

    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
 80142d0:	1d3b      	adds	r3, r7, #4
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80142d8:	2b01      	cmp	r3, #1
 80142da:	d112      	bne.n	8014302 <draw_shadow+0x64>
 80142dc:	1d3b      	adds	r3, r7, #4
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d10c      	bne.n	8014302 <draw_shadow+0x64>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
 80142e8:	1d3b      	adds	r3, r7, #4
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d106      	bne.n	8014302 <draw_shadow+0x64>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
 80142f4:	1d3b      	adds	r3, r7, #4
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	f341 830e 	ble.w	801591e <draw_shadow+0x1680>
        return;
    }

    int32_t sw = dsc->shadow_width;
 8014302:	1d3b      	adds	r3, r7, #4
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801430a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    lv_area_t sh_rect_area;
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 801430e:	f107 030c 	add.w	r3, r7, #12
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014318:	b29a      	uxth	r2, r3
 801431a:	1d3b      	adds	r3, r7, #4
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8014322:	b29b      	uxth	r3, r3
 8014324:	4413      	add	r3, r2
 8014326:	b29a      	uxth	r2, r3
 8014328:	1d3b      	adds	r3, r7, #4
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8014330:	b29b      	uxth	r3, r3
 8014332:	1ad3      	subs	r3, r2, r3
 8014334:	b29b      	uxth	r3, r3
 8014336:	b21b      	sxth	r3, r3
 8014338:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 801433c:	f107 030c 	add.w	r3, r7, #12
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014346:	b29a      	uxth	r2, r3
 8014348:	1d3b      	adds	r3, r7, #4
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8014350:	b29b      	uxth	r3, r3
 8014352:	4413      	add	r3, r2
 8014354:	b29a      	uxth	r2, r3
 8014356:	1d3b      	adds	r3, r7, #4
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 801435e:	b29b      	uxth	r3, r3
 8014360:	4413      	add	r3, r2
 8014362:	b29b      	uxth	r3, r3
 8014364:	b21b      	sxth	r3, r3
 8014366:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 801436a:	f107 030c 	add.w	r3, r7, #12
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014374:	b29a      	uxth	r2, r3
 8014376:	1d3b      	adds	r3, r7, #4
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 801437e:	b29b      	uxth	r3, r3
 8014380:	4413      	add	r3, r2
 8014382:	b29a      	uxth	r2, r3
 8014384:	1d3b      	adds	r3, r7, #4
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 801438c:	b29b      	uxth	r3, r3
 801438e:	1ad3      	subs	r3, r2, r3
 8014390:	b29b      	uxth	r3, r3
 8014392:	b21b      	sxth	r3, r3
 8014394:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 8014398:	f107 030c 	add.w	r3, r7, #12
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80143a2:	b29a      	uxth	r2, r3
 80143a4:	1d3b      	adds	r3, r7, #4
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80143ac:	b29b      	uxth	r3, r3
 80143ae:	4413      	add	r3, r2
 80143b0:	b29a      	uxth	r2, r3
 80143b2:	1d3b      	adds	r3, r7, #4
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80143ba:	b29b      	uxth	r3, r3
 80143bc:	4413      	add	r3, r2
 80143be:	b29b      	uxth	r3, r3
 80143c0:	b21b      	sxth	r3, r3
 80143c2:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2

    lv_area_t sh_area;
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
 80143c6:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 80143ca:	b29a      	uxth	r2, r3
 80143cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	da00      	bge.n	80143d6 <draw_shadow+0x138>
 80143d4:	3301      	adds	r3, #1
 80143d6:	105b      	asrs	r3, r3, #1
 80143d8:	425b      	negs	r3, r3
 80143da:	b29b      	uxth	r3, r3
 80143dc:	4413      	add	r3, r2
 80143de:	b29b      	uxth	r3, r3
 80143e0:	3b01      	subs	r3, #1
 80143e2:	b29b      	uxth	r3, r3
 80143e4:	b21b      	sxth	r3, r3
 80143e6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
 80143ea:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 80143ee:	b29a      	uxth	r2, r3
 80143f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	da00      	bge.n	80143fa <draw_shadow+0x15c>
 80143f8:	3301      	adds	r3, #1
 80143fa:	105b      	asrs	r3, r3, #1
 80143fc:	b29b      	uxth	r3, r3
 80143fe:	4413      	add	r3, r2
 8014400:	b29b      	uxth	r3, r3
 8014402:	3301      	adds	r3, #1
 8014404:	b29b      	uxth	r3, r3
 8014406:	b21b      	sxth	r3, r3
 8014408:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
 801440c:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8014410:	b29a      	uxth	r2, r3
 8014412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014416:	2b00      	cmp	r3, #0
 8014418:	da00      	bge.n	801441c <draw_shadow+0x17e>
 801441a:	3301      	adds	r3, #1
 801441c:	105b      	asrs	r3, r3, #1
 801441e:	425b      	negs	r3, r3
 8014420:	b29b      	uxth	r3, r3
 8014422:	4413      	add	r3, r2
 8014424:	b29b      	uxth	r3, r3
 8014426:	3b01      	subs	r3, #1
 8014428:	b29b      	uxth	r3, r3
 801442a:	b21b      	sxth	r3, r3
 801442c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
 8014430:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 8014434:	b29a      	uxth	r2, r3
 8014436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801443a:	2b00      	cmp	r3, #0
 801443c:	da00      	bge.n	8014440 <draw_shadow+0x1a2>
 801443e:	3301      	adds	r3, #1
 8014440:	105b      	asrs	r3, r3, #1
 8014442:	b29b      	uxth	r3, r3
 8014444:	4413      	add	r3, r2
 8014446:	b29b      	uxth	r3, r3
 8014448:	3301      	adds	r3, #1
 801444a:	b29b      	uxth	r3, r3
 801444c:	b21b      	sxth	r3, r3
 801444e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

    lv_opa_t opa = dsc->shadow_opa;
 8014452:	1d3b      	adds	r3, r7, #4
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801445a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 801445e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8014462:	2bfd      	cmp	r3, #253	; 0xfd
 8014464:	d902      	bls.n	801446c <draw_shadow+0x1ce>
 8014466:	23ff      	movs	r3, #255	; 0xff
 8014468:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 801446c:	f7f5 ff5c 	bl	800a328 <_lv_refr_get_disp_refreshing>
 8014470:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8014474:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8014478:	f006 f846 	bl	801a508 <lv_disp_get_buf>
 801447c:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
 8014480:	f107 0308 	add.w	r3, r7, #8
 8014484:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8014488:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 801448c:	681a      	ldr	r2, [r3, #0]
 801448e:	f006 fcfb 	bl	801ae88 <_lv_area_intersect>
 8014492:	4603      	mov	r3, r0
 8014494:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
    if(is_common == false) return;
 8014498:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 801449c:	f083 0301 	eor.w	r3, r3, #1
 80144a0:	b2db      	uxtb	r3, r3
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	f041 823d 	bne.w	8015922 <draw_shadow+0x1684>

    const lv_area_t * disp_area = &vdb->area;
 80144a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80144ac:	3310      	adds	r3, #16
 80144ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 80144b2:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 80144b6:	b29a      	uxth	r2, r3
 80144b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80144bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80144c0:	b29b      	uxth	r3, r3
 80144c2:	1ad3      	subs	r3, r2, r3
 80144c4:	b29b      	uxth	r3, r3
 80144c6:	b21b      	sxth	r3, r3
 80144c8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
    draw_area.y1 -= disp_area->y1;
 80144cc:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 80144d0:	b29a      	uxth	r2, r3
 80144d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80144d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80144da:	b29b      	uxth	r3, r3
 80144dc:	1ad3      	subs	r3, r2, r3
 80144de:	b29b      	uxth	r3, r3
 80144e0:	b21b      	sxth	r3, r3
 80144e2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    draw_area.x2 -= disp_area->x1;
 80144e6:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 80144ea:	b29a      	uxth	r2, r3
 80144ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80144f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80144f4:	b29b      	uxth	r3, r3
 80144f6:	1ad3      	subs	r3, r2, r3
 80144f8:	b29b      	uxth	r3, r3
 80144fa:	b21b      	sxth	r3, r3
 80144fc:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    draw_area.y2 -= disp_area->y1;
 8014500:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8014504:	b29a      	uxth	r2, r3
 8014506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801450a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801450e:	b29b      	uxth	r3, r3
 8014510:	1ad3      	subs	r3, r2, r3
 8014512:	b29b      	uxth	r3, r3
 8014514:	b21b      	sxth	r3, r3
 8014516:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

    /*Consider 1 px smaller bg to be sure the edge will be covered by the shadow*/
    lv_area_t bg_coords;
    lv_area_copy(&bg_coords, coords);
 801451a:	f107 030c 	add.w	r3, r7, #12
 801451e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8014522:	6819      	ldr	r1, [r3, #0]
 8014524:	4610      	mov	r0, r2
 8014526:	f7fe fe89 	bl	801323c <lv_area_copy>
    bg_coords.x1 += 1;
 801452a:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801452e:	b29b      	uxth	r3, r3
 8014530:	3301      	adds	r3, #1
 8014532:	b29b      	uxth	r3, r3
 8014534:	b21b      	sxth	r3, r3
 8014536:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    bg_coords.y1 += 1;
 801453a:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801453e:	b29b      	uxth	r3, r3
 8014540:	3301      	adds	r3, #1
 8014542:	b29b      	uxth	r3, r3
 8014544:	b21b      	sxth	r3, r3
 8014546:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    bg_coords.x2 -= 1;
 801454a:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 801454e:	b29b      	uxth	r3, r3
 8014550:	3b01      	subs	r3, #1
 8014552:	b29b      	uxth	r3, r3
 8014554:	b21b      	sxth	r3, r3
 8014556:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    bg_coords.y2 -= 1;
 801455a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 801455e:	b29b      	uxth	r3, r3
 8014560:	3b01      	subs	r3, #1
 8014562:	b29b      	uxth	r3, r3
 8014564:	b21b      	sxth	r3, r3
 8014566:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

    /*Get the real radius*/
    int32_t r_bg = dsc->radius;
 801456a:	1d3b      	adds	r3, r7, #4
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014572:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int32_t short_side = LV_MATH_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
 8014576:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801457a:	4618      	mov	r0, r3
 801457c:	f7fe fe6c 	bl	8013258 <lv_area_get_width>
 8014580:	4603      	mov	r3, r0
 8014582:	461c      	mov	r4, r3
 8014584:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014588:	4618      	mov	r0, r3
 801458a:	f7fe fe7c 	bl	8013286 <lv_area_get_height>
 801458e:	4603      	mov	r3, r0
 8014590:	429c      	cmp	r4, r3
 8014592:	da06      	bge.n	80145a2 <draw_shadow+0x304>
 8014594:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014598:	4618      	mov	r0, r3
 801459a:	f7fe fe5d 	bl	8013258 <lv_area_get_width>
 801459e:	4603      	mov	r3, r0
 80145a0:	e005      	b.n	80145ae <draw_shadow+0x310>
 80145a2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80145a6:	4618      	mov	r0, r3
 80145a8:	f7fe fe6d 	bl	8013286 <lv_area_get_height>
 80145ac:	4603      	mov	r3, r0
 80145ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 80145b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80145b6:	105b      	asrs	r3, r3, #1
 80145b8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80145bc:	429a      	cmp	r2, r3
 80145be:	dd04      	ble.n	80145ca <draw_shadow+0x32c>
 80145c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80145c4:	105b      	asrs	r3, r3, #1
 80145c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    int32_t r_sh = dsc->radius;
 80145ca:	1d3b      	adds	r3, r7, #4
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    short_side = LV_MATH_MIN(lv_area_get_width(&sh_rect_area), lv_area_get_height(&sh_rect_area));
 80145d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80145da:	4618      	mov	r0, r3
 80145dc:	f7fe fe3c 	bl	8013258 <lv_area_get_width>
 80145e0:	4603      	mov	r3, r0
 80145e2:	461c      	mov	r4, r3
 80145e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80145e8:	4618      	mov	r0, r3
 80145ea:	f7fe fe4c 	bl	8013286 <lv_area_get_height>
 80145ee:	4603      	mov	r3, r0
 80145f0:	429c      	cmp	r4, r3
 80145f2:	da06      	bge.n	8014602 <draw_shadow+0x364>
 80145f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80145f8:	4618      	mov	r0, r3
 80145fa:	f7fe fe2d 	bl	8013258 <lv_area_get_width>
 80145fe:	4603      	mov	r3, r0
 8014600:	e005      	b.n	801460e <draw_shadow+0x370>
 8014602:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8014606:	4618      	mov	r0, r3
 8014608:	f7fe fe3d 	bl	8013286 <lv_area_get_height>
 801460c:	4603      	mov	r3, r0
 801460e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 8014612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014616:	105b      	asrs	r3, r3, #1
 8014618:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801461c:	429a      	cmp	r2, r3
 801461e:	dd04      	ble.n	801462a <draw_shadow+0x38c>
 8014620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014624:	105b      	asrs	r3, r3, #1
 8014626:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    int32_t corner_size = sw  + r_sh;
 801462a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801462e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014632:	4413      	add	r3, r2
 8014634:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            sh_cache_size = corner_size;
            sh_cache_r = r_sh;
        }
    }
#else
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 8014638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801463c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014640:	fb02 f303 	mul.w	r3, r2, r3
 8014644:	005b      	lsls	r3, r3, #1
 8014646:	4618      	mov	r0, r3
 8014648:	f008 f966 	bl	801c918 <_lv_mem_buf_get>
 801464c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    shadow_draw_corner_buf(&sh_rect_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
 8014650:	1d3b      	adds	r3, r7, #4
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8014658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801465c:	b21b      	sxth	r3, r3
 801465e:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8014662:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8014666:	f001 f961 	bl	801592c <shadow_draw_corner_buf>
#endif

    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
 801466a:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 801466e:	b29c      	uxth	r4, r3
 8014670:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8014674:	4618      	mov	r0, r3
 8014676:	f7fe fe06 	bl	8013286 <lv_area_get_height>
 801467a:	4603      	mov	r3, r0
 801467c:	2b00      	cmp	r3, #0
 801467e:	da00      	bge.n	8014682 <draw_shadow+0x3e4>
 8014680:	3301      	adds	r3, #1
 8014682:	105b      	asrs	r3, r3, #1
 8014684:	b21b      	sxth	r3, r3
 8014686:	b29b      	uxth	r3, r3
 8014688:	4423      	add	r3, r4
 801468a:	b29b      	uxth	r3, r3
 801468c:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
 8014690:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8014694:	b29c      	uxth	r4, r3
 8014696:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801469a:	4618      	mov	r0, r3
 801469c:	f7fe fddc 	bl	8013258 <lv_area_get_width>
 80146a0:	4603      	mov	r3, r0
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	da00      	bge.n	80146a8 <draw_shadow+0x40a>
 80146a6:	3301      	adds	r3, #1
 80146a8:	105b      	asrs	r3, r3, #1
 80146aa:	b21b      	sxth	r3, r3
 80146ac:	b29b      	uxth	r3, r3
 80146ae:	4423      	add	r3, r4
 80146b0:	b29b      	uxth	r3, r3
 80146b2:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4

    bool simple_mode = true;
 80146b6:	2301      	movs	r3, #1
 80146b8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
 80146bc:	f7fd fadc 	bl	8011c78 <lv_draw_mask_get_cnt>
 80146c0:	4603      	mov	r3, r0
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d003      	beq.n	80146ce <draw_shadow+0x430>
 80146c6:	2300      	movs	r3, #0
 80146c8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
 80146cc:	e018      	b.n	8014700 <draw_shadow+0x462>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
 80146ce:	1d3b      	adds	r3, r7, #4
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d105      	bne.n	80146e6 <draw_shadow+0x448>
 80146da:	1d3b      	adds	r3, r7, #4
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d003      	beq.n	80146ee <draw_shadow+0x450>
 80146e6:	2300      	movs	r3, #0
 80146e8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
 80146ec:	e008      	b.n	8014700 <draw_shadow+0x462>
    else if(dsc->shadow_spread != 0) simple_mode = false;
 80146ee:	1d3b      	adds	r3, r7, #4
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d002      	beq.n	8014700 <draw_shadow+0x462>
 80146fa:	2300      	movs	r3, #0
 80146fc:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b

    /*Create a mask*/
    lv_draw_mask_res_t mask_res;
    lv_opa_t * mask_buf = _lv_mem_buf_get(lv_area_get_width(&sh_area));
 8014700:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8014704:	4618      	mov	r0, r3
 8014706:	f7fe fda7 	bl	8013258 <lv_area_get_width>
 801470a:	4603      	mov	r3, r0
 801470c:	4618      	mov	r0, r3
 801470e:	f008 f903 	bl	801c918 <_lv_mem_buf_get>
 8014712:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

    lv_draw_mask_radius_param_t mask_rout_param;
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
 8014716:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801471a:	b21a      	sxth	r2, r3
 801471c:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8014720:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8014724:	2301      	movs	r3, #1
 8014726:	f7fd fbf3 	bl	8011f10 <lv_draw_mask_radius_init>

    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 801472a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801472e:	2100      	movs	r1, #0
 8014730:	4618      	mov	r0, r3
 8014732:	f7fd f9d3 	bl	8011adc <lv_draw_mask_add>
 8014736:	4603      	mov	r3, r0
 8014738:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    lv_area_t a;

    /*Draw the top right corner*/
    int32_t y;
    lv_opa_t * sh_buf_tmp;
    a.x2 = sh_area.x2;
 801473c:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8014740:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.x1 = a.x2 - corner_size + 1;
 8014744:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8014748:	b29a      	uxth	r2, r3
 801474a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801474e:	b29b      	uxth	r3, r3
 8014750:	1ad3      	subs	r3, r2, r3
 8014752:	b29b      	uxth	r3, r3
 8014754:	3301      	adds	r3, #1
 8014756:	b29b      	uxth	r3, r3
 8014758:	b21b      	sxth	r3, r3
 801475a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.y1 = sh_area.y1;
 801475e:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8014762:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = a.y1 + corner_size - 1;
 8014766:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801476a:	b29a      	uxth	r2, r3
 801476c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014770:	b29b      	uxth	r3, r3
 8014772:	4413      	add	r3, r2
 8014774:	b29b      	uxth	r3, r3
 8014776:	3b01      	subs	r3, #1
 8014778:	b29b      	uxth	r3, r3
 801477a:	b21b      	sxth	r3, r3
 801477c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    lv_area_t ca;
    bool has_com = _lv_area_intersect(&ca, &a, clip);
 8014780:	f107 0308 	add.w	r3, r7, #8
 8014784:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8014788:	f107 0058 	add.w	r0, r7, #88	; 0x58
 801478c:	681a      	ldr	r2, [r3, #0]
 801478e:	f006 fb7b 	bl	801ae88 <_lv_area_intersect>
 8014792:	4603      	mov	r3, r0
 8014794:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8014798:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 801479c:	2b00      	cmp	r3, #0
 801479e:	f000 80bf 	beq.w	8014920 <draw_shadow+0x682>
 80147a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80147a6:	b21a      	sxth	r2, r3
 80147a8:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80147ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80147b0:	4618      	mov	r0, r3
 80147b2:	f006 fd4d 	bl	801b250 <_lv_area_is_in>
 80147b6:	4603      	mov	r3, r0
 80147b8:	f083 0301 	eor.w	r3, r3, #1
 80147bc:	b2db      	uxtb	r3, r3
 80147be:	2b00      	cmp	r3, #0
 80147c0:	f000 80ae 	beq.w	8014920 <draw_shadow+0x682>
        /*Avoid overlap in the middle with large radius*/
        if(ca.y2 > h_half) ca.y2 = h_half;
 80147c4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80147c8:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 80147cc:	429a      	cmp	r2, r3
 80147ce:	da03      	bge.n	80147d8 <draw_shadow+0x53a>
 80147d0:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80147d4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
 80147d8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80147dc:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 80147e0:	429a      	cmp	r2, r3
 80147e2:	db06      	blt.n	80147f2 <draw_shadow+0x554>
 80147e4:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80147e8:	3301      	adds	r3, #1
 80147ea:	b29b      	uxth	r3, r3
 80147ec:	b21b      	sxth	r3, r3
 80147ee:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

        lv_coord_t h = lv_area_get_height(&ca);
 80147f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80147f6:	4618      	mov	r0, r3
 80147f8:	f7fe fd45 	bl	8013286 <lv_area_get_height>
 80147fc:	4603      	mov	r3, r0
 80147fe:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
        lv_coord_t w = lv_area_get_width(&ca);
 8014802:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014806:	4618      	mov	r0, r3
 8014808:	f7fe fd26 	bl	8013258 <lv_area_get_width>
 801480c:	4603      	mov	r3, r0
 801480e:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
        if(w > 0) {
 8014812:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 8014816:	2b00      	cmp	r3, #0
 8014818:	f340 8082 	ble.w	8014920 <draw_shadow+0x682>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 801481c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8014820:	461a      	mov	r2, r3
 8014822:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8014826:	1ad3      	subs	r3, r2, r3
 8014828:	461a      	mov	r2, r3
 801482a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801482e:	4413      	add	r3, r2
 8014830:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 8014834:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8014838:	461a      	mov	r2, r3
 801483a:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801483e:	1ad3      	subs	r3, r2, r3
 8014840:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014844:	fb02 f303 	mul.w	r3, r2, r3
 8014848:	461a      	mov	r2, r3
 801484a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801484e:	4413      	add	r3, r2
 8014850:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

            lv_area_t fa;
            lv_area_copy(&fa, &ca);
 8014854:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014858:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801485c:	4611      	mov	r1, r2
 801485e:	4618      	mov	r0, r3
 8014860:	f7fe fcec 	bl	801323c <lv_area_copy>
            fa.y2 = fa.y1;
 8014864:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8014868:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

            for(y = 0; y < h; y++) {
 801486c:	2300      	movs	r3, #0
 801486e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014872:	e04f      	b.n	8014914 <draw_shadow+0x676>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8014874:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 8014878:	461a      	mov	r2, r3
 801487a:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 801487e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8014882:	f008 f9ad 	bl	801cbe0 <_lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8014886:	f9b7 1050 	ldrsh.w	r1, [r7, #80]	; 0x50
 801488a:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 801488e:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 8014892:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8014896:	f7fd f953 	bl	8011b40 <lv_draw_mask_apply>
 801489a:	4603      	mov	r3, r0
 801489c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 80148a0:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80148a4:	2b01      	cmp	r3, #1
 80148a6:	d102      	bne.n	80148ae <draw_shadow+0x610>
 80148a8:	2302      	movs	r3, #2
 80148aa:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 80148ae:	1d3b      	adds	r3, r7, #4
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80148b6:	1d3a      	adds	r2, r7, #4
 80148b8:	6812      	ldr	r2, [r2, #0]
 80148ba:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80148be:	f107 0008 	add.w	r0, r7, #8
 80148c2:	9302      	str	r3, [sp, #8]
 80148c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80148c8:	9301      	str	r3, [sp, #4]
 80148ca:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80148ce:	9300      	str	r3, [sp, #0]
 80148d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80148d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80148d6:	6800      	ldr	r0, [r0, #0]
 80148d8:	f7f7 ff04 	bl	800c6e4 <_lv_blend_fill>
                               mask_res, opa, dsc->shadow_blend_mode);
                fa.y1++;
 80148dc:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80148e0:	b29b      	uxth	r3, r3
 80148e2:	3301      	adds	r3, #1
 80148e4:	b29b      	uxth	r3, r3
 80148e6:	b21b      	sxth	r3, r3
 80148e8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                fa.y2++;
 80148ec:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80148f0:	b29b      	uxth	r3, r3
 80148f2:	3301      	adds	r3, #1
 80148f4:	b29b      	uxth	r3, r3
 80148f6:	b21b      	sxth	r3, r3
 80148f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                sh_buf_tmp += corner_size;
 80148fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014900:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8014904:	4413      	add	r3, r2
 8014906:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            for(y = 0; y < h; y++) {
 801490a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801490e:	3301      	adds	r3, #1
 8014910:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014914:	f9b7 30ca 	ldrsh.w	r3, [r7, #202]	; 0xca
 8014918:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801491c:	429a      	cmp	r2, r3
 801491e:	dba9      	blt.n	8014874 <draw_shadow+0x5d6>
            }
        }
    }

    /*Draw the bottom right corner*/
    a.x2 = sh_area.x2;
 8014920:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8014924:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.x1 = a.x2 - corner_size + 1;
 8014928:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801492c:	b29a      	uxth	r2, r3
 801492e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014932:	b29b      	uxth	r3, r3
 8014934:	1ad3      	subs	r3, r2, r3
 8014936:	b29b      	uxth	r3, r3
 8014938:	3301      	adds	r3, #1
 801493a:	b29b      	uxth	r3, r3
 801493c:	b21b      	sxth	r3, r3
 801493e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.y1 = sh_area.y2 - corner_size + 1;
 8014942:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8014946:	b29a      	uxth	r2, r3
 8014948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801494c:	b29b      	uxth	r3, r3
 801494e:	1ad3      	subs	r3, r2, r3
 8014950:	b29b      	uxth	r3, r3
 8014952:	3301      	adds	r3, #1
 8014954:	b29b      	uxth	r3, r3
 8014956:	b21b      	sxth	r3, r3
 8014958:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = sh_area.y2;
 801495c:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8014960:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    has_com = _lv_area_intersect(&ca, &a, clip);
 8014964:	f107 0308 	add.w	r3, r7, #8
 8014968:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801496c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8014970:	681a      	ldr	r2, [r3, #0]
 8014972:	f006 fa89 	bl	801ae88 <_lv_area_intersect>
 8014976:	4603      	mov	r3, r0
 8014978:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 801497c:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8014980:	2b00      	cmp	r3, #0
 8014982:	f000 80c2 	beq.w	8014b0a <draw_shadow+0x86c>
 8014986:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801498a:	b21a      	sxth	r2, r3
 801498c:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8014990:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014994:	4618      	mov	r0, r3
 8014996:	f006 fc5b 	bl	801b250 <_lv_area_is_in>
 801499a:	4603      	mov	r3, r0
 801499c:	f083 0301 	eor.w	r3, r3, #1
 80149a0:	b2db      	uxtb	r3, r3
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	f000 80b1 	beq.w	8014b0a <draw_shadow+0x86c>
        /*Avoid overlap in the middle with large radius*/
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
 80149a8:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80149ac:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 80149b0:	429a      	cmp	r2, r3
 80149b2:	db06      	blt.n	80149c2 <draw_shadow+0x724>
 80149b4:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80149b8:	3301      	adds	r3, #1
 80149ba:	b29b      	uxth	r3, r3
 80149bc:	b21b      	sxth	r3, r3
 80149be:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
 80149c2:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80149c6:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 80149ca:	429a      	cmp	r2, r3
 80149cc:	db06      	blt.n	80149dc <draw_shadow+0x73e>
 80149ce:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80149d2:	3301      	adds	r3, #1
 80149d4:	b29b      	uxth	r3, r3
 80149d6:	b21b      	sxth	r3, r3
 80149d8:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

        lv_coord_t h = lv_area_get_height(&ca);
 80149dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80149e0:	4618      	mov	r0, r3
 80149e2:	f7fe fc50 	bl	8013286 <lv_area_get_height>
 80149e6:	4603      	mov	r3, r0
 80149e8:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
        lv_coord_t w = lv_area_get_width(&ca);
 80149ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80149f0:	4618      	mov	r0, r3
 80149f2:	f7fe fc31 	bl	8013258 <lv_area_get_width>
 80149f6:	4603      	mov	r3, r0
 80149f8:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4

        if(w > 0) {
 80149fc:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	f340 8082 	ble.w	8014b0a <draw_shadow+0x86c>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 8014a06:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8014a0a:	461a      	mov	r2, r3
 8014a0c:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8014a10:	1ad3      	subs	r3, r2, r3
 8014a12:	461a      	mov	r2, r3
 8014a14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014a18:	4413      	add	r3, r2
 8014a1a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 8014a1e:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8014a22:	461a      	mov	r2, r3
 8014a24:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8014a28:	1ad3      	subs	r3, r2, r3
 8014a2a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014a2e:	fb02 f303 	mul.w	r3, r2, r3
 8014a32:	461a      	mov	r2, r3
 8014a34:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8014a38:	4413      	add	r3, r2
 8014a3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

            lv_area_t fa;
            lv_area_copy(&fa, &ca);
 8014a3e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014a42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014a46:	4611      	mov	r1, r2
 8014a48:	4618      	mov	r0, r3
 8014a4a:	f7fe fbf7 	bl	801323c <lv_area_copy>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
 8014a4e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014a52:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

            for(y = 0; y < h; y++) {
 8014a56:	2300      	movs	r3, #0
 8014a58:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014a5c:	e04f      	b.n	8014afe <draw_shadow+0x860>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8014a5e:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 8014a62:	461a      	mov	r2, r3
 8014a64:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8014a68:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8014a6c:	f008 f8b8 	bl	801cbe0 <_lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8014a70:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	; 0x48
 8014a74:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 8014a78:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 8014a7c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8014a80:	f7fd f85e 	bl	8011b40 <lv_draw_mask_apply>
 8014a84:	4603      	mov	r3, r0
 8014a86:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014a8a:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8014a8e:	2b01      	cmp	r3, #1
 8014a90:	d102      	bne.n	8014a98 <draw_shadow+0x7fa>
 8014a92:	2302      	movs	r3, #2
 8014a94:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8014a98:	1d3b      	adds	r3, r7, #4
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014aa0:	1d3a      	adds	r2, r7, #4
 8014aa2:	6812      	ldr	r2, [r2, #0]
 8014aa4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8014aa8:	f107 0008 	add.w	r0, r7, #8
 8014aac:	9302      	str	r3, [sp, #8]
 8014aae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8014ab2:	9301      	str	r3, [sp, #4]
 8014ab4:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8014ab8:	9300      	str	r3, [sp, #0]
 8014aba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014abe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014ac0:	6800      	ldr	r0, [r0, #0]
 8014ac2:	f7f7 fe0f 	bl	800c6e4 <_lv_blend_fill>
                               mask_res, opa, dsc->shadow_blend_mode);
                fa.y1--;
 8014ac6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014aca:	b29b      	uxth	r3, r3
 8014acc:	3b01      	subs	r3, #1
 8014ace:	b29b      	uxth	r3, r3
 8014ad0:	b21b      	sxth	r3, r3
 8014ad2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                fa.y2--;
 8014ad6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014ada:	b29b      	uxth	r3, r3
 8014adc:	3b01      	subs	r3, #1
 8014ade:	b29b      	uxth	r3, r3
 8014ae0:	b21b      	sxth	r3, r3
 8014ae2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
                sh_buf_tmp += corner_size;
 8014ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014aea:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8014aee:	4413      	add	r3, r2
 8014af0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            for(y = 0; y < h; y++) {
 8014af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014af8:	3301      	adds	r3, #1
 8014afa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014afe:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 8014b02:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8014b06:	429a      	cmp	r2, r3
 8014b08:	dba9      	blt.n	8014a5e <draw_shadow+0x7c0>
            }
        }
    }

    /*Fill the right side*/
    a.x2 = sh_area.x2;
 8014b0a:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8014b0e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.x1 = a.x2 - corner_size + 1;
 8014b12:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8014b16:	b29a      	uxth	r2, r3
 8014b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014b1c:	b29b      	uxth	r3, r3
 8014b1e:	1ad3      	subs	r3, r2, r3
 8014b20:	b29b      	uxth	r3, r3
 8014b22:	3301      	adds	r3, #1
 8014b24:	b29b      	uxth	r3, r3
 8014b26:	b21b      	sxth	r3, r3
 8014b28:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.y1 = sh_area.y1 + corner_size;
 8014b2c:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8014b30:	b29a      	uxth	r2, r3
 8014b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014b36:	b29b      	uxth	r3, r3
 8014b38:	4413      	add	r3, r2
 8014b3a:	b29b      	uxth	r3, r3
 8014b3c:	b21b      	sxth	r3, r3
 8014b3e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = sh_area.y2 - corner_size;
 8014b42:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8014b46:	b29a      	uxth	r2, r3
 8014b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014b4c:	b29b      	uxth	r3, r3
 8014b4e:	1ad3      	subs	r3, r2, r3
 8014b50:	b29b      	uxth	r3, r3
 8014b52:	b21b      	sxth	r3, r3
 8014b54:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    has_com = _lv_area_intersect(&ca, &a, clip);
 8014b58:	f107 0308 	add.w	r3, r7, #8
 8014b5c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8014b60:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8014b64:	681a      	ldr	r2, [r3, #0]
 8014b66:	f006 f98f 	bl	801ae88 <_lv_area_intersect>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8014b70:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	f000 80bd 	beq.w	8014cf4 <draw_shadow+0xa56>
 8014b7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8014b7e:	b21a      	sxth	r2, r3
 8014b80:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8014b84:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014b88:	4618      	mov	r0, r3
 8014b8a:	f006 fb61 	bl	801b250 <_lv_area_is_in>
 8014b8e:	4603      	mov	r3, r0
 8014b90:	f083 0301 	eor.w	r3, r3, #1
 8014b94:	b2db      	uxtb	r3, r3
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	f000 80ac 	beq.w	8014cf4 <draw_shadow+0xa56>
        if(simple_mode) ca.x1 = LV_MATH_MAX(ca.x1, coords->x2);
 8014b9c:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d00c      	beq.n	8014bbe <draw_shadow+0x920>
 8014ba4:	f107 030c 	add.w	r3, r7, #12
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8014bae:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8014bb2:	4293      	cmp	r3, r2
 8014bb4:	bfb8      	it	lt
 8014bb6:	4613      	movlt	r3, r2
 8014bb8:	b21b      	sxth	r3, r3
 8014bba:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
        /*Draw horizontal lines*/
        lv_coord_t w = lv_area_get_width(&ca);
 8014bbe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	f7fe fb48 	bl	8013258 <lv_area_get_width>
 8014bc8:	4603      	mov	r3, r0
 8014bca:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        if(w > 0) {
 8014bce:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	f340 808e 	ble.w	8014cf4 <draw_shadow+0xa56>
            lv_coord_t h = lv_area_get_height(&ca);
 8014bd8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f7fe fb52 	bl	8013286 <lv_area_get_height>
 8014be2:	4603      	mov	r3, r0
 8014be4:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0

            /*The last line of the shadow is repeated on the side*/
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
 8014be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014bec:	3b01      	subs	r3, #1
 8014bee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014bf2:	fb02 f303 	mul.w	r3, r2, r3
 8014bf6:	461a      	mov	r2, r3
 8014bf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014bfc:	4413      	add	r3, r2
 8014bfe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            sh_buf_tmp += ca.x1 - a.x1;
 8014c02:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8014c06:	461a      	mov	r2, r3
 8014c08:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8014c0c:	1ad3      	subs	r3, r2, r3
 8014c0e:	461a      	mov	r2, r3
 8014c10:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8014c14:	4413      	add	r3, r2
 8014c16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

            lv_area_t fa;
            lv_area_copy(&fa, &ca);
 8014c1a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014c1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014c22:	4611      	mov	r1, r2
 8014c24:	4618      	mov	r0, r3
 8014c26:	f7fe fb09 	bl	801323c <lv_area_copy>
            fa.y2 = fa.y1;
 8014c2a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8014c2e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 8014c32:	2301      	movs	r3, #1
 8014c34:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
            for(y = 0; y < h; y++) {
 8014c38:	2300      	movs	r3, #0
 8014c3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014c3e:	e053      	b.n	8014ce8 <draw_shadow+0xa4a>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8014c40:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 8014c44:	461a      	mov	r2, r3
 8014c46:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8014c4a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8014c4e:	f007 ffc7 	bl	801cbe0 <_lv_memcpy>

                if(simple_mode) {
 8014c52:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d003      	beq.n	8014c62 <draw_shadow+0x9c4>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014c5a:	2302      	movs	r3, #2
 8014c5c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 8014c60:	e013      	b.n	8014c8a <draw_shadow+0x9ec>
                }
                else {
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8014c62:	f9b7 1040 	ldrsh.w	r1, [r7, #64]	; 0x40
 8014c66:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8014c6a:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 8014c6e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8014c72:	f7fc ff65 	bl	8011b40 <lv_draw_mask_apply>
 8014c76:	4603      	mov	r3, r0
 8014c78:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014c7c:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8014c80:	2b01      	cmp	r3, #1
 8014c82:	d102      	bne.n	8014c8a <draw_shadow+0x9ec>
 8014c84:	2302      	movs	r3, #2
 8014c86:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                }

                _lv_blend_fill(clip, &fa,
 8014c8a:	1d3b      	adds	r3, r7, #4
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014c92:	1d3a      	adds	r2, r7, #4
 8014c94:	6812      	ldr	r2, [r2, #0]
 8014c96:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
 8014c9a:	1d3a      	adds	r2, r7, #4
 8014c9c:	6812      	ldr	r2, [r2, #0]
 8014c9e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8014ca2:	f107 0008 	add.w	r0, r7, #8
 8014ca6:	9102      	str	r1, [sp, #8]
 8014ca8:	9301      	str	r3, [sp, #4]
 8014caa:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8014cae:	9300      	str	r3, [sp, #0]
 8014cb0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014cb4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014cb6:	4621      	mov	r1, r4
 8014cb8:	6800      	ldr	r0, [r0, #0]
 8014cba:	f7f7 fd13 	bl	800c6e4 <_lv_blend_fill>
                               dsc->shadow_color, mask_buf, mask_res, dsc->shadow_opa, dsc->shadow_blend_mode);
                fa.y1++;
 8014cbe:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8014cc2:	b29b      	uxth	r3, r3
 8014cc4:	3301      	adds	r3, #1
 8014cc6:	b29b      	uxth	r3, r3
 8014cc8:	b21b      	sxth	r3, r3
 8014cca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
                fa.y2++;
 8014cce:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8014cd2:	b29b      	uxth	r3, r3
 8014cd4:	3301      	adds	r3, #1
 8014cd6:	b29b      	uxth	r3, r3
 8014cd8:	b21b      	sxth	r3, r3
 8014cda:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            for(y = 0; y < h; y++) {
 8014cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014ce2:	3301      	adds	r3, #1
 8014ce4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014ce8:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 8014cec:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8014cf0:	429a      	cmp	r2, r3
 8014cf2:	dba5      	blt.n	8014c40 <draw_shadow+0x9a2>
            }
        }
    }

    /*Invert the shadow corner buffer and draw the corners on the left*/
    sh_buf_tmp = sh_buf ;
 8014cf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014cf8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    for(y = 0; y < corner_size; y++) {
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014d02:	e043      	b.n	8014d8c <draw_shadow+0xaee>
        int32_t x;
        for(x = 0; x < corner_size / 2; x++) {
 8014d04:	2300      	movs	r3, #0
 8014d06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014d0a:	e028      	b.n	8014d5e <draw_shadow+0xac0>
            lv_opa_t tmp = sh_buf_tmp[x];
 8014d0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014d10:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8014d14:	4413      	add	r3, r2
 8014d16:	781b      	ldrb	r3, [r3, #0]
 8014d18:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            sh_buf_tmp[x] = sh_buf_tmp[corner_size - x - 1];
 8014d1c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014d20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014d24:	1ad3      	subs	r3, r2, r3
 8014d26:	3b01      	subs	r3, #1
 8014d28:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8014d2c:	441a      	add	r2, r3
 8014d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014d32:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8014d36:	440b      	add	r3, r1
 8014d38:	7812      	ldrb	r2, [r2, #0]
 8014d3a:	701a      	strb	r2, [r3, #0]
            sh_buf_tmp[corner_size - x - 1] = tmp;
 8014d3c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014d40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014d44:	1ad3      	subs	r3, r2, r3
 8014d46:	3b01      	subs	r3, #1
 8014d48:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8014d4c:	4413      	add	r3, r2
 8014d4e:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8014d52:	701a      	strb	r2, [r3, #0]
        for(x = 0; x < corner_size / 2; x++) {
 8014d54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014d58:	3301      	adds	r3, #1
 8014d5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	da00      	bge.n	8014d68 <draw_shadow+0xaca>
 8014d66:	3301      	adds	r3, #1
 8014d68:	105b      	asrs	r3, r3, #1
 8014d6a:	461a      	mov	r2, r3
 8014d6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014d70:	4293      	cmp	r3, r2
 8014d72:	dbcb      	blt.n	8014d0c <draw_shadow+0xa6e>
        }
        sh_buf_tmp += corner_size;
 8014d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014d78:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8014d7c:	4413      	add	r3, r2
 8014d7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    for(y = 0; y < corner_size; y++) {
 8014d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014d86:	3301      	adds	r3, #1
 8014d88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014d8c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8014d90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014d94:	429a      	cmp	r2, r3
 8014d96:	dbb5      	blt.n	8014d04 <draw_shadow+0xa66>
    }

    /*Draw the top left corner*/
    a.x1 = sh_area.x1;
 8014d98:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8014d9c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.x2 = a.x1 + corner_size - 1;
 8014da0:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8014da4:	b29a      	uxth	r2, r3
 8014da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014daa:	b29b      	uxth	r3, r3
 8014dac:	4413      	add	r3, r2
 8014dae:	b29b      	uxth	r3, r3
 8014db0:	3b01      	subs	r3, #1
 8014db2:	b29b      	uxth	r3, r3
 8014db4:	b21b      	sxth	r3, r3
 8014db6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.y1 = sh_area.y1;
 8014dba:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8014dbe:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = a.y1 + corner_size - 1;
 8014dc2:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8014dc6:	b29a      	uxth	r2, r3
 8014dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014dcc:	b29b      	uxth	r3, r3
 8014dce:	4413      	add	r3, r2
 8014dd0:	b29b      	uxth	r3, r3
 8014dd2:	3b01      	subs	r3, #1
 8014dd4:	b29b      	uxth	r3, r3
 8014dd6:	b21b      	sxth	r3, r3
 8014dd8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    has_com = _lv_area_intersect(&ca, &a, clip);
 8014ddc:	f107 0308 	add.w	r3, r7, #8
 8014de0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8014de4:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8014de8:	681a      	ldr	r2, [r3, #0]
 8014dea:	f006 f84d 	bl	801ae88 <_lv_area_intersect>
 8014dee:	4603      	mov	r3, r0
 8014df0:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8014df4:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	f000 80b8 	beq.w	8014f6e <draw_shadow+0xcd0>
 8014dfe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8014e02:	b21a      	sxth	r2, r3
 8014e04:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8014e08:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	f006 fa1f 	bl	801b250 <_lv_area_is_in>
 8014e12:	4603      	mov	r3, r0
 8014e14:	f083 0301 	eor.w	r3, r3, #1
 8014e18:	b2db      	uxtb	r3, r3
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	f000 80a7 	beq.w	8014f6e <draw_shadow+0xcd0>
        /*Avoid overlap in the middle with large radius*/
        if(ca.y2 > h_half) ca.y2 = h_half;
 8014e20:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8014e24:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 8014e28:	429a      	cmp	r2, r3
 8014e2a:	da03      	bge.n	8014e34 <draw_shadow+0xb96>
 8014e2c:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8014e30:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        if(ca.x2 > w_half) ca.x2 = w_half;
 8014e34:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8014e38:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 8014e3c:	429a      	cmp	r2, r3
 8014e3e:	da03      	bge.n	8014e48 <draw_shadow+0xbaa>
 8014e40:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8014e44:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

        lv_coord_t h = lv_area_get_height(&ca);
 8014e48:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	f7fe fa1a 	bl	8013286 <lv_area_get_height>
 8014e52:	4603      	mov	r3, r0
 8014e54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
        lv_coord_t w = lv_area_get_width(&ca);
 8014e58:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	f7fe f9fb 	bl	8013258 <lv_area_get_width>
 8014e62:	4603      	mov	r3, r0
 8014e64:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
        if(w > 0) {
 8014e68:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	dd7e      	ble.n	8014f6e <draw_shadow+0xcd0>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 8014e70:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8014e74:	461a      	mov	r2, r3
 8014e76:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8014e7a:	1ad3      	subs	r3, r2, r3
 8014e7c:	461a      	mov	r2, r3
 8014e7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014e82:	4413      	add	r3, r2
 8014e84:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 8014e88:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8014e8c:	461a      	mov	r2, r3
 8014e8e:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8014e92:	1ad3      	subs	r3, r2, r3
 8014e94:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014e98:	fb02 f303 	mul.w	r3, r2, r3
 8014e9c:	461a      	mov	r2, r3
 8014e9e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8014ea2:	4413      	add	r3, r2
 8014ea4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

            lv_area_t fa;
            lv_area_copy(&fa, &ca);
 8014ea8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014eac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014eb0:	4611      	mov	r1, r2
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	f7fe f9c2 	bl	801323c <lv_area_copy>
            fa.y2 = fa.y1;
 8014eb8:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8014ebc:	87fb      	strh	r3, [r7, #62]	; 0x3e

            for(y = 0; y < h; y++) {
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014ec4:	e04d      	b.n	8014f62 <draw_shadow+0xcc4>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8014ec6:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 8014eca:	461a      	mov	r2, r3
 8014ecc:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8014ed0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8014ed4:	f007 fe84 	bl	801cbe0 <_lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 8014ed8:	f9b7 1038 	ldrsh.w	r1, [r7, #56]	; 0x38
 8014edc:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8014ee0:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 8014ee4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8014ee8:	f7fc fe2a 	bl	8011b40 <lv_draw_mask_apply>
 8014eec:	4603      	mov	r3, r0
 8014eee:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014ef2:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8014ef6:	2b01      	cmp	r3, #1
 8014ef8:	d102      	bne.n	8014f00 <draw_shadow+0xc62>
 8014efa:	2302      	movs	r3, #2
 8014efc:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 8014f00:	1d3b      	adds	r3, r7, #4
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014f08:	1d3a      	adds	r2, r7, #4
 8014f0a:	6812      	ldr	r2, [r2, #0]
 8014f0c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8014f10:	f107 0008 	add.w	r0, r7, #8
 8014f14:	9302      	str	r3, [sp, #8]
 8014f16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8014f1a:	9301      	str	r3, [sp, #4]
 8014f1c:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8014f20:	9300      	str	r3, [sp, #0]
 8014f22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014f26:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014f28:	6800      	ldr	r0, [r0, #0]
 8014f2a:	f7f7 fbdb 	bl	800c6e4 <_lv_blend_fill>
                               mask_res, opa, dsc->shadow_blend_mode);
                fa.y1++;
 8014f2e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8014f32:	b29b      	uxth	r3, r3
 8014f34:	3301      	adds	r3, #1
 8014f36:	b29b      	uxth	r3, r3
 8014f38:	b21b      	sxth	r3, r3
 8014f3a:	877b      	strh	r3, [r7, #58]	; 0x3a
                fa.y2++;
 8014f3c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8014f40:	b29b      	uxth	r3, r3
 8014f42:	3301      	adds	r3, #1
 8014f44:	b29b      	uxth	r3, r3
 8014f46:	b21b      	sxth	r3, r3
 8014f48:	87fb      	strh	r3, [r7, #62]	; 0x3e
                sh_buf_tmp += corner_size;
 8014f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014f4e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8014f52:	4413      	add	r3, r2
 8014f54:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            for(y = 0; y < h; y++) {
 8014f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014f5c:	3301      	adds	r3, #1
 8014f5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014f62:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	; 0xbe
 8014f66:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8014f6a:	429a      	cmp	r2, r3
 8014f6c:	dbab      	blt.n	8014ec6 <draw_shadow+0xc28>
            }
        }
    }

    /*Draw the bottom left corner*/
    a.x1 = sh_area.x1;
 8014f6e:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8014f72:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.x2 = a.x1 + corner_size - 1;
 8014f76:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8014f7a:	b29a      	uxth	r2, r3
 8014f7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014f80:	b29b      	uxth	r3, r3
 8014f82:	4413      	add	r3, r2
 8014f84:	b29b      	uxth	r3, r3
 8014f86:	3b01      	subs	r3, #1
 8014f88:	b29b      	uxth	r3, r3
 8014f8a:	b21b      	sxth	r3, r3
 8014f8c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.y1 = sh_area.y2 - corner_size + 1;
 8014f90:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8014f94:	b29a      	uxth	r2, r3
 8014f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014f9a:	b29b      	uxth	r3, r3
 8014f9c:	1ad3      	subs	r3, r2, r3
 8014f9e:	b29b      	uxth	r3, r3
 8014fa0:	3301      	adds	r3, #1
 8014fa2:	b29b      	uxth	r3, r3
 8014fa4:	b21b      	sxth	r3, r3
 8014fa6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = sh_area.y2;
 8014faa:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8014fae:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    has_com = _lv_area_intersect(&ca, &a, clip);
 8014fb2:	f107 0308 	add.w	r3, r7, #8
 8014fb6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8014fba:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8014fbe:	681a      	ldr	r2, [r3, #0]
 8014fc0:	f005 ff62 	bl	801ae88 <_lv_area_intersect>
 8014fc4:	4603      	mov	r3, r0
 8014fc6:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8014fca:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	f000 80bb 	beq.w	801514a <draw_shadow+0xeac>
 8014fd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8014fd8:	b21a      	sxth	r2, r3
 8014fda:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8014fde:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f006 f934 	bl	801b250 <_lv_area_is_in>
 8014fe8:	4603      	mov	r3, r0
 8014fea:	f083 0301 	eor.w	r3, r3, #1
 8014fee:	b2db      	uxtb	r3, r3
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	f000 80aa 	beq.w	801514a <draw_shadow+0xeac>
        /*Avoid overlap in the middle with large radius*/
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
 8014ff6:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8014ffa:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 8014ffe:	429a      	cmp	r2, r3
 8015000:	db06      	blt.n	8015010 <draw_shadow+0xd72>
 8015002:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8015006:	3301      	adds	r3, #1
 8015008:	b29b      	uxth	r3, r3
 801500a:	b21b      	sxth	r3, r3
 801500c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        if(ca.x2 > w_half) ca.x2 = w_half;
 8015010:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8015014:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 8015018:	429a      	cmp	r2, r3
 801501a:	da03      	bge.n	8015024 <draw_shadow+0xd86>
 801501c:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8015020:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        lv_coord_t h = lv_area_get_height(&ca);
 8015024:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015028:	4618      	mov	r0, r3
 801502a:	f7fe f92c 	bl	8013286 <lv_area_get_height>
 801502e:	4603      	mov	r3, r0
 8015030:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        lv_coord_t w = lv_area_get_width(&ca);
 8015034:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015038:	4618      	mov	r0, r3
 801503a:	f7fe f90d 	bl	8013258 <lv_area_get_width>
 801503e:	4603      	mov	r3, r0
 8015040:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8

        if(w > 0) {
 8015044:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
 8015048:	2b00      	cmp	r3, #0
 801504a:	dd7e      	ble.n	801514a <draw_shadow+0xeac>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 801504c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8015050:	461a      	mov	r2, r3
 8015052:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8015056:	1ad3      	subs	r3, r2, r3
 8015058:	461a      	mov	r2, r3
 801505a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801505e:	4413      	add	r3, r2
 8015060:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 8015064:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8015068:	461a      	mov	r2, r3
 801506a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801506e:	1ad3      	subs	r3, r2, r3
 8015070:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8015074:	fb02 f303 	mul.w	r3, r2, r3
 8015078:	461a      	mov	r2, r3
 801507a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801507e:	4413      	add	r3, r2
 8015080:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

            lv_area_t fa;
            lv_area_copy(&fa, &ca);
 8015084:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8015088:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801508c:	4611      	mov	r1, r2
 801508e:	4618      	mov	r0, r3
 8015090:	f7fe f8d4 	bl	801323c <lv_area_copy>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
 8015094:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8015098:	867b      	strh	r3, [r7, #50]	; 0x32

            for(y = 0; y < h; y++) {
 801509a:	2300      	movs	r3, #0
 801509c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80150a0:	e04d      	b.n	801513e <draw_shadow+0xea0>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 80150a2:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
 80150a6:	461a      	mov	r2, r3
 80150a8:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80150ac:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80150b0:	f007 fd96 	bl	801cbe0 <_lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 80150b4:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 80150b8:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80150bc:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
 80150c0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80150c4:	f7fc fd3c 	bl	8011b40 <lv_draw_mask_apply>
 80150c8:	4603      	mov	r3, r0
 80150ca:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 80150ce:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80150d2:	2b01      	cmp	r3, #1
 80150d4:	d102      	bne.n	80150dc <draw_shadow+0xe3e>
 80150d6:	2302      	movs	r3, #2
 80150d8:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 80150dc:	1d3b      	adds	r3, r7, #4
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80150e4:	1d3a      	adds	r2, r7, #4
 80150e6:	6812      	ldr	r2, [r2, #0]
 80150e8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80150ec:	f107 0008 	add.w	r0, r7, #8
 80150f0:	9302      	str	r3, [sp, #8]
 80150f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80150f6:	9301      	str	r3, [sp, #4]
 80150f8:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80150fc:	9300      	str	r3, [sp, #0]
 80150fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015102:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8015104:	6800      	ldr	r0, [r0, #0]
 8015106:	f7f7 faed 	bl	800c6e4 <_lv_blend_fill>
                               mask_res, opa, dsc->shadow_blend_mode);
                fa.y1--;
 801510a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801510e:	b29b      	uxth	r3, r3
 8015110:	3b01      	subs	r3, #1
 8015112:	b29b      	uxth	r3, r3
 8015114:	b21b      	sxth	r3, r3
 8015116:	867b      	strh	r3, [r7, #50]	; 0x32
                fa.y2--;
 8015118:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801511c:	b29b      	uxth	r3, r3
 801511e:	3b01      	subs	r3, #1
 8015120:	b29b      	uxth	r3, r3
 8015122:	b21b      	sxth	r3, r3
 8015124:	86fb      	strh	r3, [r7, #54]	; 0x36
                sh_buf_tmp += corner_size;
 8015126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801512a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801512e:	4413      	add	r3, r2
 8015130:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            for(y = 0; y < h; y++) {
 8015134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015138:	3301      	adds	r3, #1
 801513a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801513e:	f9b7 30ba 	ldrsh.w	r3, [r7, #186]	; 0xba
 8015142:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8015146:	429a      	cmp	r2, r3
 8015148:	dbab      	blt.n	80150a2 <draw_shadow+0xe04>
            }
        }
    }

    /*Fill the left side*/
    a.x1 = sh_area.x1;
 801514a:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 801514e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.x2 = a.x1 + corner_size - 1;
 8015152:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8015156:	b29a      	uxth	r2, r3
 8015158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801515c:	b29b      	uxth	r3, r3
 801515e:	4413      	add	r3, r2
 8015160:	b29b      	uxth	r3, r3
 8015162:	3b01      	subs	r3, #1
 8015164:	b29b      	uxth	r3, r3
 8015166:	b21b      	sxth	r3, r3
 8015168:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.y1 = sh_area.y1 + corner_size;
 801516c:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8015170:	b29a      	uxth	r2, r3
 8015172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015176:	b29b      	uxth	r3, r3
 8015178:	4413      	add	r3, r2
 801517a:	b29b      	uxth	r3, r3
 801517c:	b21b      	sxth	r3, r3
 801517e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = sh_area.y2 - corner_size;
 8015182:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8015186:	b29a      	uxth	r2, r3
 8015188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801518c:	b29b      	uxth	r3, r3
 801518e:	1ad3      	subs	r3, r2, r3
 8015190:	b29b      	uxth	r3, r3
 8015192:	b21b      	sxth	r3, r3
 8015194:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    has_com = _lv_area_intersect(&ca, &a, clip);
 8015198:	f107 0308 	add.w	r3, r7, #8
 801519c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80151a0:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80151a4:	681a      	ldr	r2, [r3, #0]
 80151a6:	f005 fe6f 	bl	801ae88 <_lv_area_intersect>
 80151aa:	4603      	mov	r3, r0
 80151ac:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 80151b0:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	f000 80b7 	beq.w	8015328 <draw_shadow+0x108a>
 80151ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80151be:	b21a      	sxth	r2, r3
 80151c0:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80151c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80151c8:	4618      	mov	r0, r3
 80151ca:	f006 f841 	bl	801b250 <_lv_area_is_in>
 80151ce:	4603      	mov	r3, r0
 80151d0:	f083 0301 	eor.w	r3, r3, #1
 80151d4:	b2db      	uxtb	r3, r3
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	f000 80a6 	beq.w	8015328 <draw_shadow+0x108a>
        if(simple_mode) ca.x2 = LV_MATH_MIN(coords->x1, ca.x2);
 80151dc:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d00c      	beq.n	80151fe <draw_shadow+0xf60>
 80151e4:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 80151e8:	f107 030c 	add.w	r3, r7, #12
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151f2:	4293      	cmp	r3, r2
 80151f4:	bfa8      	it	ge
 80151f6:	4613      	movge	r3, r2
 80151f8:	b21b      	sxth	r3, r3
 80151fa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        /*Draw vertical lines*/
        lv_coord_t w = lv_area_get_width(&ca);
 80151fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015202:	4618      	mov	r0, r3
 8015204:	f7fe f828 	bl	8013258 <lv_area_get_width>
 8015208:	4603      	mov	r3, r0
 801520a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
        if(w > 0) {
 801520e:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8015212:	2b00      	cmp	r3, #0
 8015214:	f340 8088 	ble.w	8015328 <draw_shadow+0x108a>
            lv_coord_t h = lv_area_get_height(&ca);
 8015218:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801521c:	4618      	mov	r0, r3
 801521e:	f7fe f832 	bl	8013286 <lv_area_get_height>
 8015222:	4603      	mov	r3, r0
 8015224:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
            /*The last line of the shadow is repeated on the side*/
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
 8015228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801522c:	3b01      	subs	r3, #1
 801522e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8015232:	fb02 f303 	mul.w	r3, r2, r3
 8015236:	461a      	mov	r2, r3
 8015238:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801523c:	4413      	add	r3, r2
 801523e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            sh_buf_tmp += ca.x1 - a.x1;
 8015242:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8015246:	461a      	mov	r2, r3
 8015248:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801524c:	1ad3      	subs	r3, r2, r3
 801524e:	461a      	mov	r2, r3
 8015250:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8015254:	4413      	add	r3, r2
 8015256:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

            lv_area_t fa;
            lv_area_copy(&fa, &ca);
 801525a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801525e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015262:	4611      	mov	r1, r2
 8015264:	4618      	mov	r0, r3
 8015266:	f7fd ffe9 	bl	801323c <lv_area_copy>
            fa.y2 = fa.y1;
 801526a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801526e:	85fb      	strh	r3, [r7, #46]	; 0x2e
            for(y = 0; y < h; y++) {
 8015270:	2300      	movs	r3, #0
 8015272:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8015276:	e051      	b.n	801531c <draw_shadow+0x107e>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
 8015278:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 801527c:	461a      	mov	r2, r3
 801527e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8015282:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8015286:	f007 fcab 	bl	801cbe0 <_lv_memcpy>
                if(simple_mode) {
 801528a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 801528e:	2b00      	cmp	r3, #0
 8015290:	d003      	beq.n	801529a <draw_shadow+0xffc>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
 8015292:	2302      	movs	r3, #2
 8015294:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 8015298:	e013      	b.n	80152c2 <draw_shadow+0x1024>
                }
                else {
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 801529a:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 801529e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80152a2:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 80152a6:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80152aa:	f7fc fc49 	bl	8011b40 <lv_draw_mask_apply>
 80152ae:	4603      	mov	r3, r0
 80152b0:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 80152b4:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80152b8:	2b01      	cmp	r3, #1
 80152ba:	d102      	bne.n	80152c2 <draw_shadow+0x1024>
 80152bc:	2302      	movs	r3, #2
 80152be:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                }

                _lv_blend_fill(clip, &fa,
 80152c2:	1d3b      	adds	r3, r7, #4
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80152ca:	1d3a      	adds	r2, r7, #4
 80152cc:	6812      	ldr	r2, [r2, #0]
 80152ce:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
 80152d2:	1d3a      	adds	r2, r7, #4
 80152d4:	6812      	ldr	r2, [r2, #0]
 80152d6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80152da:	f107 0008 	add.w	r0, r7, #8
 80152de:	9102      	str	r1, [sp, #8]
 80152e0:	9301      	str	r3, [sp, #4]
 80152e2:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80152e6:	9300      	str	r3, [sp, #0]
 80152e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80152ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80152ee:	4621      	mov	r1, r4
 80152f0:	6800      	ldr	r0, [r0, #0]
 80152f2:	f7f7 f9f7 	bl	800c6e4 <_lv_blend_fill>
                               dsc->shadow_color, mask_buf, mask_res, dsc->shadow_opa, dsc->shadow_blend_mode);
                fa.y1++;
 80152f6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80152fa:	b29b      	uxth	r3, r3
 80152fc:	3301      	adds	r3, #1
 80152fe:	b29b      	uxth	r3, r3
 8015300:	b21b      	sxth	r3, r3
 8015302:	857b      	strh	r3, [r7, #42]	; 0x2a
                fa.y2++;
 8015304:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8015308:	b29b      	uxth	r3, r3
 801530a:	3301      	adds	r3, #1
 801530c:	b29b      	uxth	r3, r3
 801530e:	b21b      	sxth	r3, r3
 8015310:	85fb      	strh	r3, [r7, #46]	; 0x2e
            for(y = 0; y < h; y++) {
 8015312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015316:	3301      	adds	r3, #1
 8015318:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801531c:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 8015320:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8015324:	429a      	cmp	r2, r3
 8015326:	dba7      	blt.n	8015278 <draw_shadow+0xfda>
            }
        }
    }

    /*Fill the top side*/
    a.x1 = sh_area.x1 + corner_size;
 8015328:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 801532c:	b29a      	uxth	r2, r3
 801532e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015332:	b29b      	uxth	r3, r3
 8015334:	4413      	add	r3, r2
 8015336:	b29b      	uxth	r3, r3
 8015338:	b21b      	sxth	r3, r3
 801533a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.x2 = sh_area.x2 - corner_size;
 801533e:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8015342:	b29a      	uxth	r2, r3
 8015344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015348:	b29b      	uxth	r3, r3
 801534a:	1ad3      	subs	r3, r2, r3
 801534c:	b29b      	uxth	r3, r3
 801534e:	b21b      	sxth	r3, r3
 8015350:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.y1 = sh_area.y1;
 8015354:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8015358:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = sh_area.y1 + corner_size - 1;
 801535c:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8015360:	b29a      	uxth	r2, r3
 8015362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015366:	b29b      	uxth	r3, r3
 8015368:	4413      	add	r3, r2
 801536a:	b29b      	uxth	r3, r3
 801536c:	3b01      	subs	r3, #1
 801536e:	b29b      	uxth	r3, r3
 8015370:	b21b      	sxth	r3, r3
 8015372:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    has_com = _lv_area_intersect(&ca, &a, clip);
 8015376:	f107 0308 	add.w	r3, r7, #8
 801537a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801537e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8015382:	681a      	ldr	r2, [r3, #0]
 8015384:	f005 fd80 	bl	801ae88 <_lv_area_intersect>
 8015388:	4603      	mov	r3, r0
 801538a:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 801538e:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8015392:	2b00      	cmp	r3, #0
 8015394:	f000 80cd 	beq.w	8015532 <draw_shadow+0x1294>
 8015398:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801539c:	b21a      	sxth	r2, r3
 801539e:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80153a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80153a6:	4618      	mov	r0, r3
 80153a8:	f005 ff52 	bl	801b250 <_lv_area_is_in>
 80153ac:	4603      	mov	r3, r0
 80153ae:	f083 0301 	eor.w	r3, r3, #1
 80153b2:	b2db      	uxtb	r3, r3
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	f000 80bc 	beq.w	8015532 <draw_shadow+0x1294>
        if(simple_mode) ca.y2 = LV_MATH_MIN(ca.y2, coords->y1);
 80153ba:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d00c      	beq.n	80153dc <draw_shadow+0x113e>
 80153c2:	f107 030c 	add.w	r3, r7, #12
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80153cc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80153d0:	4293      	cmp	r3, r2
 80153d2:	bfa8      	it	ge
 80153d4:	4613      	movge	r3, r2
 80153d6:	b21b      	sxth	r3, r3
 80153d8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        /*Draw horizontal lines*/
        lv_coord_t w = lv_area_get_width(&ca);
 80153dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80153e0:	4618      	mov	r0, r3
 80153e2:	f7fd ff39 	bl	8013258 <lv_area_get_width>
 80153e6:	4603      	mov	r3, r0
 80153e8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
        lv_coord_t h = lv_area_get_height(&ca);
 80153ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80153f0:	4618      	mov	r0, r3
 80153f2:	f7fd ff48 	bl	8013286 <lv_area_get_height>
 80153f6:	4603      	mov	r3, r0
 80153f8:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
        sh_buf_tmp = sh_buf + corner_size - 1;
 80153fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015400:	3b01      	subs	r3, #1
 8015402:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8015406:	4413      	add	r3, r2
 8015408:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 801540c:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8015410:	461a      	mov	r2, r3
 8015412:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8015416:	1ad3      	subs	r3, r2, r3
 8015418:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801541c:	fb02 f303 	mul.w	r3, r2, r3
 8015420:	461a      	mov	r2, r3
 8015422:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8015426:	4413      	add	r3, r2
 8015428:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

        lv_area_t fa;
        lv_area_copy(&fa, &ca);
 801542c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8015430:	f107 0320 	add.w	r3, r7, #32
 8015434:	4611      	mov	r1, r2
 8015436:	4618      	mov	r0, r3
 8015438:	f7fd ff00 	bl	801323c <lv_area_copy>
        fa.y2 = fa.y1;
 801543c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015440:	84fb      	strh	r3, [r7, #38]	; 0x26
        mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 8015442:	2301      	movs	r3, #1
 8015444:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
        for(y = 0; y < h; y++) {
 8015448:	2300      	movs	r3, #0
 801544a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801544e:	e06a      	b.n	8015526 <draw_shadow+0x1288>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
 8015450:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8015454:	781b      	ldrb	r3, [r3, #0]
 8015456:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
 801545a:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 801545e:	2bff      	cmp	r3, #255	; 0xff
 8015460:	d103      	bne.n	801546a <draw_shadow+0x11cc>
 8015462:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015466:	2bff      	cmp	r3, #255	; 0xff
 8015468:	d008      	beq.n	801547c <draw_shadow+0x11de>
 801546a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801546e:	f897 20fb 	ldrb.w	r2, [r7, #251]	; 0xfb
 8015472:	fb02 f303 	mul.w	r3, r2, r3
 8015476:	121b      	asrs	r3, r3, #8
 8015478:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb

            _lv_memset(mask_buf, opa_tmp, w);
 801547c:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 8015480:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8015484:	4619      	mov	r1, r3
 8015486:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 801548a:	f007 fdc1 	bl	801d010 <_lv_memset>

            if(simple_mode) {
 801548e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8015492:	2b00      	cmp	r3, #0
 8015494:	d003      	beq.n	801549e <draw_shadow+0x1200>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
 8015496:	2302      	movs	r3, #2
 8015498:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 801549c:	e013      	b.n	80154c6 <draw_shadow+0x1228>
            }
            else {
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 801549e:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 80154a2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80154a6:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 80154aa:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80154ae:	f7fc fb47 	bl	8011b40 <lv_draw_mask_apply>
 80154b2:	4603      	mov	r3, r0
 80154b4:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 80154b8:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80154bc:	2b01      	cmp	r3, #1
 80154be:	d102      	bne.n	80154c6 <draw_shadow+0x1228>
 80154c0:	2302      	movs	r3, #2
 80154c2:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
            }

            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 80154c6:	1d3b      	adds	r3, r7, #4
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80154ce:	1d3a      	adds	r2, r7, #4
 80154d0:	6812      	ldr	r2, [r2, #0]
 80154d2:	f107 0120 	add.w	r1, r7, #32
 80154d6:	f107 0008 	add.w	r0, r7, #8
 80154da:	9302      	str	r3, [sp, #8]
 80154dc:	23ff      	movs	r3, #255	; 0xff
 80154de:	9301      	str	r3, [sp, #4]
 80154e0:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80154e4:	9300      	str	r3, [sp, #0]
 80154e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80154ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80154ec:	6800      	ldr	r0, [r0, #0]
 80154ee:	f7f7 f8f9 	bl	800c6e4 <_lv_blend_fill>
                           mask_res, LV_OPA_COVER, dsc->shadow_blend_mode);
            fa.y1++;
 80154f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80154f6:	b29b      	uxth	r3, r3
 80154f8:	3301      	adds	r3, #1
 80154fa:	b29b      	uxth	r3, r3
 80154fc:	b21b      	sxth	r3, r3
 80154fe:	847b      	strh	r3, [r7, #34]	; 0x22
            fa.y2++;
 8015500:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015504:	b29b      	uxth	r3, r3
 8015506:	3301      	adds	r3, #1
 8015508:	b29b      	uxth	r3, r3
 801550a:	b21b      	sxth	r3, r3
 801550c:	84fb      	strh	r3, [r7, #38]	; 0x26
            sh_buf_tmp += corner_size;
 801550e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015512:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8015516:	4413      	add	r3, r2
 8015518:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        for(y = 0; y < h; y++) {
 801551c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015520:	3301      	adds	r3, #1
 8015522:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8015526:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 801552a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801552e:	429a      	cmp	r2, r3
 8015530:	db8e      	blt.n	8015450 <draw_shadow+0x11b2>
        }
    }

    /*Fill the bottom side*/
    a.x1 = sh_area.x1 + corner_size;
 8015532:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8015536:	b29a      	uxth	r2, r3
 8015538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801553c:	b29b      	uxth	r3, r3
 801553e:	4413      	add	r3, r2
 8015540:	b29b      	uxth	r3, r3
 8015542:	b21b      	sxth	r3, r3
 8015544:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.x2 = sh_area.x2 - corner_size;
 8015548:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 801554c:	b29a      	uxth	r2, r3
 801554e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015552:	b29b      	uxth	r3, r3
 8015554:	1ad3      	subs	r3, r2, r3
 8015556:	b29b      	uxth	r3, r3
 8015558:	b21b      	sxth	r3, r3
 801555a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.y1 = sh_area.y2 - corner_size + 1;
 801555e:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8015562:	b29a      	uxth	r2, r3
 8015564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015568:	b29b      	uxth	r3, r3
 801556a:	1ad3      	subs	r3, r2, r3
 801556c:	b29b      	uxth	r3, r3
 801556e:	3301      	adds	r3, #1
 8015570:	b29b      	uxth	r3, r3
 8015572:	b21b      	sxth	r3, r3
 8015574:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = sh_area.y2;
 8015578:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 801557c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    has_com = _lv_area_intersect(&ca, &a, clip);
 8015580:	f107 0308 	add.w	r3, r7, #8
 8015584:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8015588:	f107 0058 	add.w	r0, r7, #88	; 0x58
 801558c:	681a      	ldr	r2, [r3, #0]
 801558e:	f005 fc7b 	bl	801ae88 <_lv_area_intersect>
 8015592:	4603      	mov	r3, r0
 8015594:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 8015598:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 801559c:	2b00      	cmp	r3, #0
 801559e:	f000 80da 	beq.w	8015756 <draw_shadow+0x14b8>
 80155a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80155a6:	b21a      	sxth	r2, r3
 80155a8:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80155ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80155b0:	4618      	mov	r0, r3
 80155b2:	f005 fe4d 	bl	801b250 <_lv_area_is_in>
 80155b6:	4603      	mov	r3, r0
 80155b8:	f083 0301 	eor.w	r3, r3, #1
 80155bc:	b2db      	uxtb	r3, r3
 80155be:	2b00      	cmp	r3, #0
 80155c0:	f000 80c9 	beq.w	8015756 <draw_shadow+0x14b8>
        if(simple_mode) ca.y1 = LV_MATH_MAX(ca.y1, coords->y2);
 80155c4:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d00c      	beq.n	80155e6 <draw_shadow+0x1348>
 80155cc:	f107 030c 	add.w	r3, r7, #12
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80155d6:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80155da:	4293      	cmp	r3, r2
 80155dc:	bfb8      	it	lt
 80155de:	4613      	movlt	r3, r2
 80155e0:	b21b      	sxth	r3, r3
 80155e2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        /*Draw horizontal lines*/
        lv_coord_t w = lv_area_get_width(&ca);
 80155e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80155ea:	4618      	mov	r0, r3
 80155ec:	f7fd fe34 	bl	8013258 <lv_area_get_width>
 80155f0:	4603      	mov	r3, r0
 80155f2:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
        lv_coord_t h = lv_area_get_height(&ca);
 80155f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80155fa:	4618      	mov	r0, r3
 80155fc:	f7fd fe43 	bl	8013286 <lv_area_get_height>
 8015600:	4603      	mov	r3, r0
 8015602:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
        sh_buf_tmp = sh_buf + corner_size - 1;
 8015606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801560a:	3b01      	subs	r3, #1
 801560c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8015610:	4413      	add	r3, r2
 8015612:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 8015616:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801561a:	461a      	mov	r2, r3
 801561c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8015620:	1ad3      	subs	r3, r2, r3
 8015622:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8015626:	fb02 f303 	mul.w	r3, r2, r3
 801562a:	461a      	mov	r2, r3
 801562c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8015630:	4413      	add	r3, r2
 8015632:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

        lv_area_t fa;
        lv_area_copy(&fa, &ca);
 8015636:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801563a:	f107 0318 	add.w	r3, r7, #24
 801563e:	4611      	mov	r1, r2
 8015640:	4618      	mov	r0, r3
 8015642:	f7fd fdfb 	bl	801323c <lv_area_copy>
        fa.y1 = fa.y2;
 8015646:	f107 0318 	add.w	r3, r7, #24
 801564a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801564e:	f107 0318 	add.w	r3, r7, #24
 8015652:	805a      	strh	r2, [r3, #2]
        for(y = 0; y < h; y++) {
 8015654:	2300      	movs	r3, #0
 8015656:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801565a:	e076      	b.n	801574a <draw_shadow+0x14ac>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
 801565c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8015660:	781b      	ldrb	r3, [r3, #0]
 8015662:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
 8015666:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 801566a:	2bff      	cmp	r3, #255	; 0xff
 801566c:	d103      	bne.n	8015676 <draw_shadow+0x13d8>
 801566e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8015672:	2bff      	cmp	r3, #255	; 0xff
 8015674:	d008      	beq.n	8015688 <draw_shadow+0x13ea>
 8015676:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801567a:	f897 20fa 	ldrb.w	r2, [r7, #250]	; 0xfa
 801567e:	fb02 f303 	mul.w	r3, r2, r3
 8015682:	121b      	asrs	r3, r3, #8
 8015684:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa

            _lv_memset(mask_buf, opa_tmp, w);
 8015688:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801568c:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8015690:	4619      	mov	r1, r3
 8015692:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8015696:	f007 fcbb 	bl	801d010 <_lv_memset>
            if(simple_mode) {
 801569a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d003      	beq.n	80156aa <draw_shadow+0x140c>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
 80156a2:	2302      	movs	r3, #2
 80156a4:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 80156a8:	e017      	b.n	80156da <draw_shadow+0x143c>
            }
            else {
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 80156aa:	f107 0318 	add.w	r3, r7, #24
 80156ae:	f9b3 1000 	ldrsh.w	r1, [r3]
 80156b2:	f107 0318 	add.w	r3, r7, #24
 80156b6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80156ba:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80156be:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80156c2:	f7fc fa3d 	bl	8011b40 <lv_draw_mask_apply>
 80156c6:	4603      	mov	r3, r0
 80156c8:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 80156cc:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80156d0:	2b01      	cmp	r3, #1
 80156d2:	d102      	bne.n	80156da <draw_shadow+0x143c>
 80156d4:	2302      	movs	r3, #2
 80156d6:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
            }

            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 80156da:	1d3b      	adds	r3, r7, #4
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80156e2:	1d3a      	adds	r2, r7, #4
 80156e4:	6812      	ldr	r2, [r2, #0]
 80156e6:	f107 0118 	add.w	r1, r7, #24
 80156ea:	f107 0008 	add.w	r0, r7, #8
 80156ee:	9302      	str	r3, [sp, #8]
 80156f0:	23ff      	movs	r3, #255	; 0xff
 80156f2:	9301      	str	r3, [sp, #4]
 80156f4:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80156f8:	9300      	str	r3, [sp, #0]
 80156fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80156fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8015700:	6800      	ldr	r0, [r0, #0]
 8015702:	f7f6 ffef 	bl	800c6e4 <_lv_blend_fill>
                           mask_res, LV_OPA_COVER, dsc->shadow_blend_mode);
            fa.y1--;
 8015706:	f107 0318 	add.w	r3, r7, #24
 801570a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801570e:	b29b      	uxth	r3, r3
 8015710:	3b01      	subs	r3, #1
 8015712:	b29b      	uxth	r3, r3
 8015714:	b21a      	sxth	r2, r3
 8015716:	f107 0318 	add.w	r3, r7, #24
 801571a:	805a      	strh	r2, [r3, #2]
            fa.y2--;
 801571c:	f107 0318 	add.w	r3, r7, #24
 8015720:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015724:	b29b      	uxth	r3, r3
 8015726:	3b01      	subs	r3, #1
 8015728:	b29b      	uxth	r3, r3
 801572a:	b21a      	sxth	r2, r3
 801572c:	f107 0318 	add.w	r3, r7, #24
 8015730:	80da      	strh	r2, [r3, #6]
            sh_buf_tmp += corner_size;
 8015732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015736:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801573a:	4413      	add	r3, r2
 801573c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        for(y = 0; y < h; y++) {
 8015740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8015744:	3301      	adds	r3, #1
 8015746:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801574a:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 801574e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8015752:	429a      	cmp	r2, r3
 8015754:	db82      	blt.n	801565c <draw_shadow+0x13be>
        }
    }

    /*Draw the middle area*/
    a.x1 = sh_area.x1 + corner_size;
 8015756:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 801575a:	b29a      	uxth	r2, r3
 801575c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015760:	b29b      	uxth	r3, r3
 8015762:	4413      	add	r3, r2
 8015764:	b29b      	uxth	r3, r3
 8015766:	b21b      	sxth	r3, r3
 8015768:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    a.x2 = sh_area.x2 - corner_size;
 801576c:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8015770:	b29a      	uxth	r2, r3
 8015772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015776:	b29b      	uxth	r3, r3
 8015778:	1ad3      	subs	r3, r2, r3
 801577a:	b29b      	uxth	r3, r3
 801577c:	b21b      	sxth	r3, r3
 801577e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    a.y1 = sh_area.y1 + corner_size;
 8015782:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8015786:	b29a      	uxth	r2, r3
 8015788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801578c:	b29b      	uxth	r3, r3
 801578e:	4413      	add	r3, r2
 8015790:	b29b      	uxth	r3, r3
 8015792:	b21b      	sxth	r3, r3
 8015794:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    a.y2 = sh_area.y2 - corner_size;
 8015798:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 801579c:	b29a      	uxth	r2, r3
 801579e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80157a2:	b29b      	uxth	r3, r3
 80157a4:	1ad3      	subs	r3, r2, r3
 80157a6:	b29b      	uxth	r3, r3
 80157a8:	b21b      	sxth	r3, r3
 80157aa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

    has_com = _lv_area_intersect(&ca, &a, clip);
 80157ae:	f107 0308 	add.w	r3, r7, #8
 80157b2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80157b6:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80157ba:	681a      	ldr	r2, [r3, #0]
 80157bc:	f005 fb64 	bl	801ae88 <_lv_area_intersect>
 80157c0:	4603      	mov	r3, r0
 80157c2:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if(has_com && simple_mode == false &&  _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 80157c6:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	f000 8095 	beq.w	80158fa <draw_shadow+0x165c>
 80157d0:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80157d4:	f083 0301 	eor.w	r3, r3, #1
 80157d8:	b2db      	uxtb	r3, r3
 80157da:	2b00      	cmp	r3, #0
 80157dc:	f000 808d 	beq.w	80158fa <draw_shadow+0x165c>
 80157e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80157e4:	b21a      	sxth	r2, r3
 80157e6:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80157ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80157ee:	4618      	mov	r0, r3
 80157f0:	f005 fd2e 	bl	801b250 <_lv_area_is_in>
 80157f4:	4603      	mov	r3, r0
 80157f6:	f083 0301 	eor.w	r3, r3, #1
 80157fa:	b2db      	uxtb	r3, r3
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d07c      	beq.n	80158fa <draw_shadow+0x165c>
        /*Draw horizontal lines*/
        lv_coord_t w = lv_area_get_width(&ca);
 8015800:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015804:	4618      	mov	r0, r3
 8015806:	f7fd fd27 	bl	8013258 <lv_area_get_width>
 801580a:	4603      	mov	r3, r0
 801580c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
        lv_coord_t h = lv_area_get_height(&ca);
 8015810:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015814:	4618      	mov	r0, r3
 8015816:	f7fd fd36 	bl	8013286 <lv_area_get_height>
 801581a:	4603      	mov	r3, r0
 801581c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8

        lv_area_t fa;
        lv_area_copy(&fa, &ca);
 8015820:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8015824:	f107 0310 	add.w	r3, r7, #16
 8015828:	4611      	mov	r1, r2
 801582a:	4618      	mov	r0, r3
 801582c:	f7fd fd06 	bl	801323c <lv_area_copy>
        fa.y2 = fa.y1;
 8015830:	f107 0310 	add.w	r3, r7, #16
 8015834:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015838:	f107 0310 	add.w	r3, r7, #16
 801583c:	80da      	strh	r2, [r3, #6]
        for(y = 0; y < h; y++) {
 801583e:	2300      	movs	r3, #0
 8015840:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8015844:	e053      	b.n	80158ee <draw_shadow+0x1650>
            _lv_memset(mask_buf, dsc->shadow_opa, w);
 8015846:	1d3b      	adds	r3, r7, #4
 8015848:	681b      	ldr	r3, [r3, #0]
 801584a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801584e:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 8015852:	4619      	mov	r1, r3
 8015854:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8015858:	f007 fbda 	bl	801d010 <_lv_memset>
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 801585c:	f107 0310 	add.w	r3, r7, #16
 8015860:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015864:	f107 0310 	add.w	r3, r7, #16
 8015868:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801586c:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 8015870:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8015874:	f7fc f964 	bl	8011b40 <lv_draw_mask_apply>
 8015878:	4603      	mov	r3, r0
 801587a:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
            if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 801587e:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8015882:	2b01      	cmp	r3, #1
 8015884:	d102      	bne.n	801588c <draw_shadow+0x15ee>
 8015886:	2302      	movs	r3, #2
 8015888:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a

            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 801588c:	1d3b      	adds	r3, r7, #4
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8015894:	1d3a      	adds	r2, r7, #4
 8015896:	6812      	ldr	r2, [r2, #0]
 8015898:	f107 0110 	add.w	r1, r7, #16
 801589c:	f107 0008 	add.w	r0, r7, #8
 80158a0:	9302      	str	r3, [sp, #8]
 80158a2:	23ff      	movs	r3, #255	; 0xff
 80158a4:	9301      	str	r3, [sp, #4]
 80158a6:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 80158aa:	9300      	str	r3, [sp, #0]
 80158ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80158b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80158b2:	6800      	ldr	r0, [r0, #0]
 80158b4:	f7f6 ff16 	bl	800c6e4 <_lv_blend_fill>
                           mask_res, LV_OPA_COVER, dsc->shadow_blend_mode);
            fa.y1++;
 80158b8:	f107 0310 	add.w	r3, r7, #16
 80158bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80158c0:	b29b      	uxth	r3, r3
 80158c2:	3301      	adds	r3, #1
 80158c4:	b29b      	uxth	r3, r3
 80158c6:	b21a      	sxth	r2, r3
 80158c8:	f107 0310 	add.w	r3, r7, #16
 80158cc:	805a      	strh	r2, [r3, #2]
            fa.y2++;
 80158ce:	f107 0310 	add.w	r3, r7, #16
 80158d2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80158d6:	b29b      	uxth	r3, r3
 80158d8:	3301      	adds	r3, #1
 80158da:	b29b      	uxth	r3, r3
 80158dc:	b21a      	sxth	r2, r3
 80158de:	f107 0310 	add.w	r3, r7, #16
 80158e2:	80da      	strh	r2, [r3, #6]
        for(y = 0; y < h; y++) {
 80158e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80158e8:	3301      	adds	r3, #1
 80158ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80158ee:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	; 0xa8
 80158f2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80158f6:	429a      	cmp	r2, r3
 80158f8:	dba5      	blt.n	8015846 <draw_shadow+0x15a8>
        }
    }

    lv_draw_mask_remove_id(mask_rout_id);
 80158fa:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 80158fe:	4618      	mov	r0, r3
 8015900:	f7fc f962 	bl	8011bc8 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
 8015904:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8015908:	f007 f8e4 	bl	801cad4 <_lv_mem_buf_release>
    _lv_mem_buf_release(sh_buf);
 801590c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8015910:	f007 f8e0 	bl	801cad4 <_lv_mem_buf_release>
 8015914:	e006      	b.n	8015924 <draw_shadow+0x1686>
    if(dsc->shadow_width == 0) return;
 8015916:	bf00      	nop
 8015918:	e004      	b.n	8015924 <draw_shadow+0x1686>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 801591a:	bf00      	nop
 801591c:	e002      	b.n	8015924 <draw_shadow+0x1686>
        return;
 801591e:	bf00      	nop
 8015920:	e000      	b.n	8015924 <draw_shadow+0x1686>
    if(is_common == false) return;
 8015922:	bf00      	nop
}
 8015924:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8015928:	46bd      	mov	sp, r7
 801592a:	bd90      	pop	{r4, r7, pc}

0801592c <shadow_draw_corner_buf>:
 * @param sw shadow width
 * @param r radius
 */
LV_ATTRIBUTE_FAST_MEM static void shadow_draw_corner_buf(const lv_area_t * coords, uint16_t * sh_buf, lv_coord_t sw,
                                                         lv_coord_t r)
{
 801592c:	b590      	push	{r4, r7, lr}
 801592e:	b09d      	sub	sp, #116	; 0x74
 8015930:	af02      	add	r7, sp, #8
 8015932:	60f8      	str	r0, [r7, #12]
 8015934:	60b9      	str	r1, [r7, #8]
 8015936:	4611      	mov	r1, r2
 8015938:	461a      	mov	r2, r3
 801593a:	460b      	mov	r3, r1
 801593c:	80fb      	strh	r3, [r7, #6]
 801593e:	4613      	mov	r3, r2
 8015940:	80bb      	strh	r3, [r7, #4]
    int32_t sw_ori = sw;
 8015942:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015946:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t size = sw_ori  + r;
 8015948:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801594c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801594e:	4413      	add	r3, r2
 8015950:	64bb      	str	r3, [r7, #72]	; 0x48

    lv_area_t sh_area;
    lv_area_copy(&sh_area, coords);
 8015952:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015956:	68f9      	ldr	r1, [r7, #12]
 8015958:	4618      	mov	r0, r3
 801595a:	f7fd fc6f 	bl	801323c <lv_area_copy>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 801595e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015962:	2b00      	cmp	r3, #0
 8015964:	da00      	bge.n	8015968 <shadow_draw_corner_buf+0x3c>
 8015966:	3301      	adds	r3, #1
 8015968:	105b      	asrs	r3, r3, #1
 801596a:	b21b      	sxth	r3, r3
 801596c:	b29a      	uxth	r2, r3
 801596e:	88bb      	ldrh	r3, [r7, #4]
 8015970:	4413      	add	r3, r2
 8015972:	b29a      	uxth	r2, r3
 8015974:	88fb      	ldrh	r3, [r7, #6]
 8015976:	f003 0301 	and.w	r3, r3, #1
 801597a:	2b00      	cmp	r3, #0
 801597c:	bf0c      	ite	eq
 801597e:	2301      	moveq	r3, #1
 8015980:	2300      	movne	r3, #0
 8015982:	b2db      	uxtb	r3, r3
 8015984:	b29b      	uxth	r3, r3
 8015986:	1ad3      	subs	r3, r2, r3
 8015988:	b29b      	uxth	r3, r3
 801598a:	3b01      	subs	r3, #1
 801598c:	b29b      	uxth	r3, r3
 801598e:	b21b      	sxth	r3, r3
 8015990:	86bb      	strh	r3, [r7, #52]	; 0x34
    sh_area.y1 = sw / 2 + 1;
 8015992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015996:	2b00      	cmp	r3, #0
 8015998:	da00      	bge.n	801599c <shadow_draw_corner_buf+0x70>
 801599a:	3301      	adds	r3, #1
 801599c:	105b      	asrs	r3, r3, #1
 801599e:	b21b      	sxth	r3, r3
 80159a0:	b29b      	uxth	r3, r3
 80159a2:	3301      	adds	r3, #1
 80159a4:	b29b      	uxth	r3, r3
 80159a6:	b21b      	sxth	r3, r3
 80159a8:	867b      	strh	r3, [r7, #50]	; 0x32

    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 80159aa:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80159ae:	b29c      	uxth	r4, r3
 80159b0:	68f8      	ldr	r0, [r7, #12]
 80159b2:	f7fd fc51 	bl	8013258 <lv_area_get_width>
 80159b6:	4603      	mov	r3, r0
 80159b8:	b29b      	uxth	r3, r3
 80159ba:	1ae3      	subs	r3, r4, r3
 80159bc:	b29b      	uxth	r3, r3
 80159be:	b21b      	sxth	r3, r3
 80159c0:	863b      	strh	r3, [r7, #48]	; 0x30
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 80159c2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80159c6:	b29c      	uxth	r4, r3
 80159c8:	68f8      	ldr	r0, [r7, #12]
 80159ca:	f7fd fc5c 	bl	8013286 <lv_area_get_height>
 80159ce:	4603      	mov	r3, r0
 80159d0:	b29b      	uxth	r3, r3
 80159d2:	4423      	add	r3, r4
 80159d4:	b29b      	uxth	r3, r3
 80159d6:	b21b      	sxth	r3, r3
 80159d8:	86fb      	strh	r3, [r7, #54]	; 0x36

    lv_draw_mask_radius_param_t mask_param;
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 80159da:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80159de:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80159e2:	f107 0014 	add.w	r0, r7, #20
 80159e6:	2300      	movs	r3, #0
 80159e8:	f7fc fa92 	bl	8011f10 <lv_draw_mask_radius_init>

#if SHADOW_ENHANCE
    /*Set half shadow width width because blur will be repeated*/
    if(sw_ori == 1) sw = 1;
 80159ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80159ee:	2b01      	cmp	r3, #1
 80159f0:	d102      	bne.n	80159f8 <shadow_draw_corner_buf+0xcc>
 80159f2:	2301      	movs	r3, #1
 80159f4:	80fb      	strh	r3, [r7, #6]
 80159f6:	e002      	b.n	80159fe <shadow_draw_corner_buf+0xd2>
    else sw = sw_ori >> 1;
 80159f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80159fa:	105b      	asrs	r3, r3, #1
 80159fc:	80fb      	strh	r3, [r7, #6]
#endif

    int32_t y;
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
 80159fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a00:	4618      	mov	r0, r3
 8015a02:	f006 ff89 	bl	801c918 <_lv_mem_buf_get>
 8015a06:	6478      	str	r0, [r7, #68]	; 0x44
    uint16_t * sh_ups_tmp_buf = (uint16_t *)sh_buf;
 8015a08:	68bb      	ldr	r3, [r7, #8]
 8015a0a:	663b      	str	r3, [r7, #96]	; 0x60
    for(y = 0; y < size; y++) {
 8015a0c:	2300      	movs	r3, #0
 8015a0e:	667b      	str	r3, [r7, #100]	; 0x64
 8015a10:	e062      	b.n	8015ad8 <shadow_draw_corner_buf+0x1ac>
        _lv_memset_ff(mask_line, size);
 8015a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a14:	4619      	mov	r1, r3
 8015a16:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015a18:	f007 fc07 	bl	801d22a <_lv_memset_ff>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 8015a1c:	697c      	ldr	r4, [r7, #20]
 8015a1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015a20:	b21a      	sxth	r2, r3
 8015a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a24:	b219      	sxth	r1, r3
 8015a26:	f107 0314 	add.w	r3, r7, #20
 8015a2a:	9300      	str	r3, [sp, #0]
 8015a2c:	460b      	mov	r3, r1
 8015a2e:	2100      	movs	r1, #0
 8015a30:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015a32:	47a0      	blx	r4
 8015a34:	4603      	mov	r3, r0
 8015a36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 8015a3a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d106      	bne.n	8015a50 <shadow_draw_corner_buf+0x124>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 8015a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a44:	005b      	lsls	r3, r3, #1
 8015a46:	4619      	mov	r1, r3
 8015a48:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8015a4a:	f007 fb6e 	bl	801d12a <_lv_memset_00>
 8015a4e:	e03b      	b.n	8015ac8 <shadow_draw_corner_buf+0x19c>
        }
        else {
            int32_t i;
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
 8015a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a52:	781b      	ldrb	r3, [r3, #0]
 8015a54:	019a      	lsls	r2, r3, #6
 8015a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015a5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8015a5e:	b29a      	uxth	r2, r3
 8015a60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015a62:	801a      	strh	r2, [r3, #0]
            for(i = 1; i < size; i++) {
 8015a64:	2301      	movs	r3, #1
 8015a66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015a68:	e02a      	b.n	8015ac0 <shadow_draw_corner_buf+0x194>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 8015a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015a6e:	4413      	add	r3, r2
 8015a70:	781a      	ldrb	r2, [r3, #0]
 8015a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a74:	3b01      	subs	r3, #1
 8015a76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015a78:	440b      	add	r3, r1
 8015a7a:	781b      	ldrb	r3, [r3, #0]
 8015a7c:	429a      	cmp	r2, r3
 8015a7e:	d10d      	bne.n	8015a9c <shadow_draw_corner_buf+0x170>
 8015a80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015a82:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015a86:	4413      	add	r3, r2
 8015a88:	005b      	lsls	r3, r3, #1
 8015a8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015a8c:	441a      	add	r2, r3
 8015a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a90:	005b      	lsls	r3, r3, #1
 8015a92:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8015a94:	440b      	add	r3, r1
 8015a96:	8812      	ldrh	r2, [r2, #0]
 8015a98:	801a      	strh	r2, [r3, #0]
 8015a9a:	e00e      	b.n	8015aba <shadow_draw_corner_buf+0x18e>
                else sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 8015a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015aa0:	4413      	add	r3, r2
 8015aa2:	781b      	ldrb	r3, [r3, #0]
 8015aa4:	019a      	lsls	r2, r3, #6
 8015aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015aaa:	fb92 f1f3 	sdiv	r1, r2, r3
 8015aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015ab0:	005b      	lsls	r3, r3, #1
 8015ab2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015ab4:	4413      	add	r3, r2
 8015ab6:	b28a      	uxth	r2, r1
 8015ab8:	801a      	strh	r2, [r3, #0]
            for(i = 1; i < size; i++) {
 8015aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015abc:	3301      	adds	r3, #1
 8015abe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015ac0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015ac4:	429a      	cmp	r2, r3
 8015ac6:	dbd0      	blt.n	8015a6a <shadow_draw_corner_buf+0x13e>
            }
        }

        sh_ups_tmp_buf += size;
 8015ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015aca:	005b      	lsls	r3, r3, #1
 8015acc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015ace:	4413      	add	r3, r2
 8015ad0:	663b      	str	r3, [r7, #96]	; 0x60
    for(y = 0; y < size; y++) {
 8015ad2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015ad4:	3301      	adds	r3, #1
 8015ad6:	667b      	str	r3, [r7, #100]	; 0x64
 8015ad8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015adc:	429a      	cmp	r2, r3
 8015ade:	db98      	blt.n	8015a12 <shadow_draw_corner_buf+0xe6>
    }
    _lv_mem_buf_release(mask_line);
 8015ae0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015ae2:	f006 fff7 	bl	801cad4 <_lv_mem_buf_release>

    if(sw == 1) {
 8015ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015aea:	2b01      	cmp	r3, #1
 8015aec:	d11b      	bne.n	8015b26 <shadow_draw_corner_buf+0x1fa>
        int32_t i;
        lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
 8015aee:	68bb      	ldr	r3, [r7, #8]
 8015af0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(i = 0; i < size * size; i++) {
 8015af2:	2300      	movs	r3, #0
 8015af4:	65bb      	str	r3, [r7, #88]	; 0x58
 8015af6:	e00e      	b.n	8015b16 <shadow_draw_corner_buf+0x1ea>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
 8015af8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015afa:	005b      	lsls	r3, r3, #1
 8015afc:	68ba      	ldr	r2, [r7, #8]
 8015afe:	4413      	add	r3, r2
 8015b00:	881b      	ldrh	r3, [r3, #0]
 8015b02:	099b      	lsrs	r3, r3, #6
 8015b04:	b299      	uxth	r1, r3
 8015b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015b08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015b0a:	4413      	add	r3, r2
 8015b0c:	b2ca      	uxtb	r2, r1
 8015b0e:	701a      	strb	r2, [r3, #0]
        for(i = 0; i < size * size; i++) {
 8015b10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015b12:	3301      	adds	r3, #1
 8015b14:	65bb      	str	r3, [r7, #88]	; 0x58
 8015b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015b1a:	fb02 f303 	mul.w	r3, r2, r3
 8015b1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015b20:	429a      	cmp	r2, r3
 8015b22:	dbe9      	blt.n	8015af8 <shadow_draw_corner_buf+0x1cc>
        }
        return;
 8015b24:	e079      	b.n	8015c1a <shadow_draw_corner_buf+0x2ee>
    }

    shadow_blur_corner(size, sw, sh_buf);
 8015b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b28:	b21b      	sxth	r3, r3
 8015b2a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8015b2e:	68ba      	ldr	r2, [r7, #8]
 8015b30:	4618      	mov	r0, r3
 8015b32:	f000 f875 	bl	8015c20 <shadow_blur_corner>
    lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
    for(x = 0; x < size * size; x++) {
        res_buf[x] = sh_buf[x];
    }
#else
    sw += sw_ori & 1;
 8015b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b38:	b29b      	uxth	r3, r3
 8015b3a:	f003 0301 	and.w	r3, r3, #1
 8015b3e:	b29a      	uxth	r2, r3
 8015b40:	88fb      	ldrh	r3, [r7, #6]
 8015b42:	4413      	add	r3, r2
 8015b44:	b29b      	uxth	r3, r3
 8015b46:	80fb      	strh	r3, [r7, #6]
    if(sw > 1) {
 8015b48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b4c:	2b01      	cmp	r3, #1
 8015b4e:	dd4b      	ble.n	8015be8 <shadow_draw_corner_buf+0x2bc>
        uint32_t i;
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
 8015b50:	68bb      	ldr	r3, [r7, #8]
 8015b52:	881b      	ldrh	r3, [r3, #0]
 8015b54:	019a      	lsls	r2, r3, #6
 8015b56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8015b5e:	b29a      	uxth	r2, r3
 8015b60:	68bb      	ldr	r3, [r7, #8]
 8015b62:	801a      	strh	r2, [r3, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
 8015b64:	2301      	movs	r3, #1
 8015b66:	657b      	str	r3, [r7, #84]	; 0x54
 8015b68:	e02f      	b.n	8015bca <shadow_draw_corner_buf+0x29e>
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
 8015b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015b6c:	005b      	lsls	r3, r3, #1
 8015b6e:	68ba      	ldr	r2, [r7, #8]
 8015b70:	4413      	add	r3, r2
 8015b72:	881a      	ldrh	r2, [r3, #0]
 8015b74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015b76:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015b7a:	440b      	add	r3, r1
 8015b7c:	005b      	lsls	r3, r3, #1
 8015b7e:	68b9      	ldr	r1, [r7, #8]
 8015b80:	440b      	add	r3, r1
 8015b82:	881b      	ldrh	r3, [r3, #0]
 8015b84:	429a      	cmp	r2, r3
 8015b86:	d10d      	bne.n	8015ba4 <shadow_draw_corner_buf+0x278>
 8015b88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015b8a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015b8e:	4413      	add	r3, r2
 8015b90:	005b      	lsls	r3, r3, #1
 8015b92:	68ba      	ldr	r2, [r7, #8]
 8015b94:	441a      	add	r2, r3
 8015b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015b98:	005b      	lsls	r3, r3, #1
 8015b9a:	68b9      	ldr	r1, [r7, #8]
 8015b9c:	440b      	add	r3, r1
 8015b9e:	8812      	ldrh	r2, [r2, #0]
 8015ba0:	801a      	strh	r2, [r3, #0]
 8015ba2:	e00f      	b.n	8015bc4 <shadow_draw_corner_buf+0x298>
            else sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 8015ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015ba6:	005b      	lsls	r3, r3, #1
 8015ba8:	68ba      	ldr	r2, [r7, #8]
 8015baa:	4413      	add	r3, r2
 8015bac:	881b      	ldrh	r3, [r3, #0]
 8015bae:	019a      	lsls	r2, r3, #6
 8015bb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015bb4:	fb92 f1f3 	sdiv	r1, r2, r3
 8015bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015bba:	005b      	lsls	r3, r3, #1
 8015bbc:	68ba      	ldr	r2, [r7, #8]
 8015bbe:	4413      	add	r3, r2
 8015bc0:	b28a      	uxth	r2, r1
 8015bc2:	801a      	strh	r2, [r3, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
 8015bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015bc6:	3301      	adds	r3, #1
 8015bc8:	657b      	str	r3, [r7, #84]	; 0x54
 8015bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015bcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015bce:	fb02 f303 	mul.w	r3, r2, r3
 8015bd2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015bd4:	429a      	cmp	r2, r3
 8015bd6:	d3c8      	bcc.n	8015b6a <shadow_draw_corner_buf+0x23e>
        }

        shadow_blur_corner(size, sw, sh_buf);
 8015bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015bda:	b21b      	sxth	r3, r3
 8015bdc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8015be0:	68ba      	ldr	r2, [r7, #8]
 8015be2:	4618      	mov	r0, r3
 8015be4:	f000 f81c 	bl	8015c20 <shadow_blur_corner>
    }
    int32_t x;
    lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
 8015be8:	68bb      	ldr	r3, [r7, #8]
 8015bea:	643b      	str	r3, [r7, #64]	; 0x40
    for(x = 0; x < size * size; x++) {
 8015bec:	2300      	movs	r3, #0
 8015bee:	653b      	str	r3, [r7, #80]	; 0x50
 8015bf0:	e00c      	b.n	8015c0c <shadow_draw_corner_buf+0x2e0>
        res_buf[x] = sh_buf[x];
 8015bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015bf4:	005b      	lsls	r3, r3, #1
 8015bf6:	68ba      	ldr	r2, [r7, #8]
 8015bf8:	4413      	add	r3, r2
 8015bfa:	8819      	ldrh	r1, [r3, #0]
 8015bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015bfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015c00:	4413      	add	r3, r2
 8015c02:	b2ca      	uxtb	r2, r1
 8015c04:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < size * size; x++) {
 8015c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c08:	3301      	adds	r3, #1
 8015c0a:	653b      	str	r3, [r7, #80]	; 0x50
 8015c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015c0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015c10:	fb02 f303 	mul.w	r3, r2, r3
 8015c14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015c16:	429a      	cmp	r2, r3
 8015c18:	dbeb      	blt.n	8015bf2 <shadow_draw_corner_buf+0x2c6>
    }
#endif

}
 8015c1a:	376c      	adds	r7, #108	; 0x6c
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	bd90      	pop	{r4, r7, pc}

08015c20 <shadow_blur_corner>:

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b090      	sub	sp, #64	; 0x40
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	4603      	mov	r3, r0
 8015c28:	603a      	str	r2, [r7, #0]
 8015c2a:	80fb      	strh	r3, [r7, #6]
 8015c2c:	460b      	mov	r3, r1
 8015c2e:	80bb      	strh	r3, [r7, #4]
    int32_t s_left = sw >> 1;
 8015c30:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015c34:	105b      	asrs	r3, r3, #1
 8015c36:	b21b      	sxth	r3, r3
 8015c38:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t s_right = (sw >> 1);
 8015c3a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015c3e:	105b      	asrs	r3, r3, #1
 8015c40:	b21b      	sxth	r3, r3
 8015c42:	613b      	str	r3, [r7, #16]
    if((sw & 1) == 0) s_left--;
 8015c44:	88bb      	ldrh	r3, [r7, #4]
 8015c46:	f003 0301 	and.w	r3, r3, #1
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d102      	bne.n	8015c54 <shadow_blur_corner+0x34>
 8015c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c50:	3b01      	subs	r3, #1
 8015c52:	63fb      	str	r3, [r7, #60]	; 0x3c

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
 8015c54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015c58:	005b      	lsls	r3, r3, #1
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	f006 fe5c 	bl	801c918 <_lv_mem_buf_get>
 8015c60:	60f8      	str	r0, [r7, #12]

    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;
 8015c62:	683b      	ldr	r3, [r7, #0]
 8015c64:	633b      	str	r3, [r7, #48]	; 0x30

    for(y = 0; y < size; y++) {
 8015c66:	2300      	movs	r3, #0
 8015c68:	637b      	str	r3, [r7, #52]	; 0x34
 8015c6a:	e060      	b.n	8015d2e <shadow_blur_corner+0x10e>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 8015c6c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015c70:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015c74:	4413      	add	r3, r2
 8015c76:	005b      	lsls	r3, r3, #1
 8015c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015c7a:	4413      	add	r3, r2
 8015c7c:	881b      	ldrh	r3, [r3, #0]
 8015c7e:	461a      	mov	r2, r3
 8015c80:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015c84:	fb03 f302 	mul.w	r3, r3, r2
 8015c88:	62fb      	str	r3, [r7, #44]	; 0x2c
        for(x = size - 1; x >= 0; x--) {
 8015c8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015c8e:	3b01      	subs	r3, #1
 8015c90:	63bb      	str	r3, [r7, #56]	; 0x38
 8015c92:	e038      	b.n	8015d06 <shadow_blur_corner+0xe6>
            sh_ups_blur_buf[x] = v;
 8015c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c96:	005b      	lsls	r3, r3, #1
 8015c98:	68fa      	ldr	r2, [r7, #12]
 8015c9a:	4413      	add	r3, r2
 8015c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015c9e:	b292      	uxth	r2, r2
 8015ca0:	801a      	strh	r2, [r3, #0]

            /*Forget the right pixel*/
            uint32_t right_val = 0;
 8015ca2:	2300      	movs	r3, #0
 8015ca4:	62bb      	str	r3, [r7, #40]	; 0x28
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 8015ca6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015ca8:	693b      	ldr	r3, [r7, #16]
 8015caa:	441a      	add	r2, r3
 8015cac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015cb0:	429a      	cmp	r2, r3
 8015cb2:	da07      	bge.n	8015cc4 <shadow_blur_corner+0xa4>
 8015cb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015cb6:	693b      	ldr	r3, [r7, #16]
 8015cb8:	4413      	add	r3, r2
 8015cba:	005b      	lsls	r3, r3, #1
 8015cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015cbe:	4413      	add	r3, r2
 8015cc0:	881b      	ldrh	r3, [r3, #0]
 8015cc2:	62bb      	str	r3, [r7, #40]	; 0x28
            v -= right_val;
 8015cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cc8:	1ad3      	subs	r3, r2, r3
 8015cca:	62fb      	str	r3, [r7, #44]	; 0x2c

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 8015ccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015cd0:	1ad3      	subs	r3, r2, r3
 8015cd2:	3b01      	subs	r3, #1
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	da03      	bge.n	8015ce0 <shadow_blur_corner+0xc0>
 8015cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cda:	881b      	ldrh	r3, [r3, #0]
 8015cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8015cde:	e00b      	b.n	8015cf8 <shadow_blur_corner+0xd8>
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
 8015ce0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ce4:	1ad3      	subs	r3, r2, r3
 8015ce6:	461a      	mov	r2, r3
 8015ce8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015cec:	4413      	add	r3, r2
 8015cee:	005b      	lsls	r3, r3, #1
 8015cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015cf2:	4413      	add	r3, r2
 8015cf4:	881b      	ldrh	r3, [r3, #0]
 8015cf6:	627b      	str	r3, [r7, #36]	; 0x24
            v += left_val;
 8015cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cfc:	4413      	add	r3, r2
 8015cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        for(x = size - 1; x >= 0; x--) {
 8015d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d02:	3b01      	subs	r3, #1
 8015d04:	63bb      	str	r3, [r7, #56]	; 0x38
 8015d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	dac3      	bge.n	8015c94 <shadow_blur_corner+0x74>
        }
        _lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
 8015d0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015d10:	005b      	lsls	r3, r3, #1
 8015d12:	461a      	mov	r2, r3
 8015d14:	68f9      	ldr	r1, [r7, #12]
 8015d16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d18:	f006 ff62 	bl	801cbe0 <_lv_memcpy>
        sh_ups_tmp_buf += size;
 8015d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015d20:	005b      	lsls	r3, r3, #1
 8015d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d24:	4413      	add	r3, r2
 8015d26:	633b      	str	r3, [r7, #48]	; 0x30
    for(y = 0; y < size; y++) {
 8015d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d2a:	3301      	adds	r3, #1
 8015d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8015d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015d32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015d34:	429a      	cmp	r2, r3
 8015d36:	db99      	blt.n	8015c6c <shadow_blur_corner+0x4c>
    }

    /*Vertical blur*/
    uint32_t i;
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
 8015d38:	683b      	ldr	r3, [r7, #0]
 8015d3a:	881b      	ldrh	r3, [r3, #0]
 8015d3c:	461a      	mov	r2, r3
 8015d3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015d42:	fb92 f3f3 	sdiv	r3, r2, r3
 8015d46:	b29a      	uxth	r2, r3
 8015d48:	683b      	ldr	r3, [r7, #0]
 8015d4a:	801a      	strh	r2, [r3, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
 8015d4c:	2301      	movs	r3, #1
 8015d4e:	623b      	str	r3, [r7, #32]
 8015d50:	e02f      	b.n	8015db2 <shadow_blur_corner+0x192>
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
 8015d52:	6a3b      	ldr	r3, [r7, #32]
 8015d54:	005b      	lsls	r3, r3, #1
 8015d56:	683a      	ldr	r2, [r7, #0]
 8015d58:	4413      	add	r3, r2
 8015d5a:	881a      	ldrh	r2, [r3, #0]
 8015d5c:	6a39      	ldr	r1, [r7, #32]
 8015d5e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015d62:	440b      	add	r3, r1
 8015d64:	005b      	lsls	r3, r3, #1
 8015d66:	6839      	ldr	r1, [r7, #0]
 8015d68:	440b      	add	r3, r1
 8015d6a:	881b      	ldrh	r3, [r3, #0]
 8015d6c:	429a      	cmp	r2, r3
 8015d6e:	d10d      	bne.n	8015d8c <shadow_blur_corner+0x16c>
 8015d70:	6a3a      	ldr	r2, [r7, #32]
 8015d72:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015d76:	4413      	add	r3, r2
 8015d78:	005b      	lsls	r3, r3, #1
 8015d7a:	683a      	ldr	r2, [r7, #0]
 8015d7c:	441a      	add	r2, r3
 8015d7e:	6a3b      	ldr	r3, [r7, #32]
 8015d80:	005b      	lsls	r3, r3, #1
 8015d82:	6839      	ldr	r1, [r7, #0]
 8015d84:	440b      	add	r3, r1
 8015d86:	8812      	ldrh	r2, [r2, #0]
 8015d88:	801a      	strh	r2, [r3, #0]
 8015d8a:	e00f      	b.n	8015dac <shadow_blur_corner+0x18c>
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
 8015d8c:	6a3b      	ldr	r3, [r7, #32]
 8015d8e:	005b      	lsls	r3, r3, #1
 8015d90:	683a      	ldr	r2, [r7, #0]
 8015d92:	4413      	add	r3, r2
 8015d94:	881b      	ldrh	r3, [r3, #0]
 8015d96:	461a      	mov	r2, r3
 8015d98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015d9c:	fb92 f1f3 	sdiv	r1, r2, r3
 8015da0:	6a3b      	ldr	r3, [r7, #32]
 8015da2:	005b      	lsls	r3, r3, #1
 8015da4:	683a      	ldr	r2, [r7, #0]
 8015da6:	4413      	add	r3, r2
 8015da8:	b28a      	uxth	r2, r1
 8015daa:	801a      	strh	r2, [r3, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
 8015dac:	6a3b      	ldr	r3, [r7, #32]
 8015dae:	3301      	adds	r3, #1
 8015db0:	623b      	str	r3, [r7, #32]
 8015db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015db6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015dba:	fb02 f303 	mul.w	r3, r2, r3
 8015dbe:	6a3a      	ldr	r2, [r7, #32]
 8015dc0:	429a      	cmp	r2, r3
 8015dc2:	d3c6      	bcc.n	8015d52 <shadow_blur_corner+0x132>
    }

    for(x = 0; x < size; x++) {
 8015dc4:	2300      	movs	r3, #0
 8015dc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8015dc8:	e090      	b.n	8015eec <shadow_blur_corner+0x2cc>
        sh_ups_tmp_buf = &sh_ups_buf[x];
 8015dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dcc:	005b      	lsls	r3, r3, #1
 8015dce:	683a      	ldr	r2, [r7, #0]
 8015dd0:	4413      	add	r3, r2
 8015dd2:	633b      	str	r3, [r7, #48]	; 0x30
        int32_t v = sh_ups_tmp_buf[0] * sw;
 8015dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dd6:	881b      	ldrh	r3, [r3, #0]
 8015dd8:	461a      	mov	r2, r3
 8015dda:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015dde:	fb03 f302 	mul.w	r3, r3, r2
 8015de2:	61fb      	str	r3, [r7, #28]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 8015de4:	2300      	movs	r3, #0
 8015de6:	637b      	str	r3, [r7, #52]	; 0x34
 8015de8:	e05b      	b.n	8015ea2 <shadow_blur_corner+0x282>
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 8015dea:	69fb      	ldr	r3, [r7, #28]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	db03      	blt.n	8015df8 <shadow_blur_corner+0x1d8>
 8015df0:	69fb      	ldr	r3, [r7, #28]
 8015df2:	119b      	asrs	r3, r3, #6
 8015df4:	b299      	uxth	r1, r3
 8015df6:	e000      	b.n	8015dfa <shadow_blur_corner+0x1da>
 8015df8:	2100      	movs	r1, #0
 8015dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dfc:	005b      	lsls	r3, r3, #1
 8015dfe:	68fa      	ldr	r2, [r7, #12]
 8015e00:	4413      	add	r3, r2
 8015e02:	460a      	mov	r2, r1
 8015e04:	801a      	strh	r2, [r3, #0]

            /*Forget the top pixel*/
            uint32_t top_val;
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 8015e06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015e08:	693b      	ldr	r3, [r7, #16]
 8015e0a:	1ad3      	subs	r3, r2, r3
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	dc03      	bgt.n	8015e18 <shadow_blur_corner+0x1f8>
 8015e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e12:	881b      	ldrh	r3, [r3, #0]
 8015e14:	61bb      	str	r3, [r7, #24]
 8015e16:	e00d      	b.n	8015e34 <shadow_blur_corner+0x214>
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 8015e18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015e1a:	693b      	ldr	r3, [r7, #16]
 8015e1c:	1ad3      	subs	r3, r2, r3
 8015e1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015e22:	fb02 f203 	mul.w	r2, r2, r3
 8015e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e28:	4413      	add	r3, r2
 8015e2a:	005b      	lsls	r3, r3, #1
 8015e2c:	683a      	ldr	r2, [r7, #0]
 8015e2e:	4413      	add	r3, r2
 8015e30:	881b      	ldrh	r3, [r3, #0]
 8015e32:	61bb      	str	r3, [r7, #24]
            v -= top_val;
 8015e34:	69fa      	ldr	r2, [r7, #28]
 8015e36:	69bb      	ldr	r3, [r7, #24]
 8015e38:	1ad3      	subs	r3, r2, r3
 8015e3a:	61fb      	str	r3, [r7, #28]

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 8015e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e40:	4413      	add	r3, r2
 8015e42:	1c5a      	adds	r2, r3, #1
 8015e44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015e48:	429a      	cmp	r2, r3
 8015e4a:	da0f      	bge.n	8015e6c <shadow_blur_corner+0x24c>
 8015e4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e50:	4413      	add	r3, r2
 8015e52:	3301      	adds	r3, #1
 8015e54:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015e58:	fb02 f203 	mul.w	r2, r2, r3
 8015e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e5e:	4413      	add	r3, r2
 8015e60:	005b      	lsls	r3, r3, #1
 8015e62:	683a      	ldr	r2, [r7, #0]
 8015e64:	4413      	add	r3, r2
 8015e66:	881b      	ldrh	r3, [r3, #0]
 8015e68:	617b      	str	r3, [r7, #20]
 8015e6a:	e00d      	b.n	8015e88 <shadow_blur_corner+0x268>
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 8015e6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015e70:	3b01      	subs	r3, #1
 8015e72:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015e76:	fb02 f203 	mul.w	r2, r2, r3
 8015e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e7c:	4413      	add	r3, r2
 8015e7e:	005b      	lsls	r3, r3, #1
 8015e80:	683a      	ldr	r2, [r7, #0]
 8015e82:	4413      	add	r3, r2
 8015e84:	881b      	ldrh	r3, [r3, #0]
 8015e86:	617b      	str	r3, [r7, #20]
            v += bottom_val;
 8015e88:	69fa      	ldr	r2, [r7, #28]
 8015e8a:	697b      	ldr	r3, [r7, #20]
 8015e8c:	4413      	add	r3, r2
 8015e8e:	61fb      	str	r3, [r7, #28]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 8015e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e92:	3301      	adds	r3, #1
 8015e94:	637b      	str	r3, [r7, #52]	; 0x34
 8015e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015e9a:	005b      	lsls	r3, r3, #1
 8015e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e9e:	4413      	add	r3, r2
 8015ea0:	633b      	str	r3, [r7, #48]	; 0x30
 8015ea2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015ea8:	429a      	cmp	r2, r3
 8015eaa:	db9e      	blt.n	8015dea <shadow_blur_corner+0x1ca>
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
 8015eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015eae:	005b      	lsls	r3, r3, #1
 8015eb0:	683a      	ldr	r2, [r7, #0]
 8015eb2:	4413      	add	r3, r2
 8015eb4:	633b      	str	r3, [r7, #48]	; 0x30
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8015eba:	e00f      	b.n	8015edc <shadow_blur_corner+0x2bc>
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 8015ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ebe:	005b      	lsls	r3, r3, #1
 8015ec0:	68fa      	ldr	r2, [r7, #12]
 8015ec2:	4413      	add	r3, r2
 8015ec4:	881a      	ldrh	r2, [r3, #0]
 8015ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ec8:	801a      	strh	r2, [r3, #0]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 8015eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ecc:	3301      	adds	r3, #1
 8015ece:	637b      	str	r3, [r7, #52]	; 0x34
 8015ed0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015ed4:	005b      	lsls	r3, r3, #1
 8015ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ed8:	4413      	add	r3, r2
 8015eda:	633b      	str	r3, [r7, #48]	; 0x30
 8015edc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015ee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015ee2:	429a      	cmp	r2, r3
 8015ee4:	dbea      	blt.n	8015ebc <shadow_blur_corner+0x29c>
    for(x = 0; x < size; x++) {
 8015ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ee8:	3301      	adds	r3, #1
 8015eea:	63bb      	str	r3, [r7, #56]	; 0x38
 8015eec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015ef0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015ef2:	429a      	cmp	r2, r3
 8015ef4:	f6ff af69 	blt.w	8015dca <shadow_blur_corner+0x1aa>
        }
    }

    _lv_mem_buf_release(sh_ups_blur_buf);
 8015ef8:	68f8      	ldr	r0, [r7, #12]
 8015efa:	f006 fdeb 	bl	801cad4 <_lv_mem_buf_release>
}
 8015efe:	bf00      	nop
 8015f00:	3740      	adds	r7, #64	; 0x40
 8015f02:	46bd      	mov	sp, r7
 8015f04:	bd80      	pop	{r7, pc}

08015f06 <draw_outline>:

#endif

#if LV_USE_OUTLINE
static void draw_outline(const lv_area_t * coords, const lv_area_t * clip, const lv_draw_rect_dsc_t * dsc)
{
 8015f06:	b590      	push	{r4, r7, lr}
 8015f08:	b08f      	sub	sp, #60	; 0x3c
 8015f0a:	af04      	add	r7, sp, #16
 8015f0c:	60f8      	str	r0, [r7, #12]
 8015f0e:	60b9      	str	r1, [r7, #8]
 8015f10:	607a      	str	r2, [r7, #4]
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f18:	2b02      	cmp	r3, #2
 8015f1a:	f240 8091 	bls.w	8016040 <draw_outline+0x13a>
    if(dsc->outline_width == 0) return;
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	f000 808d 	beq.w	8016044 <draw_outline+0x13e>

    lv_opa_t opa = dsc->outline_opa;
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8015f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f38:	2bfd      	cmp	r3, #253	; 0xfd
 8015f3a:	d902      	bls.n	8015f42 <draw_outline+0x3c>
 8015f3c:	23ff      	movs	r3, #255	; 0xff
 8015f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /*Get the inner radius*/
    lv_area_t area_inner;
    lv_area_copy(&area_inner, coords);
 8015f42:	f107 031c 	add.w	r3, r7, #28
 8015f46:	68f9      	ldr	r1, [r7, #12]
 8015f48:	4618      	mov	r0, r3
 8015f4a:	f7fd f977 	bl	801323c <lv_area_copy>
    area_inner.x1 -= dsc->outline_pad;
 8015f4e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8015f52:	b29a      	uxth	r2, r3
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8015f5a:	b29b      	uxth	r3, r3
 8015f5c:	1ad3      	subs	r3, r2, r3
 8015f5e:	b29b      	uxth	r3, r3
 8015f60:	b21b      	sxth	r3, r3
 8015f62:	83bb      	strh	r3, [r7, #28]
    area_inner.y1 -= dsc->outline_pad;
 8015f64:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015f68:	b29a      	uxth	r2, r3
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8015f70:	b29b      	uxth	r3, r3
 8015f72:	1ad3      	subs	r3, r2, r3
 8015f74:	b29b      	uxth	r3, r3
 8015f76:	b21b      	sxth	r3, r3
 8015f78:	83fb      	strh	r3, [r7, #30]
    area_inner.x2 += dsc->outline_pad;
 8015f7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015f7e:	b29a      	uxth	r2, r3
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8015f86:	b29b      	uxth	r3, r3
 8015f88:	4413      	add	r3, r2
 8015f8a:	b29b      	uxth	r3, r3
 8015f8c:	b21b      	sxth	r3, r3
 8015f8e:	843b      	strh	r3, [r7, #32]
    area_inner.y2 += dsc->outline_pad;
 8015f90:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015f94:	b29a      	uxth	r2, r3
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8015f9c:	b29b      	uxth	r3, r3
 8015f9e:	4413      	add	r3, r2
 8015fa0:	b29b      	uxth	r3, r3
 8015fa2:	b21b      	sxth	r3, r3
 8015fa4:	847b      	strh	r3, [r7, #34]	; 0x22

    lv_area_t area_outer;
    lv_area_copy(&area_outer, &area_inner);
 8015fa6:	f107 021c 	add.w	r2, r7, #28
 8015faa:	f107 0314 	add.w	r3, r7, #20
 8015fae:	4611      	mov	r1, r2
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	f7fd f943 	bl	801323c <lv_area_copy>

    area_outer.x1 -= dsc->outline_width;
 8015fb6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8015fba:	b29a      	uxth	r2, r3
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8015fc2:	b29b      	uxth	r3, r3
 8015fc4:	1ad3      	subs	r3, r2, r3
 8015fc6:	b29b      	uxth	r3, r3
 8015fc8:	b21b      	sxth	r3, r3
 8015fca:	82bb      	strh	r3, [r7, #20]
    area_outer.x2 += dsc->outline_width;
 8015fcc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8015fd0:	b29a      	uxth	r2, r3
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8015fd8:	b29b      	uxth	r3, r3
 8015fda:	4413      	add	r3, r2
 8015fdc:	b29b      	uxth	r3, r3
 8015fde:	b21b      	sxth	r3, r3
 8015fe0:	833b      	strh	r3, [r7, #24]
    area_outer.y1 -= dsc->outline_width;
 8015fe2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015fe6:	b29a      	uxth	r2, r3
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8015fee:	b29b      	uxth	r3, r3
 8015ff0:	1ad3      	subs	r3, r2, r3
 8015ff2:	b29b      	uxth	r3, r3
 8015ff4:	b21b      	sxth	r3, r3
 8015ff6:	82fb      	strh	r3, [r7, #22]
    area_outer.y2 += dsc->outline_width;
 8015ff8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015ffc:	b29a      	uxth	r2, r3
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8016004:	b29b      	uxth	r3, r3
 8016006:	4413      	add	r3, r2
 8016008:	b29b      	uxth	r3, r3
 801600a:	b21b      	sxth	r3, r3
 801600c:	837b      	strh	r3, [r7, #26]

    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	f9b3 4000 	ldrsh.w	r4, [r3]
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801601a:	687a      	ldr	r2, [r7, #4]
 801601c:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8016020:	f107 0114 	add.w	r1, r7, #20
 8016024:	f107 001c 	add.w	r0, r7, #28
 8016028:	9203      	str	r2, [sp, #12]
 801602a:	9302      	str	r3, [sp, #8]
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	6a1b      	ldr	r3, [r3, #32]
 8016030:	9301      	str	r3, [sp, #4]
 8016032:	2301      	movs	r3, #1
 8016034:	9300      	str	r3, [sp, #0]
 8016036:	4623      	mov	r3, r4
 8016038:	68ba      	ldr	r2, [r7, #8]
 801603a:	f000 fad7 	bl	80165ec <draw_full_border>
 801603e:	e002      	b.n	8016046 <draw_outline+0x140>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 8016040:	bf00      	nop
 8016042:	e000      	b.n	8016046 <draw_outline+0x140>
    if(dsc->outline_width == 0) return;
 8016044:	bf00      	nop
                     dsc->outline_blend_mode);
}
 8016046:	372c      	adds	r7, #44	; 0x2c
 8016048:	46bd      	mov	sp, r7
 801604a:	bd90      	pop	{r4, r7, pc}

0801604c <draw_pattern>:
#endif

#if LV_USE_PATTERN
static void draw_pattern(const lv_area_t * coords, const lv_area_t * clip, const lv_draw_rect_dsc_t * dsc)
{
 801604c:	b5b0      	push	{r4, r5, r7, lr}
 801604e:	b0ac      	sub	sp, #176	; 0xb0
 8016050:	af04      	add	r7, sp, #16
 8016052:	60f8      	str	r0, [r7, #12]
 8016054:	60b9      	str	r1, [r7, #8]
 8016056:	607a      	str	r2, [r7, #4]
    if(dsc->pattern_image == NULL) return;
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801605c:	2b00      	cmp	r3, #0
 801605e:	f000 8205 	beq.w	801646c <draw_pattern+0x420>
    if(dsc->pattern_opa <= LV_OPA_MIN) return;
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016068:	2b02      	cmp	r3, #2
 801606a:	f240 8201 	bls.w	8016470 <draw_pattern+0x424>

    lv_img_src_t src_type = lv_img_src_get_type(dsc->pattern_image);
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016072:	4618      	mov	r0, r3
 8016074:	f7f8 f992 	bl	800e39c <lv_img_src_get_type>
 8016078:	4603      	mov	r3, r0
 801607a:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    lv_draw_img_dsc_t img_dsc;
    lv_draw_label_dsc_t label_dsc;
    int32_t img_w;
    int32_t img_h;

    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
 801607e:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8016082:	2b01      	cmp	r3, #1
 8016084:	d003      	beq.n	801608e <draw_pattern+0x42>
 8016086:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 801608a:	2b00      	cmp	r3, #0
 801608c:	d12e      	bne.n	80160ec <draw_pattern+0xa0>
        lv_img_header_t header;
        lv_res_t res = lv_img_decoder_get_info(dsc->pattern_image, &header);
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016092:	f107 0218 	add.w	r2, r7, #24
 8016096:	4611      	mov	r1, r2
 8016098:	4618      	mov	r0, r3
 801609a:	f002 f981 	bl	80183a0 <lv_img_decoder_get_info>
 801609e:	4603      	mov	r3, r0
 80160a0:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
        if(res != LV_RES_OK) {
 80160a4:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80160a8:	2b01      	cmp	r3, #1
 80160aa:	f040 81e3 	bne.w	8016474 <draw_pattern+0x428>
            LV_LOG_WARN("draw_img: can't get image info");
            return;
        }

        img_w = header.w;
 80160ae:	69bb      	ldr	r3, [r7, #24]
 80160b0:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80160b4:	b29b      	uxth	r3, r3
 80160b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        img_h = header.h;
 80160ba:	8b7b      	ldrh	r3, [r7, #26]
 80160bc:	f3c3 134a 	ubfx	r3, r3, #5, #11
 80160c0:	b29b      	uxth	r3, r3
 80160c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

        lv_draw_img_dsc_init(&img_dsc);
 80160c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80160ca:	4618      	mov	r0, r3
 80160cc:	f7f8 f877 	bl	800e1be <lv_draw_img_dsc_init>
        img_dsc.opa = dsc->pattern_opa;
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80160d6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
        img_dsc.recolor_opa = dsc->pattern_recolor_opa;
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80160e0:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        img_dsc.recolor = dsc->pattern_recolor;
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80160e8:	677b      	str	r3, [r7, #116]	; 0x74
    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
 80160ea:	e036      	b.n	801615a <draw_pattern+0x10e>
    }
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 80160ec:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80160f0:	2b02      	cmp	r3, #2
 80160f2:	d12b      	bne.n	801614c <draw_pattern+0x100>
        lv_draw_label_dsc_init(&label_dsc);
 80160f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80160f8:	4618      	mov	r0, r3
 80160fa:	f7f9 f81b 	bl	800f134 <lv_draw_label_dsc_init>
        label_dsc.color = dsc->pattern_recolor;
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016102:	643b      	str	r3, [r7, #64]	; 0x40
        label_dsc.font = dsc->pattern_font;
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016108:	64fb      	str	r3, [r7, #76]	; 0x4c
        label_dsc.opa = dsc->pattern_opa;
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016110:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        lv_point_t s;
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8016118:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801611a:	f9b7 5054 	ldrsh.w	r5, [r7, #84]	; 0x54
 801611e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8016122:	f107 0014 	add.w	r0, r7, #20
 8016126:	2200      	movs	r2, #0
 8016128:	9202      	str	r2, [sp, #8]
 801612a:	f647 4218 	movw	r2, #31768	; 0x7c18
 801612e:	9201      	str	r2, [sp, #4]
 8016130:	9300      	str	r3, [sp, #0]
 8016132:	462b      	mov	r3, r5
 8016134:	4622      	mov	r2, r4
 8016136:	f007 fc79 	bl	801da2c <_lv_txt_get_size>
                         LV_TXT_FLAG_NONE);
        img_w = s.x;
 801613a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801613e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        img_h = s.y;
 8016142:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016146:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801614a:	e006      	b.n	801615a <draw_pattern+0x10e>

    }
    else {
        /*Trigger the error handler of image drawer*/
        LV_LOG_WARN("lv_img_design: image source type is unknown");
        lv_draw_img(coords, clip, NULL, NULL);
 801614c:	2300      	movs	r3, #0
 801614e:	2200      	movs	r2, #0
 8016150:	68b9      	ldr	r1, [r7, #8]
 8016152:	68f8      	ldr	r0, [r7, #12]
 8016154:	f7f8 f858 	bl	800e208 <lv_draw_img>
        return;
 8016158:	e18f      	b.n	801647a <draw_pattern+0x42e>
    }

    /*Can't draw zero sized images*/
    if(img_w == 0 || img_h == 0) return;
 801615a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801615e:	2b00      	cmp	r3, #0
 8016160:	f000 818a 	beq.w	8016478 <draw_pattern+0x42c>
 8016164:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016168:	2b00      	cmp	r3, #0
 801616a:	f000 8185 	beq.w	8016478 <draw_pattern+0x42c>

    lv_area_t coords_tmp;
    lv_draw_mask_radius_param_t radius_mask_param;

    if(dsc->pattern_repeat) {
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8016174:	f003 0301 	and.w	r3, r3, #1
 8016178:	b2db      	uxtb	r3, r3
 801617a:	2b00      	cmp	r3, #0
 801617c:	f000 80c8 	beq.w	8016310 <draw_pattern+0x2c4>
        lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016186:	f107 001c 	add.w	r0, r7, #28
 801618a:	2300      	movs	r3, #0
 801618c:	68f9      	ldr	r1, [r7, #12]
 801618e:	f7fb febf 	bl	8011f10 <lv_draw_mask_radius_init>
        int16_t radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
 8016192:	f107 031c 	add.w	r3, r7, #28
 8016196:	2100      	movs	r1, #0
 8016198:	4618      	mov	r0, r3
 801619a:	f7fb fc9f 	bl	8011adc <lv_draw_mask_add>
 801619e:	4603      	mov	r3, r0
 80161a0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

        /*Align the pattern to the middle*/
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
 80161a4:	68f8      	ldr	r0, [r7, #12]
 80161a6:	f7fd f857 	bl	8013258 <lv_area_get_width>
 80161aa:	4603      	mov	r3, r0
 80161ac:	461c      	mov	r4, r3
 80161ae:	68f8      	ldr	r0, [r7, #12]
 80161b0:	f7fd f852 	bl	8013258 <lv_area_get_width>
 80161b4:	4603      	mov	r3, r0
 80161b6:	461a      	mov	r2, r3
 80161b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80161bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80161c0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80161c4:	fb02 f303 	mul.w	r3, r2, r3
 80161c8:	1ae3      	subs	r3, r4, r3
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	da00      	bge.n	80161d0 <draw_pattern+0x184>
 80161ce:	3301      	adds	r3, #1
 80161d0:	105b      	asrs	r3, r3, #1
 80161d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
 80161d6:	68f8      	ldr	r0, [r7, #12]
 80161d8:	f7fd f855 	bl	8013286 <lv_area_get_height>
 80161dc:	4603      	mov	r3, r0
 80161de:	461c      	mov	r4, r3
 80161e0:	68f8      	ldr	r0, [r7, #12]
 80161e2:	f7fd f850 	bl	8013286 <lv_area_get_height>
 80161e6:	4603      	mov	r3, r0
 80161e8:	461a      	mov	r2, r3
 80161ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80161ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80161f2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80161f6:	fb02 f303 	mul.w	r3, r2, r3
 80161fa:	1ae3      	subs	r3, r4, r3
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	da00      	bge.n	8016202 <draw_pattern+0x1b6>
 8016200:	3301      	adds	r3, #1
 8016202:	105b      	asrs	r3, r3, #1
 8016204:	67fb      	str	r3, [r7, #124]	; 0x7c

        coords_tmp.y1 = coords->y1 - ofs_y;
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801620c:	b29a      	uxth	r2, r3
 801620e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016210:	b29b      	uxth	r3, r3
 8016212:	1ad3      	subs	r3, r2, r3
 8016214:	b29b      	uxth	r3, r3
 8016216:	b21b      	sxth	r3, r3
 8016218:	877b      	strh	r3, [r7, #58]	; 0x3a
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
 801621a:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801621e:	b29a      	uxth	r2, r3
 8016220:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016224:	b29b      	uxth	r3, r3
 8016226:	4413      	add	r3, r2
 8016228:	b29b      	uxth	r3, r3
 801622a:	3b01      	subs	r3, #1
 801622c:	b29b      	uxth	r3, r3
 801622e:	b21b      	sxth	r3, r3
 8016230:	87fb      	strh	r3, [r7, #62]	; 0x3e
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
 8016232:	e060      	b.n	80162f6 <draw_pattern+0x2aa>
            coords_tmp.x1 = coords->x1 - ofs_x;
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	f9b3 3000 	ldrsh.w	r3, [r3]
 801623a:	b29a      	uxth	r2, r3
 801623c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016240:	b29b      	uxth	r3, r3
 8016242:	1ad3      	subs	r3, r2, r3
 8016244:	b29b      	uxth	r3, r3
 8016246:	b21b      	sxth	r3, r3
 8016248:	873b      	strh	r3, [r7, #56]	; 0x38
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
 801624a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801624e:	b29a      	uxth	r2, r3
 8016250:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016254:	b29b      	uxth	r3, r3
 8016256:	4413      	add	r3, r2
 8016258:	b29b      	uxth	r3, r3
 801625a:	3b01      	subs	r3, #1
 801625c:	b29b      	uxth	r3, r3
 801625e:	b21b      	sxth	r3, r3
 8016260:	87bb      	strh	r3, [r7, #60]	; 0x3c
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
 8016262:	e02d      	b.n	80162c0 <draw_pattern+0x274>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
 8016264:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8016268:	2b02      	cmp	r3, #2
 801626a:	d10c      	bne.n	8016286 <draw_pattern+0x23a>
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8016270:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016274:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8016278:	2300      	movs	r3, #0
 801627a:	9300      	str	r3, [sp, #0]
 801627c:	460b      	mov	r3, r1
 801627e:	68b9      	ldr	r1, [r7, #8]
 8016280:	f7f8 ff9c 	bl	800f1bc <lv_draw_label>
 8016284:	e008      	b.n	8016298 <draw_pattern+0x24c>
                else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801628a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801628e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8016292:	68b9      	ldr	r1, [r7, #8]
 8016294:	f7f7 ffb8 	bl	800e208 <lv_draw_img>
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
 8016298:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801629c:	b29a      	uxth	r2, r3
 801629e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80162a2:	b29b      	uxth	r3, r3
 80162a4:	4413      	add	r3, r2
 80162a6:	b29b      	uxth	r3, r3
 80162a8:	b21b      	sxth	r3, r3
 80162aa:	873b      	strh	r3, [r7, #56]	; 0x38
 80162ac:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80162b0:	b29a      	uxth	r2, r3
 80162b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80162b6:	b29b      	uxth	r3, r3
 80162b8:	4413      	add	r3, r2
 80162ba:	b29b      	uxth	r3, r3
 80162bc:	b21b      	sxth	r3, r3
 80162be:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80162c0:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80162ca:	429a      	cmp	r2, r3
 80162cc:	ddca      	ble.n	8016264 <draw_pattern+0x218>
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
 80162ce:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80162d2:	b29a      	uxth	r2, r3
 80162d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80162d8:	b29b      	uxth	r3, r3
 80162da:	4413      	add	r3, r2
 80162dc:	b29b      	uxth	r3, r3
 80162de:	b21b      	sxth	r3, r3
 80162e0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80162e2:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80162e6:	b29a      	uxth	r2, r3
 80162e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80162ec:	b29b      	uxth	r3, r3
 80162ee:	4413      	add	r3, r2
 80162f0:	b29b      	uxth	r3, r3
 80162f2:	b21b      	sxth	r3, r3
 80162f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80162f6:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016300:	429a      	cmp	r2, r3
 8016302:	dd97      	ble.n	8016234 <draw_pattern+0x1e8>
            }
        }
        lv_draw_mask_remove_id(radius_mask_id);
 8016304:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8016308:	4618      	mov	r0, r3
 801630a:	f7fb fc5d 	bl	8011bc8 <lv_draw_mask_remove_id>
 801630e:	e0b4      	b.n	801647a <draw_pattern+0x42e>
    }
    else {
        int32_t obj_w = lv_area_get_width(coords);
 8016310:	68f8      	ldr	r0, [r7, #12]
 8016312:	f7fc ffa1 	bl	8013258 <lv_area_get_width>
 8016316:	4603      	mov	r3, r0
 8016318:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        int32_t obj_h = lv_area_get_height(coords);
 801631c:	68f8      	ldr	r0, [r7, #12]
 801631e:	f7fc ffb2 	bl	8013286 <lv_area_get_height>
 8016322:	4603      	mov	r3, r0
 8016324:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801632e:	b29a      	uxth	r2, r3
 8016330:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8016334:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016338:	1acb      	subs	r3, r1, r3
 801633a:	2b00      	cmp	r3, #0
 801633c:	da00      	bge.n	8016340 <draw_pattern+0x2f4>
 801633e:	3301      	adds	r3, #1
 8016340:	105b      	asrs	r3, r3, #1
 8016342:	b29b      	uxth	r3, r3
 8016344:	4413      	add	r3, r2
 8016346:	b29b      	uxth	r3, r3
 8016348:	b21b      	sxth	r3, r3
 801634a:	873b      	strh	r3, [r7, #56]	; 0x38
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016352:	b29a      	uxth	r2, r3
 8016354:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8016358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801635c:	1acb      	subs	r3, r1, r3
 801635e:	2b00      	cmp	r3, #0
 8016360:	da00      	bge.n	8016364 <draw_pattern+0x318>
 8016362:	3301      	adds	r3, #1
 8016364:	105b      	asrs	r3, r3, #1
 8016366:	b29b      	uxth	r3, r3
 8016368:	4413      	add	r3, r2
 801636a:	b29b      	uxth	r3, r3
 801636c:	b21b      	sxth	r3, r3
 801636e:	877b      	strh	r3, [r7, #58]	; 0x3a
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
 8016370:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8016374:	b29a      	uxth	r2, r3
 8016376:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801637a:	b29b      	uxth	r3, r3
 801637c:	4413      	add	r3, r2
 801637e:	b29b      	uxth	r3, r3
 8016380:	3b01      	subs	r3, #1
 8016382:	b29b      	uxth	r3, r3
 8016384:	b21b      	sxth	r3, r3
 8016386:	87bb      	strh	r3, [r7, #60]	; 0x3c
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
 8016388:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801638c:	b29a      	uxth	r2, r3
 801638e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016392:	b29b      	uxth	r3, r3
 8016394:	4413      	add	r3, r2
 8016396:	b29b      	uxth	r3, r3
 8016398:	3b01      	subs	r3, #1
 801639a:	b29b      	uxth	r3, r3
 801639c:	b21b      	sxth	r3, r3
 801639e:	87fb      	strh	r3, [r7, #62]	; 0x3e

        /* If the (obj_h - img_h) is odd there is a rounding error when divided by 2.
         * It's better round up in case of symbols because probably there is some extra space in the bottom
         * due to the base line of font*/
        if(src_type == LV_IMG_SRC_SYMBOL) {
 80163a0:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80163a4:	2b02      	cmp	r3, #2
 80163a6:	d11c      	bne.n	80163e2 <draw_pattern+0x396>
            int32_t y_corr = (obj_h - img_h) & 0x1;
 80163a8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80163ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80163b0:	1ad3      	subs	r3, r2, r3
 80163b2:	f003 0301 	and.w	r3, r3, #1
 80163b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            coords_tmp.y1 += y_corr;
 80163ba:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80163be:	b29a      	uxth	r2, r3
 80163c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80163c4:	b29b      	uxth	r3, r3
 80163c6:	4413      	add	r3, r2
 80163c8:	b29b      	uxth	r3, r3
 80163ca:	b21b      	sxth	r3, r3
 80163cc:	877b      	strh	r3, [r7, #58]	; 0x3a
            coords_tmp.y2 += y_corr;
 80163ce:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80163d2:	b29a      	uxth	r2, r3
 80163d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80163d8:	b29b      	uxth	r3, r3
 80163da:	4413      	add	r3, r2
 80163dc:	b29b      	uxth	r3, r3
 80163de:	b21b      	sxth	r3, r3
 80163e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        }

        int16_t radius_mask_id = LV_MASK_ID_INV;
 80163e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80163e6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80163f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80163f4:	68f9      	ldr	r1, [r7, #12]
 80163f6:	4618      	mov	r0, r3
 80163f8:	f004 ff2a 	bl	801b250 <_lv_area_is_in>
 80163fc:	4603      	mov	r3, r0
 80163fe:	f083 0301 	eor.w	r3, r3, #1
 8016402:	b2db      	uxtb	r3, r3
 8016404:	2b00      	cmp	r3, #0
 8016406:	d011      	beq.n	801642c <draw_pattern+0x3e0>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801640e:	f107 001c 	add.w	r0, r7, #28
 8016412:	2300      	movs	r3, #0
 8016414:	68f9      	ldr	r1, [r7, #12]
 8016416:	f7fb fd7b 	bl	8011f10 <lv_draw_mask_radius_init>
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
 801641a:	f107 031c 	add.w	r3, r7, #28
 801641e:	2100      	movs	r1, #0
 8016420:	4618      	mov	r0, r3
 8016422:	f7fb fb5b 	bl	8011adc <lv_draw_mask_add>
 8016426:	4603      	mov	r3, r0
 8016428:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
        }

        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
 801642c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8016430:	2b02      	cmp	r3, #2
 8016432:	d10c      	bne.n	801644e <draw_pattern+0x402>
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8016438:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801643c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8016440:	2300      	movs	r3, #0
 8016442:	9300      	str	r3, [sp, #0]
 8016444:	460b      	mov	r3, r1
 8016446:	68b9      	ldr	r1, [r7, #8]
 8016448:	f7f8 feb8 	bl	800f1bc <lv_draw_label>
 801644c:	e008      	b.n	8016460 <draw_pattern+0x414>
        else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016452:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8016456:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801645a:	68b9      	ldr	r1, [r7, #8]
 801645c:	f7f7 fed4 	bl	800e208 <lv_draw_img>

        lv_draw_mask_remove_id(radius_mask_id);
 8016460:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8016464:	4618      	mov	r0, r3
 8016466:	f7fb fbaf 	bl	8011bc8 <lv_draw_mask_remove_id>
 801646a:	e006      	b.n	801647a <draw_pattern+0x42e>
    if(dsc->pattern_image == NULL) return;
 801646c:	bf00      	nop
 801646e:	e004      	b.n	801647a <draw_pattern+0x42e>
    if(dsc->pattern_opa <= LV_OPA_MIN) return;
 8016470:	bf00      	nop
 8016472:	e002      	b.n	801647a <draw_pattern+0x42e>
            return;
 8016474:	bf00      	nop
 8016476:	e000      	b.n	801647a <draw_pattern+0x42e>
    if(img_w == 0 || img_h == 0) return;
 8016478:	bf00      	nop
    }
}
 801647a:	37a0      	adds	r7, #160	; 0xa0
 801647c:	46bd      	mov	sp, r7
 801647e:	bdb0      	pop	{r4, r5, r7, pc}

08016480 <draw_value_str>:
#endif

#if LV_USE_VALUE_STR
static void draw_value_str(const lv_area_t * coords, const lv_area_t * clip, const lv_draw_rect_dsc_t * dsc)
{
 8016480:	b590      	push	{r4, r7, lr}
 8016482:	b099      	sub	sp, #100	; 0x64
 8016484:	af04      	add	r7, sp, #16
 8016486:	60f8      	str	r0, [r7, #12]
 8016488:	60b9      	str	r1, [r7, #8]
 801648a:	607a      	str	r2, [r7, #4]
    if(dsc->value_str == NULL) return;
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016490:	2b00      	cmp	r3, #0
 8016492:	f000 80a5 	beq.w	80165e0 <draw_value_str+0x160>
    if(dsc->value_opa <= LV_OPA_MIN) return;
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801649c:	2b02      	cmp	r3, #2
 801649e:	f240 80a1 	bls.w	80165e4 <draw_value_str+0x164>

#if LV_USE_ARABIC_PERSIAN_CHARS == 0
    const char * str = dsc->value_str;
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80164a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    char * str = _lv_mem_buf_get(str_len + 1);
    _lv_txt_ap_proc(dsc->value_str, str);
#endif

    lv_point_t s;
    _lv_txt_get_size(&s, str, dsc->value_font, dsc->value_letter_space, dsc->value_line_space, LV_COORD_MAX,
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	f9b3 4060 	ldrsh.w	r4, [r3, #96]	; 0x60
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 80164b8:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80164bc:	2200      	movs	r2, #0
 80164be:	9202      	str	r2, [sp, #8]
 80164c0:	f647 4218 	movw	r2, #31768	; 0x7c18
 80164c4:	9201      	str	r2, [sp, #4]
 80164c6:	9300      	str	r3, [sp, #0]
 80164c8:	4623      	mov	r3, r4
 80164ca:	460a      	mov	r2, r1
 80164cc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80164ce:	f007 faad 	bl	801da2c <_lv_txt_get_size>
                     LV_TXT_FLAG_NONE);

    lv_area_t value_area;
    value_area.x1 = 0;
 80164d2:	2300      	movs	r3, #0
 80164d4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    value_area.y1 = 0;
 80164d8:	2300      	movs	r3, #0
 80164da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    value_area.x2 = s.x - 1;
 80164de:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80164e2:	b29b      	uxth	r3, r3
 80164e4:	3b01      	subs	r3, #1
 80164e6:	b29b      	uxth	r3, r3
 80164e8:	b21b      	sxth	r3, r3
 80164ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    value_area.y2 = s.y - 1;
 80164ee:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80164f2:	b29b      	uxth	r3, r3
 80164f4:	3b01      	subs	r3, #1
 80164f6:	b29b      	uxth	r3, r3
 80164f8:	b21b      	sxth	r3, r3
 80164fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    lv_point_t p_align;
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8016504:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016508:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801650c:	68f8      	ldr	r0, [r7, #12]
 801650e:	f004 ff3d 	bl	801b38c <_lv_area_align>

    value_area.x1 += p_align.x + dsc->value_ofs_x;
 8016512:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8016516:	b29a      	uxth	r2, r3
 8016518:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 801651c:	b299      	uxth	r1, r3
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8016524:	b29b      	uxth	r3, r3
 8016526:	440b      	add	r3, r1
 8016528:	b29b      	uxth	r3, r3
 801652a:	4413      	add	r3, r2
 801652c:	b29b      	uxth	r3, r3
 801652e:	b21b      	sxth	r3, r3
 8016530:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    value_area.y1 += p_align.y + dsc->value_ofs_y;
 8016534:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8016538:	b29a      	uxth	r2, r3
 801653a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801653e:	b299      	uxth	r1, r3
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 8016546:	b29b      	uxth	r3, r3
 8016548:	440b      	add	r3, r1
 801654a:	b29b      	uxth	r3, r3
 801654c:	4413      	add	r3, r2
 801654e:	b29b      	uxth	r3, r3
 8016550:	b21b      	sxth	r3, r3
 8016552:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    value_area.x2 += p_align.x + dsc->value_ofs_x;
 8016556:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 801655a:	b29a      	uxth	r2, r3
 801655c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8016560:	b299      	uxth	r1, r3
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8016568:	b29b      	uxth	r3, r3
 801656a:	440b      	add	r3, r1
 801656c:	b29b      	uxth	r3, r3
 801656e:	4413      	add	r3, r2
 8016570:	b29b      	uxth	r3, r3
 8016572:	b21b      	sxth	r3, r3
 8016574:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    value_area.y2 += p_align.y + dsc->value_ofs_y;
 8016578:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 801657c:	b29a      	uxth	r2, r3
 801657e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8016582:	b299      	uxth	r1, r3
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 801658a:	b29b      	uxth	r3, r3
 801658c:	440b      	add	r3, r1
 801658e:	b29b      	uxth	r3, r3
 8016590:	4413      	add	r3, r2
 8016592:	b29b      	uxth	r3, r3
 8016594:	b21b      	sxth	r3, r3
 8016596:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 801659a:	f107 0314 	add.w	r3, r7, #20
 801659e:	4618      	mov	r0, r3
 80165a0:	f7f8 fdc8 	bl	800f134 <lv_draw_label_dsc_init>
    label_dsc.font = dsc->value_font;
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80165a8:	623b      	str	r3, [r7, #32]
    label_dsc.letter_space = dsc->value_letter_space;
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 80165b0:	853b      	strh	r3, [r7, #40]	; 0x28
    label_dsc.line_space = dsc->value_line_space;
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 80165b8:	84fb      	strh	r3, [r7, #38]	; 0x26
    label_dsc.color = dsc->value_color;
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80165be:	617b      	str	r3, [r7, #20]
    label_dsc.opa = dsc->value_opa;
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80165c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    lv_draw_label(&value_area, clip, &label_dsc, str, NULL);
 80165ca:	f107 0214 	add.w	r2, r7, #20
 80165ce:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80165d2:	2300      	movs	r3, #0
 80165d4:	9300      	str	r3, [sp, #0]
 80165d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165d8:	68b9      	ldr	r1, [r7, #8]
 80165da:	f7f8 fdef 	bl	800f1bc <lv_draw_label>
 80165de:	e002      	b.n	80165e6 <draw_value_str+0x166>
    if(dsc->value_str == NULL) return;
 80165e0:	bf00      	nop
 80165e2:	e000      	b.n	80165e6 <draw_value_str+0x166>
    if(dsc->value_opa <= LV_OPA_MIN) return;
 80165e4:	bf00      	nop

#if LV_USE_ARABIC_PERSIAN_CHARS
    _lv_mem_buf_release(str);
#endif
}
 80165e6:	3754      	adds	r7, #84	; 0x54
 80165e8:	46bd      	mov	sp, r7
 80165ea:	bd90      	pop	{r4, r7, pc}

080165ec <draw_full_border>:
#endif

static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,
                             lv_coord_t radius, bool radius_is_in, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 80165ec:	b580      	push	{r7, lr}
 80165ee:	b0b8      	sub	sp, #224	; 0xe0
 80165f0:	af04      	add	r7, sp, #16
 80165f2:	60f8      	str	r0, [r7, #12]
 80165f4:	60b9      	str	r1, [r7, #8]
 80165f6:	607a      	str	r2, [r7, #4]
 80165f8:	807b      	strh	r3, [r7, #2]
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 80165fa:	f7fb fb3d 	bl	8011c78 <lv_draw_mask_get_cnt>
 80165fe:	4603      	mov	r3, r0
 8016600:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
    bool simple_mode = true;
 8016604:	2301      	movs	r3, #1
 8016606:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
    if(other_mask_cnt) simple_mode = false;
 801660a:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 801660e:	2b00      	cmp	r3, #0
 8016610:	d002      	beq.n	8016618 <draw_full_border+0x2c>
 8016612:	2300      	movs	r3, #0
 8016614:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

    int32_t inner_w = lv_area_get_width(area_inner);
 8016618:	68f8      	ldr	r0, [r7, #12]
 801661a:	f7fc fe1d 	bl	8013258 <lv_area_get_width>
 801661e:	4603      	mov	r3, r0
 8016620:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    int32_t inner_h = lv_area_get_height(area_inner);
 8016624:	68f8      	ldr	r0, [r7, #12]
 8016626:	f7fc fe2e 	bl	8013286 <lv_area_get_height>
 801662a:	4603      	mov	r3, r0
 801662c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
 8016630:	68bb      	ldr	r3, [r7, #8]
 8016632:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016636:	b29a      	uxth	r2, r3
 8016638:	68fb      	ldr	r3, [r7, #12]
 801663a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801663e:	b29b      	uxth	r3, r3
 8016640:	1ad3      	subs	r3, r2, r3
 8016642:	b29b      	uxth	r3, r3
 8016644:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6

    int32_t coords_out_w = lv_area_get_width(area_outer);
 8016648:	68b8      	ldr	r0, [r7, #8]
 801664a:	f7fc fe05 	bl	8013258 <lv_area_get_width>
 801664e:	4603      	mov	r3, r0
 8016650:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    int32_t coords_out_h = lv_area_get_height(area_outer);
 8016654:	68b8      	ldr	r0, [r7, #8]
 8016656:	f7fc fe16 	bl	8013286 <lv_area_get_height>
 801665a:	4603      	mov	r3, r0
 801665c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    int32_t rin;
    int32_t rout;
    if(radius_is_in) {
 8016660:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8016664:	2b00      	cmp	r3, #0
 8016666:	d020      	beq.n	80166aa <draw_full_border+0xbe>
        rin = radius;
 8016668:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801666c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        int32_t short_side = LV_MATH_MIN(inner_w, inner_h);
 8016670:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8016674:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016678:	4293      	cmp	r3, r2
 801667a:	bfa8      	it	ge
 801667c:	4613      	movge	r3, r2
 801667e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        if(rin > short_side >> 1) rin = short_side >> 1;
 8016682:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016686:	105b      	asrs	r3, r3, #1
 8016688:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801668c:	429a      	cmp	r2, r3
 801668e:	dd04      	ble.n	801669a <draw_full_border+0xae>
 8016690:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016694:	105b      	asrs	r3, r3, #1
 8016696:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

        /*Get the outer area*/
        rout = rin + border_width;
 801669a:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801669e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80166a2:	4413      	add	r3, r2
 80166a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80166a8:	e026      	b.n	80166f8 <draw_full_border+0x10c>
    }
    else {
        rout = radius;
 80166aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80166ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        int32_t short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
 80166b2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80166b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80166ba:	4293      	cmp	r3, r2
 80166bc:	bfa8      	it	ge
 80166be:	4613      	movge	r3, r2
 80166c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        if(rout > short_side >> 1) rout = short_side >> 1;
 80166c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80166c8:	105b      	asrs	r3, r3, #1
 80166ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80166ce:	429a      	cmp	r2, r3
 80166d0:	dd04      	ble.n	80166dc <draw_full_border+0xf0>
 80166d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80166d6:	105b      	asrs	r3, r3, #1
 80166d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

        /*Get the outer area*/
        rin = rout - border_width;
 80166dc:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80166e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80166e4:	1ad3      	subs	r3, r2, r3
 80166e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        if(rin < 0) rin = 0;
 80166ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	da02      	bge.n	80166f8 <draw_full_border+0x10c>
 80166f2:	2300      	movs	r3, #0
 80166f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
 80166f8:	f7f3 fe16 	bl	800a328 <_lv_refr_get_disp_refreshing>
 80166fc:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 8016700:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8016704:	f003 ff00 	bl	801a508 <lv_disp_get_buf>
 8016708:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
 801670c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016710:	687a      	ldr	r2, [r7, #4]
 8016712:	68b9      	ldr	r1, [r7, #8]
 8016714:	4618      	mov	r0, r3
 8016716:	f004 fbb7 	bl	801ae88 <_lv_area_intersect>
 801671a:	4603      	mov	r3, r0
 801671c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    if(is_common == false) return;
 8016720:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8016724:	f083 0301 	eor.w	r3, r3, #1
 8016728:	b2db      	uxtb	r3, r3
 801672a:	2b00      	cmp	r3, #0
 801672c:	f040 8350 	bne.w	8016dd0 <draw_full_border+0x7e4>

    const lv_area_t * disp_area = &vdb->area;
 8016730:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016734:	3310      	adds	r3, #16
 8016736:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 801673a:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801673e:	b29a      	uxth	r2, r3
 8016740:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016744:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016748:	b29b      	uxth	r3, r3
 801674a:	1ad3      	subs	r3, r2, r3
 801674c:	b29b      	uxth	r3, r3
 801674e:	b21b      	sxth	r3, r3
 8016750:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    draw_area.y1 -= disp_area->y1;
 8016754:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8016758:	b29a      	uxth	r2, r3
 801675a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801675e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016762:	b29b      	uxth	r3, r3
 8016764:	1ad3      	subs	r3, r2, r3
 8016766:	b29b      	uxth	r3, r3
 8016768:	b21b      	sxth	r3, r3
 801676a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    draw_area.x2 -= disp_area->x1;
 801676e:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 8016772:	b29a      	uxth	r2, r3
 8016774:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016778:	f9b3 3000 	ldrsh.w	r3, [r3]
 801677c:	b29b      	uxth	r3, r3
 801677e:	1ad3      	subs	r3, r2, r3
 8016780:	b29b      	uxth	r3, r3
 8016782:	b21b      	sxth	r3, r3
 8016784:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    draw_area.y2 -= disp_area->y1;
 8016788:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801678c:	b29a      	uxth	r2, r3
 801678e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016792:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016796:	b29b      	uxth	r3, r3
 8016798:	1ad3      	subs	r3, r2, r3
 801679a:	b29b      	uxth	r3, r3
 801679c:	b21b      	sxth	r3, r3
 801679e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

    int32_t draw_area_w = lv_area_get_width(&draw_area);
 80167a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80167a6:	4618      	mov	r0, r3
 80167a8:	f7fc fd56 	bl	8013258 <lv_area_get_width>
 80167ac:	4603      	mov	r3, r0
 80167ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /*Create inner the mask*/
    lv_draw_mask_radius_param_t mask_rin_param;
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 80167b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80167b6:	b21a      	sxth	r2, r3
 80167b8:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80167bc:	2301      	movs	r3, #1
 80167be:	68f9      	ldr	r1, [r7, #12]
 80167c0:	f7fb fba6 	bl	8011f10 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 80167c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80167c8:	2100      	movs	r1, #0
 80167ca:	4618      	mov	r0, r3
 80167cc:	f7fb f986 	bl	8011adc <lv_draw_mask_add>
 80167d0:	4603      	mov	r3, r0
 80167d2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

    lv_draw_mask_radius_param_t mask_rout_param;
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
 80167d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80167da:	b21a      	sxth	r2, r3
 80167dc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80167e0:	2300      	movs	r3, #0
 80167e2:	68b9      	ldr	r1, [r7, #8]
 80167e4:	f7fb fb94 	bl	8011f10 <lv_draw_mask_radius_init>
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 80167e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80167ec:	2100      	movs	r1, #0
 80167ee:	4618      	mov	r0, r3
 80167f0:	f7fb f974 	bl	8011adc <lv_draw_mask_add>
 80167f4:	4603      	mov	r3, r0
 80167f6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
 80167fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80167fe:	4618      	mov	r0, r3
 8016800:	f006 f88a 	bl	801c918 <_lv_mem_buf_get>
 8016804:	67b8      	str	r0, [r7, #120]	; 0x78

    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
 8016806:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801680a:	3b01      	subs	r3, #1
 801680c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8016810:	4293      	cmp	r3, r2
 8016812:	bfb8      	it	lt
 8016814:	4613      	movlt	r3, r2
 8016816:	677b      	str	r3, [r7, #116]	; 0x74
    int32_t h;
    lv_draw_mask_res_t mask_res;
    lv_area_t fill_area;

    /*Apply some optimization if there is no other mask*/
    if(simple_mode) {
 8016818:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 801681c:	2b00      	cmp	r3, #0
 801681e:	f000 825d 	beq.w	8016cdc <draw_full_border+0x6f0>
        /*Draw the upper corner area*/
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 8016822:	68bb      	ldr	r3, [r7, #8]
 8016824:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016828:	461a      	mov	r2, r3
 801682a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801682e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016832:	1ad3      	subs	r3, r2, r3
 8016834:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016836:	4413      	add	r3, r2
 8016838:	66fb      	str	r3, [r7, #108]	; 0x6c

        fill_area.x1 = area_outer->x1;
 801683a:	68bb      	ldr	r3, [r7, #8]
 801683c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016840:	84bb      	strh	r3, [r7, #36]	; 0x24
        fill_area.x2 = area_outer->x2;
 8016842:	68bb      	ldr	r3, [r7, #8]
 8016844:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016848:	853b      	strh	r3, [r7, #40]	; 0x28
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 801684a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801684e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016852:	b29a      	uxth	r2, r3
 8016854:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8016858:	b29b      	uxth	r3, r3
 801685a:	4413      	add	r3, r2
 801685c:	b29b      	uxth	r3, r3
 801685e:	b21b      	sxth	r3, r3
 8016860:	84fb      	strh	r3, [r7, #38]	; 0x26
        fill_area.y2 = fill_area.y1;
 8016862:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016866:	857b      	strh	r3, [r7, #42]	; 0x2a
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 8016868:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801686c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016870:	e0d1      	b.n	8016a16 <draw_full_border+0x42a>
            _lv_memset_ff(mask_buf, draw_area_w);
 8016872:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016876:	4619      	mov	r1, r3
 8016878:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 801687a:	f006 fcd6 	bl	801d22a <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 801687e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016882:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8016886:	b29a      	uxth	r2, r3
 8016888:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801688c:	b29b      	uxth	r3, r3
 801688e:	4413      	add	r3, r2
 8016890:	b29b      	uxth	r3, r3
 8016892:	b219      	sxth	r1, r3
 8016894:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016898:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801689c:	b29a      	uxth	r2, r3
 801689e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80168a2:	b29b      	uxth	r3, r3
 80168a4:	4413      	add	r3, r2
 80168a6:	b29b      	uxth	r3, r3
 80168a8:	b21a      	sxth	r2, r3
 80168aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80168ae:	b21b      	sxth	r3, r3
 80168b0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80168b2:	f7fb f945 	bl	8011b40 <lv_draw_mask_apply>
 80168b6:	4603      	mov	r3, r0
 80168b8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

            lv_area_t fill_area2;
            fill_area2.y1 = fill_area.y1;
 80168bc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80168c0:	83fb      	strh	r3, [r7, #30]
            fill_area2.y2 = fill_area.y2;
 80168c2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80168c6:	847b      	strh	r3, [r7, #34]	; 0x22

            fill_area2.x1 = area_outer->x1;
 80168c8:	68bb      	ldr	r3, [r7, #8]
 80168ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168ce:	83bb      	strh	r3, [r7, #28]
            fill_area2.x2 = area_outer->x1 + rout - 1;
 80168d0:	68bb      	ldr	r3, [r7, #8]
 80168d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80168d6:	b29a      	uxth	r2, r3
 80168d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80168dc:	b29b      	uxth	r3, r3
 80168de:	4413      	add	r3, r2
 80168e0:	b29b      	uxth	r3, r3
 80168e2:	3b01      	subs	r3, #1
 80168e4:	b29b      	uxth	r3, r3
 80168e6:	b21b      	sxth	r3, r3
 80168e8:	843b      	strh	r3, [r7, #32]

            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 80168ea:	f107 011c 	add.w	r1, r7, #28
 80168ee:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80168f2:	9302      	str	r3, [sp, #8]
 80168f4:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 80168f8:	9301      	str	r3, [sp, #4]
 80168fa:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80168fe:	9300      	str	r3, [sp, #0]
 8016900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016902:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8016906:	6878      	ldr	r0, [r7, #4]
 8016908:	f7f5 feec 	bl	800c6e4 <_lv_blend_fill>

            /*Draw the top horizontal line*/
            if(fill_area2.y2 < area_outer->y1 + border_width) {
 801690c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016910:	461a      	mov	r2, r3
 8016912:	68bb      	ldr	r3, [r7, #8]
 8016914:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016918:	4619      	mov	r1, r3
 801691a:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801691e:	440b      	add	r3, r1
 8016920:	429a      	cmp	r2, r3
 8016922:	da25      	bge.n	8016970 <draw_full_border+0x384>
                fill_area2.x1 = area_outer->x1 + rout;
 8016924:	68bb      	ldr	r3, [r7, #8]
 8016926:	f9b3 3000 	ldrsh.w	r3, [r3]
 801692a:	b29a      	uxth	r2, r3
 801692c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016930:	b29b      	uxth	r3, r3
 8016932:	4413      	add	r3, r2
 8016934:	b29b      	uxth	r3, r3
 8016936:	b21b      	sxth	r3, r3
 8016938:	83bb      	strh	r3, [r7, #28]
                fill_area2.x2 = area_outer->x2 - rout;
 801693a:	68bb      	ldr	r3, [r7, #8]
 801693c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016940:	b29a      	uxth	r2, r3
 8016942:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016946:	b29b      	uxth	r3, r3
 8016948:	1ad3      	subs	r3, r2, r3
 801694a:	b29b      	uxth	r3, r3
 801694c:	b21b      	sxth	r3, r3
 801694e:	843b      	strh	r3, [r7, #32]

                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 8016950:	f107 011c 	add.w	r1, r7, #28
 8016954:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8016958:	9302      	str	r3, [sp, #8]
 801695a:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 801695e:	9301      	str	r3, [sp, #4]
 8016960:	2301      	movs	r3, #1
 8016962:	9300      	str	r3, [sp, #0]
 8016964:	2300      	movs	r3, #0
 8016966:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801696a:	6878      	ldr	r0, [r7, #4]
 801696c:	f7f5 feba 	bl	800c6e4 <_lv_blend_fill>
            }

            fill_area2.x1 = area_outer->x2 - rout + 1;
 8016970:	68bb      	ldr	r3, [r7, #8]
 8016972:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016976:	b29a      	uxth	r2, r3
 8016978:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801697c:	b29b      	uxth	r3, r3
 801697e:	1ad3      	subs	r3, r2, r3
 8016980:	b29b      	uxth	r3, r3
 8016982:	3301      	adds	r3, #1
 8016984:	b29b      	uxth	r3, r3
 8016986:	b21b      	sxth	r3, r3
 8016988:	83bb      	strh	r3, [r7, #28]
            fill_area2.x2 = area_outer->x2;
 801698a:	68bb      	ldr	r3, [r7, #8]
 801698c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016990:	843b      	strh	r3, [r7, #32]

            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 8016992:	68bb      	ldr	r3, [r7, #8]
 8016994:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016998:	461a      	mov	r2, r3
 801699a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801699e:	1ad3      	subs	r3, r2, r3
 80169a0:	1c5a      	adds	r2, r3, #1
 80169a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80169a6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80169aa:	4619      	mov	r1, r3
 80169ac:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80169b0:	440b      	add	r3, r1
 80169b2:	1ad3      	subs	r3, r2, r3
 80169b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            if(mask_ofs < 0) mask_ofs = 0;
 80169b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80169bc:	2b00      	cmp	r3, #0
 80169be:	da02      	bge.n	80169c6 <draw_full_border+0x3da>
 80169c0:	2300      	movs	r3, #0
 80169c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 80169c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80169ca:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80169cc:	441a      	add	r2, r3
 80169ce:	f107 011c 	add.w	r1, r7, #28
 80169d2:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80169d6:	9302      	str	r3, [sp, #8]
 80169d8:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 80169dc:	9301      	str	r3, [sp, #4]
 80169de:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80169e2:	9300      	str	r3, [sp, #0]
 80169e4:	4613      	mov	r3, r2
 80169e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80169ea:	6878      	ldr	r0, [r7, #4]
 80169ec:	f7f5 fe7a 	bl	800c6e4 <_lv_blend_fill>

            fill_area.y1++;
 80169f0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80169f4:	b29b      	uxth	r3, r3
 80169f6:	3301      	adds	r3, #1
 80169f8:	b29b      	uxth	r3, r3
 80169fa:	b21b      	sxth	r3, r3
 80169fc:	84fb      	strh	r3, [r7, #38]	; 0x26
            fill_area.y2++;
 80169fe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8016a02:	b29b      	uxth	r3, r3
 8016a04:	3301      	adds	r3, #1
 8016a06:	b29b      	uxth	r3, r3
 8016a08:	b21b      	sxth	r3, r3
 8016a0a:	857b      	strh	r3, [r7, #42]	; 0x2a
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 8016a0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016a10:	3301      	adds	r3, #1
 8016a12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016a16:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8016a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016a1c:	429a      	cmp	r2, r3
 8016a1e:	f77f af28 	ble.w	8016872 <draw_full_border+0x286>
        }

        /*Draw the lower corner area */
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
 8016a22:	68bb      	ldr	r3, [r7, #8]
 8016a24:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016a28:	461a      	mov	r2, r3
 8016a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016a2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016a32:	1ad2      	subs	r2, r2, r3
 8016a34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016a36:	1ad3      	subs	r3, r2, r3
 8016a38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
 8016a3c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016a42:	429a      	cmp	r2, r3
 8016a44:	dc03      	bgt.n	8016a4e <draw_full_border+0x462>
 8016a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016a48:	3301      	adds	r3, #1
 8016a4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        fill_area.y1 = disp_area->y1 + lower_corner_end;
 8016a4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016a52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016a56:	b29a      	uxth	r2, r3
 8016a58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016a5c:	b29b      	uxth	r3, r3
 8016a5e:	4413      	add	r3, r2
 8016a60:	b29b      	uxth	r3, r3
 8016a62:	b21b      	sxth	r3, r3
 8016a64:	84fb      	strh	r3, [r7, #38]	; 0x26
        fill_area.y2 = fill_area.y1;
 8016a66:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016a6a:	857b      	strh	r3, [r7, #42]	; 0x2a
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 8016a6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016a70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016a74:	e0d1      	b.n	8016c1a <draw_full_border+0x62e>
            _lv_memset_ff(mask_buf, draw_area_w);
 8016a76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016a7a:	4619      	mov	r1, r3
 8016a7c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8016a7e:	f006 fbd4 	bl	801d22a <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 8016a82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016a86:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8016a8a:	b29a      	uxth	r2, r3
 8016a8c:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8016a90:	b29b      	uxth	r3, r3
 8016a92:	4413      	add	r3, r2
 8016a94:	b29b      	uxth	r3, r3
 8016a96:	b219      	sxth	r1, r3
 8016a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016a9c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8016aa0:	b29a      	uxth	r2, r3
 8016aa2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016aa6:	b29b      	uxth	r3, r3
 8016aa8:	4413      	add	r3, r2
 8016aaa:	b29b      	uxth	r3, r3
 8016aac:	b21a      	sxth	r2, r3
 8016aae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016ab2:	b21b      	sxth	r3, r3
 8016ab4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8016ab6:	f7fb f843 	bl	8011b40 <lv_draw_mask_apply>
 8016aba:	4603      	mov	r3, r0
 8016abc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

            lv_area_t fill_area2;
            fill_area2.x1 = area_outer->x1;
 8016ac0:	68bb      	ldr	r3, [r7, #8]
 8016ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ac6:	82bb      	strh	r3, [r7, #20]
            fill_area2.x2 = area_outer->x1 + rout - 1;
 8016ac8:	68bb      	ldr	r3, [r7, #8]
 8016aca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ace:	b29a      	uxth	r2, r3
 8016ad0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016ad4:	b29b      	uxth	r3, r3
 8016ad6:	4413      	add	r3, r2
 8016ad8:	b29b      	uxth	r3, r3
 8016ada:	3b01      	subs	r3, #1
 8016adc:	b29b      	uxth	r3, r3
 8016ade:	b21b      	sxth	r3, r3
 8016ae0:	833b      	strh	r3, [r7, #24]
            fill_area2.y1 = fill_area.y1;
 8016ae2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016ae6:	82fb      	strh	r3, [r7, #22]
            fill_area2.y2 = fill_area.y2;
 8016ae8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8016aec:	837b      	strh	r3, [r7, #26]

            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 8016aee:	f107 0114 	add.w	r1, r7, #20
 8016af2:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8016af6:	9302      	str	r3, [sp, #8]
 8016af8:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8016afc:	9301      	str	r3, [sp, #4]
 8016afe:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8016b02:	9300      	str	r3, [sp, #0]
 8016b04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016b06:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8016b0a:	6878      	ldr	r0, [r7, #4]
 8016b0c:	f7f5 fdea 	bl	800c6e4 <_lv_blend_fill>

            /*Draw the bottom horizontal line*/
            if(fill_area2.y2 > area_outer->y2 - border_width) {
 8016b10:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8016b14:	461a      	mov	r2, r3
 8016b16:	68bb      	ldr	r3, [r7, #8]
 8016b18:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016b1c:	4619      	mov	r1, r3
 8016b1e:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8016b22:	1acb      	subs	r3, r1, r3
 8016b24:	429a      	cmp	r2, r3
 8016b26:	dd25      	ble.n	8016b74 <draw_full_border+0x588>
                fill_area2.x1 = area_outer->x1 + rout;
 8016b28:	68bb      	ldr	r3, [r7, #8]
 8016b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b2e:	b29a      	uxth	r2, r3
 8016b30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016b34:	b29b      	uxth	r3, r3
 8016b36:	4413      	add	r3, r2
 8016b38:	b29b      	uxth	r3, r3
 8016b3a:	b21b      	sxth	r3, r3
 8016b3c:	82bb      	strh	r3, [r7, #20]
                fill_area2.x2 = area_outer->x2 - rout;
 8016b3e:	68bb      	ldr	r3, [r7, #8]
 8016b40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016b44:	b29a      	uxth	r2, r3
 8016b46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016b4a:	b29b      	uxth	r3, r3
 8016b4c:	1ad3      	subs	r3, r2, r3
 8016b4e:	b29b      	uxth	r3, r3
 8016b50:	b21b      	sxth	r3, r3
 8016b52:	833b      	strh	r3, [r7, #24]

                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 8016b54:	f107 0114 	add.w	r1, r7, #20
 8016b58:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8016b5c:	9302      	str	r3, [sp, #8]
 8016b5e:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8016b62:	9301      	str	r3, [sp, #4]
 8016b64:	2301      	movs	r3, #1
 8016b66:	9300      	str	r3, [sp, #0]
 8016b68:	2300      	movs	r3, #0
 8016b6a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8016b6e:	6878      	ldr	r0, [r7, #4]
 8016b70:	f7f5 fdb8 	bl	800c6e4 <_lv_blend_fill>
            }
            fill_area2.x1 = area_outer->x2 - rout + 1;
 8016b74:	68bb      	ldr	r3, [r7, #8]
 8016b76:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016b7a:	b29a      	uxth	r2, r3
 8016b7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016b80:	b29b      	uxth	r3, r3
 8016b82:	1ad3      	subs	r3, r2, r3
 8016b84:	b29b      	uxth	r3, r3
 8016b86:	3301      	adds	r3, #1
 8016b88:	b29b      	uxth	r3, r3
 8016b8a:	b21b      	sxth	r3, r3
 8016b8c:	82bb      	strh	r3, [r7, #20]
            fill_area2.x2 = area_outer->x2;
 8016b8e:	68bb      	ldr	r3, [r7, #8]
 8016b90:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016b94:	833b      	strh	r3, [r7, #24]

            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
 8016b96:	68bb      	ldr	r3, [r7, #8]
 8016b98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016b9c:	461a      	mov	r2, r3
 8016b9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016ba2:	1ad3      	subs	r3, r2, r3
 8016ba4:	1c5a      	adds	r2, r3, #1
 8016ba6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016baa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8016bae:	4619      	mov	r1, r3
 8016bb0:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8016bb4:	440b      	add	r3, r1
 8016bb6:	1ad3      	subs	r3, r2, r3
 8016bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            if(mask_ofs < 0) mask_ofs = 0;
 8016bbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	da02      	bge.n	8016bca <draw_full_border+0x5de>
 8016bc4:	2300      	movs	r3, #0
 8016bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 8016bca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016bce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016bd0:	441a      	add	r2, r3
 8016bd2:	f107 0114 	add.w	r1, r7, #20
 8016bd6:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8016bda:	9302      	str	r3, [sp, #8]
 8016bdc:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8016be0:	9301      	str	r3, [sp, #4]
 8016be2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8016be6:	9300      	str	r3, [sp, #0]
 8016be8:	4613      	mov	r3, r2
 8016bea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8016bee:	6878      	ldr	r0, [r7, #4]
 8016bf0:	f7f5 fd78 	bl	800c6e4 <_lv_blend_fill>

            fill_area.y1++;
 8016bf4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016bf8:	b29b      	uxth	r3, r3
 8016bfa:	3301      	adds	r3, #1
 8016bfc:	b29b      	uxth	r3, r3
 8016bfe:	b21b      	sxth	r3, r3
 8016c00:	84fb      	strh	r3, [r7, #38]	; 0x26
            fill_area.y2++;
 8016c02:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8016c06:	b29b      	uxth	r3, r3
 8016c08:	3301      	adds	r3, #1
 8016c0a:	b29b      	uxth	r3, r3
 8016c0c:	b21b      	sxth	r3, r3
 8016c0e:	857b      	strh	r3, [r7, #42]	; 0x2a
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 8016c10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016c14:	3301      	adds	r3, #1
 8016c16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016c1a:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8016c1e:	461a      	mov	r2, r3
 8016c20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016c24:	4293      	cmp	r3, r2
 8016c26:	f77f af26 	ble.w	8016a76 <draw_full_border+0x48a>
        }

        /*Draw the left vertical part*/
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 8016c2a:	68bb      	ldr	r3, [r7, #8]
 8016c2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016c30:	b29a      	uxth	r2, r3
 8016c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016c34:	b29b      	uxth	r3, r3
 8016c36:	4413      	add	r3, r2
 8016c38:	b29b      	uxth	r3, r3
 8016c3a:	3301      	adds	r3, #1
 8016c3c:	b29b      	uxth	r3, r3
 8016c3e:	b21b      	sxth	r3, r3
 8016c40:	84fb      	strh	r3, [r7, #38]	; 0x26
        fill_area.y2 = area_outer->y2 - corner_size - 1;
 8016c42:	68bb      	ldr	r3, [r7, #8]
 8016c44:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016c48:	b29a      	uxth	r2, r3
 8016c4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016c4c:	b29b      	uxth	r3, r3
 8016c4e:	1ad3      	subs	r3, r2, r3
 8016c50:	b29b      	uxth	r3, r3
 8016c52:	3b01      	subs	r3, #1
 8016c54:	b29b      	uxth	r3, r3
 8016c56:	b21b      	sxth	r3, r3
 8016c58:	857b      	strh	r3, [r7, #42]	; 0x2a

        fill_area.x1 = area_outer->x1;
 8016c5a:	68bb      	ldr	r3, [r7, #8]
 8016c5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c60:	84bb      	strh	r3, [r7, #36]	; 0x24
        fill_area.x2 = area_outer->x1 + border_width - 1;
 8016c62:	68bb      	ldr	r3, [r7, #8]
 8016c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c68:	b29a      	uxth	r2, r3
 8016c6a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8016c6e:	4413      	add	r3, r2
 8016c70:	b29b      	uxth	r3, r3
 8016c72:	3b01      	subs	r3, #1
 8016c74:	b29b      	uxth	r3, r3
 8016c76:	b21b      	sxth	r3, r3
 8016c78:	853b      	strh	r3, [r7, #40]	; 0x28
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 8016c7a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8016c7e:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8016c82:	9302      	str	r3, [sp, #8]
 8016c84:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8016c88:	9301      	str	r3, [sp, #4]
 8016c8a:	2301      	movs	r3, #1
 8016c8c:	9300      	str	r3, [sp, #0]
 8016c8e:	2300      	movs	r3, #0
 8016c90:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8016c94:	6878      	ldr	r0, [r7, #4]
 8016c96:	f7f5 fd25 	bl	800c6e4 <_lv_blend_fill>

        /*Draw the right vertical border*/
        fill_area.x1 = area_outer->x2 - border_width + 1;
 8016c9a:	68bb      	ldr	r3, [r7, #8]
 8016c9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016ca0:	b29a      	uxth	r2, r3
 8016ca2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8016ca6:	1ad3      	subs	r3, r2, r3
 8016ca8:	b29b      	uxth	r3, r3
 8016caa:	3301      	adds	r3, #1
 8016cac:	b29b      	uxth	r3, r3
 8016cae:	b21b      	sxth	r3, r3
 8016cb0:	84bb      	strh	r3, [r7, #36]	; 0x24
        fill_area.x2 = area_outer->x2;
 8016cb2:	68bb      	ldr	r3, [r7, #8]
 8016cb4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016cb8:	853b      	strh	r3, [r7, #40]	; 0x28

        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 8016cba:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8016cbe:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8016cc2:	9302      	str	r3, [sp, #8]
 8016cc4:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8016cc8:	9301      	str	r3, [sp, #4]
 8016cca:	2301      	movs	r3, #1
 8016ccc:	9300      	str	r3, [sp, #0]
 8016cce:	2300      	movs	r3, #0
 8016cd0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8016cd4:	6878      	ldr	r0, [r7, #4]
 8016cd6:	f7f5 fd05 	bl	800c6e4 <_lv_blend_fill>
 8016cda:	e06b      	b.n	8016db4 <draw_full_border+0x7c8>
    }
    /*Process line by line if there is other mask too*/
    else {
        fill_area.x1 = area_outer->x1;
 8016cdc:	68bb      	ldr	r3, [r7, #8]
 8016cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ce2:	84bb      	strh	r3, [r7, #36]	; 0x24
        fill_area.x2 = area_outer->x2;
 8016ce4:	68bb      	ldr	r3, [r7, #8]
 8016ce6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016cea:	853b      	strh	r3, [r7, #40]	; 0x28
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 8016cec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016cf0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016cf4:	b29a      	uxth	r2, r3
 8016cf6:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8016cfa:	b29b      	uxth	r3, r3
 8016cfc:	4413      	add	r3, r2
 8016cfe:	b29b      	uxth	r3, r3
 8016d00:	b21b      	sxth	r3, r3
 8016d02:	84fb      	strh	r3, [r7, #38]	; 0x26
        fill_area.y2 = fill_area.y1;
 8016d04:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016d08:	857b      	strh	r3, [r7, #42]	; 0x2a

        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8016d0a:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8016d0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016d12:	e048      	b.n	8016da6 <draw_full_border+0x7ba>
            _lv_memset_ff(mask_buf, draw_area_w);
 8016d14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016d18:	4619      	mov	r1, r3
 8016d1a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8016d1c:	f006 fa85 	bl	801d22a <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
 8016d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016d24:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8016d28:	b29a      	uxth	r2, r3
 8016d2a:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8016d2e:	b29b      	uxth	r3, r3
 8016d30:	4413      	add	r3, r2
 8016d32:	b29b      	uxth	r3, r3
 8016d34:	b219      	sxth	r1, r3
 8016d36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016d3a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8016d3e:	b29a      	uxth	r2, r3
 8016d40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016d44:	b29b      	uxth	r3, r3
 8016d46:	4413      	add	r3, r2
 8016d48:	b29b      	uxth	r3, r3
 8016d4a:	b21a      	sxth	r2, r3
 8016d4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016d50:	b21b      	sxth	r3, r3
 8016d52:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8016d54:	f7fa fef4 	bl	8011b40 <lv_draw_mask_apply>
 8016d58:	4603      	mov	r3, r0
 8016d5a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
 8016d5e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8016d62:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8016d66:	9302      	str	r3, [sp, #8]
 8016d68:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8016d6c:	9301      	str	r3, [sp, #4]
 8016d6e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8016d72:	9300      	str	r3, [sp, #0]
 8016d74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016d76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8016d7a:	6878      	ldr	r0, [r7, #4]
 8016d7c:	f7f5 fcb2 	bl	800c6e4 <_lv_blend_fill>
            fill_area.y1++;
 8016d80:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016d84:	b29b      	uxth	r3, r3
 8016d86:	3301      	adds	r3, #1
 8016d88:	b29b      	uxth	r3, r3
 8016d8a:	b21b      	sxth	r3, r3
 8016d8c:	84fb      	strh	r3, [r7, #38]	; 0x26
            fill_area.y2++;
 8016d8e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8016d92:	b29b      	uxth	r3, r3
 8016d94:	3301      	adds	r3, #1
 8016d96:	b29b      	uxth	r3, r3
 8016d98:	b21b      	sxth	r3, r3
 8016d9a:	857b      	strh	r3, [r7, #42]	; 0x2a
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8016d9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016da0:	3301      	adds	r3, #1
 8016da2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016da6:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8016daa:	461a      	mov	r2, r3
 8016dac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016db0:	4293      	cmp	r3, r2
 8016db2:	ddaf      	ble.n	8016d14 <draw_full_border+0x728>

        }
    }
    lv_draw_mask_remove_id(mask_rin_id);
 8016db4:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8016db8:	4618      	mov	r0, r3
 8016dba:	f7fa ff05 	bl	8011bc8 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_rout_id);
 8016dbe:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 8016dc2:	4618      	mov	r0, r3
 8016dc4:	f7fa ff00 	bl	8011bc8 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
 8016dc8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8016dca:	f005 fe83 	bl	801cad4 <_lv_mem_buf_release>
 8016dce:	e000      	b.n	8016dd2 <draw_full_border+0x7e6>
    if(is_common == false) return;
 8016dd0:	bf00      	nop
}
 8016dd2:	37d0      	adds	r7, #208	; 0xd0
 8016dd4:	46bd      	mov	sp, r7
 8016dd6:	bd80      	pop	{r7, pc}

08016dd8 <lv_color_mix>:
{
 8016dd8:	b480      	push	{r7}
 8016dda:	b087      	sub	sp, #28
 8016ddc:	af00      	add	r7, sp, #0
 8016dde:	60f8      	str	r0, [r7, #12]
 8016de0:	60b9      	str	r1, [r7, #8]
 8016de2:	4613      	mov	r3, r2
 8016de4:	71fb      	strb	r3, [r7, #7]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8016de6:	7bbb      	ldrb	r3, [r7, #14]
 8016de8:	461a      	mov	r2, r3
 8016dea:	79fb      	ldrb	r3, [r7, #7]
 8016dec:	fb03 f202 	mul.w	r2, r3, r2
 8016df0:	7abb      	ldrb	r3, [r7, #10]
 8016df2:	4619      	mov	r1, r3
 8016df4:	79fb      	ldrb	r3, [r7, #7]
 8016df6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8016dfa:	fb03 f301 	mul.w	r3, r3, r1
 8016dfe:	4413      	add	r3, r2
 8016e00:	461a      	mov	r2, r3
 8016e02:	4613      	mov	r3, r2
 8016e04:	021b      	lsls	r3, r3, #8
 8016e06:	4413      	add	r3, r2
 8016e08:	01db      	lsls	r3, r3, #7
 8016e0a:	4413      	add	r3, r2
 8016e0c:	0ddb      	lsrs	r3, r3, #23
 8016e0e:	b2db      	uxtb	r3, r3
 8016e10:	75bb      	strb	r3, [r7, #22]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8016e12:	7b7b      	ldrb	r3, [r7, #13]
 8016e14:	461a      	mov	r2, r3
 8016e16:	79fb      	ldrb	r3, [r7, #7]
 8016e18:	fb03 f202 	mul.w	r2, r3, r2
 8016e1c:	7a7b      	ldrb	r3, [r7, #9]
 8016e1e:	4619      	mov	r1, r3
 8016e20:	79fb      	ldrb	r3, [r7, #7]
 8016e22:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8016e26:	fb03 f301 	mul.w	r3, r3, r1
 8016e2a:	4413      	add	r3, r2
 8016e2c:	461a      	mov	r2, r3
 8016e2e:	4613      	mov	r3, r2
 8016e30:	021b      	lsls	r3, r3, #8
 8016e32:	4413      	add	r3, r2
 8016e34:	01db      	lsls	r3, r3, #7
 8016e36:	4413      	add	r3, r2
 8016e38:	0ddb      	lsrs	r3, r3, #23
 8016e3a:	b2db      	uxtb	r3, r3
 8016e3c:	757b      	strb	r3, [r7, #21]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8016e3e:	7b3b      	ldrb	r3, [r7, #12]
 8016e40:	461a      	mov	r2, r3
 8016e42:	79fb      	ldrb	r3, [r7, #7]
 8016e44:	fb03 f202 	mul.w	r2, r3, r2
 8016e48:	7a3b      	ldrb	r3, [r7, #8]
 8016e4a:	4619      	mov	r1, r3
 8016e4c:	79fb      	ldrb	r3, [r7, #7]
 8016e4e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8016e52:	fb03 f301 	mul.w	r3, r3, r1
 8016e56:	4413      	add	r3, r2
 8016e58:	461a      	mov	r2, r3
 8016e5a:	4613      	mov	r3, r2
 8016e5c:	021b      	lsls	r3, r3, #8
 8016e5e:	4413      	add	r3, r2
 8016e60:	01db      	lsls	r3, r3, #7
 8016e62:	4413      	add	r3, r2
 8016e64:	0ddb      	lsrs	r3, r3, #23
 8016e66:	b2db      	uxtb	r3, r3
 8016e68:	753b      	strb	r3, [r7, #20]
    LV_COLOR_SET_A(ret, 0xFF);
 8016e6a:	23ff      	movs	r3, #255	; 0xff
 8016e6c:	75fb      	strb	r3, [r7, #23]
    return ret;
 8016e6e:	697b      	ldr	r3, [r7, #20]
}
 8016e70:	4618      	mov	r0, r3
 8016e72:	371c      	adds	r7, #28
 8016e74:	46bd      	mov	sp, r7
 8016e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e7a:	4770      	bx	lr

08016e7c <_lv_memcpy_small>:
{
 8016e7c:	b480      	push	{r7}
 8016e7e:	b087      	sub	sp, #28
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	60f8      	str	r0, [r7, #12]
 8016e84:	60b9      	str	r1, [r7, #8]
 8016e86:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 8016e8c:	68bb      	ldr	r3, [r7, #8]
 8016e8e:	613b      	str	r3, [r7, #16]
    while(len) {
 8016e90:	e00c      	b.n	8016eac <_lv_memcpy_small+0x30>
        *d8 = *s8;
 8016e92:	693b      	ldr	r3, [r7, #16]
 8016e94:	781a      	ldrb	r2, [r3, #0]
 8016e96:	697b      	ldr	r3, [r7, #20]
 8016e98:	701a      	strb	r2, [r3, #0]
        d8++;
 8016e9a:	697b      	ldr	r3, [r7, #20]
 8016e9c:	3301      	adds	r3, #1
 8016e9e:	617b      	str	r3, [r7, #20]
        s8++;
 8016ea0:	693b      	ldr	r3, [r7, #16]
 8016ea2:	3301      	adds	r3, #1
 8016ea4:	613b      	str	r3, [r7, #16]
        len--;
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	3b01      	subs	r3, #1
 8016eaa:	607b      	str	r3, [r7, #4]
    while(len) {
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d1ef      	bne.n	8016e92 <_lv_memcpy_small+0x16>
    return dst;
 8016eb2:	68fb      	ldr	r3, [r7, #12]
}
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	371c      	adds	r7, #28
 8016eb8:	46bd      	mov	sp, r7
 8016eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ebe:	4770      	bx	lr

08016ec0 <lv_img_buf_get_px_color>:
 * Not used in other cases.
 * @param safe true: check out of bounds
 * @return color of the point
 */
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)
{
 8016ec0:	b580      	push	{r7, lr}
 8016ec2:	b090      	sub	sp, #64	; 0x40
 8016ec4:	af00      	add	r7, sp, #0
 8016ec6:	60f8      	str	r0, [r7, #12]
 8016ec8:	607b      	str	r3, [r7, #4]
 8016eca:	460b      	mov	r3, r1
 8016ecc:	817b      	strh	r3, [r7, #10]
 8016ece:	4613      	mov	r3, r2
 8016ed0:	813b      	strh	r3, [r7, #8]
    lv_color_t p_color = LV_COLOR_BLACK;
 8016ed2:	2300      	movs	r3, #0
 8016ed4:	753b      	strb	r3, [r7, #20]
 8016ed6:	2300      	movs	r3, #0
 8016ed8:	757b      	strb	r3, [r7, #21]
 8016eda:	2300      	movs	r3, #0
 8016edc:	75bb      	strb	r3, [r7, #22]
 8016ede:	23ff      	movs	r3, #255	; 0xff
 8016ee0:	75fb      	strb	r3, [r7, #23]
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	689b      	ldr	r3, [r3, #8]
 8016ee6:	63fb      	str	r3, [r7, #60]	; 0x3c

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
 8016ee8:	68fb      	ldr	r3, [r7, #12]
 8016eea:	781b      	ldrb	r3, [r3, #0]
 8016eec:	f003 031f 	and.w	r3, r3, #31
 8016ef0:	b2db      	uxtb	r3, r3
 8016ef2:	2b04      	cmp	r3, #4
 8016ef4:	d00d      	beq.n	8016f12 <lv_img_buf_get_px_color+0x52>
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	781b      	ldrb	r3, [r3, #0]
 8016efa:	f003 031f 	and.w	r3, r3, #31
 8016efe:	b2db      	uxtb	r3, r3
 8016f00:	2b06      	cmp	r3, #6
 8016f02:	d006      	beq.n	8016f12 <lv_img_buf_get_px_color+0x52>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	781b      	ldrb	r3, [r3, #0]
 8016f08:	f003 031f 	and.w	r3, r3, #31
 8016f0c:	b2db      	uxtb	r3, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
 8016f0e:	2b05      	cmp	r3, #5
 8016f10:	d127      	bne.n	8016f62 <lv_img_buf_get_px_color+0xa2>
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	781b      	ldrb	r3, [r3, #0]
 8016f16:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8016f1a:	b2db      	uxtb	r3, r3
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	f7f7 f99f 	bl	800e260 <lv_img_cf_get_px_size>
 8016f22:	4603      	mov	r3, r0
 8016f24:	08db      	lsrs	r3, r3, #3
 8016f26:	77fb      	strb	r3, [r7, #31]
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8016f30:	b29b      	uxth	r3, r3
 8016f32:	461a      	mov	r2, r3
 8016f34:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8016f38:	fb03 f202 	mul.w	r2, r3, r2
 8016f3c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016f40:	4413      	add	r3, r2
 8016f42:	7ffa      	ldrb	r2, [r7, #31]
 8016f44:	fb02 f303 	mul.w	r3, r2, r3
 8016f48:	61bb      	str	r3, [r7, #24]
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
 8016f4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016f4c:	69bb      	ldr	r3, [r7, #24]
 8016f4e:	18d1      	adds	r1, r2, r3
 8016f50:	f107 0314 	add.w	r3, r7, #20
 8016f54:	2204      	movs	r2, #4
 8016f56:	4618      	mov	r0, r3
 8016f58:	f7ff ff90 	bl	8016e7c <_lv_memcpy_small>
#if LV_COLOR_SIZE == 32
        p_color.ch.alpha = 0xFF; /*Only the color should be get so use a default alpha value*/
 8016f5c:	23ff      	movs	r3, #255	; 0xff
 8016f5e:	75fb      	strb	r3, [r7, #23]
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 8016f60:	e0eb      	b.n	801713a <lv_img_buf_get_px_color+0x27a>
#endif
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	781b      	ldrb	r3, [r3, #0]
 8016f66:	f003 031f 	and.w	r3, r3, #31
 8016f6a:	b2db      	uxtb	r3, r3
 8016f6c:	2b07      	cmp	r3, #7
 8016f6e:	d131      	bne.n	8016fd4 <lv_img_buf_get_px_color+0x114>
        buf_u8 += 4 * 2;
 8016f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f72:	3308      	adds	r3, #8
 8016f74:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t bit = x & 0x7;
 8016f76:	897b      	ldrh	r3, [r7, #10]
 8016f78:	b2db      	uxtb	r3, r3
 8016f7a:	f003 0307 	and.w	r3, r3, #7
 8016f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        x           = x >> 3;
 8016f82:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016f86:	10db      	asrs	r3, r3, #3
 8016f88:	817b      	strh	r3, [r7, #10]

        /* Get the current pixel.
         * dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 8, 16, 24 ...*/
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8016f92:	b29b      	uxth	r3, r3
 8016f94:	3307      	adds	r3, #7
 8016f96:	10db      	asrs	r3, r3, #3
 8016f98:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8016f9c:	fb02 f203 	mul.w	r2, r2, r3
 8016fa0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016fa4:	4413      	add	r3, r2
 8016fa6:	623b      	str	r3, [r7, #32]
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 8016fa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016faa:	6a3b      	ldr	r3, [r7, #32]
 8016fac:	4413      	add	r3, r2
 8016fae:	781b      	ldrb	r3, [r3, #0]
 8016fb0:	4619      	mov	r1, r3
 8016fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fb6:	f1c3 0307 	rsb	r3, r3, #7
 8016fba:	2201      	movs	r2, #1
 8016fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8016fc0:	ea01 0203 	and.w	r2, r1, r3
 8016fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fc8:	f1c3 0307 	rsb	r3, r3, #7
 8016fcc:	fa42 f303 	asr.w	r3, r2, r3
 8016fd0:	617b      	str	r3, [r7, #20]
 8016fd2:	e0b2      	b.n	801713a <lv_img_buf_get_px_color+0x27a>
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	781b      	ldrb	r3, [r3, #0]
 8016fd8:	f003 031f 	and.w	r3, r3, #31
 8016fdc:	b2db      	uxtb	r3, r3
 8016fde:	2b08      	cmp	r3, #8
 8016fe0:	d133      	bne.n	801704a <lv_img_buf_get_px_color+0x18a>
        buf_u8 += 4 * 4;
 8016fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016fe4:	3310      	adds	r3, #16
 8016fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t bit = (x & 0x3) * 2;
 8016fe8:	897b      	ldrh	r3, [r7, #10]
 8016fea:	b2db      	uxtb	r3, r3
 8016fec:	f003 0303 	and.w	r3, r3, #3
 8016ff0:	b2db      	uxtb	r3, r3
 8016ff2:	005b      	lsls	r3, r3, #1
 8016ff4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        x           = x >> 2;
 8016ff8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016ffc:	109b      	asrs	r3, r3, #2
 8016ffe:	817b      	strh	r3, [r7, #10]

        /* Get the current pixel.
         * dsc->header.w + 3 means rounding up to 4 because the lines are byte aligned
         * so the possible real width are 4, 8, 12 ...*/
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8017008:	b29b      	uxth	r3, r3
 801700a:	3303      	adds	r3, #3
 801700c:	109b      	asrs	r3, r3, #2
 801700e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8017012:	fb02 f203 	mul.w	r2, r2, r3
 8017016:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801701a:	4413      	add	r3, r2
 801701c:	62bb      	str	r3, [r7, #40]	; 0x28
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 801701e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017022:	4413      	add	r3, r2
 8017024:	781b      	ldrb	r3, [r3, #0]
 8017026:	4619      	mov	r1, r3
 8017028:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801702c:	f1c3 0306 	rsb	r3, r3, #6
 8017030:	2203      	movs	r2, #3
 8017032:	fa02 f303 	lsl.w	r3, r2, r3
 8017036:	ea01 0203 	and.w	r2, r1, r3
 801703a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801703e:	f1c3 0306 	rsb	r3, r3, #6
 8017042:	fa42 f303 	asr.w	r3, r2, r3
 8017046:	617b      	str	r3, [r7, #20]
 8017048:	e077      	b.n	801713a <lv_img_buf_get_px_color+0x27a>
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
 801704a:	68fb      	ldr	r3, [r7, #12]
 801704c:	781b      	ldrb	r3, [r3, #0]
 801704e:	f003 031f 	and.w	r3, r3, #31
 8017052:	b2db      	uxtb	r3, r3
 8017054:	2b09      	cmp	r3, #9
 8017056:	d133      	bne.n	80170c0 <lv_img_buf_get_px_color+0x200>
        buf_u8 += 4 * 16;
 8017058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801705a:	3340      	adds	r3, #64	; 0x40
 801705c:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t bit = (x & 0x1) * 4;
 801705e:	897b      	ldrh	r3, [r7, #10]
 8017060:	b2db      	uxtb	r3, r3
 8017062:	f003 0301 	and.w	r3, r3, #1
 8017066:	b2db      	uxtb	r3, r3
 8017068:	009b      	lsls	r3, r3, #2
 801706a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        x           = x >> 1;
 801706e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8017072:	105b      	asrs	r3, r3, #1
 8017074:	817b      	strh	r3, [r7, #10]

        /* Get the current pixel.
         * dsc->header.w + 1 means rounding up to 2 because the lines are byte aligned
         * so the possible real width are 2, 4, 6 ...*/
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801707e:	b29b      	uxth	r3, r3
 8017080:	3301      	adds	r3, #1
 8017082:	105b      	asrs	r3, r3, #1
 8017084:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8017088:	fb02 f203 	mul.w	r2, r2, r3
 801708c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8017090:	4413      	add	r3, r2
 8017092:	633b      	str	r3, [r7, #48]	; 0x30
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 8017094:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017098:	4413      	add	r3, r2
 801709a:	781b      	ldrb	r3, [r3, #0]
 801709c:	4619      	mov	r1, r3
 801709e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80170a2:	f1c3 0304 	rsb	r3, r3, #4
 80170a6:	220f      	movs	r2, #15
 80170a8:	fa02 f303 	lsl.w	r3, r2, r3
 80170ac:	ea01 0203 	and.w	r2, r1, r3
 80170b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80170b4:	f1c3 0304 	rsb	r3, r3, #4
 80170b8:	fa42 f303 	asr.w	r3, r2, r3
 80170bc:	617b      	str	r3, [r7, #20]
 80170be:	e03c      	b.n	801713a <lv_img_buf_get_px_color+0x27a>
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	781b      	ldrb	r3, [r3, #0]
 80170c4:	f003 031f 	and.w	r3, r3, #31
 80170c8:	b2db      	uxtb	r3, r3
 80170ca:	2b0a      	cmp	r3, #10
 80170cc:	d117      	bne.n	80170fe <lv_img_buf_get_px_color+0x23e>
        buf_u8 += 4 * 256;
 80170ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80170d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80170d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint32_t px  = dsc->header.w * y + x;
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80170de:	b29b      	uxth	r3, r3
 80170e0:	461a      	mov	r2, r3
 80170e2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80170e6:	fb03 f202 	mul.w	r2, r3, r2
 80170ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80170ee:	4413      	add	r3, r2
 80170f0:	63bb      	str	r3, [r7, #56]	; 0x38
        p_color.full = buf_u8[px];
 80170f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80170f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170f6:	4413      	add	r3, r2
 80170f8:	781b      	ldrb	r3, [r3, #0]
 80170fa:	617b      	str	r3, [r7, #20]
 80170fc:	e01d      	b.n	801713a <lv_img_buf_get_px_color+0x27a>
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	781b      	ldrb	r3, [r3, #0]
 8017102:	f003 031f 	and.w	r3, r3, #31
 8017106:	b2db      	uxtb	r3, r3
 8017108:	2b0b      	cmp	r3, #11
 801710a:	d014      	beq.n	8017136 <lv_img_buf_get_px_color+0x276>
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	781b      	ldrb	r3, [r3, #0]
 8017110:	f003 031f 	and.w	r3, r3, #31
 8017114:	b2db      	uxtb	r3, r3
 8017116:	2b0c      	cmp	r3, #12
 8017118:	d00d      	beq.n	8017136 <lv_img_buf_get_px_color+0x276>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	781b      	ldrb	r3, [r3, #0]
 801711e:	f003 031f 	and.w	r3, r3, #31
 8017122:	b2db      	uxtb	r3, r3
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8017124:	2b0d      	cmp	r3, #13
 8017126:	d006      	beq.n	8017136 <lv_img_buf_get_px_color+0x276>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	781b      	ldrb	r3, [r3, #0]
 801712c:	f003 031f 	and.w	r3, r3, #31
 8017130:	b2db      	uxtb	r3, r3
 8017132:	2b0e      	cmp	r3, #14
 8017134:	d101      	bne.n	801713a <lv_img_buf_get_px_color+0x27a>
        p_color = color;
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	617b      	str	r3, [r7, #20]
    }
    return p_color;
 801713a:	697b      	ldr	r3, [r7, #20]
}
 801713c:	4618      	mov	r0, r3
 801713e:	3740      	adds	r7, #64	; 0x40
 8017140:	46bd      	mov	sp, r7
 8017142:	bd80      	pop	{r7, pc}

08017144 <lv_img_buf_get_px_alpha>:
 * @param y x coordinate of the point to set
 * @param safe true: check out of bounds
 * @return alpha value of the point
 */
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
 8017144:	b490      	push	{r4, r7}
 8017146:	b092      	sub	sp, #72	; 0x48
 8017148:	af00      	add	r7, sp, #0
 801714a:	6078      	str	r0, [r7, #4]
 801714c:	460b      	mov	r3, r1
 801714e:	807b      	strh	r3, [r7, #2]
 8017150:	4613      	mov	r3, r2
 8017152:	803b      	strh	r3, [r7, #0]
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	689b      	ldr	r3, [r3, #8]
 8017158:	647b      	str	r3, [r7, #68]	; 0x44

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	781b      	ldrb	r3, [r3, #0]
 801715e:	f003 031f 	and.w	r3, r3, #31
 8017162:	b2db      	uxtb	r3, r3
 8017164:	2b05      	cmp	r3, #5
 8017166:	d114      	bne.n	8017192 <lv_img_buf_get_px_alpha+0x4e>
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8017170:	b29b      	uxth	r3, r3
 8017172:	461a      	mov	r2, r3
 8017174:	f9b7 3000 	ldrsh.w	r3, [r7]
 8017178:	fb03 f202 	mul.w	r2, r3, r2
 801717c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017180:	4413      	add	r3, r2
 8017182:	009b      	lsls	r3, r3, #2
 8017184:	623b      	str	r3, [r7, #32]
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8017186:	6a3b      	ldr	r3, [r7, #32]
 8017188:	3303      	adds	r3, #3
 801718a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801718c:	4413      	add	r3, r2
 801718e:	781b      	ldrb	r3, [r3, #0]
 8017190:	e0e1      	b.n	8017356 <lv_img_buf_get_px_alpha+0x212>
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	781b      	ldrb	r3, [r3, #0]
 8017196:	f003 031f 	and.w	r3, r3, #31
 801719a:	b2db      	uxtb	r3, r3
 801719c:	2b0b      	cmp	r3, #11
 801719e:	d136      	bne.n	801720e <lv_img_buf_get_px_alpha+0xca>
        uint8_t bit = x & 0x7;
 80171a0:	887b      	ldrh	r3, [r7, #2]
 80171a2:	b2db      	uxtb	r3, r3
 80171a4:	f003 0307 	and.w	r3, r3, #7
 80171a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        x           = x >> 3;
 80171ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80171b0:	10db      	asrs	r3, r3, #3
 80171b2:	807b      	strh	r3, [r7, #2]

        /* Get the current pixel.
         * dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 8 ,16, 24 ...*/
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80171bc:	b29b      	uxth	r3, r3
 80171be:	3307      	adds	r3, #7
 80171c0:	10db      	asrs	r3, r3, #3
 80171c2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80171c6:	fb02 f203 	mul.w	r2, r2, r3
 80171ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80171ce:	4413      	add	r3, r2
 80171d0:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 80171d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80171d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171d6:	4413      	add	r3, r2
 80171d8:	781b      	ldrb	r3, [r3, #0]
 80171da:	4619      	mov	r1, r3
 80171dc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80171e0:	f1c3 0307 	rsb	r3, r3, #7
 80171e4:	2201      	movs	r2, #1
 80171e6:	fa02 f303 	lsl.w	r3, r2, r3
 80171ea:	ea01 0203 	and.w	r2, r1, r3
 80171ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80171f2:	f1c3 0307 	rsb	r3, r3, #7
 80171f6:	fa42 f303 	asr.w	r3, r2, r3
 80171fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 80171fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017202:	2b00      	cmp	r3, #0
 8017204:	d001      	beq.n	801720a <lv_img_buf_get_px_alpha+0xc6>
 8017206:	2300      	movs	r3, #0
 8017208:	e0a5      	b.n	8017356 <lv_img_buf_get_px_alpha+0x212>
 801720a:	23ff      	movs	r3, #255	; 0xff
 801720c:	e0a3      	b.n	8017356 <lv_img_buf_get_px_alpha+0x212>
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	781b      	ldrb	r3, [r3, #0]
 8017212:	f003 031f 	and.w	r3, r3, #31
 8017216:	b2db      	uxtb	r3, r3
 8017218:	2b0c      	cmp	r3, #12
 801721a:	d13b      	bne.n	8017294 <lv_img_buf_get_px_alpha+0x150>
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 801721c:	4b50      	ldr	r3, [pc, #320]	; (8017360 <lv_img_buf_get_px_alpha+0x21c>)
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	61fb      	str	r3, [r7, #28]

        uint8_t bit = (x & 0x3) * 2;
 8017222:	887b      	ldrh	r3, [r7, #2]
 8017224:	b2db      	uxtb	r3, r3
 8017226:	f003 0303 	and.w	r3, r3, #3
 801722a:	b2db      	uxtb	r3, r3
 801722c:	005b      	lsls	r3, r3, #1
 801722e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        x           = x >> 2;
 8017232:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017236:	109b      	asrs	r3, r3, #2
 8017238:	807b      	strh	r3, [r7, #2]

        /* Get the current pixel.
         * dsc->header.w + 4 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 4 ,8, 12 ...*/
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8017242:	b29b      	uxth	r3, r3
 8017244:	3303      	adds	r3, #3
 8017246:	109b      	asrs	r3, r3, #2
 8017248:	f9b7 2000 	ldrsh.w	r2, [r7]
 801724c:	fb02 f203 	mul.w	r2, r2, r3
 8017250:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017254:	4413      	add	r3, r2
 8017256:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 8017258:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801725a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801725c:	4413      	add	r3, r2
 801725e:	781b      	ldrb	r3, [r3, #0]
 8017260:	4619      	mov	r1, r3
 8017262:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8017266:	f1c3 0306 	rsb	r3, r3, #6
 801726a:	2203      	movs	r2, #3
 801726c:	fa02 f303 	lsl.w	r3, r2, r3
 8017270:	ea01 0203 	and.w	r2, r1, r3
 8017274:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8017278:	f1c3 0306 	rsb	r3, r3, #6
 801727c:	fa42 f303 	asr.w	r3, r2, r3
 8017280:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        return opa_table[px_opa];
 8017284:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017288:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801728c:	4413      	add	r3, r2
 801728e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8017292:	e060      	b.n	8017356 <lv_img_buf_get_px_alpha+0x212>
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	781b      	ldrb	r3, [r3, #0]
 8017298:	f003 031f 	and.w	r3, r3, #31
 801729c:	b2db      	uxtb	r3, r3
 801729e:	2b0d      	cmp	r3, #13
 80172a0:	d13e      	bne.n	8017320 <lv_img_buf_get_px_alpha+0x1dc>
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
 80172a2:	4b30      	ldr	r3, [pc, #192]	; (8017364 <lv_img_buf_get_px_alpha+0x220>)
 80172a4:	f107 040c 	add.w	r4, r7, #12
 80172a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80172aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                       68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                      };

        uint8_t bit = (x & 0x1) * 4;
 80172ae:	887b      	ldrh	r3, [r7, #2]
 80172b0:	b2db      	uxtb	r3, r3
 80172b2:	f003 0301 	and.w	r3, r3, #1
 80172b6:	b2db      	uxtb	r3, r3
 80172b8:	009b      	lsls	r3, r3, #2
 80172ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        x           = x >> 1;
 80172be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80172c2:	105b      	asrs	r3, r3, #1
 80172c4:	807b      	strh	r3, [r7, #2]

        /* Get the current pixel.
         * dsc->header.w + 1 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 2 ,4, 6 ...*/
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80172ce:	b29b      	uxth	r3, r3
 80172d0:	3301      	adds	r3, #1
 80172d2:	105b      	asrs	r3, r3, #1
 80172d4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80172d8:	fb02 f203 	mul.w	r2, r2, r3
 80172dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80172e0:	4413      	add	r3, r2
 80172e2:	63bb      	str	r3, [r7, #56]	; 0x38
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 80172e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80172e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172e8:	4413      	add	r3, r2
 80172ea:	781b      	ldrb	r3, [r3, #0]
 80172ec:	4619      	mov	r1, r3
 80172ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80172f2:	f1c3 0304 	rsb	r3, r3, #4
 80172f6:	220f      	movs	r2, #15
 80172f8:	fa02 f303 	lsl.w	r3, r2, r3
 80172fc:	ea01 0203 	and.w	r2, r1, r3
 8017300:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017304:	f1c3 0304 	rsb	r3, r3, #4
 8017308:	fa42 f303 	asr.w	r3, r2, r3
 801730c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        return opa_table[px_opa];
 8017310:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017314:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017318:	4413      	add	r3, r2
 801731a:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 801731e:	e01a      	b.n	8017356 <lv_img_buf_get_px_alpha+0x212>
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	781b      	ldrb	r3, [r3, #0]
 8017324:	f003 031f 	and.w	r3, r3, #31
 8017328:	b2db      	uxtb	r3, r3
 801732a:	2b0e      	cmp	r3, #14
 801732c:	d112      	bne.n	8017354 <lv_img_buf_get_px_alpha+0x210>
        uint32_t px = dsc->header.w * y + x;
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	681b      	ldr	r3, [r3, #0]
 8017332:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8017336:	b29b      	uxth	r3, r3
 8017338:	461a      	mov	r2, r3
 801733a:	f9b7 3000 	ldrsh.w	r3, [r7]
 801733e:	fb03 f202 	mul.w	r2, r3, r2
 8017342:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017346:	4413      	add	r3, r2
 8017348:	643b      	str	r3, [r7, #64]	; 0x40
        return buf_u8[px];
 801734a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801734c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801734e:	4413      	add	r3, r2
 8017350:	781b      	ldrb	r3, [r3, #0]
 8017352:	e000      	b.n	8017356 <lv_img_buf_get_px_alpha+0x212>
    }

    return LV_OPA_COVER;
 8017354:	23ff      	movs	r3, #255	; 0xff
}
 8017356:	4618      	mov	r0, r3
 8017358:	3748      	adds	r7, #72	; 0x48
 801735a:	46bd      	mov	sp, r7
 801735c:	bc90      	pop	{r4, r7}
 801735e:	4770      	bx	lr
 8017360:	0802d7ec 	.word	0x0802d7ec
 8017364:	0802d7f0 	.word	0x0802d7f0

08017368 <_lv_img_buf_transform_init>:
/**
 * Initialize a descriptor to transform an image
 * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 */
void _lv_img_buf_transform_init(lv_img_transform_dsc_t * dsc)
{
 8017368:	b580      	push	{r7, lr}
 801736a:	b08a      	sub	sp, #40	; 0x28
 801736c:	af00      	add	r7, sp, #0
 801736e:	6078      	str	r0, [r7, #4]
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8017376:	021a      	lsls	r2, r3, #8
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	62da      	str	r2, [r3, #44]	; 0x2c
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8017382:	021a      	lsls	r2, r3, #8
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	631a      	str	r2, [r3, #48]	; 0x30

    int32_t angle_low = dsc->cfg.angle / 10;
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801738e:	4a76      	ldr	r2, [pc, #472]	; (8017568 <_lv_img_buf_transform_init+0x200>)
 8017390:	fb82 1203 	smull	r1, r2, r2, r3
 8017394:	1092      	asrs	r2, r2, #2
 8017396:	17db      	asrs	r3, r3, #31
 8017398:	1ad3      	subs	r3, r2, r3
 801739a:	b21b      	sxth	r3, r3
 801739c:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t angle_high = angle_low + 1;
 801739e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173a0:	3301      	adds	r3, #1
 80173a2:	623b      	str	r3, [r7, #32]
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80173aa:	4619      	mov	r1, r3
 80173ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173ae:	f06f 0209 	mvn.w	r2, #9
 80173b2:	fb02 f303 	mul.w	r3, r2, r3
 80173b6:	440b      	add	r3, r1
 80173b8:	61fb      	str	r3, [r7, #28]

    int32_t s1 = _lv_trigo_sin(-angle_low);
 80173ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173bc:	b29b      	uxth	r3, r3
 80173be:	425b      	negs	r3, r3
 80173c0:	b29b      	uxth	r3, r3
 80173c2:	b21b      	sxth	r3, r3
 80173c4:	4618      	mov	r0, r3
 80173c6:	f005 f883 	bl	801c4d0 <_lv_trigo_sin>
 80173ca:	4603      	mov	r3, r0
 80173cc:	61bb      	str	r3, [r7, #24]
    int32_t s2 = _lv_trigo_sin(-angle_high);
 80173ce:	6a3b      	ldr	r3, [r7, #32]
 80173d0:	b29b      	uxth	r3, r3
 80173d2:	425b      	negs	r3, r3
 80173d4:	b29b      	uxth	r3, r3
 80173d6:	b21b      	sxth	r3, r3
 80173d8:	4618      	mov	r0, r3
 80173da:	f005 f879 	bl	801c4d0 <_lv_trigo_sin>
 80173de:	4603      	mov	r3, r0
 80173e0:	617b      	str	r3, [r7, #20]

    int32_t c1 = _lv_trigo_sin(-angle_low + 90);
 80173e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173e4:	b29b      	uxth	r3, r3
 80173e6:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80173ea:	b29b      	uxth	r3, r3
 80173ec:	b21b      	sxth	r3, r3
 80173ee:	4618      	mov	r0, r3
 80173f0:	f005 f86e 	bl	801c4d0 <_lv_trigo_sin>
 80173f4:	4603      	mov	r3, r0
 80173f6:	613b      	str	r3, [r7, #16]
    int32_t c2 = _lv_trigo_sin(-angle_high + 90);
 80173f8:	6a3b      	ldr	r3, [r7, #32]
 80173fa:	b29b      	uxth	r3, r3
 80173fc:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8017400:	b29b      	uxth	r3, r3
 8017402:	b21b      	sxth	r3, r3
 8017404:	4618      	mov	r0, r3
 8017406:	f005 f863 	bl	801c4d0 <_lv_trigo_sin>
 801740a:	4603      	mov	r3, r0
 801740c:	60fb      	str	r3, [r7, #12]

    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 801740e:	69fb      	ldr	r3, [r7, #28]
 8017410:	f1c3 030a 	rsb	r3, r3, #10
 8017414:	69ba      	ldr	r2, [r7, #24]
 8017416:	fb02 f203 	mul.w	r2, r2, r3
 801741a:	697b      	ldr	r3, [r7, #20]
 801741c:	69f9      	ldr	r1, [r7, #28]
 801741e:	fb01 f303 	mul.w	r3, r1, r3
 8017422:	4413      	add	r3, r2
 8017424:	4a50      	ldr	r2, [pc, #320]	; (8017568 <_lv_img_buf_transform_init+0x200>)
 8017426:	fb82 1203 	smull	r1, r2, r2, r3
 801742a:	1092      	asrs	r2, r2, #2
 801742c:	17db      	asrs	r3, r3, #31
 801742e:	1ad2      	subs	r2, r2, r3
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	635a      	str	r2, [r3, #52]	; 0x34
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8017434:	69fb      	ldr	r3, [r7, #28]
 8017436:	f1c3 030a 	rsb	r3, r3, #10
 801743a:	693a      	ldr	r2, [r7, #16]
 801743c:	fb02 f203 	mul.w	r2, r2, r3
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	69f9      	ldr	r1, [r7, #28]
 8017444:	fb01 f303 	mul.w	r3, r1, r3
 8017448:	4413      	add	r3, r2
 801744a:	4a47      	ldr	r2, [pc, #284]	; (8017568 <_lv_img_buf_transform_init+0x200>)
 801744c:	fb82 1203 	smull	r1, r2, r2, r3
 8017450:	1092      	asrs	r2, r2, #2
 8017452:	17db      	asrs	r3, r3, #31
 8017454:	1ad2      	subs	r2, r2, r3
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	639a      	str	r2, [r3, #56]	; 0x38

    /*Use smaller value to avoid overflow*/
    dsc->tmp.sinma = dsc->tmp.sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801745e:	115a      	asrs	r2, r3, #5
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	635a      	str	r2, [r3, #52]	; 0x34
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017468:	115a      	asrs	r2, r3, #5
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	639a      	str	r2, [r3, #56]	; 0x38

    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	7d1b      	ldrb	r3, [r3, #20]
 8017472:	4618      	mov	r0, r3
 8017474:	f7f6 ff40 	bl	800e2f8 <lv_img_cf_is_chroma_keyed>
 8017478:	4603      	mov	r3, r0
 801747a:	4619      	mov	r1, r3
 801747c:	687a      	ldr	r2, [r7, #4]
 801747e:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 8017482:	f361 0300 	bfi	r3, r1, #0, #1
 8017486:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	7d1b      	ldrb	r3, [r3, #20]
 801748e:	4618      	mov	r0, r3
 8017490:	f7f6 ff4e 	bl	800e330 <lv_img_cf_has_alpha>
 8017494:	4603      	mov	r3, r0
 8017496:	4619      	mov	r1, r3
 8017498:	687a      	ldr	r2, [r7, #4]
 801749a:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 801749e:	f361 0341 	bfi	r3, r1, #1, #1
 80174a2:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	7d1b      	ldrb	r3, [r3, #20]
 80174aa:	2b04      	cmp	r3, #4
 80174ac:	d007      	beq.n	80174be <_lv_img_buf_transform_init+0x156>
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	7d1b      	ldrb	r3, [r3, #20]
 80174b2:	2b05      	cmp	r3, #5
 80174b4:	d003      	beq.n	80174be <_lv_img_buf_transform_init+0x156>
       dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	7d1b      	ldrb	r3, [r3, #20]
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 80174ba:	2b06      	cmp	r3, #6
 80174bc:	d107      	bne.n	80174ce <_lv_img_buf_transform_init+0x166>
        dsc->tmp.native_color = 1;
 80174be:	687a      	ldr	r2, [r7, #4]
 80174c0:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 80174c4:	f043 0304 	orr.w	r3, r3, #4
 80174c8:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
 80174cc:	e006      	b.n	80174dc <_lv_img_buf_transform_init+0x174>
    }
    else {
        dsc->tmp.native_color = 0;
 80174ce:	687a      	ldr	r2, [r7, #4]
 80174d0:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 80174d4:	f36f 0382 	bfc	r3, #2, #1
 80174d8:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    }

    dsc->tmp.img_dsc.data = dsc->cfg.src;
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	681a      	ldr	r2, [r3, #0]
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	629a      	str	r2, [r3, #40]	; 0x28
    dsc->tmp.img_dsc.header.always_zero = 0;
 80174e4:	687a      	ldr	r2, [r7, #4]
 80174e6:	f892 3020 	ldrb.w	r3, [r2, #32]
 80174ea:	f36f 1347 	bfc	r3, #5, #3
 80174ee:	f882 3020 	strb.w	r3, [r2, #32]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	7d1b      	ldrb	r3, [r3, #20]
 80174f6:	f003 031f 	and.w	r3, r3, #31
 80174fa:	b2d9      	uxtb	r1, r3
 80174fc:	687a      	ldr	r2, [r7, #4]
 80174fe:	f892 3020 	ldrb.w	r3, [r2, #32]
 8017502:	f361 0304 	bfi	r3, r1, #0, #5
 8017506:	f882 3020 	strb.w	r3, [r2, #32]
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017510:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017514:	b299      	uxth	r1, r3
 8017516:	687a      	ldr	r2, [r7, #4]
 8017518:	6a13      	ldr	r3, [r2, #32]
 801751a:	f361 2394 	bfi	r3, r1, #10, #11
 801751e:	6213      	str	r3, [r2, #32]
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801752a:	b299      	uxth	r1, r3
 801752c:	687a      	ldr	r2, [r7, #4]
 801752e:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 8017530:	f361 134f 	bfi	r3, r1, #5, #11
 8017534:	8453      	strh	r3, [r2, #34]	; 0x22

    /* The inverse of the zoom will be sued during the transformation
     *  + dsc->cfg.zoom / 2 for rounding*/
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	89db      	ldrh	r3, [r3, #14]
 801753a:	085b      	lsrs	r3, r3, #1
 801753c:	b29b      	uxth	r3, r3
 801753e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8017542:	687a      	ldr	r2, [r7, #4]
 8017544:	89d2      	ldrh	r2, [r2, #14]
 8017546:	fb93 f3f2 	sdiv	r3, r3, r2
 801754a:	461a      	mov	r2, r3
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	641a      	str	r2, [r3, #64]	; 0x40

    dsc->res.opa = LV_OPA_COVER;
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	22ff      	movs	r2, #255	; 0xff
 8017554:	771a      	strb	r2, [r3, #28]
    dsc->res.color = dsc->cfg.color;
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	687a      	ldr	r2, [r7, #4]
 801755a:	6912      	ldr	r2, [r2, #16]
 801755c:	619a      	str	r2, [r3, #24]
}
 801755e:	bf00      	nop
 8017560:	3728      	adds	r7, #40	; 0x28
 8017562:	46bd      	mov	sp, r7
 8017564:	bd80      	pop	{r7, pc}
 8017566:	bf00      	nop
 8017568:	66666667 	.word	0x66666667

0801756c <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
 801756c:	b580      	push	{r7, lr}
 801756e:	b092      	sub	sp, #72	; 0x48
 8017570:	af00      	add	r7, sp, #0
 8017572:	60f8      	str	r0, [r7, #12]
 8017574:	4608      	mov	r0, r1
 8017576:	4611      	mov	r1, r2
 8017578:	461a      	mov	r2, r3
 801757a:	4603      	mov	r3, r0
 801757c:	817b      	strh	r3, [r7, #10]
 801757e:	460b      	mov	r3, r1
 8017580:	813b      	strh	r3, [r7, #8]
 8017582:	4613      	mov	r3, r2
 8017584:	80fb      	strh	r3, [r7, #6]
#if LV_USE_IMG_TRANSFORM
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 8017586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801758a:	2b00      	cmp	r3, #0
 801758c:	d117      	bne.n	80175be <_lv_img_buf_get_transformed_area+0x52>
 801758e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8017592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017596:	d112      	bne.n	80175be <_lv_img_buf_get_transformed_area+0x52>
        res->x1 = 0;
 8017598:	68fb      	ldr	r3, [r7, #12]
 801759a:	2200      	movs	r2, #0
 801759c:	801a      	strh	r2, [r3, #0]
        res->y1 = 0;
 801759e:	68fb      	ldr	r3, [r7, #12]
 80175a0:	2200      	movs	r2, #0
 80175a2:	805a      	strh	r2, [r3, #2]
        res->x2 = w - 1;
 80175a4:	897b      	ldrh	r3, [r7, #10]
 80175a6:	3b01      	subs	r3, #1
 80175a8:	b29b      	uxth	r3, r3
 80175aa:	b21a      	sxth	r2, r3
 80175ac:	68fb      	ldr	r3, [r7, #12]
 80175ae:	809a      	strh	r2, [r3, #4]
        res->y2 = h - 1;
 80175b0:	893b      	ldrh	r3, [r7, #8]
 80175b2:	3b01      	subs	r3, #1
 80175b4:	b29b      	uxth	r3, r3
 80175b6:	b21a      	sxth	r2, r3
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	80da      	strh	r2, [r3, #6]
        return;
 80175bc:	e1f6      	b.n	80179ac <_lv_img_buf_get_transformed_area+0x440>
    }

    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 80175be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80175c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80175c4:	425b      	negs	r3, r3
 80175c6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80175ca:	fb02 f303 	mul.w	r3, r2, r3
 80175ce:	121b      	asrs	r3, r3, #8
 80175d0:	b29b      	uxth	r3, r3
 80175d2:	3b01      	subs	r3, #1
 80175d4:	b29b      	uxth	r3, r3
 80175d6:	b21a      	sxth	r2, r3
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	801a      	strh	r2, [r3, #0]
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 80175dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80175de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80175e2:	425b      	negs	r3, r3
 80175e4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80175e8:	fb02 f303 	mul.w	r3, r2, r3
 80175ec:	121b      	asrs	r3, r3, #8
 80175ee:	b29b      	uxth	r3, r3
 80175f0:	3b01      	subs	r3, #1
 80175f2:	b29b      	uxth	r3, r3
 80175f4:	b21a      	sxth	r2, r3
 80175f6:	68fb      	ldr	r3, [r7, #12]
 80175f8:	805a      	strh	r2, [r3, #2]
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 80175fa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80175fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017600:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017604:	1a9b      	subs	r3, r3, r2
 8017606:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 801760a:	fb02 f303 	mul.w	r3, r2, r3
 801760e:	121b      	asrs	r3, r3, #8
 8017610:	b29b      	uxth	r3, r3
 8017612:	3302      	adds	r3, #2
 8017614:	b29b      	uxth	r3, r3
 8017616:	b21a      	sxth	r2, r3
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	809a      	strh	r2, [r3, #4]
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 801761c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8017620:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017622:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8017626:	1a9b      	subs	r3, r3, r2
 8017628:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 801762c:	fb02 f303 	mul.w	r3, r2, r3
 8017630:	121b      	asrs	r3, r3, #8
 8017632:	b29b      	uxth	r3, r3
 8017634:	3302      	adds	r3, #2
 8017636:	b29b      	uxth	r3, r3
 8017638:	b21a      	sxth	r2, r3
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	80da      	strh	r2, [r3, #6]

    if(angle == 0) {
 801763e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017642:	2b00      	cmp	r3, #0
 8017644:	d134      	bne.n	80176b0 <_lv_img_buf_get_transformed_area+0x144>
        res->x1 += pivot->x;
 8017646:	68fb      	ldr	r3, [r7, #12]
 8017648:	f9b3 3000 	ldrsh.w	r3, [r3]
 801764c:	b29a      	uxth	r2, r3
 801764e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017654:	b29b      	uxth	r3, r3
 8017656:	4413      	add	r3, r2
 8017658:	b29b      	uxth	r3, r3
 801765a:	b21a      	sxth	r2, r3
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	801a      	strh	r2, [r3, #0]
        res->y1 += pivot->y;
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017666:	b29a      	uxth	r2, r3
 8017668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801766a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801766e:	b29b      	uxth	r3, r3
 8017670:	4413      	add	r3, r2
 8017672:	b29b      	uxth	r3, r3
 8017674:	b21a      	sxth	r2, r3
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	805a      	strh	r2, [r3, #2]
        res->x2 += pivot->x;
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017680:	b29a      	uxth	r2, r3
 8017682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017688:	b29b      	uxth	r3, r3
 801768a:	4413      	add	r3, r2
 801768c:	b29b      	uxth	r3, r3
 801768e:	b21a      	sxth	r2, r3
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	809a      	strh	r2, [r3, #4]
        res->y2 += pivot->y;
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801769a:	b29a      	uxth	r2, r3
 801769c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801769e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80176a2:	b29b      	uxth	r3, r3
 80176a4:	4413      	add	r3, r2
 80176a6:	b29b      	uxth	r3, r3
 80176a8:	b21a      	sxth	r2, r3
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	80da      	strh	r2, [r3, #6]
        return;
 80176ae:	e17d      	b.n	80179ac <_lv_img_buf_get_transformed_area+0x440>
    }

    int32_t angle_low = angle / 10;
 80176b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80176b4:	4ab6      	ldr	r2, [pc, #728]	; (8017990 <_lv_img_buf_get_transformed_area+0x424>)
 80176b6:	fb82 1203 	smull	r1, r2, r2, r3
 80176ba:	1092      	asrs	r2, r2, #2
 80176bc:	17db      	asrs	r3, r3, #31
 80176be:	1ad3      	subs	r3, r2, r3
 80176c0:	b21b      	sxth	r3, r3
 80176c2:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t angle_high = angle_low + 1;
 80176c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80176c6:	3301      	adds	r3, #1
 80176c8:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t angle_rem = angle  - (angle_low * 10);
 80176ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80176ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80176d0:	f06f 0109 	mvn.w	r1, #9
 80176d4:	fb01 f303 	mul.w	r3, r1, r3
 80176d8:	4413      	add	r3, r2
 80176da:	63fb      	str	r3, [r7, #60]	; 0x3c

    int32_t s1 = _lv_trigo_sin(angle_low);
 80176dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80176de:	b21b      	sxth	r3, r3
 80176e0:	4618      	mov	r0, r3
 80176e2:	f004 fef5 	bl	801c4d0 <_lv_trigo_sin>
 80176e6:	4603      	mov	r3, r0
 80176e8:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t s2 = _lv_trigo_sin(angle_high);
 80176ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80176ec:	b21b      	sxth	r3, r3
 80176ee:	4618      	mov	r0, r3
 80176f0:	f004 feee 	bl	801c4d0 <_lv_trigo_sin>
 80176f4:	4603      	mov	r3, r0
 80176f6:	637b      	str	r3, [r7, #52]	; 0x34

    int32_t c1 = _lv_trigo_sin(angle_low + 90);
 80176f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80176fa:	b29b      	uxth	r3, r3
 80176fc:	335a      	adds	r3, #90	; 0x5a
 80176fe:	b29b      	uxth	r3, r3
 8017700:	b21b      	sxth	r3, r3
 8017702:	4618      	mov	r0, r3
 8017704:	f004 fee4 	bl	801c4d0 <_lv_trigo_sin>
 8017708:	4603      	mov	r3, r0
 801770a:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t c2 = _lv_trigo_sin(angle_high + 90);
 801770c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801770e:	b29b      	uxth	r3, r3
 8017710:	335a      	adds	r3, #90	; 0x5a
 8017712:	b29b      	uxth	r3, r3
 8017714:	b21b      	sxth	r3, r3
 8017716:	4618      	mov	r0, r3
 8017718:	f004 feda 	bl	801c4d0 <_lv_trigo_sin>
 801771c:	4603      	mov	r3, r0
 801771e:	62fb      	str	r3, [r7, #44]	; 0x2c

    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8017720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017722:	f1c3 030a 	rsb	r3, r3, #10
 8017726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017728:	fb02 f203 	mul.w	r2, r2, r3
 801772c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801772e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017730:	fb01 f303 	mul.w	r3, r1, r3
 8017734:	4413      	add	r3, r2
 8017736:	4a96      	ldr	r2, [pc, #600]	; (8017990 <_lv_img_buf_get_transformed_area+0x424>)
 8017738:	fb82 1203 	smull	r1, r2, r2, r3
 801773c:	1092      	asrs	r2, r2, #2
 801773e:	17db      	asrs	r3, r3, #31
 8017740:	1ad3      	subs	r3, r2, r3
 8017742:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8017744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017746:	f1c3 030a 	rsb	r3, r3, #10
 801774a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801774c:	fb02 f203 	mul.w	r2, r2, r3
 8017750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017752:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017754:	fb01 f303 	mul.w	r3, r1, r3
 8017758:	4413      	add	r3, r2
 801775a:	4a8d      	ldr	r2, [pc, #564]	; (8017990 <_lv_img_buf_get_transformed_area+0x424>)
 801775c:	fb82 1203 	smull	r1, r2, r2, r3
 8017760:	1092      	asrs	r2, r2, #2
 8017762:	17db      	asrs	r3, r3, #31
 8017764:	1ad3      	subs	r3, r2, r3
 8017766:	627b      	str	r3, [r7, #36]	; 0x24

    /*Use smaller value to avoid overflow*/
    sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8017768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801776a:	115b      	asrs	r3, r3, #5
 801776c:	62bb      	str	r3, [r7, #40]	; 0x28
    cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 801776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017770:	115b      	asrs	r3, r3, #5
 8017772:	627b      	str	r3, [r7, #36]	; 0x24
    lv_point_t rb;

    lv_coord_t xt;
    lv_coord_t yt;

    xt = res->x1;
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	881b      	ldrh	r3, [r3, #0]
 8017778:	847b      	strh	r3, [r7, #34]	; 0x22
    yt = res->y1;
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	885b      	ldrh	r3, [r3, #2]
 801777e:	843b      	strh	r3, [r7, #32]
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8017780:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017786:	fb02 f203 	mul.w	r2, r2, r3
 801778a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801778e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017790:	fb01 f303 	mul.w	r3, r1, r3
 8017794:	1ad3      	subs	r3, r2, r3
 8017796:	129b      	asrs	r3, r3, #10
 8017798:	b29a      	uxth	r2, r3
 801779a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801779c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80177a0:	b29b      	uxth	r3, r3
 80177a2:	4413      	add	r3, r2
 80177a4:	b29b      	uxth	r3, r3
 80177a6:	b21b      	sxth	r3, r3
 80177a8:	83bb      	strh	r3, [r7, #28]
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 80177aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80177ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80177b0:	fb02 f203 	mul.w	r2, r2, r3
 80177b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80177b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80177ba:	fb01 f303 	mul.w	r3, r1, r3
 80177be:	4413      	add	r3, r2
 80177c0:	129b      	asrs	r3, r3, #10
 80177c2:	b29a      	uxth	r2, r3
 80177c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80177ca:	b29b      	uxth	r3, r3
 80177cc:	4413      	add	r3, r2
 80177ce:	b29b      	uxth	r3, r3
 80177d0:	b21b      	sxth	r3, r3
 80177d2:	83fb      	strh	r3, [r7, #30]

    xt = res->x2;
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	889b      	ldrh	r3, [r3, #4]
 80177d8:	847b      	strh	r3, [r7, #34]	; 0x22
    yt = res->y1;
 80177da:	68fb      	ldr	r3, [r7, #12]
 80177dc:	885b      	ldrh	r3, [r3, #2]
 80177de:	843b      	strh	r3, [r7, #32]
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80177e0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80177e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80177e6:	fb02 f203 	mul.w	r2, r2, r3
 80177ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80177ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80177f0:	fb01 f303 	mul.w	r3, r1, r3
 80177f4:	1ad3      	subs	r3, r2, r3
 80177f6:	129b      	asrs	r3, r3, #10
 80177f8:	b29a      	uxth	r2, r3
 80177fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017800:	b29b      	uxth	r3, r3
 8017802:	4413      	add	r3, r2
 8017804:	b29b      	uxth	r3, r3
 8017806:	b21b      	sxth	r3, r3
 8017808:	833b      	strh	r3, [r7, #24]
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 801780a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801780e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017810:	fb02 f203 	mul.w	r2, r2, r3
 8017814:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017818:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801781a:	fb01 f303 	mul.w	r3, r1, r3
 801781e:	4413      	add	r3, r2
 8017820:	129b      	asrs	r3, r3, #10
 8017822:	b29a      	uxth	r2, r3
 8017824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017826:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801782a:	b29b      	uxth	r3, r3
 801782c:	4413      	add	r3, r2
 801782e:	b29b      	uxth	r3, r3
 8017830:	b21b      	sxth	r3, r3
 8017832:	837b      	strh	r3, [r7, #26]

    xt = res->x1;
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	881b      	ldrh	r3, [r3, #0]
 8017838:	847b      	strh	r3, [r7, #34]	; 0x22
    yt = res->y2;
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	88db      	ldrh	r3, [r3, #6]
 801783e:	843b      	strh	r3, [r7, #32]
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8017840:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017846:	fb02 f203 	mul.w	r2, r2, r3
 801784a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801784e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017850:	fb01 f303 	mul.w	r3, r1, r3
 8017854:	1ad3      	subs	r3, r2, r3
 8017856:	129b      	asrs	r3, r3, #10
 8017858:	b29a      	uxth	r2, r3
 801785a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801785c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017860:	b29b      	uxth	r3, r3
 8017862:	4413      	add	r3, r2
 8017864:	b29b      	uxth	r3, r3
 8017866:	b21b      	sxth	r3, r3
 8017868:	82bb      	strh	r3, [r7, #20]
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 801786a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801786e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017870:	fb02 f203 	mul.w	r2, r2, r3
 8017874:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801787a:	fb01 f303 	mul.w	r3, r1, r3
 801787e:	4413      	add	r3, r2
 8017880:	129b      	asrs	r3, r3, #10
 8017882:	b29a      	uxth	r2, r3
 8017884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017886:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801788a:	b29b      	uxth	r3, r3
 801788c:	4413      	add	r3, r2
 801788e:	b29b      	uxth	r3, r3
 8017890:	b21b      	sxth	r3, r3
 8017892:	82fb      	strh	r3, [r7, #22]

    xt = res->x2;
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	889b      	ldrh	r3, [r3, #4]
 8017898:	847b      	strh	r3, [r7, #34]	; 0x22
    yt = res->y2;
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	88db      	ldrh	r3, [r3, #6]
 801789e:	843b      	strh	r3, [r7, #32]
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80178a0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80178a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178a6:	fb02 f203 	mul.w	r2, r2, r3
 80178aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80178ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80178b0:	fb01 f303 	mul.w	r3, r1, r3
 80178b4:	1ad3      	subs	r3, r2, r3
 80178b6:	129b      	asrs	r3, r3, #10
 80178b8:	b29a      	uxth	r2, r3
 80178ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80178bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80178c0:	b29b      	uxth	r3, r3
 80178c2:	4413      	add	r3, r2
 80178c4:	b29b      	uxth	r3, r3
 80178c6:	b21b      	sxth	r3, r3
 80178c8:	823b      	strh	r3, [r7, #16]
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 80178ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80178ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80178d0:	fb02 f203 	mul.w	r2, r2, r3
 80178d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80178d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80178da:	fb01 f303 	mul.w	r3, r1, r3
 80178de:	4413      	add	r3, r2
 80178e0:	129b      	asrs	r3, r3, #10
 80178e2:	b29a      	uxth	r2, r3
 80178e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80178e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80178ea:	b29b      	uxth	r3, r3
 80178ec:	4413      	add	r3, r2
 80178ee:	b29b      	uxth	r3, r3
 80178f0:	b21b      	sxth	r3, r3
 80178f2:	827b      	strh	r3, [r7, #18]

    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
 80178f4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80178f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80178fc:	4293      	cmp	r3, r2
 80178fe:	bfa8      	it	ge
 8017900:	4613      	movge	r3, r2
 8017902:	b21a      	sxth	r2, r3
 8017904:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8017908:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801790c:	428b      	cmp	r3, r1
 801790e:	bfa8      	it	ge
 8017910:	460b      	movge	r3, r1
 8017912:	b21b      	sxth	r3, r3
 8017914:	4293      	cmp	r3, r2
 8017916:	bfa8      	it	ge
 8017918:	4613      	movge	r3, r2
 801791a:	b21a      	sxth	r2, r3
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	801a      	strh	r2, [r3, #0]
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
 8017920:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8017924:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8017928:	4293      	cmp	r3, r2
 801792a:	bfb8      	it	lt
 801792c:	4613      	movlt	r3, r2
 801792e:	b21a      	sxth	r2, r3
 8017930:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8017934:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8017938:	428b      	cmp	r3, r1
 801793a:	bfb8      	it	lt
 801793c:	460b      	movlt	r3, r1
 801793e:	b21b      	sxth	r3, r3
 8017940:	4293      	cmp	r3, r2
 8017942:	bfb8      	it	lt
 8017944:	4613      	movlt	r3, r2
 8017946:	b21a      	sxth	r2, r3
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	809a      	strh	r2, [r3, #4]
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
 801794c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8017950:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017954:	4293      	cmp	r3, r2
 8017956:	bfa8      	it	ge
 8017958:	4613      	movge	r3, r2
 801795a:	b21a      	sxth	r2, r3
 801795c:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8017960:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017964:	428b      	cmp	r3, r1
 8017966:	bfa8      	it	ge
 8017968:	460b      	movge	r3, r1
 801796a:	b21b      	sxth	r3, r3
 801796c:	4293      	cmp	r3, r2
 801796e:	bfa8      	it	ge
 8017970:	4613      	movge	r3, r2
 8017972:	b21a      	sxth	r2, r3
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	805a      	strh	r2, [r3, #2]
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
 8017978:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 801797c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017980:	4293      	cmp	r3, r2
 8017982:	bfb8      	it	lt
 8017984:	4613      	movlt	r3, r2
 8017986:	b21a      	sxth	r2, r3
 8017988:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 801798c:	e002      	b.n	8017994 <_lv_img_buf_get_transformed_area+0x428>
 801798e:	bf00      	nop
 8017990:	66666667 	.word	0x66666667
 8017994:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017998:	428b      	cmp	r3, r1
 801799a:	bfb8      	it	lt
 801799c:	460b      	movlt	r3, r1
 801799e:	b21b      	sxth	r3, r3
 80179a0:	4293      	cmp	r3, r2
 80179a2:	bfb8      	it	lt
 80179a4:	4613      	movlt	r3, r2
 80179a6:	b21a      	sxth	r2, r3
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	80da      	strh	r2, [r3, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
 80179ac:	3748      	adds	r7, #72	; 0x48
 80179ae:	46bd      	mov	sp, r7
 80179b0:	bd80      	pop	{r7, pc}
 80179b2:	bf00      	nop

080179b4 <_lv_img_buf_transform_anti_alias>:
/**
 * Continue transformation by taking the neighbors into account
 * @param dsc pointer to the transformation descriptor
 */
bool _lv_img_buf_transform_anti_alias(lv_img_transform_dsc_t * dsc)
{
 80179b4:	b590      	push	{r4, r7, lr}
 80179b6:	b093      	sub	sp, #76	; 0x4c
 80179b8:	af00      	add	r7, sp, #0
 80179ba:	6078      	str	r0, [r7, #4]
    const uint8_t * src_u8 = dsc->cfg.src;
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	681b      	ldr	r3, [r3, #0]
 80179c0:	633b      	str	r3, [r7, #48]	; 0x30

    /*Get the fractional part of the source pixel*/
    int xs_fract = dsc->tmp.xs & 0xff;
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80179c8:	b29b      	uxth	r3, r3
 80179ca:	b2db      	uxtb	r3, r3
 80179cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    int ys_fract = dsc->tmp.ys & 0xff;
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80179d4:	b29b      	uxth	r3, r3
 80179d6:	b2db      	uxtb	r3, r3
 80179d8:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t xn;      /*x neighbor*/
    lv_opa_t xr; /*x mix ratio*/

    if(xs_fract < 0x70) {
 80179da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179dc:	2b6f      	cmp	r3, #111	; 0x6f
 80179de:	dc12      	bgt.n	8017a06 <_lv_img_buf_transform_anti_alias+0x52>
        xn = - 1;
 80179e0:	f04f 33ff 	mov.w	r3, #4294967295
 80179e4:	647b      	str	r3, [r7, #68]	; 0x44
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80179ec:	461a      	mov	r2, r3
 80179ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80179f0:	4413      	add	r3, r2
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	da01      	bge.n	80179fa <_lv_img_buf_transform_anti_alias+0x46>
 80179f6:	2300      	movs	r3, #0
 80179f8:	647b      	str	r3, [r7, #68]	; 0x44
        xr = xs_fract + 0x80;
 80179fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179fc:	b2db      	uxtb	r3, r3
 80179fe:	3b80      	subs	r3, #128	; 0x80
 8017a00:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017a04:	e01d      	b.n	8017a42 <_lv_img_buf_transform_anti_alias+0x8e>
    }
    else if(xs_fract > 0x90) {
 8017a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a08:	2b90      	cmp	r3, #144	; 0x90
 8017a0a:	dd15      	ble.n	8017a38 <_lv_img_buf_transform_anti_alias+0x84>
        xn =  1;
 8017a0c:	2301      	movs	r3, #1
 8017a0e:	647b      	str	r3, [r7, #68]	; 0x44
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8017a16:	461a      	mov	r2, r3
 8017a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017a1a:	4413      	add	r3, r2
 8017a1c:	687a      	ldr	r2, [r7, #4]
 8017a1e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8017a22:	4293      	cmp	r3, r2
 8017a24:	db01      	blt.n	8017a2a <_lv_img_buf_transform_anti_alias+0x76>
 8017a26:	2300      	movs	r3, #0
 8017a28:	647b      	str	r3, [r7, #68]	; 0x44
        xr = (0xFF - xs_fract) + 0x80;
 8017a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a2c:	b2db      	uxtb	r3, r3
 8017a2e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8017a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017a36:	e004      	b.n	8017a42 <_lv_img_buf_transform_anti_alias+0x8e>
    }
    else {
        xn = 0;
 8017a38:	2300      	movs	r3, #0
 8017a3a:	647b      	str	r3, [r7, #68]	; 0x44
        xr = 0xFF;
 8017a3c:	23ff      	movs	r3, #255	; 0xff
 8017a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    int32_t yn;      /*x neighbor*/
    lv_opa_t yr; /*x mix ratio*/

    if(ys_fract < 0x70) {
 8017a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a44:	2b6f      	cmp	r3, #111	; 0x6f
 8017a46:	dc12      	bgt.n	8017a6e <_lv_img_buf_transform_anti_alias+0xba>
        yn = - 1;
 8017a48:	f04f 33ff 	mov.w	r3, #4294967295
 8017a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8017a54:	461a      	mov	r2, r3
 8017a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017a58:	4413      	add	r3, r2
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	da01      	bge.n	8017a62 <_lv_img_buf_transform_anti_alias+0xae>
 8017a5e:	2300      	movs	r3, #0
 8017a60:	63fb      	str	r3, [r7, #60]	; 0x3c

        yr = ys_fract + 0x80;
 8017a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a64:	b2db      	uxtb	r3, r3
 8017a66:	3b80      	subs	r3, #128	; 0x80
 8017a68:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8017a6c:	e01d      	b.n	8017aaa <_lv_img_buf_transform_anti_alias+0xf6>
    }
    else if(ys_fract > 0x90) {
 8017a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a70:	2b90      	cmp	r3, #144	; 0x90
 8017a72:	dd15      	ble.n	8017aa0 <_lv_img_buf_transform_anti_alias+0xec>
        yn =  1;
 8017a74:	2301      	movs	r3, #1
 8017a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8017a7e:	461a      	mov	r2, r3
 8017a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017a82:	4413      	add	r3, r2
 8017a84:	687a      	ldr	r2, [r7, #4]
 8017a86:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8017a8a:	4293      	cmp	r3, r2
 8017a8c:	db01      	blt.n	8017a92 <_lv_img_buf_transform_anti_alias+0xde>
 8017a8e:	2300      	movs	r3, #0
 8017a90:	63fb      	str	r3, [r7, #60]	; 0x3c

        yr = (0xFF - ys_fract) + 0x80;
 8017a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a94:	b2db      	uxtb	r3, r3
 8017a96:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8017a9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8017a9e:	e004      	b.n	8017aaa <_lv_img_buf_transform_anti_alias+0xf6>
    }
    else {
        yn = 0;
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        yr = 0xFF;
 8017aa4:	23ff      	movs	r3, #255	; 0xff
 8017aa6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    }

    lv_color_t c00 = dsc->res.color;
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	699b      	ldr	r3, [r3, #24]
 8017aae:	623b      	str	r3, [r7, #32]
    lv_color_t c01;
    lv_color_t c10;
    lv_color_t c11;

    lv_opa_t a00 = dsc->res.opa;
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	7f1b      	ldrb	r3, [r3, #28]
 8017ab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    lv_opa_t a10 = 0;
 8017ab8:	2300      	movs	r3, #0
 8017aba:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    lv_opa_t a01 = 0;
 8017abe:	2300      	movs	r3, #0
 8017ac0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    lv_opa_t a11 = 0;
 8017ac4:	2300      	movs	r3, #0
 8017ac6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

    if(dsc->tmp.native_color) {
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017ad0:	f003 0304 	and.w	r3, r3, #4
 8017ad4:	b2db      	uxtb	r3, r3
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	f000 80a2 	beq.w	8017c20 <_lv_img_buf_transform_anti_alias+0x26c>
        _lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017ae0:	687a      	ldr	r2, [r7, #4]
 8017ae2:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8017ae6:	4611      	mov	r1, r2
 8017ae8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017aea:	fb02 f201 	mul.w	r2, r2, r1
 8017aee:	4413      	add	r3, r2
 8017af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017af2:	18d1      	adds	r1, r2, r3
 8017af4:	f107 031c 	add.w	r3, r7, #28
 8017af8:	2204      	movs	r2, #4
 8017afa:	4618      	mov	r0, r3
 8017afc:	f7ff f9be 	bl	8016e7c <_lv_memcpy_small>
        _lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b04:	687a      	ldr	r2, [r7, #4]
 8017b06:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8017b0a:	4611      	mov	r1, r2
 8017b0c:	687a      	ldr	r2, [r7, #4]
 8017b0e:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8017b12:	fb02 f201 	mul.w	r2, r2, r1
 8017b16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017b18:	fb01 f202 	mul.w	r2, r1, r2
 8017b1c:	4413      	add	r3, r2
 8017b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017b20:	18d1      	adds	r1, r2, r3
 8017b22:	f107 0318 	add.w	r3, r7, #24
 8017b26:	2204      	movs	r2, #4
 8017b28:	4618      	mov	r0, r3
 8017b2a:	f7ff f9a7 	bl	8016e7c <_lv_memcpy_small>
        _lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017b38:	4619      	mov	r1, r3
 8017b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017b3c:	fb03 f301 	mul.w	r3, r3, r1
 8017b40:	4618      	mov	r0, r3
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017b48:	4619      	mov	r1, r3
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017b50:	fb03 f301 	mul.w	r3, r3, r1
 8017b54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017b56:	fb01 f303 	mul.w	r3, r1, r3
 8017b5a:	4403      	add	r3, r0
 8017b5c:	4413      	add	r3, r2
 8017b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017b60:	18d1      	adds	r1, r2, r3
 8017b62:	f107 0314 	add.w	r3, r7, #20
 8017b66:	2204      	movs	r2, #4
 8017b68:	4618      	mov	r0, r3
 8017b6a:	f7ff f987 	bl	8016e7c <_lv_memcpy_small>
                         sizeof(lv_color_t));
        if(dsc->tmp.has_alpha) {
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017b74:	f003 0302 	and.w	r3, r3, #2
 8017b78:	b2db      	uxtb	r3, r3
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	f000 80e2 	beq.w	8017d44 <_lv_img_buf_transform_anti_alias+0x390>
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b84:	687a      	ldr	r2, [r7, #4]
 8017b86:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8017b8a:	4611      	mov	r1, r2
 8017b8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017b8e:	fb02 f201 	mul.w	r2, r2, r1
 8017b92:	4413      	add	r3, r2
 8017b94:	687a      	ldr	r2, [r7, #4]
 8017b96:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8017b9a:	4413      	add	r3, r2
 8017b9c:	3b01      	subs	r3, #1
 8017b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ba0:	4413      	add	r3, r2
 8017ba2:	781b      	ldrb	r3, [r3, #0]
 8017ba4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017bac:	687a      	ldr	r2, [r7, #4]
 8017bae:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8017bb2:	4611      	mov	r1, r2
 8017bb4:	687a      	ldr	r2, [r7, #4]
 8017bb6:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8017bba:	fb02 f201 	mul.w	r2, r2, r1
 8017bbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017bc0:	fb01 f202 	mul.w	r2, r1, r2
 8017bc4:	4413      	add	r3, r2
 8017bc6:	687a      	ldr	r2, [r7, #4]
 8017bc8:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8017bcc:	4413      	add	r3, r2
 8017bce:	3b01      	subs	r3, #1
 8017bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017bd2:	4413      	add	r3, r2
 8017bd4:	781b      	ldrb	r3, [r3, #0]
 8017bd6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017be4:	4619      	mov	r1, r3
 8017be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017be8:	fb03 f301 	mul.w	r3, r3, r1
 8017bec:	4618      	mov	r0, r3
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017bf4:	4619      	mov	r1, r3
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017bfc:	fb03 f301 	mul.w	r3, r3, r1
 8017c00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017c02:	fb01 f303 	mul.w	r3, r1, r3
 8017c06:	4403      	add	r3, r0
 8017c08:	4413      	add	r3, r2
 8017c0a:	687a      	ldr	r2, [r7, #4]
 8017c0c:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8017c10:	4413      	add	r3, r2
 8017c12:	3b01      	subs	r3, #1
 8017c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017c16:	4413      	add	r3, r2
 8017c18:	781b      	ldrb	r3, [r3, #0]
 8017c1a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8017c1e:	e091      	b.n	8017d44 <_lv_img_buf_transform_anti_alias+0x390>
        }
    }
    else {
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	f103 0020 	add.w	r0, r3, #32
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8017c2c:	b29a      	uxth	r2, r3
 8017c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c30:	b29b      	uxth	r3, r3
 8017c32:	4413      	add	r3, r2
 8017c34:	b29b      	uxth	r3, r3
 8017c36:	b219      	sxth	r1, r3
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	f9b3 204a 	ldrsh.w	r2, [r3, #74]	; 0x4a
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	691b      	ldr	r3, [r3, #16]
 8017c42:	f7ff f93d 	bl	8016ec0 <lv_img_buf_get_px_color>
 8017c46:	4603      	mov	r3, r0
 8017c48:	61fb      	str	r3, [r7, #28]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	f103 0020 	add.w	r0, r3, #32
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	f9b3 1048 	ldrsh.w	r1, [r3, #72]	; 0x48
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8017c5c:	b29a      	uxth	r2, r3
 8017c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c60:	b29b      	uxth	r3, r3
 8017c62:	4413      	add	r3, r2
 8017c64:	b29b      	uxth	r3, r3
 8017c66:	b21a      	sxth	r2, r3
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	691b      	ldr	r3, [r3, #16]
 8017c6c:	f7ff f928 	bl	8016ec0 <lv_img_buf_get_px_color>
 8017c70:	4603      	mov	r3, r0
 8017c72:	61bb      	str	r3, [r7, #24]
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	f103 0020 	add.w	r0, r3, #32
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8017c80:	b29a      	uxth	r2, r3
 8017c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c84:	b29b      	uxth	r3, r3
 8017c86:	4413      	add	r3, r2
 8017c88:	b29b      	uxth	r3, r3
 8017c8a:	b219      	sxth	r1, r3
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8017c92:	b29a      	uxth	r2, r3
 8017c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c96:	b29b      	uxth	r3, r3
 8017c98:	4413      	add	r3, r2
 8017c9a:	b29b      	uxth	r3, r3
 8017c9c:	b21a      	sxth	r2, r3
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	691b      	ldr	r3, [r3, #16]
 8017ca2:	f7ff f90d 	bl	8016ec0 <lv_img_buf_get_px_color>
 8017ca6:	4603      	mov	r3, r0
 8017ca8:	617b      	str	r3, [r7, #20]

        if(dsc->tmp.has_alpha) {
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017cb0:	f003 0302 	and.w	r3, r3, #2
 8017cb4:	b2db      	uxtb	r3, r3
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d044      	beq.n	8017d44 <_lv_img_buf_transform_anti_alias+0x390>
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	f103 0020 	add.w	r0, r3, #32
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8017cc6:	b29a      	uxth	r2, r3
 8017cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017cca:	b29b      	uxth	r3, r3
 8017ccc:	4413      	add	r3, r2
 8017cce:	b29b      	uxth	r3, r3
 8017cd0:	b219      	sxth	r1, r3
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8017cd8:	461a      	mov	r2, r3
 8017cda:	f7ff fa33 	bl	8017144 <lv_img_buf_get_px_alpha>
 8017cde:	4603      	mov	r3, r0
 8017ce0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	f103 0020 	add.w	r0, r3, #32
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	f9b3 1048 	ldrsh.w	r1, [r3, #72]	; 0x48
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8017cf6:	b29a      	uxth	r2, r3
 8017cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017cfa:	b29b      	uxth	r3, r3
 8017cfc:	4413      	add	r3, r2
 8017cfe:	b29b      	uxth	r3, r3
 8017d00:	b21b      	sxth	r3, r3
 8017d02:	461a      	mov	r2, r3
 8017d04:	f7ff fa1e 	bl	8017144 <lv_img_buf_get_px_alpha>
 8017d08:	4603      	mov	r3, r0
 8017d0a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	f103 0020 	add.w	r0, r3, #32
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8017d1a:	b29a      	uxth	r2, r3
 8017d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d1e:	b29b      	uxth	r3, r3
 8017d20:	4413      	add	r3, r2
 8017d22:	b29b      	uxth	r3, r3
 8017d24:	b219      	sxth	r1, r3
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8017d2c:	b29a      	uxth	r2, r3
 8017d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d30:	b29b      	uxth	r3, r3
 8017d32:	4413      	add	r3, r2
 8017d34:	b29b      	uxth	r3, r3
 8017d36:	b21b      	sxth	r3, r3
 8017d38:	461a      	mov	r2, r3
 8017d3a:	f7ff fa03 	bl	8017144 <lv_img_buf_get_px_alpha>
 8017d3e:	4603      	mov	r3, r0
 8017d40:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        }
    }

    lv_opa_t xr0 = xr;
 8017d44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017d48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    lv_opa_t xr1 = xr;
 8017d4c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017d50:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    if(dsc->tmp.has_alpha) {
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017d5a:	f003 0302 	and.w	r3, r3, #2
 8017d5e:	b2db      	uxtb	r3, r3
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d06b      	beq.n	8017e3c <_lv_img_buf_transform_anti_alias+0x488>
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
 8017d64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017d68:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8017d6c:	fb02 f203 	mul.w	r2, r2, r3
 8017d70:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8017d74:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8017d78:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 8017d7c:	fb01 f303 	mul.w	r3, r1, r3
 8017d80:	4413      	add	r3, r2
 8017d82:	121b      	asrs	r3, r3, #8
 8017d84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 8017d88:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017d8c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8017d90:	fb02 f203 	mul.w	r2, r2, r3
 8017d94:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017d98:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 8017d9c:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 8017da0:	fb01 f303 	mul.w	r3, r1, r3
 8017da4:	4413      	add	r3, r2
 8017da6:	121b      	asrs	r3, r3, #8
 8017da8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 8017dac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017db0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8017db4:	fb02 f203 	mul.w	r2, r2, r3
 8017db8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017dbc:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 8017dc0:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 8017dc4:	fb01 f303 	mul.w	r3, r1, r3
 8017dc8:	4413      	add	r3, r2
 8017dca:	121b      	asrs	r3, r3, #8
 8017dcc:	b2da      	uxtb	r2, r3
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	771a      	strb	r2, [r3, #28]

        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
 8017dd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017dd6:	2b02      	cmp	r3, #2
 8017dd8:	d805      	bhi.n	8017de6 <_lv_img_buf_transform_anti_alias+0x432>
 8017dda:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017dde:	2b02      	cmp	r3, #2
 8017de0:	d801      	bhi.n	8017de6 <_lv_img_buf_transform_anti_alias+0x432>
 8017de2:	2300      	movs	r3, #0
 8017de4:	e07d      	b.n	8017ee2 <_lv_img_buf_transform_anti_alias+0x52e>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
 8017de6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017dea:	2b02      	cmp	r3, #2
 8017dec:	d802      	bhi.n	8017df4 <_lv_img_buf_transform_anti_alias+0x440>
 8017dee:	2300      	movs	r3, #0
 8017df0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
 8017df4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017df8:	2b02      	cmp	r3, #2
 8017dfa:	d802      	bhi.n	8017e02 <_lv_img_buf_transform_anti_alias+0x44e>
 8017dfc:	23ff      	movs	r3, #255	; 0xff
 8017dfe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
 8017e02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017e06:	2b02      	cmp	r3, #2
 8017e08:	d802      	bhi.n	8017e10 <_lv_img_buf_transform_anti_alias+0x45c>
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
 8017e10:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8017e14:	2b02      	cmp	r3, #2
 8017e16:	d802      	bhi.n	8017e1e <_lv_img_buf_transform_anti_alias+0x46a>
 8017e18:	23ff      	movs	r3, #255	; 0xff
 8017e1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
 8017e1e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017e22:	2b02      	cmp	r3, #2
 8017e24:	d802      	bhi.n	8017e2c <_lv_img_buf_transform_anti_alias+0x478>
 8017e26:	2300      	movs	r3, #0
 8017e28:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
 8017e2c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017e30:	2b02      	cmp	r3, #2
 8017e32:	d80e      	bhi.n	8017e52 <_lv_img_buf_transform_anti_alias+0x49e>
 8017e34:	23ff      	movs	r3, #255	; 0xff
 8017e36:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8017e3a:	e00a      	b.n	8017e52 <_lv_img_buf_transform_anti_alias+0x49e>
    }
    else {
        xr0 = xr;
 8017e3c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017e40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        xr1 = xr;
 8017e44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017e48:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        dsc->res.opa = LV_OPA_COVER;
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	22ff      	movs	r2, #255	; 0xff
 8017e50:	771a      	strb	r2, [r3, #28]
    }

    lv_color_t c0;
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
 8017e52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d102      	bne.n	8017e60 <_lv_img_buf_transform_anti_alias+0x4ac>
 8017e5a:	69fb      	ldr	r3, [r7, #28]
 8017e5c:	613b      	str	r3, [r7, #16]
 8017e5e:	e00f      	b.n	8017e80 <_lv_img_buf_transform_anti_alias+0x4cc>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
 8017e60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017e64:	2bff      	cmp	r3, #255	; 0xff
 8017e66:	d102      	bne.n	8017e6e <_lv_img_buf_transform_anti_alias+0x4ba>
 8017e68:	6a3b      	ldr	r3, [r7, #32]
 8017e6a:	613b      	str	r3, [r7, #16]
 8017e6c:	e008      	b.n	8017e80 <_lv_img_buf_transform_anti_alias+0x4cc>
    else c0 = lv_color_mix(c00, c01, xr0);
 8017e6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017e72:	461a      	mov	r2, r3
 8017e74:	69f9      	ldr	r1, [r7, #28]
 8017e76:	6a38      	ldr	r0, [r7, #32]
 8017e78:	f7fe ffae 	bl	8016dd8 <lv_color_mix>
 8017e7c:	4603      	mov	r3, r0
 8017e7e:	613b      	str	r3, [r7, #16]

    lv_color_t c1;
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
 8017e80:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d102      	bne.n	8017e8e <_lv_img_buf_transform_anti_alias+0x4da>
 8017e88:	697b      	ldr	r3, [r7, #20]
 8017e8a:	60fb      	str	r3, [r7, #12]
 8017e8c:	e00f      	b.n	8017eae <_lv_img_buf_transform_anti_alias+0x4fa>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
 8017e8e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8017e92:	2bff      	cmp	r3, #255	; 0xff
 8017e94:	d102      	bne.n	8017e9c <_lv_img_buf_transform_anti_alias+0x4e8>
 8017e96:	69bb      	ldr	r3, [r7, #24]
 8017e98:	60fb      	str	r3, [r7, #12]
 8017e9a:	e008      	b.n	8017eae <_lv_img_buf_transform_anti_alias+0x4fa>
    else c1 = lv_color_mix(c10, c11, xr1);
 8017e9c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8017ea0:	461a      	mov	r2, r3
 8017ea2:	6979      	ldr	r1, [r7, #20]
 8017ea4:	69b8      	ldr	r0, [r7, #24]
 8017ea6:	f7fe ff97 	bl	8016dd8 <lv_color_mix>
 8017eaa:	4603      	mov	r3, r0
 8017eac:	60fb      	str	r3, [r7, #12]

    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
 8017eae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d103      	bne.n	8017ebe <_lv_img_buf_transform_anti_alias+0x50a>
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	68fa      	ldr	r2, [r7, #12]
 8017eba:	619a      	str	r2, [r3, #24]
 8017ebc:	e010      	b.n	8017ee0 <_lv_img_buf_transform_anti_alias+0x52c>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
 8017ebe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8017ec2:	2bff      	cmp	r3, #255	; 0xff
 8017ec4:	d103      	bne.n	8017ece <_lv_img_buf_transform_anti_alias+0x51a>
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	693a      	ldr	r2, [r7, #16]
 8017eca:	619a      	str	r2, [r3, #24]
 8017ecc:	e008      	b.n	8017ee0 <_lv_img_buf_transform_anti_alias+0x52c>
    else dsc->res.color = lv_color_mix(c0, c1, yr);
 8017ece:	687c      	ldr	r4, [r7, #4]
 8017ed0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8017ed4:	461a      	mov	r2, r3
 8017ed6:	68f9      	ldr	r1, [r7, #12]
 8017ed8:	6938      	ldr	r0, [r7, #16]
 8017eda:	f7fe ff7d 	bl	8016dd8 <lv_color_mix>
 8017ede:	61a0      	str	r0, [r4, #24]

    return true;
 8017ee0:	2301      	movs	r3, #1
}
 8017ee2:	4618      	mov	r0, r3
 8017ee4:	374c      	adds	r7, #76	; 0x4c
 8017ee6:	46bd      	mov	sp, r7
 8017ee8:	bd90      	pop	{r4, r7, pc}
	...

08017eec <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)
{
 8017eec:	b580      	push	{r7, lr}
 8017eee:	b088      	sub	sp, #32
 8017ef0:	af00      	add	r7, sp, #0
 8017ef2:	6078      	str	r0, [r7, #4]
 8017ef4:	6039      	str	r1, [r7, #0]
    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;
 8017ef6:	2300      	movs	r3, #0
 8017ef8:	61fb      	str	r3, [r7, #28]

#if LV_IMG_CACHE_DEF_SIZE
    if(entry_cnt == 0) {
 8017efa:	4b87      	ldr	r3, [pc, #540]	; (8018118 <_lv_img_cache_open+0x22c>)
 8017efc:	881b      	ldrh	r3, [r3, #0]
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d101      	bne.n	8017f06 <_lv_img_cache_open+0x1a>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
 8017f02:	2300      	movs	r3, #0
 8017f04:	e104      	b.n	8018110 <_lv_img_cache_open+0x224>
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 8017f06:	4b85      	ldr	r3, [pc, #532]	; (801811c <_lv_img_cache_open+0x230>)
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	617b      	str	r3, [r7, #20]

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 8017f0c:	2300      	movs	r3, #0
 8017f0e:	837b      	strh	r3, [r7, #26]
 8017f10:	e021      	b.n	8017f56 <_lv_img_cache_open+0x6a>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
 8017f12:	8b7a      	ldrh	r2, [r7, #26]
 8017f14:	4613      	mov	r3, r2
 8017f16:	009b      	lsls	r3, r3, #2
 8017f18:	4413      	add	r3, r2
 8017f1a:	00db      	lsls	r3, r3, #3
 8017f1c:	461a      	mov	r2, r3
 8017f1e:	697b      	ldr	r3, [r7, #20]
 8017f20:	4413      	add	r3, r2
 8017f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f24:	4a7e      	ldr	r2, [pc, #504]	; (8018120 <_lv_img_cache_open+0x234>)
 8017f26:	4293      	cmp	r3, r2
 8017f28:	db12      	blt.n	8017f50 <_lv_img_cache_open+0x64>
            cache[i].life -= LV_IMG_CACHE_AGING;
 8017f2a:	8b7a      	ldrh	r2, [r7, #26]
 8017f2c:	4613      	mov	r3, r2
 8017f2e:	009b      	lsls	r3, r3, #2
 8017f30:	4413      	add	r3, r2
 8017f32:	00db      	lsls	r3, r3, #3
 8017f34:	461a      	mov	r2, r3
 8017f36:	697b      	ldr	r3, [r7, #20]
 8017f38:	4413      	add	r3, r2
 8017f3a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8017f3c:	8b7a      	ldrh	r2, [r7, #26]
 8017f3e:	4613      	mov	r3, r2
 8017f40:	009b      	lsls	r3, r3, #2
 8017f42:	4413      	add	r3, r2
 8017f44:	00db      	lsls	r3, r3, #3
 8017f46:	461a      	mov	r2, r3
 8017f48:	697b      	ldr	r3, [r7, #20]
 8017f4a:	4413      	add	r3, r2
 8017f4c:	1e4a      	subs	r2, r1, #1
 8017f4e:	625a      	str	r2, [r3, #36]	; 0x24
    for(i = 0; i < entry_cnt; i++) {
 8017f50:	8b7b      	ldrh	r3, [r7, #26]
 8017f52:	3301      	adds	r3, #1
 8017f54:	837b      	strh	r3, [r7, #26]
 8017f56:	4b70      	ldr	r3, [pc, #448]	; (8018118 <_lv_img_cache_open+0x22c>)
 8017f58:	881b      	ldrh	r3, [r3, #0]
 8017f5a:	8b7a      	ldrh	r2, [r7, #26]
 8017f5c:	429a      	cmp	r2, r3
 8017f5e:	d3d8      	bcc.n	8017f12 <_lv_img_cache_open+0x26>
        }
    }

    for(i = 0; i < entry_cnt; i++) {
 8017f60:	2300      	movs	r3, #0
 8017f62:	837b      	strh	r3, [r7, #26]
 8017f64:	e064      	b.n	8018030 <_lv_img_cache_open+0x144>
        bool match = false;
 8017f66:	2300      	movs	r3, #0
 8017f68:	767b      	strb	r3, [r7, #25]
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
 8017f6a:	8b7a      	ldrh	r2, [r7, #26]
 8017f6c:	4613      	mov	r3, r2
 8017f6e:	009b      	lsls	r3, r3, #2
 8017f70:	4413      	add	r3, r2
 8017f72:	00db      	lsls	r3, r3, #3
 8017f74:	461a      	mov	r2, r3
 8017f76:	697b      	ldr	r3, [r7, #20]
 8017f78:	4413      	add	r3, r2
 8017f7a:	685b      	ldr	r3, [r3, #4]
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	f7f6 fa0d 	bl	800e39c <lv_img_src_get_type>
 8017f82:	4603      	mov	r3, r0
 8017f84:	74fb      	strb	r3, [r7, #19]
        if(src_type == LV_IMG_SRC_VARIABLE) {
 8017f86:	7cfb      	ldrb	r3, [r7, #19]
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d11a      	bne.n	8017fc2 <_lv_img_cache_open+0xd6>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
 8017f8c:	8b7a      	ldrh	r2, [r7, #26]
 8017f8e:	4613      	mov	r3, r2
 8017f90:	009b      	lsls	r3, r3, #2
 8017f92:	4413      	add	r3, r2
 8017f94:	00db      	lsls	r3, r3, #3
 8017f96:	461a      	mov	r2, r3
 8017f98:	697b      	ldr	r3, [r7, #20]
 8017f9a:	4413      	add	r3, r2
 8017f9c:	685b      	ldr	r3, [r3, #4]
 8017f9e:	687a      	ldr	r2, [r7, #4]
 8017fa0:	429a      	cmp	r2, r3
 8017fa2:	d123      	bne.n	8017fec <_lv_img_cache_open+0x100>
 8017fa4:	8b7a      	ldrh	r2, [r7, #26]
 8017fa6:	4613      	mov	r3, r2
 8017fa8:	009b      	lsls	r3, r3, #2
 8017faa:	4413      	add	r3, r2
 8017fac:	00db      	lsls	r3, r3, #3
 8017fae:	461a      	mov	r2, r3
 8017fb0:	697b      	ldr	r3, [r7, #20]
 8017fb2:	4413      	add	r3, r2
 8017fb4:	689a      	ldr	r2, [r3, #8]
 8017fb6:	683b      	ldr	r3, [r7, #0]
 8017fb8:	429a      	cmp	r2, r3
 8017fba:	d117      	bne.n	8017fec <_lv_img_cache_open+0x100>
 8017fbc:	2301      	movs	r3, #1
 8017fbe:	767b      	strb	r3, [r7, #25]
 8017fc0:	e014      	b.n	8017fec <_lv_img_cache_open+0x100>
        }
        else if(src_type == LV_IMG_SRC_FILE) {
 8017fc2:	7cfb      	ldrb	r3, [r7, #19]
 8017fc4:	2b01      	cmp	r3, #1
 8017fc6:	d111      	bne.n	8017fec <_lv_img_cache_open+0x100>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
 8017fc8:	8b7a      	ldrh	r2, [r7, #26]
 8017fca:	4613      	mov	r3, r2
 8017fcc:	009b      	lsls	r3, r3, #2
 8017fce:	4413      	add	r3, r2
 8017fd0:	00db      	lsls	r3, r3, #3
 8017fd2:	461a      	mov	r2, r3
 8017fd4:	697b      	ldr	r3, [r7, #20]
 8017fd6:	4413      	add	r3, r2
 8017fd8:	685b      	ldr	r3, [r3, #4]
 8017fda:	6879      	ldr	r1, [r7, #4]
 8017fdc:	4618      	mov	r0, r3
 8017fde:	f7e8 f913 	bl	8000208 <strcmp>
 8017fe2:	4603      	mov	r3, r0
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d101      	bne.n	8017fec <_lv_img_cache_open+0x100>
 8017fe8:	2301      	movs	r3, #1
 8017fea:	767b      	strb	r3, [r7, #25]
        }

        if(match) {
 8017fec:	7e7b      	ldrb	r3, [r7, #25]
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d01b      	beq.n	801802a <_lv_img_cache_open+0x13e>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
 8017ff2:	8b7a      	ldrh	r2, [r7, #26]
 8017ff4:	4613      	mov	r3, r2
 8017ff6:	009b      	lsls	r3, r3, #2
 8017ff8:	4413      	add	r3, r2
 8017ffa:	00db      	lsls	r3, r3, #3
 8017ffc:	461a      	mov	r2, r3
 8017ffe:	697b      	ldr	r3, [r7, #20]
 8018000:	4413      	add	r3, r2
 8018002:	61fb      	str	r3, [r7, #28]
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
 8018004:	69fb      	ldr	r3, [r7, #28]
 8018006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018008:	461a      	mov	r2, r3
 801800a:	69fb      	ldr	r3, [r7, #28]
 801800c:	699b      	ldr	r3, [r3, #24]
 801800e:	4413      	add	r3, r2
 8018010:	461a      	mov	r2, r3
 8018012:	69fb      	ldr	r3, [r7, #28]
 8018014:	625a      	str	r2, [r3, #36]	; 0x24
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
 8018016:	69fb      	ldr	r3, [r7, #28]
 8018018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801801a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801801e:	dd0d      	ble.n	801803c <_lv_img_cache_open+0x150>
 8018020:	69fb      	ldr	r3, [r7, #28]
 8018022:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018026:	625a      	str	r2, [r3, #36]	; 0x24
            LV_LOG_TRACE("image draw: image found in the cache");
            break;
 8018028:	e008      	b.n	801803c <_lv_img_cache_open+0x150>
    for(i = 0; i < entry_cnt; i++) {
 801802a:	8b7b      	ldrh	r3, [r7, #26]
 801802c:	3301      	adds	r3, #1
 801802e:	837b      	strh	r3, [r7, #26]
 8018030:	4b39      	ldr	r3, [pc, #228]	; (8018118 <_lv_img_cache_open+0x22c>)
 8018032:	881b      	ldrh	r3, [r3, #0]
 8018034:	8b7a      	ldrh	r2, [r7, #26]
 8018036:	429a      	cmp	r2, r3
 8018038:	d395      	bcc.n	8017f66 <_lv_img_cache_open+0x7a>
 801803a:	e000      	b.n	801803e <_lv_img_cache_open+0x152>
            break;
 801803c:	bf00      	nop
        }
    }

    /*The image is not cached then cache it now*/
    if(cached_src) return cached_src;
 801803e:	69fb      	ldr	r3, [r7, #28]
 8018040:	2b00      	cmp	r3, #0
 8018042:	d001      	beq.n	8018048 <_lv_img_cache_open+0x15c>
 8018044:	69fb      	ldr	r3, [r7, #28]
 8018046:	e063      	b.n	8018110 <_lv_img_cache_open+0x224>

    /*Find an entry to reuse. Select the entry with the least life*/
    cached_src = &cache[0];
 8018048:	697b      	ldr	r3, [r7, #20]
 801804a:	61fb      	str	r3, [r7, #28]
    for(i = 1; i < entry_cnt; i++) {
 801804c:	2301      	movs	r3, #1
 801804e:	837b      	strh	r3, [r7, #26]
 8018050:	e018      	b.n	8018084 <_lv_img_cache_open+0x198>
        if(cache[i].life < cached_src->life) {
 8018052:	8b7a      	ldrh	r2, [r7, #26]
 8018054:	4613      	mov	r3, r2
 8018056:	009b      	lsls	r3, r3, #2
 8018058:	4413      	add	r3, r2
 801805a:	00db      	lsls	r3, r3, #3
 801805c:	461a      	mov	r2, r3
 801805e:	697b      	ldr	r3, [r7, #20]
 8018060:	4413      	add	r3, r2
 8018062:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018064:	69fb      	ldr	r3, [r7, #28]
 8018066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018068:	429a      	cmp	r2, r3
 801806a:	da08      	bge.n	801807e <_lv_img_cache_open+0x192>
            cached_src = &cache[i];
 801806c:	8b7a      	ldrh	r2, [r7, #26]
 801806e:	4613      	mov	r3, r2
 8018070:	009b      	lsls	r3, r3, #2
 8018072:	4413      	add	r3, r2
 8018074:	00db      	lsls	r3, r3, #3
 8018076:	461a      	mov	r2, r3
 8018078:	697b      	ldr	r3, [r7, #20]
 801807a:	4413      	add	r3, r2
 801807c:	61fb      	str	r3, [r7, #28]
    for(i = 1; i < entry_cnt; i++) {
 801807e:	8b7b      	ldrh	r3, [r7, #26]
 8018080:	3301      	adds	r3, #1
 8018082:	837b      	strh	r3, [r7, #26]
 8018084:	4b24      	ldr	r3, [pc, #144]	; (8018118 <_lv_img_cache_open+0x22c>)
 8018086:	881b      	ldrh	r3, [r3, #0]
 8018088:	8b7a      	ldrh	r2, [r7, #26]
 801808a:	429a      	cmp	r2, r3
 801808c:	d3e1      	bcc.n	8018052 <_lv_img_cache_open+0x166>
        }
    }

    /*Close the decoder to reuse if it was opened (has a valid source)*/
    if(cached_src->dec_dsc.src) {
 801808e:	69fb      	ldr	r3, [r7, #28]
 8018090:	685b      	ldr	r3, [r3, #4]
 8018092:	2b00      	cmp	r3, #0
 8018094:	d003      	beq.n	801809e <_lv_img_cache_open+0x1b2>
        lv_img_decoder_close(&cached_src->dec_dsc);
 8018096:	69fb      	ldr	r3, [r7, #28]
 8018098:	4618      	mov	r0, r3
 801809a:	f000 fa5f 	bl	801855c <lv_img_decoder_close>
#else
    cached_src = &cache_temp;
#endif
    /*Open the image and measure the time to open*/
    uint32_t t_start;
    t_start                          = lv_tick_get();
 801809e:	f002 fb8d 	bl	801a7bc <lv_tick_get>
 80180a2:	60f8      	str	r0, [r7, #12]
    cached_src->dec_dsc.time_to_open = 0;
 80180a4:	69fb      	ldr	r3, [r7, #28]
 80180a6:	2200      	movs	r2, #0
 80180a8:	619a      	str	r2, [r3, #24]
    lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
 80180aa:	69fb      	ldr	r3, [r7, #28]
 80180ac:	683a      	ldr	r2, [r7, #0]
 80180ae:	6879      	ldr	r1, [r7, #4]
 80180b0:	4618      	mov	r0, r3
 80180b2:	f000 f9b7 	bl	8018424 <lv_img_decoder_open>
 80180b6:	4603      	mov	r3, r0
 80180b8:	72fb      	strb	r3, [r7, #11]
    if(open_res == LV_RES_INV) {
 80180ba:	7afb      	ldrb	r3, [r7, #11]
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d112      	bne.n	80180e6 <_lv_img_cache_open+0x1fa>
        LV_LOG_WARN("Image draw cannot open the image resource");
        lv_img_decoder_close(&cached_src->dec_dsc);
 80180c0:	69fb      	ldr	r3, [r7, #28]
 80180c2:	4618      	mov	r0, r3
 80180c4:	f000 fa4a 	bl	801855c <lv_img_decoder_close>
        _lv_memset_00(&cached_src->dec_dsc, sizeof(lv_img_decoder_dsc_t));
 80180c8:	69fb      	ldr	r3, [r7, #28]
 80180ca:	2124      	movs	r1, #36	; 0x24
 80180cc:	4618      	mov	r0, r3
 80180ce:	f005 f82c 	bl	801d12a <_lv_memset_00>
        _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
 80180d2:	2128      	movs	r1, #40	; 0x28
 80180d4:	69f8      	ldr	r0, [r7, #28]
 80180d6:	f005 f828 	bl	801d12a <_lv_memset_00>
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
 80180da:	69fb      	ldr	r3, [r7, #28]
 80180dc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80180e0:	625a      	str	r2, [r3, #36]	; 0x24
        return NULL;
 80180e2:	2300      	movs	r3, #0
 80180e4:	e014      	b.n	8018110 <_lv_img_cache_open+0x224>
    }

    cached_src->life = 0;
 80180e6:	69fb      	ldr	r3, [r7, #28]
 80180e8:	2200      	movs	r2, #0
 80180ea:	625a      	str	r2, [r3, #36]	; 0x24

    /*If `time_to_open` was not set in the open function set it here*/
    if(cached_src->dec_dsc.time_to_open == 0) {
 80180ec:	69fb      	ldr	r3, [r7, #28]
 80180ee:	699b      	ldr	r3, [r3, #24]
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d105      	bne.n	8018100 <_lv_img_cache_open+0x214>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 80180f4:	68f8      	ldr	r0, [r7, #12]
 80180f6:	f002 fb7b 	bl	801a7f0 <lv_tick_elaps>
 80180fa:	4602      	mov	r2, r0
 80180fc:	69fb      	ldr	r3, [r7, #28]
 80180fe:	619a      	str	r2, [r3, #24]
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 8018100:	69fb      	ldr	r3, [r7, #28]
 8018102:	699b      	ldr	r3, [r3, #24]
 8018104:	2b00      	cmp	r3, #0
 8018106:	d102      	bne.n	801810e <_lv_img_cache_open+0x222>
 8018108:	69fb      	ldr	r3, [r7, #28]
 801810a:	2201      	movs	r2, #1
 801810c:	619a      	str	r2, [r3, #24]

    return cached_src;
 801810e:	69fb      	ldr	r3, [r7, #28]
}
 8018110:	4618      	mov	r0, r3
 8018112:	3720      	adds	r7, #32
 8018114:	46bd      	mov	sp, r7
 8018116:	bd80      	pop	{r7, pc}
 8018118:	20019404 	.word	0x20019404
 801811c:	2002185c 	.word	0x2002185c
 8018120:	80000002 	.word	0x80000002

08018124 <lv_img_cache_set_size>:
 * More cached images mean more opened image at same time which might mean more memory usage.
 * E.g. if 20 PNG or JPG images are open in the RAM they consume memory while opened in the cache.
 * @param new_entry_cnt number of image to cache
 */
void lv_img_cache_set_size(uint16_t new_entry_cnt)
{
 8018124:	b590      	push	{r4, r7, lr}
 8018126:	b085      	sub	sp, #20
 8018128:	af00      	add	r7, sp, #0
 801812a:	4603      	mov	r3, r0
 801812c:	80fb      	strh	r3, [r7, #6]
#if LV_IMG_CACHE_DEF_SIZE == 0
    LV_UNUSED(new_entry_cnt);
    LV_LOG_WARN("Can't change cache size because it's disabled by LV_IMG_CACHE_DEF_SIZE = 0");
#else
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 801812e:	4b2e      	ldr	r3, [pc, #184]	; (80181e8 <lv_img_cache_set_size+0xc4>)
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	2b00      	cmp	r3, #0
 8018134:	d007      	beq.n	8018146 <lv_img_cache_set_size+0x22>
        /*Clean the cache before free it*/
        lv_img_cache_invalidate_src(NULL);
 8018136:	2000      	movs	r0, #0
 8018138:	f000 f85c 	bl	80181f4 <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 801813c:	4b2a      	ldr	r3, [pc, #168]	; (80181e8 <lv_img_cache_set_size+0xc4>)
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	4618      	mov	r0, r3
 8018142:	f004 fad1 	bl	801c6e8 <lv_mem_free>
    }

    /*Reallocate the cache*/
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 8018146:	88fa      	ldrh	r2, [r7, #6]
 8018148:	4613      	mov	r3, r2
 801814a:	009b      	lsls	r3, r3, #2
 801814c:	4413      	add	r3, r2
 801814e:	00db      	lsls	r3, r3, #3
 8018150:	4618      	mov	r0, r3
 8018152:	f004 fa7f 	bl	801c654 <lv_mem_alloc>
 8018156:	4602      	mov	r2, r0
 8018158:	4b23      	ldr	r3, [pc, #140]	; (80181e8 <lv_img_cache_set_size+0xc4>)
 801815a:	601a      	str	r2, [r3, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
 801815c:	4b22      	ldr	r3, [pc, #136]	; (80181e8 <lv_img_cache_set_size+0xc4>)
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	4618      	mov	r0, r3
 8018162:	f003 fceb 	bl	801bb3c <lv_debug_check_null>
 8018166:	4603      	mov	r3, r0
 8018168:	f083 0301 	eor.w	r3, r3, #1
 801816c:	b2db      	uxtb	r3, r3
 801816e:	2b00      	cmp	r3, #0
 8018170:	d009      	beq.n	8018186 <lv_img_cache_set_size+0x62>
 8018172:	4b1d      	ldr	r3, [pc, #116]	; (80181e8 <lv_img_cache_set_size+0xc4>)
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	f04f 0400 	mov.w	r4, #0
 801817a:	461a      	mov	r2, r3
 801817c:	4623      	mov	r3, r4
 801817e:	481b      	ldr	r0, [pc, #108]	; (80181ec <lv_img_cache_set_size+0xc8>)
 8018180:	f003 fcec 	bl	801bb5c <lv_debug_log_error>
 8018184:	e7fe      	b.n	8018184 <lv_img_cache_set_size+0x60>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
 8018186:	4b18      	ldr	r3, [pc, #96]	; (80181e8 <lv_img_cache_set_size+0xc4>)
 8018188:	681b      	ldr	r3, [r3, #0]
 801818a:	2b00      	cmp	r3, #0
 801818c:	d103      	bne.n	8018196 <lv_img_cache_set_size+0x72>
        entry_cnt = 0;
 801818e:	4b18      	ldr	r3, [pc, #96]	; (80181f0 <lv_img_cache_set_size+0xcc>)
 8018190:	2200      	movs	r2, #0
 8018192:	801a      	strh	r2, [r3, #0]
        return;
 8018194:	e025      	b.n	80181e2 <lv_img_cache_set_size+0xbe>
    }
    entry_cnt = new_entry_cnt;
 8018196:	4a16      	ldr	r2, [pc, #88]	; (80181f0 <lv_img_cache_set_size+0xcc>)
 8018198:	88fb      	ldrh	r3, [r7, #6]
 801819a:	8013      	strh	r3, [r2, #0]

    /*Clean the cache*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 801819c:	2300      	movs	r3, #0
 801819e:	81fb      	strh	r3, [r7, #14]
 80181a0:	e01a      	b.n	80181d8 <lv_img_cache_set_size+0xb4>
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
 80181a2:	4b11      	ldr	r3, [pc, #68]	; (80181e8 <lv_img_cache_set_size+0xc4>)
 80181a4:	6819      	ldr	r1, [r3, #0]
 80181a6:	89fa      	ldrh	r2, [r7, #14]
 80181a8:	4613      	mov	r3, r2
 80181aa:	009b      	lsls	r3, r3, #2
 80181ac:	4413      	add	r3, r2
 80181ae:	00db      	lsls	r3, r3, #3
 80181b0:	440b      	add	r3, r1
 80181b2:	2124      	movs	r1, #36	; 0x24
 80181b4:	4618      	mov	r0, r3
 80181b6:	f004 ffb8 	bl	801d12a <_lv_memset_00>
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i], sizeof(lv_img_cache_entry_t));
 80181ba:	4b0b      	ldr	r3, [pc, #44]	; (80181e8 <lv_img_cache_set_size+0xc4>)
 80181bc:	6819      	ldr	r1, [r3, #0]
 80181be:	89fa      	ldrh	r2, [r7, #14]
 80181c0:	4613      	mov	r3, r2
 80181c2:	009b      	lsls	r3, r3, #2
 80181c4:	4413      	add	r3, r2
 80181c6:	00db      	lsls	r3, r3, #3
 80181c8:	440b      	add	r3, r1
 80181ca:	2128      	movs	r1, #40	; 0x28
 80181cc:	4618      	mov	r0, r3
 80181ce:	f004 ffac 	bl	801d12a <_lv_memset_00>
    for(i = 0; i < entry_cnt; i++) {
 80181d2:	89fb      	ldrh	r3, [r7, #14]
 80181d4:	3301      	adds	r3, #1
 80181d6:	81fb      	strh	r3, [r7, #14]
 80181d8:	4b05      	ldr	r3, [pc, #20]	; (80181f0 <lv_img_cache_set_size+0xcc>)
 80181da:	881b      	ldrh	r3, [r3, #0]
 80181dc:	89fa      	ldrh	r2, [r7, #14]
 80181de:	429a      	cmp	r2, r3
 80181e0:	d3df      	bcc.n	80181a2 <lv_img_cache_set_size+0x7e>
    }
#endif
}
 80181e2:	3714      	adds	r7, #20
 80181e4:	46bd      	mov	sp, r7
 80181e6:	bd90      	pop	{r4, r7, pc}
 80181e8:	2002185c 	.word	0x2002185c
 80181ec:	0802d800 	.word	0x0802d800
 80181f0:	20019404 	.word	0x20019404

080181f4 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 80181f4:	b580      	push	{r7, lr}
 80181f6:	b084      	sub	sp, #16
 80181f8:	af00      	add	r7, sp, #0
 80181fa:	6078      	str	r0, [r7, #4]
#if LV_IMG_CACHE_DEF_SIZE
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 80181fc:	4b27      	ldr	r3, [pc, #156]	; (801829c <lv_img_cache_invalidate_src+0xa8>)
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	60bb      	str	r3, [r7, #8]

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 8018202:	2300      	movs	r3, #0
 8018204:	81fb      	strh	r3, [r7, #14]
 8018206:	e03f      	b.n	8018288 <lv_img_cache_invalidate_src+0x94>
        if(cache[i].dec_dsc.src == src || src == NULL) {
 8018208:	89fa      	ldrh	r2, [r7, #14]
 801820a:	4613      	mov	r3, r2
 801820c:	009b      	lsls	r3, r3, #2
 801820e:	4413      	add	r3, r2
 8018210:	00db      	lsls	r3, r3, #3
 8018212:	461a      	mov	r2, r3
 8018214:	68bb      	ldr	r3, [r7, #8]
 8018216:	4413      	add	r3, r2
 8018218:	685b      	ldr	r3, [r3, #4]
 801821a:	687a      	ldr	r2, [r7, #4]
 801821c:	429a      	cmp	r2, r3
 801821e:	d002      	beq.n	8018226 <lv_img_cache_invalidate_src+0x32>
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	2b00      	cmp	r3, #0
 8018224:	d12d      	bne.n	8018282 <lv_img_cache_invalidate_src+0x8e>
            if(cache[i].dec_dsc.src != NULL) {
 8018226:	89fa      	ldrh	r2, [r7, #14]
 8018228:	4613      	mov	r3, r2
 801822a:	009b      	lsls	r3, r3, #2
 801822c:	4413      	add	r3, r2
 801822e:	00db      	lsls	r3, r3, #3
 8018230:	461a      	mov	r2, r3
 8018232:	68bb      	ldr	r3, [r7, #8]
 8018234:	4413      	add	r3, r2
 8018236:	685b      	ldr	r3, [r3, #4]
 8018238:	2b00      	cmp	r3, #0
 801823a:	d00a      	beq.n	8018252 <lv_img_cache_invalidate_src+0x5e>
                lv_img_decoder_close(&cache[i].dec_dsc);
 801823c:	89fa      	ldrh	r2, [r7, #14]
 801823e:	4613      	mov	r3, r2
 8018240:	009b      	lsls	r3, r3, #2
 8018242:	4413      	add	r3, r2
 8018244:	00db      	lsls	r3, r3, #3
 8018246:	461a      	mov	r2, r3
 8018248:	68bb      	ldr	r3, [r7, #8]
 801824a:	4413      	add	r3, r2
 801824c:	4618      	mov	r0, r3
 801824e:	f000 f985 	bl	801855c <lv_img_decoder_close>
            }

            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
 8018252:	89fa      	ldrh	r2, [r7, #14]
 8018254:	4613      	mov	r3, r2
 8018256:	009b      	lsls	r3, r3, #2
 8018258:	4413      	add	r3, r2
 801825a:	00db      	lsls	r3, r3, #3
 801825c:	461a      	mov	r2, r3
 801825e:	68bb      	ldr	r3, [r7, #8]
 8018260:	4413      	add	r3, r2
 8018262:	2124      	movs	r1, #36	; 0x24
 8018264:	4618      	mov	r0, r3
 8018266:	f004 ff60 	bl	801d12a <_lv_memset_00>
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
 801826a:	89fa      	ldrh	r2, [r7, #14]
 801826c:	4613      	mov	r3, r2
 801826e:	009b      	lsls	r3, r3, #2
 8018270:	4413      	add	r3, r2
 8018272:	00db      	lsls	r3, r3, #3
 8018274:	461a      	mov	r2, r3
 8018276:	68bb      	ldr	r3, [r7, #8]
 8018278:	4413      	add	r3, r2
 801827a:	2128      	movs	r1, #40	; 0x28
 801827c:	4618      	mov	r0, r3
 801827e:	f004 ff54 	bl	801d12a <_lv_memset_00>
    for(i = 0; i < entry_cnt; i++) {
 8018282:	89fb      	ldrh	r3, [r7, #14]
 8018284:	3301      	adds	r3, #1
 8018286:	81fb      	strh	r3, [r7, #14]
 8018288:	4b05      	ldr	r3, [pc, #20]	; (80182a0 <lv_img_cache_invalidate_src+0xac>)
 801828a:	881b      	ldrh	r3, [r3, #0]
 801828c:	89fa      	ldrh	r2, [r7, #14]
 801828e:	429a      	cmp	r2, r3
 8018290:	d3ba      	bcc.n	8018208 <lv_img_cache_invalidate_src+0x14>
        }
    }
#endif
}
 8018292:	bf00      	nop
 8018294:	3710      	adds	r7, #16
 8018296:	46bd      	mov	sp, r7
 8018298:	bd80      	pop	{r7, pc}
 801829a:	bf00      	nop
 801829c:	2002185c 	.word	0x2002185c
 80182a0:	20019404 	.word	0x20019404

080182a4 <lv_color_make>:
#elif LV_COLOR_DEPTH == 32
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 80182a4:	b490      	push	{r4, r7}
 80182a6:	b082      	sub	sp, #8
 80182a8:	af00      	add	r7, sp, #0
 80182aa:	4604      	mov	r4, r0
 80182ac:	4608      	mov	r0, r1
 80182ae:	4611      	mov	r1, r2
 80182b0:	4622      	mov	r2, r4
 80182b2:	71fa      	strb	r2, [r7, #7]
 80182b4:	4602      	mov	r2, r0
 80182b6:	71ba      	strb	r2, [r7, #6]
 80182b8:	460a      	mov	r2, r1
 80182ba:	717a      	strb	r2, [r7, #5]
    return LV_COLOR_MAKE(r, g, b);
 80182bc:	797a      	ldrb	r2, [r7, #5]
 80182be:	f362 0307 	bfi	r3, r2, #0, #8
 80182c2:	79ba      	ldrb	r2, [r7, #6]
 80182c4:	f362 230f 	bfi	r3, r2, #8, #8
 80182c8:	79fa      	ldrb	r2, [r7, #7]
 80182ca:	f362 4317 	bfi	r3, r2, #16, #8
 80182ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
}
 80182d2:	4618      	mov	r0, r3
 80182d4:	3708      	adds	r7, #8
 80182d6:	46bd      	mov	sp, r7
 80182d8:	bc90      	pop	{r4, r7}
 80182da:	4770      	bx	lr

080182dc <_lv_memcpy_small>:
{
 80182dc:	b480      	push	{r7}
 80182de:	b087      	sub	sp, #28
 80182e0:	af00      	add	r7, sp, #0
 80182e2:	60f8      	str	r0, [r7, #12]
 80182e4:	60b9      	str	r1, [r7, #8]
 80182e6:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 80182ec:	68bb      	ldr	r3, [r7, #8]
 80182ee:	613b      	str	r3, [r7, #16]
    while(len) {
 80182f0:	e00c      	b.n	801830c <_lv_memcpy_small+0x30>
        *d8 = *s8;
 80182f2:	693b      	ldr	r3, [r7, #16]
 80182f4:	781a      	ldrb	r2, [r3, #0]
 80182f6:	697b      	ldr	r3, [r7, #20]
 80182f8:	701a      	strb	r2, [r3, #0]
        d8++;
 80182fa:	697b      	ldr	r3, [r7, #20]
 80182fc:	3301      	adds	r3, #1
 80182fe:	617b      	str	r3, [r7, #20]
        s8++;
 8018300:	693b      	ldr	r3, [r7, #16]
 8018302:	3301      	adds	r3, #1
 8018304:	613b      	str	r3, [r7, #16]
        len--;
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	3b01      	subs	r3, #1
 801830a:	607b      	str	r3, [r7, #4]
    while(len) {
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	2b00      	cmp	r3, #0
 8018310:	d1ef      	bne.n	80182f2 <_lv_memcpy_small+0x16>
    return dst;
 8018312:	68fb      	ldr	r3, [r7, #12]
}
 8018314:	4618      	mov	r0, r3
 8018316:	371c      	adds	r7, #28
 8018318:	46bd      	mov	sp, r7
 801831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801831e:	4770      	bx	lr

08018320 <_lv_img_decoder_init>:

/**
 * Initialize the image decoder module
 * */
void _lv_img_decoder_init(void)
{
 8018320:	b590      	push	{r4, r7, lr}
 8018322:	b083      	sub	sp, #12
 8018324:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 8018326:	2110      	movs	r1, #16
 8018328:	4817      	ldr	r0, [pc, #92]	; (8018388 <_lv_img_decoder_init+0x68>)
 801832a:	f003 fe47 	bl	801bfbc <_lv_ll_init>

    lv_img_decoder_t * decoder;

    /*Create a decoder for the built in color format*/
    decoder = lv_img_decoder_create();
 801832e:	f000 f93b 	bl	80185a8 <lv_img_decoder_create>
 8018332:	6078      	str	r0, [r7, #4]
    if(decoder == NULL) {
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	2b00      	cmp	r3, #0
 8018338:	d111      	bne.n	801835e <_lv_img_decoder_init+0x3e>
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
        LV_ASSERT_MEM(decoder);
 801833a:	6878      	ldr	r0, [r7, #4]
 801833c:	f003 fbfe 	bl	801bb3c <lv_debug_check_null>
 8018340:	4603      	mov	r3, r0
 8018342:	f083 0301 	eor.w	r3, r3, #1
 8018346:	b2db      	uxtb	r3, r3
 8018348:	2b00      	cmp	r3, #0
 801834a:	d019      	beq.n	8018380 <_lv_img_decoder_init+0x60>
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	f04f 0400 	mov.w	r4, #0
 8018352:	461a      	mov	r2, r3
 8018354:	4623      	mov	r3, r4
 8018356:	480d      	ldr	r0, [pc, #52]	; (801838c <_lv_img_decoder_init+0x6c>)
 8018358:	f003 fc00 	bl	801bb5c <lv_debug_log_error>
 801835c:	e7fe      	b.n	801835c <_lv_img_decoder_init+0x3c>
        return;
    }

    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
 801835e:	490c      	ldr	r1, [pc, #48]	; (8018390 <_lv_img_decoder_init+0x70>)
 8018360:	6878      	ldr	r0, [r7, #4]
 8018362:	f000 f94d 	bl	8018600 <lv_img_decoder_set_info_cb>
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
 8018366:	490b      	ldr	r1, [pc, #44]	; (8018394 <_lv_img_decoder_init+0x74>)
 8018368:	6878      	ldr	r0, [r7, #4]
 801836a:	f000 f957 	bl	801861c <lv_img_decoder_set_open_cb>
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
 801836e:	490a      	ldr	r1, [pc, #40]	; (8018398 <_lv_img_decoder_init+0x78>)
 8018370:	6878      	ldr	r0, [r7, #4]
 8018372:	f000 f961 	bl	8018638 <lv_img_decoder_set_read_line_cb>
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
 8018376:	4909      	ldr	r1, [pc, #36]	; (801839c <_lv_img_decoder_init+0x7c>)
 8018378:	6878      	ldr	r0, [r7, #4]
 801837a:	f000 f96b 	bl	8018654 <lv_img_decoder_set_close_cb>
 801837e:	e000      	b.n	8018382 <_lv_img_decoder_init+0x62>
        return;
 8018380:	bf00      	nop
}
 8018382:	370c      	adds	r7, #12
 8018384:	46bd      	mov	sp, r7
 8018386:	bd90      	pop	{r4, r7, pc}
 8018388:	200217a8 	.word	0x200217a8
 801838c:	0802d810 	.word	0x0802d810
 8018390:	08018671 	.word	0x08018671
 8018394:	0801878d 	.word	0x0801878d
 8018398:	08018b35 	.word	0x08018b35
 801839c:	08018c59 	.word	0x08018c59

080183a0 <lv_img_decoder_get_info>:
 * @param src the image source. E.g. file name or variable.
 * @param header the image info will be stored here
 * @return LV_RES_OK: success; LV_RES_INV: wasn't able to get info about the image
 */
lv_res_t lv_img_decoder_get_info(const char * src, lv_img_header_t * header)
{
 80183a0:	b580      	push	{r7, lr}
 80183a2:	b084      	sub	sp, #16
 80183a4:	af00      	add	r7, sp, #0
 80183a6:	6078      	str	r0, [r7, #4]
 80183a8:	6039      	str	r1, [r7, #0]
    header->always_zero = 0;
 80183aa:	683a      	ldr	r2, [r7, #0]
 80183ac:	7813      	ldrb	r3, [r2, #0]
 80183ae:	f36f 1347 	bfc	r3, #5, #3
 80183b2:	7013      	strb	r3, [r2, #0]
    header->h = 0;
 80183b4:	683a      	ldr	r2, [r7, #0]
 80183b6:	8853      	ldrh	r3, [r2, #2]
 80183b8:	f36f 134f 	bfc	r3, #5, #11
 80183bc:	8053      	strh	r3, [r2, #2]
    header->w = 0;
 80183be:	683a      	ldr	r2, [r7, #0]
 80183c0:	6813      	ldr	r3, [r2, #0]
 80183c2:	f36f 2394 	bfc	r3, #10, #11
 80183c6:	6013      	str	r3, [r2, #0]
    header->cf = LV_IMG_CF_UNKNOWN;
 80183c8:	683a      	ldr	r2, [r7, #0]
 80183ca:	7813      	ldrb	r3, [r2, #0]
 80183cc:	f36f 0304 	bfc	r3, #0, #5
 80183d0:	7013      	strb	r3, [r2, #0]

    lv_res_t res = LV_RES_INV;
 80183d2:	2300      	movs	r3, #0
 80183d4:	73fb      	strb	r3, [r7, #15]
    lv_img_decoder_t * d;
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 80183d6:	4812      	ldr	r0, [pc, #72]	; (8018420 <lv_img_decoder_get_info+0x80>)
 80183d8:	f003 ff66 	bl	801c2a8 <_lv_ll_get_head>
 80183dc:	60b8      	str	r0, [r7, #8]
 80183de:	e015      	b.n	801840c <lv_img_decoder_get_info+0x6c>
        res = LV_RES_INV;
 80183e0:	2300      	movs	r3, #0
 80183e2:	73fb      	strb	r3, [r7, #15]
        if(d->info_cb) {
 80183e4:	68bb      	ldr	r3, [r7, #8]
 80183e6:	681b      	ldr	r3, [r3, #0]
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d00a      	beq.n	8018402 <lv_img_decoder_get_info+0x62>
            res = d->info_cb(d, src, header);
 80183ec:	68bb      	ldr	r3, [r7, #8]
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	683a      	ldr	r2, [r7, #0]
 80183f2:	6879      	ldr	r1, [r7, #4]
 80183f4:	68b8      	ldr	r0, [r7, #8]
 80183f6:	4798      	blx	r3
 80183f8:	4603      	mov	r3, r0
 80183fa:	73fb      	strb	r3, [r7, #15]
            if(res == LV_RES_OK) break;
 80183fc:	7bfb      	ldrb	r3, [r7, #15]
 80183fe:	2b01      	cmp	r3, #1
 8018400:	d008      	beq.n	8018414 <lv_img_decoder_get_info+0x74>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 8018402:	68b9      	ldr	r1, [r7, #8]
 8018404:	4806      	ldr	r0, [pc, #24]	; (8018420 <lv_img_decoder_get_info+0x80>)
 8018406:	f003 ff75 	bl	801c2f4 <_lv_ll_get_next>
 801840a:	60b8      	str	r0, [r7, #8]
 801840c:	68bb      	ldr	r3, [r7, #8]
 801840e:	2b00      	cmp	r3, #0
 8018410:	d1e6      	bne.n	80183e0 <lv_img_decoder_get_info+0x40>
 8018412:	e000      	b.n	8018416 <lv_img_decoder_get_info+0x76>
            if(res == LV_RES_OK) break;
 8018414:	bf00      	nop
        }
    }

    return res;
 8018416:	7bfb      	ldrb	r3, [r7, #15]
}
 8018418:	4618      	mov	r0, r3
 801841a:	3710      	adds	r7, #16
 801841c:	46bd      	mov	sp, r7
 801841e:	bd80      	pop	{r7, pc}
 8018420:	200217a8 	.word	0x200217a8

08018424 <lv_img_decoder_open>:
 * @param color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return LV_RES_OK: opened the image. `dsc->img_data` and `dsc->header` are set.
 *         LV_RES_INV: none of the registered image decoders were able to open the image.
 */
lv_res_t lv_img_decoder_open(lv_img_decoder_dsc_t * dsc, const void * src, lv_color_t color)
{
 8018424:	b580      	push	{r7, lr}
 8018426:	b088      	sub	sp, #32
 8018428:	af00      	add	r7, sp, #0
 801842a:	60f8      	str	r0, [r7, #12]
 801842c:	60b9      	str	r1, [r7, #8]
 801842e:	607a      	str	r2, [r7, #4]
    dsc->color     = color;
 8018430:	68fb      	ldr	r3, [r7, #12]
 8018432:	687a      	ldr	r2, [r7, #4]
 8018434:	609a      	str	r2, [r3, #8]
    dsc->src_type  = lv_img_src_get_type(src);
 8018436:	68b8      	ldr	r0, [r7, #8]
 8018438:	f7f5 ffb0 	bl	800e39c <lv_img_src_get_type>
 801843c:	4603      	mov	r3, r0
 801843e:	461a      	mov	r2, r3
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	731a      	strb	r2, [r3, #12]
    dsc->user_data = NULL;
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	2200      	movs	r2, #0
 8018448:	621a      	str	r2, [r3, #32]

    if(dsc->src_type == LV_IMG_SRC_FILE) {
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	7b1b      	ldrb	r3, [r3, #12]
 801844e:	2b01      	cmp	r3, #1
 8018450:	d112      	bne.n	8018478 <lv_img_decoder_open+0x54>
        size_t fnlen = strlen(src);
 8018452:	68b8      	ldr	r0, [r7, #8]
 8018454:	f7e7 fee2 	bl	800021c <strlen>
 8018458:	6178      	str	r0, [r7, #20]
        dsc->src = lv_mem_alloc(fnlen + 1);
 801845a:	697b      	ldr	r3, [r7, #20]
 801845c:	3301      	adds	r3, #1
 801845e:	4618      	mov	r0, r3
 8018460:	f004 f8f8 	bl	801c654 <lv_mem_alloc>
 8018464:	4602      	mov	r2, r0
 8018466:	68fb      	ldr	r3, [r7, #12]
 8018468:	605a      	str	r2, [r3, #4]
        strcpy((char *)dsc->src, src);
 801846a:	68fb      	ldr	r3, [r7, #12]
 801846c:	685b      	ldr	r3, [r3, #4]
 801846e:	68b9      	ldr	r1, [r7, #8]
 8018470:	4618      	mov	r0, r3
 8018472:	f015 f974 	bl	802d75e <strcpy>
 8018476:	e002      	b.n	801847e <lv_img_decoder_open+0x5a>
    }
    else {
        dsc->src       = src;
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	68ba      	ldr	r2, [r7, #8]
 801847c:	605a      	str	r2, [r3, #4]
    }

    lv_res_t res = LV_RES_INV;
 801847e:	2300      	movs	r3, #0
 8018480:	77fb      	strb	r3, [r7, #31]

    lv_img_decoder_t * d;
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 8018482:	481f      	ldr	r0, [pc, #124]	; (8018500 <lv_img_decoder_open+0xdc>)
 8018484:	f003 ff10 	bl	801c2a8 <_lv_ll_get_head>
 8018488:	61b8      	str	r0, [r7, #24]
 801848a:	e02f      	b.n	80184ec <lv_img_decoder_open+0xc8>
        /*Info an Open callbacks are required*/
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 801848c:	69bb      	ldr	r3, [r7, #24]
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	2b00      	cmp	r3, #0
 8018492:	d023      	beq.n	80184dc <lv_img_decoder_open+0xb8>
 8018494:	69bb      	ldr	r3, [r7, #24]
 8018496:	685b      	ldr	r3, [r3, #4]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d01f      	beq.n	80184dc <lv_img_decoder_open+0xb8>

        res = d->info_cb(d, src, &dsc->header);
 801849c:	69bb      	ldr	r3, [r7, #24]
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	68fa      	ldr	r2, [r7, #12]
 80184a2:	3210      	adds	r2, #16
 80184a4:	68b9      	ldr	r1, [r7, #8]
 80184a6:	69b8      	ldr	r0, [r7, #24]
 80184a8:	4798      	blx	r3
 80184aa:	4603      	mov	r3, r0
 80184ac:	77fb      	strb	r3, [r7, #31]
        if(res != LV_RES_OK) continue;
 80184ae:	7ffb      	ldrb	r3, [r7, #31]
 80184b0:	2b01      	cmp	r3, #1
 80184b2:	d115      	bne.n	80184e0 <lv_img_decoder_open+0xbc>

        dsc->error_msg = NULL;
 80184b4:	68fb      	ldr	r3, [r7, #12]
 80184b6:	2200      	movs	r2, #0
 80184b8:	61da      	str	r2, [r3, #28]
        dsc->img_data  = NULL;
 80184ba:	68fb      	ldr	r3, [r7, #12]
 80184bc:	2200      	movs	r2, #0
 80184be:	615a      	str	r2, [r3, #20]
        dsc->decoder   = d;
 80184c0:	68fb      	ldr	r3, [r7, #12]
 80184c2:	69ba      	ldr	r2, [r7, #24]
 80184c4:	601a      	str	r2, [r3, #0]

        res = d->open_cb(d, dsc);
 80184c6:	69bb      	ldr	r3, [r7, #24]
 80184c8:	685b      	ldr	r3, [r3, #4]
 80184ca:	68f9      	ldr	r1, [r7, #12]
 80184cc:	69b8      	ldr	r0, [r7, #24]
 80184ce:	4798      	blx	r3
 80184d0:	4603      	mov	r3, r0
 80184d2:	77fb      	strb	r3, [r7, #31]

        /*Opened successfully. It is a good decoder to for this image source*/
        if(res == LV_RES_OK) break;
 80184d4:	7ffb      	ldrb	r3, [r7, #31]
 80184d6:	2b01      	cmp	r3, #1
 80184d8:	d00c      	beq.n	80184f4 <lv_img_decoder_open+0xd0>
 80184da:	e002      	b.n	80184e2 <lv_img_decoder_open+0xbe>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
 80184dc:	bf00      	nop
 80184de:	e000      	b.n	80184e2 <lv_img_decoder_open+0xbe>
        if(res != LV_RES_OK) continue;
 80184e0:	bf00      	nop
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
 80184e2:	69b9      	ldr	r1, [r7, #24]
 80184e4:	4806      	ldr	r0, [pc, #24]	; (8018500 <lv_img_decoder_open+0xdc>)
 80184e6:	f003 ff05 	bl	801c2f4 <_lv_ll_get_next>
 80184ea:	61b8      	str	r0, [r7, #24]
 80184ec:	69bb      	ldr	r3, [r7, #24]
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d1cc      	bne.n	801848c <lv_img_decoder_open+0x68>
 80184f2:	e000      	b.n	80184f6 <lv_img_decoder_open+0xd2>
        if(res == LV_RES_OK) break;
 80184f4:	bf00      	nop
    }

    return res;
 80184f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80184f8:	4618      	mov	r0, r3
 80184fa:	3720      	adds	r7, #32
 80184fc:	46bd      	mov	sp, r7
 80184fe:	bd80      	pop	{r7, pc}
 8018500:	200217a8 	.word	0x200217a8

08018504 <lv_img_decoder_read_line>:
 * @param len number of pixels to read
 * @param buf store the data here
 * @return LV_RES_OK: success; LV_RES_INV: an error occurred
 */
lv_res_t lv_img_decoder_read_line(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 8018504:	b590      	push	{r4, r7, lr}
 8018506:	b089      	sub	sp, #36	; 0x24
 8018508:	af02      	add	r7, sp, #8
 801850a:	60f8      	str	r0, [r7, #12]
 801850c:	4608      	mov	r0, r1
 801850e:	4611      	mov	r1, r2
 8018510:	461a      	mov	r2, r3
 8018512:	4603      	mov	r3, r0
 8018514:	817b      	strh	r3, [r7, #10]
 8018516:	460b      	mov	r3, r1
 8018518:	813b      	strh	r3, [r7, #8]
 801851a:	4613      	mov	r3, r2
 801851c:	80fb      	strh	r3, [r7, #6]
    lv_res_t res = LV_RES_INV;
 801851e:	2300      	movs	r3, #0
 8018520:	75fb      	strb	r3, [r7, #23]
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 8018522:	68fb      	ldr	r3, [r7, #12]
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	689b      	ldr	r3, [r3, #8]
 8018528:	2b00      	cmp	r3, #0
 801852a:	d012      	beq.n	8018552 <lv_img_decoder_read_line+0x4e>
 801852c:	68fb      	ldr	r3, [r7, #12]
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	689c      	ldr	r4, [r3, #8]
 8018532:	68fb      	ldr	r3, [r7, #12]
 8018534:	6818      	ldr	r0, [r3, #0]
 8018536:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 801853a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801853e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018540:	9301      	str	r3, [sp, #4]
 8018542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018546:	9300      	str	r3, [sp, #0]
 8018548:	460b      	mov	r3, r1
 801854a:	68f9      	ldr	r1, [r7, #12]
 801854c:	47a0      	blx	r4
 801854e:	4603      	mov	r3, r0
 8018550:	75fb      	strb	r3, [r7, #23]

    return res;
 8018552:	7dfb      	ldrb	r3, [r7, #23]
}
 8018554:	4618      	mov	r0, r3
 8018556:	371c      	adds	r7, #28
 8018558:	46bd      	mov	sp, r7
 801855a:	bd90      	pop	{r4, r7, pc}

0801855c <lv_img_decoder_close>:
/**
 * Close a decoding session
 * @param dsc pointer to `lv_img_decoder_dsc_t` used in `lv_img_decoder_open`
 */
void lv_img_decoder_close(lv_img_decoder_dsc_t * dsc)
{
 801855c:	b580      	push	{r7, lr}
 801855e:	b082      	sub	sp, #8
 8018560:	af00      	add	r7, sp, #0
 8018562:	6078      	str	r0, [r7, #4]
    if(dsc->decoder) {
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	2b00      	cmp	r3, #0
 801856a:	d018      	beq.n	801859e <lv_img_decoder_close+0x42>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	68db      	ldr	r3, [r3, #12]
 8018572:	2b00      	cmp	r3, #0
 8018574:	d007      	beq.n	8018586 <lv_img_decoder_close+0x2a>
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	68db      	ldr	r3, [r3, #12]
 801857c:	687a      	ldr	r2, [r7, #4]
 801857e:	6812      	ldr	r2, [r2, #0]
 8018580:	6879      	ldr	r1, [r7, #4]
 8018582:	4610      	mov	r0, r2
 8018584:	4798      	blx	r3

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	7b1b      	ldrb	r3, [r3, #12]
 801858a:	2b01      	cmp	r3, #1
 801858c:	d107      	bne.n	801859e <lv_img_decoder_close+0x42>
            lv_mem_free(dsc->src);
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	685b      	ldr	r3, [r3, #4]
 8018592:	4618      	mov	r0, r3
 8018594:	f004 f8a8 	bl	801c6e8 <lv_mem_free>
            dsc->src = NULL;
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	2200      	movs	r2, #0
 801859c:	605a      	str	r2, [r3, #4]
        }
    }
}
 801859e:	bf00      	nop
 80185a0:	3708      	adds	r7, #8
 80185a2:	46bd      	mov	sp, r7
 80185a4:	bd80      	pop	{r7, pc}
	...

080185a8 <lv_img_decoder_create>:
/**
 * Create a new image decoder
 * @return pointer to the new image decoder
 */
lv_img_decoder_t * lv_img_decoder_create(void)
{
 80185a8:	b590      	push	{r4, r7, lr}
 80185aa:	b083      	sub	sp, #12
 80185ac:	af00      	add	r7, sp, #0
    lv_img_decoder_t * decoder;
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 80185ae:	4812      	ldr	r0, [pc, #72]	; (80185f8 <lv_img_decoder_create+0x50>)
 80185b0:	f003 fd1d 	bl	801bfee <_lv_ll_ins_head>
 80185b4:	6078      	str	r0, [r7, #4]
    LV_ASSERT_MEM(decoder);
 80185b6:	6878      	ldr	r0, [r7, #4]
 80185b8:	f003 fac0 	bl	801bb3c <lv_debug_check_null>
 80185bc:	4603      	mov	r3, r0
 80185be:	f083 0301 	eor.w	r3, r3, #1
 80185c2:	b2db      	uxtb	r3, r3
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d008      	beq.n	80185da <lv_img_decoder_create+0x32>
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	f04f 0400 	mov.w	r4, #0
 80185ce:	461a      	mov	r2, r3
 80185d0:	4623      	mov	r3, r4
 80185d2:	480a      	ldr	r0, [pc, #40]	; (80185fc <lv_img_decoder_create+0x54>)
 80185d4:	f003 fac2 	bl	801bb5c <lv_debug_log_error>
 80185d8:	e7fe      	b.n	80185d8 <lv_img_decoder_create+0x30>
    if(decoder == NULL) return NULL;
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d101      	bne.n	80185e4 <lv_img_decoder_create+0x3c>
 80185e0:	2300      	movs	r3, #0
 80185e2:	e004      	b.n	80185ee <lv_img_decoder_create+0x46>

    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 80185e4:	2110      	movs	r1, #16
 80185e6:	6878      	ldr	r0, [r7, #4]
 80185e8:	f004 fd9f 	bl	801d12a <_lv_memset_00>

    return decoder;
 80185ec:	687b      	ldr	r3, [r7, #4]
}
 80185ee:	4618      	mov	r0, r3
 80185f0:	370c      	adds	r7, #12
 80185f2:	46bd      	mov	sp, r7
 80185f4:	bd90      	pop	{r4, r7, pc}
 80185f6:	bf00      	nop
 80185f8:	200217a8 	.word	0x200217a8
 80185fc:	0802d810 	.word	0x0802d810

08018600 <lv_img_decoder_set_info_cb>:
 * Set a callback to get information about the image
 * @param decoder pointer to an image decoder
 * @param info_cb a function to collect info about an image (fill an `lv_img_header_t` struct)
 */
void lv_img_decoder_set_info_cb(lv_img_decoder_t * decoder, lv_img_decoder_info_f_t info_cb)
{
 8018600:	b480      	push	{r7}
 8018602:	b083      	sub	sp, #12
 8018604:	af00      	add	r7, sp, #0
 8018606:	6078      	str	r0, [r7, #4]
 8018608:	6039      	str	r1, [r7, #0]
    decoder->info_cb = info_cb;
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	683a      	ldr	r2, [r7, #0]
 801860e:	601a      	str	r2, [r3, #0]
}
 8018610:	bf00      	nop
 8018612:	370c      	adds	r7, #12
 8018614:	46bd      	mov	sp, r7
 8018616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801861a:	4770      	bx	lr

0801861c <lv_img_decoder_set_open_cb>:
 * Set a callback to open an image
 * @param decoder pointer to an image decoder
 * @param open_cb a function to open an image
 */
void lv_img_decoder_set_open_cb(lv_img_decoder_t * decoder, lv_img_decoder_open_f_t open_cb)
{
 801861c:	b480      	push	{r7}
 801861e:	b083      	sub	sp, #12
 8018620:	af00      	add	r7, sp, #0
 8018622:	6078      	str	r0, [r7, #4]
 8018624:	6039      	str	r1, [r7, #0]
    decoder->open_cb = open_cb;
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	683a      	ldr	r2, [r7, #0]
 801862a:	605a      	str	r2, [r3, #4]
}
 801862c:	bf00      	nop
 801862e:	370c      	adds	r7, #12
 8018630:	46bd      	mov	sp, r7
 8018632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018636:	4770      	bx	lr

08018638 <lv_img_decoder_set_read_line_cb>:
 * Set a callback to a decoded line of an image
 * @param decoder pointer to an image decoder
 * @param read_line_cb a function to read a line of an image
 */
void lv_img_decoder_set_read_line_cb(lv_img_decoder_t * decoder, lv_img_decoder_read_line_f_t read_line_cb)
{
 8018638:	b480      	push	{r7}
 801863a:	b083      	sub	sp, #12
 801863c:	af00      	add	r7, sp, #0
 801863e:	6078      	str	r0, [r7, #4]
 8018640:	6039      	str	r1, [r7, #0]
    decoder->read_line_cb = read_line_cb;
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	683a      	ldr	r2, [r7, #0]
 8018646:	609a      	str	r2, [r3, #8]
}
 8018648:	bf00      	nop
 801864a:	370c      	adds	r7, #12
 801864c:	46bd      	mov	sp, r7
 801864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018652:	4770      	bx	lr

08018654 <lv_img_decoder_set_close_cb>:
 * Set a callback to close a decoding session. E.g. close files and free other resources.
 * @param decoder pointer to an image decoder
 * @param close_cb a function to close a decoding session
 */
void lv_img_decoder_set_close_cb(lv_img_decoder_t * decoder, lv_img_decoder_close_f_t close_cb)
{
 8018654:	b480      	push	{r7}
 8018656:	b083      	sub	sp, #12
 8018658:	af00      	add	r7, sp, #0
 801865a:	6078      	str	r0, [r7, #4]
 801865c:	6039      	str	r1, [r7, #0]
    decoder->close_cb = close_cb;
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	683a      	ldr	r2, [r7, #0]
 8018662:	60da      	str	r2, [r3, #12]
}
 8018664:	bf00      	nop
 8018666:	370c      	adds	r7, #12
 8018668:	46bd      	mov	sp, r7
 801866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801866e:	4770      	bx	lr

08018670 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
 8018670:	b580      	push	{r7, lr}
 8018672:	b088      	sub	sp, #32
 8018674:	af00      	add	r7, sp, #0
 8018676:	60f8      	str	r0, [r7, #12]
 8018678:	60b9      	str	r1, [r7, #8]
 801867a:	607a      	str	r2, [r7, #4]
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
 801867c:	68b8      	ldr	r0, [r7, #8]
 801867e:	f7f5 fe8d 	bl	800e39c <lv_img_src_get_type>
 8018682:	4603      	mov	r3, r0
 8018684:	77fb      	strb	r3, [r7, #31]
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8018686:	7ffb      	ldrb	r3, [r7, #31]
 8018688:	2b00      	cmp	r3, #0
 801868a:	d12c      	bne.n	80186e6 <lv_img_decoder_built_in_info+0x76>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 801868c:	68bb      	ldr	r3, [r7, #8]
 801868e:	781b      	ldrb	r3, [r3, #0]
 8018690:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8018694:	b2db      	uxtb	r3, r3
 8018696:	777b      	strb	r3, [r7, #29]
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8018698:	7f7b      	ldrb	r3, [r7, #29]
 801869a:	2b03      	cmp	r3, #3
 801869c:	d902      	bls.n	80186a4 <lv_img_decoder_built_in_info+0x34>
 801869e:	7f7b      	ldrb	r3, [r7, #29]
 80186a0:	2b0e      	cmp	r3, #14
 80186a2:	d901      	bls.n	80186a8 <lv_img_decoder_built_in_info+0x38>
 80186a4:	2300      	movs	r3, #0
 80186a6:	e06d      	b.n	8018784 <lv_img_decoder_built_in_info+0x114>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
 80186a8:	68bb      	ldr	r3, [r7, #8]
 80186aa:	681b      	ldr	r3, [r3, #0]
 80186ac:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80186b0:	b299      	uxth	r1, r3
 80186b2:	687a      	ldr	r2, [r7, #4]
 80186b4:	6813      	ldr	r3, [r2, #0]
 80186b6:	f361 2394 	bfi	r3, r1, #10, #11
 80186ba:	6013      	str	r3, [r2, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 80186bc:	68bb      	ldr	r3, [r7, #8]
 80186be:	885b      	ldrh	r3, [r3, #2]
 80186c0:	f3c3 134a 	ubfx	r3, r3, #5, #11
 80186c4:	b299      	uxth	r1, r3
 80186c6:	687a      	ldr	r2, [r7, #4]
 80186c8:	8853      	ldrh	r3, [r2, #2]
 80186ca:	f361 134f 	bfi	r3, r1, #5, #11
 80186ce:	8053      	strh	r3, [r2, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 80186d0:	68bb      	ldr	r3, [r7, #8]
 80186d2:	781b      	ldrb	r3, [r3, #0]
 80186d4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80186d8:	b2d9      	uxtb	r1, r3
 80186da:	687a      	ldr	r2, [r7, #4]
 80186dc:	7813      	ldrb	r3, [r2, #0]
 80186de:	f361 0304 	bfi	r3, r1, #0, #5
 80186e2:	7013      	strb	r3, [r2, #0]
 80186e4:	e04d      	b.n	8018782 <lv_img_decoder_built_in_info+0x112>
    }
#if LV_USE_FILESYSTEM
    else if(src_type == LV_IMG_SRC_FILE) {
 80186e6:	7ffb      	ldrb	r3, [r7, #31]
 80186e8:	2b01      	cmp	r3, #1
 80186ea:	d132      	bne.n	8018752 <lv_img_decoder_built_in_info+0xe2>
        lv_fs_file_t file;
        lv_fs_res_t res;
        uint32_t rn;
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 80186ec:	f107 0314 	add.w	r3, r7, #20
 80186f0:	2202      	movs	r2, #2
 80186f2:	68b9      	ldr	r1, [r7, #8]
 80186f4:	4618      	mov	r0, r3
 80186f6:	f003 facb 	bl	801bc90 <lv_fs_open>
 80186fa:	4603      	mov	r3, r0
 80186fc:	77bb      	strb	r3, [r7, #30]
        if(res == LV_FS_RES_OK) {
 80186fe:	7fbb      	ldrb	r3, [r7, #30]
 8018700:	2b00      	cmp	r3, #0
 8018702:	d116      	bne.n	8018732 <lv_img_decoder_built_in_info+0xc2>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 8018704:	f107 0310 	add.w	r3, r7, #16
 8018708:	f107 0014 	add.w	r0, r7, #20
 801870c:	2204      	movs	r2, #4
 801870e:	6879      	ldr	r1, [r7, #4]
 8018710:	f003 fb8a 	bl	801be28 <lv_fs_read>
 8018714:	4603      	mov	r3, r0
 8018716:	77bb      	strb	r3, [r7, #30]
            lv_fs_close(&file);
 8018718:	f107 0314 	add.w	r3, r7, #20
 801871c:	4618      	mov	r0, r3
 801871e:	f003 fb57 	bl	801bdd0 <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 8018722:	7fbb      	ldrb	r3, [r7, #30]
 8018724:	2b00      	cmp	r3, #0
 8018726:	d102      	bne.n	801872e <lv_img_decoder_built_in_info+0xbe>
 8018728:	693b      	ldr	r3, [r7, #16]
 801872a:	2b04      	cmp	r3, #4
 801872c:	d001      	beq.n	8018732 <lv_img_decoder_built_in_info+0xc2>
                LV_LOG_WARN("Image get info get read file header");
                return LV_RES_INV;
 801872e:	2300      	movs	r3, #0
 8018730:	e028      	b.n	8018784 <lv_img_decoder_built_in_info+0x114>
            }
        }

        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	781b      	ldrb	r3, [r3, #0]
 8018736:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801873a:	b2db      	uxtb	r3, r3
 801873c:	2b03      	cmp	r3, #3
 801873e:	d906      	bls.n	801874e <lv_img_decoder_built_in_info+0xde>
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	781b      	ldrb	r3, [r3, #0]
 8018744:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8018748:	b2db      	uxtb	r3, r3
 801874a:	2b0e      	cmp	r3, #14
 801874c:	d919      	bls.n	8018782 <lv_img_decoder_built_in_info+0x112>
 801874e:	2300      	movs	r3, #0
 8018750:	e018      	b.n	8018784 <lv_img_decoder_built_in_info+0x114>

    }
#endif
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 8018752:	7ffb      	ldrb	r3, [r7, #31]
 8018754:	2b02      	cmp	r3, #2
 8018756:	d112      	bne.n	801877e <lv_img_decoder_built_in_info+0x10e>
        /*The size depend on the font but it is unknown here. It should be handled outside of the
         * function*/
        header->w = 1;
 8018758:	687a      	ldr	r2, [r7, #4]
 801875a:	6813      	ldr	r3, [r2, #0]
 801875c:	2101      	movs	r1, #1
 801875e:	f361 2394 	bfi	r3, r1, #10, #11
 8018762:	6013      	str	r3, [r2, #0]
        header->h = 1;
 8018764:	687a      	ldr	r2, [r7, #4]
 8018766:	8853      	ldrh	r3, [r2, #2]
 8018768:	2101      	movs	r1, #1
 801876a:	f361 134f 	bfi	r3, r1, #5, #11
 801876e:	8053      	strh	r3, [r2, #2]
        /* Symbols always have transparent parts. Important because of cover check in the design
         * function. The actual value doesn't matter because lv_draw_label will draw it*/
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 8018770:	687a      	ldr	r2, [r7, #4]
 8018772:	7813      	ldrb	r3, [r2, #0]
 8018774:	210b      	movs	r1, #11
 8018776:	f361 0304 	bfi	r3, r1, #0, #5
 801877a:	7013      	strb	r3, [r2, #0]
 801877c:	e001      	b.n	8018782 <lv_img_decoder_built_in_info+0x112>
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
 801877e:	2300      	movs	r3, #0
 8018780:	e000      	b.n	8018784 <lv_img_decoder_built_in_info+0x114>
    }
    return LV_RES_OK;
 8018782:	2301      	movs	r3, #1
}
 8018784:	4618      	mov	r0, r3
 8018786:	3720      	adds	r7, #32
 8018788:	46bd      	mov	sp, r7
 801878a:	bd80      	pop	{r7, pc}

0801878c <lv_img_decoder_built_in_open>:
 * @param decoder the decoder where this function belongs
 * @param dsc pointer to decoder descriptor. `src`, `style` are already initialized in it.
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_open(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 801878c:	b5b0      	push	{r4, r5, r7, lr}
 801878e:	b08e      	sub	sp, #56	; 0x38
 8018790:	af00      	add	r7, sp, #0
 8018792:	6078      	str	r0, [r7, #4]
 8018794:	6039      	str	r1, [r7, #0]
    /*Open the file if it's a file*/
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8018796:	683b      	ldr	r3, [r7, #0]
 8018798:	7b1b      	ldrb	r3, [r3, #12]
 801879a:	2b01      	cmp	r3, #1
 801879c:	d17b      	bne.n	8018896 <lv_img_decoder_built_in_open+0x10a>
#if LV_USE_FILESYSTEM

        /*Support only "*.bin" files*/
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 801879e:	683b      	ldr	r3, [r7, #0]
 80187a0:	685b      	ldr	r3, [r3, #4]
 80187a2:	4618      	mov	r0, r3
 80187a4:	f003 fbb8 	bl	801bf18 <lv_fs_get_ext>
 80187a8:	4603      	mov	r3, r0
 80187aa:	49a4      	ldr	r1, [pc, #656]	; (8018a3c <lv_img_decoder_built_in_open+0x2b0>)
 80187ac:	4618      	mov	r0, r3
 80187ae:	f7e7 fd2b 	bl	8000208 <strcmp>
 80187b2:	4603      	mov	r3, r0
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d001      	beq.n	80187bc <lv_img_decoder_built_in_open+0x30>
 80187b8:	2300      	movs	r3, #0
 80187ba:	e1b6      	b.n	8018b2a <lv_img_decoder_built_in_open+0x39e>

        lv_fs_file_t f;
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 80187bc:	683b      	ldr	r3, [r7, #0]
 80187be:	6859      	ldr	r1, [r3, #4]
 80187c0:	f107 0310 	add.w	r3, r7, #16
 80187c4:	2202      	movs	r2, #2
 80187c6:	4618      	mov	r0, r3
 80187c8:	f003 fa62 	bl	801bc90 <lv_fs_open>
 80187cc:	4603      	mov	r3, r0
 80187ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(res != LV_FS_RES_OK) {
 80187d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d001      	beq.n	80187de <lv_img_decoder_built_in_open+0x52>
            LV_LOG_WARN("Built-in image decoder can't open the file");
            return LV_RES_INV;
 80187da:	2300      	movs	r3, #0
 80187dc:	e1a5      	b.n	8018b2a <lv_img_decoder_built_in_open+0x39e>
        }

        /*If the file was open successfully save the file descriptor*/
        if(dsc->user_data == NULL) {
 80187de:	683b      	ldr	r3, [r7, #0]
 80187e0:	6a1b      	ldr	r3, [r3, #32]
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d126      	bne.n	8018834 <lv_img_decoder_built_in_open+0xa8>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 80187e6:	200c      	movs	r0, #12
 80187e8:	f003 ff34 	bl	801c654 <lv_mem_alloc>
 80187ec:	4602      	mov	r2, r0
 80187ee:	683b      	ldr	r3, [r7, #0]
 80187f0:	621a      	str	r2, [r3, #32]
            LV_ASSERT_MEM(dsc->user_data);
 80187f2:	683b      	ldr	r3, [r7, #0]
 80187f4:	6a1b      	ldr	r3, [r3, #32]
 80187f6:	4618      	mov	r0, r3
 80187f8:	f003 f9a0 	bl	801bb3c <lv_debug_check_null>
 80187fc:	4603      	mov	r3, r0
 80187fe:	f083 0301 	eor.w	r3, r3, #1
 8018802:	b2db      	uxtb	r3, r3
 8018804:	2b00      	cmp	r3, #0
 8018806:	d009      	beq.n	801881c <lv_img_decoder_built_in_open+0x90>
 8018808:	683b      	ldr	r3, [r7, #0]
 801880a:	6a1b      	ldr	r3, [r3, #32]
 801880c:	f04f 0400 	mov.w	r4, #0
 8018810:	461a      	mov	r2, r3
 8018812:	4623      	mov	r3, r4
 8018814:	488a      	ldr	r0, [pc, #552]	; (8018a40 <lv_img_decoder_built_in_open+0x2b4>)
 8018816:	f003 f9a1 	bl	801bb5c <lv_debug_log_error>
 801881a:	e7fe      	b.n	801881a <lv_img_decoder_built_in_open+0x8e>
            if(dsc->user_data == NULL) {
 801881c:	683b      	ldr	r3, [r7, #0]
 801881e:	6a1b      	ldr	r3, [r3, #32]
 8018820:	2b00      	cmp	r3, #0
 8018822:	d101      	bne.n	8018828 <lv_img_decoder_built_in_open+0x9c>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                return LV_RES_INV;
 8018824:	2300      	movs	r3, #0
 8018826:	e180      	b.n	8018b2a <lv_img_decoder_built_in_open+0x39e>
            }
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 8018828:	683b      	ldr	r3, [r7, #0]
 801882a:	6a1b      	ldr	r3, [r3, #32]
 801882c:	210c      	movs	r1, #12
 801882e:	4618      	mov	r0, r3
 8018830:	f004 fc7b 	bl	801d12a <_lv_memset_00>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8018834:	683b      	ldr	r3, [r7, #0]
 8018836:	6a1b      	ldr	r3, [r3, #32]
 8018838:	62bb      	str	r3, [r7, #40]	; 0x28
        user_data->f = lv_mem_alloc(sizeof(f));
 801883a:	2008      	movs	r0, #8
 801883c:	f003 ff0a 	bl	801c654 <lv_mem_alloc>
 8018840:	4602      	mov	r2, r0
 8018842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018844:	601a      	str	r2, [r3, #0]
        LV_ASSERT_MEM(user_data->f);
 8018846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	4618      	mov	r0, r3
 801884c:	f003 f976 	bl	801bb3c <lv_debug_check_null>
 8018850:	4603      	mov	r3, r0
 8018852:	f083 0301 	eor.w	r3, r3, #1
 8018856:	b2db      	uxtb	r3, r3
 8018858:	2b00      	cmp	r3, #0
 801885a:	d009      	beq.n	8018870 <lv_img_decoder_built_in_open+0xe4>
 801885c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	f04f 0400 	mov.w	r4, #0
 8018864:	461a      	mov	r2, r3
 8018866:	4623      	mov	r3, r4
 8018868:	4875      	ldr	r0, [pc, #468]	; (8018a40 <lv_img_decoder_built_in_open+0x2b4>)
 801886a:	f003 f977 	bl	801bb5c <lv_debug_log_error>
 801886e:	e7fe      	b.n	801886e <lv_img_decoder_built_in_open+0xe2>
        if(user_data->f == NULL) {
 8018870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	2b00      	cmp	r3, #0
 8018876:	d105      	bne.n	8018884 <lv_img_decoder_built_in_open+0xf8>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
            lv_img_decoder_built_in_close(decoder, dsc);
 8018878:	6839      	ldr	r1, [r7, #0]
 801887a:	6878      	ldr	r0, [r7, #4]
 801887c:	f000 f9ec 	bl	8018c58 <lv_img_decoder_built_in_close>
            return LV_RES_INV;
 8018880:	2300      	movs	r3, #0
 8018882:	e152      	b.n	8018b2a <lv_img_decoder_built_in_open+0x39e>
        }

        _lv_memcpy_small(user_data->f, &f, sizeof(f));
 8018884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	f107 0110 	add.w	r1, r7, #16
 801888c:	2208      	movs	r2, #8
 801888e:	4618      	mov	r0, r3
 8018890:	f7ff fd24 	bl	80182dc <_lv_memcpy_small>
 8018894:	e00a      	b.n	80188ac <lv_img_decoder_built_in_open+0x120>
#else
        LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
        return LV_RES_INV;
#endif
    }
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8018896:	683b      	ldr	r3, [r7, #0]
 8018898:	7b1b      	ldrb	r3, [r3, #12]
 801889a:	2b00      	cmp	r3, #0
 801889c:	d106      	bne.n	80188ac <lv_img_decoder_built_in_open+0x120>
        /*The variables should have valid data*/
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 801889e:	683b      	ldr	r3, [r7, #0]
 80188a0:	685b      	ldr	r3, [r3, #4]
 80188a2:	689b      	ldr	r3, [r3, #8]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d101      	bne.n	80188ac <lv_img_decoder_built_in_open+0x120>
            return LV_RES_INV;
 80188a8:	2300      	movs	r3, #0
 80188aa:	e13e      	b.n	8018b2a <lv_img_decoder_built_in_open+0x39e>
        }
    }

    lv_img_cf_t cf = dsc->header.cf;
 80188ac:	683b      	ldr	r3, [r7, #0]
 80188ae:	7c1b      	ldrb	r3, [r3, #16]
 80188b0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80188b4:	b2db      	uxtb	r3, r3
 80188b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /*Process true color formats*/
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 80188ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80188be:	2b04      	cmp	r3, #4
 80188c0:	d007      	beq.n	80188d2 <lv_img_decoder_built_in_open+0x146>
 80188c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80188c6:	2b05      	cmp	r3, #5
 80188c8:	d003      	beq.n	80188d2 <lv_img_decoder_built_in_open+0x146>
 80188ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80188ce:	2b06      	cmp	r3, #6
 80188d0:	d10f      	bne.n	80188f2 <lv_img_decoder_built_in_open+0x166>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80188d2:	683b      	ldr	r3, [r7, #0]
 80188d4:	7b1b      	ldrb	r3, [r3, #12]
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	d106      	bne.n	80188e8 <lv_img_decoder_built_in_open+0x15c>
            /* In case of uncompressed formats the image stored in the ROM/RAM.
             * So simply give its pointer*/
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 80188da:	683b      	ldr	r3, [r7, #0]
 80188dc:	685b      	ldr	r3, [r3, #4]
 80188de:	689a      	ldr	r2, [r3, #8]
 80188e0:	683b      	ldr	r3, [r7, #0]
 80188e2:	615a      	str	r2, [r3, #20]
            return LV_RES_OK;
 80188e4:	2301      	movs	r3, #1
 80188e6:	e120      	b.n	8018b2a <lv_img_decoder_built_in_open+0x39e>
        }
        else {
            /*If it's a file it need to be read line by line later*/
            dsc->img_data = NULL;
 80188e8:	683b      	ldr	r3, [r7, #0]
 80188ea:	2200      	movs	r2, #0
 80188ec:	615a      	str	r2, [r3, #20]
            return LV_RES_OK;
 80188ee:	2301      	movs	r3, #1
 80188f0:	e11b      	b.n	8018b2a <lv_img_decoder_built_in_open+0x39e>
        }
    }
    /*Process indexed images. Build a palette*/
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 80188f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80188f6:	2b07      	cmp	r3, #7
 80188f8:	d00c      	beq.n	8018914 <lv_img_decoder_built_in_open+0x188>
 80188fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80188fe:	2b08      	cmp	r3, #8
 8018900:	d008      	beq.n	8018914 <lv_img_decoder_built_in_open+0x188>
 8018902:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018906:	2b09      	cmp	r3, #9
 8018908:	d004      	beq.n	8018914 <lv_img_decoder_built_in_open+0x188>
 801890a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801890e:	2b0a      	cmp	r3, #10
 8018910:	f040 80f1 	bne.w	8018af6 <lv_img_decoder_built_in_open+0x36a>
            cf == LV_IMG_CF_INDEXED_8BIT) {

#if LV_IMG_CF_INDEXED
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 8018914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018918:	4618      	mov	r0, r3
 801891a:	f7f5 fca1 	bl	800e260 <lv_img_cf_get_px_size>
 801891e:	4603      	mov	r3, r0
 8018920:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        uint32_t palette_size = 1 << px_size;
 8018924:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018928:	2201      	movs	r2, #1
 801892a:	fa02 f303 	lsl.w	r3, r2, r3
 801892e:	623b      	str	r3, [r7, #32]

        /*Allocate the palette*/
        if(dsc->user_data == NULL) {
 8018930:	683b      	ldr	r3, [r7, #0]
 8018932:	6a1b      	ldr	r3, [r3, #32]
 8018934:	2b00      	cmp	r3, #0
 8018936:	d12a      	bne.n	801898e <lv_img_decoder_built_in_open+0x202>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8018938:	200c      	movs	r0, #12
 801893a:	f003 fe8b 	bl	801c654 <lv_mem_alloc>
 801893e:	4602      	mov	r2, r0
 8018940:	683b      	ldr	r3, [r7, #0]
 8018942:	621a      	str	r2, [r3, #32]
            LV_ASSERT_MEM(dsc->user_data);
 8018944:	683b      	ldr	r3, [r7, #0]
 8018946:	6a1b      	ldr	r3, [r3, #32]
 8018948:	4618      	mov	r0, r3
 801894a:	f003 f8f7 	bl	801bb3c <lv_debug_check_null>
 801894e:	4603      	mov	r3, r0
 8018950:	f083 0301 	eor.w	r3, r3, #1
 8018954:	b2db      	uxtb	r3, r3
 8018956:	2b00      	cmp	r3, #0
 8018958:	d009      	beq.n	801896e <lv_img_decoder_built_in_open+0x1e2>
 801895a:	683b      	ldr	r3, [r7, #0]
 801895c:	6a1b      	ldr	r3, [r3, #32]
 801895e:	f04f 0400 	mov.w	r4, #0
 8018962:	461a      	mov	r2, r3
 8018964:	4623      	mov	r3, r4
 8018966:	4836      	ldr	r0, [pc, #216]	; (8018a40 <lv_img_decoder_built_in_open+0x2b4>)
 8018968:	f003 f8f8 	bl	801bb5c <lv_debug_log_error>
 801896c:	e7fe      	b.n	801896c <lv_img_decoder_built_in_open+0x1e0>
            if(dsc->user_data == NULL) {
 801896e:	683b      	ldr	r3, [r7, #0]
 8018970:	6a1b      	ldr	r3, [r3, #32]
 8018972:	2b00      	cmp	r3, #0
 8018974:	d105      	bne.n	8018982 <lv_img_decoder_built_in_open+0x1f6>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                lv_img_decoder_built_in_close(decoder, dsc);
 8018976:	6839      	ldr	r1, [r7, #0]
 8018978:	6878      	ldr	r0, [r7, #4]
 801897a:	f000 f96d 	bl	8018c58 <lv_img_decoder_built_in_close>
                return LV_RES_INV;
 801897e:	2300      	movs	r3, #0
 8018980:	e0d3      	b.n	8018b2a <lv_img_decoder_built_in_open+0x39e>
            }
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 8018982:	683b      	ldr	r3, [r7, #0]
 8018984:	6a1b      	ldr	r3, [r3, #32]
 8018986:	210c      	movs	r1, #12
 8018988:	4618      	mov	r0, r3
 801898a:	f004 fbce 	bl	801d12a <_lv_memset_00>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 801898e:	683b      	ldr	r3, [r7, #0]
 8018990:	6a1b      	ldr	r3, [r3, #32]
 8018992:	61fb      	str	r3, [r7, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 8018994:	6a3b      	ldr	r3, [r7, #32]
 8018996:	009b      	lsls	r3, r3, #2
 8018998:	4618      	mov	r0, r3
 801899a:	f003 fe5b 	bl	801c654 <lv_mem_alloc>
 801899e:	4602      	mov	r2, r0
 80189a0:	69fb      	ldr	r3, [r7, #28]
 80189a2:	605a      	str	r2, [r3, #4]
        LV_ASSERT_MEM(user_data->palette);
 80189a4:	69fb      	ldr	r3, [r7, #28]
 80189a6:	685b      	ldr	r3, [r3, #4]
 80189a8:	4618      	mov	r0, r3
 80189aa:	f003 f8c7 	bl	801bb3c <lv_debug_check_null>
 80189ae:	4603      	mov	r3, r0
 80189b0:	f083 0301 	eor.w	r3, r3, #1
 80189b4:	b2db      	uxtb	r3, r3
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d009      	beq.n	80189ce <lv_img_decoder_built_in_open+0x242>
 80189ba:	69fb      	ldr	r3, [r7, #28]
 80189bc:	685b      	ldr	r3, [r3, #4]
 80189be:	f04f 0400 	mov.w	r4, #0
 80189c2:	461a      	mov	r2, r3
 80189c4:	4623      	mov	r3, r4
 80189c6:	481e      	ldr	r0, [pc, #120]	; (8018a40 <lv_img_decoder_built_in_open+0x2b4>)
 80189c8:	f003 f8c8 	bl	801bb5c <lv_debug_log_error>
 80189cc:	e7fe      	b.n	80189cc <lv_img_decoder_built_in_open+0x240>
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 80189ce:	6a38      	ldr	r0, [r7, #32]
 80189d0:	f003 fe40 	bl	801c654 <lv_mem_alloc>
 80189d4:	4602      	mov	r2, r0
 80189d6:	69fb      	ldr	r3, [r7, #28]
 80189d8:	609a      	str	r2, [r3, #8]
        LV_ASSERT_MEM(user_data->opa);
 80189da:	69fb      	ldr	r3, [r7, #28]
 80189dc:	689b      	ldr	r3, [r3, #8]
 80189de:	4618      	mov	r0, r3
 80189e0:	f003 f8ac 	bl	801bb3c <lv_debug_check_null>
 80189e4:	4603      	mov	r3, r0
 80189e6:	f083 0301 	eor.w	r3, r3, #1
 80189ea:	b2db      	uxtb	r3, r3
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d009      	beq.n	8018a04 <lv_img_decoder_built_in_open+0x278>
 80189f0:	69fb      	ldr	r3, [r7, #28]
 80189f2:	689b      	ldr	r3, [r3, #8]
 80189f4:	f04f 0400 	mov.w	r4, #0
 80189f8:	461a      	mov	r2, r3
 80189fa:	4623      	mov	r3, r4
 80189fc:	4810      	ldr	r0, [pc, #64]	; (8018a40 <lv_img_decoder_built_in_open+0x2b4>)
 80189fe:	f003 f8ad 	bl	801bb5c <lv_debug_log_error>
 8018a02:	e7fe      	b.n	8018a02 <lv_img_decoder_built_in_open+0x276>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 8018a04:	69fb      	ldr	r3, [r7, #28]
 8018a06:	685b      	ldr	r3, [r3, #4]
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d003      	beq.n	8018a14 <lv_img_decoder_built_in_open+0x288>
 8018a0c:	69fb      	ldr	r3, [r7, #28]
 8018a0e:	689b      	ldr	r3, [r3, #8]
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d105      	bne.n	8018a20 <lv_img_decoder_built_in_open+0x294>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
            lv_img_decoder_built_in_close(decoder, dsc);
 8018a14:	6839      	ldr	r1, [r7, #0]
 8018a16:	6878      	ldr	r0, [r7, #4]
 8018a18:	f000 f91e 	bl	8018c58 <lv_img_decoder_built_in_close>
            return LV_RES_INV;
 8018a1c:	2300      	movs	r3, #0
 8018a1e:	e084      	b.n	8018b2a <lv_img_decoder_built_in_open+0x39e>
        }

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8018a20:	683b      	ldr	r3, [r7, #0]
 8018a22:	7b1b      	ldrb	r3, [r3, #12]
 8018a24:	2b01      	cmp	r3, #1
 8018a26:	d130      	bne.n	8018a8a <lv_img_decoder_built_in_open+0x2fe>
            /*Read the palette from file*/
#if LV_USE_FILESYSTEM
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
 8018a28:	69fb      	ldr	r3, [r7, #28]
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	2104      	movs	r1, #4
 8018a2e:	4618      	mov	r0, r3
 8018a30:	f003 fa30 	bl	801be94 <lv_fs_seek>
            lv_color32_t cur_color;
            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 8018a34:	2300      	movs	r3, #0
 8018a36:	637b      	str	r3, [r7, #52]	; 0x34
 8018a38:	e022      	b.n	8018a80 <lv_img_decoder_built_in_open+0x2f4>
 8018a3a:	bf00      	nop
 8018a3c:	0802d820 	.word	0x0802d820
 8018a40:	0802d810 	.word	0x0802d810
                lv_fs_read(user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 8018a44:	69fb      	ldr	r3, [r7, #28]
 8018a46:	6818      	ldr	r0, [r3, #0]
 8018a48:	f107 010c 	add.w	r1, r7, #12
 8018a4c:	2300      	movs	r3, #0
 8018a4e:	2204      	movs	r2, #4
 8018a50:	f003 f9ea 	bl	801be28 <lv_fs_read>
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 8018a54:	7bb8      	ldrb	r0, [r7, #14]
 8018a56:	7b79      	ldrb	r1, [r7, #13]
 8018a58:	7b3d      	ldrb	r5, [r7, #12]
 8018a5a:	69fb      	ldr	r3, [r7, #28]
 8018a5c:	685a      	ldr	r2, [r3, #4]
 8018a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a60:	009b      	lsls	r3, r3, #2
 8018a62:	18d4      	adds	r4, r2, r3
 8018a64:	462a      	mov	r2, r5
 8018a66:	f7ff fc1d 	bl	80182a4 <lv_color_make>
 8018a6a:	4603      	mov	r3, r0
 8018a6c:	6023      	str	r3, [r4, #0]
                user_data->opa[i]     = cur_color.ch.alpha;
 8018a6e:	69fb      	ldr	r3, [r7, #28]
 8018a70:	689a      	ldr	r2, [r3, #8]
 8018a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a74:	4413      	add	r3, r2
 8018a76:	7bfa      	ldrb	r2, [r7, #15]
 8018a78:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < palette_size; i++) {
 8018a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a7c:	3301      	adds	r3, #1
 8018a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8018a80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018a82:	6a3b      	ldr	r3, [r7, #32]
 8018a84:	429a      	cmp	r2, r3
 8018a86:	d3dd      	bcc.n	8018a44 <lv_img_decoder_built_in_open+0x2b8>
 8018a88:	e030      	b.n	8018aec <lv_img_decoder_built_in_open+0x360>
            return LV_RES_INV;
#endif
        }
        else {
            /*The palette begins in the beginning of the image data. Just point to it.*/
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 8018a8a:	683b      	ldr	r3, [r7, #0]
 8018a8c:	685b      	ldr	r3, [r3, #4]
 8018a8e:	689b      	ldr	r3, [r3, #8]
 8018a90:	61bb      	str	r3, [r7, #24]

            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 8018a92:	2300      	movs	r3, #0
 8018a94:	633b      	str	r3, [r7, #48]	; 0x30
 8018a96:	e025      	b.n	8018ae4 <lv_img_decoder_built_in_open+0x358>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 8018a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a9a:	009b      	lsls	r3, r3, #2
 8018a9c:	69ba      	ldr	r2, [r7, #24]
 8018a9e:	4413      	add	r3, r2
 8018aa0:	7898      	ldrb	r0, [r3, #2]
 8018aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aa4:	009b      	lsls	r3, r3, #2
 8018aa6:	69ba      	ldr	r2, [r7, #24]
 8018aa8:	4413      	add	r3, r2
 8018aaa:	7859      	ldrb	r1, [r3, #1]
 8018aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aae:	009b      	lsls	r3, r3, #2
 8018ab0:	69ba      	ldr	r2, [r7, #24]
 8018ab2:	4413      	add	r3, r2
 8018ab4:	781d      	ldrb	r5, [r3, #0]
 8018ab6:	69fb      	ldr	r3, [r7, #28]
 8018ab8:	685a      	ldr	r2, [r3, #4]
 8018aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018abc:	009b      	lsls	r3, r3, #2
 8018abe:	18d4      	adds	r4, r2, r3
 8018ac0:	462a      	mov	r2, r5
 8018ac2:	f7ff fbef 	bl	80182a4 <lv_color_make>
 8018ac6:	4603      	mov	r3, r0
 8018ac8:	6023      	str	r3, [r4, #0]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 8018aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018acc:	009b      	lsls	r3, r3, #2
 8018ace:	69ba      	ldr	r2, [r7, #24]
 8018ad0:	441a      	add	r2, r3
 8018ad2:	69fb      	ldr	r3, [r7, #28]
 8018ad4:	6899      	ldr	r1, [r3, #8]
 8018ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ad8:	440b      	add	r3, r1
 8018ada:	78d2      	ldrb	r2, [r2, #3]
 8018adc:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < palette_size; i++) {
 8018ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ae0:	3301      	adds	r3, #1
 8018ae2:	633b      	str	r3, [r7, #48]	; 0x30
 8018ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018ae6:	6a3b      	ldr	r3, [r7, #32]
 8018ae8:	429a      	cmp	r2, r3
 8018aea:	d3d5      	bcc.n	8018a98 <lv_img_decoder_built_in_open+0x30c>
            }
        }

        dsc->img_data = NULL;
 8018aec:	683b      	ldr	r3, [r7, #0]
 8018aee:	2200      	movs	r2, #0
 8018af0:	615a      	str	r2, [r3, #20]
        return LV_RES_OK;
 8018af2:	2301      	movs	r3, #1
 8018af4:	e019      	b.n	8018b2a <lv_img_decoder_built_in_open+0x39e>
        LV_LOG_WARN("Indexed (palette) images are not enabled in lv_conf.h. See LV_IMG_CF_INDEXED");
        return LV_RES_INV;
#endif
    }
    /*Alpha indexed images. */
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 8018af6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018afa:	2b0b      	cmp	r3, #11
 8018afc:	d00b      	beq.n	8018b16 <lv_img_decoder_built_in_open+0x38a>
 8018afe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b02:	2b0c      	cmp	r3, #12
 8018b04:	d007      	beq.n	8018b16 <lv_img_decoder_built_in_open+0x38a>
 8018b06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b0a:	2b0d      	cmp	r3, #13
 8018b0c:	d003      	beq.n	8018b16 <lv_img_decoder_built_in_open+0x38a>
 8018b0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b12:	2b0e      	cmp	r3, #14
 8018b14:	d104      	bne.n	8018b20 <lv_img_decoder_built_in_open+0x394>
            cf == LV_IMG_CF_ALPHA_8BIT) {
#if LV_IMG_CF_ALPHA
        dsc->img_data = NULL;
 8018b16:	683b      	ldr	r3, [r7, #0]
 8018b18:	2200      	movs	r2, #0
 8018b1a:	615a      	str	r2, [r3, #20]
        return LV_RES_OK; /*Nothing to process*/
 8018b1c:	2301      	movs	r3, #1
 8018b1e:	e004      	b.n	8018b2a <lv_img_decoder_built_in_open+0x39e>
#endif
    }
    /*Unknown format. Can't decode it.*/
    else {
        /*Free the potentially allocated memories*/
        lv_img_decoder_built_in_close(decoder, dsc);
 8018b20:	6839      	ldr	r1, [r7, #0]
 8018b22:	6878      	ldr	r0, [r7, #4]
 8018b24:	f000 f898 	bl	8018c58 <lv_img_decoder_built_in_close>

        LV_LOG_WARN("Image decoder open: unknown color format")
        return LV_RES_INV;
 8018b28:	2300      	movs	r3, #0
    }
}
 8018b2a:	4618      	mov	r0, r3
 8018b2c:	3738      	adds	r7, #56	; 0x38
 8018b2e:	46bd      	mov	sp, r7
 8018b30:	bdb0      	pop	{r4, r5, r7, pc}
 8018b32:	bf00      	nop

08018b34 <lv_img_decoder_built_in_read_line>:
 * @param buf a buffer to store the decoded pixels
 * @return LV_RES_OK: ok; LV_RES_INV: failed
 */
lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,
                                           lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 8018b34:	b580      	push	{r7, lr}
 8018b36:	b088      	sub	sp, #32
 8018b38:	af02      	add	r7, sp, #8
 8018b3a:	60f8      	str	r0, [r7, #12]
 8018b3c:	60b9      	str	r1, [r7, #8]
 8018b3e:	4611      	mov	r1, r2
 8018b40:	461a      	mov	r2, r3
 8018b42:	460b      	mov	r3, r1
 8018b44:	80fb      	strh	r3, [r7, #6]
 8018b46:	4613      	mov	r3, r2
 8018b48:	80bb      	strh	r3, [r7, #4]
    (void)decoder; /*Unused*/

    lv_res_t res = LV_RES_INV;
 8018b4a:	2300      	movs	r3, #0
 8018b4c:	75fb      	strb	r3, [r7, #23]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8018b4e:	68bb      	ldr	r3, [r7, #8]
 8018b50:	7c1b      	ldrb	r3, [r3, #16]
 8018b52:	f003 031f 	and.w	r3, r3, #31
 8018b56:	b2db      	uxtb	r3, r3
 8018b58:	2b04      	cmp	r3, #4
 8018b5a:	d00d      	beq.n	8018b78 <lv_img_decoder_built_in_read_line+0x44>
 8018b5c:	68bb      	ldr	r3, [r7, #8]
 8018b5e:	7c1b      	ldrb	r3, [r3, #16]
 8018b60:	f003 031f 	and.w	r3, r3, #31
 8018b64:	b2db      	uxtb	r3, r3
 8018b66:	2b05      	cmp	r3, #5
 8018b68:	d006      	beq.n	8018b78 <lv_img_decoder_built_in_read_line+0x44>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8018b6a:	68bb      	ldr	r3, [r7, #8]
 8018b6c:	7c1b      	ldrb	r3, [r3, #16]
 8018b6e:	f003 031f 	and.w	r3, r3, #31
 8018b72:	b2db      	uxtb	r3, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8018b74:	2b06      	cmp	r3, #6
 8018b76:	d112      	bne.n	8018b9e <lv_img_decoder_built_in_read_line+0x6a>
        /* For TRUE_COLOR images read line required only for files.
         * For variables the image data was returned in `open`*/
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8018b78:	68bb      	ldr	r3, [r7, #8]
 8018b7a:	7b1b      	ldrb	r3, [r3, #12]
 8018b7c:	2b01      	cmp	r3, #1
 8018b7e:	d166      	bne.n	8018c4e <lv_img_decoder_built_in_read_line+0x11a>
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
 8018b80:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8018b84:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8018b88:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8018b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b8e:	9300      	str	r3, [sp, #0]
 8018b90:	4603      	mov	r3, r0
 8018b92:	68b8      	ldr	r0, [r7, #8]
 8018b94:	f000 f895 	bl	8018cc2 <lv_img_decoder_built_in_line_true_color>
 8018b98:	4603      	mov	r3, r0
 8018b9a:	75fb      	strb	r3, [r7, #23]
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8018b9c:	e057      	b.n	8018c4e <lv_img_decoder_built_in_read_line+0x11a>
        }
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8018b9e:	68bb      	ldr	r3, [r7, #8]
 8018ba0:	7c1b      	ldrb	r3, [r3, #16]
 8018ba2:	f003 031f 	and.w	r3, r3, #31
 8018ba6:	b2db      	uxtb	r3, r3
 8018ba8:	2b0b      	cmp	r3, #11
 8018baa:	d014      	beq.n	8018bd6 <lv_img_decoder_built_in_read_line+0xa2>
 8018bac:	68bb      	ldr	r3, [r7, #8]
 8018bae:	7c1b      	ldrb	r3, [r3, #16]
 8018bb0:	f003 031f 	and.w	r3, r3, #31
 8018bb4:	b2db      	uxtb	r3, r3
 8018bb6:	2b0c      	cmp	r3, #12
 8018bb8:	d00d      	beq.n	8018bd6 <lv_img_decoder_built_in_read_line+0xa2>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8018bba:	68bb      	ldr	r3, [r7, #8]
 8018bbc:	7c1b      	ldrb	r3, [r3, #16]
 8018bbe:	f003 031f 	and.w	r3, r3, #31
 8018bc2:	b2db      	uxtb	r3, r3
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8018bc4:	2b0d      	cmp	r3, #13
 8018bc6:	d006      	beq.n	8018bd6 <lv_img_decoder_built_in_read_line+0xa2>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8018bc8:	68bb      	ldr	r3, [r7, #8]
 8018bca:	7c1b      	ldrb	r3, [r3, #16]
 8018bcc:	f003 031f 	and.w	r3, r3, #31
 8018bd0:	b2db      	uxtb	r3, r3
 8018bd2:	2b0e      	cmp	r3, #14
 8018bd4:	d10e      	bne.n	8018bf4 <lv_img_decoder_built_in_read_line+0xc0>

        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
 8018bd6:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8018bda:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8018bde:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8018be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018be4:	9300      	str	r3, [sp, #0]
 8018be6:	4603      	mov	r3, r0
 8018be8:	68b8      	ldr	r0, [r7, #8]
 8018bea:	f000 f8cb 	bl	8018d84 <lv_img_decoder_built_in_line_alpha>
 8018bee:	4603      	mov	r3, r0
 8018bf0:	75fb      	strb	r3, [r7, #23]
 8018bf2:	e02c      	b.n	8018c4e <lv_img_decoder_built_in_read_line+0x11a>
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8018bf4:	68bb      	ldr	r3, [r7, #8]
 8018bf6:	7c1b      	ldrb	r3, [r3, #16]
 8018bf8:	f003 031f 	and.w	r3, r3, #31
 8018bfc:	b2db      	uxtb	r3, r3
 8018bfe:	2b07      	cmp	r3, #7
 8018c00:	d014      	beq.n	8018c2c <lv_img_decoder_built_in_read_line+0xf8>
 8018c02:	68bb      	ldr	r3, [r7, #8]
 8018c04:	7c1b      	ldrb	r3, [r3, #16]
 8018c06:	f003 031f 	and.w	r3, r3, #31
 8018c0a:	b2db      	uxtb	r3, r3
 8018c0c:	2b08      	cmp	r3, #8
 8018c0e:	d00d      	beq.n	8018c2c <lv_img_decoder_built_in_read_line+0xf8>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 8018c10:	68bb      	ldr	r3, [r7, #8]
 8018c12:	7c1b      	ldrb	r3, [r3, #16]
 8018c14:	f003 031f 	and.w	r3, r3, #31
 8018c18:	b2db      	uxtb	r3, r3
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8018c1a:	2b09      	cmp	r3, #9
 8018c1c:	d006      	beq.n	8018c2c <lv_img_decoder_built_in_read_line+0xf8>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 8018c1e:	68bb      	ldr	r3, [r7, #8]
 8018c20:	7c1b      	ldrb	r3, [r3, #16]
 8018c22:	f003 031f 	and.w	r3, r3, #31
 8018c26:	b2db      	uxtb	r3, r3
 8018c28:	2b0a      	cmp	r3, #10
 8018c2a:	d10e      	bne.n	8018c4a <lv_img_decoder_built_in_read_line+0x116>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 8018c2c:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8018c30:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8018c34:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8018c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c3a:	9300      	str	r3, [sp, #0]
 8018c3c:	4603      	mov	r3, r0
 8018c3e:	68b8      	ldr	r0, [r7, #8]
 8018c40:	f000 fa42 	bl	80190c8 <lv_img_decoder_built_in_line_indexed>
 8018c44:	4603      	mov	r3, r0
 8018c46:	75fb      	strb	r3, [r7, #23]
 8018c48:	e001      	b.n	8018c4e <lv_img_decoder_built_in_read_line+0x11a>
    }
    else {
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
        return LV_RES_INV;
 8018c4a:	2300      	movs	r3, #0
 8018c4c:	e000      	b.n	8018c50 <lv_img_decoder_built_in_read_line+0x11c>
    }

    return res;
 8018c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8018c50:	4618      	mov	r0, r3
 8018c52:	3718      	adds	r7, #24
 8018c54:	46bd      	mov	sp, r7
 8018c56:	bd80      	pop	{r7, pc}

08018c58 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8018c58:	b580      	push	{r7, lr}
 8018c5a:	b084      	sub	sp, #16
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	6078      	str	r0, [r7, #4]
 8018c60:	6039      	str	r1, [r7, #0]
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8018c62:	683b      	ldr	r3, [r7, #0]
 8018c64:	6a1b      	ldr	r3, [r3, #32]
 8018c66:	60fb      	str	r3, [r7, #12]
    if(user_data) {
 8018c68:	68fb      	ldr	r3, [r7, #12]
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d025      	beq.n	8018cba <lv_img_decoder_built_in_close+0x62>
#if LV_USE_FILESYSTEM
        if(user_data->f) {
 8018c6e:	68fb      	ldr	r3, [r7, #12]
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d009      	beq.n	8018c8a <lv_img_decoder_built_in_close+0x32>
            lv_fs_close(user_data->f);
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	4618      	mov	r0, r3
 8018c7c:	f003 f8a8 	bl	801bdd0 <lv_fs_close>
            lv_mem_free(user_data->f);
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	681b      	ldr	r3, [r3, #0]
 8018c84:	4618      	mov	r0, r3
 8018c86:	f003 fd2f 	bl	801c6e8 <lv_mem_free>
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 8018c8a:	68fb      	ldr	r3, [r7, #12]
 8018c8c:	685b      	ldr	r3, [r3, #4]
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d004      	beq.n	8018c9c <lv_img_decoder_built_in_close+0x44>
 8018c92:	68fb      	ldr	r3, [r7, #12]
 8018c94:	685b      	ldr	r3, [r3, #4]
 8018c96:	4618      	mov	r0, r3
 8018c98:	f003 fd26 	bl	801c6e8 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 8018c9c:	68fb      	ldr	r3, [r7, #12]
 8018c9e:	689b      	ldr	r3, [r3, #8]
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	d004      	beq.n	8018cae <lv_img_decoder_built_in_close+0x56>
 8018ca4:	68fb      	ldr	r3, [r7, #12]
 8018ca6:	689b      	ldr	r3, [r3, #8]
 8018ca8:	4618      	mov	r0, r3
 8018caa:	f003 fd1d 	bl	801c6e8 <lv_mem_free>

        lv_mem_free(user_data);
 8018cae:	68f8      	ldr	r0, [r7, #12]
 8018cb0:	f003 fd1a 	bl	801c6e8 <lv_mem_free>

        dsc->user_data = NULL;
 8018cb4:	683b      	ldr	r3, [r7, #0]
 8018cb6:	2200      	movs	r2, #0
 8018cb8:	621a      	str	r2, [r3, #32]
    }
}
 8018cba:	bf00      	nop
 8018cbc:	3710      	adds	r7, #16
 8018cbe:	46bd      	mov	sp, r7
 8018cc0:	bd80      	pop	{r7, pc}

08018cc2 <lv_img_decoder_built_in_line_true_color>:
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
 8018cc2:	b580      	push	{r7, lr}
 8018cc4:	b08a      	sub	sp, #40	; 0x28
 8018cc6:	af00      	add	r7, sp, #0
 8018cc8:	60f8      	str	r0, [r7, #12]
 8018cca:	4608      	mov	r0, r1
 8018ccc:	4611      	mov	r1, r2
 8018cce:	461a      	mov	r2, r3
 8018cd0:	4603      	mov	r3, r0
 8018cd2:	817b      	strh	r3, [r7, #10]
 8018cd4:	460b      	mov	r3, r1
 8018cd6:	813b      	strh	r3, [r7, #8]
 8018cd8:	4613      	mov	r3, r2
 8018cda:	80fb      	strh	r3, [r7, #6]
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8018cdc:	68fb      	ldr	r3, [r7, #12]
 8018cde:	6a1b      	ldr	r3, [r3, #32]
 8018ce0:	627b      	str	r3, [r7, #36]	; 0x24
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	7c1b      	ldrb	r3, [r3, #16]
 8018ce6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8018cea:	b2db      	uxtb	r3, r3
 8018cec:	4618      	mov	r0, r3
 8018cee:	f7f5 fab7 	bl	800e260 <lv_img_cf_get_px_size>
 8018cf2:	4603      	mov	r3, r0
 8018cf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8018cf8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8018cfc:	68fa      	ldr	r2, [r7, #12]
 8018cfe:	6912      	ldr	r2, [r2, #16]
 8018d00:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8018d04:	b292      	uxth	r2, r2
 8018d06:	fb02 f203 	mul.w	r2, r2, r3
 8018d0a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8018d0e:	4413      	add	r3, r2
 8018d10:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8018d14:	fb02 f303 	mul.w	r3, r2, r3
 8018d18:	10db      	asrs	r3, r3, #3
 8018d1a:	61fb      	str	r3, [r7, #28]
    pos += 4; /*Skip the header*/
 8018d1c:	69fb      	ldr	r3, [r7, #28]
 8018d1e:	3304      	adds	r3, #4
 8018d20:	61fb      	str	r3, [r7, #28]
    res = lv_fs_seek(user_data->f, pos);
 8018d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	69f9      	ldr	r1, [r7, #28]
 8018d28:	4618      	mov	r0, r3
 8018d2a:	f003 f8b3 	bl	801be94 <lv_fs_seek>
 8018d2e:	4603      	mov	r3, r0
 8018d30:	76fb      	strb	r3, [r7, #27]
    if(res != LV_FS_RES_OK) {
 8018d32:	7efb      	ldrb	r3, [r7, #27]
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d001      	beq.n	8018d3c <lv_img_decoder_built_in_line_true_color+0x7a>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
 8018d38:	2300      	movs	r3, #0
 8018d3a:	e01e      	b.n	8018d7a <lv_img_decoder_built_in_line_true_color+0xb8>
    }
    uint32_t btr = len * (px_size >> 3);
 8018d3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018d40:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8018d44:	08d2      	lsrs	r2, r2, #3
 8018d46:	b2d2      	uxtb	r2, r2
 8018d48:	fb02 f303 	mul.w	r3, r2, r3
 8018d4c:	617b      	str	r3, [r7, #20]
    uint32_t br  = 0;
 8018d4e:	2300      	movs	r3, #0
 8018d50:	613b      	str	r3, [r7, #16]
    res = lv_fs_read(user_data->f, buf, btr, &br);
 8018d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d54:	6818      	ldr	r0, [r3, #0]
 8018d56:	f107 0310 	add.w	r3, r7, #16
 8018d5a:	697a      	ldr	r2, [r7, #20]
 8018d5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018d5e:	f003 f863 	bl	801be28 <lv_fs_read>
 8018d62:	4603      	mov	r3, r0
 8018d64:	76fb      	strb	r3, [r7, #27]
    if(res != LV_FS_RES_OK || btr != br) {
 8018d66:	7efb      	ldrb	r3, [r7, #27]
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d103      	bne.n	8018d74 <lv_img_decoder_built_in_line_true_color+0xb2>
 8018d6c:	693b      	ldr	r3, [r7, #16]
 8018d6e:	697a      	ldr	r2, [r7, #20]
 8018d70:	429a      	cmp	r2, r3
 8018d72:	d001      	beq.n	8018d78 <lv_img_decoder_built_in_line_true_color+0xb6>
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
 8018d74:	2300      	movs	r3, #0
 8018d76:	e000      	b.n	8018d7a <lv_img_decoder_built_in_line_true_color+0xb8>
    }

    return LV_RES_OK;
 8018d78:	2301      	movs	r3, #1
    LV_UNUSED(len);
    LV_UNUSED(buf);
    LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
    return LV_RES_INV;
#endif
}
 8018d7a:	4618      	mov	r0, r3
 8018d7c:	3728      	adds	r7, #40	; 0x28
 8018d7e:	46bd      	mov	sp, r7
 8018d80:	bd80      	pop	{r7, pc}
	...

08018d84 <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
 8018d84:	b590      	push	{r4, r7, lr}
 8018d86:	b097      	sub	sp, #92	; 0x5c
 8018d88:	af00      	add	r7, sp, #0
 8018d8a:	60f8      	str	r0, [r7, #12]
 8018d8c:	4608      	mov	r0, r1
 8018d8e:	4611      	mov	r1, r2
 8018d90:	461a      	mov	r2, r3
 8018d92:	4603      	mov	r3, r0
 8018d94:	817b      	strh	r3, [r7, #10]
 8018d96:	460b      	mov	r3, r1
 8018d98:	813b      	strh	r3, [r7, #8]
 8018d9a:	4613      	mov	r3, r2
 8018d9c:	80fb      	strh	r3, [r7, #6]

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8018d9e:	2300      	movs	r3, #0
 8018da0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8018da4:	23ff      	movs	r3, #255	; 0xff
 8018da6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8018daa:	4bab      	ldr	r3, [pc, #684]	; (8019058 <lv_img_decoder_built_in_line_alpha+0x2d4>)
 8018dac:	681b      	ldr	r3, [r3, #0]
 8018dae:	62bb      	str	r3, [r7, #40]	; 0x28
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8018db0:	4baa      	ldr	r3, [pc, #680]	; (801905c <lv_img_decoder_built_in_line_alpha+0x2d8>)
 8018db2:	f107 0418 	add.w	r4, r7, #24
 8018db6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018db8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
 8018dbc:	68fb      	ldr	r3, [r7, #12]
 8018dbe:	689b      	ldr	r3, [r3, #8]
 8018dc0:	617b      	str	r3, [r7, #20]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 8018dc2:	2300      	movs	r3, #0
 8018dc4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8018dc8:	e00e      	b.n	8018de8 <lv_img_decoder_built_in_line_alpha+0x64>
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
#elif LV_COLOR_DEPTH == 32
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = bg_color.full;
 8018dca:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8018dce:	009b      	lsls	r3, r3, #2
 8018dd0:	461a      	mov	r2, r3
 8018dd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018dd4:	4413      	add	r3, r2
 8018dd6:	697a      	ldr	r2, [r7, #20]
 8018dd8:	601a      	str	r2, [r3, #0]
    for(i = 0; i < len; i++) {
 8018dda:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8018dde:	b29b      	uxth	r3, r3
 8018de0:	3301      	adds	r3, #1
 8018de2:	b29b      	uxth	r3, r3
 8018de4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8018de8:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8018dec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018df0:	429a      	cmp	r2, r3
 8018df2:	dbea      	blt.n	8018dca <lv_img_decoder_built_in_line_alpha+0x46>
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
 8018df4:	2300      	movs	r3, #0
 8018df6:	653b      	str	r3, [r7, #80]	; 0x50
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 8018df8:	68fb      	ldr	r3, [r7, #12]
 8018dfa:	7c1b      	ldrb	r3, [r3, #16]
 8018dfc:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8018e00:	b2db      	uxtb	r3, r3
 8018e02:	4618      	mov	r0, r3
 8018e04:	f7f5 fa2c 	bl	800e260 <lv_img_cf_get_px_size>
 8018e08:	4603      	mov	r3, r0
 8018e0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8018e0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018e12:	2201      	movs	r2, #1
 8018e14:	fa02 f303 	lsl.w	r3, r2, r3
 8018e18:	b29b      	uxth	r3, r3
 8018e1a:	3b01      	subs	r3, #1
 8018e1c:	87bb      	strh	r3, [r7, #60]	; 0x3c

    lv_coord_t w = 0;
 8018e1e:	2300      	movs	r3, #0
 8018e20:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    uint32_t ofs = 0;
 8018e24:	2300      	movs	r3, #0
 8018e26:	64bb      	str	r3, [r7, #72]	; 0x48
    int8_t pos   = 0;
 8018e28:	2300      	movs	r3, #0
 8018e2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    switch(dsc->header.cf) {
 8018e2e:	68fb      	ldr	r3, [r7, #12]
 8018e30:	7c1b      	ldrb	r3, [r3, #16]
 8018e32:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8018e36:	b2db      	uxtb	r3, r3
 8018e38:	3b0b      	subs	r3, #11
 8018e3a:	2b03      	cmp	r3, #3
 8018e3c:	f200 80c1 	bhi.w	8018fc2 <lv_img_decoder_built_in_line_alpha+0x23e>
 8018e40:	a201      	add	r2, pc, #4	; (adr r2, 8018e48 <lv_img_decoder_built_in_line_alpha+0xc4>)
 8018e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e46:	bf00      	nop
 8018e48:	08018e59 	.word	0x08018e59
 8018e4c:	08018ebf 	.word	0x08018ebf
 8018e50:	08018f29 	.word	0x08018f29
 8018e54:	08018f93 	.word	0x08018f93
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8018e58:	68fb      	ldr	r3, [r7, #12]
 8018e5a:	691b      	ldr	r3, [r3, #16]
 8018e5c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018e60:	b29b      	uxth	r3, r3
 8018e62:	10db      	asrs	r3, r3, #3
 8018e64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            if(dsc->header.w & 0x7) w++;
 8018e68:	68fb      	ldr	r3, [r7, #12]
 8018e6a:	691b      	ldr	r3, [r3, #16]
 8018e6c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018e70:	b29b      	uxth	r3, r3
 8018e72:	f003 0307 	and.w	r3, r3, #7
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d006      	beq.n	8018e88 <lv_img_decoder_built_in_line_alpha+0x104>
 8018e7a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018e7e:	b29b      	uxth	r3, r3
 8018e80:	3301      	adds	r3, #1
 8018e82:	b29b      	uxth	r3, r3
 8018e84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 3); /*First pixel*/
 8018e88:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018e8c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8018e90:	fb02 f303 	mul.w	r3, r2, r3
 8018e94:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8018e98:	10d2      	asrs	r2, r2, #3
 8018e9a:	b212      	sxth	r2, r2
 8018e9c:	4413      	add	r3, r2
 8018e9e:	461a      	mov	r2, r3
 8018ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018ea2:	4413      	add	r3, r2
 8018ea4:	64bb      	str	r3, [r7, #72]	; 0x48
            pos       = 7 - (x & 0x7);
 8018ea6:	897b      	ldrh	r3, [r7, #10]
 8018ea8:	b25b      	sxtb	r3, r3
 8018eaa:	43db      	mvns	r3, r3
 8018eac:	b25b      	sxtb	r3, r3
 8018eae:	f003 0307 	and.w	r3, r3, #7
 8018eb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha1_opa_table;
 8018eb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018eba:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 8018ebc:	e081      	b.n	8018fc2 <lv_img_decoder_built_in_line_alpha+0x23e>
        case LV_IMG_CF_ALPHA_2BIT:
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8018ebe:	68fb      	ldr	r3, [r7, #12]
 8018ec0:	691b      	ldr	r3, [r3, #16]
 8018ec2:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018ec6:	b29b      	uxth	r3, r3
 8018ec8:	109b      	asrs	r3, r3, #2
 8018eca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            if(dsc->header.w & 0x3) w++;
 8018ece:	68fb      	ldr	r3, [r7, #12]
 8018ed0:	691b      	ldr	r3, [r3, #16]
 8018ed2:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018ed6:	b29b      	uxth	r3, r3
 8018ed8:	f003 0303 	and.w	r3, r3, #3
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d006      	beq.n	8018eee <lv_img_decoder_built_in_line_alpha+0x16a>
 8018ee0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018ee4:	b29b      	uxth	r3, r3
 8018ee6:	3301      	adds	r3, #1
 8018ee8:	b29b      	uxth	r3, r3
 8018eea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 2); /*First pixel*/
 8018eee:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018ef2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8018ef6:	fb02 f303 	mul.w	r3, r2, r3
 8018efa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8018efe:	1092      	asrs	r2, r2, #2
 8018f00:	b212      	sxth	r2, r2
 8018f02:	4413      	add	r3, r2
 8018f04:	461a      	mov	r2, r3
 8018f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018f08:	4413      	add	r3, r2
 8018f0a:	64bb      	str	r3, [r7, #72]	; 0x48
            pos       = 6 - ((x & 0x3) * 2);
 8018f0c:	897b      	ldrh	r3, [r7, #10]
 8018f0e:	43db      	mvns	r3, r3
 8018f10:	b2db      	uxtb	r3, r3
 8018f12:	f003 0303 	and.w	r3, r3, #3
 8018f16:	b2db      	uxtb	r3, r3
 8018f18:	005b      	lsls	r3, r3, #1
 8018f1a:	b2db      	uxtb	r3, r3
 8018f1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha2_opa_table;
 8018f20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018f24:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 8018f26:	e04c      	b.n	8018fc2 <lv_img_decoder_built_in_line_alpha+0x23e>
        case LV_IMG_CF_ALPHA_4BIT:
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8018f28:	68fb      	ldr	r3, [r7, #12]
 8018f2a:	691b      	ldr	r3, [r3, #16]
 8018f2c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018f30:	b29b      	uxth	r3, r3
 8018f32:	105b      	asrs	r3, r3, #1
 8018f34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            if(dsc->header.w & 0x1) w++;
 8018f38:	68fb      	ldr	r3, [r7, #12]
 8018f3a:	691b      	ldr	r3, [r3, #16]
 8018f3c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018f40:	b29b      	uxth	r3, r3
 8018f42:	f003 0301 	and.w	r3, r3, #1
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d006      	beq.n	8018f58 <lv_img_decoder_built_in_line_alpha+0x1d4>
 8018f4a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018f4e:	b29b      	uxth	r3, r3
 8018f50:	3301      	adds	r3, #1
 8018f52:	b29b      	uxth	r3, r3
 8018f54:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 1); /*First pixel*/
 8018f58:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018f5c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8018f60:	fb02 f303 	mul.w	r3, r2, r3
 8018f64:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8018f68:	1052      	asrs	r2, r2, #1
 8018f6a:	b212      	sxth	r2, r2
 8018f6c:	4413      	add	r3, r2
 8018f6e:	461a      	mov	r2, r3
 8018f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018f72:	4413      	add	r3, r2
 8018f74:	64bb      	str	r3, [r7, #72]	; 0x48
            pos       = 4 - ((x & 0x1) * 4);
 8018f76:	897b      	ldrh	r3, [r7, #10]
 8018f78:	f003 0301 	and.w	r3, r3, #1
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d101      	bne.n	8018f84 <lv_img_decoder_built_in_line_alpha+0x200>
 8018f80:	2304      	movs	r3, #4
 8018f82:	e000      	b.n	8018f86 <lv_img_decoder_built_in_line_alpha+0x202>
 8018f84:	2300      	movs	r3, #0
 8018f86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha4_opa_table;
 8018f8a:	f107 0318 	add.w	r3, r7, #24
 8018f8e:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 8018f90:	e017      	b.n	8018fc2 <lv_img_decoder_built_in_line_alpha+0x23e>
        case LV_IMG_CF_ALPHA_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8018f92:	68fb      	ldr	r3, [r7, #12]
 8018f94:	691b      	ldr	r3, [r3, #16]
 8018f96:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8018f9a:	b29b      	uxth	r3, r3
 8018f9c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + x;  /*First pixel*/
 8018fa0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018fa4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8018fa8:	fb02 f203 	mul.w	r2, r2, r3
 8018fac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8018fb0:	4413      	add	r3, r2
 8018fb2:	461a      	mov	r2, r3
 8018fb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018fb6:	4413      	add	r3, r2
 8018fb8:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 0;
 8018fba:	2300      	movs	r3, #0
 8018fbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8018fc0:	bf00      	nop
    }

#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8018fc2:	68fb      	ldr	r3, [r7, #12]
 8018fc4:	6a1b      	ldr	r3, [r3, #32]
 8018fc6:	63bb      	str	r3, [r7, #56]	; 0x38
    uint8_t * fs_buf = _lv_mem_buf_get(w);
 8018fc8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018fcc:	4618      	mov	r0, r3
 8018fce:	f003 fca3 	bl	801c918 <_lv_mem_buf_get>
 8018fd2:	6378      	str	r0, [r7, #52]	; 0x34
#endif

    const uint8_t * data_tmp = NULL;
 8018fd4:	2300      	movs	r3, #0
 8018fd6:	643b      	str	r3, [r7, #64]	; 0x40
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8018fd8:	68fb      	ldr	r3, [r7, #12]
 8018fda:	7b1b      	ldrb	r3, [r3, #12]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d108      	bne.n	8018ff2 <lv_img_decoder_built_in_line_alpha+0x26e>
        const lv_img_dsc_t * img_dsc = dsc->src;
 8018fe0:	68fb      	ldr	r3, [r7, #12]
 8018fe2:	685b      	ldr	r3, [r3, #4]
 8018fe4:	633b      	str	r3, [r7, #48]	; 0x30

        data_tmp = img_dsc->data + ofs;
 8018fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fe8:	689a      	ldr	r2, [r3, #8]
 8018fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018fec:	4413      	add	r3, r2
 8018fee:	643b      	str	r3, [r7, #64]	; 0x40
 8018ff0:	e011      	b.n	8019016 <lv_img_decoder_built_in_line_alpha+0x292>
    }
    else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 8018ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ff4:	681a      	ldr	r2, [r3, #0]
 8018ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018ff8:	3304      	adds	r3, #4
 8018ffa:	4619      	mov	r1, r3
 8018ffc:	4610      	mov	r0, r2
 8018ffe:	f002 ff49 	bl	801be94 <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 8019002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019004:	6818      	ldr	r0, [r3, #0]
 8019006:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 801900a:	2300      	movs	r3, #0
 801900c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801900e:	f002 ff0b 	bl	801be28 <lv_fs_read>
        data_tmp = fs_buf;
 8019012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019014:	643b      	str	r3, [r7, #64]	; 0x40
        data_tmp = NULL; /*To avoid warnings*/
        return LV_RES_INV;
#endif
    }

    for(i = 0; i < len; i++) {
 8019016:	2300      	movs	r3, #0
 8019018:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801901c:	e046      	b.n	80190ac <lv_img_decoder_built_in_line_alpha+0x328>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
 801901e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019020:	781b      	ldrb	r3, [r3, #0]
 8019022:	4619      	mov	r1, r3
 8019024:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8019026:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 801902a:	fa02 f303 	lsl.w	r3, r2, r3
 801902e:	ea01 0203 	and.w	r2, r1, r3
 8019032:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8019036:	fa42 f303 	asr.w	r3, r2, r3
 801903a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 801903e:	68fb      	ldr	r3, [r7, #12]
 8019040:	7c1b      	ldrb	r3, [r3, #16]
 8019042:	f003 031f 	and.w	r3, r3, #31
 8019046:	b2db      	uxtb	r3, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8019048:	2b0e      	cmp	r3, #14
 801904a:	d009      	beq.n	8019060 <lv_img_decoder_built_in_line_alpha+0x2dc>
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 801904c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019050:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019052:	4413      	add	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8019054:	781b      	ldrb	r3, [r3, #0]
 8019056:	e005      	b.n	8019064 <lv_img_decoder_built_in_line_alpha+0x2e0>
 8019058:	0802d824 	.word	0x0802d824
 801905c:	0802d828 	.word	0x0802d828
 8019060:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019064:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8019068:	0092      	lsls	r2, r2, #2
 801906a:	3203      	adds	r2, #3
 801906c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801906e:	440a      	add	r2, r1
 8019070:	7013      	strb	r3, [r2, #0]

        pos -= px_size;
 8019072:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8019076:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801907a:	1ad3      	subs	r3, r2, r3
 801907c:	b2db      	uxtb	r3, r3
 801907e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(pos < 0) {
 8019082:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8019086:	2b00      	cmp	r3, #0
 8019088:	da09      	bge.n	801909e <lv_img_decoder_built_in_line_alpha+0x31a>
            pos = 8 - px_size;
 801908a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801908e:	f1c3 0308 	rsb	r3, r3, #8
 8019092:	b2db      	uxtb	r3, r3
 8019094:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            data_tmp++;
 8019098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801909a:	3301      	adds	r3, #1
 801909c:	643b      	str	r3, [r7, #64]	; 0x40
    for(i = 0; i < len; i++) {
 801909e:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80190a2:	b29b      	uxth	r3, r3
 80190a4:	3301      	adds	r3, #1
 80190a6:	b29b      	uxth	r3, r3
 80190a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80190ac:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 80190b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80190b4:	429a      	cmp	r2, r3
 80190b6:	dbb2      	blt.n	801901e <lv_img_decoder_built_in_line_alpha+0x29a>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
 80190b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80190ba:	f003 fd0b 	bl	801cad4 <_lv_mem_buf_release>
#endif
    return LV_RES_OK;
 80190be:	2301      	movs	r3, #1

#else
    LV_LOG_WARN("Image built-in alpha line reader failed because LV_IMG_CF_ALPHA is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 80190c0:	4618      	mov	r0, r3
 80190c2:	375c      	adds	r7, #92	; 0x5c
 80190c4:	46bd      	mov	sp, r7
 80190c6:	bd90      	pop	{r4, r7, pc}

080190c8 <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
 80190c8:	b580      	push	{r7, lr}
 80190ca:	b08e      	sub	sp, #56	; 0x38
 80190cc:	af00      	add	r7, sp, #0
 80190ce:	60f8      	str	r0, [r7, #12]
 80190d0:	4608      	mov	r0, r1
 80190d2:	4611      	mov	r1, r2
 80190d4:	461a      	mov	r2, r3
 80190d6:	4603      	mov	r3, r0
 80190d8:	817b      	strh	r3, [r7, #10]
 80190da:	460b      	mov	r3, r1
 80190dc:	813b      	strh	r3, [r7, #8]
 80190de:	4613      	mov	r3, r2
 80190e0:	80fb      	strh	r3, [r7, #6]

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 80190e2:	68fb      	ldr	r3, [r7, #12]
 80190e4:	7c1b      	ldrb	r3, [r3, #16]
 80190e6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80190ea:	b2db      	uxtb	r3, r3
 80190ec:	4618      	mov	r0, r3
 80190ee:	f7f5 f8b7 	bl	800e260 <lv_img_cf_get_px_size>
 80190f2:	4603      	mov	r3, r0
 80190f4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 80190f8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80190fc:	2201      	movs	r2, #1
 80190fe:	fa02 f303 	lsl.w	r3, r2, r3
 8019102:	b29b      	uxth	r3, r3
 8019104:	3b01      	subs	r3, #1
 8019106:	84fb      	strh	r3, [r7, #38]	; 0x26

    lv_coord_t w = 0;
 8019108:	2300      	movs	r3, #0
 801910a:	86fb      	strh	r3, [r7, #54]	; 0x36
    int8_t pos   = 0;
 801910c:	2300      	movs	r3, #0
 801910e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint32_t ofs = 0;
 8019112:	2300      	movs	r3, #0
 8019114:	633b      	str	r3, [r7, #48]	; 0x30
    switch(dsc->header.cf) {
 8019116:	68fb      	ldr	r3, [r7, #12]
 8019118:	7c1b      	ldrb	r3, [r3, #16]
 801911a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801911e:	b2db      	uxtb	r3, r3
 8019120:	3b07      	subs	r3, #7
 8019122:	2b03      	cmp	r3, #3
 8019124:	f200 80be 	bhi.w	80192a4 <lv_img_decoder_built_in_line_indexed+0x1dc>
 8019128:	a201      	add	r2, pc, #4	; (adr r2, 8019130 <lv_img_decoder_built_in_line_indexed+0x68>)
 801912a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801912e:	bf00      	nop
 8019130:	08019141 	.word	0x08019141
 8019134:	080191a3 	.word	0x080191a3
 8019138:	08019209 	.word	0x08019209
 801913c:	0801926f 	.word	0x0801926f
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 8019140:	68fb      	ldr	r3, [r7, #12]
 8019142:	691b      	ldr	r3, [r3, #16]
 8019144:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8019148:	b29b      	uxth	r3, r3
 801914a:	10db      	asrs	r3, r3, #3
 801914c:	86fb      	strh	r3, [r7, #54]	; 0x36
            if(dsc->header.w & 0x7) w++;
 801914e:	68fb      	ldr	r3, [r7, #12]
 8019150:	691b      	ldr	r3, [r3, #16]
 8019152:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8019156:	b29b      	uxth	r3, r3
 8019158:	f003 0307 	and.w	r3, r3, #7
 801915c:	2b00      	cmp	r3, #0
 801915e:	d005      	beq.n	801916c <lv_img_decoder_built_in_line_indexed+0xa4>
 8019160:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8019164:	b29b      	uxth	r3, r3
 8019166:	3301      	adds	r3, #1
 8019168:	b29b      	uxth	r3, r3
 801916a:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 3); /*First pixel*/
 801916c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8019170:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8019174:	fb02 f303 	mul.w	r3, r2, r3
 8019178:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801917c:	10d2      	asrs	r2, r2, #3
 801917e:	b212      	sxth	r2, r2
 8019180:	4413      	add	r3, r2
 8019182:	461a      	mov	r2, r3
 8019184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019186:	4413      	add	r3, r2
 8019188:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 8;                /*Skip the palette*/
 801918a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801918c:	3308      	adds	r3, #8
 801918e:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 7 - (x & 0x7);
 8019190:	897b      	ldrh	r3, [r7, #10]
 8019192:	b25b      	sxtb	r3, r3
 8019194:	43db      	mvns	r3, r3
 8019196:	b25b      	sxtb	r3, r3
 8019198:	f003 0307 	and.w	r3, r3, #7
 801919c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 80191a0:	e080      	b.n	80192a4 <lv_img_decoder_built_in_line_indexed+0x1dc>
        case LV_IMG_CF_INDEXED_2BIT:
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	691b      	ldr	r3, [r3, #16]
 80191a6:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80191aa:	b29b      	uxth	r3, r3
 80191ac:	109b      	asrs	r3, r3, #2
 80191ae:	86fb      	strh	r3, [r7, #54]	; 0x36
            if(dsc->header.w & 0x3) w++;
 80191b0:	68fb      	ldr	r3, [r7, #12]
 80191b2:	691b      	ldr	r3, [r3, #16]
 80191b4:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80191b8:	b29b      	uxth	r3, r3
 80191ba:	f003 0303 	and.w	r3, r3, #3
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d005      	beq.n	80191ce <lv_img_decoder_built_in_line_indexed+0x106>
 80191c2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80191c6:	b29b      	uxth	r3, r3
 80191c8:	3301      	adds	r3, #1
 80191ca:	b29b      	uxth	r3, r3
 80191cc:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 2); /*First pixel*/
 80191ce:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80191d2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80191d6:	fb02 f303 	mul.w	r3, r2, r3
 80191da:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80191de:	1092      	asrs	r2, r2, #2
 80191e0:	b212      	sxth	r2, r2
 80191e2:	4413      	add	r3, r2
 80191e4:	461a      	mov	r2, r3
 80191e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191e8:	4413      	add	r3, r2
 80191ea:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 16;               /*Skip the palette*/
 80191ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191ee:	3310      	adds	r3, #16
 80191f0:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 6 - ((x & 0x3) * 2);
 80191f2:	897b      	ldrh	r3, [r7, #10]
 80191f4:	43db      	mvns	r3, r3
 80191f6:	b2db      	uxtb	r3, r3
 80191f8:	f003 0303 	and.w	r3, r3, #3
 80191fc:	b2db      	uxtb	r3, r3
 80191fe:	005b      	lsls	r3, r3, #1
 8019200:	b2db      	uxtb	r3, r3
 8019202:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8019206:	e04d      	b.n	80192a4 <lv_img_decoder_built_in_line_indexed+0x1dc>
        case LV_IMG_CF_INDEXED_4BIT:
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	691b      	ldr	r3, [r3, #16]
 801920c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8019210:	b29b      	uxth	r3, r3
 8019212:	105b      	asrs	r3, r3, #1
 8019214:	86fb      	strh	r3, [r7, #54]	; 0x36
            if(dsc->header.w & 0x1) w++;
 8019216:	68fb      	ldr	r3, [r7, #12]
 8019218:	691b      	ldr	r3, [r3, #16]
 801921a:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801921e:	b29b      	uxth	r3, r3
 8019220:	f003 0301 	and.w	r3, r3, #1
 8019224:	2b00      	cmp	r3, #0
 8019226:	d005      	beq.n	8019234 <lv_img_decoder_built_in_line_indexed+0x16c>
 8019228:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801922c:	b29b      	uxth	r3, r3
 801922e:	3301      	adds	r3, #1
 8019230:	b29b      	uxth	r3, r3
 8019232:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 1); /*First pixel*/
 8019234:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8019238:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801923c:	fb02 f303 	mul.w	r3, r2, r3
 8019240:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8019244:	1052      	asrs	r2, r2, #1
 8019246:	b212      	sxth	r2, r2
 8019248:	4413      	add	r3, r2
 801924a:	461a      	mov	r2, r3
 801924c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801924e:	4413      	add	r3, r2
 8019250:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 64;               /*Skip the palette*/
 8019252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019254:	3340      	adds	r3, #64	; 0x40
 8019256:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 4 - ((x & 0x1) * 4);
 8019258:	897b      	ldrh	r3, [r7, #10]
 801925a:	f003 0301 	and.w	r3, r3, #1
 801925e:	2b00      	cmp	r3, #0
 8019260:	d101      	bne.n	8019266 <lv_img_decoder_built_in_line_indexed+0x19e>
 8019262:	2304      	movs	r3, #4
 8019264:	e000      	b.n	8019268 <lv_img_decoder_built_in_line_indexed+0x1a0>
 8019266:	2300      	movs	r3, #0
 8019268:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 801926c:	e01a      	b.n	80192a4 <lv_img_decoder_built_in_line_indexed+0x1dc>
        case LV_IMG_CF_INDEXED_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 801926e:	68fb      	ldr	r3, [r7, #12]
 8019270:	691b      	ldr	r3, [r3, #16]
 8019272:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8019276:	b29b      	uxth	r3, r3
 8019278:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + x;  /*First pixel*/
 801927a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801927e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8019282:	fb02 f203 	mul.w	r2, r2, r3
 8019286:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801928a:	4413      	add	r3, r2
 801928c:	461a      	mov	r2, r3
 801928e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019290:	4413      	add	r3, r2
 8019292:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 1024;       /*Skip the palette*/
 8019294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019296:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801929a:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 0;
 801929c:	2300      	movs	r3, #0
 801929e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 80192a2:	bf00      	nop
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	6a1b      	ldr	r3, [r3, #32]
 80192a8:	623b      	str	r3, [r7, #32]

#if LV_USE_FILESYSTEM
    uint8_t * fs_buf = _lv_mem_buf_get(w);
 80192aa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80192ae:	4618      	mov	r0, r3
 80192b0:	f003 fb32 	bl	801c918 <_lv_mem_buf_get>
 80192b4:	61f8      	str	r0, [r7, #28]
#endif
    const uint8_t * data_tmp = NULL;
 80192b6:	2300      	movs	r3, #0
 80192b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80192ba:	68fb      	ldr	r3, [r7, #12]
 80192bc:	7b1b      	ldrb	r3, [r3, #12]
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d108      	bne.n	80192d4 <lv_img_decoder_built_in_line_indexed+0x20c>
        const lv_img_dsc_t * img_dsc = dsc->src;
 80192c2:	68fb      	ldr	r3, [r7, #12]
 80192c4:	685b      	ldr	r3, [r3, #4]
 80192c6:	61bb      	str	r3, [r7, #24]
        data_tmp                     = img_dsc->data + ofs;
 80192c8:	69bb      	ldr	r3, [r7, #24]
 80192ca:	689a      	ldr	r2, [r3, #8]
 80192cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192ce:	4413      	add	r3, r2
 80192d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80192d2:	e011      	b.n	80192f8 <lv_img_decoder_built_in_line_indexed+0x230>
    }
    else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 80192d4:	6a3b      	ldr	r3, [r7, #32]
 80192d6:	681a      	ldr	r2, [r3, #0]
 80192d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192da:	3304      	adds	r3, #4
 80192dc:	4619      	mov	r1, r3
 80192de:	4610      	mov	r0, r2
 80192e0:	f002 fdd8 	bl	801be94 <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 80192e4:	6a3b      	ldr	r3, [r7, #32]
 80192e6:	6818      	ldr	r0, [r3, #0]
 80192e8:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80192ec:	2300      	movs	r3, #0
 80192ee:	69f9      	ldr	r1, [r7, #28]
 80192f0:	f002 fd9a 	bl	801be28 <lv_fs_read>
        data_tmp = fs_buf;
 80192f4:	69fb      	ldr	r3, [r7, #28]
 80192f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        return LV_RES_INV;
#endif
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
 80192f8:	2300      	movs	r3, #0
 80192fa:	857b      	strh	r3, [r7, #42]	; 0x2a
 80192fc:	e045      	b.n	801938a <lv_img_decoder_built_in_line_indexed+0x2c2>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
 80192fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019300:	781b      	ldrb	r3, [r3, #0]
 8019302:	4619      	mov	r1, r3
 8019304:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019306:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 801930a:	fa02 f303 	lsl.w	r3, r2, r3
 801930e:	ea01 0203 	and.w	r2, r1, r3
 8019312:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 8019316:	fa42 f303 	asr.w	r3, r2, r3
 801931a:	75fb      	strb	r3, [r7, #23]

        lv_color_t color = user_data->palette[val_act];
 801931c:	6a3b      	ldr	r3, [r7, #32]
 801931e:	685a      	ldr	r2, [r3, #4]
 8019320:	7dfb      	ldrb	r3, [r7, #23]
 8019322:	009b      	lsls	r3, r3, #2
 8019324:	4413      	add	r3, r2
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	613b      	str	r3, [r7, #16]
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
#elif LV_COLOR_DEPTH == 32
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = color.full;
 801932a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801932e:	009b      	lsls	r3, r3, #2
 8019330:	461a      	mov	r2, r3
 8019332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019334:	4413      	add	r3, r2
 8019336:	693a      	ldr	r2, [r7, #16]
 8019338:	601a      	str	r2, [r3, #0]
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 801933a:	6a3b      	ldr	r3, [r7, #32]
 801933c:	689a      	ldr	r2, [r3, #8]
 801933e:	7dfb      	ldrb	r3, [r7, #23]
 8019340:	441a      	add	r2, r3
 8019342:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8019346:	009b      	lsls	r3, r3, #2
 8019348:	3303      	adds	r3, #3
 801934a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801934c:	440b      	add	r3, r1
 801934e:	7812      	ldrb	r2, [r2, #0]
 8019350:	701a      	strb	r2, [r3, #0]

        pos -= px_size;
 8019352:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8019356:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801935a:	1ad3      	subs	r3, r2, r3
 801935c:	b2db      	uxtb	r3, r3
 801935e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        if(pos < 0) {
 8019362:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 8019366:	2b00      	cmp	r3, #0
 8019368:	da09      	bge.n	801937e <lv_img_decoder_built_in_line_indexed+0x2b6>
            pos = 8 - px_size;
 801936a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801936e:	f1c3 0308 	rsb	r3, r3, #8
 8019372:	b2db      	uxtb	r3, r3
 8019374:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            data_tmp++;
 8019378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801937a:	3301      	adds	r3, #1
 801937c:	62fb      	str	r3, [r7, #44]	; 0x2c
    for(i = 0; i < len; i++) {
 801937e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8019382:	b29b      	uxth	r3, r3
 8019384:	3301      	adds	r3, #1
 8019386:	b29b      	uxth	r3, r3
 8019388:	857b      	strh	r3, [r7, #42]	; 0x2a
 801938a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801938e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019392:	429a      	cmp	r2, r3
 8019394:	dbb3      	blt.n	80192fe <lv_img_decoder_built_in_line_indexed+0x236>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
 8019396:	69f8      	ldr	r0, [r7, #28]
 8019398:	f003 fb9c 	bl	801cad4 <_lv_mem_buf_release>
#endif
    return LV_RES_OK;
 801939c:	2301      	movs	r3, #1
#else
    LV_LOG_WARN("Image built-in indexed line reader failed because LV_IMG_CF_INDEXED is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 801939e:	4618      	mov	r0, r3
 80193a0:	3738      	adds	r7, #56	; 0x38
 80193a2:	46bd      	mov	sp, r7
 80193a4:	bd80      	pop	{r7, pc}
 80193a6:	bf00      	nop

080193a8 <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
 80193a8:	b580      	push	{r7, lr}
 80193aa:	b082      	sub	sp, #8
 80193ac:	af00      	add	r7, sp, #0
 80193ae:	6078      	str	r0, [r7, #4]
 80193b0:	6039      	str	r1, [r7, #0]
    return font_p->get_glyph_bitmap(font_p, letter);
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	685b      	ldr	r3, [r3, #4]
 80193b6:	6839      	ldr	r1, [r7, #0]
 80193b8:	6878      	ldr	r0, [r7, #4]
 80193ba:	4798      	blx	r3
 80193bc:	4603      	mov	r3, r0
}
 80193be:	4618      	mov	r0, r3
 80193c0:	3708      	adds	r7, #8
 80193c2:	46bd      	mov	sp, r7
 80193c4:	bd80      	pop	{r7, pc}

080193c6 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
 80193c6:	b590      	push	{r4, r7, lr}
 80193c8:	b085      	sub	sp, #20
 80193ca:	af00      	add	r7, sp, #0
 80193cc:	60f8      	str	r0, [r7, #12]
 80193ce:	60b9      	str	r1, [r7, #8]
 80193d0:	607a      	str	r2, [r7, #4]
 80193d2:	603b      	str	r3, [r7, #0]
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 80193d4:	68fb      	ldr	r3, [r7, #12]
 80193d6:	681c      	ldr	r4, [r3, #0]
 80193d8:	683b      	ldr	r3, [r7, #0]
 80193da:	687a      	ldr	r2, [r7, #4]
 80193dc:	68b9      	ldr	r1, [r7, #8]
 80193de:	68f8      	ldr	r0, [r7, #12]
 80193e0:	47a0      	blx	r4
 80193e2:	4603      	mov	r3, r0
}
 80193e4:	4618      	mov	r0, r3
 80193e6:	3714      	adds	r7, #20
 80193e8:	46bd      	mov	sp, r7
 80193ea:	bd90      	pop	{r4, r7, pc}

080193ec <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b088      	sub	sp, #32
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	60f8      	str	r0, [r7, #12]
 80193f4:	60b9      	str	r1, [r7, #8]
 80193f6:	607a      	str	r2, [r7, #4]
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 80193f8:	f107 0110 	add.w	r1, r7, #16
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	68ba      	ldr	r2, [r7, #8]
 8019400:	68f8      	ldr	r0, [r7, #12]
 8019402:	f7ff ffe0 	bl	80193c6 <lv_font_get_glyph_dsc>
 8019406:	4603      	mov	r3, r0
 8019408:	77fb      	strb	r3, [r7, #31]
    if(ret) return g.adv_w;
 801940a:	7ffb      	ldrb	r3, [r7, #31]
 801940c:	2b00      	cmp	r3, #0
 801940e:	d001      	beq.n	8019414 <lv_font_get_glyph_width+0x28>
 8019410:	8a3b      	ldrh	r3, [r7, #16]
 8019412:	e000      	b.n	8019416 <lv_font_get_glyph_width+0x2a>
    else return 0;
 8019414:	2300      	movs	r3, #0
}
 8019416:	4618      	mov	r0, r3
 8019418:	3720      	adds	r7, #32
 801941a:	46bd      	mov	sp, r7
 801941c:	bd80      	pop	{r7, pc}
	...

08019420 <lv_font_get_bitmap_fmt_txt>:
 * @param font pointer to font
 * @param unicode_letter an unicode letter which bitmap should be get
 * @return pointer to the bitmap or NULL if not found
 */
const uint8_t * lv_font_get_bitmap_fmt_txt(const lv_font_t * font, uint32_t unicode_letter)
{
 8019420:	b5b0      	push	{r4, r5, r7, lr}
 8019422:	b08c      	sub	sp, #48	; 0x30
 8019424:	af02      	add	r7, sp, #8
 8019426:	6078      	str	r0, [r7, #4]
 8019428:	6039      	str	r1, [r7, #0]
    if(unicode_letter == '\t') unicode_letter = ' ';
 801942a:	683b      	ldr	r3, [r7, #0]
 801942c:	2b09      	cmp	r3, #9
 801942e:	d101      	bne.n	8019434 <lv_font_get_bitmap_fmt_txt+0x14>
 8019430:	2320      	movs	r3, #32
 8019432:	603b      	str	r3, [r7, #0]

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	691b      	ldr	r3, [r3, #16]
 8019438:	623b      	str	r3, [r7, #32]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 801943a:	6839      	ldr	r1, [r7, #0]
 801943c:	6878      	ldr	r0, [r7, #4]
 801943e:	f000 f947 	bl	80196d0 <get_glyph_dsc_id>
 8019442:	61f8      	str	r0, [r7, #28]
    if(!gid) return NULL;
 8019444:	69fb      	ldr	r3, [r7, #28]
 8019446:	2b00      	cmp	r3, #0
 8019448:	d101      	bne.n	801944e <lv_font_get_bitmap_fmt_txt+0x2e>
 801944a:	2300      	movs	r3, #0
 801944c:	e09b      	b.n	8019586 <lv_font_get_bitmap_fmt_txt+0x166>

    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 801944e:	6a3b      	ldr	r3, [r7, #32]
 8019450:	685a      	ldr	r2, [r3, #4]
 8019452:	69fb      	ldr	r3, [r7, #28]
 8019454:	00db      	lsls	r3, r3, #3
 8019456:	4413      	add	r3, r2
 8019458:	61bb      	str	r3, [r7, #24]

    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 801945a:	6a3b      	ldr	r3, [r7, #32]
 801945c:	7cdb      	ldrb	r3, [r3, #19]
 801945e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019462:	b2db      	uxtb	r3, r3
 8019464:	2b00      	cmp	r3, #0
 8019466:	d107      	bne.n	8019478 <lv_font_get_bitmap_fmt_txt+0x58>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 8019468:	6a3b      	ldr	r3, [r7, #32]
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	69ba      	ldr	r2, [r7, #24]
 801946e:	6812      	ldr	r2, [r2, #0]
 8019470:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8019474:	4413      	add	r3, r2
 8019476:	e086      	b.n	8019586 <lv_font_get_bitmap_fmt_txt+0x166>
    }
    /*Handle compressed bitmap*/
    else {
#if LV_USE_FONT_COMPRESSED
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
 8019478:	69bb      	ldr	r3, [r7, #24]
 801947a:	791b      	ldrb	r3, [r3, #4]
 801947c:	461a      	mov	r2, r3
 801947e:	69bb      	ldr	r3, [r7, #24]
 8019480:	795b      	ldrb	r3, [r3, #5]
 8019482:	fb03 f302 	mul.w	r3, r3, r2
 8019486:	617b      	str	r3, [r7, #20]
        if(gsize == 0) return NULL;
 8019488:	697b      	ldr	r3, [r7, #20]
 801948a:	2b00      	cmp	r3, #0
 801948c:	d101      	bne.n	8019492 <lv_font_get_bitmap_fmt_txt+0x72>
 801948e:	2300      	movs	r3, #0
 8019490:	e079      	b.n	8019586 <lv_font_get_bitmap_fmt_txt+0x166>

        uint32_t buf_size = gsize;
 8019492:	697b      	ldr	r3, [r7, #20]
 8019494:	627b      	str	r3, [r7, #36]	; 0x24
        /*Compute memory size needed to hold decompressed glyph, rounding up*/
        switch(fdsc->bpp) {
 8019496:	6a3b      	ldr	r3, [r7, #32]
 8019498:	7cdb      	ldrb	r3, [r3, #19]
 801949a:	f3c3 0343 	ubfx	r3, r3, #1, #4
 801949e:	b2db      	uxtb	r3, r3
 80194a0:	3b01      	subs	r3, #1
 80194a2:	2b03      	cmp	r3, #3
 80194a4:	d81e      	bhi.n	80194e4 <lv_font_get_bitmap_fmt_txt+0xc4>
 80194a6:	a201      	add	r2, pc, #4	; (adr r2, 80194ac <lv_font_get_bitmap_fmt_txt+0x8c>)
 80194a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194ac:	080194bd 	.word	0x080194bd
 80194b0:	080194c7 	.word	0x080194c7
 80194b4:	080194d1 	.word	0x080194d1
 80194b8:	080194db 	.word	0x080194db
            case 1:
                buf_size = (gsize + 7) >> 3;
 80194bc:	697b      	ldr	r3, [r7, #20]
 80194be:	3307      	adds	r3, #7
 80194c0:	08db      	lsrs	r3, r3, #3
 80194c2:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80194c4:	e00e      	b.n	80194e4 <lv_font_get_bitmap_fmt_txt+0xc4>
            case 2:
                buf_size = (gsize + 3) >> 2;
 80194c6:	697b      	ldr	r3, [r7, #20]
 80194c8:	3303      	adds	r3, #3
 80194ca:	089b      	lsrs	r3, r3, #2
 80194cc:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80194ce:	e009      	b.n	80194e4 <lv_font_get_bitmap_fmt_txt+0xc4>
            case 3:
                buf_size = (gsize + 1) >> 1;
 80194d0:	697b      	ldr	r3, [r7, #20]
 80194d2:	3301      	adds	r3, #1
 80194d4:	085b      	lsrs	r3, r3, #1
 80194d6:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80194d8:	e004      	b.n	80194e4 <lv_font_get_bitmap_fmt_txt+0xc4>
            case 4:
                buf_size = (gsize + 1) >> 1;
 80194da:	697b      	ldr	r3, [r7, #20]
 80194dc:	3301      	adds	r3, #1
 80194de:	085b      	lsrs	r3, r3, #1
 80194e0:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80194e2:	bf00      	nop
        }

        if(_lv_mem_get_size(LV_GC_ROOT(_lv_font_decompr_buf)) < buf_size) {
 80194e4:	4b2a      	ldr	r3, [pc, #168]	; (8019590 <lv_font_get_bitmap_fmt_txt+0x170>)
 80194e6:	681b      	ldr	r3, [r3, #0]
 80194e8:	4618      	mov	r0, r3
 80194ea:	f003 f9f7 	bl	801c8dc <_lv_mem_get_size>
 80194ee:	4602      	mov	r2, r0
 80194f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194f2:	4293      	cmp	r3, r2
 80194f4:	d920      	bls.n	8019538 <lv_font_get_bitmap_fmt_txt+0x118>
            uint8_t * tmp = lv_mem_realloc(LV_GC_ROOT(_lv_font_decompr_buf), buf_size);
 80194f6:	4b26      	ldr	r3, [pc, #152]	; (8019590 <lv_font_get_bitmap_fmt_txt+0x170>)
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80194fc:	4618      	mov	r0, r3
 80194fe:	f003 f949 	bl	801c794 <lv_mem_realloc>
 8019502:	6138      	str	r0, [r7, #16]
            LV_ASSERT_MEM(tmp);
 8019504:	6938      	ldr	r0, [r7, #16]
 8019506:	f002 fb19 	bl	801bb3c <lv_debug_check_null>
 801950a:	4603      	mov	r3, r0
 801950c:	f083 0301 	eor.w	r3, r3, #1
 8019510:	b2db      	uxtb	r3, r3
 8019512:	2b00      	cmp	r3, #0
 8019514:	d008      	beq.n	8019528 <lv_font_get_bitmap_fmt_txt+0x108>
 8019516:	693b      	ldr	r3, [r7, #16]
 8019518:	f04f 0400 	mov.w	r4, #0
 801951c:	461a      	mov	r2, r3
 801951e:	4623      	mov	r3, r4
 8019520:	481c      	ldr	r0, [pc, #112]	; (8019594 <lv_font_get_bitmap_fmt_txt+0x174>)
 8019522:	f002 fb1b 	bl	801bb5c <lv_debug_log_error>
 8019526:	e7fe      	b.n	8019526 <lv_font_get_bitmap_fmt_txt+0x106>
            if(tmp == NULL) return NULL;
 8019528:	693b      	ldr	r3, [r7, #16]
 801952a:	2b00      	cmp	r3, #0
 801952c:	d101      	bne.n	8019532 <lv_font_get_bitmap_fmt_txt+0x112>
 801952e:	2300      	movs	r3, #0
 8019530:	e029      	b.n	8019586 <lv_font_get_bitmap_fmt_txt+0x166>
            LV_GC_ROOT(_lv_font_decompr_buf) = tmp;
 8019532:	4a17      	ldr	r2, [pc, #92]	; (8019590 <lv_font_get_bitmap_fmt_txt+0x170>)
 8019534:	693b      	ldr	r3, [r7, #16]
 8019536:	6013      	str	r3, [r2, #0]
        }

        bool prefilter = fdsc->bitmap_format == LV_FONT_FMT_TXT_COMPRESSED ? true : false;
 8019538:	6a3b      	ldr	r3, [r7, #32]
 801953a:	7cdb      	ldrb	r3, [r3, #19]
 801953c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019540:	b2db      	uxtb	r3, r3
 8019542:	2b40      	cmp	r3, #64	; 0x40
 8019544:	bf0c      	ite	eq
 8019546:	2301      	moveq	r3, #1
 8019548:	2300      	movne	r3, #0
 801954a:	73fb      	strb	r3, [r7, #15]
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 801954c:	6a3b      	ldr	r3, [r7, #32]
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	69ba      	ldr	r2, [r7, #24]
 8019552:	6812      	ldr	r2, [r2, #0]
 8019554:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8019558:	1898      	adds	r0, r3, r2
 801955a:	4b0d      	ldr	r3, [pc, #52]	; (8019590 <lv_font_get_bitmap_fmt_txt+0x170>)
 801955c:	6819      	ldr	r1, [r3, #0]
 801955e:	69bb      	ldr	r3, [r7, #24]
 8019560:	791b      	ldrb	r3, [r3, #4]
 8019562:	b21a      	sxth	r2, r3
 8019564:	69bb      	ldr	r3, [r7, #24]
 8019566:	795b      	ldrb	r3, [r3, #5]
 8019568:	b21c      	sxth	r4, r3
                   (uint8_t)fdsc->bpp, prefilter);
 801956a:	6a3b      	ldr	r3, [r7, #32]
 801956c:	7cdb      	ldrb	r3, [r3, #19]
 801956e:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8019572:	b2db      	uxtb	r3, r3
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
 8019574:	461d      	mov	r5, r3
 8019576:	7bfb      	ldrb	r3, [r7, #15]
 8019578:	9301      	str	r3, [sp, #4]
 801957a:	9500      	str	r5, [sp, #0]
 801957c:	4623      	mov	r3, r4
 801957e:	f000 fac9 	bl	8019b14 <decompress>
        return LV_GC_ROOT(_lv_font_decompr_buf);
 8019582:	4b03      	ldr	r3, [pc, #12]	; (8019590 <lv_font_get_bitmap_fmt_txt+0x170>)
 8019584:	681b      	ldr	r3, [r3, #0]
#endif
    }

    /*If not returned earlier then the letter is not found in this font*/
    return NULL;
}
 8019586:	4618      	mov	r0, r3
 8019588:	3728      	adds	r7, #40	; 0x28
 801958a:	46bd      	mov	sp, r7
 801958c:	bdb0      	pop	{r4, r5, r7, pc}
 801958e:	bf00      	nop
 8019590:	2002178c 	.word	0x2002178c
 8019594:	0802d838 	.word	0x0802d838

08019598 <lv_font_get_glyph_dsc_fmt_txt>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc_fmt_txt(const lv_font_t * font, lv_font_glyph_dsc_t * dsc_out, uint32_t unicode_letter,
                                   uint32_t unicode_letter_next)
{
 8019598:	b580      	push	{r7, lr}
 801959a:	b08c      	sub	sp, #48	; 0x30
 801959c:	af00      	add	r7, sp, #0
 801959e:	60f8      	str	r0, [r7, #12]
 80195a0:	60b9      	str	r1, [r7, #8]
 80195a2:	607a      	str	r2, [r7, #4]
 80195a4:	603b      	str	r3, [r7, #0]
    bool is_tab = false;
 80195a6:	2300      	movs	r3, #0
 80195a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(unicode_letter == '\t') {
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	2b09      	cmp	r3, #9
 80195b0:	d104      	bne.n	80195bc <lv_font_get_glyph_dsc_fmt_txt+0x24>
        unicode_letter = ' ';
 80195b2:	2320      	movs	r3, #32
 80195b4:	607b      	str	r3, [r7, #4]
        is_tab = true;
 80195b6:	2301      	movs	r3, #1
 80195b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	691b      	ldr	r3, [r3, #16]
 80195c0:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 80195c2:	6879      	ldr	r1, [r7, #4]
 80195c4:	68f8      	ldr	r0, [r7, #12]
 80195c6:	f000 f883 	bl	80196d0 <get_glyph_dsc_id>
 80195ca:	6238      	str	r0, [r7, #32]
    if(!gid) return false;
 80195cc:	6a3b      	ldr	r3, [r7, #32]
 80195ce:	2b00      	cmp	r3, #0
 80195d0:	d101      	bne.n	80195d6 <lv_font_get_glyph_dsc_fmt_txt+0x3e>
 80195d2:	2300      	movs	r3, #0
 80195d4:	e066      	b.n	80196a4 <lv_font_get_glyph_dsc_fmt_txt+0x10c>

    int8_t kvalue = 0;
 80195d6:	2300      	movs	r3, #0
 80195d8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if(fdsc->kern_dsc) {
 80195dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195de:	68db      	ldr	r3, [r3, #12]
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d00f      	beq.n	8019604 <lv_font_get_glyph_dsc_fmt_txt+0x6c>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
 80195e4:	6839      	ldr	r1, [r7, #0]
 80195e6:	68f8      	ldr	r0, [r7, #12]
 80195e8:	f000 f872 	bl	80196d0 <get_glyph_dsc_id>
 80195ec:	61f8      	str	r0, [r7, #28]
        if(gid_next) {
 80195ee:	69fb      	ldr	r3, [r7, #28]
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d007      	beq.n	8019604 <lv_font_get_glyph_dsc_fmt_txt+0x6c>
            kvalue = get_kern_value(font, gid, gid_next);
 80195f4:	69fa      	ldr	r2, [r7, #28]
 80195f6:	6a39      	ldr	r1, [r7, #32]
 80195f8:	68f8      	ldr	r0, [r7, #12]
 80195fa:	f000 f99b 	bl	8019934 <get_kern_value>
 80195fe:	4603      	mov	r3, r0
 8019600:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        }
    }

    /*Put together a glyph dsc*/
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8019604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019606:	685a      	ldr	r2, [r3, #4]
 8019608:	6a3b      	ldr	r3, [r7, #32]
 801960a:	00db      	lsls	r3, r3, #3
 801960c:	4413      	add	r3, r2
 801960e:	61bb      	str	r3, [r7, #24]

    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8019610:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8019614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019616:	8a12      	ldrh	r2, [r2, #16]
 8019618:	fb02 f303 	mul.w	r3, r2, r3
 801961c:	111b      	asrs	r3, r3, #4
 801961e:	617b      	str	r3, [r7, #20]

    uint32_t adv_w = gdsc->adv_w;
 8019620:	69bb      	ldr	r3, [r7, #24]
 8019622:	885b      	ldrh	r3, [r3, #2]
 8019624:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8019628:	b29b      	uxth	r3, r3
 801962a:	62bb      	str	r3, [r7, #40]	; 0x28
    if(is_tab) adv_w *= 2;
 801962c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019630:	2b00      	cmp	r3, #0
 8019632:	d002      	beq.n	801963a <lv_font_get_glyph_dsc_fmt_txt+0xa2>
 8019634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019636:	005b      	lsls	r3, r3, #1
 8019638:	62bb      	str	r3, [r7, #40]	; 0x28

    adv_w += kv;
 801963a:	697b      	ldr	r3, [r7, #20]
 801963c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801963e:	4413      	add	r3, r2
 8019640:	62bb      	str	r3, [r7, #40]	; 0x28
    adv_w  = (adv_w + (1 << 3)) >> 4;
 8019642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019644:	3308      	adds	r3, #8
 8019646:	091b      	lsrs	r3, r3, #4
 8019648:	62bb      	str	r3, [r7, #40]	; 0x28

    dsc_out->adv_w = adv_w;
 801964a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801964c:	b29a      	uxth	r2, r3
 801964e:	68bb      	ldr	r3, [r7, #8]
 8019650:	801a      	strh	r2, [r3, #0]
    dsc_out->box_h = gdsc->box_h;
 8019652:	69bb      	ldr	r3, [r7, #24]
 8019654:	795b      	ldrb	r3, [r3, #5]
 8019656:	b29a      	uxth	r2, r3
 8019658:	68bb      	ldr	r3, [r7, #8]
 801965a:	809a      	strh	r2, [r3, #4]
    dsc_out->box_w = gdsc->box_w;
 801965c:	69bb      	ldr	r3, [r7, #24]
 801965e:	791b      	ldrb	r3, [r3, #4]
 8019660:	b29a      	uxth	r2, r3
 8019662:	68bb      	ldr	r3, [r7, #8]
 8019664:	805a      	strh	r2, [r3, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 8019666:	69bb      	ldr	r3, [r7, #24]
 8019668:	f993 3006 	ldrsb.w	r3, [r3, #6]
 801966c:	b21a      	sxth	r2, r3
 801966e:	68bb      	ldr	r3, [r7, #8]
 8019670:	80da      	strh	r2, [r3, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
 8019672:	69bb      	ldr	r3, [r7, #24]
 8019674:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8019678:	b21a      	sxth	r2, r3
 801967a:	68bb      	ldr	r3, [r7, #8]
 801967c:	811a      	strh	r2, [r3, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 801967e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019680:	7cdb      	ldrb	r3, [r3, #19]
 8019682:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8019686:	b2db      	uxtb	r3, r3
 8019688:	461a      	mov	r2, r3
 801968a:	68bb      	ldr	r3, [r7, #8]
 801968c:	729a      	strb	r2, [r3, #10]

    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 801968e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019692:	2b00      	cmp	r3, #0
 8019694:	d005      	beq.n	80196a2 <lv_font_get_glyph_dsc_fmt_txt+0x10a>
 8019696:	68bb      	ldr	r3, [r7, #8]
 8019698:	885b      	ldrh	r3, [r3, #2]
 801969a:	005b      	lsls	r3, r3, #1
 801969c:	b29a      	uxth	r2, r3
 801969e:	68bb      	ldr	r3, [r7, #8]
 80196a0:	805a      	strh	r2, [r3, #2]

    return true;
 80196a2:	2301      	movs	r3, #1
}
 80196a4:	4618      	mov	r0, r3
 80196a6:	3730      	adds	r7, #48	; 0x30
 80196a8:	46bd      	mov	sp, r7
 80196aa:	bd80      	pop	{r7, pc}

080196ac <_lv_font_clean_up_fmt_txt>:

/**
 * Free the allocated memories.
 */
void _lv_font_clean_up_fmt_txt(void)
{
 80196ac:	b580      	push	{r7, lr}
 80196ae:	af00      	add	r7, sp, #0
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
 80196b0:	4b06      	ldr	r3, [pc, #24]	; (80196cc <_lv_font_clean_up_fmt_txt+0x20>)
 80196b2:	681b      	ldr	r3, [r3, #0]
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d007      	beq.n	80196c8 <_lv_font_clean_up_fmt_txt+0x1c>
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
 80196b8:	4b04      	ldr	r3, [pc, #16]	; (80196cc <_lv_font_clean_up_fmt_txt+0x20>)
 80196ba:	681b      	ldr	r3, [r3, #0]
 80196bc:	4618      	mov	r0, r3
 80196be:	f003 f813 	bl	801c6e8 <lv_mem_free>
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
 80196c2:	4b02      	ldr	r3, [pc, #8]	; (80196cc <_lv_font_clean_up_fmt_txt+0x20>)
 80196c4:	2200      	movs	r2, #0
 80196c6:	601a      	str	r2, [r3, #0]
    }
}
 80196c8:	bf00      	nop
 80196ca:	bd80      	pop	{r7, pc}
 80196cc:	2002178c 	.word	0x2002178c

080196d0 <get_glyph_dsc_id>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
{
 80196d0:	b590      	push	{r4, r7, lr}
 80196d2:	b091      	sub	sp, #68	; 0x44
 80196d4:	af02      	add	r7, sp, #8
 80196d6:	6078      	str	r0, [r7, #4]
 80196d8:	6039      	str	r1, [r7, #0]
    if(letter == '\0') return 0;
 80196da:	683b      	ldr	r3, [r7, #0]
 80196dc:	2b00      	cmp	r3, #0
 80196de:	d101      	bne.n	80196e4 <get_glyph_dsc_id+0x14>
 80196e0:	2300      	movs	r3, #0
 80196e2:	e121      	b.n	8019928 <get_glyph_dsc_id+0x258>

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	691b      	ldr	r3, [r3, #16]
 80196e8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*Check the cache first*/
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 80196ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196ec:	695b      	ldr	r3, [r3, #20]
 80196ee:	683a      	ldr	r2, [r7, #0]
 80196f0:	429a      	cmp	r2, r3
 80196f2:	d102      	bne.n	80196fa <get_glyph_dsc_id+0x2a>
 80196f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196f6:	699b      	ldr	r3, [r3, #24]
 80196f8:	e116      	b.n	8019928 <get_glyph_dsc_id+0x258>

    uint16_t i;
    for(i = 0; i < fdsc->cmap_num; i++) {
 80196fa:	2300      	movs	r3, #0
 80196fc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80196fe:	e102      	b.n	8019906 <get_glyph_dsc_id+0x236>

        /*Relative code point*/
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8019700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019702:	6899      	ldr	r1, [r3, #8]
 8019704:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019706:	4613      	mov	r3, r2
 8019708:	009b      	lsls	r3, r3, #2
 801970a:	4413      	add	r3, r2
 801970c:	009b      	lsls	r3, r3, #2
 801970e:	440b      	add	r3, r1
 8019710:	681b      	ldr	r3, [r3, #0]
 8019712:	683a      	ldr	r2, [r7, #0]
 8019714:	1ad3      	subs	r3, r2, r3
 8019716:	62bb      	str	r3, [r7, #40]	; 0x28
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8019718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801971a:	6899      	ldr	r1, [r3, #8]
 801971c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801971e:	4613      	mov	r3, r2
 8019720:	009b      	lsls	r3, r3, #2
 8019722:	4413      	add	r3, r2
 8019724:	009b      	lsls	r3, r3, #2
 8019726:	440b      	add	r3, r1
 8019728:	889b      	ldrh	r3, [r3, #4]
 801972a:	461a      	mov	r2, r3
 801972c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801972e:	4293      	cmp	r3, r2
 8019730:	d903      	bls.n	801973a <get_glyph_dsc_id+0x6a>
    for(i = 0; i < fdsc->cmap_num; i++) {
 8019732:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8019734:	3301      	adds	r3, #1
 8019736:	86fb      	strh	r3, [r7, #54]	; 0x36
 8019738:	e0e5      	b.n	8019906 <get_glyph_dsc_id+0x236>
        uint32_t glyph_id = 0;
 801973a:	2300      	movs	r3, #0
 801973c:	633b      	str	r3, [r7, #48]	; 0x30
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 801973e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019740:	6899      	ldr	r1, [r3, #8]
 8019742:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019744:	4613      	mov	r3, r2
 8019746:	009b      	lsls	r3, r3, #2
 8019748:	4413      	add	r3, r2
 801974a:	009b      	lsls	r3, r3, #2
 801974c:	440b      	add	r3, r1
 801974e:	7c9b      	ldrb	r3, [r3, #18]
 8019750:	2b02      	cmp	r3, #2
 8019752:	d10d      	bne.n	8019770 <get_glyph_dsc_id+0xa0>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 8019754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019756:	6899      	ldr	r1, [r3, #8]
 8019758:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801975a:	4613      	mov	r3, r2
 801975c:	009b      	lsls	r3, r3, #2
 801975e:	4413      	add	r3, r2
 8019760:	009b      	lsls	r3, r3, #2
 8019762:	440b      	add	r3, r1
 8019764:	88db      	ldrh	r3, [r3, #6]
 8019766:	461a      	mov	r2, r3
 8019768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801976a:	4413      	add	r3, r2
 801976c:	633b      	str	r3, [r7, #48]	; 0x30
 801976e:	e0c2      	b.n	80198f6 <get_glyph_dsc_id+0x226>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 8019770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019772:	6899      	ldr	r1, [r3, #8]
 8019774:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019776:	4613      	mov	r3, r2
 8019778:	009b      	lsls	r3, r3, #2
 801977a:	4413      	add	r3, r2
 801977c:	009b      	lsls	r3, r3, #2
 801977e:	440b      	add	r3, r1
 8019780:	7c9b      	ldrb	r3, [r3, #18]
 8019782:	2b00      	cmp	r3, #0
 8019784:	d11a      	bne.n	80197bc <get_glyph_dsc_id+0xec>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
 8019786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019788:	6899      	ldr	r1, [r3, #8]
 801978a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801978c:	4613      	mov	r3, r2
 801978e:	009b      	lsls	r3, r3, #2
 8019790:	4413      	add	r3, r2
 8019792:	009b      	lsls	r3, r3, #2
 8019794:	440b      	add	r3, r1
 8019796:	68db      	ldr	r3, [r3, #12]
 8019798:	613b      	str	r3, [r7, #16]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 801979a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801979c:	6899      	ldr	r1, [r3, #8]
 801979e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80197a0:	4613      	mov	r3, r2
 80197a2:	009b      	lsls	r3, r3, #2
 80197a4:	4413      	add	r3, r2
 80197a6:	009b      	lsls	r3, r3, #2
 80197a8:	440b      	add	r3, r1
 80197aa:	88db      	ldrh	r3, [r3, #6]
 80197ac:	4619      	mov	r1, r3
 80197ae:	693a      	ldr	r2, [r7, #16]
 80197b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197b2:	4413      	add	r3, r2
 80197b4:	781b      	ldrb	r3, [r3, #0]
 80197b6:	440b      	add	r3, r1
 80197b8:	633b      	str	r3, [r7, #48]	; 0x30
 80197ba:	e09c      	b.n	80198f6 <get_glyph_dsc_id+0x226>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 80197bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197be:	6899      	ldr	r1, [r3, #8]
 80197c0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80197c2:	4613      	mov	r3, r2
 80197c4:	009b      	lsls	r3, r3, #2
 80197c6:	4413      	add	r3, r2
 80197c8:	009b      	lsls	r3, r3, #2
 80197ca:	440b      	add	r3, r1
 80197cc:	7c9b      	ldrb	r3, [r3, #18]
 80197ce:	2b03      	cmp	r3, #3
 80197d0:	d13c      	bne.n	801984c <get_glyph_dsc_id+0x17c>
            uint16_t key = rcp;
 80197d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197d4:	b29b      	uxth	r3, r3
 80197d6:	81fb      	strh	r3, [r7, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 80197d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197da:	6899      	ldr	r1, [r3, #8]
 80197dc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80197de:	4613      	mov	r3, r2
 80197e0:	009b      	lsls	r3, r3, #2
 80197e2:	4413      	add	r3, r2
 80197e4:	009b      	lsls	r3, r3, #2
 80197e6:	440b      	add	r3, r1
 80197e8:	689c      	ldr	r4, [r3, #8]
 80197ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197ec:	6899      	ldr	r1, [r3, #8]
 80197ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80197f0:	4613      	mov	r3, r2
 80197f2:	009b      	lsls	r3, r3, #2
 80197f4:	4413      	add	r3, r2
 80197f6:	009b      	lsls	r3, r3, #2
 80197f8:	440b      	add	r3, r1
 80197fa:	8a1b      	ldrh	r3, [r3, #16]
 80197fc:	461a      	mov	r2, r3
 80197fe:	f107 000e 	add.w	r0, r7, #14
 8019802:	4b4b      	ldr	r3, [pc, #300]	; (8019930 <get_glyph_dsc_id+0x260>)
 8019804:	9300      	str	r3, [sp, #0]
 8019806:	2302      	movs	r3, #2
 8019808:	4621      	mov	r1, r4
 801980a:	f004 fd61 	bl	801e2d0 <_lv_utils_bsearch>
 801980e:	61b8      	str	r0, [r7, #24]
                                             sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);

            if(p) {
 8019810:	69bb      	ldr	r3, [r7, #24]
 8019812:	2b00      	cmp	r3, #0
 8019814:	d06f      	beq.n	80198f6 <get_glyph_dsc_id+0x226>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8019816:	69b9      	ldr	r1, [r7, #24]
 8019818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801981a:	6898      	ldr	r0, [r3, #8]
 801981c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801981e:	4613      	mov	r3, r2
 8019820:	009b      	lsls	r3, r3, #2
 8019822:	4413      	add	r3, r2
 8019824:	009b      	lsls	r3, r3, #2
 8019826:	4403      	add	r3, r0
 8019828:	689b      	ldr	r3, [r3, #8]
 801982a:	1acb      	subs	r3, r1, r3
 801982c:	105b      	asrs	r3, r3, #1
 801982e:	617b      	str	r3, [r7, #20]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 8019830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019832:	6899      	ldr	r1, [r3, #8]
 8019834:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019836:	4613      	mov	r3, r2
 8019838:	009b      	lsls	r3, r3, #2
 801983a:	4413      	add	r3, r2
 801983c:	009b      	lsls	r3, r3, #2
 801983e:	440b      	add	r3, r1
 8019840:	88db      	ldrh	r3, [r3, #6]
 8019842:	461a      	mov	r2, r3
 8019844:	697b      	ldr	r3, [r7, #20]
 8019846:	4413      	add	r3, r2
 8019848:	633b      	str	r3, [r7, #48]	; 0x30
 801984a:	e054      	b.n	80198f6 <get_glyph_dsc_id+0x226>
            }
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 801984c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801984e:	6899      	ldr	r1, [r3, #8]
 8019850:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019852:	4613      	mov	r3, r2
 8019854:	009b      	lsls	r3, r3, #2
 8019856:	4413      	add	r3, r2
 8019858:	009b      	lsls	r3, r3, #2
 801985a:	440b      	add	r3, r1
 801985c:	7c9b      	ldrb	r3, [r3, #18]
 801985e:	2b01      	cmp	r3, #1
 8019860:	d149      	bne.n	80198f6 <get_glyph_dsc_id+0x226>
            uint16_t key = rcp;
 8019862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019864:	b29b      	uxth	r3, r3
 8019866:	81bb      	strh	r3, [r7, #12]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8019868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801986a:	6899      	ldr	r1, [r3, #8]
 801986c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801986e:	4613      	mov	r3, r2
 8019870:	009b      	lsls	r3, r3, #2
 8019872:	4413      	add	r3, r2
 8019874:	009b      	lsls	r3, r3, #2
 8019876:	440b      	add	r3, r1
 8019878:	689c      	ldr	r4, [r3, #8]
 801987a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801987c:	6899      	ldr	r1, [r3, #8]
 801987e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019880:	4613      	mov	r3, r2
 8019882:	009b      	lsls	r3, r3, #2
 8019884:	4413      	add	r3, r2
 8019886:	009b      	lsls	r3, r3, #2
 8019888:	440b      	add	r3, r1
 801988a:	8a1b      	ldrh	r3, [r3, #16]
 801988c:	461a      	mov	r2, r3
 801988e:	f107 000c 	add.w	r0, r7, #12
 8019892:	4b27      	ldr	r3, [pc, #156]	; (8019930 <get_glyph_dsc_id+0x260>)
 8019894:	9300      	str	r3, [sp, #0]
 8019896:	2302      	movs	r3, #2
 8019898:	4621      	mov	r1, r4
 801989a:	f004 fd19 	bl	801e2d0 <_lv_utils_bsearch>
 801989e:	6278      	str	r0, [r7, #36]	; 0x24
                                             sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);

            if(p) {
 80198a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	d027      	beq.n	80198f6 <get_glyph_dsc_id+0x226>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 80198a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80198a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198aa:	6898      	ldr	r0, [r3, #8]
 80198ac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80198ae:	4613      	mov	r3, r2
 80198b0:	009b      	lsls	r3, r3, #2
 80198b2:	4413      	add	r3, r2
 80198b4:	009b      	lsls	r3, r3, #2
 80198b6:	4403      	add	r3, r0
 80198b8:	689b      	ldr	r3, [r3, #8]
 80198ba:	1acb      	subs	r3, r1, r3
 80198bc:	105b      	asrs	r3, r3, #1
 80198be:	623b      	str	r3, [r7, #32]
                const uint16_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
 80198c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198c2:	6899      	ldr	r1, [r3, #8]
 80198c4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80198c6:	4613      	mov	r3, r2
 80198c8:	009b      	lsls	r3, r3, #2
 80198ca:	4413      	add	r3, r2
 80198cc:	009b      	lsls	r3, r3, #2
 80198ce:	440b      	add	r3, r1
 80198d0:	68db      	ldr	r3, [r3, #12]
 80198d2:	61fb      	str	r3, [r7, #28]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 80198d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198d6:	6899      	ldr	r1, [r3, #8]
 80198d8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80198da:	4613      	mov	r3, r2
 80198dc:	009b      	lsls	r3, r3, #2
 80198de:	4413      	add	r3, r2
 80198e0:	009b      	lsls	r3, r3, #2
 80198e2:	440b      	add	r3, r1
 80198e4:	88db      	ldrh	r3, [r3, #6]
 80198e6:	4619      	mov	r1, r3
 80198e8:	6a3b      	ldr	r3, [r7, #32]
 80198ea:	005b      	lsls	r3, r3, #1
 80198ec:	69fa      	ldr	r2, [r7, #28]
 80198ee:	4413      	add	r3, r2
 80198f0:	881b      	ldrh	r3, [r3, #0]
 80198f2:	440b      	add	r3, r1
 80198f4:	633b      	str	r3, [r7, #48]	; 0x30
            }
        }

        /*Update the cache*/
        fdsc->last_letter = letter;
 80198f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198f8:	683a      	ldr	r2, [r7, #0]
 80198fa:	615a      	str	r2, [r3, #20]
        fdsc->last_glyph_id = glyph_id;
 80198fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019900:	619a      	str	r2, [r3, #24]
        return glyph_id;
 8019902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019904:	e010      	b.n	8019928 <get_glyph_dsc_id+0x258>
    for(i = 0; i < fdsc->cmap_num; i++) {
 8019906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019908:	8a5b      	ldrh	r3, [r3, #18]
 801990a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801990e:	b29b      	uxth	r3, r3
 8019910:	461a      	mov	r2, r3
 8019912:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8019914:	4293      	cmp	r3, r2
 8019916:	f4ff aef3 	bcc.w	8019700 <get_glyph_dsc_id+0x30>
    }

    fdsc->last_letter = letter;
 801991a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801991c:	683a      	ldr	r2, [r7, #0]
 801991e:	615a      	str	r2, [r3, #20]
    fdsc->last_glyph_id = 0;
 8019920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019922:	2200      	movs	r2, #0
 8019924:	619a      	str	r2, [r3, #24]
    return 0;
 8019926:	2300      	movs	r3, #0

}
 8019928:	4618      	mov	r0, r3
 801992a:	373c      	adds	r7, #60	; 0x3c
 801992c:	46bd      	mov	sp, r7
 801992e:	bd90      	pop	{r4, r7, pc}
 8019930:	0801a0e5 	.word	0x0801a0e5

08019934 <get_kern_value>:

static int8_t get_kern_value(const lv_font_t * font, uint32_t gid_left, uint32_t gid_right)
{
 8019934:	b580      	push	{r7, lr}
 8019936:	b094      	sub	sp, #80	; 0x50
 8019938:	af02      	add	r7, sp, #8
 801993a:	60f8      	str	r0, [r7, #12]
 801993c:	60b9      	str	r1, [r7, #8]
 801993e:	607a      	str	r2, [r7, #4]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 8019940:	68fb      	ldr	r3, [r7, #12]
 8019942:	691b      	ldr	r3, [r3, #16]
 8019944:	643b      	str	r3, [r7, #64]	; 0x40

    int8_t value = 0;
 8019946:	2300      	movs	r3, #0
 8019948:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if(fdsc->kern_classes == 0) {
 801994c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801994e:	7cdb      	ldrb	r3, [r3, #19]
 8019950:	f003 0320 	and.w	r3, r3, #32
 8019954:	b2db      	uxtb	r3, r3
 8019956:	2b00      	cmp	r3, #0
 8019958:	d160      	bne.n	8019a1c <get_kern_value+0xe8>
        /*Kern pairs*/
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 801995a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801995c:	68db      	ldr	r3, [r3, #12]
 801995e:	637b      	str	r3, [r7, #52]	; 0x34
        if(kdsc->glyph_ids_size == 0) {
 8019960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019962:	7adb      	ldrb	r3, [r3, #11]
 8019964:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019968:	b2db      	uxtb	r3, r3
 801996a:	2b00      	cmp	r3, #0
 801996c:	d129      	bne.n	80199c2 <get_kern_value+0x8e>
            /* Use binary search to find the kern value.
             * The pairs are ordered left_id first, then right_id secondly. */
            const uint16_t * g_ids = kdsc->glyph_ids;
 801996e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019970:	681b      	ldr	r3, [r3, #0]
 8019972:	627b      	str	r3, [r7, #36]	; 0x24
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	b29b      	uxth	r3, r3
 8019978:	021b      	lsls	r3, r3, #8
 801997a:	b29a      	uxth	r2, r3
 801997c:	68bb      	ldr	r3, [r7, #8]
 801997e:	b29b      	uxth	r3, r3
 8019980:	4413      	add	r3, r2
 8019982:	b29b      	uxth	r3, r3
 8019984:	837b      	strh	r3, [r7, #26]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8019986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019988:	689b      	ldr	r3, [r3, #8]
 801998a:	f3c3 031d 	ubfx	r3, r3, #0, #30
 801998e:	461a      	mov	r2, r3
 8019990:	f107 001a 	add.w	r0, r7, #26
 8019994:	4b39      	ldr	r3, [pc, #228]	; (8019a7c <get_kern_value+0x148>)
 8019996:	9300      	str	r3, [sp, #0]
 8019998:	2302      	movs	r3, #2
 801999a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801999c:	f004 fc98 	bl	801e2d0 <_lv_utils_bsearch>
 80199a0:	6238      	str	r0, [r7, #32]

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 80199a2:	6a3b      	ldr	r3, [r7, #32]
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d063      	beq.n	8019a70 <get_kern_value+0x13c>
                lv_uintptr_t ofs = kid_p - g_ids;
 80199a8:	6a3a      	ldr	r2, [r7, #32]
 80199aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199ac:	1ad3      	subs	r3, r2, r3
 80199ae:	105b      	asrs	r3, r3, #1
 80199b0:	61fb      	str	r3, [r7, #28]
                value = kdsc->values[ofs];
 80199b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199b4:	685a      	ldr	r2, [r3, #4]
 80199b6:	69fb      	ldr	r3, [r7, #28]
 80199b8:	4413      	add	r3, r2
 80199ba:	781b      	ldrb	r3, [r3, #0]
 80199bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80199c0:	e056      	b.n	8019a70 <get_kern_value+0x13c>
            }
        }
        else if(kdsc->glyph_ids_size == 1) {
 80199c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199c4:	7adb      	ldrb	r3, [r3, #11]
 80199c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80199ca:	b2db      	uxtb	r3, r3
 80199cc:	2b40      	cmp	r3, #64	; 0x40
 80199ce:	d14f      	bne.n	8019a70 <get_kern_value+0x13c>
            /* Use binary search to find the kern value.
             * The pairs are ordered left_id first, then right_id secondly. */
            const uint32_t * g_ids = kdsc->glyph_ids;
 80199d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199d2:	681b      	ldr	r3, [r3, #0]
 80199d4:	633b      	str	r3, [r7, #48]	; 0x30
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	041a      	lsls	r2, r3, #16
 80199da:	68bb      	ldr	r3, [r7, #8]
 80199dc:	4413      	add	r3, r2
 80199de:	617b      	str	r3, [r7, #20]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 80199e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199e2:	689b      	ldr	r3, [r3, #8]
 80199e4:	f3c3 031d 	ubfx	r3, r3, #0, #30
 80199e8:	461a      	mov	r2, r3
 80199ea:	f107 0014 	add.w	r0, r7, #20
 80199ee:	4b24      	ldr	r3, [pc, #144]	; (8019a80 <get_kern_value+0x14c>)
 80199f0:	9300      	str	r3, [sp, #0]
 80199f2:	2304      	movs	r3, #4
 80199f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80199f6:	f004 fc6b 	bl	801e2d0 <_lv_utils_bsearch>
 80199fa:	62f8      	str	r0, [r7, #44]	; 0x2c

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 80199fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199fe:	2b00      	cmp	r3, #0
 8019a00:	d036      	beq.n	8019a70 <get_kern_value+0x13c>
                lv_uintptr_t ofs = kid_p - g_ids;
 8019a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a06:	1ad3      	subs	r3, r2, r3
 8019a08:	109b      	asrs	r3, r3, #2
 8019a0a:	62bb      	str	r3, [r7, #40]	; 0x28
                value = kdsc->values[ofs];
 8019a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a0e:	685a      	ldr	r2, [r3, #4]
 8019a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a12:	4413      	add	r3, r2
 8019a14:	781b      	ldrb	r3, [r3, #0]
 8019a16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019a1a:	e029      	b.n	8019a70 <get_kern_value+0x13c>
            /*Invalid value*/
        }
    }
    else {
        /*Kern classes*/
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
 8019a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019a1e:	68db      	ldr	r3, [r3, #12]
 8019a20:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 8019a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a24:	685a      	ldr	r2, [r3, #4]
 8019a26:	68bb      	ldr	r3, [r7, #8]
 8019a28:	4413      	add	r3, r2
 8019a2a:	781b      	ldrb	r3, [r3, #0]
 8019a2c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 8019a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a32:	689a      	ldr	r2, [r3, #8]
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	4413      	add	r3, r2
 8019a38:	781b      	ldrb	r3, [r3, #0]
 8019a3a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

        /* If class = 0, kerning not exist for that glyph
         * else got the value form `class_pair_values` 2D array*/
        if(left_class > 0 && right_class > 0) {
 8019a3e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	d014      	beq.n	8019a70 <get_kern_value+0x13c>
 8019a46:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d010      	beq.n	8019a70 <get_kern_value+0x13c>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 8019a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8019a56:	3a01      	subs	r2, #1
 8019a58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019a5a:	7b49      	ldrb	r1, [r1, #13]
 8019a5c:	fb01 f102 	mul.w	r1, r1, r2
 8019a60:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8019a64:	3a01      	subs	r2, #1
 8019a66:	440a      	add	r2, r1
 8019a68:	4413      	add	r3, r2
 8019a6a:	781b      	ldrb	r3, [r3, #0]
 8019a6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }

    }
    return value;
 8019a70:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8019a74:	4618      	mov	r0, r3
 8019a76:	3748      	adds	r7, #72	; 0x48
 8019a78:	46bd      	mov	sp, r7
 8019a7a:	bd80      	pop	{r7, pc}
 8019a7c:	08019a85 	.word	0x08019a85
 8019a80:	08019acd 	.word	0x08019acd

08019a84 <kern_pair_8_compare>:

static int32_t kern_pair_8_compare(const void * ref, const void * element)
{
 8019a84:	b480      	push	{r7}
 8019a86:	b085      	sub	sp, #20
 8019a88:	af00      	add	r7, sp, #0
 8019a8a:	6078      	str	r0, [r7, #4]
 8019a8c:	6039      	str	r1, [r7, #0]
    const uint8_t * ref8_p = ref;
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	60fb      	str	r3, [r7, #12]
    const uint8_t * element8_p = element;
 8019a92:	683b      	ldr	r3, [r7, #0]
 8019a94:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 8019a96:	68fb      	ldr	r3, [r7, #12]
 8019a98:	781a      	ldrb	r2, [r3, #0]
 8019a9a:	68bb      	ldr	r3, [r7, #8]
 8019a9c:	781b      	ldrb	r3, [r3, #0]
 8019a9e:	429a      	cmp	r2, r3
 8019aa0:	d006      	beq.n	8019ab0 <kern_pair_8_compare+0x2c>
 8019aa2:	68fb      	ldr	r3, [r7, #12]
 8019aa4:	781b      	ldrb	r3, [r3, #0]
 8019aa6:	461a      	mov	r2, r3
 8019aa8:	68bb      	ldr	r3, [r7, #8]
 8019aaa:	781b      	ldrb	r3, [r3, #0]
 8019aac:	1ad3      	subs	r3, r2, r3
 8019aae:	e007      	b.n	8019ac0 <kern_pair_8_compare+0x3c>
    else return (int32_t) ref8_p[1] - element8_p[1];
 8019ab0:	68fb      	ldr	r3, [r7, #12]
 8019ab2:	3301      	adds	r3, #1
 8019ab4:	781b      	ldrb	r3, [r3, #0]
 8019ab6:	461a      	mov	r2, r3
 8019ab8:	68bb      	ldr	r3, [r7, #8]
 8019aba:	3301      	adds	r3, #1
 8019abc:	781b      	ldrb	r3, [r3, #0]
 8019abe:	1ad3      	subs	r3, r2, r3

}
 8019ac0:	4618      	mov	r0, r3
 8019ac2:	3714      	adds	r7, #20
 8019ac4:	46bd      	mov	sp, r7
 8019ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aca:	4770      	bx	lr

08019acc <kern_pair_16_compare>:

static int32_t kern_pair_16_compare(const void * ref, const void * element)
{
 8019acc:	b480      	push	{r7}
 8019ace:	b085      	sub	sp, #20
 8019ad0:	af00      	add	r7, sp, #0
 8019ad2:	6078      	str	r0, [r7, #4]
 8019ad4:	6039      	str	r1, [r7, #0]
    const uint16_t * ref16_p = ref;
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	60fb      	str	r3, [r7, #12]
    const uint16_t * element16_p = element;
 8019ada:	683b      	ldr	r3, [r7, #0]
 8019adc:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 8019ade:	68fb      	ldr	r3, [r7, #12]
 8019ae0:	881a      	ldrh	r2, [r3, #0]
 8019ae2:	68bb      	ldr	r3, [r7, #8]
 8019ae4:	881b      	ldrh	r3, [r3, #0]
 8019ae6:	429a      	cmp	r2, r3
 8019ae8:	d006      	beq.n	8019af8 <kern_pair_16_compare+0x2c>
 8019aea:	68fb      	ldr	r3, [r7, #12]
 8019aec:	881b      	ldrh	r3, [r3, #0]
 8019aee:	461a      	mov	r2, r3
 8019af0:	68bb      	ldr	r3, [r7, #8]
 8019af2:	881b      	ldrh	r3, [r3, #0]
 8019af4:	1ad3      	subs	r3, r2, r3
 8019af6:	e007      	b.n	8019b08 <kern_pair_16_compare+0x3c>
    else return (int32_t) ref16_p[1] - element16_p[1];
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	3302      	adds	r3, #2
 8019afc:	881b      	ldrh	r3, [r3, #0]
 8019afe:	461a      	mov	r2, r3
 8019b00:	68bb      	ldr	r3, [r7, #8]
 8019b02:	3302      	adds	r3, #2
 8019b04:	881b      	ldrh	r3, [r3, #0]
 8019b06:	1ad3      	subs	r3, r2, r3
}
 8019b08:	4618      	mov	r0, r3
 8019b0a:	3714      	adds	r7, #20
 8019b0c:	46bd      	mov	sp, r7
 8019b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b12:	4770      	bx	lr

08019b14 <decompress>:
 * @param px_num number of pixels in the glyph (width * height)
 * @param bpp bit per pixel (bpp = 3 will be converted to bpp = 4)
 * @param prefilter true: the lines are XORed
 */
static void decompress(const uint8_t * in, uint8_t * out, lv_coord_t w, lv_coord_t h, uint8_t bpp, bool prefilter)
{
 8019b14:	b580      	push	{r7, lr}
 8019b16:	b08a      	sub	sp, #40	; 0x28
 8019b18:	af00      	add	r7, sp, #0
 8019b1a:	60f8      	str	r0, [r7, #12]
 8019b1c:	60b9      	str	r1, [r7, #8]
 8019b1e:	4611      	mov	r1, r2
 8019b20:	461a      	mov	r2, r3
 8019b22:	460b      	mov	r3, r1
 8019b24:	80fb      	strh	r3, [r7, #6]
 8019b26:	4613      	mov	r3, r2
 8019b28:	80bb      	strh	r3, [r7, #4]
    uint32_t wrp = 0;
 8019b2a:	2300      	movs	r3, #0
 8019b2c:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t wr_size = bpp;
 8019b2e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8019b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(bpp == 3) wr_size = 4;
 8019b36:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8019b3a:	2b03      	cmp	r3, #3
 8019b3c:	d102      	bne.n	8019b44 <decompress+0x30>
 8019b3e:	2304      	movs	r3, #4
 8019b40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    rle_init(in, bpp);
 8019b44:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8019b48:	4619      	mov	r1, r3
 8019b4a:	68f8      	ldr	r0, [r7, #12]
 8019b4c:	f000 f9c4 	bl	8019ed8 <rle_init>

    uint8_t * line_buf1 = _lv_mem_buf_get(w);
 8019b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019b54:	4618      	mov	r0, r3
 8019b56:	f002 fedf 	bl	801c918 <_lv_mem_buf_get>
 8019b5a:	6178      	str	r0, [r7, #20]

    uint8_t * line_buf2 = NULL;
 8019b5c:	2300      	movs	r3, #0
 8019b5e:	61fb      	str	r3, [r7, #28]

    if(prefilter) {
 8019b60:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	d005      	beq.n	8019b74 <decompress+0x60>
        line_buf2 = _lv_mem_buf_get(w);
 8019b68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019b6c:	4618      	mov	r0, r3
 8019b6e:	f002 fed3 	bl	801c918 <_lv_mem_buf_get>
 8019b72:	61f8      	str	r0, [r7, #28]
    }

    decompress_line(line_buf1, w);
 8019b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019b78:	4619      	mov	r1, r3
 8019b7a:	6978      	ldr	r0, [r7, #20]
 8019b7c:	f000 f898 	bl	8019cb0 <decompress_line>

    lv_coord_t y;
    lv_coord_t x;

    for(x = 0; x < w; x++) {
 8019b80:	2300      	movs	r3, #0
 8019b82:	833b      	strh	r3, [r7, #24]
 8019b84:	e015      	b.n	8019bb2 <decompress+0x9e>
        bits_write(out, wrp, line_buf1[x], bpp);
 8019b86:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019b8a:	697a      	ldr	r2, [r7, #20]
 8019b8c:	4413      	add	r3, r2
 8019b8e:	781a      	ldrb	r2, [r3, #0]
 8019b90:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8019b94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019b96:	68b8      	ldr	r0, [r7, #8]
 8019b98:	f000 f922 	bl	8019de0 <bits_write>
        wrp += wr_size;
 8019b9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ba2:	4413      	add	r3, r2
 8019ba4:	627b      	str	r3, [r7, #36]	; 0x24
    for(x = 0; x < w; x++) {
 8019ba6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019baa:	b29b      	uxth	r3, r3
 8019bac:	3301      	adds	r3, #1
 8019bae:	b29b      	uxth	r3, r3
 8019bb0:	833b      	strh	r3, [r7, #24]
 8019bb2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8019bb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019bba:	429a      	cmp	r2, r3
 8019bbc:	dbe3      	blt.n	8019b86 <decompress+0x72>
    }

    for(y = 1; y < h; y++) {
 8019bbe:	2301      	movs	r3, #1
 8019bc0:	837b      	strh	r3, [r7, #26]
 8019bc2:	e065      	b.n	8019c90 <decompress+0x17c>
        if(prefilter) {
 8019bc4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d036      	beq.n	8019c3a <decompress+0x126>
            decompress_line(line_buf2, w);
 8019bcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019bd0:	4619      	mov	r1, r3
 8019bd2:	69f8      	ldr	r0, [r7, #28]
 8019bd4:	f000 f86c 	bl	8019cb0 <decompress_line>

            for(x = 0; x < w; x++) {
 8019bd8:	2300      	movs	r3, #0
 8019bda:	833b      	strh	r3, [r7, #24]
 8019bdc:	e026      	b.n	8019c2c <decompress+0x118>
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
 8019bde:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019be2:	69fa      	ldr	r2, [r7, #28]
 8019be4:	4413      	add	r3, r2
 8019be6:	7819      	ldrb	r1, [r3, #0]
 8019be8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019bec:	697a      	ldr	r2, [r7, #20]
 8019bee:	4413      	add	r3, r2
 8019bf0:	781a      	ldrb	r2, [r3, #0]
 8019bf2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019bf6:	6978      	ldr	r0, [r7, #20]
 8019bf8:	4403      	add	r3, r0
 8019bfa:	404a      	eors	r2, r1
 8019bfc:	b2d2      	uxtb	r2, r2
 8019bfe:	701a      	strb	r2, [r3, #0]
                bits_write(out, wrp, line_buf1[x], bpp);
 8019c00:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019c04:	697a      	ldr	r2, [r7, #20]
 8019c06:	4413      	add	r3, r2
 8019c08:	781a      	ldrb	r2, [r3, #0]
 8019c0a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8019c0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019c10:	68b8      	ldr	r0, [r7, #8]
 8019c12:	f000 f8e5 	bl	8019de0 <bits_write>
                wrp += wr_size;
 8019c16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c1c:	4413      	add	r3, r2
 8019c1e:	627b      	str	r3, [r7, #36]	; 0x24
            for(x = 0; x < w; x++) {
 8019c20:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019c24:	b29b      	uxth	r3, r3
 8019c26:	3301      	adds	r3, #1
 8019c28:	b29b      	uxth	r3, r3
 8019c2a:	833b      	strh	r3, [r7, #24]
 8019c2c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8019c30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019c34:	429a      	cmp	r2, r3
 8019c36:	dbd2      	blt.n	8019bde <decompress+0xca>
 8019c38:	e024      	b.n	8019c84 <decompress+0x170>
            }
        }
        else {
            decompress_line(line_buf1, w);
 8019c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019c3e:	4619      	mov	r1, r3
 8019c40:	6978      	ldr	r0, [r7, #20]
 8019c42:	f000 f835 	bl	8019cb0 <decompress_line>

            for(x = 0; x < w; x++) {
 8019c46:	2300      	movs	r3, #0
 8019c48:	833b      	strh	r3, [r7, #24]
 8019c4a:	e015      	b.n	8019c78 <decompress+0x164>
                bits_write(out, wrp, line_buf1[x], bpp);
 8019c4c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019c50:	697a      	ldr	r2, [r7, #20]
 8019c52:	4413      	add	r3, r2
 8019c54:	781a      	ldrb	r2, [r3, #0]
 8019c56:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8019c5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019c5c:	68b8      	ldr	r0, [r7, #8]
 8019c5e:	f000 f8bf 	bl	8019de0 <bits_write>
                wrp += wr_size;
 8019c62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c68:	4413      	add	r3, r2
 8019c6a:	627b      	str	r3, [r7, #36]	; 0x24
            for(x = 0; x < w; x++) {
 8019c6c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8019c70:	b29b      	uxth	r3, r3
 8019c72:	3301      	adds	r3, #1
 8019c74:	b29b      	uxth	r3, r3
 8019c76:	833b      	strh	r3, [r7, #24]
 8019c78:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8019c7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019c80:	429a      	cmp	r2, r3
 8019c82:	dbe3      	blt.n	8019c4c <decompress+0x138>
    for(y = 1; y < h; y++) {
 8019c84:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8019c88:	b29b      	uxth	r3, r3
 8019c8a:	3301      	adds	r3, #1
 8019c8c:	b29b      	uxth	r3, r3
 8019c8e:	837b      	strh	r3, [r7, #26]
 8019c90:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8019c94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8019c98:	429a      	cmp	r2, r3
 8019c9a:	db93      	blt.n	8019bc4 <decompress+0xb0>
            }
        }
    }

    _lv_mem_buf_release(line_buf1);
 8019c9c:	6978      	ldr	r0, [r7, #20]
 8019c9e:	f002 ff19 	bl	801cad4 <_lv_mem_buf_release>
    _lv_mem_buf_release(line_buf2);
 8019ca2:	69f8      	ldr	r0, [r7, #28]
 8019ca4:	f002 ff16 	bl	801cad4 <_lv_mem_buf_release>
}
 8019ca8:	bf00      	nop
 8019caa:	3728      	adds	r7, #40	; 0x28
 8019cac:	46bd      	mov	sp, r7
 8019cae:	bd80      	pop	{r7, pc}

08019cb0 <decompress_line>:
 * Decompress one line. Store one pixel per byte
 * @param out output buffer
 * @param w width of the line in pixel count
 */
static inline void decompress_line(uint8_t * out, lv_coord_t w)
{
 8019cb0:	b590      	push	{r4, r7, lr}
 8019cb2:	b085      	sub	sp, #20
 8019cb4:	af00      	add	r7, sp, #0
 8019cb6:	6078      	str	r0, [r7, #4]
 8019cb8:	460b      	mov	r3, r1
 8019cba:	807b      	strh	r3, [r7, #2]
    lv_coord_t i;
    for(i = 0; i < w; i++) {
 8019cbc:	2300      	movs	r3, #0
 8019cbe:	81fb      	strh	r3, [r7, #14]
 8019cc0:	e00d      	b.n	8019cde <decompress_line+0x2e>
        out[i] = rle_next();
 8019cc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019cc6:	687a      	ldr	r2, [r7, #4]
 8019cc8:	18d4      	adds	r4, r2, r3
 8019cca:	f000 f92f 	bl	8019f2c <rle_next>
 8019cce:	4603      	mov	r3, r0
 8019cd0:	7023      	strb	r3, [r4, #0]
    for(i = 0; i < w; i++) {
 8019cd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019cd6:	b29b      	uxth	r3, r3
 8019cd8:	3301      	adds	r3, #1
 8019cda:	b29b      	uxth	r3, r3
 8019cdc:	81fb      	strh	r3, [r7, #14]
 8019cde:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8019ce2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019ce6:	429a      	cmp	r2, r3
 8019ce8:	dbeb      	blt.n	8019cc2 <decompress_line+0x12>
    }
}
 8019cea:	bf00      	nop
 8019cec:	3714      	adds	r7, #20
 8019cee:	46bd      	mov	sp, r7
 8019cf0:	bd90      	pop	{r4, r7, pc}
	...

08019cf4 <get_bits>:
 * @param bit_pos index of the first bit to read.
 * @param len number of bits to read (must be <= 8).
 * @return the read bits
 */
static inline uint8_t get_bits(const uint8_t * in, uint32_t bit_pos, uint8_t len)
{
 8019cf4:	b480      	push	{r7}
 8019cf6:	b089      	sub	sp, #36	; 0x24
 8019cf8:	af00      	add	r7, sp, #0
 8019cfa:	60f8      	str	r0, [r7, #12]
 8019cfc:	60b9      	str	r1, [r7, #8]
 8019cfe:	4613      	mov	r3, r2
 8019d00:	71fb      	strb	r3, [r7, #7]
    uint8_t bit_mask;
    switch(len) {
 8019d02:	79fb      	ldrb	r3, [r7, #7]
 8019d04:	3b01      	subs	r3, #1
 8019d06:	2b07      	cmp	r3, #7
 8019d08:	d821      	bhi.n	8019d4e <get_bits+0x5a>
 8019d0a:	a201      	add	r2, pc, #4	; (adr r2, 8019d10 <get_bits+0x1c>)
 8019d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d10:	08019d31 	.word	0x08019d31
 8019d14:	08019d37 	.word	0x08019d37
 8019d18:	08019d3d 	.word	0x08019d3d
 8019d1c:	08019d43 	.word	0x08019d43
 8019d20:	08019d4f 	.word	0x08019d4f
 8019d24:	08019d4f 	.word	0x08019d4f
 8019d28:	08019d4f 	.word	0x08019d4f
 8019d2c:	08019d49 	.word	0x08019d49
        case 1:
            bit_mask = 0x1;
 8019d30:	2301      	movs	r3, #1
 8019d32:	77fb      	strb	r3, [r7, #31]
            break;
 8019d34:	e012      	b.n	8019d5c <get_bits+0x68>
        case 2:
            bit_mask = 0x3;
 8019d36:	2303      	movs	r3, #3
 8019d38:	77fb      	strb	r3, [r7, #31]
            break;
 8019d3a:	e00f      	b.n	8019d5c <get_bits+0x68>
        case 3:
            bit_mask = 0x7;
 8019d3c:	2307      	movs	r3, #7
 8019d3e:	77fb      	strb	r3, [r7, #31]
            break;
 8019d40:	e00c      	b.n	8019d5c <get_bits+0x68>
        case 4:
            bit_mask = 0xF;
 8019d42:	230f      	movs	r3, #15
 8019d44:	77fb      	strb	r3, [r7, #31]
            break;
 8019d46:	e009      	b.n	8019d5c <get_bits+0x68>
        case 8:
            bit_mask = 0xFF;
 8019d48:	23ff      	movs	r3, #255	; 0xff
 8019d4a:	77fb      	strb	r3, [r7, #31]
            break;
 8019d4c:	e006      	b.n	8019d5c <get_bits+0x68>
        default:
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 8019d4e:	79fb      	ldrb	r3, [r7, #7]
 8019d50:	2201      	movs	r2, #1
 8019d52:	fa02 f303 	lsl.w	r3, r2, r3
 8019d56:	b2db      	uxtb	r3, r3
 8019d58:	3b01      	subs	r3, #1
 8019d5a:	77fb      	strb	r3, [r7, #31]
    }

    uint32_t byte_pos = bit_pos >> 3;
 8019d5c:	68bb      	ldr	r3, [r7, #8]
 8019d5e:	08db      	lsrs	r3, r3, #3
 8019d60:	61bb      	str	r3, [r7, #24]
    bit_pos = bit_pos & 0x7;
 8019d62:	68bb      	ldr	r3, [r7, #8]
 8019d64:	f003 0307 	and.w	r3, r3, #7
 8019d68:	60bb      	str	r3, [r7, #8]

    if(bit_pos + len >= 8) {
 8019d6a:	79fa      	ldrb	r2, [r7, #7]
 8019d6c:	68bb      	ldr	r3, [r7, #8]
 8019d6e:	4413      	add	r3, r2
 8019d70:	2b07      	cmp	r3, #7
 8019d72:	d91d      	bls.n	8019db0 <get_bits+0xbc>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
 8019d74:	68fa      	ldr	r2, [r7, #12]
 8019d76:	69bb      	ldr	r3, [r7, #24]
 8019d78:	4413      	add	r3, r2
 8019d7a:	781b      	ldrb	r3, [r3, #0]
 8019d7c:	b29b      	uxth	r3, r3
 8019d7e:	021b      	lsls	r3, r3, #8
 8019d80:	b29a      	uxth	r2, r3
 8019d82:	69bb      	ldr	r3, [r7, #24]
 8019d84:	3301      	adds	r3, #1
 8019d86:	68f9      	ldr	r1, [r7, #12]
 8019d88:	440b      	add	r3, r1
 8019d8a:	781b      	ldrb	r3, [r3, #0]
 8019d8c:	b29b      	uxth	r3, r3
 8019d8e:	4413      	add	r3, r2
 8019d90:	82fb      	strh	r3, [r7, #22]
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
 8019d92:	8afa      	ldrh	r2, [r7, #22]
 8019d94:	79fb      	ldrb	r3, [r7, #7]
 8019d96:	4259      	negs	r1, r3
 8019d98:	68bb      	ldr	r3, [r7, #8]
 8019d9a:	1acb      	subs	r3, r1, r3
 8019d9c:	3310      	adds	r3, #16
 8019d9e:	fa42 f303 	asr.w	r3, r2, r3
 8019da2:	b25a      	sxtb	r2, r3
 8019da4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8019da8:	4013      	ands	r3, r2
 8019daa:	b25b      	sxtb	r3, r3
 8019dac:	b2db      	uxtb	r3, r3
 8019dae:	e011      	b.n	8019dd4 <get_bits+0xe0>
    }
    else {
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
 8019db0:	68fa      	ldr	r2, [r7, #12]
 8019db2:	69bb      	ldr	r3, [r7, #24]
 8019db4:	4413      	add	r3, r2
 8019db6:	781b      	ldrb	r3, [r3, #0]
 8019db8:	4619      	mov	r1, r3
 8019dba:	79fb      	ldrb	r3, [r7, #7]
 8019dbc:	425a      	negs	r2, r3
 8019dbe:	68bb      	ldr	r3, [r7, #8]
 8019dc0:	1ad3      	subs	r3, r2, r3
 8019dc2:	3308      	adds	r3, #8
 8019dc4:	fa41 f303 	asr.w	r3, r1, r3
 8019dc8:	b25a      	sxtb	r2, r3
 8019dca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8019dce:	4013      	ands	r3, r2
 8019dd0:	b25b      	sxtb	r3, r3
 8019dd2:	b2db      	uxtb	r3, r3
    }
}
 8019dd4:	4618      	mov	r0, r3
 8019dd6:	3724      	adds	r7, #36	; 0x24
 8019dd8:	46bd      	mov	sp, r7
 8019dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dde:	4770      	bx	lr

08019de0 <bits_write>:
 * @param val value to write
 * @param len length of bits to write from `val`. (Counted from the LSB).
 * @note `len == 3` will be converted to `len = 4` and `val` will be upscaled too
 */
static inline void bits_write(uint8_t * out, uint32_t bit_pos, uint8_t val, uint8_t len)
{
 8019de0:	b480      	push	{r7}
 8019de2:	b087      	sub	sp, #28
 8019de4:	af00      	add	r7, sp, #0
 8019de6:	60f8      	str	r0, [r7, #12]
 8019de8:	60b9      	str	r1, [r7, #8]
 8019dea:	4611      	mov	r1, r2
 8019dec:	461a      	mov	r2, r3
 8019dee:	460b      	mov	r3, r1
 8019df0:	71fb      	strb	r3, [r7, #7]
 8019df2:	4613      	mov	r3, r2
 8019df4:	71bb      	strb	r3, [r7, #6]
    if(len == 3) {
 8019df6:	79bb      	ldrb	r3, [r7, #6]
 8019df8:	2b03      	cmp	r3, #3
 8019dfa:	d12f      	bne.n	8019e5c <bits_write+0x7c>
        len = 4;
 8019dfc:	2304      	movs	r3, #4
 8019dfe:	71bb      	strb	r3, [r7, #6]
        switch(val) {
 8019e00:	79fb      	ldrb	r3, [r7, #7]
 8019e02:	2b07      	cmp	r3, #7
 8019e04:	d82a      	bhi.n	8019e5c <bits_write+0x7c>
 8019e06:	a201      	add	r2, pc, #4	; (adr r2, 8019e0c <bits_write+0x2c>)
 8019e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e0c:	08019e2d 	.word	0x08019e2d
 8019e10:	08019e33 	.word	0x08019e33
 8019e14:	08019e39 	.word	0x08019e39
 8019e18:	08019e3f 	.word	0x08019e3f
 8019e1c:	08019e45 	.word	0x08019e45
 8019e20:	08019e4b 	.word	0x08019e4b
 8019e24:	08019e51 	.word	0x08019e51
 8019e28:	08019e57 	.word	0x08019e57
            case 0:
                val = 0;
 8019e2c:	2300      	movs	r3, #0
 8019e2e:	71fb      	strb	r3, [r7, #7]
                break;
 8019e30:	e014      	b.n	8019e5c <bits_write+0x7c>
            case 1:
                val = 2;
 8019e32:	2302      	movs	r3, #2
 8019e34:	71fb      	strb	r3, [r7, #7]
                break;
 8019e36:	e011      	b.n	8019e5c <bits_write+0x7c>
            case 2:
                val = 4;
 8019e38:	2304      	movs	r3, #4
 8019e3a:	71fb      	strb	r3, [r7, #7]
                break;
 8019e3c:	e00e      	b.n	8019e5c <bits_write+0x7c>
            case 3:
                val = 6;
 8019e3e:	2306      	movs	r3, #6
 8019e40:	71fb      	strb	r3, [r7, #7]
                break;
 8019e42:	e00b      	b.n	8019e5c <bits_write+0x7c>
            case 4:
                val = 9;
 8019e44:	2309      	movs	r3, #9
 8019e46:	71fb      	strb	r3, [r7, #7]
                break;
 8019e48:	e008      	b.n	8019e5c <bits_write+0x7c>
            case 5:
                val = 11;
 8019e4a:	230b      	movs	r3, #11
 8019e4c:	71fb      	strb	r3, [r7, #7]
                break;
 8019e4e:	e005      	b.n	8019e5c <bits_write+0x7c>
            case 6:
                val = 13;
 8019e50:	230d      	movs	r3, #13
 8019e52:	71fb      	strb	r3, [r7, #7]
                break;
 8019e54:	e002      	b.n	8019e5c <bits_write+0x7c>
            case 7:
                val = 15;
 8019e56:	230f      	movs	r3, #15
 8019e58:	71fb      	strb	r3, [r7, #7]
                break;
 8019e5a:	bf00      	nop
        }
    }

    uint16_t byte_pos = bit_pos >> 3;
 8019e5c:	68bb      	ldr	r3, [r7, #8]
 8019e5e:	08db      	lsrs	r3, r3, #3
 8019e60:	82fb      	strh	r3, [r7, #22]
    bit_pos = bit_pos & 0x7;
 8019e62:	68bb      	ldr	r3, [r7, #8]
 8019e64:	f003 0307 	and.w	r3, r3, #7
 8019e68:	60bb      	str	r3, [r7, #8]
    bit_pos = 8 - bit_pos - len;
 8019e6a:	79bb      	ldrb	r3, [r7, #6]
 8019e6c:	425a      	negs	r2, r3
 8019e6e:	68bb      	ldr	r3, [r7, #8]
 8019e70:	1ad3      	subs	r3, r2, r3
 8019e72:	3308      	adds	r3, #8
 8019e74:	60bb      	str	r3, [r7, #8]

    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
 8019e76:	79bb      	ldrb	r3, [r7, #6]
 8019e78:	2201      	movs	r2, #1
 8019e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8019e7e:	b2db      	uxtb	r3, r3
 8019e80:	3b01      	subs	r3, #1
 8019e82:	757b      	strb	r3, [r7, #21]
    out[byte_pos] &= ((~bit_mask) << bit_pos);
 8019e84:	8afb      	ldrh	r3, [r7, #22]
 8019e86:	68fa      	ldr	r2, [r7, #12]
 8019e88:	4413      	add	r3, r2
 8019e8a:	781b      	ldrb	r3, [r3, #0]
 8019e8c:	b25a      	sxtb	r2, r3
 8019e8e:	7d7b      	ldrb	r3, [r7, #21]
 8019e90:	43d9      	mvns	r1, r3
 8019e92:	68bb      	ldr	r3, [r7, #8]
 8019e94:	fa01 f303 	lsl.w	r3, r1, r3
 8019e98:	b25b      	sxtb	r3, r3
 8019e9a:	4013      	ands	r3, r2
 8019e9c:	b259      	sxtb	r1, r3
 8019e9e:	8afb      	ldrh	r3, [r7, #22]
 8019ea0:	68fa      	ldr	r2, [r7, #12]
 8019ea2:	4413      	add	r3, r2
 8019ea4:	b2ca      	uxtb	r2, r1
 8019ea6:	701a      	strb	r2, [r3, #0]
    out[byte_pos] |= (val << bit_pos);
 8019ea8:	8afb      	ldrh	r3, [r7, #22]
 8019eaa:	68fa      	ldr	r2, [r7, #12]
 8019eac:	4413      	add	r3, r2
 8019eae:	781b      	ldrb	r3, [r3, #0]
 8019eb0:	b25a      	sxtb	r2, r3
 8019eb2:	79f9      	ldrb	r1, [r7, #7]
 8019eb4:	68bb      	ldr	r3, [r7, #8]
 8019eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8019eba:	b25b      	sxtb	r3, r3
 8019ebc:	4313      	orrs	r3, r2
 8019ebe:	b259      	sxtb	r1, r3
 8019ec0:	8afb      	ldrh	r3, [r7, #22]
 8019ec2:	68fa      	ldr	r2, [r7, #12]
 8019ec4:	4413      	add	r3, r2
 8019ec6:	b2ca      	uxtb	r2, r1
 8019ec8:	701a      	strb	r2, [r3, #0]
}
 8019eca:	bf00      	nop
 8019ecc:	371c      	adds	r7, #28
 8019ece:	46bd      	mov	sp, r7
 8019ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ed4:	4770      	bx	lr
 8019ed6:	bf00      	nop

08019ed8 <rle_init>:

static inline void rle_init(const uint8_t * in,  uint8_t bpp)
{
 8019ed8:	b480      	push	{r7}
 8019eda:	b083      	sub	sp, #12
 8019edc:	af00      	add	r7, sp, #0
 8019ede:	6078      	str	r0, [r7, #4]
 8019ee0:	460b      	mov	r3, r1
 8019ee2:	70fb      	strb	r3, [r7, #3]
    rle_in = in;
 8019ee4:	4a0b      	ldr	r2, [pc, #44]	; (8019f14 <rle_init+0x3c>)
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	6013      	str	r3, [r2, #0]
    rle_bpp = bpp;
 8019eea:	4a0b      	ldr	r2, [pc, #44]	; (8019f18 <rle_init+0x40>)
 8019eec:	78fb      	ldrb	r3, [r7, #3]
 8019eee:	7013      	strb	r3, [r2, #0]
    rle_state = RLE_STATE_SINGLE;
 8019ef0:	4b0a      	ldr	r3, [pc, #40]	; (8019f1c <rle_init+0x44>)
 8019ef2:	2200      	movs	r2, #0
 8019ef4:	701a      	strb	r2, [r3, #0]
    rle_rdp = 0;
 8019ef6:	4b0a      	ldr	r3, [pc, #40]	; (8019f20 <rle_init+0x48>)
 8019ef8:	2200      	movs	r2, #0
 8019efa:	601a      	str	r2, [r3, #0]
    rle_prev_v = 0;
 8019efc:	4b09      	ldr	r3, [pc, #36]	; (8019f24 <rle_init+0x4c>)
 8019efe:	2200      	movs	r2, #0
 8019f00:	701a      	strb	r2, [r3, #0]
    rle_cnt = 0;
 8019f02:	4b09      	ldr	r3, [pc, #36]	; (8019f28 <rle_init+0x50>)
 8019f04:	2200      	movs	r2, #0
 8019f06:	701a      	strb	r2, [r3, #0]
}
 8019f08:	bf00      	nop
 8019f0a:	370c      	adds	r7, #12
 8019f0c:	46bd      	mov	sp, r7
 8019f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f12:	4770      	bx	lr
 8019f14:	2001940c 	.word	0x2001940c
 8019f18:	20019410 	.word	0x20019410
 8019f1c:	20019413 	.word	0x20019413
 8019f20:	20019408 	.word	0x20019408
 8019f24:	20019411 	.word	0x20019411
 8019f28:	20019412 	.word	0x20019412

08019f2c <rle_next>:

static inline uint8_t rle_next(void)
{
 8019f2c:	b580      	push	{r7, lr}
 8019f2e:	b082      	sub	sp, #8
 8019f30:	af00      	add	r7, sp, #0
    uint8_t v = 0;
 8019f32:	2300      	movs	r3, #0
 8019f34:	71bb      	strb	r3, [r7, #6]
    uint8_t ret = 0;
 8019f36:	2300      	movs	r3, #0
 8019f38:	71fb      	strb	r3, [r7, #7]

    if(rle_state == RLE_STATE_SINGLE) {
 8019f3a:	4b64      	ldr	r3, [pc, #400]	; (801a0cc <rle_next+0x1a0>)
 8019f3c:	781b      	ldrb	r3, [r3, #0]
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d125      	bne.n	8019f8e <rle_next+0x62>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
 8019f42:	4b63      	ldr	r3, [pc, #396]	; (801a0d0 <rle_next+0x1a4>)
 8019f44:	6818      	ldr	r0, [r3, #0]
 8019f46:	4b63      	ldr	r3, [pc, #396]	; (801a0d4 <rle_next+0x1a8>)
 8019f48:	6819      	ldr	r1, [r3, #0]
 8019f4a:	4b63      	ldr	r3, [pc, #396]	; (801a0d8 <rle_next+0x1ac>)
 8019f4c:	781b      	ldrb	r3, [r3, #0]
 8019f4e:	461a      	mov	r2, r3
 8019f50:	f7ff fed0 	bl	8019cf4 <get_bits>
 8019f54:	4603      	mov	r3, r0
 8019f56:	71fb      	strb	r3, [r7, #7]
        if(rle_rdp != 0 && rle_prev_v == ret) {
 8019f58:	4b5e      	ldr	r3, [pc, #376]	; (801a0d4 <rle_next+0x1a8>)
 8019f5a:	681b      	ldr	r3, [r3, #0]
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	d00a      	beq.n	8019f76 <rle_next+0x4a>
 8019f60:	4b5e      	ldr	r3, [pc, #376]	; (801a0dc <rle_next+0x1b0>)
 8019f62:	781b      	ldrb	r3, [r3, #0]
 8019f64:	79fa      	ldrb	r2, [r7, #7]
 8019f66:	429a      	cmp	r2, r3
 8019f68:	d105      	bne.n	8019f76 <rle_next+0x4a>
            rle_cnt = 0;
 8019f6a:	4b5d      	ldr	r3, [pc, #372]	; (801a0e0 <rle_next+0x1b4>)
 8019f6c:	2200      	movs	r2, #0
 8019f6e:	701a      	strb	r2, [r3, #0]
            rle_state = RLE_STATE_REPEATE;
 8019f70:	4b56      	ldr	r3, [pc, #344]	; (801a0cc <rle_next+0x1a0>)
 8019f72:	2201      	movs	r2, #1
 8019f74:	701a      	strb	r2, [r3, #0]
        }

        rle_prev_v = ret;
 8019f76:	4a59      	ldr	r2, [pc, #356]	; (801a0dc <rle_next+0x1b0>)
 8019f78:	79fb      	ldrb	r3, [r7, #7]
 8019f7a:	7013      	strb	r3, [r2, #0]
        rle_rdp += rle_bpp;
 8019f7c:	4b56      	ldr	r3, [pc, #344]	; (801a0d8 <rle_next+0x1ac>)
 8019f7e:	781b      	ldrb	r3, [r3, #0]
 8019f80:	461a      	mov	r2, r3
 8019f82:	4b54      	ldr	r3, [pc, #336]	; (801a0d4 <rle_next+0x1a8>)
 8019f84:	681b      	ldr	r3, [r3, #0]
 8019f86:	4413      	add	r3, r2
 8019f88:	4a52      	ldr	r2, [pc, #328]	; (801a0d4 <rle_next+0x1a8>)
 8019f8a:	6013      	str	r3, [r2, #0]
 8019f8c:	e099      	b.n	801a0c2 <rle_next+0x196>
    }
    else if(rle_state == RLE_STATE_REPEATE) {
 8019f8e:	4b4f      	ldr	r3, [pc, #316]	; (801a0cc <rle_next+0x1a0>)
 8019f90:	781b      	ldrb	r3, [r3, #0]
 8019f92:	2b01      	cmp	r3, #1
 8019f94:	d16b      	bne.n	801a06e <rle_next+0x142>
        v = get_bits(rle_in, rle_rdp, 1);
 8019f96:	4b4e      	ldr	r3, [pc, #312]	; (801a0d0 <rle_next+0x1a4>)
 8019f98:	6818      	ldr	r0, [r3, #0]
 8019f9a:	4b4e      	ldr	r3, [pc, #312]	; (801a0d4 <rle_next+0x1a8>)
 8019f9c:	681b      	ldr	r3, [r3, #0]
 8019f9e:	2201      	movs	r2, #1
 8019fa0:	4619      	mov	r1, r3
 8019fa2:	f7ff fea7 	bl	8019cf4 <get_bits>
 8019fa6:	4603      	mov	r3, r0
 8019fa8:	71bb      	strb	r3, [r7, #6]
        rle_cnt++;
 8019faa:	4b4d      	ldr	r3, [pc, #308]	; (801a0e0 <rle_next+0x1b4>)
 8019fac:	781b      	ldrb	r3, [r3, #0]
 8019fae:	3301      	adds	r3, #1
 8019fb0:	b2da      	uxtb	r2, r3
 8019fb2:	4b4b      	ldr	r3, [pc, #300]	; (801a0e0 <rle_next+0x1b4>)
 8019fb4:	701a      	strb	r2, [r3, #0]
        rle_rdp += 1;
 8019fb6:	4b47      	ldr	r3, [pc, #284]	; (801a0d4 <rle_next+0x1a8>)
 8019fb8:	681b      	ldr	r3, [r3, #0]
 8019fba:	3301      	adds	r3, #1
 8019fbc:	4a45      	ldr	r2, [pc, #276]	; (801a0d4 <rle_next+0x1a8>)
 8019fbe:	6013      	str	r3, [r2, #0]
        if(v == 1) {
 8019fc0:	79bb      	ldrb	r3, [r7, #6]
 8019fc2:	2b01      	cmp	r3, #1
 8019fc4:	d139      	bne.n	801a03a <rle_next+0x10e>
            ret = rle_prev_v;
 8019fc6:	4b45      	ldr	r3, [pc, #276]	; (801a0dc <rle_next+0x1b0>)
 8019fc8:	781b      	ldrb	r3, [r3, #0]
 8019fca:	71fb      	strb	r3, [r7, #7]
            if(rle_cnt == 11) {
 8019fcc:	4b44      	ldr	r3, [pc, #272]	; (801a0e0 <rle_next+0x1b4>)
 8019fce:	781b      	ldrb	r3, [r3, #0]
 8019fd0:	2b0b      	cmp	r3, #11
 8019fd2:	d176      	bne.n	801a0c2 <rle_next+0x196>
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
 8019fd4:	4b3e      	ldr	r3, [pc, #248]	; (801a0d0 <rle_next+0x1a4>)
 8019fd6:	6818      	ldr	r0, [r3, #0]
 8019fd8:	4b3e      	ldr	r3, [pc, #248]	; (801a0d4 <rle_next+0x1a8>)
 8019fda:	681b      	ldr	r3, [r3, #0]
 8019fdc:	2206      	movs	r2, #6
 8019fde:	4619      	mov	r1, r3
 8019fe0:	f7ff fe88 	bl	8019cf4 <get_bits>
 8019fe4:	4603      	mov	r3, r0
 8019fe6:	461a      	mov	r2, r3
 8019fe8:	4b3d      	ldr	r3, [pc, #244]	; (801a0e0 <rle_next+0x1b4>)
 8019fea:	701a      	strb	r2, [r3, #0]
                rle_rdp += 6;
 8019fec:	4b39      	ldr	r3, [pc, #228]	; (801a0d4 <rle_next+0x1a8>)
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	3306      	adds	r3, #6
 8019ff2:	4a38      	ldr	r2, [pc, #224]	; (801a0d4 <rle_next+0x1a8>)
 8019ff4:	6013      	str	r3, [r2, #0]
                if(rle_cnt != 0) {
 8019ff6:	4b3a      	ldr	r3, [pc, #232]	; (801a0e0 <rle_next+0x1b4>)
 8019ff8:	781b      	ldrb	r3, [r3, #0]
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	d003      	beq.n	801a006 <rle_next+0xda>
                    rle_state = RLE_STATE_COUNTER;
 8019ffe:	4b33      	ldr	r3, [pc, #204]	; (801a0cc <rle_next+0x1a0>)
 801a000:	2202      	movs	r2, #2
 801a002:	701a      	strb	r2, [r3, #0]
 801a004:	e05d      	b.n	801a0c2 <rle_next+0x196>
                }
                else {
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
 801a006:	4b32      	ldr	r3, [pc, #200]	; (801a0d0 <rle_next+0x1a4>)
 801a008:	6818      	ldr	r0, [r3, #0]
 801a00a:	4b32      	ldr	r3, [pc, #200]	; (801a0d4 <rle_next+0x1a8>)
 801a00c:	6819      	ldr	r1, [r3, #0]
 801a00e:	4b32      	ldr	r3, [pc, #200]	; (801a0d8 <rle_next+0x1ac>)
 801a010:	781b      	ldrb	r3, [r3, #0]
 801a012:	461a      	mov	r2, r3
 801a014:	f7ff fe6e 	bl	8019cf4 <get_bits>
 801a018:	4603      	mov	r3, r0
 801a01a:	71fb      	strb	r3, [r7, #7]
                    rle_prev_v = ret;
 801a01c:	4a2f      	ldr	r2, [pc, #188]	; (801a0dc <rle_next+0x1b0>)
 801a01e:	79fb      	ldrb	r3, [r7, #7]
 801a020:	7013      	strb	r3, [r2, #0]
                    rle_rdp += rle_bpp;
 801a022:	4b2d      	ldr	r3, [pc, #180]	; (801a0d8 <rle_next+0x1ac>)
 801a024:	781b      	ldrb	r3, [r3, #0]
 801a026:	461a      	mov	r2, r3
 801a028:	4b2a      	ldr	r3, [pc, #168]	; (801a0d4 <rle_next+0x1a8>)
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	4413      	add	r3, r2
 801a02e:	4a29      	ldr	r2, [pc, #164]	; (801a0d4 <rle_next+0x1a8>)
 801a030:	6013      	str	r3, [r2, #0]
                    rle_state = RLE_STATE_SINGLE;
 801a032:	4b26      	ldr	r3, [pc, #152]	; (801a0cc <rle_next+0x1a0>)
 801a034:	2200      	movs	r2, #0
 801a036:	701a      	strb	r2, [r3, #0]
 801a038:	e043      	b.n	801a0c2 <rle_next+0x196>
                }
            }
        }
        else {
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 801a03a:	4b25      	ldr	r3, [pc, #148]	; (801a0d0 <rle_next+0x1a4>)
 801a03c:	6818      	ldr	r0, [r3, #0]
 801a03e:	4b25      	ldr	r3, [pc, #148]	; (801a0d4 <rle_next+0x1a8>)
 801a040:	6819      	ldr	r1, [r3, #0]
 801a042:	4b25      	ldr	r3, [pc, #148]	; (801a0d8 <rle_next+0x1ac>)
 801a044:	781b      	ldrb	r3, [r3, #0]
 801a046:	461a      	mov	r2, r3
 801a048:	f7ff fe54 	bl	8019cf4 <get_bits>
 801a04c:	4603      	mov	r3, r0
 801a04e:	71fb      	strb	r3, [r7, #7]
            rle_prev_v = ret;
 801a050:	4a22      	ldr	r2, [pc, #136]	; (801a0dc <rle_next+0x1b0>)
 801a052:	79fb      	ldrb	r3, [r7, #7]
 801a054:	7013      	strb	r3, [r2, #0]
            rle_rdp += rle_bpp;
 801a056:	4b20      	ldr	r3, [pc, #128]	; (801a0d8 <rle_next+0x1ac>)
 801a058:	781b      	ldrb	r3, [r3, #0]
 801a05a:	461a      	mov	r2, r3
 801a05c:	4b1d      	ldr	r3, [pc, #116]	; (801a0d4 <rle_next+0x1a8>)
 801a05e:	681b      	ldr	r3, [r3, #0]
 801a060:	4413      	add	r3, r2
 801a062:	4a1c      	ldr	r2, [pc, #112]	; (801a0d4 <rle_next+0x1a8>)
 801a064:	6013      	str	r3, [r2, #0]
            rle_state = RLE_STATE_SINGLE;
 801a066:	4b19      	ldr	r3, [pc, #100]	; (801a0cc <rle_next+0x1a0>)
 801a068:	2200      	movs	r2, #0
 801a06a:	701a      	strb	r2, [r3, #0]
 801a06c:	e029      	b.n	801a0c2 <rle_next+0x196>
        }

    }
    else if(rle_state == RLE_STATE_COUNTER) {
 801a06e:	4b17      	ldr	r3, [pc, #92]	; (801a0cc <rle_next+0x1a0>)
 801a070:	781b      	ldrb	r3, [r3, #0]
 801a072:	2b02      	cmp	r3, #2
 801a074:	d125      	bne.n	801a0c2 <rle_next+0x196>
        ret = rle_prev_v;
 801a076:	4b19      	ldr	r3, [pc, #100]	; (801a0dc <rle_next+0x1b0>)
 801a078:	781b      	ldrb	r3, [r3, #0]
 801a07a:	71fb      	strb	r3, [r7, #7]
        rle_cnt--;
 801a07c:	4b18      	ldr	r3, [pc, #96]	; (801a0e0 <rle_next+0x1b4>)
 801a07e:	781b      	ldrb	r3, [r3, #0]
 801a080:	3b01      	subs	r3, #1
 801a082:	b2da      	uxtb	r2, r3
 801a084:	4b16      	ldr	r3, [pc, #88]	; (801a0e0 <rle_next+0x1b4>)
 801a086:	701a      	strb	r2, [r3, #0]
        if(rle_cnt == 0) {
 801a088:	4b15      	ldr	r3, [pc, #84]	; (801a0e0 <rle_next+0x1b4>)
 801a08a:	781b      	ldrb	r3, [r3, #0]
 801a08c:	2b00      	cmp	r3, #0
 801a08e:	d118      	bne.n	801a0c2 <rle_next+0x196>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
 801a090:	4b0f      	ldr	r3, [pc, #60]	; (801a0d0 <rle_next+0x1a4>)
 801a092:	6818      	ldr	r0, [r3, #0]
 801a094:	4b0f      	ldr	r3, [pc, #60]	; (801a0d4 <rle_next+0x1a8>)
 801a096:	6819      	ldr	r1, [r3, #0]
 801a098:	4b0f      	ldr	r3, [pc, #60]	; (801a0d8 <rle_next+0x1ac>)
 801a09a:	781b      	ldrb	r3, [r3, #0]
 801a09c:	461a      	mov	r2, r3
 801a09e:	f7ff fe29 	bl	8019cf4 <get_bits>
 801a0a2:	4603      	mov	r3, r0
 801a0a4:	71fb      	strb	r3, [r7, #7]
            rle_prev_v = ret;
 801a0a6:	4a0d      	ldr	r2, [pc, #52]	; (801a0dc <rle_next+0x1b0>)
 801a0a8:	79fb      	ldrb	r3, [r7, #7]
 801a0aa:	7013      	strb	r3, [r2, #0]
            rle_rdp += rle_bpp;
 801a0ac:	4b0a      	ldr	r3, [pc, #40]	; (801a0d8 <rle_next+0x1ac>)
 801a0ae:	781b      	ldrb	r3, [r3, #0]
 801a0b0:	461a      	mov	r2, r3
 801a0b2:	4b08      	ldr	r3, [pc, #32]	; (801a0d4 <rle_next+0x1a8>)
 801a0b4:	681b      	ldr	r3, [r3, #0]
 801a0b6:	4413      	add	r3, r2
 801a0b8:	4a06      	ldr	r2, [pc, #24]	; (801a0d4 <rle_next+0x1a8>)
 801a0ba:	6013      	str	r3, [r2, #0]
            rle_state = RLE_STATE_SINGLE;
 801a0bc:	4b03      	ldr	r3, [pc, #12]	; (801a0cc <rle_next+0x1a0>)
 801a0be:	2200      	movs	r2, #0
 801a0c0:	701a      	strb	r2, [r3, #0]
        }
    }

    return ret;
 801a0c2:	79fb      	ldrb	r3, [r7, #7]
}
 801a0c4:	4618      	mov	r0, r3
 801a0c6:	3708      	adds	r7, #8
 801a0c8:	46bd      	mov	sp, r7
 801a0ca:	bd80      	pop	{r7, pc}
 801a0cc:	20019413 	.word	0x20019413
 801a0d0:	2001940c 	.word	0x2001940c
 801a0d4:	20019408 	.word	0x20019408
 801a0d8:	20019410 	.word	0x20019410
 801a0dc:	20019411 	.word	0x20019411
 801a0e0:	20019412 	.word	0x20019412

0801a0e4 <unicode_list_compare>:
 *  @retval = 0   Reference is equal to element.
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
 801a0e4:	b480      	push	{r7}
 801a0e6:	b083      	sub	sp, #12
 801a0e8:	af00      	add	r7, sp, #0
 801a0ea:	6078      	str	r0, [r7, #4]
 801a0ec:	6039      	str	r1, [r7, #0]
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	881b      	ldrh	r3, [r3, #0]
 801a0f2:	461a      	mov	r2, r3
 801a0f4:	683b      	ldr	r3, [r7, #0]
 801a0f6:	881b      	ldrh	r3, [r3, #0]
 801a0f8:	1ad3      	subs	r3, r2, r3
}
 801a0fa:	4618      	mov	r0, r3
 801a0fc:	370c      	adds	r7, #12
 801a0fe:	46bd      	mov	sp, r7
 801a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a104:	4770      	bx	lr

0801a106 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 801a106:	b580      	push	{r7, lr}
 801a108:	b082      	sub	sp, #8
 801a10a:	af00      	add	r7, sp, #0
 801a10c:	6078      	str	r0, [r7, #4]
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
 801a10e:	2134      	movs	r1, #52	; 0x34
 801a110:	6878      	ldr	r0, [r7, #4]
 801a112:	f003 f80a 	bl	801d12a <_lv_memset_00>

    driver->flush_cb         = NULL;
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	2200      	movs	r2, #0
 801a11a:	60da      	str	r2, [r3, #12]
    driver->hor_res          = LV_HOR_RES_MAX;
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801a122:	801a      	strh	r2, [r3, #0]
    driver->ver_res          = LV_VER_RES_MAX;
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	f44f 7288 	mov.w	r2, #272	; 0x110
 801a12a:	805a      	strh	r2, [r3, #2]
    driver->buffer           = NULL;
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	2200      	movs	r2, #0
 801a130:	605a      	str	r2, [r3, #4]
    driver->rotated          = 0;
 801a132:	687a      	ldr	r2, [r7, #4]
 801a134:	7a13      	ldrb	r3, [r2, #8]
 801a136:	f36f 0341 	bfc	r3, #1, #1
 801a13a:	7213      	strb	r3, [r2, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	2200      	movs	r2, #0
 801a140:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	22ff      	movs	r2, #255	; 0xff
 801a148:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801a14c:	687b      	ldr	r3, [r7, #4]
 801a14e:	2200      	movs	r2, #0
 801a150:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	22ff      	movs	r2, #255	; 0xff
 801a158:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    driver->dpi = LV_DPI;
 801a15c:	687a      	ldr	r2, [r7, #4]
 801a15e:	8913      	ldrh	r3, [r2, #8]
 801a160:	2182      	movs	r1, #130	; 0x82
 801a162:	f361 038b 	bfi	r3, r1, #2, #10
 801a166:	8113      	strh	r3, [r2, #8]

#if LV_ANTIALIAS
    driver->antialiasing = true;
 801a168:	687a      	ldr	r2, [r7, #4]
 801a16a:	7a13      	ldrb	r3, [r2, #8]
 801a16c:	f043 0301 	orr.w	r3, r3, #1
 801a170:	7213      	strb	r3, [r2, #8]
#if LV_COLOR_SCREEN_TRANSP
    driver->screen_transp = 1;
#endif

#if LV_USE_GPU
    driver->gpu_blend_cb = NULL;
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	2200      	movs	r2, #0
 801a176:	629a      	str	r2, [r3, #40]	; 0x28
    driver->gpu_fill_cb  = NULL;
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	2200      	movs	r2, #0
 801a17c:	62da      	str	r2, [r3, #44]	; 0x2c

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	2200      	movs	r2, #0
 801a182:	615a      	str	r2, [r3, #20]
}
 801a184:	bf00      	nop
 801a186:	3708      	adds	r7, #8
 801a188:	46bd      	mov	sp, r7
 801a18a:	bd80      	pop	{r7, pc}

0801a18c <lv_disp_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 801a18c:	b580      	push	{r7, lr}
 801a18e:	b084      	sub	sp, #16
 801a190:	af00      	add	r7, sp, #0
 801a192:	60f8      	str	r0, [r7, #12]
 801a194:	60b9      	str	r1, [r7, #8]
 801a196:	607a      	str	r2, [r7, #4]
 801a198:	603b      	str	r3, [r7, #0]
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
 801a19a:	2124      	movs	r1, #36	; 0x24
 801a19c:	68f8      	ldr	r0, [r7, #12]
 801a19e:	f002 ffc4 	bl	801d12a <_lv_memset_00>

    disp_buf->buf1    = buf1;
 801a1a2:	68fb      	ldr	r3, [r7, #12]
 801a1a4:	68ba      	ldr	r2, [r7, #8]
 801a1a6:	601a      	str	r2, [r3, #0]
    disp_buf->buf2    = buf2;
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	687a      	ldr	r2, [r7, #4]
 801a1ac:	605a      	str	r2, [r3, #4]
    disp_buf->buf_act = disp_buf->buf1;
 801a1ae:	68fb      	ldr	r3, [r7, #12]
 801a1b0:	681a      	ldr	r2, [r3, #0]
 801a1b2:	68fb      	ldr	r3, [r7, #12]
 801a1b4:	609a      	str	r2, [r3, #8]
    disp_buf->size    = size_in_px_cnt;
 801a1b6:	68fb      	ldr	r3, [r7, #12]
 801a1b8:	683a      	ldr	r2, [r7, #0]
 801a1ba:	60da      	str	r2, [r3, #12]
}
 801a1bc:	bf00      	nop
 801a1be:	3710      	adds	r7, #16
 801a1c0:	46bd      	mov	sp, r7
 801a1c2:	bd80      	pop	{r7, pc}

0801a1c4 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 801a1c4:	b590      	push	{r4, r7, lr}
 801a1c6:	b085      	sub	sp, #20
 801a1c8:	af00      	add	r7, sp, #0
 801a1ca:	6078      	str	r0, [r7, #4]
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 801a1cc:	4864      	ldr	r0, [pc, #400]	; (801a360 <lv_disp_drv_register+0x19c>)
 801a1ce:	f001 ff0e 	bl	801bfee <_lv_ll_ins_head>
 801a1d2:	60f8      	str	r0, [r7, #12]
    if(!disp) {
 801a1d4:	68fb      	ldr	r3, [r7, #12]
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d113      	bne.n	801a202 <lv_disp_drv_register+0x3e>
        LV_ASSERT_MEM(disp);
 801a1da:	68f8      	ldr	r0, [r7, #12]
 801a1dc:	f001 fcae 	bl	801bb3c <lv_debug_check_null>
 801a1e0:	4603      	mov	r3, r0
 801a1e2:	f083 0301 	eor.w	r3, r3, #1
 801a1e6:	b2db      	uxtb	r3, r3
 801a1e8:	2b00      	cmp	r3, #0
 801a1ea:	d008      	beq.n	801a1fe <lv_disp_drv_register+0x3a>
 801a1ec:	68fb      	ldr	r3, [r7, #12]
 801a1ee:	f04f 0400 	mov.w	r4, #0
 801a1f2:	461a      	mov	r2, r3
 801a1f4:	4623      	mov	r3, r4
 801a1f6:	485b      	ldr	r0, [pc, #364]	; (801a364 <lv_disp_drv_register+0x1a0>)
 801a1f8:	f001 fcb0 	bl	801bb5c <lv_debug_log_error>
 801a1fc:	e7fe      	b.n	801a1fc <lv_disp_drv_register+0x38>
        return NULL;
 801a1fe:	2300      	movs	r3, #0
 801a200:	e0aa      	b.n	801a358 <lv_disp_drv_register+0x194>
    }

    _lv_memset_00(disp, sizeof(lv_disp_t));
 801a202:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 801a206:	68f8      	ldr	r0, [r7, #12]
 801a208:	f002 ff8f 	bl	801d12a <_lv_memset_00>
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 801a20c:	68fb      	ldr	r3, [r7, #12]
 801a20e:	2234      	movs	r2, #52	; 0x34
 801a210:	6879      	ldr	r1, [r7, #4]
 801a212:	4618      	mov	r0, r3
 801a214:	f002 fce4 	bl	801cbe0 <_lv_memcpy>

    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 801a218:	68fb      	ldr	r3, [r7, #12]
 801a21a:	3338      	adds	r3, #56	; 0x38
 801a21c:	214c      	movs	r1, #76	; 0x4c
 801a21e:	4618      	mov	r0, r3
 801a220:	f001 fecc 	bl	801bfbc <_lv_ll_init>
    disp->last_activity_time = 0;
 801a224:	68fb      	ldr	r3, [r7, #12]
 801a226:	2200      	movs	r2, #0
 801a228:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    if(disp_def == NULL) disp_def = disp;
 801a22c:	4b4e      	ldr	r3, [pc, #312]	; (801a368 <lv_disp_drv_register+0x1a4>)
 801a22e:	681b      	ldr	r3, [r3, #0]
 801a230:	2b00      	cmp	r3, #0
 801a232:	d102      	bne.n	801a23a <lv_disp_drv_register+0x76>
 801a234:	4a4c      	ldr	r2, [pc, #304]	; (801a368 <lv_disp_drv_register+0x1a4>)
 801a236:	68fb      	ldr	r3, [r7, #12]
 801a238:	6013      	str	r3, [r2, #0]

    lv_disp_t * disp_def_tmp = disp_def;
 801a23a:	4b4b      	ldr	r3, [pc, #300]	; (801a368 <lv_disp_drv_register+0x1a4>)
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	60bb      	str	r3, [r7, #8]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 801a240:	4a49      	ldr	r2, [pc, #292]	; (801a368 <lv_disp_drv_register+0x1a4>)
 801a242:	68fb      	ldr	r3, [r7, #12]
 801a244:	6013      	str	r3, [r2, #0]
                                        new display*/
    /*Create a refresh task*/
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	2203      	movs	r2, #3
 801a24a:	211e      	movs	r1, #30
 801a24c:	4847      	ldr	r0, [pc, #284]	; (801a36c <lv_disp_drv_register+0x1a8>)
 801a24e:	f003 fa53 	bl	801d6f8 <lv_task_create>
 801a252:	4602      	mov	r2, r0
 801a254:	68fb      	ldr	r3, [r7, #12]
 801a256:	635a      	str	r2, [r3, #52]	; 0x34
    LV_ASSERT_MEM(disp->refr_task);
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a25c:	4618      	mov	r0, r3
 801a25e:	f001 fc6d 	bl	801bb3c <lv_debug_check_null>
 801a262:	4603      	mov	r3, r0
 801a264:	f083 0301 	eor.w	r3, r3, #1
 801a268:	b2db      	uxtb	r3, r3
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d009      	beq.n	801a282 <lv_disp_drv_register+0xbe>
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a272:	f04f 0400 	mov.w	r4, #0
 801a276:	461a      	mov	r2, r3
 801a278:	4623      	mov	r3, r4
 801a27a:	483a      	ldr	r0, [pc, #232]	; (801a364 <lv_disp_drv_register+0x1a0>)
 801a27c:	f001 fc6e 	bl	801bb5c <lv_debug_log_error>
 801a280:	e7fe      	b.n	801a280 <lv_disp_drv_register+0xbc>
    if(disp->refr_task == NULL) return NULL;
 801a282:	68fb      	ldr	r3, [r7, #12]
 801a284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a286:	2b00      	cmp	r3, #0
 801a288:	d101      	bne.n	801a28e <lv_disp_drv_register+0xca>
 801a28a:	2300      	movs	r3, #0
 801a28c:	e064      	b.n	801a358 <lv_disp_drv_register+0x194>

    disp->inv_p = 0;
 801a28e:	68fa      	ldr	r2, [r7, #12]
 801a290:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
 801a294:	f36f 0309 	bfc	r3, #0, #10
 801a298:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186
    disp->last_activity_time = 0;
 801a29c:	68fb      	ldr	r3, [r7, #12]
 801a29e:	2200      	movs	r2, #0
 801a2a0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    disp->bg_color = LV_COLOR_WHITE;
 801a2a4:	68fb      	ldr	r3, [r7, #12]
 801a2a6:	22ff      	movs	r2, #255	; 0xff
 801a2a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 801a2ac:	68fb      	ldr	r3, [r7, #12]
 801a2ae:	22ff      	movs	r2, #255	; 0xff
 801a2b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 801a2b4:	68fb      	ldr	r3, [r7, #12]
 801a2b6:	22ff      	movs	r2, #255	; 0xff
 801a2b8:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 801a2bc:	68fb      	ldr	r3, [r7, #12]
 801a2be:	22ff      	movs	r2, #255	; 0xff
 801a2c0:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
    disp->bg_img = NULL;
 801a2c4:	68fb      	ldr	r3, [r7, #12]
 801a2c6:	2200      	movs	r2, #0
 801a2c8:	661a      	str	r2, [r3, #96]	; 0x60
#if LV_COLOR_SCREEN_TRANSP
    disp->bg_opa = LV_OPA_TRANSP;
#else
    disp->bg_opa = LV_OPA_COVER;
 801a2ca:	68fb      	ldr	r3, [r7, #12]
 801a2cc:	22ff      	movs	r2, #255	; 0xff
 801a2ce:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
#endif

    disp->prev_scr  = NULL;
 801a2d2:	68fb      	ldr	r3, [r7, #12]
 801a2d4:	2200      	movs	r2, #0
 801a2d6:	649a      	str	r2, [r3, #72]	; 0x48
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 801a2d8:	2100      	movs	r1, #0
 801a2da:	2000      	movs	r0, #0
 801a2dc:	f7ea ff82 	bl	80051e4 <lv_obj_create>
 801a2e0:	4602      	mov	r2, r0
 801a2e2:	68fb      	ldr	r3, [r7, #12]
 801a2e4:	645a      	str	r2, [r3, #68]	; 0x44
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 801a2e6:	2100      	movs	r1, #0
 801a2e8:	2000      	movs	r0, #0
 801a2ea:	f7ea ff7b 	bl	80051e4 <lv_obj_create>
 801a2ee:	4602      	mov	r2, r0
 801a2f0:	68fb      	ldr	r3, [r7, #12]
 801a2f2:	651a      	str	r2, [r3, #80]	; 0x50
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
 801a2f4:	2100      	movs	r1, #0
 801a2f6:	2000      	movs	r0, #0
 801a2f8:	f7ea ff74 	bl	80051e4 <lv_obj_create>
 801a2fc:	4602      	mov	r2, r0
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	655a      	str	r2, [r3, #84]	; 0x54
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
 801a302:	68fb      	ldr	r3, [r7, #12]
 801a304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a306:	2100      	movs	r1, #0
 801a308:	4618      	mov	r0, r3
 801a30a:	f7eb fdde 	bl	8005eca <lv_obj_reset_style_list>
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
 801a30e:	68fb      	ldr	r3, [r7, #12]
 801a310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a312:	2100      	movs	r1, #0
 801a314:	4618      	mov	r0, r3
 801a316:	f7eb fdd8 	bl	8005eca <lv_obj_reset_style_list>
    lv_obj_set_click(disp->top_layer, false);
 801a31a:	68fb      	ldr	r3, [r7, #12]
 801a31c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a31e:	2100      	movs	r1, #0
 801a320:	4618      	mov	r0, r3
 801a322:	f7eb fee5 	bl	80060f0 <lv_obj_set_click>
    lv_obj_set_click(disp->sys_layer, false);
 801a326:	68fb      	ldr	r3, [r7, #12]
 801a328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a32a:	2100      	movs	r1, #0
 801a32c:	4618      	mov	r0, r3
 801a32e:	f7eb fedf 	bl	80060f0 <lv_obj_set_click>

    lv_obj_invalidate(disp->act_scr);
 801a332:	68fb      	ldr	r3, [r7, #12]
 801a334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a336:	4618      	mov	r0, r3
 801a338:	f7eb fa86 	bl	8005848 <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/
 801a33c:	4a0a      	ldr	r2, [pc, #40]	; (801a368 <lv_disp_drv_register+0x1a4>)
 801a33e:	68bb      	ldr	r3, [r7, #8]
 801a340:	6013      	str	r3, [r2, #0]

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 801a342:	68fb      	ldr	r3, [r7, #12]
 801a344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a346:	4618      	mov	r0, r3
 801a348:	f003 faee 	bl	801d928 <lv_task_ready>

    /*Can't handle this case later so add an error*/
    if(lv_disp_is_true_double_buf(disp) && disp->driver.set_px_cb) {
 801a34c:	68f8      	ldr	r0, [r7, #12]
 801a34e:	f000 f940 	bl	801a5d2 <lv_disp_is_true_double_buf>
 801a352:	4603      	mov	r3, r0
 801a354:	2b00      	cmp	r3, #0
        LV_LOG_ERROR("Can't handle 2 screen sized buffers with set_px_cb. Display will not be refreshed.");
    }

    return disp;
 801a356:	68fb      	ldr	r3, [r7, #12]
}
 801a358:	4618      	mov	r0, r3
 801a35a:	3714      	adds	r7, #20
 801a35c:	46bd      	mov	sp, r7
 801a35e:	bd90      	pop	{r4, r7, pc}
 801a360:	2002179c 	.word	0x2002179c
 801a364:	0802d848 	.word	0x0802d848
 801a368:	20019414 	.word	0x20019414
 801a36c:	0800a341 	.word	0x0800a341

0801a370 <lv_disp_get_default>:
/**
 * Get the default display
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
 801a370:	b480      	push	{r7}
 801a372:	af00      	add	r7, sp, #0
    return disp_def;
 801a374:	4b03      	ldr	r3, [pc, #12]	; (801a384 <lv_disp_get_default+0x14>)
 801a376:	681b      	ldr	r3, [r3, #0]
}
 801a378:	4618      	mov	r0, r3
 801a37a:	46bd      	mov	sp, r7
 801a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a380:	4770      	bx	lr
 801a382:	bf00      	nop
 801a384:	20019414 	.word	0x20019414

0801a388 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
 801a388:	b580      	push	{r7, lr}
 801a38a:	b082      	sub	sp, #8
 801a38c:	af00      	add	r7, sp, #0
 801a38e:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	2b00      	cmp	r3, #0
 801a394:	d102      	bne.n	801a39c <lv_disp_get_hor_res+0x14>
 801a396:	f7ff ffeb 	bl	801a370 <lv_disp_get_default>
 801a39a:	6078      	str	r0, [r7, #4]

    if(disp == NULL)
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	d102      	bne.n	801a3a8 <lv_disp_get_hor_res+0x20>
        return LV_HOR_RES_MAX;
 801a3a2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801a3a6:	e00d      	b.n	801a3c4 <lv_disp_get_hor_res+0x3c>
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	7a1b      	ldrb	r3, [r3, #8]
 801a3ac:	f003 0302 	and.w	r3, r3, #2
 801a3b0:	b2db      	uxtb	r3, r3
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	d103      	bne.n	801a3be <lv_disp_get_hor_res+0x36>
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a3bc:	e002      	b.n	801a3c4 <lv_disp_get_hor_res+0x3c>
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 801a3c4:	4618      	mov	r0, r3
 801a3c6:	3708      	adds	r7, #8
 801a3c8:	46bd      	mov	sp, r7
 801a3ca:	bd80      	pop	{r7, pc}

0801a3cc <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
 801a3cc:	b580      	push	{r7, lr}
 801a3ce:	b082      	sub	sp, #8
 801a3d0:	af00      	add	r7, sp, #0
 801a3d2:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	d102      	bne.n	801a3e0 <lv_disp_get_ver_res+0x14>
 801a3da:	f7ff ffc9 	bl	801a370 <lv_disp_get_default>
 801a3de:	6078      	str	r0, [r7, #4]

    if(disp == NULL)
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	2b00      	cmp	r3, #0
 801a3e4:	d102      	bne.n	801a3ec <lv_disp_get_ver_res+0x20>
        return LV_VER_RES_MAX;
 801a3e6:	f44f 7388 	mov.w	r3, #272	; 0x110
 801a3ea:	e00d      	b.n	801a408 <lv_disp_get_ver_res+0x3c>
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	7a1b      	ldrb	r3, [r3, #8]
 801a3f0:	f003 0302 	and.w	r3, r3, #2
 801a3f4:	b2db      	uxtb	r3, r3
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d103      	bne.n	801a402 <lv_disp_get_ver_res+0x36>
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a400:	e002      	b.n	801a408 <lv_disp_get_ver_res+0x3c>
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 801a408:	4618      	mov	r0, r3
 801a40a:	3708      	adds	r7, #8
 801a40c:	46bd      	mov	sp, r7
 801a40e:	bd80      	pop	{r7, pc}

0801a410 <lv_disp_get_dpi>:
 * Get the DPI of the display
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(lv_disp_t * disp)
{
 801a410:	b580      	push	{r7, lr}
 801a412:	b082      	sub	sp, #8
 801a414:	af00      	add	r7, sp, #0
 801a416:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	d102      	bne.n	801a424 <lv_disp_get_dpi+0x14>
 801a41e:	f7ff ffa7 	bl	801a370 <lv_disp_get_default>
 801a422:	6078      	str	r0, [r7, #4]
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	2b00      	cmp	r3, #0
 801a428:	d101      	bne.n	801a42e <lv_disp_get_dpi+0x1e>
 801a42a:	2382      	movs	r3, #130	; 0x82
 801a42c:	e005      	b.n	801a43a <lv_disp_get_dpi+0x2a>
    return disp->driver.dpi;
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	891b      	ldrh	r3, [r3, #8]
 801a432:	f3c3 0389 	ubfx	r3, r3, #2, #10
 801a436:	b29b      	uxth	r3, r3
 801a438:	b21b      	sxth	r3, r3
}
 801a43a:	4618      	mov	r0, r3
 801a43c:	3708      	adds	r7, #8
 801a43e:	46bd      	mov	sp, r7
 801a440:	bd80      	pop	{r7, pc}

0801a442 <lv_disp_get_size_category>:
 * Get the size category of the display based on it's hor. res. and dpi.
 * @param disp pointer to a display (NULL to use the default display)
 * @return LV_DISP_SIZE_SMALL/MEDIUM/LARGE/EXTRA_LARGE
 */
lv_disp_size_t lv_disp_get_size_category(lv_disp_t * disp)
{
 801a442:	b580      	push	{r7, lr}
 801a444:	b084      	sub	sp, #16
 801a446:	af00      	add	r7, sp, #0
 801a448:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d102      	bne.n	801a456 <lv_disp_get_size_category+0x14>
 801a450:	f7ff ff8e 	bl	801a370 <lv_disp_get_default>
 801a454:	6078      	str	r0, [r7, #4]

    uint32_t w;
    if(disp == NULL) w = LV_HOR_RES_MAX;
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d103      	bne.n	801a464 <lv_disp_get_size_category+0x22>
 801a45c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801a460:	60fb      	str	r3, [r7, #12]
 801a462:	e004      	b.n	801a46e <lv_disp_get_size_category+0x2c>
    else w = lv_disp_get_hor_res(disp);
 801a464:	6878      	ldr	r0, [r7, #4]
 801a466:	f7ff ff8f 	bl	801a388 <lv_disp_get_hor_res>
 801a46a:	4603      	mov	r3, r0
 801a46c:	60fb      	str	r3, [r7, #12]

    uint32_t dpi = lv_disp_get_dpi(disp);
 801a46e:	6878      	ldr	r0, [r7, #4]
 801a470:	f7ff ffce 	bl	801a410 <lv_disp_get_dpi>
 801a474:	4603      	mov	r3, r0
 801a476:	60bb      	str	r3, [r7, #8]

    w = w * 10 / dpi;
 801a478:	68fa      	ldr	r2, [r7, #12]
 801a47a:	4613      	mov	r3, r2
 801a47c:	009b      	lsls	r3, r3, #2
 801a47e:	4413      	add	r3, r2
 801a480:	005b      	lsls	r3, r3, #1
 801a482:	461a      	mov	r2, r3
 801a484:	68bb      	ldr	r3, [r7, #8]
 801a486:	fbb2 f3f3 	udiv	r3, r2, r3
 801a48a:	60fb      	str	r3, [r7, #12]

    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
 801a48c:	68fb      	ldr	r3, [r7, #12]
 801a48e:	2b1d      	cmp	r3, #29
 801a490:	d801      	bhi.n	801a496 <lv_disp_get_size_category+0x54>
 801a492:	2300      	movs	r3, #0
 801a494:	e00a      	b.n	801a4ac <lv_disp_get_size_category+0x6a>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
 801a496:	68fb      	ldr	r3, [r7, #12]
 801a498:	2b31      	cmp	r3, #49	; 0x31
 801a49a:	d801      	bhi.n	801a4a0 <lv_disp_get_size_category+0x5e>
 801a49c:	2301      	movs	r3, #1
 801a49e:	e005      	b.n	801a4ac <lv_disp_get_size_category+0x6a>
    if(w < LV_DISP_LARGE_LIMIT) return LV_DISP_SIZE_LARGE;
 801a4a0:	68fb      	ldr	r3, [r7, #12]
 801a4a2:	2b45      	cmp	r3, #69	; 0x45
 801a4a4:	d801      	bhi.n	801a4aa <lv_disp_get_size_category+0x68>
 801a4a6:	2302      	movs	r3, #2
 801a4a8:	e000      	b.n	801a4ac <lv_disp_get_size_category+0x6a>
    else return LV_DISP_SIZE_EXTRA_LARGE;
 801a4aa:	2303      	movs	r3, #3
}
 801a4ac:	4618      	mov	r0, r3
 801a4ae:	3710      	adds	r7, #16
 801a4b0:	46bd      	mov	sp, r7
 801a4b2:	bd80      	pop	{r7, pc}

0801a4b4 <lv_disp_flush_ready>:
/**
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
 801a4b4:	b480      	push	{r7}
 801a4b6:	b083      	sub	sp, #12
 801a4b8:	af00      	add	r7, sp, #0
 801a4ba:	6078      	str	r0, [r7, #4]
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	685b      	ldr	r3, [r3, #4]
 801a4c0:	2200      	movs	r2, #0
 801a4c2:	619a      	str	r2, [r3, #24]
    disp_drv->buffer->flushing_last = 0;
 801a4c4:	687b      	ldr	r3, [r7, #4]
 801a4c6:	685b      	ldr	r3, [r3, #4]
 801a4c8:	2200      	movs	r2, #0
 801a4ca:	61da      	str	r2, [r3, #28]
}
 801a4cc:	bf00      	nop
 801a4ce:	370c      	adds	r7, #12
 801a4d0:	46bd      	mov	sp, r7
 801a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4d6:	4770      	bx	lr

0801a4d8 <lv_disp_get_next>:
 * Get the next display.
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
 801a4d8:	b580      	push	{r7, lr}
 801a4da:	b082      	sub	sp, #8
 801a4dc:	af00      	add	r7, sp, #0
 801a4de:	6078      	str	r0, [r7, #4]
    if(disp == NULL)
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	d104      	bne.n	801a4f0 <lv_disp_get_next+0x18>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 801a4e6:	4807      	ldr	r0, [pc, #28]	; (801a504 <lv_disp_get_next+0x2c>)
 801a4e8:	f001 fede 	bl	801c2a8 <_lv_ll_get_head>
 801a4ec:	4603      	mov	r3, r0
 801a4ee:	e004      	b.n	801a4fa <lv_disp_get_next+0x22>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
 801a4f0:	6879      	ldr	r1, [r7, #4]
 801a4f2:	4804      	ldr	r0, [pc, #16]	; (801a504 <lv_disp_get_next+0x2c>)
 801a4f4:	f001 fefe 	bl	801c2f4 <_lv_ll_get_next>
 801a4f8:	4603      	mov	r3, r0
}
 801a4fa:	4618      	mov	r0, r3
 801a4fc:	3708      	adds	r7, #8
 801a4fe:	46bd      	mov	sp, r7
 801a500:	bd80      	pop	{r7, pc}
 801a502:	bf00      	nop
 801a504:	2002179c 	.word	0x2002179c

0801a508 <lv_disp_get_buf>:
 * Get the internal buffer of a display
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
 801a508:	b480      	push	{r7}
 801a50a:	b083      	sub	sp, #12
 801a50c:	af00      	add	r7, sp, #0
 801a50e:	6078      	str	r0, [r7, #4]
    return disp->driver.buffer;
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	685b      	ldr	r3, [r3, #4]
}
 801a514:	4618      	mov	r0, r3
 801a516:	370c      	adds	r7, #12
 801a518:	46bd      	mov	sp, r7
 801a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a51e:	4770      	bx	lr

0801a520 <lv_disp_get_inv_buf_size>:
/**
 * Get the number of areas in the buffer
 * @return number of invalid areas
 */
uint16_t lv_disp_get_inv_buf_size(lv_disp_t * disp)
{
 801a520:	b480      	push	{r7}
 801a522:	b083      	sub	sp, #12
 801a524:	af00      	add	r7, sp, #0
 801a526:	6078      	str	r0, [r7, #4]
    return disp->inv_p;
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 801a52e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a532:	b29b      	uxth	r3, r3
}
 801a534:	4618      	mov	r0, r3
 801a536:	370c      	adds	r7, #12
 801a538:	46bd      	mov	sp, r7
 801a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a53e:	4770      	bx	lr

0801a540 <_lv_disp_pop_from_inv_buf>:
/**
 * Pop (delete) the last 'num' invalidated areas from the buffer
 * @param num number of areas to delete
 */
void _lv_disp_pop_from_inv_buf(lv_disp_t * disp, uint16_t num)
{
 801a540:	b480      	push	{r7}
 801a542:	b083      	sub	sp, #12
 801a544:	af00      	add	r7, sp, #0
 801a546:	6078      	str	r0, [r7, #4]
 801a548:	460b      	mov	r3, r1
 801a54a:	807b      	strh	r3, [r7, #2]

    if(disp->inv_p < num)
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 801a552:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a556:	b29b      	uxth	r3, r3
 801a558:	461a      	mov	r2, r3
 801a55a:	887b      	ldrh	r3, [r7, #2]
 801a55c:	429a      	cmp	r2, r3
 801a55e:	da07      	bge.n	801a570 <_lv_disp_pop_from_inv_buf+0x30>
        disp->inv_p = 0;
 801a560:	687a      	ldr	r2, [r7, #4]
 801a562:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
 801a566:	f36f 0309 	bfc	r3, #0, #10
 801a56a:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186
    else
        disp->inv_p -= num;
}
 801a56e:	e013      	b.n	801a598 <_lv_disp_pop_from_inv_buf+0x58>
        disp->inv_p -= num;
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 801a576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a57a:	b29b      	uxth	r3, r3
 801a57c:	461a      	mov	r2, r3
 801a57e:	887b      	ldrh	r3, [r7, #2]
 801a580:	1ad3      	subs	r3, r2, r3
 801a582:	b29b      	uxth	r3, r3
 801a584:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a588:	b299      	uxth	r1, r3
 801a58a:	687a      	ldr	r2, [r7, #4]
 801a58c:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
 801a590:	f361 0309 	bfi	r3, r1, #0, #10
 801a594:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186
}
 801a598:	bf00      	nop
 801a59a:	370c      	adds	r7, #12
 801a59c:	46bd      	mov	sp, r7
 801a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5a2:	4770      	bx	lr

0801a5a4 <lv_disp_is_double_buf>:
 * Check the driver configuration if it's double buffered (both `buf1` and `buf2` are set)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
 801a5a4:	b480      	push	{r7}
 801a5a6:	b083      	sub	sp, #12
 801a5a8:	af00      	add	r7, sp, #0
 801a5aa:	6078      	str	r0, [r7, #4]
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	685b      	ldr	r3, [r3, #4]
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	2b00      	cmp	r3, #0
 801a5b4:	d006      	beq.n	801a5c4 <lv_disp_is_double_buf+0x20>
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	685b      	ldr	r3, [r3, #4]
 801a5ba:	685b      	ldr	r3, [r3, #4]
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	d001      	beq.n	801a5c4 <lv_disp_is_double_buf+0x20>
        return true;
 801a5c0:	2301      	movs	r3, #1
 801a5c2:	e000      	b.n	801a5c6 <lv_disp_is_double_buf+0x22>
    else
        return false;
 801a5c4:	2300      	movs	r3, #0
}
 801a5c6:	4618      	mov	r0, r3
 801a5c8:	370c      	adds	r7, #12
 801a5ca:	46bd      	mov	sp, r7
 801a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5d0:	4770      	bx	lr

0801a5d2 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
 801a5d2:	b580      	push	{r7, lr}
 801a5d4:	b084      	sub	sp, #16
 801a5d6:	af00      	add	r7, sp, #0
 801a5d8:	6078      	str	r0, [r7, #4]
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a5e0:	461a      	mov	r2, r3
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a5e8:	fb03 f302 	mul.w	r3, r3, r2
 801a5ec:	60fb      	str	r3, [r7, #12]

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 801a5ee:	6878      	ldr	r0, [r7, #4]
 801a5f0:	f7ff ffd8 	bl	801a5a4 <lv_disp_is_double_buf>
 801a5f4:	4603      	mov	r3, r0
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d007      	beq.n	801a60a <lv_disp_is_true_double_buf+0x38>
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	685b      	ldr	r3, [r3, #4]
 801a5fe:	68db      	ldr	r3, [r3, #12]
 801a600:	68fa      	ldr	r2, [r7, #12]
 801a602:	429a      	cmp	r2, r3
 801a604:	d101      	bne.n	801a60a <lv_disp_is_true_double_buf+0x38>
        return true;
 801a606:	2301      	movs	r3, #1
 801a608:	e000      	b.n	801a60c <lv_disp_is_true_double_buf+0x3a>
    }
    else {
        return false;
 801a60a:	2300      	movs	r3, #0
    }
}
 801a60c:	4618      	mov	r0, r3
 801a60e:	3710      	adds	r7, #16
 801a610:	46bd      	mov	sp, r7
 801a612:	bd80      	pop	{r7, pc}

0801a614 <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
 801a614:	b580      	push	{r7, lr}
 801a616:	b082      	sub	sp, #8
 801a618:	af00      	add	r7, sp, #0
 801a61a:	6078      	str	r0, [r7, #4]
    _lv_memset_00(driver, sizeof(lv_indev_drv_t));
 801a61c:	211c      	movs	r1, #28
 801a61e:	6878      	ldr	r0, [r7, #4]
 801a620:	f002 fd83 	bl	801d12a <_lv_memset_00>

    driver->type                 = LV_INDEV_TYPE_NONE;
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	2200      	movs	r2, #0
 801a628:	701a      	strb	r2, [r3, #0]
    driver->drag_limit           = LV_INDEV_DEF_DRAG_LIMIT;
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	220a      	movs	r2, #10
 801a62e:	751a      	strb	r2, [r3, #20]
    driver->drag_throw           = LV_INDEV_DEF_DRAG_THROW;
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	220a      	movs	r2, #10
 801a634:	755a      	strb	r2, [r3, #21]
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801a63c:	831a      	strh	r2, [r3, #24]
    driver->long_press_rep_time  = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	2264      	movs	r2, #100	; 0x64
 801a642:	835a      	strh	r2, [r3, #26]
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	2232      	movs	r2, #50	; 0x32
 801a648:	75da      	strb	r2, [r3, #23]
    driver->gesture_min_velocity = LV_INDEV_DEF_GESTURE_MIN_VELOCITY;
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	2203      	movs	r2, #3
 801a64e:	759a      	strb	r2, [r3, #22]
}
 801a650:	bf00      	nop
 801a652:	3708      	adds	r7, #8
 801a654:	46bd      	mov	sp, r7
 801a656:	bd80      	pop	{r7, pc}

0801a658 <lv_indev_drv_register>:
 * Register an initialized input device driver.
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable (can be local variable)
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
 801a658:	b590      	push	{r4, r7, lr}
 801a65a:	b085      	sub	sp, #20
 801a65c:	af00      	add	r7, sp, #0
 801a65e:	6078      	str	r0, [r7, #4]

    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 801a660:	687b      	ldr	r3, [r7, #4]
 801a662:	68db      	ldr	r3, [r3, #12]
 801a664:	2b00      	cmp	r3, #0
 801a666:	d104      	bne.n	801a672 <lv_indev_drv_register+0x1a>
 801a668:	f7ff fe82 	bl	801a370 <lv_disp_get_default>
 801a66c:	4602      	mov	r2, r0
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	60da      	str	r2, [r3, #12]

    if(driver->disp == NULL) {
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	68db      	ldr	r3, [r3, #12]
 801a676:	2b00      	cmp	r3, #0
 801a678:	d101      	bne.n	801a67e <lv_indev_drv_register+0x26>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attach the indev to "
                    "a display");
        return NULL;
 801a67a:	2300      	movs	r3, #0
 801a67c:	e03e      	b.n	801a6fc <lv_indev_drv_register+0xa4>
    }

    lv_indev_t * indev = _lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
 801a67e:	4821      	ldr	r0, [pc, #132]	; (801a704 <lv_indev_drv_register+0xac>)
 801a680:	f001 fcb5 	bl	801bfee <_lv_ll_ins_head>
 801a684:	60f8      	str	r0, [r7, #12]
    if(!indev) {
 801a686:	68fb      	ldr	r3, [r7, #12]
 801a688:	2b00      	cmp	r3, #0
 801a68a:	d113      	bne.n	801a6b4 <lv_indev_drv_register+0x5c>
        LV_ASSERT_MEM(indev);
 801a68c:	68f8      	ldr	r0, [r7, #12]
 801a68e:	f001 fa55 	bl	801bb3c <lv_debug_check_null>
 801a692:	4603      	mov	r3, r0
 801a694:	f083 0301 	eor.w	r3, r3, #1
 801a698:	b2db      	uxtb	r3, r3
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	d008      	beq.n	801a6b0 <lv_indev_drv_register+0x58>
 801a69e:	68fb      	ldr	r3, [r7, #12]
 801a6a0:	f04f 0400 	mov.w	r4, #0
 801a6a4:	461a      	mov	r2, r3
 801a6a6:	4623      	mov	r3, r4
 801a6a8:	4817      	ldr	r0, [pc, #92]	; (801a708 <lv_indev_drv_register+0xb0>)
 801a6aa:	f001 fa57 	bl	801bb5c <lv_debug_log_error>
 801a6ae:	e7fe      	b.n	801a6ae <lv_indev_drv_register+0x56>
        return NULL;
 801a6b0:	2300      	movs	r3, #0
 801a6b2:	e023      	b.n	801a6fc <lv_indev_drv_register+0xa4>
    }

    _lv_memset_00(indev, sizeof(lv_indev_t));
 801a6b4:	2160      	movs	r1, #96	; 0x60
 801a6b6:	68f8      	ldr	r0, [r7, #12]
 801a6b8:	f002 fd37 	bl	801d12a <_lv_memset_00>
    _lv_memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));
 801a6bc:	68fb      	ldr	r3, [r7, #12]
 801a6be:	221c      	movs	r2, #28
 801a6c0:	6879      	ldr	r1, [r7, #4]
 801a6c2:	4618      	mov	r0, r3
 801a6c4:	f002 fa8c 	bl	801cbe0 <_lv_memcpy>

    indev->proc.reset_query = 1;
 801a6c8:	68fa      	ldr	r2, [r7, #12]
 801a6ca:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 801a6ce:	f043 0302 	orr.w	r3, r3, #2
 801a6d2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    indev->cursor           = NULL;
 801a6d6:	68fb      	ldr	r3, [r7, #12]
 801a6d8:	2200      	movs	r2, #0
 801a6da:	655a      	str	r2, [r3, #84]	; 0x54
    indev->group            = NULL;
 801a6dc:	68fb      	ldr	r3, [r7, #12]
 801a6de:	2200      	movs	r2, #0
 801a6e0:	659a      	str	r2, [r3, #88]	; 0x58
    indev->btn_points       = NULL;
 801a6e2:	68fb      	ldr	r3, [r7, #12]
 801a6e4:	2200      	movs	r2, #0
 801a6e6:	65da      	str	r2, [r3, #92]	; 0x5c

    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
 801a6e8:	68fb      	ldr	r3, [r7, #12]
 801a6ea:	2204      	movs	r2, #4
 801a6ec:	211e      	movs	r1, #30
 801a6ee:	4807      	ldr	r0, [pc, #28]	; (801a70c <lv_indev_drv_register+0xb4>)
 801a6f0:	f003 f802 	bl	801d6f8 <lv_task_create>
 801a6f4:	4602      	mov	r2, r0
 801a6f6:	68fb      	ldr	r3, [r7, #12]
 801a6f8:	611a      	str	r2, [r3, #16]

    return indev;
 801a6fa:	68fb      	ldr	r3, [r7, #12]
}
 801a6fc:	4618      	mov	r0, r3
 801a6fe:	3714      	adds	r7, #20
 801a700:	46bd      	mov	sp, r7
 801a702:	bd90      	pop	{r4, r7, pc}
 801a704:	20021790 	.word	0x20021790
 801a708:	0802d858 	.word	0x0802d858
 801a70c:	08001e39 	.word	0x08001e39

0801a710 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 801a710:	b580      	push	{r7, lr}
 801a712:	b082      	sub	sp, #8
 801a714:	af00      	add	r7, sp, #0
 801a716:	6078      	str	r0, [r7, #4]
    if(indev == NULL)
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	2b00      	cmp	r3, #0
 801a71c:	d104      	bne.n	801a728 <lv_indev_get_next+0x18>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 801a71e:	4807      	ldr	r0, [pc, #28]	; (801a73c <lv_indev_get_next+0x2c>)
 801a720:	f001 fdc2 	bl	801c2a8 <_lv_ll_get_head>
 801a724:	4603      	mov	r3, r0
 801a726:	e004      	b.n	801a732 <lv_indev_get_next+0x22>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 801a728:	6879      	ldr	r1, [r7, #4]
 801a72a:	4804      	ldr	r0, [pc, #16]	; (801a73c <lv_indev_get_next+0x2c>)
 801a72c:	f001 fde2 	bl	801c2f4 <_lv_ll_get_next>
 801a730:	4603      	mov	r3, r0
}
 801a732:	4618      	mov	r0, r3
 801a734:	3708      	adds	r7, #8
 801a736:	46bd      	mov	sp, r7
 801a738:	bd80      	pop	{r7, pc}
 801a73a:	bf00      	nop
 801a73c:	20021790 	.word	0x20021790

0801a740 <_lv_indev_read>:
 * @param indev pointer to an input device
 * @param data input device will write its data here
 * @return false: no more data; true: there more data to read (buffered)
 */
bool _lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
 801a740:	b580      	push	{r7, lr}
 801a742:	b084      	sub	sp, #16
 801a744:	af00      	add	r7, sp, #0
 801a746:	6078      	str	r0, [r7, #4]
 801a748:	6039      	str	r1, [r7, #0]
    bool cont = false;
 801a74a:	2300      	movs	r3, #0
 801a74c:	73fb      	strb	r3, [r7, #15]

    _lv_memset_00(data, sizeof(lv_indev_data_t));
 801a74e:	2110      	movs	r1, #16
 801a750:	6838      	ldr	r0, [r7, #0]
 801a752:	f002 fcea 	bl	801d12a <_lv_memset_00>

    /* For touchpad sometimes users don't the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver.type == LV_INDEV_TYPE_POINTER) {
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	781b      	ldrb	r3, [r3, #0]
 801a75a:	2b01      	cmp	r3, #1
 801a75c:	d10a      	bne.n	801a774 <_lv_indev_read+0x34>
        data->point.x = indev->proc.types.pointer.act_point.x;
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 801a764:	683b      	ldr	r3, [r7, #0]
 801a766:	801a      	strh	r2, [r3, #0]
        data->point.y = indev->proc.types.pointer.act_point.y;
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 801a76e:	683b      	ldr	r3, [r7, #0]
 801a770:	805a      	strh	r2, [r3, #2]
 801a772:	e012      	b.n	801a79a <_lv_indev_read+0x5a>
    }
    /*Similarly set at least the last key in case of the user doesn't set it on release*/
    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	781b      	ldrb	r3, [r3, #0]
 801a778:	2b02      	cmp	r3, #2
 801a77a:	d104      	bne.n	801a786 <_lv_indev_read+0x46>
        data->key = indev->proc.types.keypad.last_key;
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a780:	683b      	ldr	r3, [r7, #0]
 801a782:	605a      	str	r2, [r3, #4]
 801a784:	e009      	b.n	801a79a <_lv_indev_read+0x5a>
    }
    /*For compatibility assume that used button was enter (encoder push) */
    else if(indev->driver.type == LV_INDEV_TYPE_ENCODER) {
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	781b      	ldrb	r3, [r3, #0]
 801a78a:	2b04      	cmp	r3, #4
 801a78c:	d105      	bne.n	801a79a <_lv_indev_read+0x5a>
        data->key = LV_KEY_ENTER;
 801a78e:	683b      	ldr	r3, [r7, #0]
 801a790:	220a      	movs	r2, #10
 801a792:	605a      	str	r2, [r3, #4]
        data->enc_diff = 0;
 801a794:	683b      	ldr	r3, [r7, #0]
 801a796:	2200      	movs	r2, #0
 801a798:	819a      	strh	r2, [r3, #12]
    }

    if(indev->driver.read_cb) {
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	685b      	ldr	r3, [r3, #4]
 801a79e:	2b00      	cmp	r3, #0
 801a7a0:	d007      	beq.n	801a7b2 <_lv_indev_read+0x72>
        LV_LOG_TRACE("indev read started");
        cont = indev->driver.read_cb(&indev->driver, data);
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	685b      	ldr	r3, [r3, #4]
 801a7a6:	687a      	ldr	r2, [r7, #4]
 801a7a8:	6839      	ldr	r1, [r7, #0]
 801a7aa:	4610      	mov	r0, r2
 801a7ac:	4798      	blx	r3
 801a7ae:	4603      	mov	r3, r0
 801a7b0:	73fb      	strb	r3, [r7, #15]
    }
    else {
        LV_LOG_WARN("indev function registered");
    }

    return cont;
 801a7b2:	7bfb      	ldrb	r3, [r7, #15]
}
 801a7b4:	4618      	mov	r0, r3
 801a7b6:	3710      	adds	r7, #16
 801a7b8:	46bd      	mov	sp, r7
 801a7ba:	bd80      	pop	{r7, pc}

0801a7bc <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
 801a7bc:	b480      	push	{r7}
 801a7be:	b083      	sub	sp, #12
 801a7c0:	af00      	add	r7, sp, #0
     * This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     * If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     * until `tick_irq_flag` remains `1`. */
    uint32_t result;
    do {
        tick_irq_flag = 1;
 801a7c2:	4b09      	ldr	r3, [pc, #36]	; (801a7e8 <lv_tick_get+0x2c>)
 801a7c4:	2201      	movs	r2, #1
 801a7c6:	701a      	strb	r2, [r3, #0]
        result        = sys_time;
 801a7c8:	4b08      	ldr	r3, [pc, #32]	; (801a7ec <lv_tick_get+0x30>)
 801a7ca:	681b      	ldr	r3, [r3, #0]
 801a7cc:	607b      	str	r3, [r7, #4]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle */
 801a7ce:	4b06      	ldr	r3, [pc, #24]	; (801a7e8 <lv_tick_get+0x2c>)
 801a7d0:	781b      	ldrb	r3, [r3, #0]
 801a7d2:	b2db      	uxtb	r3, r3
 801a7d4:	2b00      	cmp	r3, #0
 801a7d6:	d0f4      	beq.n	801a7c2 <lv_tick_get+0x6>

    return result;
 801a7d8:	687b      	ldr	r3, [r7, #4]
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 801a7da:	4618      	mov	r0, r3
 801a7dc:	370c      	adds	r7, #12
 801a7de:	46bd      	mov	sp, r7
 801a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7e4:	4770      	bx	lr
 801a7e6:	bf00      	nop
 801a7e8:	2001941c 	.word	0x2001941c
 801a7ec:	20019418 	.word	0x20019418

0801a7f0 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 801a7f0:	b580      	push	{r7, lr}
 801a7f2:	b084      	sub	sp, #16
 801a7f4:	af00      	add	r7, sp, #0
 801a7f6:	6078      	str	r0, [r7, #4]
    uint32_t act_time = lv_tick_get();
 801a7f8:	f7ff ffe0 	bl	801a7bc <lv_tick_get>
 801a7fc:	60f8      	str	r0, [r7, #12]

    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
 801a7fe:	68fa      	ldr	r2, [r7, #12]
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	429a      	cmp	r2, r3
 801a804:	d304      	bcc.n	801a810 <lv_tick_elaps+0x20>
        prev_tick = act_time - prev_tick;
 801a806:	68fa      	ldr	r2, [r7, #12]
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	1ad3      	subs	r3, r2, r3
 801a80c:	607b      	str	r3, [r7, #4]
 801a80e:	e006      	b.n	801a81e <lv_tick_elaps+0x2e>
    }
    else {
        prev_tick = UINT32_MAX - prev_tick + 1;
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	425b      	negs	r3, r3
 801a814:	607b      	str	r3, [r7, #4]
        prev_tick += act_time;
 801a816:	687a      	ldr	r2, [r7, #4]
 801a818:	68fb      	ldr	r3, [r7, #12]
 801a81a:	4413      	add	r3, r2
 801a81c:	607b      	str	r3, [r7, #4]
    }

    return prev_tick;
 801a81e:	687b      	ldr	r3, [r7, #4]
}
 801a820:	4618      	mov	r0, r3
 801a822:	3710      	adds	r7, #16
 801a824:	46bd      	mov	sp, r7
 801a826:	bd80      	pop	{r7, pc}

0801a828 <_lv_memcpy_small>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
 801a828:	b480      	push	{r7}
 801a82a:	b087      	sub	sp, #28
 801a82c:	af00      	add	r7, sp, #0
 801a82e:	60f8      	str	r0, [r7, #12]
 801a830:	60b9      	str	r1, [r7, #8]
 801a832:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 801a834:	68fb      	ldr	r3, [r7, #12]
 801a836:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 801a838:	68bb      	ldr	r3, [r7, #8]
 801a83a:	613b      	str	r3, [r7, #16]

    while(len) {
 801a83c:	e00c      	b.n	801a858 <_lv_memcpy_small+0x30>
        *d8 = *s8;
 801a83e:	693b      	ldr	r3, [r7, #16]
 801a840:	781a      	ldrb	r2, [r3, #0]
 801a842:	697b      	ldr	r3, [r7, #20]
 801a844:	701a      	strb	r2, [r3, #0]
        d8++;
 801a846:	697b      	ldr	r3, [r7, #20]
 801a848:	3301      	adds	r3, #1
 801a84a:	617b      	str	r3, [r7, #20]
        s8++;
 801a84c:	693b      	ldr	r3, [r7, #16]
 801a84e:	3301      	adds	r3, #1
 801a850:	613b      	str	r3, [r7, #16]
        len--;
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	3b01      	subs	r3, #1
 801a856:	607b      	str	r3, [r7, #4]
    while(len) {
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	2b00      	cmp	r3, #0
 801a85c:	d1ef      	bne.n	801a83e <_lv_memcpy_small+0x16>
    }

    return dst;
 801a85e:	68fb      	ldr	r3, [r7, #12]
}
 801a860:	4618      	mov	r0, r3
 801a862:	371c      	adds	r7, #28
 801a864:	46bd      	mov	sp, r7
 801a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a86a:	4770      	bx	lr

0801a86c <_lv_anim_core_init>:

/**
 * Init. the animation module
 */
void _lv_anim_core_init(void)
{
 801a86c:	b580      	push	{r7, lr}
 801a86e:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 801a870:	2144      	movs	r1, #68	; 0x44
 801a872:	480c      	ldr	r0, [pc, #48]	; (801a8a4 <_lv_anim_core_init+0x38>)
 801a874:	f001 fba2 	bl	801bfbc <_lv_ll_init>
    last_task_run = lv_tick_get();
 801a878:	f7ff ffa0 	bl	801a7bc <lv_tick_get>
 801a87c:	4602      	mov	r2, r0
 801a87e:	4b0a      	ldr	r3, [pc, #40]	; (801a8a8 <_lv_anim_core_init+0x3c>)
 801a880:	601a      	str	r2, [r3, #0]
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
 801a882:	2300      	movs	r3, #0
 801a884:	2204      	movs	r2, #4
 801a886:	211e      	movs	r1, #30
 801a888:	4808      	ldr	r0, [pc, #32]	; (801a8ac <_lv_anim_core_init+0x40>)
 801a88a:	f002 ff35 	bl	801d6f8 <lv_task_create>
 801a88e:	4602      	mov	r2, r0
 801a890:	4b07      	ldr	r3, [pc, #28]	; (801a8b0 <_lv_anim_core_init+0x44>)
 801a892:	601a      	str	r2, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation task*/
 801a894:	f000 fa52 	bl	801ad3c <anim_mark_list_change>
    anim_list_changed = false; /*The list has not actually changed*/
 801a898:	4b06      	ldr	r3, [pc, #24]	; (801a8b4 <_lv_anim_core_init+0x48>)
 801a89a:	2200      	movs	r2, #0
 801a89c:	701a      	strb	r2, [r3, #0]
}
 801a89e:	bf00      	nop
 801a8a0:	bd80      	pop	{r7, pc}
 801a8a2:	bf00      	nop
 801a8a4:	20021860 	.word	0x20021860
 801a8a8:	20019420 	.word	0x20019420
 801a8ac:	0801aaa5 	.word	0x0801aaa5
 801a8b0:	20019428 	.word	0x20019428
 801a8b4:	20019424 	.word	0x20019424

0801a8b8 <lv_anim_init>:
 * lv_anim_init(&a);
 * lv_anim_set_...(&a);
 * @param a pointer to an `lv_anim_t` variable to initialize
 */
void lv_anim_init(lv_anim_t * a)
{
 801a8b8:	b580      	push	{r7, lr}
 801a8ba:	b082      	sub	sp, #8
 801a8bc:	af00      	add	r7, sp, #0
 801a8be:	6078      	str	r0, [r7, #4]
    _lv_memset_00(a, sizeof(lv_anim_t));
 801a8c0:	2144      	movs	r1, #68	; 0x44
 801a8c2:	6878      	ldr	r0, [r7, #4]
 801a8c4:	f002 fc31 	bl	801d12a <_lv_memset_00>
    a->time    = 500;
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801a8ce:	625a      	str	r2, [r3, #36]	; 0x24
    a->start   = 0;
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	2200      	movs	r2, #0
 801a8d4:	619a      	str	r2, [r3, #24]
    a->end     = 100;
 801a8d6:	687b      	ldr	r3, [r7, #4]
 801a8d8:	2264      	movs	r2, #100	; 0x64
 801a8da:	621a      	str	r2, [r3, #32]
    _lv_memcpy_small(&a->path, &lv_anim_path_def, sizeof(lv_anim_path_cb_t));
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	3310      	adds	r3, #16
 801a8e0:	2204      	movs	r2, #4
 801a8e2:	4909      	ldr	r1, [pc, #36]	; (801a908 <lv_anim_init+0x50>)
 801a8e4:	4618      	mov	r0, r3
 801a8e6:	f7ff ff9f 	bl	801a828 <_lv_memcpy_small>
    a->repeat_cnt = 1;
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	2201      	movs	r2, #1
 801a8ee:	871a      	strh	r2, [r3, #56]	; 0x38
    a->early_apply = 1;
 801a8f0:	687a      	ldr	r2, [r7, #4]
 801a8f2:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 801a8f6:	f043 0301 	orr.w	r3, r3, #1
 801a8fa:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
}
 801a8fe:	bf00      	nop
 801a900:	3708      	adds	r7, #8
 801a902:	46bd      	mov	sp, r7
 801a904:	bd80      	pop	{r7, pc}
 801a906:	bf00      	nop
 801a908:	08030ee4 	.word	0x08030ee4

0801a90c <lv_anim_start>:
/**
 * Create an animation
 * @param a an initialized 'anim_t' variable. Not required after call.
 */
void lv_anim_start(lv_anim_t * a)
{
 801a90c:	b590      	push	{r4, r7, lr}
 801a90e:	b085      	sub	sp, #20
 801a910:	af00      	add	r7, sp, #0
 801a912:	6078      	str	r0, [r7, #4]
    LV_LOG_TRACE("animation create started")
    /* Do not let two animations for the same 'var' with the same 'fp'*/
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	685b      	ldr	r3, [r3, #4]
 801a918:	2b00      	cmp	r3, #0
 801a91a:	d007      	beq.n	801a92c <lv_anim_start+0x20>
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	681a      	ldr	r2, [r3, #0]
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	685b      	ldr	r3, [r3, #4]
 801a924:	4619      	mov	r1, r3
 801a926:	4610      	mov	r0, r2
 801a928:	f000 f856 	bl	801a9d8 <lv_anim_del>

    /*If the list is empty the anim task was suspended and it's last run measure is invalid*/
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 801a92c:	4827      	ldr	r0, [pc, #156]	; (801a9cc <lv_anim_start+0xc0>)
 801a92e:	f001 fd75 	bl	801c41c <_lv_ll_is_empty>
 801a932:	4603      	mov	r3, r0
 801a934:	2b00      	cmp	r3, #0
 801a936:	d005      	beq.n	801a944 <lv_anim_start+0x38>
        last_task_run = lv_tick_get() - 1;
 801a938:	f7ff ff40 	bl	801a7bc <lv_tick_get>
 801a93c:	4603      	mov	r3, r0
 801a93e:	3b01      	subs	r3, #1
 801a940:	4a23      	ldr	r2, [pc, #140]	; (801a9d0 <lv_anim_start+0xc4>)
 801a942:	6013      	str	r3, [r2, #0]
    }

    /*Add the new animation to the animation linked list*/
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 801a944:	4821      	ldr	r0, [pc, #132]	; (801a9cc <lv_anim_start+0xc0>)
 801a946:	f001 fb52 	bl	801bfee <_lv_ll_ins_head>
 801a94a:	60f8      	str	r0, [r7, #12]
    LV_ASSERT_MEM(new_anim);
 801a94c:	68f8      	ldr	r0, [r7, #12]
 801a94e:	f001 f8f5 	bl	801bb3c <lv_debug_check_null>
 801a952:	4603      	mov	r3, r0
 801a954:	f083 0301 	eor.w	r3, r3, #1
 801a958:	b2db      	uxtb	r3, r3
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	d008      	beq.n	801a970 <lv_anim_start+0x64>
 801a95e:	68fb      	ldr	r3, [r7, #12]
 801a960:	f04f 0400 	mov.w	r4, #0
 801a964:	461a      	mov	r2, r3
 801a966:	4623      	mov	r3, r4
 801a968:	481a      	ldr	r0, [pc, #104]	; (801a9d4 <lv_anim_start+0xc8>)
 801a96a:	f001 f8f7 	bl	801bb5c <lv_debug_log_error>
 801a96e:	e7fe      	b.n	801a96e <lv_anim_start+0x62>
    if(new_anim == NULL) return;
 801a970:	68fb      	ldr	r3, [r7, #12]
 801a972:	2b00      	cmp	r3, #0
 801a974:	d025      	beq.n	801a9c2 <lv_anim_start+0xb6>

    /*Initialize the animation descriptor*/
    a->time_orig = a->time;
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a97a:	461a      	mov	r2, r3
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	63da      	str	r2, [r3, #60]	; 0x3c
    _lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 801a980:	2244      	movs	r2, #68	; 0x44
 801a982:	6879      	ldr	r1, [r7, #4]
 801a984:	68f8      	ldr	r0, [r7, #12]
 801a986:	f002 f92b 	bl	801cbe0 <_lv_memcpy>

    /*Set the start value*/
    if(new_anim->early_apply) {
 801a98a:	68fb      	ldr	r3, [r7, #12]
 801a98c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801a990:	f003 0301 	and.w	r3, r3, #1
 801a994:	b2db      	uxtb	r3, r3
 801a996:	2b00      	cmp	r3, #0
 801a998:	d010      	beq.n	801a9bc <lv_anim_start+0xb0>
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start);
 801a99a:	68fb      	ldr	r3, [r7, #12]
 801a99c:	685b      	ldr	r3, [r3, #4]
 801a99e:	2b00      	cmp	r3, #0
 801a9a0:	d00c      	beq.n	801a9bc <lv_anim_start+0xb0>
 801a9a2:	68fb      	ldr	r3, [r7, #12]
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	d008      	beq.n	801a9bc <lv_anim_start+0xb0>
 801a9aa:	68fb      	ldr	r3, [r7, #12]
 801a9ac:	685b      	ldr	r3, [r3, #4]
 801a9ae:	68fa      	ldr	r2, [r7, #12]
 801a9b0:	6810      	ldr	r0, [r2, #0]
 801a9b2:	68fa      	ldr	r2, [r7, #12]
 801a9b4:	6992      	ldr	r2, [r2, #24]
 801a9b6:	b212      	sxth	r2, r2
 801a9b8:	4611      	mov	r1, r2
 801a9ba:	4798      	blx	r3
    }

    /* Creating an animation changed the linked list.
     * It's important if it happens in a ready callback. (see `anim_task`)*/
    anim_mark_list_change();
 801a9bc:	f000 f9be 	bl	801ad3c <anim_mark_list_change>
 801a9c0:	e000      	b.n	801a9c4 <lv_anim_start+0xb8>
    if(new_anim == NULL) return;
 801a9c2:	bf00      	nop

    LV_LOG_TRACE("animation created")
}
 801a9c4:	3714      	adds	r7, #20
 801a9c6:	46bd      	mov	sp, r7
 801a9c8:	bd90      	pop	{r4, r7, pc}
 801a9ca:	bf00      	nop
 801a9cc:	20021860 	.word	0x20021860
 801a9d0:	20019420 	.word	0x20019420
 801a9d4:	0802d868 	.word	0x0802d868

0801a9d8 <lv_anim_del>:
 * @param exec_cb a function pointer which is animating 'var',
 *           or NULL to delete all the animations of 'var'
 * @return true: at least 1 animation is deleted, false: no animation is deleted
 */
bool lv_anim_del(void * var, lv_anim_exec_xcb_t exec_cb)
{
 801a9d8:	b580      	push	{r7, lr}
 801a9da:	b086      	sub	sp, #24
 801a9dc:	af00      	add	r7, sp, #0
 801a9de:	6078      	str	r0, [r7, #4]
 801a9e0:	6039      	str	r1, [r7, #0]
    lv_anim_t * a;
    lv_anim_t * a_next;
    bool del = false;
 801a9e2:	2300      	movs	r3, #0
 801a9e4:	74fb      	strb	r3, [r7, #19]
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 801a9e6:	4816      	ldr	r0, [pc, #88]	; (801aa40 <lv_anim_del+0x68>)
 801a9e8:	f001 fc5e 	bl	801c2a8 <_lv_ll_get_head>
 801a9ec:	6178      	str	r0, [r7, #20]
    while(a != NULL) {
 801a9ee:	e01e      	b.n	801aa2e <lv_anim_del+0x56>
        /*'a' might be deleted, so get the next object while 'a' is valid*/
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 801a9f0:	6979      	ldr	r1, [r7, #20]
 801a9f2:	4813      	ldr	r0, [pc, #76]	; (801aa40 <lv_anim_del+0x68>)
 801a9f4:	f001 fc7e 	bl	801c2f4 <_lv_ll_get_next>
 801a9f8:	60f8      	str	r0, [r7, #12]

        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 801a9fa:	697b      	ldr	r3, [r7, #20]
 801a9fc:	681b      	ldr	r3, [r3, #0]
 801a9fe:	687a      	ldr	r2, [r7, #4]
 801aa00:	429a      	cmp	r2, r3
 801aa02:	d112      	bne.n	801aa2a <lv_anim_del+0x52>
 801aa04:	697b      	ldr	r3, [r7, #20]
 801aa06:	685b      	ldr	r3, [r3, #4]
 801aa08:	683a      	ldr	r2, [r7, #0]
 801aa0a:	429a      	cmp	r2, r3
 801aa0c:	d002      	beq.n	801aa14 <lv_anim_del+0x3c>
 801aa0e:	683b      	ldr	r3, [r7, #0]
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d10a      	bne.n	801aa2a <lv_anim_del+0x52>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 801aa14:	6979      	ldr	r1, [r7, #20]
 801aa16:	480a      	ldr	r0, [pc, #40]	; (801aa40 <lv_anim_del+0x68>)
 801aa18:	f001 fb98 	bl	801c14c <_lv_ll_remove>
            lv_mem_free(a);
 801aa1c:	6978      	ldr	r0, [r7, #20]
 801aa1e:	f001 fe63 	bl	801c6e8 <lv_mem_free>
            anim_mark_list_change(); /*Read by `anim_task`. It need to know if a delete occurred in
 801aa22:	f000 f98b 	bl	801ad3c <anim_mark_list_change>
                                         the linked list*/
            del = true;
 801aa26:	2301      	movs	r3, #1
 801aa28:	74fb      	strb	r3, [r7, #19]
        }

        a = a_next;
 801aa2a:	68fb      	ldr	r3, [r7, #12]
 801aa2c:	617b      	str	r3, [r7, #20]
    while(a != NULL) {
 801aa2e:	697b      	ldr	r3, [r7, #20]
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	d1dd      	bne.n	801a9f0 <lv_anim_del+0x18>
    }

    return del;
 801aa34:	7cfb      	ldrb	r3, [r7, #19]
}
 801aa36:	4618      	mov	r0, r3
 801aa38:	3718      	adds	r7, #24
 801aa3a:	46bd      	mov	sp, r7
 801aa3c:	bd80      	pop	{r7, pc}
 801aa3e:	bf00      	nop
 801aa40:	20021860 	.word	0x20021860

0801aa44 <lv_anim_path_linear>:
 * Calculate the current value of an animation applying linear characteristic
 * @param a pointer to an animation
 * @return the current value to set
 */
lv_anim_value_t lv_anim_path_linear(const lv_anim_path_t * path, const lv_anim_t * a)
{
 801aa44:	b480      	push	{r7}
 801aa46:	b085      	sub	sp, #20
 801aa48:	af00      	add	r7, sp, #0
 801aa4a:	6078      	str	r0, [r7, #4]
 801aa4c:	6039      	str	r1, [r7, #0]
    LV_UNUSED(path);

    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
 801aa4e:	683b      	ldr	r3, [r7, #0]
 801aa50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801aa52:	683b      	ldr	r3, [r7, #0]
 801aa54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa56:	429a      	cmp	r2, r3
 801aa58:	d103      	bne.n	801aa62 <lv_anim_path_linear+0x1e>
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
 801aa5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801aa5e:	60fb      	str	r3, [r7, #12]
 801aa60:	e007      	b.n	801aa72 <lv_anim_path_linear+0x2e>
    }
    else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
 801aa62:	683b      	ldr	r3, [r7, #0]
 801aa64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa66:	029a      	lsls	r2, r3, #10
 801aa68:	683b      	ldr	r3, [r7, #0]
 801aa6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa6c:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa70:	60fb      	str	r3, [r7, #12]
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
 801aa72:	683b      	ldr	r3, [r7, #0]
 801aa74:	6a1a      	ldr	r2, [r3, #32]
 801aa76:	683b      	ldr	r3, [r7, #0]
 801aa78:	699b      	ldr	r3, [r3, #24]
 801aa7a:	1ad3      	subs	r3, r2, r3
 801aa7c:	68fa      	ldr	r2, [r7, #12]
 801aa7e:	fb02 f303 	mul.w	r3, r2, r3
 801aa82:	60bb      	str	r3, [r7, #8]
    new_value = new_value >> LV_ANIM_RES_SHIFT;
 801aa84:	68bb      	ldr	r3, [r7, #8]
 801aa86:	129b      	asrs	r3, r3, #10
 801aa88:	60bb      	str	r3, [r7, #8]
    new_value += a->start;
 801aa8a:	683b      	ldr	r3, [r7, #0]
 801aa8c:	699b      	ldr	r3, [r3, #24]
 801aa8e:	68ba      	ldr	r2, [r7, #8]
 801aa90:	4413      	add	r3, r2
 801aa92:	60bb      	str	r3, [r7, #8]

    return (lv_anim_value_t)new_value;
 801aa94:	68bb      	ldr	r3, [r7, #8]
 801aa96:	b21b      	sxth	r3, r3
}
 801aa98:	4618      	mov	r0, r3
 801aa9a:	3714      	adds	r7, #20
 801aa9c:	46bd      	mov	sp, r7
 801aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaa2:	4770      	bx	lr

0801aaa4 <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(lv_task_t * param)
{
 801aaa4:	b580      	push	{r7, lr}
 801aaa6:	b086      	sub	sp, #24
 801aaa8:	af00      	add	r7, sp, #0
 801aaaa:	6078      	str	r0, [r7, #4]
    (void)param;

    lv_anim_t * a;
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 801aaac:	4854      	ldr	r0, [pc, #336]	; (801ac00 <anim_task+0x15c>)
 801aaae:	f001 fbfb 	bl	801c2a8 <_lv_ll_get_head>
 801aab2:	6178      	str	r0, [r7, #20]
 801aab4:	e00b      	b.n	801aace <anim_task+0x2a>
        a->has_run = 0;
 801aab6:	697a      	ldr	r2, [r7, #20]
 801aab8:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 801aabc:	f36f 0341 	bfc	r3, #1, #1
 801aac0:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
 801aac4:	6979      	ldr	r1, [r7, #20]
 801aac6:	484e      	ldr	r0, [pc, #312]	; (801ac00 <anim_task+0x15c>)
 801aac8:	f001 fc14 	bl	801c2f4 <_lv_ll_get_next>
 801aacc:	6178      	str	r0, [r7, #20]
 801aace:	697b      	ldr	r3, [r7, #20]
 801aad0:	2b00      	cmp	r3, #0
 801aad2:	d1f0      	bne.n	801aab6 <anim_task+0x12>
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 801aad4:	4b4b      	ldr	r3, [pc, #300]	; (801ac04 <anim_task+0x160>)
 801aad6:	681b      	ldr	r3, [r3, #0]
 801aad8:	4618      	mov	r0, r3
 801aada:	f7ff fe89 	bl	801a7f0 <lv_tick_elaps>
 801aade:	60f8      	str	r0, [r7, #12]

    a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 801aae0:	4847      	ldr	r0, [pc, #284]	; (801ac00 <anim_task+0x15c>)
 801aae2:	f001 fbe1 	bl	801c2a8 <_lv_ll_get_head>
 801aae6:	6178      	str	r0, [r7, #20]

    while(a != NULL) {
 801aae8:	e07d      	b.n	801abe6 <anim_task+0x142>
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 801aaea:	4b47      	ldr	r3, [pc, #284]	; (801ac08 <anim_task+0x164>)
 801aaec:	2200      	movs	r2, #0
 801aaee:	701a      	strb	r2, [r3, #0]

        if(!a->has_run) {
 801aaf0:	697b      	ldr	r3, [r7, #20]
 801aaf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801aaf6:	f003 0302 	and.w	r3, r3, #2
 801aafa:	b2db      	uxtb	r3, r3
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d164      	bne.n	801abca <anim_task+0x126>
            a->has_run = 1; /*The list readying might be reset so need to know which anim has run already*/
 801ab00:	697a      	ldr	r2, [r7, #20]
 801ab02:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 801ab06:	f043 0302 	orr.w	r3, r3, #2
 801ab0a:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40

            /*The animation will run now for the first time. Call `start_cb`*/
            int32_t new_act_time = a->act_time + elaps;
 801ab0e:	697b      	ldr	r3, [r7, #20]
 801ab10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab12:	461a      	mov	r2, r3
 801ab14:	68fb      	ldr	r3, [r7, #12]
 801ab16:	4413      	add	r3, r2
 801ab18:	60bb      	str	r3, [r7, #8]
            if(a->act_time <= 0 && new_act_time >= 0) {
 801ab1a:	697b      	ldr	r3, [r7, #20]
 801ab1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	dc0a      	bgt.n	801ab38 <anim_task+0x94>
 801ab22:	68bb      	ldr	r3, [r7, #8]
 801ab24:	2b00      	cmp	r3, #0
 801ab26:	db07      	blt.n	801ab38 <anim_task+0x94>
                if(a->start_cb) a->start_cb(a);
 801ab28:	697b      	ldr	r3, [r7, #20]
 801ab2a:	689b      	ldr	r3, [r3, #8]
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	d003      	beq.n	801ab38 <anim_task+0x94>
 801ab30:	697b      	ldr	r3, [r7, #20]
 801ab32:	689b      	ldr	r3, [r3, #8]
 801ab34:	6978      	ldr	r0, [r7, #20]
 801ab36:	4798      	blx	r3
            }
            a->act_time += elaps;
 801ab38:	697b      	ldr	r3, [r7, #20]
 801ab3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab3c:	461a      	mov	r2, r3
 801ab3e:	68fb      	ldr	r3, [r7, #12]
 801ab40:	4413      	add	r3, r2
 801ab42:	461a      	mov	r2, r3
 801ab44:	697b      	ldr	r3, [r7, #20]
 801ab46:	629a      	str	r2, [r3, #40]	; 0x28
            if(a->act_time >= 0) {
 801ab48:	697b      	ldr	r3, [r7, #20]
 801ab4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab4c:	2b00      	cmp	r3, #0
 801ab4e:	db3c      	blt.n	801abca <anim_task+0x126>
                if(a->act_time > a->time) a->act_time = a->time;
 801ab50:	697b      	ldr	r3, [r7, #20]
 801ab52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ab54:	697b      	ldr	r3, [r7, #20]
 801ab56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab58:	429a      	cmp	r2, r3
 801ab5a:	dd03      	ble.n	801ab64 <anim_task+0xc0>
 801ab5c:	697b      	ldr	r3, [r7, #20]
 801ab5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ab60:	697b      	ldr	r3, [r7, #20]
 801ab62:	629a      	str	r2, [r3, #40]	; 0x28

                int32_t new_value;
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
 801ab64:	697b      	ldr	r3, [r7, #20]
 801ab66:	691b      	ldr	r3, [r3, #16]
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	d009      	beq.n	801ab80 <anim_task+0xdc>
 801ab6c:	697b      	ldr	r3, [r7, #20]
 801ab6e:	691b      	ldr	r3, [r3, #16]
 801ab70:	697a      	ldr	r2, [r7, #20]
 801ab72:	3210      	adds	r2, #16
 801ab74:	6979      	ldr	r1, [r7, #20]
 801ab76:	4610      	mov	r0, r2
 801ab78:	4798      	blx	r3
 801ab7a:	4603      	mov	r3, r0
 801ab7c:	613b      	str	r3, [r7, #16]
 801ab7e:	e007      	b.n	801ab90 <anim_task+0xec>
                else new_value = lv_anim_path_linear(&a->path, a);
 801ab80:	697b      	ldr	r3, [r7, #20]
 801ab82:	3310      	adds	r3, #16
 801ab84:	6979      	ldr	r1, [r7, #20]
 801ab86:	4618      	mov	r0, r3
 801ab88:	f7ff ff5c 	bl	801aa44 <lv_anim_path_linear>
 801ab8c:	4603      	mov	r3, r0
 801ab8e:	613b      	str	r3, [r7, #16]

                if(new_value != a->current) {
 801ab90:	697b      	ldr	r3, [r7, #20]
 801ab92:	69db      	ldr	r3, [r3, #28]
 801ab94:	693a      	ldr	r2, [r7, #16]
 801ab96:	429a      	cmp	r2, r3
 801ab98:	d00e      	beq.n	801abb8 <anim_task+0x114>
                    a->current = new_value;
 801ab9a:	697b      	ldr	r3, [r7, #20]
 801ab9c:	693a      	ldr	r2, [r7, #16]
 801ab9e:	61da      	str	r2, [r3, #28]
                    /*Apply the calculated value*/
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 801aba0:	697b      	ldr	r3, [r7, #20]
 801aba2:	685b      	ldr	r3, [r3, #4]
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	d007      	beq.n	801abb8 <anim_task+0x114>
 801aba8:	697b      	ldr	r3, [r7, #20]
 801abaa:	685b      	ldr	r3, [r3, #4]
 801abac:	697a      	ldr	r2, [r7, #20]
 801abae:	6812      	ldr	r2, [r2, #0]
 801abb0:	6939      	ldr	r1, [r7, #16]
 801abb2:	b209      	sxth	r1, r1
 801abb4:	4610      	mov	r0, r2
 801abb6:	4798      	blx	r3
                }

                /*If the time is elapsed the animation is ready*/
                if(a->act_time >= a->time) {
 801abb8:	697b      	ldr	r3, [r7, #20]
 801abba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801abbc:	697b      	ldr	r3, [r7, #20]
 801abbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801abc0:	429a      	cmp	r2, r3
 801abc2:	db02      	blt.n	801abca <anim_task+0x126>
                    anim_ready_handler(a);
 801abc4:	6978      	ldr	r0, [r7, #20]
 801abc6:	f000 f821 	bl	801ac0c <anim_ready_handler>
            }
        }

        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed)
 801abca:	4b0f      	ldr	r3, [pc, #60]	; (801ac08 <anim_task+0x164>)
 801abcc:	781b      	ldrb	r3, [r3, #0]
 801abce:	2b00      	cmp	r3, #0
 801abd0:	d004      	beq.n	801abdc <anim_task+0x138>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 801abd2:	480b      	ldr	r0, [pc, #44]	; (801ac00 <anim_task+0x15c>)
 801abd4:	f001 fb68 	bl	801c2a8 <_lv_ll_get_head>
 801abd8:	6178      	str	r0, [r7, #20]
 801abda:	e004      	b.n	801abe6 <anim_task+0x142>
        else
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 801abdc:	6979      	ldr	r1, [r7, #20]
 801abde:	4808      	ldr	r0, [pc, #32]	; (801ac00 <anim_task+0x15c>)
 801abe0:	f001 fb88 	bl	801c2f4 <_lv_ll_get_next>
 801abe4:	6178      	str	r0, [r7, #20]
    while(a != NULL) {
 801abe6:	697b      	ldr	r3, [r7, #20]
 801abe8:	2b00      	cmp	r3, #0
 801abea:	f47f af7e 	bne.w	801aaea <anim_task+0x46>
    }

    last_task_run = lv_tick_get();
 801abee:	f7ff fde5 	bl	801a7bc <lv_tick_get>
 801abf2:	4602      	mov	r2, r0
 801abf4:	4b03      	ldr	r3, [pc, #12]	; (801ac04 <anim_task+0x160>)
 801abf6:	601a      	str	r2, [r3, #0]
}
 801abf8:	bf00      	nop
 801abfa:	3718      	adds	r7, #24
 801abfc:	46bd      	mov	sp, r7
 801abfe:	bd80      	pop	{r7, pc}
 801ac00:	20021860 	.word	0x20021860
 801ac04:	20019420 	.word	0x20019420
 801ac08:	20019424 	.word	0x20019424

0801ac0c <anim_ready_handler>:
 * e.g. repeat, play back, delete etc.
 * @param a pointer to an animation descriptor
 * @return true: animation delete occurred and the `LV_GC_ROOT(_lv_anim_ll)` has changed
 * */
static bool anim_ready_handler(lv_anim_t * a)
{
 801ac0c:	b580      	push	{r7, lr}
 801ac0e:	b094      	sub	sp, #80	; 0x50
 801ac10:	af00      	add	r7, sp, #0
 801ac12:	6078      	str	r0, [r7, #4]
    /*In the end of a forward anim decrement repeat cnt.*/
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ac1a:	f003 0301 	and.w	r3, r3, #1
 801ac1e:	b2db      	uxtb	r3, r3
 801ac20:	2b00      	cmp	r3, #0
 801ac22:	d10f      	bne.n	801ac44 <anim_ready_handler+0x38>
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	d00b      	beq.n	801ac44 <anim_ready_handler+0x38>
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 801ac30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ac34:	4293      	cmp	r3, r2
 801ac36:	d005      	beq.n	801ac44 <anim_ready_handler+0x38>
        a->repeat_cnt--;
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 801ac3c:	3b01      	subs	r3, #1
 801ac3e:	b29a      	uxth	r2, r3
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	871a      	strh	r2, [r3, #56]	; 0x38
    }

    /*Delete the animation if
     * - no repeat left and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready */
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 801ac48:	2b00      	cmp	r3, #0
 801ac4a:	d128      	bne.n	801ac9e <anim_ready_handler+0x92>
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac50:	2b00      	cmp	r3, #0
 801ac52:	d00b      	beq.n	801ac6c <anim_ready_handler+0x60>
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	d020      	beq.n	801ac9e <anim_ready_handler+0x92>
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ac62:	f003 0301 	and.w	r3, r3, #1
 801ac66:	b2db      	uxtb	r3, r3
 801ac68:	2b00      	cmp	r3, #0
 801ac6a:	d018      	beq.n	801ac9e <anim_ready_handler+0x92>

        /*Create copy from the animation and delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        lv_anim_t a_tmp;
        _lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));
 801ac6c:	f107 0308 	add.w	r3, r7, #8
 801ac70:	2244      	movs	r2, #68	; 0x44
 801ac72:	6879      	ldr	r1, [r7, #4]
 801ac74:	4618      	mov	r0, r3
 801ac76:	f001 ffb3 	bl	801cbe0 <_lv_memcpy>
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 801ac7a:	6879      	ldr	r1, [r7, #4]
 801ac7c:	482d      	ldr	r0, [pc, #180]	; (801ad34 <anim_ready_handler+0x128>)
 801ac7e:	f001 fa65 	bl	801c14c <_lv_ll_remove>
        lv_mem_free(a);
 801ac82:	6878      	ldr	r0, [r7, #4]
 801ac84:	f001 fd30 	bl	801c6e8 <lv_mem_free>
        /*Flag that the list has changed */
        anim_mark_list_change();
 801ac88:	f000 f858 	bl	801ad3c <anim_mark_list_change>

        /* Call the callback function at the end*/
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 801ac8c:	697b      	ldr	r3, [r7, #20]
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d049      	beq.n	801ad26 <anim_ready_handler+0x11a>
 801ac92:	697b      	ldr	r3, [r7, #20]
 801ac94:	f107 0208 	add.w	r2, r7, #8
 801ac98:	4610      	mov	r0, r2
 801ac9a:	4798      	blx	r3
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 801ac9c:	e043      	b.n	801ad26 <anim_ready_handler+0x11a>
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aca2:	425a      	negs	r2, r3
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	629a      	str	r2, [r3, #40]	; 0x28
        /*Swap the start and end values in play back mode*/
        if(a->playback_time != 0) {
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801acac:	2b00      	cmp	r3, #0
 801acae:	d03b      	beq.n	801ad28 <anim_ready_handler+0x11c>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801acb6:	f003 0301 	and.w	r3, r3, #1
 801acba:	b2db      	uxtb	r3, r3
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	d104      	bne.n	801acca <anim_ready_handler+0xbe>
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801acc4:	425a      	negs	r2, r3
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	629a      	str	r2, [r3, #40]	; 0x28

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801acd0:	f003 0301 	and.w	r3, r3, #1
 801acd4:	b2db      	uxtb	r3, r3
 801acd6:	2b00      	cmp	r3, #0
 801acd8:	bf0c      	ite	eq
 801acda:	2301      	moveq	r3, #1
 801acdc:	2300      	movne	r3, #0
 801acde:	b2d9      	uxtb	r1, r3
 801ace0:	687a      	ldr	r2, [r7, #4]
 801ace2:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 801ace6:	f361 0300 	bfi	r3, r1, #0, #1
 801acea:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
            /*Swap the start and end values*/
            int32_t tmp;
            tmp      = a->start;
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	699b      	ldr	r3, [r3, #24]
 801acf2:	64fb      	str	r3, [r7, #76]	; 0x4c
            a->start = a->end;
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	6a1a      	ldr	r2, [r3, #32]
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	619a      	str	r2, [r3, #24]
            a->end   = tmp;
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ad00:	621a      	str	r2, [r3, #32]

            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ad08:	f003 0301 	and.w	r3, r3, #1
 801ad0c:	b2db      	uxtb	r3, r3
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	d103      	bne.n	801ad1a <anim_ready_handler+0x10e>
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ad16:	461a      	mov	r2, r3
 801ad18:	e002      	b.n	801ad20 <anim_ready_handler+0x114>
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ad1e:	461a      	mov	r2, r3
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	625a      	str	r2, [r3, #36]	; 0x24
 801ad24:	e000      	b.n	801ad28 <anim_ready_handler+0x11c>
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 801ad26:	bf00      	nop
        }
    }

    return anim_list_changed;
 801ad28:	4b03      	ldr	r3, [pc, #12]	; (801ad38 <anim_ready_handler+0x12c>)
 801ad2a:	781b      	ldrb	r3, [r3, #0]
}
 801ad2c:	4618      	mov	r0, r3
 801ad2e:	3750      	adds	r7, #80	; 0x50
 801ad30:	46bd      	mov	sp, r7
 801ad32:	bd80      	pop	{r7, pc}
 801ad34:	20021860 	.word	0x20021860
 801ad38:	20019424 	.word	0x20019424

0801ad3c <anim_mark_list_change>:
static void anim_mark_list_change(void)
{
 801ad3c:	b580      	push	{r7, lr}
 801ad3e:	af00      	add	r7, sp, #0
    anim_list_changed = true;
 801ad40:	4b0b      	ldr	r3, [pc, #44]	; (801ad70 <anim_mark_list_change+0x34>)
 801ad42:	2201      	movs	r2, #1
 801ad44:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 801ad46:	480b      	ldr	r0, [pc, #44]	; (801ad74 <anim_mark_list_change+0x38>)
 801ad48:	f001 faae 	bl	801c2a8 <_lv_ll_get_head>
 801ad4c:	4603      	mov	r3, r0
 801ad4e:	2b00      	cmp	r3, #0
 801ad50:	d106      	bne.n	801ad60 <anim_mark_list_change+0x24>
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
 801ad52:	4b09      	ldr	r3, [pc, #36]	; (801ad78 <anim_mark_list_change+0x3c>)
 801ad54:	681b      	ldr	r3, [r3, #0]
 801ad56:	2100      	movs	r1, #0
 801ad58:	4618      	mov	r0, r3
 801ad5a:	f002 fd97 	bl	801d88c <lv_task_set_prio>
    else
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
}
 801ad5e:	e005      	b.n	801ad6c <anim_mark_list_change+0x30>
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
 801ad60:	4b05      	ldr	r3, [pc, #20]	; (801ad78 <anim_mark_list_change+0x3c>)
 801ad62:	681b      	ldr	r3, [r3, #0]
 801ad64:	2104      	movs	r1, #4
 801ad66:	4618      	mov	r0, r3
 801ad68:	f002 fd90 	bl	801d88c <lv_task_set_prio>
}
 801ad6c:	bf00      	nop
 801ad6e:	bd80      	pop	{r7, pc}
 801ad70:	20019424 	.word	0x20019424
 801ad74:	20021860 	.word	0x20021860
 801ad78:	20019428 	.word	0x20019428

0801ad7c <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 801ad7c:	b480      	push	{r7}
 801ad7e:	b083      	sub	sp, #12
 801ad80:	af00      	add	r7, sp, #0
 801ad82:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ad8a:	b29a      	uxth	r2, r3
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ad92:	b29b      	uxth	r3, r3
 801ad94:	1ad3      	subs	r3, r2, r3
 801ad96:	b29b      	uxth	r3, r3
 801ad98:	3301      	adds	r3, #1
 801ad9a:	b29b      	uxth	r3, r3
 801ad9c:	b21b      	sxth	r3, r3
}
 801ad9e:	4618      	mov	r0, r3
 801ada0:	370c      	adds	r7, #12
 801ada2:	46bd      	mov	sp, r7
 801ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ada8:	4770      	bx	lr

0801adaa <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 801adaa:	b480      	push	{r7}
 801adac:	b083      	sub	sp, #12
 801adae:	af00      	add	r7, sp, #0
 801adb0:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801adb8:	b29a      	uxth	r2, r3
 801adba:	687b      	ldr	r3, [r7, #4]
 801adbc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801adc0:	b29b      	uxth	r3, r3
 801adc2:	1ad3      	subs	r3, r2, r3
 801adc4:	b29b      	uxth	r3, r3
 801adc6:	3301      	adds	r3, #1
 801adc8:	b29b      	uxth	r3, r3
 801adca:	b21b      	sxth	r3, r3
}
 801adcc:	4618      	mov	r0, r3
 801adce:	370c      	adds	r7, #12
 801add0:	46bd      	mov	sp, r7
 801add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801add6:	4770      	bx	lr

0801add8 <lv_area_set>:
 * @param y1 top coordinate of the area
 * @param x2 right coordinate of the area
 * @param y2 bottom coordinate of the area
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
 801add8:	b480      	push	{r7}
 801adda:	b085      	sub	sp, #20
 801addc:	af00      	add	r7, sp, #0
 801adde:	60f8      	str	r0, [r7, #12]
 801ade0:	4608      	mov	r0, r1
 801ade2:	4611      	mov	r1, r2
 801ade4:	461a      	mov	r2, r3
 801ade6:	4603      	mov	r3, r0
 801ade8:	817b      	strh	r3, [r7, #10]
 801adea:	460b      	mov	r3, r1
 801adec:	813b      	strh	r3, [r7, #8]
 801adee:	4613      	mov	r3, r2
 801adf0:	80fb      	strh	r3, [r7, #6]
    area_p->x1 = x1;
 801adf2:	68fb      	ldr	r3, [r7, #12]
 801adf4:	897a      	ldrh	r2, [r7, #10]
 801adf6:	801a      	strh	r2, [r3, #0]
    area_p->y1 = y1;
 801adf8:	68fb      	ldr	r3, [r7, #12]
 801adfa:	893a      	ldrh	r2, [r7, #8]
 801adfc:	805a      	strh	r2, [r3, #2]
    area_p->x2 = x2;
 801adfe:	68fb      	ldr	r3, [r7, #12]
 801ae00:	88fa      	ldrh	r2, [r7, #6]
 801ae02:	809a      	strh	r2, [r3, #4]
    area_p->y2 = y2;
 801ae04:	68fb      	ldr	r3, [r7, #12]
 801ae06:	8b3a      	ldrh	r2, [r7, #24]
 801ae08:	80da      	strh	r2, [r3, #6]
}
 801ae0a:	bf00      	nop
 801ae0c:	3714      	adds	r7, #20
 801ae0e:	46bd      	mov	sp, r7
 801ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae14:	4770      	bx	lr

0801ae16 <lv_area_set_height>:
 * Set the height of an area
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
 801ae16:	b480      	push	{r7}
 801ae18:	b083      	sub	sp, #12
 801ae1a:	af00      	add	r7, sp, #0
 801ae1c:	6078      	str	r0, [r7, #4]
 801ae1e:	460b      	mov	r3, r1
 801ae20:	807b      	strh	r3, [r7, #2]
    area_p->y2 = area_p->y1 + h - 1;
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ae28:	b29a      	uxth	r2, r3
 801ae2a:	887b      	ldrh	r3, [r7, #2]
 801ae2c:	4413      	add	r3, r2
 801ae2e:	b29b      	uxth	r3, r3
 801ae30:	3b01      	subs	r3, #1
 801ae32:	b29b      	uxth	r3, r3
 801ae34:	b21a      	sxth	r2, r3
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	80da      	strh	r2, [r3, #6]
}
 801ae3a:	bf00      	nop
 801ae3c:	370c      	adds	r7, #12
 801ae3e:	46bd      	mov	sp, r7
 801ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae44:	4770      	bx	lr

0801ae46 <lv_area_get_size>:
 * Return with area of an area (x * y)
 * @param area_p pointer to an area
 * @return size of area
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
 801ae46:	b480      	push	{r7}
 801ae48:	b085      	sub	sp, #20
 801ae4a:	af00      	add	r7, sp, #0
 801ae4c:	6078      	str	r0, [r7, #4]
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ae54:	461a      	mov	r2, r3
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ae5c:	1ad3      	subs	r3, r2, r3
 801ae5e:	3301      	adds	r3, #1
 801ae60:	461a      	mov	r2, r3
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801ae68:	4619      	mov	r1, r3
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ae70:	1acb      	subs	r3, r1, r3
 801ae72:	3301      	adds	r3, #1
 801ae74:	fb03 f302 	mul.w	r3, r3, r2
 801ae78:	60fb      	str	r3, [r7, #12]

    return size;
 801ae7a:	68fb      	ldr	r3, [r7, #12]
}
 801ae7c:	4618      	mov	r0, r3
 801ae7e:	3714      	adds	r7, #20
 801ae80:	46bd      	mov	sp, r7
 801ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae86:	4770      	bx	lr

0801ae88 <_lv_area_intersect>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool _lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 801ae88:	b480      	push	{r7}
 801ae8a:	b087      	sub	sp, #28
 801ae8c:	af00      	add	r7, sp, #0
 801ae8e:	60f8      	str	r0, [r7, #12]
 801ae90:	60b9      	str	r1, [r7, #8]
 801ae92:	607a      	str	r2, [r7, #4]
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ae9a:	68bb      	ldr	r3, [r7, #8]
 801ae9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801aea0:	4293      	cmp	r3, r2
 801aea2:	bfb8      	it	lt
 801aea4:	4613      	movlt	r3, r2
 801aea6:	b21a      	sxth	r2, r3
 801aea8:	68fb      	ldr	r3, [r7, #12]
 801aeaa:	801a      	strh	r2, [r3, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801aeb2:	68bb      	ldr	r3, [r7, #8]
 801aeb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801aeb8:	4293      	cmp	r3, r2
 801aeba:	bfb8      	it	lt
 801aebc:	4613      	movlt	r3, r2
 801aebe:	b21a      	sxth	r2, r3
 801aec0:	68fb      	ldr	r3, [r7, #12]
 801aec2:	805a      	strh	r2, [r3, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801aeca:	68bb      	ldr	r3, [r7, #8]
 801aecc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801aed0:	4293      	cmp	r3, r2
 801aed2:	bfa8      	it	ge
 801aed4:	4613      	movge	r3, r2
 801aed6:	b21a      	sxth	r2, r3
 801aed8:	68fb      	ldr	r3, [r7, #12]
 801aeda:	809a      	strh	r2, [r3, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801aee2:	68bb      	ldr	r3, [r7, #8]
 801aee4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801aee8:	4293      	cmp	r3, r2
 801aeea:	bfa8      	it	ge
 801aeec:	4613      	movge	r3, r2
 801aeee:	b21a      	sxth	r2, r3
 801aef0:	68fb      	ldr	r3, [r7, #12]
 801aef2:	80da      	strh	r2, [r3, #6]

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
 801aef4:	2301      	movs	r3, #1
 801aef6:	75fb      	strb	r3, [r7, #23]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 801aef8:	68fb      	ldr	r3, [r7, #12]
 801aefa:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aefe:	68fb      	ldr	r3, [r7, #12]
 801af00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801af04:	429a      	cmp	r2, r3
 801af06:	dc07      	bgt.n	801af18 <_lv_area_intersect+0x90>
 801af08:	68fb      	ldr	r3, [r7, #12]
 801af0a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801af0e:	68fb      	ldr	r3, [r7, #12]
 801af10:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801af14:	429a      	cmp	r2, r3
 801af16:	dd01      	ble.n	801af1c <_lv_area_intersect+0x94>
        union_ok = false;
 801af18:	2300      	movs	r3, #0
 801af1a:	75fb      	strb	r3, [r7, #23]
    }

    return union_ok;
 801af1c:	7dfb      	ldrb	r3, [r7, #23]
}
 801af1e:	4618      	mov	r0, r3
 801af20:	371c      	adds	r7, #28
 801af22:	46bd      	mov	sp, r7
 801af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af28:	4770      	bx	lr

0801af2a <_lv_area_join>:
 * @param res_p pointer to an area, the result will be stored here
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void _lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 801af2a:	b480      	push	{r7}
 801af2c:	b085      	sub	sp, #20
 801af2e:	af00      	add	r7, sp, #0
 801af30:	60f8      	str	r0, [r7, #12]
 801af32:	60b9      	str	r1, [r7, #8]
 801af34:	607a      	str	r2, [r7, #4]
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	f9b3 2000 	ldrsh.w	r2, [r3]
 801af3c:	68bb      	ldr	r3, [r7, #8]
 801af3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801af42:	4293      	cmp	r3, r2
 801af44:	bfa8      	it	ge
 801af46:	4613      	movge	r3, r2
 801af48:	b21a      	sxth	r2, r3
 801af4a:	68fb      	ldr	r3, [r7, #12]
 801af4c:	801a      	strh	r2, [r3, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801af54:	68bb      	ldr	r3, [r7, #8]
 801af56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801af5a:	4293      	cmp	r3, r2
 801af5c:	bfa8      	it	ge
 801af5e:	4613      	movge	r3, r2
 801af60:	b21a      	sxth	r2, r3
 801af62:	68fb      	ldr	r3, [r7, #12]
 801af64:	805a      	strh	r2, [r3, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801af6c:	68bb      	ldr	r3, [r7, #8]
 801af6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801af72:	4293      	cmp	r3, r2
 801af74:	bfb8      	it	lt
 801af76:	4613      	movlt	r3, r2
 801af78:	b21a      	sxth	r2, r3
 801af7a:	68fb      	ldr	r3, [r7, #12]
 801af7c:	809a      	strh	r2, [r3, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801af84:	68bb      	ldr	r3, [r7, #8]
 801af86:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801af8a:	4293      	cmp	r3, r2
 801af8c:	bfb8      	it	lt
 801af8e:	4613      	movlt	r3, r2
 801af90:	b21a      	sxth	r2, r3
 801af92:	68fb      	ldr	r3, [r7, #12]
 801af94:	80da      	strh	r2, [r3, #6]
}
 801af96:	bf00      	nop
 801af98:	3714      	adds	r7, #20
 801af9a:	46bd      	mov	sp, r7
 801af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afa0:	4770      	bx	lr

0801afa2 <_lv_area_is_point_on>:
 * @param p_p pointer to a point
 * @param radius radius of area (e.g. for rounded rectangle)
 * @return false:the point is out of the area
 */
bool _lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p, lv_coord_t radius)
{
 801afa2:	b580      	push	{r7, lr}
 801afa4:	b088      	sub	sp, #32
 801afa6:	af00      	add	r7, sp, #0
 801afa8:	60f8      	str	r0, [r7, #12]
 801afaa:	60b9      	str	r1, [r7, #8]
 801afac:	4613      	mov	r3, r2
 801afae:	80fb      	strh	r3, [r7, #6]
    /*First check the basic area*/
    bool is_on_rect = false;
 801afb0:	2300      	movs	r3, #0
 801afb2:	77fb      	strb	r3, [r7, #31]
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 801afb4:	68bb      	ldr	r3, [r7, #8]
 801afb6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801afba:	68fb      	ldr	r3, [r7, #12]
 801afbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801afc0:	429a      	cmp	r2, r3
 801afc2:	db19      	blt.n	801aff8 <_lv_area_is_point_on+0x56>
 801afc4:	68bb      	ldr	r3, [r7, #8]
 801afc6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801afca:	68fb      	ldr	r3, [r7, #12]
 801afcc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801afd0:	429a      	cmp	r2, r3
 801afd2:	dc11      	bgt.n	801aff8 <_lv_area_is_point_on+0x56>
 801afd4:	68bb      	ldr	r3, [r7, #8]
 801afd6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801afda:	68fb      	ldr	r3, [r7, #12]
 801afdc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801afe0:	429a      	cmp	r2, r3
 801afe2:	db09      	blt.n	801aff8 <_lv_area_is_point_on+0x56>
 801afe4:	68bb      	ldr	r3, [r7, #8]
 801afe6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801afea:	68fb      	ldr	r3, [r7, #12]
 801afec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801aff0:	429a      	cmp	r2, r3
 801aff2:	dc01      	bgt.n	801aff8 <_lv_area_is_point_on+0x56>
        is_on_rect = true;
 801aff4:	2301      	movs	r3, #1
 801aff6:	77fb      	strb	r3, [r7, #31]
    }
    if(!is_on_rect)
 801aff8:	7ffb      	ldrb	r3, [r7, #31]
 801affa:	f083 0301 	eor.w	r3, r3, #1
 801affe:	b2db      	uxtb	r3, r3
 801b000:	2b00      	cmp	r3, #0
 801b002:	d001      	beq.n	801b008 <_lv_area_is_point_on+0x66>
        return false;
 801b004:	2300      	movs	r3, #0
 801b006:	e0f1      	b.n	801b1ec <_lv_area_is_point_on+0x24a>
    /*Now handle potential rounded rectangles*/
    if(radius <= 0) {
 801b008:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	dc01      	bgt.n	801b014 <_lv_area_is_point_on+0x72>
        /*No radius, it is within the rectangle*/
        return true;
 801b010:	2301      	movs	r3, #1
 801b012:	e0eb      	b.n	801b1ec <_lv_area_is_point_on+0x24a>
    }
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 801b014:	68f8      	ldr	r0, [r7, #12]
 801b016:	f7ff feb1 	bl	801ad7c <lv_area_get_width>
 801b01a:	4603      	mov	r3, r0
 801b01c:	2b00      	cmp	r3, #0
 801b01e:	da00      	bge.n	801b022 <_lv_area_is_point_on+0x80>
 801b020:	3301      	adds	r3, #1
 801b022:	105b      	asrs	r3, r3, #1
 801b024:	83bb      	strh	r3, [r7, #28]
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 801b026:	68f8      	ldr	r0, [r7, #12]
 801b028:	f7ff febf 	bl	801adaa <lv_area_get_height>
 801b02c:	4603      	mov	r3, r0
 801b02e:	2b00      	cmp	r3, #0
 801b030:	da00      	bge.n	801b034 <_lv_area_is_point_on+0x92>
 801b032:	3301      	adds	r3, #1
 801b034:	105b      	asrs	r3, r3, #1
 801b036:	837b      	strh	r3, [r7, #26]
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
 801b038:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 801b03c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801b040:	4293      	cmp	r3, r2
 801b042:	bfa8      	it	ge
 801b044:	4613      	movge	r3, r2
 801b046:	833b      	strh	r3, [r7, #24]
    if(radius > max_radius)
 801b048:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801b04c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801b050:	429a      	cmp	r2, r3
 801b052:	dd01      	ble.n	801b058 <_lv_area_is_point_on+0xb6>
        radius = max_radius;
 801b054:	8b3b      	ldrh	r3, [r7, #24]
 801b056:	80fb      	strh	r3, [r7, #6]

    /*Check if it's in one of the corners*/
    lv_area_t corner_area;
    /*Top left*/
    corner_area.x1 = a_p->x1;
 801b058:	68fb      	ldr	r3, [r7, #12]
 801b05a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b05e:	823b      	strh	r3, [r7, #16]
    corner_area.x2 = a_p->x1 + radius;
 801b060:	68fb      	ldr	r3, [r7, #12]
 801b062:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b066:	b29a      	uxth	r2, r3
 801b068:	88fb      	ldrh	r3, [r7, #6]
 801b06a:	4413      	add	r3, r2
 801b06c:	b29b      	uxth	r3, r3
 801b06e:	b21b      	sxth	r3, r3
 801b070:	82bb      	strh	r3, [r7, #20]
    corner_area.y1 = a_p->y1;
 801b072:	68fb      	ldr	r3, [r7, #12]
 801b074:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b078:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y1 + radius;
 801b07a:	68fb      	ldr	r3, [r7, #12]
 801b07c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b080:	b29a      	uxth	r2, r3
 801b082:	88fb      	ldrh	r3, [r7, #6]
 801b084:	4413      	add	r3, r2
 801b086:	b29b      	uxth	r3, r3
 801b088:	b21b      	sxth	r3, r3
 801b08a:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801b08c:	f107 0310 	add.w	r3, r7, #16
 801b090:	2200      	movs	r2, #0
 801b092:	68b9      	ldr	r1, [r7, #8]
 801b094:	4618      	mov	r0, r3
 801b096:	f7ff ff84 	bl	801afa2 <_lv_area_is_point_on>
 801b09a:	4603      	mov	r3, r0
 801b09c:	2b00      	cmp	r3, #0
 801b09e:	d017      	beq.n	801b0d0 <_lv_area_is_point_on+0x12e>
        corner_area.x2 += radius;
 801b0a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b0a4:	b29a      	uxth	r2, r3
 801b0a6:	88fb      	ldrh	r3, [r7, #6]
 801b0a8:	4413      	add	r3, r2
 801b0aa:	b29b      	uxth	r3, r3
 801b0ac:	b21b      	sxth	r3, r3
 801b0ae:	82bb      	strh	r3, [r7, #20]
        corner_area.y2 += radius;
 801b0b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b0b4:	b29a      	uxth	r2, r3
 801b0b6:	88fb      	ldrh	r3, [r7, #6]
 801b0b8:	4413      	add	r3, r2
 801b0ba:	b29b      	uxth	r3, r3
 801b0bc:	b21b      	sxth	r3, r3
 801b0be:	82fb      	strh	r3, [r7, #22]
        return lv_point_within_circle(&corner_area, p_p);
 801b0c0:	f107 0310 	add.w	r3, r7, #16
 801b0c4:	68b9      	ldr	r1, [r7, #8]
 801b0c6:	4618      	mov	r0, r3
 801b0c8:	f000 fbe2 	bl	801b890 <lv_point_within_circle>
 801b0cc:	4603      	mov	r3, r0
 801b0ce:	e08d      	b.n	801b1ec <_lv_area_is_point_on+0x24a>
    }
    /*Bottom left*/
    corner_area.y1 = a_p->y2 - radius;
 801b0d0:	68fb      	ldr	r3, [r7, #12]
 801b0d2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b0d6:	b29a      	uxth	r2, r3
 801b0d8:	88fb      	ldrh	r3, [r7, #6]
 801b0da:	1ad3      	subs	r3, r2, r3
 801b0dc:	b29b      	uxth	r3, r3
 801b0de:	b21b      	sxth	r3, r3
 801b0e0:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y2;
 801b0e2:	68fb      	ldr	r3, [r7, #12]
 801b0e4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b0e8:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801b0ea:	f107 0310 	add.w	r3, r7, #16
 801b0ee:	2200      	movs	r2, #0
 801b0f0:	68b9      	ldr	r1, [r7, #8]
 801b0f2:	4618      	mov	r0, r3
 801b0f4:	f7ff ff55 	bl	801afa2 <_lv_area_is_point_on>
 801b0f8:	4603      	mov	r3, r0
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	d017      	beq.n	801b12e <_lv_area_is_point_on+0x18c>
        corner_area.x2 += radius;
 801b0fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b102:	b29a      	uxth	r2, r3
 801b104:	88fb      	ldrh	r3, [r7, #6]
 801b106:	4413      	add	r3, r2
 801b108:	b29b      	uxth	r3, r3
 801b10a:	b21b      	sxth	r3, r3
 801b10c:	82bb      	strh	r3, [r7, #20]
        corner_area.y1 -= radius;
 801b10e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b112:	b29a      	uxth	r2, r3
 801b114:	88fb      	ldrh	r3, [r7, #6]
 801b116:	1ad3      	subs	r3, r2, r3
 801b118:	b29b      	uxth	r3, r3
 801b11a:	b21b      	sxth	r3, r3
 801b11c:	827b      	strh	r3, [r7, #18]
        return lv_point_within_circle(&corner_area, p_p);
 801b11e:	f107 0310 	add.w	r3, r7, #16
 801b122:	68b9      	ldr	r1, [r7, #8]
 801b124:	4618      	mov	r0, r3
 801b126:	f000 fbb3 	bl	801b890 <lv_point_within_circle>
 801b12a:	4603      	mov	r3, r0
 801b12c:	e05e      	b.n	801b1ec <_lv_area_is_point_on+0x24a>
    }
    /*Bottom right*/
    corner_area.x1 = a_p->x2 - radius;
 801b12e:	68fb      	ldr	r3, [r7, #12]
 801b130:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b134:	b29a      	uxth	r2, r3
 801b136:	88fb      	ldrh	r3, [r7, #6]
 801b138:	1ad3      	subs	r3, r2, r3
 801b13a:	b29b      	uxth	r3, r3
 801b13c:	b21b      	sxth	r3, r3
 801b13e:	823b      	strh	r3, [r7, #16]
    corner_area.x2 = a_p->x2;
 801b140:	68fb      	ldr	r3, [r7, #12]
 801b142:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b146:	82bb      	strh	r3, [r7, #20]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801b148:	f107 0310 	add.w	r3, r7, #16
 801b14c:	2200      	movs	r2, #0
 801b14e:	68b9      	ldr	r1, [r7, #8]
 801b150:	4618      	mov	r0, r3
 801b152:	f7ff ff26 	bl	801afa2 <_lv_area_is_point_on>
 801b156:	4603      	mov	r3, r0
 801b158:	2b00      	cmp	r3, #0
 801b15a:	d017      	beq.n	801b18c <_lv_area_is_point_on+0x1ea>
        corner_area.x1 -= radius;
 801b15c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801b160:	b29a      	uxth	r2, r3
 801b162:	88fb      	ldrh	r3, [r7, #6]
 801b164:	1ad3      	subs	r3, r2, r3
 801b166:	b29b      	uxth	r3, r3
 801b168:	b21b      	sxth	r3, r3
 801b16a:	823b      	strh	r3, [r7, #16]
        corner_area.y1 -= radius;
 801b16c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b170:	b29a      	uxth	r2, r3
 801b172:	88fb      	ldrh	r3, [r7, #6]
 801b174:	1ad3      	subs	r3, r2, r3
 801b176:	b29b      	uxth	r3, r3
 801b178:	b21b      	sxth	r3, r3
 801b17a:	827b      	strh	r3, [r7, #18]
        return lv_point_within_circle(&corner_area, p_p);
 801b17c:	f107 0310 	add.w	r3, r7, #16
 801b180:	68b9      	ldr	r1, [r7, #8]
 801b182:	4618      	mov	r0, r3
 801b184:	f000 fb84 	bl	801b890 <lv_point_within_circle>
 801b188:	4603      	mov	r3, r0
 801b18a:	e02f      	b.n	801b1ec <_lv_area_is_point_on+0x24a>
    }
    /*Top right*/
    corner_area.y1 = a_p->y1;
 801b18c:	68fb      	ldr	r3, [r7, #12]
 801b18e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b192:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y1 + radius;
 801b194:	68fb      	ldr	r3, [r7, #12]
 801b196:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b19a:	b29a      	uxth	r2, r3
 801b19c:	88fb      	ldrh	r3, [r7, #6]
 801b19e:	4413      	add	r3, r2
 801b1a0:	b29b      	uxth	r3, r3
 801b1a2:	b21b      	sxth	r3, r3
 801b1a4:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801b1a6:	f107 0310 	add.w	r3, r7, #16
 801b1aa:	2200      	movs	r2, #0
 801b1ac:	68b9      	ldr	r1, [r7, #8]
 801b1ae:	4618      	mov	r0, r3
 801b1b0:	f7ff fef7 	bl	801afa2 <_lv_area_is_point_on>
 801b1b4:	4603      	mov	r3, r0
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d017      	beq.n	801b1ea <_lv_area_is_point_on+0x248>
        corner_area.x1 -= radius;
 801b1ba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801b1be:	b29a      	uxth	r2, r3
 801b1c0:	88fb      	ldrh	r3, [r7, #6]
 801b1c2:	1ad3      	subs	r3, r2, r3
 801b1c4:	b29b      	uxth	r3, r3
 801b1c6:	b21b      	sxth	r3, r3
 801b1c8:	823b      	strh	r3, [r7, #16]
        corner_area.y2 += radius;
 801b1ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b1ce:	b29a      	uxth	r2, r3
 801b1d0:	88fb      	ldrh	r3, [r7, #6]
 801b1d2:	4413      	add	r3, r2
 801b1d4:	b29b      	uxth	r3, r3
 801b1d6:	b21b      	sxth	r3, r3
 801b1d8:	82fb      	strh	r3, [r7, #22]
        return lv_point_within_circle(&corner_area, p_p);
 801b1da:	f107 0310 	add.w	r3, r7, #16
 801b1de:	68b9      	ldr	r1, [r7, #8]
 801b1e0:	4618      	mov	r0, r3
 801b1e2:	f000 fb55 	bl	801b890 <lv_point_within_circle>
 801b1e6:	4603      	mov	r3, r0
 801b1e8:	e000      	b.n	801b1ec <_lv_area_is_point_on+0x24a>
    }
    /*Not within corners*/
    return true;
 801b1ea:	2301      	movs	r3, #1
}
 801b1ec:	4618      	mov	r0, r3
 801b1ee:	3720      	adds	r7, #32
 801b1f0:	46bd      	mov	sp, r7
 801b1f2:	bd80      	pop	{r7, pc}

0801b1f4 <_lv_area_is_on>:
 * @param a1_p pointer to an area.
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool _lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 801b1f4:	b480      	push	{r7}
 801b1f6:	b083      	sub	sp, #12
 801b1f8:	af00      	add	r7, sp, #0
 801b1fa:	6078      	str	r0, [r7, #4]
 801b1fc:	6039      	str	r1, [r7, #0]
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 801b1fe:	687b      	ldr	r3, [r7, #4]
 801b200:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b204:	683b      	ldr	r3, [r7, #0]
 801b206:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b20a:	429a      	cmp	r2, r3
 801b20c:	dc19      	bgt.n	801b242 <_lv_area_is_on+0x4e>
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801b214:	683b      	ldr	r3, [r7, #0]
 801b216:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b21a:	429a      	cmp	r2, r3
 801b21c:	db11      	blt.n	801b242 <_lv_area_is_on+0x4e>
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b224:	683b      	ldr	r3, [r7, #0]
 801b226:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b22a:	429a      	cmp	r2, r3
 801b22c:	dc09      	bgt.n	801b242 <_lv_area_is_on+0x4e>
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801b234:	683b      	ldr	r3, [r7, #0]
 801b236:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b23a:	429a      	cmp	r2, r3
 801b23c:	db01      	blt.n	801b242 <_lv_area_is_on+0x4e>
        return true;
 801b23e:	2301      	movs	r3, #1
 801b240:	e000      	b.n	801b244 <_lv_area_is_on+0x50>
    }
    else {
        return false;
 801b242:	2300      	movs	r3, #0
    }
}
 801b244:	4618      	mov	r0, r3
 801b246:	370c      	adds	r7, #12
 801b248:	46bd      	mov	sp, r7
 801b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b24e:	4770      	bx	lr

0801b250 <_lv_area_is_in>:
 * @param aholder_p pointer to an area which could involve 'ain_p'
 * @param radius radius of `aholder_p` (e.g. for rounded rectangle)
 * @return true: `ain_p` is fully inside `aholder_p`
 */
bool _lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p, lv_coord_t radius)
{
 801b250:	b580      	push	{r7, lr}
 801b252:	b086      	sub	sp, #24
 801b254:	af00      	add	r7, sp, #0
 801b256:	60f8      	str	r0, [r7, #12]
 801b258:	60b9      	str	r1, [r7, #8]
 801b25a:	4613      	mov	r3, r2
 801b25c:	80fb      	strh	r3, [r7, #6]
    bool is_in = false;
 801b25e:	2300      	movs	r3, #0
 801b260:	75fb      	strb	r3, [r7, #23]

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 801b262:	68fb      	ldr	r3, [r7, #12]
 801b264:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b268:	68bb      	ldr	r3, [r7, #8]
 801b26a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b26e:	429a      	cmp	r2, r3
 801b270:	db19      	blt.n	801b2a6 <_lv_area_is_in+0x56>
 801b272:	68fb      	ldr	r3, [r7, #12]
 801b274:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b278:	68bb      	ldr	r3, [r7, #8]
 801b27a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b27e:	429a      	cmp	r2, r3
 801b280:	db11      	blt.n	801b2a6 <_lv_area_is_in+0x56>
 801b282:	68fb      	ldr	r3, [r7, #12]
 801b284:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801b288:	68bb      	ldr	r3, [r7, #8]
 801b28a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b28e:	429a      	cmp	r2, r3
 801b290:	dc09      	bgt.n	801b2a6 <_lv_area_is_in+0x56>
       ain_p->y2 <= aholder_p->y2) {
 801b292:	68fb      	ldr	r3, [r7, #12]
 801b294:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801b298:	68bb      	ldr	r3, [r7, #8]
 801b29a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 801b29e:	429a      	cmp	r2, r3
 801b2a0:	dc01      	bgt.n	801b2a6 <_lv_area_is_in+0x56>
        is_in = true;
 801b2a2:	2301      	movs	r3, #1
 801b2a4:	75fb      	strb	r3, [r7, #23]
    }

    if(!is_in) return false;
 801b2a6:	7dfb      	ldrb	r3, [r7, #23]
 801b2a8:	f083 0301 	eor.w	r3, r3, #1
 801b2ac:	b2db      	uxtb	r3, r3
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	d001      	beq.n	801b2b6 <_lv_area_is_in+0x66>
 801b2b2:	2300      	movs	r3, #0
 801b2b4:	e066      	b.n	801b384 <_lv_area_is_in+0x134>
    if(radius == 0) return true;
 801b2b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	d101      	bne.n	801b2c2 <_lv_area_is_in+0x72>
 801b2be:	2301      	movs	r3, #1
 801b2c0:	e060      	b.n	801b384 <_lv_area_is_in+0x134>

    /*Check if the corner points are inside the radius or not*/
    lv_point_t p;

    p.x = ain_p->x1;
 801b2c2:	68fb      	ldr	r3, [r7, #12]
 801b2c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b2c8:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y1;
 801b2ca:	68fb      	ldr	r3, [r7, #12]
 801b2cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b2d0:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801b2d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801b2d6:	f107 0310 	add.w	r3, r7, #16
 801b2da:	4619      	mov	r1, r3
 801b2dc:	68b8      	ldr	r0, [r7, #8]
 801b2de:	f7ff fe60 	bl	801afa2 <_lv_area_is_point_on>
 801b2e2:	4603      	mov	r3, r0
 801b2e4:	f083 0301 	eor.w	r3, r3, #1
 801b2e8:	b2db      	uxtb	r3, r3
 801b2ea:	2b00      	cmp	r3, #0
 801b2ec:	d001      	beq.n	801b2f2 <_lv_area_is_in+0xa2>
 801b2ee:	2300      	movs	r3, #0
 801b2f0:	e048      	b.n	801b384 <_lv_area_is_in+0x134>

    p.x = ain_p->x2;
 801b2f2:	68fb      	ldr	r3, [r7, #12]
 801b2f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b2f8:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y1;
 801b2fa:	68fb      	ldr	r3, [r7, #12]
 801b2fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b300:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801b302:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801b306:	f107 0310 	add.w	r3, r7, #16
 801b30a:	4619      	mov	r1, r3
 801b30c:	68b8      	ldr	r0, [r7, #8]
 801b30e:	f7ff fe48 	bl	801afa2 <_lv_area_is_point_on>
 801b312:	4603      	mov	r3, r0
 801b314:	f083 0301 	eor.w	r3, r3, #1
 801b318:	b2db      	uxtb	r3, r3
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	d001      	beq.n	801b322 <_lv_area_is_in+0xd2>
 801b31e:	2300      	movs	r3, #0
 801b320:	e030      	b.n	801b384 <_lv_area_is_in+0x134>

    p.x = ain_p->x1;
 801b322:	68fb      	ldr	r3, [r7, #12]
 801b324:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b328:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y2;
 801b32a:	68fb      	ldr	r3, [r7, #12]
 801b32c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b330:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801b332:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801b336:	f107 0310 	add.w	r3, r7, #16
 801b33a:	4619      	mov	r1, r3
 801b33c:	68b8      	ldr	r0, [r7, #8]
 801b33e:	f7ff fe30 	bl	801afa2 <_lv_area_is_point_on>
 801b342:	4603      	mov	r3, r0
 801b344:	f083 0301 	eor.w	r3, r3, #1
 801b348:	b2db      	uxtb	r3, r3
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	d001      	beq.n	801b352 <_lv_area_is_in+0x102>
 801b34e:	2300      	movs	r3, #0
 801b350:	e018      	b.n	801b384 <_lv_area_is_in+0x134>

    p.x = ain_p->x2;
 801b352:	68fb      	ldr	r3, [r7, #12]
 801b354:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b358:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y2;
 801b35a:	68fb      	ldr	r3, [r7, #12]
 801b35c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b360:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801b362:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801b366:	f107 0310 	add.w	r3, r7, #16
 801b36a:	4619      	mov	r1, r3
 801b36c:	68b8      	ldr	r0, [r7, #8]
 801b36e:	f7ff fe18 	bl	801afa2 <_lv_area_is_point_on>
 801b372:	4603      	mov	r3, r0
 801b374:	f083 0301 	eor.w	r3, r3, #1
 801b378:	b2db      	uxtb	r3, r3
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	d001      	beq.n	801b382 <_lv_area_is_in+0x132>
 801b37e:	2300      	movs	r3, #0
 801b380:	e000      	b.n	801b384 <_lv_area_is_in+0x134>

    return true;
 801b382:	2301      	movs	r3, #1
}
 801b384:	4618      	mov	r0, r3
 801b386:	3718      	adds	r7, #24
 801b388:	46bd      	mov	sp, r7
 801b38a:	bd80      	pop	{r7, pc}

0801b38c <_lv_area_align>:
 * @param to_align the area to align
 * @param align `LV_ALIGN_...`
 * @param res x/y coordinates where `to_align` align area should be placed
 */
void _lv_area_align(const lv_area_t * base, const lv_area_t * to_align, lv_align_t align, lv_point_t * res)
{
 801b38c:	b590      	push	{r4, r7, lr}
 801b38e:	b085      	sub	sp, #20
 801b390:	af00      	add	r7, sp, #0
 801b392:	60f8      	str	r0, [r7, #12]
 801b394:	60b9      	str	r1, [r7, #8]
 801b396:	603b      	str	r3, [r7, #0]
 801b398:	4613      	mov	r3, r2
 801b39a:	71fb      	strb	r3, [r7, #7]

    switch(align) {
 801b39c:	79fb      	ldrb	r3, [r7, #7]
 801b39e:	2b14      	cmp	r3, #20
 801b3a0:	f200 8257 	bhi.w	801b852 <_lv_area_align+0x4c6>
 801b3a4:	a201      	add	r2, pc, #4	; (adr r2, 801b3ac <_lv_area_align+0x20>)
 801b3a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b3aa:	bf00      	nop
 801b3ac:	0801b401 	.word	0x0801b401
 801b3b0:	0801b467 	.word	0x0801b467
 801b3b4:	0801b475 	.word	0x0801b475
 801b3b8:	0801b4af 	.word	0x0801b4af
 801b3bc:	0801b4d5 	.word	0x0801b4d5
 801b3c0:	0801b4fb 	.word	0x0801b4fb
 801b3c4:	0801b54d 	.word	0x0801b54d
 801b3c8:	0801b58b 	.word	0x0801b58b
 801b3cc:	0801b5c5 	.word	0x0801b5c5
 801b3d0:	0801b617 	.word	0x0801b617
 801b3d4:	0801b633 	.word	0x0801b633
 801b3d8:	0801b67b 	.word	0x0801b67b
 801b3dc:	0801b6af 	.word	0x0801b6af
 801b3e0:	0801b6c5 	.word	0x0801b6c5
 801b3e4:	0801b707 	.word	0x0801b707
 801b3e8:	0801b735 	.word	0x0801b735
 801b3ec:	0801b751 	.word	0x0801b751
 801b3f0:	0801b799 	.word	0x0801b799
 801b3f4:	0801b7cd 	.word	0x0801b7cd
 801b3f8:	0801b7e3 	.word	0x0801b7e3
 801b3fc:	0801b825 	.word	0x0801b825
        case LV_ALIGN_CENTER:
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801b400:	68f8      	ldr	r0, [r7, #12]
 801b402:	f7ff fcbb 	bl	801ad7c <lv_area_get_width>
 801b406:	4603      	mov	r3, r0
 801b408:	2b00      	cmp	r3, #0
 801b40a:	da00      	bge.n	801b40e <_lv_area_align+0x82>
 801b40c:	3301      	adds	r3, #1
 801b40e:	105b      	asrs	r3, r3, #1
 801b410:	b21b      	sxth	r3, r3
 801b412:	b29c      	uxth	r4, r3
 801b414:	68b8      	ldr	r0, [r7, #8]
 801b416:	f7ff fcb1 	bl	801ad7c <lv_area_get_width>
 801b41a:	4603      	mov	r3, r0
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	da00      	bge.n	801b422 <_lv_area_align+0x96>
 801b420:	3301      	adds	r3, #1
 801b422:	105b      	asrs	r3, r3, #1
 801b424:	b21b      	sxth	r3, r3
 801b426:	b29b      	uxth	r3, r3
 801b428:	1ae3      	subs	r3, r4, r3
 801b42a:	b29b      	uxth	r3, r3
 801b42c:	b21a      	sxth	r2, r3
 801b42e:	683b      	ldr	r3, [r7, #0]
 801b430:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 801b432:	68f8      	ldr	r0, [r7, #12]
 801b434:	f7ff fcb9 	bl	801adaa <lv_area_get_height>
 801b438:	4603      	mov	r3, r0
 801b43a:	2b00      	cmp	r3, #0
 801b43c:	da00      	bge.n	801b440 <_lv_area_align+0xb4>
 801b43e:	3301      	adds	r3, #1
 801b440:	105b      	asrs	r3, r3, #1
 801b442:	b21b      	sxth	r3, r3
 801b444:	b29c      	uxth	r4, r3
 801b446:	68b8      	ldr	r0, [r7, #8]
 801b448:	f7ff fcaf 	bl	801adaa <lv_area_get_height>
 801b44c:	4603      	mov	r3, r0
 801b44e:	2b00      	cmp	r3, #0
 801b450:	da00      	bge.n	801b454 <_lv_area_align+0xc8>
 801b452:	3301      	adds	r3, #1
 801b454:	105b      	asrs	r3, r3, #1
 801b456:	b21b      	sxth	r3, r3
 801b458:	b29b      	uxth	r3, r3
 801b45a:	1ae3      	subs	r3, r4, r3
 801b45c:	b29b      	uxth	r3, r3
 801b45e:	b21a      	sxth	r2, r3
 801b460:	683b      	ldr	r3, [r7, #0]
 801b462:	805a      	strh	r2, [r3, #2]
            break;
 801b464:	e1f5      	b.n	801b852 <_lv_area_align+0x4c6>

        case LV_ALIGN_IN_TOP_LEFT:
            res->x = 0;
 801b466:	683b      	ldr	r3, [r7, #0]
 801b468:	2200      	movs	r2, #0
 801b46a:	801a      	strh	r2, [r3, #0]
            res->y = 0;
 801b46c:	683b      	ldr	r3, [r7, #0]
 801b46e:	2200      	movs	r2, #0
 801b470:	805a      	strh	r2, [r3, #2]
            break;
 801b472:	e1ee      	b.n	801b852 <_lv_area_align+0x4c6>
        case LV_ALIGN_IN_TOP_MID:
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801b474:	68f8      	ldr	r0, [r7, #12]
 801b476:	f7ff fc81 	bl	801ad7c <lv_area_get_width>
 801b47a:	4603      	mov	r3, r0
 801b47c:	2b00      	cmp	r3, #0
 801b47e:	da00      	bge.n	801b482 <_lv_area_align+0xf6>
 801b480:	3301      	adds	r3, #1
 801b482:	105b      	asrs	r3, r3, #1
 801b484:	b21b      	sxth	r3, r3
 801b486:	b29c      	uxth	r4, r3
 801b488:	68b8      	ldr	r0, [r7, #8]
 801b48a:	f7ff fc77 	bl	801ad7c <lv_area_get_width>
 801b48e:	4603      	mov	r3, r0
 801b490:	2b00      	cmp	r3, #0
 801b492:	da00      	bge.n	801b496 <_lv_area_align+0x10a>
 801b494:	3301      	adds	r3, #1
 801b496:	105b      	asrs	r3, r3, #1
 801b498:	b21b      	sxth	r3, r3
 801b49a:	b29b      	uxth	r3, r3
 801b49c:	1ae3      	subs	r3, r4, r3
 801b49e:	b29b      	uxth	r3, r3
 801b4a0:	b21a      	sxth	r2, r3
 801b4a2:	683b      	ldr	r3, [r7, #0]
 801b4a4:	801a      	strh	r2, [r3, #0]
            res->y = 0;
 801b4a6:	683b      	ldr	r3, [r7, #0]
 801b4a8:	2200      	movs	r2, #0
 801b4aa:	805a      	strh	r2, [r3, #2]
            break;
 801b4ac:	e1d1      	b.n	801b852 <_lv_area_align+0x4c6>

        case LV_ALIGN_IN_TOP_RIGHT:
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801b4ae:	68f8      	ldr	r0, [r7, #12]
 801b4b0:	f7ff fc64 	bl	801ad7c <lv_area_get_width>
 801b4b4:	4603      	mov	r3, r0
 801b4b6:	b29c      	uxth	r4, r3
 801b4b8:	68b8      	ldr	r0, [r7, #8]
 801b4ba:	f7ff fc5f 	bl	801ad7c <lv_area_get_width>
 801b4be:	4603      	mov	r3, r0
 801b4c0:	b29b      	uxth	r3, r3
 801b4c2:	1ae3      	subs	r3, r4, r3
 801b4c4:	b29b      	uxth	r3, r3
 801b4c6:	b21a      	sxth	r2, r3
 801b4c8:	683b      	ldr	r3, [r7, #0]
 801b4ca:	801a      	strh	r2, [r3, #0]
            res->y = 0;
 801b4cc:	683b      	ldr	r3, [r7, #0]
 801b4ce:	2200      	movs	r2, #0
 801b4d0:	805a      	strh	r2, [r3, #2]
            break;
 801b4d2:	e1be      	b.n	801b852 <_lv_area_align+0x4c6>

        case LV_ALIGN_IN_BOTTOM_LEFT:
            res->x = 0;
 801b4d4:	683b      	ldr	r3, [r7, #0]
 801b4d6:	2200      	movs	r2, #0
 801b4d8:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 801b4da:	68f8      	ldr	r0, [r7, #12]
 801b4dc:	f7ff fc65 	bl	801adaa <lv_area_get_height>
 801b4e0:	4603      	mov	r3, r0
 801b4e2:	b29c      	uxth	r4, r3
 801b4e4:	68b8      	ldr	r0, [r7, #8]
 801b4e6:	f7ff fc60 	bl	801adaa <lv_area_get_height>
 801b4ea:	4603      	mov	r3, r0
 801b4ec:	b29b      	uxth	r3, r3
 801b4ee:	1ae3      	subs	r3, r4, r3
 801b4f0:	b29b      	uxth	r3, r3
 801b4f2:	b21a      	sxth	r2, r3
 801b4f4:	683b      	ldr	r3, [r7, #0]
 801b4f6:	805a      	strh	r2, [r3, #2]
            break;
 801b4f8:	e1ab      	b.n	801b852 <_lv_area_align+0x4c6>
        case LV_ALIGN_IN_BOTTOM_MID:
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801b4fa:	68f8      	ldr	r0, [r7, #12]
 801b4fc:	f7ff fc3e 	bl	801ad7c <lv_area_get_width>
 801b500:	4603      	mov	r3, r0
 801b502:	2b00      	cmp	r3, #0
 801b504:	da00      	bge.n	801b508 <_lv_area_align+0x17c>
 801b506:	3301      	adds	r3, #1
 801b508:	105b      	asrs	r3, r3, #1
 801b50a:	b21b      	sxth	r3, r3
 801b50c:	b29c      	uxth	r4, r3
 801b50e:	68b8      	ldr	r0, [r7, #8]
 801b510:	f7ff fc34 	bl	801ad7c <lv_area_get_width>
 801b514:	4603      	mov	r3, r0
 801b516:	2b00      	cmp	r3, #0
 801b518:	da00      	bge.n	801b51c <_lv_area_align+0x190>
 801b51a:	3301      	adds	r3, #1
 801b51c:	105b      	asrs	r3, r3, #1
 801b51e:	b21b      	sxth	r3, r3
 801b520:	b29b      	uxth	r3, r3
 801b522:	1ae3      	subs	r3, r4, r3
 801b524:	b29b      	uxth	r3, r3
 801b526:	b21a      	sxth	r2, r3
 801b528:	683b      	ldr	r3, [r7, #0]
 801b52a:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 801b52c:	68f8      	ldr	r0, [r7, #12]
 801b52e:	f7ff fc3c 	bl	801adaa <lv_area_get_height>
 801b532:	4603      	mov	r3, r0
 801b534:	b29c      	uxth	r4, r3
 801b536:	68b8      	ldr	r0, [r7, #8]
 801b538:	f7ff fc37 	bl	801adaa <lv_area_get_height>
 801b53c:	4603      	mov	r3, r0
 801b53e:	b29b      	uxth	r3, r3
 801b540:	1ae3      	subs	r3, r4, r3
 801b542:	b29b      	uxth	r3, r3
 801b544:	b21a      	sxth	r2, r3
 801b546:	683b      	ldr	r3, [r7, #0]
 801b548:	805a      	strh	r2, [r3, #2]
            break;
 801b54a:	e182      	b.n	801b852 <_lv_area_align+0x4c6>

        case LV_ALIGN_IN_BOTTOM_RIGHT:
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801b54c:	68f8      	ldr	r0, [r7, #12]
 801b54e:	f7ff fc15 	bl	801ad7c <lv_area_get_width>
 801b552:	4603      	mov	r3, r0
 801b554:	b29c      	uxth	r4, r3
 801b556:	68b8      	ldr	r0, [r7, #8]
 801b558:	f7ff fc10 	bl	801ad7c <lv_area_get_width>
 801b55c:	4603      	mov	r3, r0
 801b55e:	b29b      	uxth	r3, r3
 801b560:	1ae3      	subs	r3, r4, r3
 801b562:	b29b      	uxth	r3, r3
 801b564:	b21a      	sxth	r2, r3
 801b566:	683b      	ldr	r3, [r7, #0]
 801b568:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 801b56a:	68f8      	ldr	r0, [r7, #12]
 801b56c:	f7ff fc1d 	bl	801adaa <lv_area_get_height>
 801b570:	4603      	mov	r3, r0
 801b572:	b29c      	uxth	r4, r3
 801b574:	68b8      	ldr	r0, [r7, #8]
 801b576:	f7ff fc18 	bl	801adaa <lv_area_get_height>
 801b57a:	4603      	mov	r3, r0
 801b57c:	b29b      	uxth	r3, r3
 801b57e:	1ae3      	subs	r3, r4, r3
 801b580:	b29b      	uxth	r3, r3
 801b582:	b21a      	sxth	r2, r3
 801b584:	683b      	ldr	r3, [r7, #0]
 801b586:	805a      	strh	r2, [r3, #2]
            break;
 801b588:	e163      	b.n	801b852 <_lv_area_align+0x4c6>

        case LV_ALIGN_IN_LEFT_MID:
            res->x = 0;
 801b58a:	683b      	ldr	r3, [r7, #0]
 801b58c:	2200      	movs	r2, #0
 801b58e:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 801b590:	68f8      	ldr	r0, [r7, #12]
 801b592:	f7ff fc0a 	bl	801adaa <lv_area_get_height>
 801b596:	4603      	mov	r3, r0
 801b598:	2b00      	cmp	r3, #0
 801b59a:	da00      	bge.n	801b59e <_lv_area_align+0x212>
 801b59c:	3301      	adds	r3, #1
 801b59e:	105b      	asrs	r3, r3, #1
 801b5a0:	b21b      	sxth	r3, r3
 801b5a2:	b29c      	uxth	r4, r3
 801b5a4:	68b8      	ldr	r0, [r7, #8]
 801b5a6:	f7ff fc00 	bl	801adaa <lv_area_get_height>
 801b5aa:	4603      	mov	r3, r0
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	da00      	bge.n	801b5b2 <_lv_area_align+0x226>
 801b5b0:	3301      	adds	r3, #1
 801b5b2:	105b      	asrs	r3, r3, #1
 801b5b4:	b21b      	sxth	r3, r3
 801b5b6:	b29b      	uxth	r3, r3
 801b5b8:	1ae3      	subs	r3, r4, r3
 801b5ba:	b29b      	uxth	r3, r3
 801b5bc:	b21a      	sxth	r2, r3
 801b5be:	683b      	ldr	r3, [r7, #0]
 801b5c0:	805a      	strh	r2, [r3, #2]
            break;
 801b5c2:	e146      	b.n	801b852 <_lv_area_align+0x4c6>

        case LV_ALIGN_IN_RIGHT_MID:
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801b5c4:	68f8      	ldr	r0, [r7, #12]
 801b5c6:	f7ff fbd9 	bl	801ad7c <lv_area_get_width>
 801b5ca:	4603      	mov	r3, r0
 801b5cc:	b29c      	uxth	r4, r3
 801b5ce:	68b8      	ldr	r0, [r7, #8]
 801b5d0:	f7ff fbd4 	bl	801ad7c <lv_area_get_width>
 801b5d4:	4603      	mov	r3, r0
 801b5d6:	b29b      	uxth	r3, r3
 801b5d8:	1ae3      	subs	r3, r4, r3
 801b5da:	b29b      	uxth	r3, r3
 801b5dc:	b21a      	sxth	r2, r3
 801b5de:	683b      	ldr	r3, [r7, #0]
 801b5e0:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 801b5e2:	68f8      	ldr	r0, [r7, #12]
 801b5e4:	f7ff fbe1 	bl	801adaa <lv_area_get_height>
 801b5e8:	4603      	mov	r3, r0
 801b5ea:	2b00      	cmp	r3, #0
 801b5ec:	da00      	bge.n	801b5f0 <_lv_area_align+0x264>
 801b5ee:	3301      	adds	r3, #1
 801b5f0:	105b      	asrs	r3, r3, #1
 801b5f2:	b21b      	sxth	r3, r3
 801b5f4:	b29c      	uxth	r4, r3
 801b5f6:	68b8      	ldr	r0, [r7, #8]
 801b5f8:	f7ff fbd7 	bl	801adaa <lv_area_get_height>
 801b5fc:	4603      	mov	r3, r0
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	da00      	bge.n	801b604 <_lv_area_align+0x278>
 801b602:	3301      	adds	r3, #1
 801b604:	105b      	asrs	r3, r3, #1
 801b606:	b21b      	sxth	r3, r3
 801b608:	b29b      	uxth	r3, r3
 801b60a:	1ae3      	subs	r3, r4, r3
 801b60c:	b29b      	uxth	r3, r3
 801b60e:	b21a      	sxth	r2, r3
 801b610:	683b      	ldr	r3, [r7, #0]
 801b612:	805a      	strh	r2, [r3, #2]
            break;
 801b614:	e11d      	b.n	801b852 <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_TOP_LEFT:
            res->x = 0;
 801b616:	683b      	ldr	r3, [r7, #0]
 801b618:	2200      	movs	r2, #0
 801b61a:	801a      	strh	r2, [r3, #0]
            res->y = -lv_area_get_height(to_align);
 801b61c:	68b8      	ldr	r0, [r7, #8]
 801b61e:	f7ff fbc4 	bl	801adaa <lv_area_get_height>
 801b622:	4603      	mov	r3, r0
 801b624:	b29b      	uxth	r3, r3
 801b626:	425b      	negs	r3, r3
 801b628:	b29b      	uxth	r3, r3
 801b62a:	b21a      	sxth	r2, r3
 801b62c:	683b      	ldr	r3, [r7, #0]
 801b62e:	805a      	strh	r2, [r3, #2]
            break;
 801b630:	e10f      	b.n	801b852 <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_TOP_MID:
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801b632:	68f8      	ldr	r0, [r7, #12]
 801b634:	f7ff fba2 	bl	801ad7c <lv_area_get_width>
 801b638:	4603      	mov	r3, r0
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	da00      	bge.n	801b640 <_lv_area_align+0x2b4>
 801b63e:	3301      	adds	r3, #1
 801b640:	105b      	asrs	r3, r3, #1
 801b642:	b21b      	sxth	r3, r3
 801b644:	b29c      	uxth	r4, r3
 801b646:	68b8      	ldr	r0, [r7, #8]
 801b648:	f7ff fb98 	bl	801ad7c <lv_area_get_width>
 801b64c:	4603      	mov	r3, r0
 801b64e:	2b00      	cmp	r3, #0
 801b650:	da00      	bge.n	801b654 <_lv_area_align+0x2c8>
 801b652:	3301      	adds	r3, #1
 801b654:	105b      	asrs	r3, r3, #1
 801b656:	b21b      	sxth	r3, r3
 801b658:	b29b      	uxth	r3, r3
 801b65a:	1ae3      	subs	r3, r4, r3
 801b65c:	b29b      	uxth	r3, r3
 801b65e:	b21a      	sxth	r2, r3
 801b660:	683b      	ldr	r3, [r7, #0]
 801b662:	801a      	strh	r2, [r3, #0]
            res->y = -lv_area_get_height(to_align);
 801b664:	68b8      	ldr	r0, [r7, #8]
 801b666:	f7ff fba0 	bl	801adaa <lv_area_get_height>
 801b66a:	4603      	mov	r3, r0
 801b66c:	b29b      	uxth	r3, r3
 801b66e:	425b      	negs	r3, r3
 801b670:	b29b      	uxth	r3, r3
 801b672:	b21a      	sxth	r2, r3
 801b674:	683b      	ldr	r3, [r7, #0]
 801b676:	805a      	strh	r2, [r3, #2]
            break;
 801b678:	e0eb      	b.n	801b852 <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_TOP_RIGHT:
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801b67a:	68f8      	ldr	r0, [r7, #12]
 801b67c:	f7ff fb7e 	bl	801ad7c <lv_area_get_width>
 801b680:	4603      	mov	r3, r0
 801b682:	b29c      	uxth	r4, r3
 801b684:	68b8      	ldr	r0, [r7, #8]
 801b686:	f7ff fb79 	bl	801ad7c <lv_area_get_width>
 801b68a:	4603      	mov	r3, r0
 801b68c:	b29b      	uxth	r3, r3
 801b68e:	1ae3      	subs	r3, r4, r3
 801b690:	b29b      	uxth	r3, r3
 801b692:	b21a      	sxth	r2, r3
 801b694:	683b      	ldr	r3, [r7, #0]
 801b696:	801a      	strh	r2, [r3, #0]
            res->y = -lv_area_get_height(to_align);
 801b698:	68b8      	ldr	r0, [r7, #8]
 801b69a:	f7ff fb86 	bl	801adaa <lv_area_get_height>
 801b69e:	4603      	mov	r3, r0
 801b6a0:	b29b      	uxth	r3, r3
 801b6a2:	425b      	negs	r3, r3
 801b6a4:	b29b      	uxth	r3, r3
 801b6a6:	b21a      	sxth	r2, r3
 801b6a8:	683b      	ldr	r3, [r7, #0]
 801b6aa:	805a      	strh	r2, [r3, #2]
            break;
 801b6ac:	e0d1      	b.n	801b852 <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_BOTTOM_LEFT:
            res->x = 0;
 801b6ae:	683b      	ldr	r3, [r7, #0]
 801b6b0:	2200      	movs	r2, #0
 801b6b2:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base);
 801b6b4:	68f8      	ldr	r0, [r7, #12]
 801b6b6:	f7ff fb78 	bl	801adaa <lv_area_get_height>
 801b6ba:	4603      	mov	r3, r0
 801b6bc:	461a      	mov	r2, r3
 801b6be:	683b      	ldr	r3, [r7, #0]
 801b6c0:	805a      	strh	r2, [r3, #2]
            break;
 801b6c2:	e0c6      	b.n	801b852 <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_BOTTOM_MID:
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801b6c4:	68f8      	ldr	r0, [r7, #12]
 801b6c6:	f7ff fb59 	bl	801ad7c <lv_area_get_width>
 801b6ca:	4603      	mov	r3, r0
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	da00      	bge.n	801b6d2 <_lv_area_align+0x346>
 801b6d0:	3301      	adds	r3, #1
 801b6d2:	105b      	asrs	r3, r3, #1
 801b6d4:	b21b      	sxth	r3, r3
 801b6d6:	b29c      	uxth	r4, r3
 801b6d8:	68b8      	ldr	r0, [r7, #8]
 801b6da:	f7ff fb4f 	bl	801ad7c <lv_area_get_width>
 801b6de:	4603      	mov	r3, r0
 801b6e0:	2b00      	cmp	r3, #0
 801b6e2:	da00      	bge.n	801b6e6 <_lv_area_align+0x35a>
 801b6e4:	3301      	adds	r3, #1
 801b6e6:	105b      	asrs	r3, r3, #1
 801b6e8:	b21b      	sxth	r3, r3
 801b6ea:	b29b      	uxth	r3, r3
 801b6ec:	1ae3      	subs	r3, r4, r3
 801b6ee:	b29b      	uxth	r3, r3
 801b6f0:	b21a      	sxth	r2, r3
 801b6f2:	683b      	ldr	r3, [r7, #0]
 801b6f4:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base);
 801b6f6:	68f8      	ldr	r0, [r7, #12]
 801b6f8:	f7ff fb57 	bl	801adaa <lv_area_get_height>
 801b6fc:	4603      	mov	r3, r0
 801b6fe:	461a      	mov	r2, r3
 801b700:	683b      	ldr	r3, [r7, #0]
 801b702:	805a      	strh	r2, [r3, #2]
            break;
 801b704:	e0a5      	b.n	801b852 <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_BOTTOM_RIGHT:
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801b706:	68f8      	ldr	r0, [r7, #12]
 801b708:	f7ff fb38 	bl	801ad7c <lv_area_get_width>
 801b70c:	4603      	mov	r3, r0
 801b70e:	b29c      	uxth	r4, r3
 801b710:	68b8      	ldr	r0, [r7, #8]
 801b712:	f7ff fb33 	bl	801ad7c <lv_area_get_width>
 801b716:	4603      	mov	r3, r0
 801b718:	b29b      	uxth	r3, r3
 801b71a:	1ae3      	subs	r3, r4, r3
 801b71c:	b29b      	uxth	r3, r3
 801b71e:	b21a      	sxth	r2, r3
 801b720:	683b      	ldr	r3, [r7, #0]
 801b722:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base);
 801b724:	68f8      	ldr	r0, [r7, #12]
 801b726:	f7ff fb40 	bl	801adaa <lv_area_get_height>
 801b72a:	4603      	mov	r3, r0
 801b72c:	461a      	mov	r2, r3
 801b72e:	683b      	ldr	r3, [r7, #0]
 801b730:	805a      	strh	r2, [r3, #2]
            break;
 801b732:	e08e      	b.n	801b852 <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_LEFT_TOP:
            res->x = -lv_area_get_width(to_align);
 801b734:	68b8      	ldr	r0, [r7, #8]
 801b736:	f7ff fb21 	bl	801ad7c <lv_area_get_width>
 801b73a:	4603      	mov	r3, r0
 801b73c:	b29b      	uxth	r3, r3
 801b73e:	425b      	negs	r3, r3
 801b740:	b29b      	uxth	r3, r3
 801b742:	b21a      	sxth	r2, r3
 801b744:	683b      	ldr	r3, [r7, #0]
 801b746:	801a      	strh	r2, [r3, #0]
            res->y = 0;
 801b748:	683b      	ldr	r3, [r7, #0]
 801b74a:	2200      	movs	r2, #0
 801b74c:	805a      	strh	r2, [r3, #2]
            break;
 801b74e:	e080      	b.n	801b852 <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_LEFT_MID:
            res->x = -lv_area_get_width(to_align);
 801b750:	68b8      	ldr	r0, [r7, #8]
 801b752:	f7ff fb13 	bl	801ad7c <lv_area_get_width>
 801b756:	4603      	mov	r3, r0
 801b758:	b29b      	uxth	r3, r3
 801b75a:	425b      	negs	r3, r3
 801b75c:	b29b      	uxth	r3, r3
 801b75e:	b21a      	sxth	r2, r3
 801b760:	683b      	ldr	r3, [r7, #0]
 801b762:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 801b764:	68f8      	ldr	r0, [r7, #12]
 801b766:	f7ff fb20 	bl	801adaa <lv_area_get_height>
 801b76a:	4603      	mov	r3, r0
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	da00      	bge.n	801b772 <_lv_area_align+0x3e6>
 801b770:	3301      	adds	r3, #1
 801b772:	105b      	asrs	r3, r3, #1
 801b774:	b21b      	sxth	r3, r3
 801b776:	b29c      	uxth	r4, r3
 801b778:	68b8      	ldr	r0, [r7, #8]
 801b77a:	f7ff fb16 	bl	801adaa <lv_area_get_height>
 801b77e:	4603      	mov	r3, r0
 801b780:	2b00      	cmp	r3, #0
 801b782:	da00      	bge.n	801b786 <_lv_area_align+0x3fa>
 801b784:	3301      	adds	r3, #1
 801b786:	105b      	asrs	r3, r3, #1
 801b788:	b21b      	sxth	r3, r3
 801b78a:	b29b      	uxth	r3, r3
 801b78c:	1ae3      	subs	r3, r4, r3
 801b78e:	b29b      	uxth	r3, r3
 801b790:	b21a      	sxth	r2, r3
 801b792:	683b      	ldr	r3, [r7, #0]
 801b794:	805a      	strh	r2, [r3, #2]
            break;
 801b796:	e05c      	b.n	801b852 <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_LEFT_BOTTOM:
            res->x = -lv_area_get_width(to_align);
 801b798:	68b8      	ldr	r0, [r7, #8]
 801b79a:	f7ff faef 	bl	801ad7c <lv_area_get_width>
 801b79e:	4603      	mov	r3, r0
 801b7a0:	b29b      	uxth	r3, r3
 801b7a2:	425b      	negs	r3, r3
 801b7a4:	b29b      	uxth	r3, r3
 801b7a6:	b21a      	sxth	r2, r3
 801b7a8:	683b      	ldr	r3, [r7, #0]
 801b7aa:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 801b7ac:	68f8      	ldr	r0, [r7, #12]
 801b7ae:	f7ff fafc 	bl	801adaa <lv_area_get_height>
 801b7b2:	4603      	mov	r3, r0
 801b7b4:	b29c      	uxth	r4, r3
 801b7b6:	68b8      	ldr	r0, [r7, #8]
 801b7b8:	f7ff faf7 	bl	801adaa <lv_area_get_height>
 801b7bc:	4603      	mov	r3, r0
 801b7be:	b29b      	uxth	r3, r3
 801b7c0:	1ae3      	subs	r3, r4, r3
 801b7c2:	b29b      	uxth	r3, r3
 801b7c4:	b21a      	sxth	r2, r3
 801b7c6:	683b      	ldr	r3, [r7, #0]
 801b7c8:	805a      	strh	r2, [r3, #2]
            break;
 801b7ca:	e042      	b.n	801b852 <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_RIGHT_TOP:
            res->x = lv_area_get_width(base);
 801b7cc:	68f8      	ldr	r0, [r7, #12]
 801b7ce:	f7ff fad5 	bl	801ad7c <lv_area_get_width>
 801b7d2:	4603      	mov	r3, r0
 801b7d4:	461a      	mov	r2, r3
 801b7d6:	683b      	ldr	r3, [r7, #0]
 801b7d8:	801a      	strh	r2, [r3, #0]
            res->y = 0;
 801b7da:	683b      	ldr	r3, [r7, #0]
 801b7dc:	2200      	movs	r2, #0
 801b7de:	805a      	strh	r2, [r3, #2]
            break;
 801b7e0:	e037      	b.n	801b852 <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_RIGHT_MID:
            res->x = lv_area_get_width(base);
 801b7e2:	68f8      	ldr	r0, [r7, #12]
 801b7e4:	f7ff faca 	bl	801ad7c <lv_area_get_width>
 801b7e8:	4603      	mov	r3, r0
 801b7ea:	461a      	mov	r2, r3
 801b7ec:	683b      	ldr	r3, [r7, #0]
 801b7ee:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 801b7f0:	68f8      	ldr	r0, [r7, #12]
 801b7f2:	f7ff fada 	bl	801adaa <lv_area_get_height>
 801b7f6:	4603      	mov	r3, r0
 801b7f8:	2b00      	cmp	r3, #0
 801b7fa:	da00      	bge.n	801b7fe <_lv_area_align+0x472>
 801b7fc:	3301      	adds	r3, #1
 801b7fe:	105b      	asrs	r3, r3, #1
 801b800:	b21b      	sxth	r3, r3
 801b802:	b29c      	uxth	r4, r3
 801b804:	68b8      	ldr	r0, [r7, #8]
 801b806:	f7ff fad0 	bl	801adaa <lv_area_get_height>
 801b80a:	4603      	mov	r3, r0
 801b80c:	2b00      	cmp	r3, #0
 801b80e:	da00      	bge.n	801b812 <_lv_area_align+0x486>
 801b810:	3301      	adds	r3, #1
 801b812:	105b      	asrs	r3, r3, #1
 801b814:	b21b      	sxth	r3, r3
 801b816:	b29b      	uxth	r3, r3
 801b818:	1ae3      	subs	r3, r4, r3
 801b81a:	b29b      	uxth	r3, r3
 801b81c:	b21a      	sxth	r2, r3
 801b81e:	683b      	ldr	r3, [r7, #0]
 801b820:	805a      	strh	r2, [r3, #2]
            break;
 801b822:	e016      	b.n	801b852 <_lv_area_align+0x4c6>

        case LV_ALIGN_OUT_RIGHT_BOTTOM:
            res->x = lv_area_get_width(base);
 801b824:	68f8      	ldr	r0, [r7, #12]
 801b826:	f7ff faa9 	bl	801ad7c <lv_area_get_width>
 801b82a:	4603      	mov	r3, r0
 801b82c:	461a      	mov	r2, r3
 801b82e:	683b      	ldr	r3, [r7, #0]
 801b830:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
 801b832:	68f8      	ldr	r0, [r7, #12]
 801b834:	f7ff fab9 	bl	801adaa <lv_area_get_height>
 801b838:	4603      	mov	r3, r0
 801b83a:	b29c      	uxth	r4, r3
 801b83c:	68b8      	ldr	r0, [r7, #8]
 801b83e:	f7ff fab4 	bl	801adaa <lv_area_get_height>
 801b842:	4603      	mov	r3, r0
 801b844:	b29b      	uxth	r3, r3
 801b846:	1ae3      	subs	r3, r4, r3
 801b848:	b29b      	uxth	r3, r3
 801b84a:	b21a      	sxth	r2, r3
 801b84c:	683b      	ldr	r3, [r7, #0]
 801b84e:	805a      	strh	r2, [r3, #2]
            break;
 801b850:	bf00      	nop
    }

    res->x += base->x1;
 801b852:	683b      	ldr	r3, [r7, #0]
 801b854:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b858:	b29a      	uxth	r2, r3
 801b85a:	68fb      	ldr	r3, [r7, #12]
 801b85c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b860:	b29b      	uxth	r3, r3
 801b862:	4413      	add	r3, r2
 801b864:	b29b      	uxth	r3, r3
 801b866:	b21a      	sxth	r2, r3
 801b868:	683b      	ldr	r3, [r7, #0]
 801b86a:	801a      	strh	r2, [r3, #0]
    res->y += base->y1;
 801b86c:	683b      	ldr	r3, [r7, #0]
 801b86e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b872:	b29a      	uxth	r2, r3
 801b874:	68fb      	ldr	r3, [r7, #12]
 801b876:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b87a:	b29b      	uxth	r3, r3
 801b87c:	4413      	add	r3, r2
 801b87e:	b29b      	uxth	r3, r3
 801b880:	b21a      	sxth	r2, r3
 801b882:	683b      	ldr	r3, [r7, #0]
 801b884:	805a      	strh	r2, [r3, #2]
}
 801b886:	bf00      	nop
 801b888:	3714      	adds	r7, #20
 801b88a:	46bd      	mov	sp, r7
 801b88c:	bd90      	pop	{r4, r7, pc}
 801b88e:	bf00      	nop

0801b890 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
 801b890:	b480      	push	{r7}
 801b892:	b089      	sub	sp, #36	; 0x24
 801b894:	af00      	add	r7, sp, #0
 801b896:	6078      	str	r0, [r7, #4]
 801b898:	6039      	str	r1, [r7, #0]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b8a0:	461a      	mov	r2, r3
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b8a8:	1ad3      	subs	r3, r2, r3
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	da00      	bge.n	801b8b0 <lv_point_within_circle+0x20>
 801b8ae:	3301      	adds	r3, #1
 801b8b0:	105b      	asrs	r3, r3, #1
 801b8b2:	83fb      	strh	r3, [r7, #30]

    /* Circle center */
    lv_coord_t cx = area->x1 + r;
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b8ba:	b29a      	uxth	r2, r3
 801b8bc:	8bfb      	ldrh	r3, [r7, #30]
 801b8be:	4413      	add	r3, r2
 801b8c0:	b29b      	uxth	r3, r3
 801b8c2:	83bb      	strh	r3, [r7, #28]
    lv_coord_t cy = area->y1 + r;
 801b8c4:	687b      	ldr	r3, [r7, #4]
 801b8c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b8ca:	b29a      	uxth	r2, r3
 801b8cc:	8bfb      	ldrh	r3, [r7, #30]
 801b8ce:	4413      	add	r3, r2
 801b8d0:	b29b      	uxth	r3, r3
 801b8d2:	837b      	strh	r3, [r7, #26]

    /*Simplify the code by moving everything to (0, 0) */
    lv_coord_t px = p->x - cx;
 801b8d4:	683b      	ldr	r3, [r7, #0]
 801b8d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b8da:	b29a      	uxth	r2, r3
 801b8dc:	8bbb      	ldrh	r3, [r7, #28]
 801b8de:	1ad3      	subs	r3, r2, r3
 801b8e0:	b29b      	uxth	r3, r3
 801b8e2:	833b      	strh	r3, [r7, #24]
    lv_coord_t py = p->y - cy;
 801b8e4:	683b      	ldr	r3, [r7, #0]
 801b8e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b8ea:	b29a      	uxth	r2, r3
 801b8ec:	8b7b      	ldrh	r3, [r7, #26]
 801b8ee:	1ad3      	subs	r3, r2, r3
 801b8f0:	b29b      	uxth	r3, r3
 801b8f2:	82fb      	strh	r3, [r7, #22]

    uint32_t r_sqrd = r * r;
 801b8f4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801b8f8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801b8fc:	fb02 f303 	mul.w	r3, r2, r3
 801b900:	613b      	str	r3, [r7, #16]
    uint32_t dist = (px * px) + (py * py);
 801b902:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801b906:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801b90a:	fb02 f203 	mul.w	r2, r2, r3
 801b90e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b912:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 801b916:	fb01 f303 	mul.w	r3, r1, r3
 801b91a:	4413      	add	r3, r2
 801b91c:	60fb      	str	r3, [r7, #12]

    if(dist <= r_sqrd)
 801b91e:	68fa      	ldr	r2, [r7, #12]
 801b920:	693b      	ldr	r3, [r7, #16]
 801b922:	429a      	cmp	r2, r3
 801b924:	d801      	bhi.n	801b92a <lv_point_within_circle+0x9a>
        return true;
 801b926:	2301      	movs	r3, #1
 801b928:	e000      	b.n	801b92c <lv_point_within_circle+0x9c>
    else
        return false;
 801b92a:	2300      	movs	r3, #0
}
 801b92c:	4618      	mov	r0, r3
 801b92e:	3724      	adds	r7, #36	; 0x24
 801b930:	46bd      	mov	sp, r7
 801b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b936:	4770      	bx	lr

0801b938 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 801b938:	b480      	push	{r7}
 801b93a:	b087      	sub	sp, #28
 801b93c:	af00      	add	r7, sp, #0
 801b93e:	60f8      	str	r0, [r7, #12]
 801b940:	60b9      	str	r1, [r7, #8]
 801b942:	4613      	mov	r3, r2
 801b944:	71fb      	strb	r3, [r7, #7]
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801b946:	7bbb      	ldrb	r3, [r7, #14]
 801b948:	461a      	mov	r2, r3
 801b94a:	79fb      	ldrb	r3, [r7, #7]
 801b94c:	fb03 f202 	mul.w	r2, r3, r2
 801b950:	7abb      	ldrb	r3, [r7, #10]
 801b952:	4619      	mov	r1, r3
 801b954:	79fb      	ldrb	r3, [r7, #7]
 801b956:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801b95a:	fb03 f301 	mul.w	r3, r3, r1
 801b95e:	4413      	add	r3, r2
 801b960:	461a      	mov	r2, r3
 801b962:	4613      	mov	r3, r2
 801b964:	021b      	lsls	r3, r3, #8
 801b966:	4413      	add	r3, r2
 801b968:	01db      	lsls	r3, r3, #7
 801b96a:	4413      	add	r3, r2
 801b96c:	0ddb      	lsrs	r3, r3, #23
 801b96e:	b2db      	uxtb	r3, r3
 801b970:	75bb      	strb	r3, [r7, #22]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801b972:	7b7b      	ldrb	r3, [r7, #13]
 801b974:	461a      	mov	r2, r3
 801b976:	79fb      	ldrb	r3, [r7, #7]
 801b978:	fb03 f202 	mul.w	r2, r3, r2
 801b97c:	7a7b      	ldrb	r3, [r7, #9]
 801b97e:	4619      	mov	r1, r3
 801b980:	79fb      	ldrb	r3, [r7, #7]
 801b982:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801b986:	fb03 f301 	mul.w	r3, r3, r1
 801b98a:	4413      	add	r3, r2
 801b98c:	461a      	mov	r2, r3
 801b98e:	4613      	mov	r3, r2
 801b990:	021b      	lsls	r3, r3, #8
 801b992:	4413      	add	r3, r2
 801b994:	01db      	lsls	r3, r3, #7
 801b996:	4413      	add	r3, r2
 801b998:	0ddb      	lsrs	r3, r3, #23
 801b99a:	b2db      	uxtb	r3, r3
 801b99c:	757b      	strb	r3, [r7, #21]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801b99e:	7b3b      	ldrb	r3, [r7, #12]
 801b9a0:	461a      	mov	r2, r3
 801b9a2:	79fb      	ldrb	r3, [r7, #7]
 801b9a4:	fb03 f202 	mul.w	r2, r3, r2
 801b9a8:	7a3b      	ldrb	r3, [r7, #8]
 801b9aa:	4619      	mov	r1, r3
 801b9ac:	79fb      	ldrb	r3, [r7, #7]
 801b9ae:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801b9b2:	fb03 f301 	mul.w	r3, r3, r1
 801b9b6:	4413      	add	r3, r2
 801b9b8:	461a      	mov	r2, r3
 801b9ba:	4613      	mov	r3, r2
 801b9bc:	021b      	lsls	r3, r3, #8
 801b9be:	4413      	add	r3, r2
 801b9c0:	01db      	lsls	r3, r3, #7
 801b9c2:	4413      	add	r3, r2
 801b9c4:	0ddb      	lsrs	r3, r3, #23
 801b9c6:	b2db      	uxtb	r3, r3
 801b9c8:	753b      	strb	r3, [r7, #20]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
 801b9ca:	23ff      	movs	r3, #255	; 0xff
 801b9cc:	75fb      	strb	r3, [r7, #23]
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 801b9ce:	697b      	ldr	r3, [r7, #20]
}
 801b9d0:	4618      	mov	r0, r3
 801b9d2:	371c      	adds	r7, #28
 801b9d4:	46bd      	mov	sp, r7
 801b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9da:	4770      	bx	lr

0801b9dc <lv_color_fill>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
 801b9dc:	b480      	push	{r7}
 801b9de:	b085      	sub	sp, #20
 801b9e0:	af00      	add	r7, sp, #0
 801b9e2:	60f8      	str	r0, [r7, #12]
 801b9e4:	60b9      	str	r1, [r7, #8]
 801b9e6:	607a      	str	r2, [r7, #4]
        *buf = color;
        buf++;
        px_num --;
    }
#else
    while(px_num > 16) {
 801b9e8:	e062      	b.n	801bab0 <lv_color_fill+0xd4>
        *buf = color;
 801b9ea:	68fb      	ldr	r3, [r7, #12]
 801b9ec:	68ba      	ldr	r2, [r7, #8]
 801b9ee:	601a      	str	r2, [r3, #0]
        buf++;
 801b9f0:	68fb      	ldr	r3, [r7, #12]
 801b9f2:	3304      	adds	r3, #4
 801b9f4:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801b9f6:	68fb      	ldr	r3, [r7, #12]
 801b9f8:	68ba      	ldr	r2, [r7, #8]
 801b9fa:	601a      	str	r2, [r3, #0]
        buf++;
 801b9fc:	68fb      	ldr	r3, [r7, #12]
 801b9fe:	3304      	adds	r3, #4
 801ba00:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801ba02:	68fb      	ldr	r3, [r7, #12]
 801ba04:	68ba      	ldr	r2, [r7, #8]
 801ba06:	601a      	str	r2, [r3, #0]
        buf++;
 801ba08:	68fb      	ldr	r3, [r7, #12]
 801ba0a:	3304      	adds	r3, #4
 801ba0c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801ba0e:	68fb      	ldr	r3, [r7, #12]
 801ba10:	68ba      	ldr	r2, [r7, #8]
 801ba12:	601a      	str	r2, [r3, #0]
        buf++;
 801ba14:	68fb      	ldr	r3, [r7, #12]
 801ba16:	3304      	adds	r3, #4
 801ba18:	60fb      	str	r3, [r7, #12]

        *buf = color;
 801ba1a:	68fb      	ldr	r3, [r7, #12]
 801ba1c:	68ba      	ldr	r2, [r7, #8]
 801ba1e:	601a      	str	r2, [r3, #0]
        buf++;
 801ba20:	68fb      	ldr	r3, [r7, #12]
 801ba22:	3304      	adds	r3, #4
 801ba24:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801ba26:	68fb      	ldr	r3, [r7, #12]
 801ba28:	68ba      	ldr	r2, [r7, #8]
 801ba2a:	601a      	str	r2, [r3, #0]
        buf++;
 801ba2c:	68fb      	ldr	r3, [r7, #12]
 801ba2e:	3304      	adds	r3, #4
 801ba30:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801ba32:	68fb      	ldr	r3, [r7, #12]
 801ba34:	68ba      	ldr	r2, [r7, #8]
 801ba36:	601a      	str	r2, [r3, #0]
        buf++;
 801ba38:	68fb      	ldr	r3, [r7, #12]
 801ba3a:	3304      	adds	r3, #4
 801ba3c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801ba3e:	68fb      	ldr	r3, [r7, #12]
 801ba40:	68ba      	ldr	r2, [r7, #8]
 801ba42:	601a      	str	r2, [r3, #0]
        buf++;
 801ba44:	68fb      	ldr	r3, [r7, #12]
 801ba46:	3304      	adds	r3, #4
 801ba48:	60fb      	str	r3, [r7, #12]

        *buf = color;
 801ba4a:	68fb      	ldr	r3, [r7, #12]
 801ba4c:	68ba      	ldr	r2, [r7, #8]
 801ba4e:	601a      	str	r2, [r3, #0]
        buf++;
 801ba50:	68fb      	ldr	r3, [r7, #12]
 801ba52:	3304      	adds	r3, #4
 801ba54:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801ba56:	68fb      	ldr	r3, [r7, #12]
 801ba58:	68ba      	ldr	r2, [r7, #8]
 801ba5a:	601a      	str	r2, [r3, #0]
        buf++;
 801ba5c:	68fb      	ldr	r3, [r7, #12]
 801ba5e:	3304      	adds	r3, #4
 801ba60:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801ba62:	68fb      	ldr	r3, [r7, #12]
 801ba64:	68ba      	ldr	r2, [r7, #8]
 801ba66:	601a      	str	r2, [r3, #0]
        buf++;
 801ba68:	68fb      	ldr	r3, [r7, #12]
 801ba6a:	3304      	adds	r3, #4
 801ba6c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801ba6e:	68fb      	ldr	r3, [r7, #12]
 801ba70:	68ba      	ldr	r2, [r7, #8]
 801ba72:	601a      	str	r2, [r3, #0]
        buf++;
 801ba74:	68fb      	ldr	r3, [r7, #12]
 801ba76:	3304      	adds	r3, #4
 801ba78:	60fb      	str	r3, [r7, #12]

        *buf = color;
 801ba7a:	68fb      	ldr	r3, [r7, #12]
 801ba7c:	68ba      	ldr	r2, [r7, #8]
 801ba7e:	601a      	str	r2, [r3, #0]
        buf++;
 801ba80:	68fb      	ldr	r3, [r7, #12]
 801ba82:	3304      	adds	r3, #4
 801ba84:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801ba86:	68fb      	ldr	r3, [r7, #12]
 801ba88:	68ba      	ldr	r2, [r7, #8]
 801ba8a:	601a      	str	r2, [r3, #0]
        buf++;
 801ba8c:	68fb      	ldr	r3, [r7, #12]
 801ba8e:	3304      	adds	r3, #4
 801ba90:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801ba92:	68fb      	ldr	r3, [r7, #12]
 801ba94:	68ba      	ldr	r2, [r7, #8]
 801ba96:	601a      	str	r2, [r3, #0]
        buf++;
 801ba98:	68fb      	ldr	r3, [r7, #12]
 801ba9a:	3304      	adds	r3, #4
 801ba9c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 801ba9e:	68fb      	ldr	r3, [r7, #12]
 801baa0:	68ba      	ldr	r2, [r7, #8]
 801baa2:	601a      	str	r2, [r3, #0]
        buf++;
 801baa4:	68fb      	ldr	r3, [r7, #12]
 801baa6:	3304      	adds	r3, #4
 801baa8:	60fb      	str	r3, [r7, #12]

        px_num -= 16;
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	3b10      	subs	r3, #16
 801baae:	607b      	str	r3, [r7, #4]
    while(px_num > 16) {
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	2b10      	cmp	r3, #16
 801bab4:	d899      	bhi.n	801b9ea <lv_color_fill+0xe>
    }
    while(px_num) {
 801bab6:	e008      	b.n	801baca <lv_color_fill+0xee>
        *buf = color;
 801bab8:	68fb      	ldr	r3, [r7, #12]
 801baba:	68ba      	ldr	r2, [r7, #8]
 801babc:	601a      	str	r2, [r3, #0]
        buf++;
 801babe:	68fb      	ldr	r3, [r7, #12]
 801bac0:	3304      	adds	r3, #4
 801bac2:	60fb      	str	r3, [r7, #12]
        px_num --;
 801bac4:	687b      	ldr	r3, [r7, #4]
 801bac6:	3b01      	subs	r3, #1
 801bac8:	607b      	str	r3, [r7, #4]
    while(px_num) {
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	2b00      	cmp	r3, #0
 801bace:	d1f3      	bne.n	801bab8 <lv_color_fill+0xdc>
    }
#endif
}
 801bad0:	bf00      	nop
 801bad2:	3714      	adds	r7, #20
 801bad4:	46bd      	mov	sp, r7
 801bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bada:	4770      	bx	lr

0801badc <lv_color_lighten>:

lv_color_t lv_color_lighten(lv_color_t c, lv_opa_t lvl)
{
 801badc:	b580      	push	{r7, lr}
 801bade:	b082      	sub	sp, #8
 801bae0:	af00      	add	r7, sp, #0
 801bae2:	6078      	str	r0, [r7, #4]
 801bae4:	460a      	mov	r2, r1
 801bae6:	70fa      	strb	r2, [r7, #3]
    return lv_color_mix(LV_COLOR_WHITE, c, lvl);
 801bae8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 801baec:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 801baf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801baf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801baf8:	78fa      	ldrb	r2, [r7, #3]
 801bafa:	6879      	ldr	r1, [r7, #4]
 801bafc:	4618      	mov	r0, r3
 801bafe:	f7ff ff1b 	bl	801b938 <lv_color_mix>
 801bb02:	4603      	mov	r3, r0
}
 801bb04:	4618      	mov	r0, r3
 801bb06:	3708      	adds	r7, #8
 801bb08:	46bd      	mov	sp, r7
 801bb0a:	bd80      	pop	{r7, pc}

0801bb0c <lv_color_darken>:

lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
 801bb0c:	b580      	push	{r7, lr}
 801bb0e:	b082      	sub	sp, #8
 801bb10:	af00      	add	r7, sp, #0
 801bb12:	6078      	str	r0, [r7, #4]
 801bb14:	460a      	mov	r2, r1
 801bb16:	70fa      	strb	r2, [r7, #3]
    return lv_color_mix(LV_COLOR_BLACK, c, lvl);
 801bb18:	f36f 0307 	bfc	r3, #0, #8
 801bb1c:	f36f 230f 	bfc	r3, #8, #8
 801bb20:	f36f 4317 	bfc	r3, #16, #8
 801bb24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801bb28:	78fa      	ldrb	r2, [r7, #3]
 801bb2a:	6879      	ldr	r1, [r7, #4]
 801bb2c:	4618      	mov	r0, r3
 801bb2e:	f7ff ff03 	bl	801b938 <lv_color_mix>
 801bb32:	4603      	mov	r3, r0
}
 801bb34:	4618      	mov	r0, r3
 801bb36:	3708      	adds	r7, #8
 801bb38:	46bd      	mov	sp, r7
 801bb3a:	bd80      	pop	{r7, pc}

0801bb3c <lv_debug_check_null>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

bool lv_debug_check_null(const void * p)
{
 801bb3c:	b480      	push	{r7}
 801bb3e:	b083      	sub	sp, #12
 801bb40:	af00      	add	r7, sp, #0
 801bb42:	6078      	str	r0, [r7, #4]
    if(p) return true;
 801bb44:	687b      	ldr	r3, [r7, #4]
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d001      	beq.n	801bb4e <lv_debug_check_null+0x12>
 801bb4a:	2301      	movs	r3, #1
 801bb4c:	e000      	b.n	801bb50 <lv_debug_check_null+0x14>

    return false;
 801bb4e:	2300      	movs	r3, #0
}
 801bb50:	4618      	mov	r0, r3
 801bb52:	370c      	adds	r7, #12
 801bb54:	46bd      	mov	sp, r7
 801bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb5a:	4770      	bx	lr

0801bb5c <lv_debug_log_error>:
    LV_LOG_WARN("lv_debug_check_str: string is longer than LV_DEBUG_STR_MAX_LENGTH");
    return false;
}

void lv_debug_log_error(const char * msg, uint64_t value)
{
 801bb5c:	b580      	push	{r7, lr}
 801bb5e:	b0c8      	sub	sp, #288	; 0x120
 801bb60:	af00      	add	r7, sp, #0
 801bb62:	f107 010c 	add.w	r1, r7, #12
 801bb66:	6008      	str	r0, [r1, #0]
 801bb68:	4639      	mov	r1, r7
 801bb6a:	e9c1 2300 	strd	r2, r3, [r1]
    static const char hex[] = "0123456789ABCDEF";

    size_t msg_len = strlen(msg);
 801bb6e:	f107 030c 	add.w	r3, r7, #12
 801bb72:	6818      	ldr	r0, [r3, #0]
 801bb74:	f7e4 fb52 	bl	800021c <strlen>
 801bb78:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
    uint32_t value_len = sizeof(unsigned long int);
 801bb7c:	2304      	movs	r3, #4
 801bb7e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    if(msg_len < 230) {
 801bb82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bb86:	2be5      	cmp	r3, #229	; 0xe5
 801bb88:	d871      	bhi.n	801bc6e <lv_debug_log_error+0x112>
        char buf[255];
        char * bufp = buf;
 801bb8a:	f107 0310 	add.w	r3, r7, #16
 801bb8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

        /*Add the function name*/
        _lv_memcpy(bufp, msg, msg_len);
 801bb92:	f107 030c 	add.w	r3, r7, #12
 801bb96:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801bb9a:	6819      	ldr	r1, [r3, #0]
 801bb9c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 801bba0:	f001 f81e 	bl	801cbe0 <_lv_memcpy>
        bufp += msg_len;
 801bba4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801bba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bbac:	4413      	add	r3, r2
 801bbae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

        /*Add value in hey*/
        *bufp = ' ';
 801bbb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bbb6:	2220      	movs	r2, #32
 801bbb8:	701a      	strb	r2, [r3, #0]
        bufp ++;
 801bbba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bbbe:	3301      	adds	r3, #1
 801bbc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        *bufp = '(';
 801bbc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bbc8:	2228      	movs	r2, #40	; 0x28
 801bbca:	701a      	strb	r2, [r3, #0]
        bufp ++;
 801bbcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bbd0:	3301      	adds	r3, #1
 801bbd2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        *bufp = '0';
 801bbd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bbda:	2230      	movs	r2, #48	; 0x30
 801bbdc:	701a      	strb	r2, [r3, #0]
        bufp ++;
 801bbde:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bbe2:	3301      	adds	r3, #1
 801bbe4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        *bufp = 'x';
 801bbe8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bbec:	2278      	movs	r2, #120	; 0x78
 801bbee:	701a      	strb	r2, [r3, #0]
        bufp ++;
 801bbf0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bbf4:	3301      	adds	r3, #1
 801bbf6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

        int8_t i;
        for(i = value_len * 2 - 1; i >= 0; i--) {
 801bbfa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bbfe:	b2db      	uxtb	r3, r3
 801bc00:	005b      	lsls	r3, r3, #1
 801bc02:	b2db      	uxtb	r3, r3
 801bc04:	3b01      	subs	r3, #1
 801bc06:	b2db      	uxtb	r3, r3
 801bc08:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 801bc0c:	e01e      	b.n	801bc4c <lv_debug_log_error+0xf0>
            uint8_t x = (unsigned long int)((unsigned long int)value >> (i * 4)) & 0xF;
 801bc0e:	463b      	mov	r3, r7
 801bc10:	681a      	ldr	r2, [r3, #0]
 801bc12:	f997 311b 	ldrsb.w	r3, [r7, #283]	; 0x11b
 801bc16:	009b      	lsls	r3, r3, #2
 801bc18:	fa22 f303 	lsr.w	r3, r2, r3
 801bc1c:	b2db      	uxtb	r3, r3
 801bc1e:	f003 030f 	and.w	r3, r3, #15
 801bc22:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

            *bufp = hex[x];
 801bc26:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 801bc2a:	4a13      	ldr	r2, [pc, #76]	; (801bc78 <lv_debug_log_error+0x11c>)
 801bc2c:	5cd2      	ldrb	r2, [r2, r3]
 801bc2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bc32:	701a      	strb	r2, [r3, #0]
            bufp++;
 801bc34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bc38:	3301      	adds	r3, #1
 801bc3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        for(i = value_len * 2 - 1; i >= 0; i--) {
 801bc3e:	f997 311b 	ldrsb.w	r3, [r7, #283]	; 0x11b
 801bc42:	b2db      	uxtb	r3, r3
 801bc44:	3b01      	subs	r3, #1
 801bc46:	b2db      	uxtb	r3, r3
 801bc48:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 801bc4c:	f997 311b 	ldrsb.w	r3, [r7, #283]	; 0x11b
 801bc50:	2b00      	cmp	r3, #0
 801bc52:	dadc      	bge.n	801bc0e <lv_debug_log_error+0xb2>
        }

        *bufp = ')';
 801bc54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bc58:	2229      	movs	r2, #41	; 0x29
 801bc5a:	701a      	strb	r2, [r3, #0]
        bufp ++;
 801bc5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bc60:	3301      	adds	r3, #1
 801bc62:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

        *bufp = '\0';
 801bc66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801bc6a:	2200      	movs	r2, #0
 801bc6c:	701a      	strb	r2, [r3, #0]
        LV_LOG_ERROR(buf);
    }
    else {
        LV_LOG_ERROR(msg);
    }
}
 801bc6e:	bf00      	nop
 801bc70:	f507 7790 	add.w	r7, r7, #288	; 0x120
 801bc74:	46bd      	mov	sp, r7
 801bc76:	bd80      	pop	{r7, pc}
 801bc78:	08030eec 	.word	0x08030eec

0801bc7c <_lv_fs_init>:

/**
 * Initialize the File system interface
 */
void _lv_fs_init(void)
{
 801bc7c:	b580      	push	{r7, lr}
 801bc7e:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
 801bc80:	2144      	movs	r1, #68	; 0x44
 801bc82:	4802      	ldr	r0, [pc, #8]	; (801bc8c <_lv_fs_init+0x10>)
 801bc84:	f000 f99a 	bl	801bfbc <_lv_ll_init>
}
 801bc88:	bf00      	nop
 801bc8a:	bd80      	pop	{r7, pc}
 801bc8c:	20021834 	.word	0x20021834

0801bc90 <lv_fs_open>:
 * @param path path to the file beginning with the driver letter (e.g. S:/folder/file.txt)
 * @param mode read: FS_MODE_RD, write: FS_MODE_WR, both: FS_MODE_RD | FS_MODE_WR
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_open(lv_fs_file_t * file_p, const char * path, lv_fs_mode_t mode)
{
 801bc90:	b590      	push	{r4, r7, lr}
 801bc92:	b089      	sub	sp, #36	; 0x24
 801bc94:	af00      	add	r7, sp, #0
 801bc96:	60f8      	str	r0, [r7, #12]
 801bc98:	60b9      	str	r1, [r7, #8]
 801bc9a:	4613      	mov	r3, r2
 801bc9c:	71fb      	strb	r3, [r7, #7]
    file_p->drv    = NULL;
 801bc9e:	68fb      	ldr	r3, [r7, #12]
 801bca0:	2200      	movs	r2, #0
 801bca2:	605a      	str	r2, [r3, #4]
    file_p->file_d = NULL;
 801bca4:	68fb      	ldr	r3, [r7, #12]
 801bca6:	2200      	movs	r2, #0
 801bca8:	601a      	str	r2, [r3, #0]

    if(path == NULL) return LV_FS_RES_INV_PARAM;
 801bcaa:	68bb      	ldr	r3, [r7, #8]
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	d101      	bne.n	801bcb4 <lv_fs_open+0x24>
 801bcb0:	230b      	movs	r3, #11
 801bcb2:	e086      	b.n	801bdc2 <lv_fs_open+0x132>

    char letter = path[0];
 801bcb4:	68bb      	ldr	r3, [r7, #8]
 801bcb6:	781b      	ldrb	r3, [r3, #0]
 801bcb8:	77fb      	strb	r3, [r7, #31]

    file_p->drv = lv_fs_get_drv(letter);
 801bcba:	7ffb      	ldrb	r3, [r7, #31]
 801bcbc:	4618      	mov	r0, r3
 801bcbe:	f000 f90b 	bl	801bed8 <lv_fs_get_drv>
 801bcc2:	4602      	mov	r2, r0
 801bcc4:	68fb      	ldr	r3, [r7, #12]
 801bcc6:	605a      	str	r2, [r3, #4]

    if(file_p->drv == NULL) {
 801bcc8:	68fb      	ldr	r3, [r7, #12]
 801bcca:	685b      	ldr	r3, [r3, #4]
 801bccc:	2b00      	cmp	r3, #0
 801bcce:	d101      	bne.n	801bcd4 <lv_fs_open+0x44>
        return LV_FS_RES_NOT_EX;
 801bcd0:	2303      	movs	r3, #3
 801bcd2:	e076      	b.n	801bdc2 <lv_fs_open+0x132>
    }

    if(file_p->drv->ready_cb != NULL) {
 801bcd4:	68fb      	ldr	r3, [r7, #12]
 801bcd6:	685b      	ldr	r3, [r3, #4]
 801bcd8:	689b      	ldr	r3, [r3, #8]
 801bcda:	2b00      	cmp	r3, #0
 801bcdc:	d011      	beq.n	801bd02 <lv_fs_open+0x72>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
 801bcde:	68fb      	ldr	r3, [r7, #12]
 801bce0:	685b      	ldr	r3, [r3, #4]
 801bce2:	689b      	ldr	r3, [r3, #8]
 801bce4:	68fa      	ldr	r2, [r7, #12]
 801bce6:	6852      	ldr	r2, [r2, #4]
 801bce8:	4610      	mov	r0, r2
 801bcea:	4798      	blx	r3
 801bcec:	4603      	mov	r3, r0
 801bcee:	f083 0301 	eor.w	r3, r3, #1
 801bcf2:	b2db      	uxtb	r3, r3
 801bcf4:	2b00      	cmp	r3, #0
 801bcf6:	d004      	beq.n	801bd02 <lv_fs_open+0x72>
            file_p->drv = NULL;
 801bcf8:	68fb      	ldr	r3, [r7, #12]
 801bcfa:	2200      	movs	r2, #0
 801bcfc:	605a      	str	r2, [r3, #4]
            return LV_FS_RES_HW_ERR;
 801bcfe:	2301      	movs	r3, #1
 801bd00:	e05f      	b.n	801bdc2 <lv_fs_open+0x132>
        }
    }

    if(file_p->drv->open_cb == NULL) {
 801bd02:	68fb      	ldr	r3, [r7, #12]
 801bd04:	685b      	ldr	r3, [r3, #4]
 801bd06:	68db      	ldr	r3, [r3, #12]
 801bd08:	2b00      	cmp	r3, #0
 801bd0a:	d104      	bne.n	801bd16 <lv_fs_open+0x86>
        file_p->drv = NULL;
 801bd0c:	68fb      	ldr	r3, [r7, #12]
 801bd0e:	2200      	movs	r2, #0
 801bd10:	605a      	str	r2, [r3, #4]
        return LV_FS_RES_NOT_IMP;
 801bd12:	2309      	movs	r3, #9
 801bd14:	e055      	b.n	801bdc2 <lv_fs_open+0x132>
    }

    const char * real_path = lv_fs_get_real_path(path);
 801bd16:	68b8      	ldr	r0, [r7, #8]
 801bd18:	f000 f92e 	bl	801bf78 <lv_fs_get_real_path>
 801bd1c:	61b8      	str	r0, [r7, #24]

    if(file_p->drv->file_size == 0) {  /*Is file_d zero size?*/
 801bd1e:	68fb      	ldr	r3, [r7, #12]
 801bd20:	685b      	ldr	r3, [r3, #4]
 801bd22:	885b      	ldrh	r3, [r3, #2]
 801bd24:	2b00      	cmp	r3, #0
 801bd26:	d10a      	bne.n	801bd3e <lv_fs_open+0xae>
        /*Pass file_d's address to open_cb, so the implementor can allocate memory byself*/
        return file_p->drv->open_cb(file_p->drv, &file_p->file_d, real_path, mode);
 801bd28:	68fb      	ldr	r3, [r7, #12]
 801bd2a:	685b      	ldr	r3, [r3, #4]
 801bd2c:	68dc      	ldr	r4, [r3, #12]
 801bd2e:	68fb      	ldr	r3, [r7, #12]
 801bd30:	6858      	ldr	r0, [r3, #4]
 801bd32:	68f9      	ldr	r1, [r7, #12]
 801bd34:	79fb      	ldrb	r3, [r7, #7]
 801bd36:	69ba      	ldr	r2, [r7, #24]
 801bd38:	47a0      	blx	r4
 801bd3a:	4603      	mov	r3, r0
 801bd3c:	e041      	b.n	801bdc2 <lv_fs_open+0x132>
    }

    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
 801bd3e:	68fb      	ldr	r3, [r7, #12]
 801bd40:	685b      	ldr	r3, [r3, #4]
 801bd42:	885b      	ldrh	r3, [r3, #2]
 801bd44:	4618      	mov	r0, r3
 801bd46:	f000 fc85 	bl	801c654 <lv_mem_alloc>
 801bd4a:	4602      	mov	r2, r0
 801bd4c:	68fb      	ldr	r3, [r7, #12]
 801bd4e:	601a      	str	r2, [r3, #0]
    LV_ASSERT_MEM(file_p->file_d);
 801bd50:	68fb      	ldr	r3, [r7, #12]
 801bd52:	681b      	ldr	r3, [r3, #0]
 801bd54:	4618      	mov	r0, r3
 801bd56:	f7ff fef1 	bl	801bb3c <lv_debug_check_null>
 801bd5a:	4603      	mov	r3, r0
 801bd5c:	f083 0301 	eor.w	r3, r3, #1
 801bd60:	b2db      	uxtb	r3, r3
 801bd62:	2b00      	cmp	r3, #0
 801bd64:	d009      	beq.n	801bd7a <lv_fs_open+0xea>
 801bd66:	68fb      	ldr	r3, [r7, #12]
 801bd68:	681b      	ldr	r3, [r3, #0]
 801bd6a:	f04f 0400 	mov.w	r4, #0
 801bd6e:	461a      	mov	r2, r3
 801bd70:	4623      	mov	r3, r4
 801bd72:	4816      	ldr	r0, [pc, #88]	; (801bdcc <lv_fs_open+0x13c>)
 801bd74:	f7ff fef2 	bl	801bb5c <lv_debug_log_error>
 801bd78:	e7fe      	b.n	801bd78 <lv_fs_open+0xe8>
    if(file_p->file_d == NULL) {
 801bd7a:	68fb      	ldr	r3, [r7, #12]
 801bd7c:	681b      	ldr	r3, [r3, #0]
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d104      	bne.n	801bd8c <lv_fs_open+0xfc>
        file_p->drv = NULL;
 801bd82:	68fb      	ldr	r3, [r7, #12]
 801bd84:	2200      	movs	r2, #0
 801bd86:	605a      	str	r2, [r3, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
 801bd88:	230a      	movs	r3, #10
 801bd8a:	e01a      	b.n	801bdc2 <lv_fs_open+0x132>
    }

    lv_fs_res_t res = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 801bd8c:	68fb      	ldr	r3, [r7, #12]
 801bd8e:	685b      	ldr	r3, [r3, #4]
 801bd90:	68dc      	ldr	r4, [r3, #12]
 801bd92:	68fb      	ldr	r3, [r7, #12]
 801bd94:	6858      	ldr	r0, [r3, #4]
 801bd96:	68fb      	ldr	r3, [r7, #12]
 801bd98:	6819      	ldr	r1, [r3, #0]
 801bd9a:	79fb      	ldrb	r3, [r7, #7]
 801bd9c:	69ba      	ldr	r2, [r7, #24]
 801bd9e:	47a0      	blx	r4
 801bda0:	4603      	mov	r3, r0
 801bda2:	75fb      	strb	r3, [r7, #23]

    if(res != LV_FS_RES_OK) {
 801bda4:	7dfb      	ldrb	r3, [r7, #23]
 801bda6:	2b00      	cmp	r3, #0
 801bda8:	d00a      	beq.n	801bdc0 <lv_fs_open+0x130>
        lv_mem_free(file_p->file_d);
 801bdaa:	68fb      	ldr	r3, [r7, #12]
 801bdac:	681b      	ldr	r3, [r3, #0]
 801bdae:	4618      	mov	r0, r3
 801bdb0:	f000 fc9a 	bl	801c6e8 <lv_mem_free>
        file_p->file_d = NULL;
 801bdb4:	68fb      	ldr	r3, [r7, #12]
 801bdb6:	2200      	movs	r2, #0
 801bdb8:	601a      	str	r2, [r3, #0]
        file_p->drv    = NULL;
 801bdba:	68fb      	ldr	r3, [r7, #12]
 801bdbc:	2200      	movs	r2, #0
 801bdbe:	605a      	str	r2, [r3, #4]
    }

    return res;
 801bdc0:	7dfb      	ldrb	r3, [r7, #23]
}
 801bdc2:	4618      	mov	r0, r3
 801bdc4:	3724      	adds	r7, #36	; 0x24
 801bdc6:	46bd      	mov	sp, r7
 801bdc8:	bd90      	pop	{r4, r7, pc}
 801bdca:	bf00      	nop
 801bdcc:	0802d878 	.word	0x0802d878

0801bdd0 <lv_fs_close>:
 * Close an already opened file
 * @param file_p pointer to a lv_fs_file_t variable
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)
{
 801bdd0:	b580      	push	{r7, lr}
 801bdd2:	b084      	sub	sp, #16
 801bdd4:	af00      	add	r7, sp, #0
 801bdd6:	6078      	str	r0, [r7, #4]
    if(file_p->drv == NULL) {
 801bdd8:	687b      	ldr	r3, [r7, #4]
 801bdda:	685b      	ldr	r3, [r3, #4]
 801bddc:	2b00      	cmp	r3, #0
 801bdde:	d101      	bne.n	801bde4 <lv_fs_close+0x14>
        return LV_FS_RES_INV_PARAM;
 801bde0:	230b      	movs	r3, #11
 801bde2:	e01d      	b.n	801be20 <lv_fs_close+0x50>
    }

    if(file_p->drv->close_cb == NULL) {
 801bde4:	687b      	ldr	r3, [r7, #4]
 801bde6:	685b      	ldr	r3, [r3, #4]
 801bde8:	691b      	ldr	r3, [r3, #16]
 801bdea:	2b00      	cmp	r3, #0
 801bdec:	d101      	bne.n	801bdf2 <lv_fs_close+0x22>
        return LV_FS_RES_NOT_IMP;
 801bdee:	2309      	movs	r3, #9
 801bdf0:	e016      	b.n	801be20 <lv_fs_close+0x50>
    }

    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 801bdf2:	687b      	ldr	r3, [r7, #4]
 801bdf4:	685b      	ldr	r3, [r3, #4]
 801bdf6:	691b      	ldr	r3, [r3, #16]
 801bdf8:	687a      	ldr	r2, [r7, #4]
 801bdfa:	6850      	ldr	r0, [r2, #4]
 801bdfc:	687a      	ldr	r2, [r7, #4]
 801bdfe:	6812      	ldr	r2, [r2, #0]
 801be00:	4611      	mov	r1, r2
 801be02:	4798      	blx	r3
 801be04:	4603      	mov	r3, r0
 801be06:	73fb      	strb	r3, [r7, #15]

    lv_mem_free(file_p->file_d); /*Clean up*/
 801be08:	687b      	ldr	r3, [r7, #4]
 801be0a:	681b      	ldr	r3, [r3, #0]
 801be0c:	4618      	mov	r0, r3
 801be0e:	f000 fc6b 	bl	801c6e8 <lv_mem_free>
    file_p->file_d = NULL;
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	2200      	movs	r2, #0
 801be16:	601a      	str	r2, [r3, #0]
    file_p->drv    = NULL;
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	2200      	movs	r2, #0
 801be1c:	605a      	str	r2, [r3, #4]

    return res;
 801be1e:	7bfb      	ldrb	r3, [r7, #15]
}
 801be20:	4618      	mov	r0, r3
 801be22:	3710      	adds	r7, #16
 801be24:	46bd      	mov	sp, r7
 801be26:	bd80      	pop	{r7, pc}

0801be28 <lv_fs_read>:
 * @param btr Bytes To Read
 * @param br the number of real read bytes (Bytes Read). NULL if unused.
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)
{
 801be28:	b590      	push	{r4, r7, lr}
 801be2a:	b089      	sub	sp, #36	; 0x24
 801be2c:	af02      	add	r7, sp, #8
 801be2e:	60f8      	str	r0, [r7, #12]
 801be30:	60b9      	str	r1, [r7, #8]
 801be32:	607a      	str	r2, [r7, #4]
 801be34:	603b      	str	r3, [r7, #0]
    if(br != NULL) *br = 0;
 801be36:	683b      	ldr	r3, [r7, #0]
 801be38:	2b00      	cmp	r3, #0
 801be3a:	d002      	beq.n	801be42 <lv_fs_read+0x1a>
 801be3c:	683b      	ldr	r3, [r7, #0]
 801be3e:	2200      	movs	r2, #0
 801be40:	601a      	str	r2, [r3, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 801be42:	68fb      	ldr	r3, [r7, #12]
 801be44:	685b      	ldr	r3, [r3, #4]
 801be46:	2b00      	cmp	r3, #0
 801be48:	d101      	bne.n	801be4e <lv_fs_read+0x26>
 801be4a:	230b      	movs	r3, #11
 801be4c:	e01e      	b.n	801be8c <lv_fs_read+0x64>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 801be4e:	68fb      	ldr	r3, [r7, #12]
 801be50:	685b      	ldr	r3, [r3, #4]
 801be52:	699b      	ldr	r3, [r3, #24]
 801be54:	2b00      	cmp	r3, #0
 801be56:	d101      	bne.n	801be5c <lv_fs_read+0x34>
 801be58:	2309      	movs	r3, #9
 801be5a:	e017      	b.n	801be8c <lv_fs_read+0x64>

    uint32_t br_tmp = 0;
 801be5c:	2300      	movs	r3, #0
 801be5e:	613b      	str	r3, [r7, #16]
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 801be60:	68fb      	ldr	r3, [r7, #12]
 801be62:	685b      	ldr	r3, [r3, #4]
 801be64:	699c      	ldr	r4, [r3, #24]
 801be66:	68fb      	ldr	r3, [r7, #12]
 801be68:	6858      	ldr	r0, [r3, #4]
 801be6a:	68fb      	ldr	r3, [r7, #12]
 801be6c:	6819      	ldr	r1, [r3, #0]
 801be6e:	f107 0310 	add.w	r3, r7, #16
 801be72:	9300      	str	r3, [sp, #0]
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	68ba      	ldr	r2, [r7, #8]
 801be78:	47a0      	blx	r4
 801be7a:	4603      	mov	r3, r0
 801be7c:	75fb      	strb	r3, [r7, #23]
    if(br != NULL) *br = br_tmp;
 801be7e:	683b      	ldr	r3, [r7, #0]
 801be80:	2b00      	cmp	r3, #0
 801be82:	d002      	beq.n	801be8a <lv_fs_read+0x62>
 801be84:	693a      	ldr	r2, [r7, #16]
 801be86:	683b      	ldr	r3, [r7, #0]
 801be88:	601a      	str	r2, [r3, #0]

    return res;
 801be8a:	7dfb      	ldrb	r3, [r7, #23]
}
 801be8c:	4618      	mov	r0, r3
 801be8e:	371c      	adds	r7, #28
 801be90:	46bd      	mov	sp, r7
 801be92:	bd90      	pop	{r4, r7, pc}

0801be94 <lv_fs_seek>:
 * @param file_p pointer to a lv_fs_file_t variable
 * @param pos the new position expressed in bytes index (0: start of file)
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos)
{
 801be94:	b580      	push	{r7, lr}
 801be96:	b084      	sub	sp, #16
 801be98:	af00      	add	r7, sp, #0
 801be9a:	6078      	str	r0, [r7, #4]
 801be9c:	6039      	str	r1, [r7, #0]
    if(file_p->drv == NULL) {
 801be9e:	687b      	ldr	r3, [r7, #4]
 801bea0:	685b      	ldr	r3, [r3, #4]
 801bea2:	2b00      	cmp	r3, #0
 801bea4:	d101      	bne.n	801beaa <lv_fs_seek+0x16>
        return LV_FS_RES_INV_PARAM;
 801bea6:	230b      	movs	r3, #11
 801bea8:	e012      	b.n	801bed0 <lv_fs_seek+0x3c>
    }

    if(file_p->drv->seek_cb == NULL) {
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	685b      	ldr	r3, [r3, #4]
 801beae:	6a1b      	ldr	r3, [r3, #32]
 801beb0:	2b00      	cmp	r3, #0
 801beb2:	d101      	bne.n	801beb8 <lv_fs_seek+0x24>
        return LV_FS_RES_NOT_IMP;
 801beb4:	2309      	movs	r3, #9
 801beb6:	e00b      	b.n	801bed0 <lv_fs_seek+0x3c>
    }

    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	685b      	ldr	r3, [r3, #4]
 801bebc:	6a1b      	ldr	r3, [r3, #32]
 801bebe:	687a      	ldr	r2, [r7, #4]
 801bec0:	6850      	ldr	r0, [r2, #4]
 801bec2:	687a      	ldr	r2, [r7, #4]
 801bec4:	6811      	ldr	r1, [r2, #0]
 801bec6:	683a      	ldr	r2, [r7, #0]
 801bec8:	4798      	blx	r3
 801beca:	4603      	mov	r3, r0
 801becc:	73fb      	strb	r3, [r7, #15]

    return res;
 801bece:	7bfb      	ldrb	r3, [r7, #15]
}
 801bed0:	4618      	mov	r0, r3
 801bed2:	3710      	adds	r7, #16
 801bed4:	46bd      	mov	sp, r7
 801bed6:	bd80      	pop	{r7, pc}

0801bed8 <lv_fs_get_drv>:
 * Give a pointer to a driver from its letter
 * @param letter the driver letter
 * @return pointer to a driver or NULL if not found
 */
lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 801bed8:	b580      	push	{r7, lr}
 801beda:	b084      	sub	sp, #16
 801bedc:	af00      	add	r7, sp, #0
 801bede:	4603      	mov	r3, r0
 801bee0:	71fb      	strb	r3, [r7, #7]
    lv_fs_drv_t * drv;

    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
 801bee2:	480c      	ldr	r0, [pc, #48]	; (801bf14 <lv_fs_get_drv+0x3c>)
 801bee4:	f000 f9e0 	bl	801c2a8 <_lv_ll_get_head>
 801bee8:	60f8      	str	r0, [r7, #12]
 801beea:	e00b      	b.n	801bf04 <lv_fs_get_drv+0x2c>
        if(drv->letter == letter) {
 801beec:	68fb      	ldr	r3, [r7, #12]
 801beee:	781b      	ldrb	r3, [r3, #0]
 801bef0:	79fa      	ldrb	r2, [r7, #7]
 801bef2:	429a      	cmp	r2, r3
 801bef4:	d101      	bne.n	801befa <lv_fs_get_drv+0x22>
            return drv;
 801bef6:	68fb      	ldr	r3, [r7, #12]
 801bef8:	e008      	b.n	801bf0c <lv_fs_get_drv+0x34>
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
 801befa:	68f9      	ldr	r1, [r7, #12]
 801befc:	4805      	ldr	r0, [pc, #20]	; (801bf14 <lv_fs_get_drv+0x3c>)
 801befe:	f000 f9f9 	bl	801c2f4 <_lv_ll_get_next>
 801bf02:	60f8      	str	r0, [r7, #12]
 801bf04:	68fb      	ldr	r3, [r7, #12]
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	d1f0      	bne.n	801beec <lv_fs_get_drv+0x14>
        }
    }

    return NULL;
 801bf0a:	2300      	movs	r3, #0
}
 801bf0c:	4618      	mov	r0, r3
 801bf0e:	3710      	adds	r7, #16
 801bf10:	46bd      	mov	sp, r7
 801bf12:	bd80      	pop	{r7, pc}
 801bf14:	20021834 	.word	0x20021834

0801bf18 <lv_fs_get_ext>:
 * Return with the extension of the filename
 * @param fn string with a filename
 * @return pointer to the beginning extension or empty string if no extension
 */
const char * lv_fs_get_ext(const char * fn)
{
 801bf18:	b580      	push	{r7, lr}
 801bf1a:	b084      	sub	sp, #16
 801bf1c:	af00      	add	r7, sp, #0
 801bf1e:	6078      	str	r0, [r7, #4]
    size_t i;
    for(i = strlen(fn); i > 0; i--) {
 801bf20:	6878      	ldr	r0, [r7, #4]
 801bf22:	f7e4 f97b 	bl	800021c <strlen>
 801bf26:	60f8      	str	r0, [r7, #12]
 801bf28:	e01b      	b.n	801bf62 <lv_fs_get_ext+0x4a>
        if(fn[i] == '.') {
 801bf2a:	687a      	ldr	r2, [r7, #4]
 801bf2c:	68fb      	ldr	r3, [r7, #12]
 801bf2e:	4413      	add	r3, r2
 801bf30:	781b      	ldrb	r3, [r3, #0]
 801bf32:	2b2e      	cmp	r3, #46	; 0x2e
 801bf34:	d104      	bne.n	801bf40 <lv_fs_get_ext+0x28>
            return &fn[i + 1];
 801bf36:	68fb      	ldr	r3, [r7, #12]
 801bf38:	3301      	adds	r3, #1
 801bf3a:	687a      	ldr	r2, [r7, #4]
 801bf3c:	4413      	add	r3, r2
 801bf3e:	e014      	b.n	801bf6a <lv_fs_get_ext+0x52>
        }
        else if(fn[i] == '/' || fn[i] == '\\') {
 801bf40:	687a      	ldr	r2, [r7, #4]
 801bf42:	68fb      	ldr	r3, [r7, #12]
 801bf44:	4413      	add	r3, r2
 801bf46:	781b      	ldrb	r3, [r3, #0]
 801bf48:	2b2f      	cmp	r3, #47	; 0x2f
 801bf4a:	d005      	beq.n	801bf58 <lv_fs_get_ext+0x40>
 801bf4c:	687a      	ldr	r2, [r7, #4]
 801bf4e:	68fb      	ldr	r3, [r7, #12]
 801bf50:	4413      	add	r3, r2
 801bf52:	781b      	ldrb	r3, [r3, #0]
 801bf54:	2b5c      	cmp	r3, #92	; 0x5c
 801bf56:	d101      	bne.n	801bf5c <lv_fs_get_ext+0x44>
            return ""; /*No extension if a '\' or '/' found*/
 801bf58:	4b06      	ldr	r3, [pc, #24]	; (801bf74 <lv_fs_get_ext+0x5c>)
 801bf5a:	e006      	b.n	801bf6a <lv_fs_get_ext+0x52>
    for(i = strlen(fn); i > 0; i--) {
 801bf5c:	68fb      	ldr	r3, [r7, #12]
 801bf5e:	3b01      	subs	r3, #1
 801bf60:	60fb      	str	r3, [r7, #12]
 801bf62:	68fb      	ldr	r3, [r7, #12]
 801bf64:	2b00      	cmp	r3, #0
 801bf66:	d1e0      	bne.n	801bf2a <lv_fs_get_ext+0x12>
        }
    }

    return ""; /*Empty string if no '.' in the file name. */
 801bf68:	4b02      	ldr	r3, [pc, #8]	; (801bf74 <lv_fs_get_ext+0x5c>)
}
 801bf6a:	4618      	mov	r0, r3
 801bf6c:	3710      	adds	r7, #16
 801bf6e:	46bd      	mov	sp, r7
 801bf70:	bd80      	pop	{r7, pc}
 801bf72:	bf00      	nop
 801bf74:	0802d888 	.word	0x0802d888

0801bf78 <lv_fs_get_real_path>:
 * Leave the driver letters and / or \ letters from beginning of the path
 * @param path path string (E.g. S:/folder/file.txt)
 * @return pointer to the beginning of the real path (E.g. folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
 801bf78:	b480      	push	{r7}
 801bf7a:	b083      	sub	sp, #12
 801bf7c:	af00      	add	r7, sp, #0
 801bf7e:	6078      	str	r0, [r7, #4]
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
 801bf80:	687b      	ldr	r3, [r7, #4]
 801bf82:	3301      	adds	r3, #1
 801bf84:	607b      	str	r3, [r7, #4]

    while(*path != '\0') {
 801bf86:	e00e      	b.n	801bfa6 <lv_fs_get_real_path+0x2e>
        if(*path == ':' || *path == '\\' || *path == '/') {
 801bf88:	687b      	ldr	r3, [r7, #4]
 801bf8a:	781b      	ldrb	r3, [r3, #0]
 801bf8c:	2b3a      	cmp	r3, #58	; 0x3a
 801bf8e:	d007      	beq.n	801bfa0 <lv_fs_get_real_path+0x28>
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	781b      	ldrb	r3, [r3, #0]
 801bf94:	2b5c      	cmp	r3, #92	; 0x5c
 801bf96:	d003      	beq.n	801bfa0 <lv_fs_get_real_path+0x28>
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	781b      	ldrb	r3, [r3, #0]
 801bf9c:	2b2f      	cmp	r3, #47	; 0x2f
 801bf9e:	d106      	bne.n	801bfae <lv_fs_get_real_path+0x36>
            path++;
 801bfa0:	687b      	ldr	r3, [r7, #4]
 801bfa2:	3301      	adds	r3, #1
 801bfa4:	607b      	str	r3, [r7, #4]
    while(*path != '\0') {
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	781b      	ldrb	r3, [r3, #0]
 801bfaa:	2b00      	cmp	r3, #0
 801bfac:	d1ec      	bne.n	801bf88 <lv_fs_get_real_path+0x10>
        else {
            break;
        }
    }

    return path;
 801bfae:	687b      	ldr	r3, [r7, #4]
}
 801bfb0:	4618      	mov	r0, r3
 801bfb2:	370c      	adds	r7, #12
 801bfb4:	46bd      	mov	sp, r7
 801bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfba:	4770      	bx	lr

0801bfbc <_lv_ll_init>:
 * Initialize linked list
 * @param ll_dsc pointer to ll_dsc variable
 * @param node_size the size of 1 node in bytes
 */
void _lv_ll_init(lv_ll_t * ll_p, uint32_t node_size)
{
 801bfbc:	b480      	push	{r7}
 801bfbe:	b083      	sub	sp, #12
 801bfc0:	af00      	add	r7, sp, #0
 801bfc2:	6078      	str	r0, [r7, #4]
 801bfc4:	6039      	str	r1, [r7, #0]
    ll_p->head = NULL;
 801bfc6:	687b      	ldr	r3, [r7, #4]
 801bfc8:	2200      	movs	r2, #0
 801bfca:	605a      	str	r2, [r3, #4]
    ll_p->tail = NULL;
 801bfcc:	687b      	ldr	r3, [r7, #4]
 801bfce:	2200      	movs	r2, #0
 801bfd0:	609a      	str	r2, [r3, #8]
#ifdef LV_ARCH_64
    /*Round the size up to 8*/
    node_size = (node_size + 7) & (~0x7);
#else
    /*Round the size up to 4*/
    node_size = (node_size + 3) & (~0x3);
 801bfd2:	683b      	ldr	r3, [r7, #0]
 801bfd4:	3303      	adds	r3, #3
 801bfd6:	f023 0303 	bic.w	r3, r3, #3
 801bfda:	603b      	str	r3, [r7, #0]
#endif

    ll_p->n_size = node_size;
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	683a      	ldr	r2, [r7, #0]
 801bfe0:	601a      	str	r2, [r3, #0]
}
 801bfe2:	bf00      	nop
 801bfe4:	370c      	adds	r7, #12
 801bfe6:	46bd      	mov	sp, r7
 801bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfec:	4770      	bx	lr

0801bfee <_lv_ll_ins_head>:
 * Add a new head to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new head
 */
void * _lv_ll_ins_head(lv_ll_t * ll_p)
{
 801bfee:	b580      	push	{r7, lr}
 801bff0:	b084      	sub	sp, #16
 801bff2:	af00      	add	r7, sp, #0
 801bff4:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 801bff6:	687b      	ldr	r3, [r7, #4]
 801bff8:	681b      	ldr	r3, [r3, #0]
 801bffa:	3308      	adds	r3, #8
 801bffc:	4618      	mov	r0, r3
 801bffe:	f000 fb29 	bl	801c654 <lv_mem_alloc>
 801c002:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 801c004:	68fb      	ldr	r3, [r7, #12]
 801c006:	2b00      	cmp	r3, #0
 801c008:	d020      	beq.n	801c04c <_lv_ll_ins_head+0x5e>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 801c00a:	2200      	movs	r2, #0
 801c00c:	68f9      	ldr	r1, [r7, #12]
 801c00e:	6878      	ldr	r0, [r7, #4]
 801c010:	f000 fa1e 	bl	801c450 <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	685b      	ldr	r3, [r3, #4]
 801c018:	461a      	mov	r2, r3
 801c01a:	68f9      	ldr	r1, [r7, #12]
 801c01c:	6878      	ldr	r0, [r7, #4]
 801c01e:	f000 fa36 	bl	801c48e <node_set_next>

        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 801c022:	687b      	ldr	r3, [r7, #4]
 801c024:	685b      	ldr	r3, [r3, #4]
 801c026:	2b00      	cmp	r3, #0
 801c028:	d006      	beq.n	801c038 <_lv_ll_ins_head+0x4a>
            node_set_prev(ll_p, ll_p->head, n_new);
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	685b      	ldr	r3, [r3, #4]
 801c02e:	68fa      	ldr	r2, [r7, #12]
 801c030:	4619      	mov	r1, r3
 801c032:	6878      	ldr	r0, [r7, #4]
 801c034:	f000 fa0c 	bl	801c450 <node_set_prev>
        }

        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 801c038:	687b      	ldr	r3, [r7, #4]
 801c03a:	68fa      	ldr	r2, [r7, #12]
 801c03c:	605a      	str	r2, [r3, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 801c03e:	687b      	ldr	r3, [r7, #4]
 801c040:	689b      	ldr	r3, [r3, #8]
 801c042:	2b00      	cmp	r3, #0
 801c044:	d102      	bne.n	801c04c <_lv_ll_ins_head+0x5e>
            ll_p->tail = n_new;
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	68fa      	ldr	r2, [r7, #12]
 801c04a:	609a      	str	r2, [r3, #8]
        }
    }

    return n_new;
 801c04c:	68fb      	ldr	r3, [r7, #12]
}
 801c04e:	4618      	mov	r0, r3
 801c050:	3710      	adds	r7, #16
 801c052:	46bd      	mov	sp, r7
 801c054:	bd80      	pop	{r7, pc}

0801c056 <_lv_ll_ins_prev>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the new head
 */
void * _lv_ll_ins_prev(lv_ll_t * ll_p, void * n_act)
{
 801c056:	b580      	push	{r7, lr}
 801c058:	b084      	sub	sp, #16
 801c05a:	af00      	add	r7, sp, #0
 801c05c:	6078      	str	r0, [r7, #4]
 801c05e:	6039      	str	r1, [r7, #0]
    lv_ll_node_t * n_new;

    if(NULL == ll_p || NULL == n_act) return NULL;
 801c060:	687b      	ldr	r3, [r7, #4]
 801c062:	2b00      	cmp	r3, #0
 801c064:	d002      	beq.n	801c06c <_lv_ll_ins_prev+0x16>
 801c066:	683b      	ldr	r3, [r7, #0]
 801c068:	2b00      	cmp	r3, #0
 801c06a:	d101      	bne.n	801c070 <_lv_ll_ins_prev+0x1a>
 801c06c:	2300      	movs	r3, #0
 801c06e:	e035      	b.n	801c0dc <_lv_ll_ins_prev+0x86>

    if(_lv_ll_get_head(ll_p) == n_act) {
 801c070:	6878      	ldr	r0, [r7, #4]
 801c072:	f000 f919 	bl	801c2a8 <_lv_ll_get_head>
 801c076:	4602      	mov	r2, r0
 801c078:	683b      	ldr	r3, [r7, #0]
 801c07a:	4293      	cmp	r3, r2
 801c07c:	d108      	bne.n	801c090 <_lv_ll_ins_prev+0x3a>
        n_new = _lv_ll_ins_head(ll_p);
 801c07e:	6878      	ldr	r0, [r7, #4]
 801c080:	f7ff ffb5 	bl	801bfee <_lv_ll_ins_head>
 801c084:	60f8      	str	r0, [r7, #12]
        if(n_new == NULL) return NULL;
 801c086:	68fb      	ldr	r3, [r7, #12]
 801c088:	2b00      	cmp	r3, #0
 801c08a:	d126      	bne.n	801c0da <_lv_ll_ins_prev+0x84>
 801c08c:	2300      	movs	r3, #0
 801c08e:	e025      	b.n	801c0dc <_lv_ll_ins_prev+0x86>
    }
    else {
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	681b      	ldr	r3, [r3, #0]
 801c094:	3308      	adds	r3, #8
 801c096:	4618      	mov	r0, r3
 801c098:	f000 fadc 	bl	801c654 <lv_mem_alloc>
 801c09c:	60f8      	str	r0, [r7, #12]
        if(n_new == NULL) return NULL;
 801c09e:	68fb      	ldr	r3, [r7, #12]
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	d101      	bne.n	801c0a8 <_lv_ll_ins_prev+0x52>
 801c0a4:	2300      	movs	r3, #0
 801c0a6:	e019      	b.n	801c0dc <_lv_ll_ins_prev+0x86>

        lv_ll_node_t * n_prev;
        n_prev = _lv_ll_get_prev(ll_p, n_act);
 801c0a8:	6839      	ldr	r1, [r7, #0]
 801c0aa:	6878      	ldr	r0, [r7, #4]
 801c0ac:	f000 f93c 	bl	801c328 <_lv_ll_get_prev>
 801c0b0:	60b8      	str	r0, [r7, #8]
        node_set_next(ll_p, n_prev, n_new);
 801c0b2:	68fa      	ldr	r2, [r7, #12]
 801c0b4:	68b9      	ldr	r1, [r7, #8]
 801c0b6:	6878      	ldr	r0, [r7, #4]
 801c0b8:	f000 f9e9 	bl	801c48e <node_set_next>
        node_set_prev(ll_p, n_new, n_prev);
 801c0bc:	68ba      	ldr	r2, [r7, #8]
 801c0be:	68f9      	ldr	r1, [r7, #12]
 801c0c0:	6878      	ldr	r0, [r7, #4]
 801c0c2:	f000 f9c5 	bl	801c450 <node_set_prev>
        node_set_prev(ll_p, n_act, n_new);
 801c0c6:	68fa      	ldr	r2, [r7, #12]
 801c0c8:	6839      	ldr	r1, [r7, #0]
 801c0ca:	6878      	ldr	r0, [r7, #4]
 801c0cc:	f000 f9c0 	bl	801c450 <node_set_prev>
        node_set_next(ll_p, n_new, n_act);
 801c0d0:	683a      	ldr	r2, [r7, #0]
 801c0d2:	68f9      	ldr	r1, [r7, #12]
 801c0d4:	6878      	ldr	r0, [r7, #4]
 801c0d6:	f000 f9da 	bl	801c48e <node_set_next>
    }

    return n_new;
 801c0da:	68fb      	ldr	r3, [r7, #12]
}
 801c0dc:	4618      	mov	r0, r3
 801c0de:	3710      	adds	r7, #16
 801c0e0:	46bd      	mov	sp, r7
 801c0e2:	bd80      	pop	{r7, pc}

0801c0e4 <_lv_ll_ins_tail>:
 * Add a new tail to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new tail
 */
void * _lv_ll_ins_tail(lv_ll_t * ll_p)
{
 801c0e4:	b580      	push	{r7, lr}
 801c0e6:	b084      	sub	sp, #16
 801c0e8:	af00      	add	r7, sp, #0
 801c0ea:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 801c0ec:	687b      	ldr	r3, [r7, #4]
 801c0ee:	681b      	ldr	r3, [r3, #0]
 801c0f0:	3308      	adds	r3, #8
 801c0f2:	4618      	mov	r0, r3
 801c0f4:	f000 faae 	bl	801c654 <lv_mem_alloc>
 801c0f8:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 801c0fa:	68fb      	ldr	r3, [r7, #12]
 801c0fc:	2b00      	cmp	r3, #0
 801c0fe:	d020      	beq.n	801c142 <_lv_ll_ins_tail+0x5e>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 801c100:	2200      	movs	r2, #0
 801c102:	68f9      	ldr	r1, [r7, #12]
 801c104:	6878      	ldr	r0, [r7, #4]
 801c106:	f000 f9c2 	bl	801c48e <node_set_next>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	689b      	ldr	r3, [r3, #8]
 801c10e:	461a      	mov	r2, r3
 801c110:	68f9      	ldr	r1, [r7, #12]
 801c112:	6878      	ldr	r0, [r7, #4]
 801c114:	f000 f99c 	bl	801c450 <node_set_prev>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 801c118:	687b      	ldr	r3, [r7, #4]
 801c11a:	689b      	ldr	r3, [r3, #8]
 801c11c:	2b00      	cmp	r3, #0
 801c11e:	d006      	beq.n	801c12e <_lv_ll_ins_tail+0x4a>
            node_set_next(ll_p, ll_p->tail, n_new);
 801c120:	687b      	ldr	r3, [r7, #4]
 801c122:	689b      	ldr	r3, [r3, #8]
 801c124:	68fa      	ldr	r2, [r7, #12]
 801c126:	4619      	mov	r1, r3
 801c128:	6878      	ldr	r0, [r7, #4]
 801c12a:	f000 f9b0 	bl	801c48e <node_set_next>
        }

        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	68fa      	ldr	r2, [r7, #12]
 801c132:	609a      	str	r2, [r3, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 801c134:	687b      	ldr	r3, [r7, #4]
 801c136:	685b      	ldr	r3, [r3, #4]
 801c138:	2b00      	cmp	r3, #0
 801c13a:	d102      	bne.n	801c142 <_lv_ll_ins_tail+0x5e>
            ll_p->head = n_new;
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	68fa      	ldr	r2, [r7, #12]
 801c140:	605a      	str	r2, [r3, #4]
        }
    }

    return n_new;
 801c142:	68fb      	ldr	r3, [r7, #12]
}
 801c144:	4618      	mov	r0, r3
 801c146:	3710      	adds	r7, #16
 801c148:	46bd      	mov	sp, r7
 801c14a:	bd80      	pop	{r7, pc}

0801c14c <_lv_ll_remove>:
 * It does not free the memory of node.
 * @param ll_p pointer to the linked list of 'node_p'
 * @param node_p pointer to node in 'll_p' linked list
 */
void _lv_ll_remove(lv_ll_t * ll_p, void * node_p)
{
 801c14c:	b580      	push	{r7, lr}
 801c14e:	b084      	sub	sp, #16
 801c150:	af00      	add	r7, sp, #0
 801c152:	6078      	str	r0, [r7, #4]
 801c154:	6039      	str	r1, [r7, #0]
    if(_lv_ll_get_head(ll_p) == node_p) {
 801c156:	6878      	ldr	r0, [r7, #4]
 801c158:	f000 f8a6 	bl	801c2a8 <_lv_ll_get_head>
 801c15c:	4602      	mov	r2, r0
 801c15e:	683b      	ldr	r3, [r7, #0]
 801c160:	4293      	cmp	r3, r2
 801c162:	d116      	bne.n	801c192 <_lv_ll_remove+0x46>
        /*The new head will be the node after 'n_act'*/
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 801c164:	6839      	ldr	r1, [r7, #0]
 801c166:	6878      	ldr	r0, [r7, #4]
 801c168:	f000 f8c4 	bl	801c2f4 <_lv_ll_get_next>
 801c16c:	4602      	mov	r2, r0
 801c16e:	687b      	ldr	r3, [r7, #4]
 801c170:	605a      	str	r2, [r3, #4]
        if(ll_p->head == NULL) {
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	685b      	ldr	r3, [r3, #4]
 801c176:	2b00      	cmp	r3, #0
 801c178:	d103      	bne.n	801c182 <_lv_ll_remove+0x36>
            ll_p->tail = NULL;
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	2200      	movs	r2, #0
 801c17e:	609a      	str	r2, [r3, #8]
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);

        node_set_next(ll_p, n_prev, n_next);
        node_set_prev(ll_p, n_next, n_prev);
    }
}
 801c180:	e039      	b.n	801c1f6 <_lv_ll_remove+0xaa>
            node_set_prev(ll_p, ll_p->head, NULL);
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	685b      	ldr	r3, [r3, #4]
 801c186:	2200      	movs	r2, #0
 801c188:	4619      	mov	r1, r3
 801c18a:	6878      	ldr	r0, [r7, #4]
 801c18c:	f000 f960 	bl	801c450 <node_set_prev>
}
 801c190:	e031      	b.n	801c1f6 <_lv_ll_remove+0xaa>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 801c192:	6878      	ldr	r0, [r7, #4]
 801c194:	f000 f89b 	bl	801c2ce <_lv_ll_get_tail>
 801c198:	4602      	mov	r2, r0
 801c19a:	683b      	ldr	r3, [r7, #0]
 801c19c:	4293      	cmp	r3, r2
 801c19e:	d116      	bne.n	801c1ce <_lv_ll_remove+0x82>
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 801c1a0:	6839      	ldr	r1, [r7, #0]
 801c1a2:	6878      	ldr	r0, [r7, #4]
 801c1a4:	f000 f8c0 	bl	801c328 <_lv_ll_get_prev>
 801c1a8:	4602      	mov	r2, r0
 801c1aa:	687b      	ldr	r3, [r7, #4]
 801c1ac:	609a      	str	r2, [r3, #8]
        if(ll_p->tail == NULL) {
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	689b      	ldr	r3, [r3, #8]
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d103      	bne.n	801c1be <_lv_ll_remove+0x72>
            ll_p->head = NULL;
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	2200      	movs	r2, #0
 801c1ba:	605a      	str	r2, [r3, #4]
}
 801c1bc:	e01b      	b.n	801c1f6 <_lv_ll_remove+0xaa>
            node_set_next(ll_p, ll_p->tail, NULL);
 801c1be:	687b      	ldr	r3, [r7, #4]
 801c1c0:	689b      	ldr	r3, [r3, #8]
 801c1c2:	2200      	movs	r2, #0
 801c1c4:	4619      	mov	r1, r3
 801c1c6:	6878      	ldr	r0, [r7, #4]
 801c1c8:	f000 f961 	bl	801c48e <node_set_next>
}
 801c1cc:	e013      	b.n	801c1f6 <_lv_ll_remove+0xaa>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
 801c1ce:	6839      	ldr	r1, [r7, #0]
 801c1d0:	6878      	ldr	r0, [r7, #4]
 801c1d2:	f000 f8a9 	bl	801c328 <_lv_ll_get_prev>
 801c1d6:	60f8      	str	r0, [r7, #12]
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
 801c1d8:	6839      	ldr	r1, [r7, #0]
 801c1da:	6878      	ldr	r0, [r7, #4]
 801c1dc:	f000 f88a 	bl	801c2f4 <_lv_ll_get_next>
 801c1e0:	60b8      	str	r0, [r7, #8]
        node_set_next(ll_p, n_prev, n_next);
 801c1e2:	68ba      	ldr	r2, [r7, #8]
 801c1e4:	68f9      	ldr	r1, [r7, #12]
 801c1e6:	6878      	ldr	r0, [r7, #4]
 801c1e8:	f000 f951 	bl	801c48e <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
 801c1ec:	68fa      	ldr	r2, [r7, #12]
 801c1ee:	68b9      	ldr	r1, [r7, #8]
 801c1f0:	6878      	ldr	r0, [r7, #4]
 801c1f2:	f000 f92d 	bl	801c450 <node_set_prev>
}
 801c1f6:	bf00      	nop
 801c1f8:	3710      	adds	r7, #16
 801c1fa:	46bd      	mov	sp, r7
 801c1fc:	bd80      	pop	{r7, pc}

0801c1fe <_lv_ll_chg_list>:
 * @param node pointer to a node
 * @param head true: be the head in the new list
 *             false be the head in the new list
 */
void _lv_ll_chg_list(lv_ll_t * ll_ori_p, lv_ll_t * ll_new_p, void * node, bool head)
{
 801c1fe:	b580      	push	{r7, lr}
 801c200:	b084      	sub	sp, #16
 801c202:	af00      	add	r7, sp, #0
 801c204:	60f8      	str	r0, [r7, #12]
 801c206:	60b9      	str	r1, [r7, #8]
 801c208:	607a      	str	r2, [r7, #4]
 801c20a:	70fb      	strb	r3, [r7, #3]
    _lv_ll_remove(ll_ori_p, node);
 801c20c:	6879      	ldr	r1, [r7, #4]
 801c20e:	68f8      	ldr	r0, [r7, #12]
 801c210:	f7ff ff9c 	bl	801c14c <_lv_ll_remove>

    if(head) {
 801c214:	78fb      	ldrb	r3, [r7, #3]
 801c216:	2b00      	cmp	r3, #0
 801c218:	d021      	beq.n	801c25e <_lv_ll_chg_list+0x60>
        /*Set node as head*/
        node_set_prev(ll_new_p, node, NULL);
 801c21a:	2200      	movs	r2, #0
 801c21c:	6879      	ldr	r1, [r7, #4]
 801c21e:	68b8      	ldr	r0, [r7, #8]
 801c220:	f000 f916 	bl	801c450 <node_set_prev>
        node_set_next(ll_new_p, node, ll_new_p->head);
 801c224:	68bb      	ldr	r3, [r7, #8]
 801c226:	685b      	ldr	r3, [r3, #4]
 801c228:	461a      	mov	r2, r3
 801c22a:	6879      	ldr	r1, [r7, #4]
 801c22c:	68b8      	ldr	r0, [r7, #8]
 801c22e:	f000 f92e 	bl	801c48e <node_set_next>

        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 801c232:	68bb      	ldr	r3, [r7, #8]
 801c234:	685b      	ldr	r3, [r3, #4]
 801c236:	2b00      	cmp	r3, #0
 801c238:	d006      	beq.n	801c248 <_lv_ll_chg_list+0x4a>
            node_set_prev(ll_new_p, ll_new_p->head, node);
 801c23a:	68bb      	ldr	r3, [r7, #8]
 801c23c:	685b      	ldr	r3, [r3, #4]
 801c23e:	687a      	ldr	r2, [r7, #4]
 801c240:	4619      	mov	r1, r3
 801c242:	68b8      	ldr	r0, [r7, #8]
 801c244:	f000 f904 	bl	801c450 <node_set_prev>
        }

        ll_new_p->head = node;       /*Set the new head in the dsc.*/
 801c248:	68bb      	ldr	r3, [r7, #8]
 801c24a:	687a      	ldr	r2, [r7, #4]
 801c24c:	605a      	str	r2, [r3, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 801c24e:	68bb      	ldr	r3, [r7, #8]
 801c250:	689b      	ldr	r3, [r3, #8]
 801c252:	2b00      	cmp	r3, #0
 801c254:	d124      	bne.n	801c2a0 <_lv_ll_chg_list+0xa2>
            ll_new_p->tail = node;
 801c256:	68bb      	ldr	r3, [r7, #8]
 801c258:	687a      	ldr	r2, [r7, #4]
 801c25a:	609a      	str	r2, [r3, #8]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
            ll_new_p->head = node;
        }
    }
}
 801c25c:	e020      	b.n	801c2a0 <_lv_ll_chg_list+0xa2>
        node_set_prev(ll_new_p, node, ll_new_p->tail);
 801c25e:	68bb      	ldr	r3, [r7, #8]
 801c260:	689b      	ldr	r3, [r3, #8]
 801c262:	461a      	mov	r2, r3
 801c264:	6879      	ldr	r1, [r7, #4]
 801c266:	68b8      	ldr	r0, [r7, #8]
 801c268:	f000 f8f2 	bl	801c450 <node_set_prev>
        node_set_next(ll_new_p, node, NULL);
 801c26c:	2200      	movs	r2, #0
 801c26e:	6879      	ldr	r1, [r7, #4]
 801c270:	68b8      	ldr	r0, [r7, #8]
 801c272:	f000 f90c 	bl	801c48e <node_set_next>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
 801c276:	68bb      	ldr	r3, [r7, #8]
 801c278:	689b      	ldr	r3, [r3, #8]
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d006      	beq.n	801c28c <_lv_ll_chg_list+0x8e>
            node_set_next(ll_new_p, ll_new_p->tail, node);
 801c27e:	68bb      	ldr	r3, [r7, #8]
 801c280:	689b      	ldr	r3, [r3, #8]
 801c282:	687a      	ldr	r2, [r7, #4]
 801c284:	4619      	mov	r1, r3
 801c286:	68b8      	ldr	r0, [r7, #8]
 801c288:	f000 f901 	bl	801c48e <node_set_next>
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
 801c28c:	68bb      	ldr	r3, [r7, #8]
 801c28e:	687a      	ldr	r2, [r7, #4]
 801c290:	609a      	str	r2, [r3, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 801c292:	68bb      	ldr	r3, [r7, #8]
 801c294:	685b      	ldr	r3, [r3, #4]
 801c296:	2b00      	cmp	r3, #0
 801c298:	d102      	bne.n	801c2a0 <_lv_ll_chg_list+0xa2>
            ll_new_p->head = node;
 801c29a:	68bb      	ldr	r3, [r7, #8]
 801c29c:	687a      	ldr	r2, [r7, #4]
 801c29e:	605a      	str	r2, [r3, #4]
}
 801c2a0:	bf00      	nop
 801c2a2:	3710      	adds	r7, #16
 801c2a4:	46bd      	mov	sp, r7
 801c2a6:	bd80      	pop	{r7, pc}

0801c2a8 <_lv_ll_get_head>:
 * Return with head node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the head of 'll_p'
 */
void * _lv_ll_get_head(const lv_ll_t * ll_p)
{
 801c2a8:	b480      	push	{r7}
 801c2aa:	b085      	sub	sp, #20
 801c2ac:	af00      	add	r7, sp, #0
 801c2ae:	6078      	str	r0, [r7, #4]
    void * head = NULL;
 801c2b0:	2300      	movs	r3, #0
 801c2b2:	60fb      	str	r3, [r7, #12]

    if(ll_p != NULL) {
 801c2b4:	687b      	ldr	r3, [r7, #4]
 801c2b6:	2b00      	cmp	r3, #0
 801c2b8:	d002      	beq.n	801c2c0 <_lv_ll_get_head+0x18>
        head = ll_p->head;
 801c2ba:	687b      	ldr	r3, [r7, #4]
 801c2bc:	685b      	ldr	r3, [r3, #4]
 801c2be:	60fb      	str	r3, [r7, #12]
    }

    return head;
 801c2c0:	68fb      	ldr	r3, [r7, #12]
}
 801c2c2:	4618      	mov	r0, r3
 801c2c4:	3714      	adds	r7, #20
 801c2c6:	46bd      	mov	sp, r7
 801c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2cc:	4770      	bx	lr

0801c2ce <_lv_ll_get_tail>:
 * Return with tail node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the head of 'll_p'
 */
void * _lv_ll_get_tail(const lv_ll_t * ll_p)
{
 801c2ce:	b480      	push	{r7}
 801c2d0:	b085      	sub	sp, #20
 801c2d2:	af00      	add	r7, sp, #0
 801c2d4:	6078      	str	r0, [r7, #4]
    void * tail = NULL;
 801c2d6:	2300      	movs	r3, #0
 801c2d8:	60fb      	str	r3, [r7, #12]

    if(ll_p != NULL) {
 801c2da:	687b      	ldr	r3, [r7, #4]
 801c2dc:	2b00      	cmp	r3, #0
 801c2de:	d002      	beq.n	801c2e6 <_lv_ll_get_tail+0x18>
        tail = ll_p->tail;
 801c2e0:	687b      	ldr	r3, [r7, #4]
 801c2e2:	689b      	ldr	r3, [r3, #8]
 801c2e4:	60fb      	str	r3, [r7, #12]
    }

    return tail;
 801c2e6:	68fb      	ldr	r3, [r7, #12]
}
 801c2e8:	4618      	mov	r0, r3
 801c2ea:	3714      	adds	r7, #20
 801c2ec:	46bd      	mov	sp, r7
 801c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2f2:	4770      	bx	lr

0801c2f4 <_lv_ll_get_next>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the next node
 */
void * _lv_ll_get_next(const lv_ll_t * ll_p, const void * n_act)
{
 801c2f4:	b480      	push	{r7}
 801c2f6:	b085      	sub	sp, #20
 801c2f8:	af00      	add	r7, sp, #0
 801c2fa:	6078      	str	r0, [r7, #4]
 801c2fc:	6039      	str	r1, [r7, #0]
    if(ll_p == NULL) return NULL;
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	2b00      	cmp	r3, #0
 801c302:	d101      	bne.n	801c308 <_lv_ll_get_next+0x14>
 801c304:	2300      	movs	r3, #0
 801c306:	e009      	b.n	801c31c <_lv_ll_get_next+0x28>

    /* Pointer to the next node is stored in the end of this node.
     * Go there and return the address found there */
    const lv_ll_node_t * n_act_d = n_act;
 801c308:	683b      	ldr	r3, [r7, #0]
 801c30a:	60fb      	str	r3, [r7, #12]
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 801c30c:	687b      	ldr	r3, [r7, #4]
 801c30e:	681b      	ldr	r3, [r3, #0]
 801c310:	3304      	adds	r3, #4
 801c312:	68fa      	ldr	r2, [r7, #12]
 801c314:	4413      	add	r3, r2
 801c316:	60fb      	str	r3, [r7, #12]
    return *((lv_ll_node_t **)n_act_d);
 801c318:	68fb      	ldr	r3, [r7, #12]
 801c31a:	681b      	ldr	r3, [r3, #0]
}
 801c31c:	4618      	mov	r0, r3
 801c31e:	3714      	adds	r7, #20
 801c320:	46bd      	mov	sp, r7
 801c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c326:	4770      	bx	lr

0801c328 <_lv_ll_get_prev>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the previous node
 */
void * _lv_ll_get_prev(const lv_ll_t * ll_p, const void * n_act)
{
 801c328:	b480      	push	{r7}
 801c32a:	b085      	sub	sp, #20
 801c32c:	af00      	add	r7, sp, #0
 801c32e:	6078      	str	r0, [r7, #4]
 801c330:	6039      	str	r1, [r7, #0]
    if(ll_p == NULL) return NULL;
 801c332:	687b      	ldr	r3, [r7, #4]
 801c334:	2b00      	cmp	r3, #0
 801c336:	d101      	bne.n	801c33c <_lv_ll_get_prev+0x14>
 801c338:	2300      	movs	r3, #0
 801c33a:	e008      	b.n	801c34e <_lv_ll_get_prev+0x26>

    /* Pointer to the prev. node is stored in the end of this node.
     * Go there and return the address found there */
    const lv_ll_node_t * n_act_d = n_act;
 801c33c:	683b      	ldr	r3, [r7, #0]
 801c33e:	60fb      	str	r3, [r7, #12]
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 801c340:	687b      	ldr	r3, [r7, #4]
 801c342:	681b      	ldr	r3, [r3, #0]
 801c344:	68fa      	ldr	r2, [r7, #12]
 801c346:	4413      	add	r3, r2
 801c348:	60fb      	str	r3, [r7, #12]
    return *((lv_ll_node_t **)n_act_d);
 801c34a:	68fb      	ldr	r3, [r7, #12]
 801c34c:	681b      	ldr	r3, [r3, #0]
}
 801c34e:	4618      	mov	r0, r3
 801c350:	3714      	adds	r7, #20
 801c352:	46bd      	mov	sp, r7
 801c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c358:	4770      	bx	lr

0801c35a <_lv_ll_get_len>:
 * Return the length of the linked list.
 * @param ll_p pointer to linked list
 * @return length of the linked list
 */
uint32_t _lv_ll_get_len(const lv_ll_t * ll_p)
{
 801c35a:	b580      	push	{r7, lr}
 801c35c:	b084      	sub	sp, #16
 801c35e:	af00      	add	r7, sp, #0
 801c360:	6078      	str	r0, [r7, #4]
    uint32_t len = 0;
 801c362:	2300      	movs	r3, #0
 801c364:	60fb      	str	r3, [r7, #12]
    void * node;

    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 801c366:	6878      	ldr	r0, [r7, #4]
 801c368:	f7ff ff9e 	bl	801c2a8 <_lv_ll_get_head>
 801c36c:	60b8      	str	r0, [r7, #8]
 801c36e:	e007      	b.n	801c380 <_lv_ll_get_len+0x26>
        len++;
 801c370:	68fb      	ldr	r3, [r7, #12]
 801c372:	3301      	adds	r3, #1
 801c374:	60fb      	str	r3, [r7, #12]
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 801c376:	68b9      	ldr	r1, [r7, #8]
 801c378:	6878      	ldr	r0, [r7, #4]
 801c37a:	f7ff ffbb 	bl	801c2f4 <_lv_ll_get_next>
 801c37e:	60b8      	str	r0, [r7, #8]
 801c380:	68bb      	ldr	r3, [r7, #8]
 801c382:	2b00      	cmp	r3, #0
 801c384:	d1f4      	bne.n	801c370 <_lv_ll_get_len+0x16>
    }

    return len;
 801c386:	68fb      	ldr	r3, [r7, #12]
}
 801c388:	4618      	mov	r0, r3
 801c38a:	3710      	adds	r7, #16
 801c38c:	46bd      	mov	sp, r7
 801c38e:	bd80      	pop	{r7, pc}

0801c390 <_lv_ll_move_before>:
 * @param ll_p pointer to a linked list
 * @param n_act pointer to node to move
 * @param n_after pointer to a node which should be after `n_act`
 */
void _lv_ll_move_before(lv_ll_t * ll_p, void * n_act, void * n_after)
{
 801c390:	b580      	push	{r7, lr}
 801c392:	b086      	sub	sp, #24
 801c394:	af00      	add	r7, sp, #0
 801c396:	60f8      	str	r0, [r7, #12]
 801c398:	60b9      	str	r1, [r7, #8]
 801c39a:	607a      	str	r2, [r7, #4]
    if(n_act == n_after) return; /*Can't move before itself*/
 801c39c:	68ba      	ldr	r2, [r7, #8]
 801c39e:	687b      	ldr	r3, [r7, #4]
 801c3a0:	429a      	cmp	r2, r3
 801c3a2:	d035      	beq.n	801c410 <_lv_ll_move_before+0x80>

    void * n_before;
    if(n_after != NULL)
 801c3a4:	687b      	ldr	r3, [r7, #4]
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	d005      	beq.n	801c3b6 <_lv_ll_move_before+0x26>
        n_before = _lv_ll_get_prev(ll_p, n_after);
 801c3aa:	6879      	ldr	r1, [r7, #4]
 801c3ac:	68f8      	ldr	r0, [r7, #12]
 801c3ae:	f7ff ffbb 	bl	801c328 <_lv_ll_get_prev>
 801c3b2:	6178      	str	r0, [r7, #20]
 801c3b4:	e003      	b.n	801c3be <_lv_ll_move_before+0x2e>
    else
        n_before = _lv_ll_get_tail(ll_p); /*if `n_after` is NULL `n_act` should be the new tail*/
 801c3b6:	68f8      	ldr	r0, [r7, #12]
 801c3b8:	f7ff ff89 	bl	801c2ce <_lv_ll_get_tail>
 801c3bc:	6178      	str	r0, [r7, #20]

    if(n_act == n_before) return; /*Already before `n_after`*/
 801c3be:	68ba      	ldr	r2, [r7, #8]
 801c3c0:	697b      	ldr	r3, [r7, #20]
 801c3c2:	429a      	cmp	r2, r3
 801c3c4:	d026      	beq.n	801c414 <_lv_ll_move_before+0x84>

    /*It's much easier to remove from the list and add again*/
    _lv_ll_remove(ll_p, n_act);
 801c3c6:	68b9      	ldr	r1, [r7, #8]
 801c3c8:	68f8      	ldr	r0, [r7, #12]
 801c3ca:	f7ff febf 	bl	801c14c <_lv_ll_remove>

    /*Add again by setting the prev. and next nodes*/
    node_set_next(ll_p, n_before, n_act);
 801c3ce:	68ba      	ldr	r2, [r7, #8]
 801c3d0:	6979      	ldr	r1, [r7, #20]
 801c3d2:	68f8      	ldr	r0, [r7, #12]
 801c3d4:	f000 f85b 	bl	801c48e <node_set_next>
    node_set_prev(ll_p, n_act, n_before);
 801c3d8:	697a      	ldr	r2, [r7, #20]
 801c3da:	68b9      	ldr	r1, [r7, #8]
 801c3dc:	68f8      	ldr	r0, [r7, #12]
 801c3de:	f000 f837 	bl	801c450 <node_set_prev>
    node_set_prev(ll_p, n_after, n_act);
 801c3e2:	68ba      	ldr	r2, [r7, #8]
 801c3e4:	6879      	ldr	r1, [r7, #4]
 801c3e6:	68f8      	ldr	r0, [r7, #12]
 801c3e8:	f000 f832 	bl	801c450 <node_set_prev>
    node_set_next(ll_p, n_act, n_after);
 801c3ec:	687a      	ldr	r2, [r7, #4]
 801c3ee:	68b9      	ldr	r1, [r7, #8]
 801c3f0:	68f8      	ldr	r0, [r7, #12]
 801c3f2:	f000 f84c 	bl	801c48e <node_set_next>

    /*If `n_act` was moved before NULL then it become the new tail*/
    if(n_after == NULL) ll_p->tail = n_act;
 801c3f6:	687b      	ldr	r3, [r7, #4]
 801c3f8:	2b00      	cmp	r3, #0
 801c3fa:	d102      	bne.n	801c402 <_lv_ll_move_before+0x72>
 801c3fc:	68fb      	ldr	r3, [r7, #12]
 801c3fe:	68ba      	ldr	r2, [r7, #8]
 801c400:	609a      	str	r2, [r3, #8]

    /*If `n_act` was moved before `NULL` then it's the new head*/
    if(n_before == NULL) ll_p->head = n_act;
 801c402:	697b      	ldr	r3, [r7, #20]
 801c404:	2b00      	cmp	r3, #0
 801c406:	d106      	bne.n	801c416 <_lv_ll_move_before+0x86>
 801c408:	68fb      	ldr	r3, [r7, #12]
 801c40a:	68ba      	ldr	r2, [r7, #8]
 801c40c:	605a      	str	r2, [r3, #4]
 801c40e:	e002      	b.n	801c416 <_lv_ll_move_before+0x86>
    if(n_act == n_after) return; /*Can't move before itself*/
 801c410:	bf00      	nop
 801c412:	e000      	b.n	801c416 <_lv_ll_move_before+0x86>
    if(n_act == n_before) return; /*Already before `n_after`*/
 801c414:	bf00      	nop
}
 801c416:	3718      	adds	r7, #24
 801c418:	46bd      	mov	sp, r7
 801c41a:	bd80      	pop	{r7, pc}

0801c41c <_lv_ll_is_empty>:
 * Check if a linked list is empty
 * @param ll_p pointer to a linked list
 * @return true: the linked list is empty; false: not empty
 */
bool _lv_ll_is_empty(lv_ll_t * ll_p)
{
 801c41c:	b480      	push	{r7}
 801c41e:	b083      	sub	sp, #12
 801c420:	af00      	add	r7, sp, #0
 801c422:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return true;
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	2b00      	cmp	r3, #0
 801c428:	d101      	bne.n	801c42e <_lv_ll_is_empty+0x12>
 801c42a:	2301      	movs	r3, #1
 801c42c:	e00a      	b.n	801c444 <_lv_ll_is_empty+0x28>

    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 801c42e:	687b      	ldr	r3, [r7, #4]
 801c430:	685b      	ldr	r3, [r3, #4]
 801c432:	2b00      	cmp	r3, #0
 801c434:	d105      	bne.n	801c442 <_lv_ll_is_empty+0x26>
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	689b      	ldr	r3, [r3, #8]
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d101      	bne.n	801c442 <_lv_ll_is_empty+0x26>
 801c43e:	2301      	movs	r3, #1
 801c440:	e000      	b.n	801c444 <_lv_ll_is_empty+0x28>

    return false;
 801c442:	2300      	movs	r3, #0
}
 801c444:	4618      	mov	r0, r3
 801c446:	370c      	adds	r7, #12
 801c448:	46bd      	mov	sp, r7
 801c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c44e:	4770      	bx	lr

0801c450 <node_set_prev>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
 801c450:	b480      	push	{r7}
 801c452:	b089      	sub	sp, #36	; 0x24
 801c454:	af00      	add	r7, sp, #0
 801c456:	60f8      	str	r0, [r7, #12]
 801c458:	60b9      	str	r1, [r7, #8]
 801c45a:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 801c45c:	68bb      	ldr	r3, [r7, #8]
 801c45e:	2b00      	cmp	r3, #0
 801c460:	d00f      	beq.n	801c482 <node_set_prev+0x32>

    uint8_t * act8 = (uint8_t *) act;
 801c462:	68bb      	ldr	r3, [r7, #8]
 801c464:	61fb      	str	r3, [r7, #28]

    act8 += LL_PREV_P_OFFSET(ll_p);
 801c466:	68fb      	ldr	r3, [r7, #12]
 801c468:	681b      	ldr	r3, [r3, #0]
 801c46a:	69fa      	ldr	r2, [r7, #28]
 801c46c:	4413      	add	r3, r2
 801c46e:	61fb      	str	r3, [r7, #28]

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
 801c470:	69fb      	ldr	r3, [r7, #28]
 801c472:	61bb      	str	r3, [r7, #24]
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;
 801c474:	1d3b      	adds	r3, r7, #4
 801c476:	617b      	str	r3, [r7, #20]

    *act_node_p = *prev_node_p;
 801c478:	697b      	ldr	r3, [r7, #20]
 801c47a:	681a      	ldr	r2, [r3, #0]
 801c47c:	69bb      	ldr	r3, [r7, #24]
 801c47e:	601a      	str	r2, [r3, #0]
 801c480:	e000      	b.n	801c484 <node_set_prev+0x34>
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 801c482:	bf00      	nop
}
 801c484:	3724      	adds	r7, #36	; 0x24
 801c486:	46bd      	mov	sp, r7
 801c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c48c:	4770      	bx	lr

0801c48e <node_set_next>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
 801c48e:	b480      	push	{r7}
 801c490:	b089      	sub	sp, #36	; 0x24
 801c492:	af00      	add	r7, sp, #0
 801c494:	60f8      	str	r0, [r7, #12]
 801c496:	60b9      	str	r1, [r7, #8]
 801c498:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 801c49a:	68bb      	ldr	r3, [r7, #8]
 801c49c:	2b00      	cmp	r3, #0
 801c49e:	d010      	beq.n	801c4c2 <node_set_next+0x34>
    uint8_t * act8 = (uint8_t *) act;
 801c4a0:	68bb      	ldr	r3, [r7, #8]
 801c4a2:	61fb      	str	r3, [r7, #28]

    act8 += LL_NEXT_P_OFFSET(ll_p);
 801c4a4:	68fb      	ldr	r3, [r7, #12]
 801c4a6:	681b      	ldr	r3, [r3, #0]
 801c4a8:	3304      	adds	r3, #4
 801c4aa:	69fa      	ldr	r2, [r7, #28]
 801c4ac:	4413      	add	r3, r2
 801c4ae:	61fb      	str	r3, [r7, #28]
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
 801c4b0:	69fb      	ldr	r3, [r7, #28]
 801c4b2:	61bb      	str	r3, [r7, #24]
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;
 801c4b4:	1d3b      	adds	r3, r7, #4
 801c4b6:	617b      	str	r3, [r7, #20]

    *act_node_p = *next_node_p;
 801c4b8:	697b      	ldr	r3, [r7, #20]
 801c4ba:	681a      	ldr	r2, [r3, #0]
 801c4bc:	69bb      	ldr	r3, [r7, #24]
 801c4be:	601a      	str	r2, [r3, #0]
 801c4c0:	e000      	b.n	801c4c4 <node_set_next+0x36>
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 801c4c2:	bf00      	nop
}
 801c4c4:	3724      	adds	r7, #36	; 0x24
 801c4c6:	46bd      	mov	sp, r7
 801c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4cc:	4770      	bx	lr
	...

0801c4d0 <_lv_trigo_sin>:
 * Return with sinus of an angle
 * @param angle
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t _lv_trigo_sin(int16_t angle)
{
 801c4d0:	b480      	push	{r7}
 801c4d2:	b085      	sub	sp, #20
 801c4d4:	af00      	add	r7, sp, #0
 801c4d6:	4603      	mov	r3, r0
 801c4d8:	80fb      	strh	r3, [r7, #6]
    int16_t ret = 0;
 801c4da:	2300      	movs	r3, #0
 801c4dc:	81fb      	strh	r3, [r7, #14]
    angle       = angle % 360;
 801c4de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c4e2:	4a31      	ldr	r2, [pc, #196]	; (801c5a8 <_lv_trigo_sin+0xd8>)
 801c4e4:	fb82 1203 	smull	r1, r2, r2, r3
 801c4e8:	441a      	add	r2, r3
 801c4ea:	1211      	asrs	r1, r2, #8
 801c4ec:	17da      	asrs	r2, r3, #31
 801c4ee:	1a8a      	subs	r2, r1, r2
 801c4f0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 801c4f4:	fb01 f202 	mul.w	r2, r1, r2
 801c4f8:	1a9b      	subs	r3, r3, r2
 801c4fa:	80fb      	strh	r3, [r7, #6]

    if(angle < 0) angle = 360 + angle;
 801c4fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c500:	2b00      	cmp	r3, #0
 801c502:	da04      	bge.n	801c50e <_lv_trigo_sin+0x3e>
 801c504:	88fb      	ldrh	r3, [r7, #6]
 801c506:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801c50a:	b29b      	uxth	r3, r3
 801c50c:	80fb      	strh	r3, [r7, #6]

    if(angle < 90) {
 801c50e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c512:	2b59      	cmp	r3, #89	; 0x59
 801c514:	dc06      	bgt.n	801c524 <_lv_trigo_sin+0x54>
        ret = sin0_90_table[angle];
 801c516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c51a:	4a24      	ldr	r2, [pc, #144]	; (801c5ac <_lv_trigo_sin+0xdc>)
 801c51c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c520:	81fb      	strh	r3, [r7, #14]
 801c522:	e038      	b.n	801c596 <_lv_trigo_sin+0xc6>
    }
    else if(angle >= 90 && angle < 180) {
 801c524:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c528:	2b59      	cmp	r3, #89	; 0x59
 801c52a:	dd0f      	ble.n	801c54c <_lv_trigo_sin+0x7c>
 801c52c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c530:	2bb3      	cmp	r3, #179	; 0xb3
 801c532:	dc0b      	bgt.n	801c54c <_lv_trigo_sin+0x7c>
        angle = 180 - angle;
 801c534:	88fb      	ldrh	r3, [r7, #6]
 801c536:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 801c53a:	b29b      	uxth	r3, r3
 801c53c:	80fb      	strh	r3, [r7, #6]
        ret   = sin0_90_table[angle];
 801c53e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c542:	4a1a      	ldr	r2, [pc, #104]	; (801c5ac <_lv_trigo_sin+0xdc>)
 801c544:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c548:	81fb      	strh	r3, [r7, #14]
 801c54a:	e024      	b.n	801c596 <_lv_trigo_sin+0xc6>
    }
    else if(angle >= 180 && angle < 270) {
 801c54c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c550:	2bb3      	cmp	r3, #179	; 0xb3
 801c552:	dd12      	ble.n	801c57a <_lv_trigo_sin+0xaa>
 801c554:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c558:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801c55c:	da0d      	bge.n	801c57a <_lv_trigo_sin+0xaa>
        angle = angle - 180;
 801c55e:	88fb      	ldrh	r3, [r7, #6]
 801c560:	3bb4      	subs	r3, #180	; 0xb4
 801c562:	b29b      	uxth	r3, r3
 801c564:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 801c566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c56a:	4a10      	ldr	r2, [pc, #64]	; (801c5ac <_lv_trigo_sin+0xdc>)
 801c56c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801c570:	b29b      	uxth	r3, r3
 801c572:	425b      	negs	r3, r3
 801c574:	b29b      	uxth	r3, r3
 801c576:	81fb      	strh	r3, [r7, #14]
 801c578:	e00d      	b.n	801c596 <_lv_trigo_sin+0xc6>
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
 801c57a:	88fb      	ldrh	r3, [r7, #6]
 801c57c:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 801c580:	b29b      	uxth	r3, r3
 801c582:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 801c584:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c588:	4a08      	ldr	r2, [pc, #32]	; (801c5ac <_lv_trigo_sin+0xdc>)
 801c58a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801c58e:	b29b      	uxth	r3, r3
 801c590:	425b      	negs	r3, r3
 801c592:	b29b      	uxth	r3, r3
 801c594:	81fb      	strh	r3, [r7, #14]
    }

    return ret;
 801c596:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 801c59a:	4618      	mov	r0, r3
 801c59c:	3714      	adds	r7, #20
 801c59e:	46bd      	mov	sp, r7
 801c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5a4:	4770      	bx	lr
 801c5a6:	bf00      	nop
 801c5a8:	b60b60b7 	.word	0xb60b60b7
 801c5ac:	08030f00 	.word	0x08030f00

0801c5b0 <_lv_sqrt>:
 * If root < 16: mask = 0x80
 * If root < 256: mask = 0x800
 * Else: mask = 0x8000
 */
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
 801c5b0:	b480      	push	{r7}
 801c5b2:	b087      	sub	sp, #28
 801c5b4:	af00      	add	r7, sp, #0
 801c5b6:	60f8      	str	r0, [r7, #12]
 801c5b8:	60b9      	str	r1, [r7, #8]
 801c5ba:	607a      	str	r2, [r7, #4]
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
 801c5bc:	68fb      	ldr	r3, [r7, #12]
 801c5be:	021b      	lsls	r3, r3, #8
 801c5c0:	60fb      	str	r3, [r7, #12]

    uint32_t root = 0;
 801c5c2:	2300      	movs	r3, #0
 801c5c4:	617b      	str	r3, [r7, #20]
    uint32_t trial;
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
 801c5c6:	697a      	ldr	r2, [r7, #20]
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	4413      	add	r3, r2
 801c5cc:	613b      	str	r3, [r7, #16]
        if(trial * trial <= x) root = trial;
 801c5ce:	693b      	ldr	r3, [r7, #16]
 801c5d0:	693a      	ldr	r2, [r7, #16]
 801c5d2:	fb02 f303 	mul.w	r3, r2, r3
 801c5d6:	68fa      	ldr	r2, [r7, #12]
 801c5d8:	429a      	cmp	r2, r3
 801c5da:	d301      	bcc.n	801c5e0 <_lv_sqrt+0x30>
 801c5dc:	693b      	ldr	r3, [r7, #16]
 801c5de:	617b      	str	r3, [r7, #20]
        mask = mask >> 1;
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	085b      	lsrs	r3, r3, #1
 801c5e4:	607b      	str	r3, [r7, #4]
    } while(mask);
 801c5e6:	687b      	ldr	r3, [r7, #4]
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	d1ec      	bne.n	801c5c6 <_lv_sqrt+0x16>

    q->i = root >> 4;
 801c5ec:	697b      	ldr	r3, [r7, #20]
 801c5ee:	091b      	lsrs	r3, r3, #4
 801c5f0:	b29a      	uxth	r2, r3
 801c5f2:	68bb      	ldr	r3, [r7, #8]
 801c5f4:	801a      	strh	r2, [r3, #0]
    q->f = (root & 0xf) << 4;
 801c5f6:	697b      	ldr	r3, [r7, #20]
 801c5f8:	b29b      	uxth	r3, r3
 801c5fa:	011b      	lsls	r3, r3, #4
 801c5fc:	b29b      	uxth	r3, r3
 801c5fe:	b2db      	uxtb	r3, r3
 801c600:	b29a      	uxth	r2, r3
 801c602:	68bb      	ldr	r3, [r7, #8]
 801c604:	805a      	strh	r2, [r3, #2]
}
 801c606:	bf00      	nop
 801c608:	371c      	adds	r7, #28
 801c60a:	46bd      	mov	sp, r7
 801c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c610:	4770      	bx	lr
	...

0801c614 <_lv_mem_init>:

/**
 * Initialize the dyn_mem module (work memory and other variables)
 */
void _lv_mem_init(void)
{
 801c614:	b480      	push	{r7}
 801c616:	b083      	sub	sp, #12
 801c618:	af00      	add	r7, sp, #0
#if LV_MEM_CUSTOM == 0

#if LV_MEM_ADR == 0
    /*Allocate a large array to store the dynamically allocated data*/
    static LV_MEM_ATTR MEM_UNIT work_mem_int[LV_MEM_SIZE / sizeof(MEM_UNIT)];
    work_mem = (uint8_t *)work_mem_int;
 801c61a:	4b0c      	ldr	r3, [pc, #48]	; (801c64c <_lv_mem_init+0x38>)
 801c61c:	4a0c      	ldr	r2, [pc, #48]	; (801c650 <_lv_mem_init+0x3c>)
 801c61e:	601a      	str	r2, [r3, #0]
#else
    work_mem = (uint8_t *)LV_MEM_ADR;
#endif

    lv_mem_ent_t * full = (lv_mem_ent_t *)work_mem;
 801c620:	4b0a      	ldr	r3, [pc, #40]	; (801c64c <_lv_mem_init+0x38>)
 801c622:	681b      	ldr	r3, [r3, #0]
 801c624:	607b      	str	r3, [r7, #4]
    full->header.s.used = 0;
 801c626:	687a      	ldr	r2, [r7, #4]
 801c628:	7813      	ldrb	r3, [r2, #0]
 801c62a:	f36f 0300 	bfc	r3, #0, #1
 801c62e:	7013      	strb	r3, [r2, #0]
    /*The total mem size reduced by the first header and the close patterns */
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
 801c630:	687a      	ldr	r2, [r7, #4]
 801c632:	6813      	ldr	r3, [r2, #0]
 801c634:	f647 71fc 	movw	r1, #32764	; 0x7ffc
 801c638:	f361 035f 	bfi	r3, r1, #1, #31
 801c63c:	6013      	str	r3, [r2, #0]
#endif
}
 801c63e:	bf00      	nop
 801c640:	370c      	adds	r7, #12
 801c642:	46bd      	mov	sp, r7
 801c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c648:	4770      	bx	lr
 801c64a:	bf00      	nop
 801c64c:	2001942c 	.word	0x2001942c
 801c650:	20019458 	.word	0x20019458

0801c654 <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
 801c654:	b580      	push	{r7, lr}
 801c656:	b084      	sub	sp, #16
 801c658:	af00      	add	r7, sp, #0
 801c65a:	6078      	str	r0, [r7, #4]
    if(size == 0) {
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	2b00      	cmp	r3, #0
 801c660:	d101      	bne.n	801c666 <lv_mem_alloc+0x12>
        return &zero_mem;
 801c662:	4b1e      	ldr	r3, [pc, #120]	; (801c6dc <lv_mem_alloc+0x88>)
 801c664:	e035      	b.n	801c6d2 <lv_mem_alloc+0x7e>
    }

    /*Round the size up to ALIGN_MASK*/
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	3303      	adds	r3, #3
 801c66a:	f023 0303 	bic.w	r3, r3, #3
 801c66e:	607b      	str	r3, [r7, #4]
    void * alloc = NULL;
 801c670:	2300      	movs	r3, #0
 801c672:	60fb      	str	r3, [r7, #12]

#if LV_MEM_CUSTOM == 0
    /*Use the built-in allocators*/
    lv_mem_ent_t * e = NULL;
 801c674:	2300      	movs	r3, #0
 801c676:	60bb      	str	r3, [r7, #8]

    /* Search for a appropriate entry*/
    do {
        /* Get the next entry*/
        e = ent_get_next(e);
 801c678:	68b8      	ldr	r0, [r7, #8]
 801c67a:	f000 fe5f 	bl	801d33c <ent_get_next>
 801c67e:	60b8      	str	r0, [r7, #8]

        /*If there is next entry then try to allocate there*/
        if(e != NULL) {
 801c680:	68bb      	ldr	r3, [r7, #8]
 801c682:	2b00      	cmp	r3, #0
 801c684:	d004      	beq.n	801c690 <lv_mem_alloc+0x3c>
            alloc = ent_alloc(e, size);
 801c686:	6879      	ldr	r1, [r7, #4]
 801c688:	68b8      	ldr	r0, [r7, #8]
 801c68a:	f000 fe83 	bl	801d394 <ent_alloc>
 801c68e:	60f8      	str	r0, [r7, #12]
        }
        /* End if there is not next entry OR the alloc. is successful*/
    } while(e != NULL && alloc == NULL);
 801c690:	68bb      	ldr	r3, [r7, #8]
 801c692:	2b00      	cmp	r3, #0
 801c694:	d002      	beq.n	801c69c <lv_mem_alloc+0x48>
 801c696:	68fb      	ldr	r3, [r7, #12]
 801c698:	2b00      	cmp	r3, #0
 801c69a:	d0ed      	beq.n	801c678 <lv_mem_alloc+0x24>

#if LV_MEM_ADD_JUNK
    if(alloc != NULL) _lv_memset(alloc, 0xaa, size);
#endif

    if(alloc == NULL) {
 801c69c:	68fb      	ldr	r3, [r7, #12]
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	d016      	beq.n	801c6d0 <lv_mem_alloc+0x7c>
        LV_LOG_WARN("Couldn't allocate memory");
    }
    else {
#if LV_MEM_CUSTOM == 0
        /* just a safety check, should always be true */
        if((uintptr_t) alloc > (uintptr_t) work_mem) {
 801c6a2:	68fb      	ldr	r3, [r7, #12]
 801c6a4:	4a0e      	ldr	r2, [pc, #56]	; (801c6e0 <lv_mem_alloc+0x8c>)
 801c6a6:	6812      	ldr	r2, [r2, #0]
 801c6a8:	4293      	cmp	r3, r2
 801c6aa:	d911      	bls.n	801c6d0 <lv_mem_alloc+0x7c>
            if((((uintptr_t) alloc - (uintptr_t) work_mem) + size) > mem_max_size) {
 801c6ac:	68fb      	ldr	r3, [r7, #12]
 801c6ae:	4a0c      	ldr	r2, [pc, #48]	; (801c6e0 <lv_mem_alloc+0x8c>)
 801c6b0:	6812      	ldr	r2, [r2, #0]
 801c6b2:	1a9a      	subs	r2, r3, r2
 801c6b4:	687b      	ldr	r3, [r7, #4]
 801c6b6:	441a      	add	r2, r3
 801c6b8:	4b0a      	ldr	r3, [pc, #40]	; (801c6e4 <lv_mem_alloc+0x90>)
 801c6ba:	681b      	ldr	r3, [r3, #0]
 801c6bc:	429a      	cmp	r2, r3
 801c6be:	d907      	bls.n	801c6d0 <lv_mem_alloc+0x7c>
                mem_max_size = ((uintptr_t) alloc - (uintptr_t) work_mem) + size;
 801c6c0:	68fb      	ldr	r3, [r7, #12]
 801c6c2:	4a07      	ldr	r2, [pc, #28]	; (801c6e0 <lv_mem_alloc+0x8c>)
 801c6c4:	6812      	ldr	r2, [r2, #0]
 801c6c6:	1a9a      	subs	r2, r3, r2
 801c6c8:	687b      	ldr	r3, [r7, #4]
 801c6ca:	4413      	add	r3, r2
 801c6cc:	4a05      	ldr	r2, [pc, #20]	; (801c6e4 <lv_mem_alloc+0x90>)
 801c6ce:	6013      	str	r3, [r2, #0]
            }
        }
#endif
    }

    return alloc;
 801c6d0:	68fb      	ldr	r3, [r7, #12]
}
 801c6d2:	4618      	mov	r0, r3
 801c6d4:	3710      	adds	r7, #16
 801c6d6:	46bd      	mov	sp, r7
 801c6d8:	bd80      	pop	{r7, pc}
 801c6da:	bf00      	nop
 801c6dc:	20019430 	.word	0x20019430
 801c6e0:	2001942c 	.word	0x2001942c
 801c6e4:	20019434 	.word	0x20019434

0801c6e8 <lv_mem_free>:
/**
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(const void * data)
{
 801c6e8:	b580      	push	{r7, lr}
 801c6ea:	b084      	sub	sp, #16
 801c6ec:	af00      	add	r7, sp, #0
 801c6ee:	6078      	str	r0, [r7, #4]
    if(data == &zero_mem) return;
 801c6f0:	687b      	ldr	r3, [r7, #4]
 801c6f2:	4a26      	ldr	r2, [pc, #152]	; (801c78c <lv_mem_free+0xa4>)
 801c6f4:	4293      	cmp	r3, r2
 801c6f6:	d040      	beq.n	801c77a <lv_mem_free+0x92>
    if(data == NULL) return;
 801c6f8:	687b      	ldr	r3, [r7, #4]
 801c6fa:	2b00      	cmp	r3, #0
 801c6fc:	d03f      	beq.n	801c77e <lv_mem_free+0x96>
    _lv_memset((void *)data, 0xbb, _lv_mem_get_size(data));
#endif

#if LV_ENABLE_GC == 0
    /*e points to the header*/
    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	3b04      	subs	r3, #4
 801c702:	60bb      	str	r3, [r7, #8]
    e->header.s.used = 0;
 801c704:	68ba      	ldr	r2, [r7, #8]
 801c706:	7813      	ldrb	r3, [r2, #0]
 801c708:	f36f 0300 	bfc	r3, #0, #1
 801c70c:	7013      	strb	r3, [r2, #0]
#endif

#if LV_MEM_CUSTOM == 0
#if LV_MEM_AUTO_DEFRAG
    static uint16_t full_defrag_cnt = 0;
    full_defrag_cnt++;
 801c70e:	4b20      	ldr	r3, [pc, #128]	; (801c790 <lv_mem_free+0xa8>)
 801c710:	881b      	ldrh	r3, [r3, #0]
 801c712:	3301      	adds	r3, #1
 801c714:	b29a      	uxth	r2, r3
 801c716:	4b1e      	ldr	r3, [pc, #120]	; (801c790 <lv_mem_free+0xa8>)
 801c718:	801a      	strh	r2, [r3, #0]
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
 801c71a:	4b1d      	ldr	r3, [pc, #116]	; (801c790 <lv_mem_free+0xa8>)
 801c71c:	881b      	ldrh	r3, [r3, #0]
 801c71e:	2b0f      	cmp	r3, #15
 801c720:	d825      	bhi.n	801c76e <lv_mem_free+0x86>
        /* Make a simple defrag.
         * Join the following free entries after this*/
        lv_mem_ent_t * e_next;
        e_next = ent_get_next(e);
 801c722:	68b8      	ldr	r0, [r7, #8]
 801c724:	f000 fe0a 	bl	801d33c <ent_get_next>
 801c728:	60f8      	str	r0, [r7, #12]
        while(e_next != NULL) {
 801c72a:	e01c      	b.n	801c766 <lv_mem_free+0x7e>
            if(e_next->header.s.used == 0) {
 801c72c:	68fb      	ldr	r3, [r7, #12]
 801c72e:	781b      	ldrb	r3, [r3, #0]
 801c730:	f003 0301 	and.w	r3, r3, #1
 801c734:	b2db      	uxtb	r3, r3
 801c736:	2b00      	cmp	r3, #0
 801c738:	d123      	bne.n	801c782 <lv_mem_free+0x9a>
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 801c73a:	68bb      	ldr	r3, [r7, #8]
 801c73c:	681b      	ldr	r3, [r3, #0]
 801c73e:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801c742:	461a      	mov	r2, r3
 801c744:	68fb      	ldr	r3, [r7, #12]
 801c746:	681b      	ldr	r3, [r3, #0]
 801c748:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801c74c:	4413      	add	r3, r2
 801c74e:	3304      	adds	r3, #4
 801c750:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801c754:	68ba      	ldr	r2, [r7, #8]
 801c756:	6813      	ldr	r3, [r2, #0]
 801c758:	f361 035f 	bfi	r3, r1, #1, #31
 801c75c:	6013      	str	r3, [r2, #0]
            }
            else {
                break;
            }
            e_next = ent_get_next(e_next);
 801c75e:	68f8      	ldr	r0, [r7, #12]
 801c760:	f000 fdec 	bl	801d33c <ent_get_next>
 801c764:	60f8      	str	r0, [r7, #12]
        while(e_next != NULL) {
 801c766:	68fb      	ldr	r3, [r7, #12]
 801c768:	2b00      	cmp	r3, #0
 801c76a:	d1df      	bne.n	801c72c <lv_mem_free+0x44>
 801c76c:	e00a      	b.n	801c784 <lv_mem_free+0x9c>
        }
    }
    else {
        full_defrag_cnt = 0;
 801c76e:	4b08      	ldr	r3, [pc, #32]	; (801c790 <lv_mem_free+0xa8>)
 801c770:	2200      	movs	r2, #0
 801c772:	801a      	strh	r2, [r3, #0]
        lv_mem_defrag();
 801c774:	f000 f863 	bl	801c83e <lv_mem_defrag>
 801c778:	e004      	b.n	801c784 <lv_mem_free+0x9c>
    if(data == &zero_mem) return;
 801c77a:	bf00      	nop
 801c77c:	e002      	b.n	801c784 <lv_mem_free+0x9c>
    if(data == NULL) return;
 801c77e:	bf00      	nop
 801c780:	e000      	b.n	801c784 <lv_mem_free+0x9c>
                break;
 801c782:	bf00      	nop
    LV_MEM_CUSTOM_FREE(e);
#else
    LV_MEM_CUSTOM_FREE((void *)data);
#endif /*LV_ENABLE_GC*/
#endif
}
 801c784:	3710      	adds	r7, #16
 801c786:	46bd      	mov	sp, r7
 801c788:	bd80      	pop	{r7, pc}
 801c78a:	bf00      	nop
 801c78c:	20019430 	.word	0x20019430
 801c790:	20021458 	.word	0x20021458

0801c794 <lv_mem_realloc>:
 */

#if LV_ENABLE_GC == 0

void * lv_mem_realloc(void * data_p, size_t new_size)
{
 801c794:	b580      	push	{r7, lr}
 801c796:	b086      	sub	sp, #24
 801c798:	af00      	add	r7, sp, #0
 801c79a:	6078      	str	r0, [r7, #4]
 801c79c:	6039      	str	r1, [r7, #0]
    /*Round the size up to ALIGN_MASK*/
    new_size = (new_size + ALIGN_MASK) & (~ALIGN_MASK);
 801c79e:	683b      	ldr	r3, [r7, #0]
 801c7a0:	3303      	adds	r3, #3
 801c7a2:	f023 0303 	bic.w	r3, r3, #3
 801c7a6:	603b      	str	r3, [r7, #0]

    /*data_p could be previously freed pointer (in this case it is invalid)*/
    if(data_p != NULL) {
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	2b00      	cmp	r3, #0
 801c7ac:	d00b      	beq.n	801c7c6 <lv_mem_realloc+0x32>
        lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data_p - sizeof(lv_mem_header_t));
 801c7ae:	687b      	ldr	r3, [r7, #4]
 801c7b0:	3b04      	subs	r3, #4
 801c7b2:	617b      	str	r3, [r7, #20]
        if(e->header.s.used == 0) {
 801c7b4:	697b      	ldr	r3, [r7, #20]
 801c7b6:	781b      	ldrb	r3, [r3, #0]
 801c7b8:	f003 0301 	and.w	r3, r3, #1
 801c7bc:	b2db      	uxtb	r3, r3
 801c7be:	2b00      	cmp	r3, #0
 801c7c0:	d101      	bne.n	801c7c6 <lv_mem_realloc+0x32>
            data_p = NULL;
 801c7c2:	2300      	movs	r3, #0
 801c7c4:	607b      	str	r3, [r7, #4]
        }
    }

    uint32_t old_size = _lv_mem_get_size(data_p);
 801c7c6:	6878      	ldr	r0, [r7, #4]
 801c7c8:	f000 f888 	bl	801c8dc <_lv_mem_get_size>
 801c7cc:	6138      	str	r0, [r7, #16]
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 801c7ce:	693a      	ldr	r2, [r7, #16]
 801c7d0:	683b      	ldr	r3, [r7, #0]
 801c7d2:	429a      	cmp	r2, r3
 801c7d4:	d101      	bne.n	801c7da <lv_mem_realloc+0x46>
 801c7d6:	687b      	ldr	r3, [r7, #4]
 801c7d8:	e02d      	b.n	801c836 <lv_mem_realloc+0xa2>

#if LV_MEM_CUSTOM == 0
    /* Truncate the memory if the new size is smaller. */
    if(new_size < old_size) {
 801c7da:	683a      	ldr	r2, [r7, #0]
 801c7dc:	693b      	ldr	r3, [r7, #16]
 801c7de:	429a      	cmp	r2, r3
 801c7e0:	d209      	bcs.n	801c7f6 <lv_mem_realloc+0x62>
        lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data_p - sizeof(lv_mem_header_t));
 801c7e2:	687b      	ldr	r3, [r7, #4]
 801c7e4:	3b04      	subs	r3, #4
 801c7e6:	60bb      	str	r3, [r7, #8]
        ent_trunc(e, new_size);
 801c7e8:	6839      	ldr	r1, [r7, #0]
 801c7ea:	68b8      	ldr	r0, [r7, #8]
 801c7ec:	f000 fdf9 	bl	801d3e2 <ent_trunc>
        return &e->first_data;
 801c7f0:	68bb      	ldr	r3, [r7, #8]
 801c7f2:	3304      	adds	r3, #4
 801c7f4:	e01f      	b.n	801c836 <lv_mem_realloc+0xa2>
    }
#endif

    void * new_p;
    new_p = lv_mem_alloc(new_size);
 801c7f6:	6838      	ldr	r0, [r7, #0]
 801c7f8:	f7ff ff2c 	bl	801c654 <lv_mem_alloc>
 801c7fc:	60f8      	str	r0, [r7, #12]
    if(new_p == NULL) {
 801c7fe:	68fb      	ldr	r3, [r7, #12]
 801c800:	2b00      	cmp	r3, #0
 801c802:	d101      	bne.n	801c808 <lv_mem_realloc+0x74>
        LV_LOG_WARN("Couldn't allocate memory");
        return NULL;
 801c804:	2300      	movs	r3, #0
 801c806:	e016      	b.n	801c836 <lv_mem_realloc+0xa2>
    }

    if(data_p != NULL) {
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	d012      	beq.n	801c834 <lv_mem_realloc+0xa0>
        /*Copy the old data to the new. Use the smaller size*/
        if(old_size != 0 && new_size != 0) {
 801c80e:	693b      	ldr	r3, [r7, #16]
 801c810:	2b00      	cmp	r3, #0
 801c812:	d00c      	beq.n	801c82e <lv_mem_realloc+0x9a>
 801c814:	683b      	ldr	r3, [r7, #0]
 801c816:	2b00      	cmp	r3, #0
 801c818:	d009      	beq.n	801c82e <lv_mem_realloc+0x9a>
            _lv_memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 801c81a:	693a      	ldr	r2, [r7, #16]
 801c81c:	683b      	ldr	r3, [r7, #0]
 801c81e:	4293      	cmp	r3, r2
 801c820:	bf28      	it	cs
 801c822:	4613      	movcs	r3, r2
 801c824:	461a      	mov	r2, r3
 801c826:	6879      	ldr	r1, [r7, #4]
 801c828:	68f8      	ldr	r0, [r7, #12]
 801c82a:	f000 f9d9 	bl	801cbe0 <_lv_memcpy>
        }
        lv_mem_free(data_p);
 801c82e:	6878      	ldr	r0, [r7, #4]
 801c830:	f7ff ff5a 	bl	801c6e8 <lv_mem_free>
    }

    return new_p;
 801c834:	68fb      	ldr	r3, [r7, #12]
}
 801c836:	4618      	mov	r0, r3
 801c838:	3718      	adds	r7, #24
 801c83a:	46bd      	mov	sp, r7
 801c83c:	bd80      	pop	{r7, pc}

0801c83e <lv_mem_defrag>:

/**
 * Join the adjacent free memory blocks
 */
void lv_mem_defrag(void)
{
 801c83e:	b580      	push	{r7, lr}
 801c840:	b082      	sub	sp, #8
 801c842:	af00      	add	r7, sp, #0
#if LV_MEM_CUSTOM == 0
    lv_mem_ent_t * e_free;
    lv_mem_ent_t * e_next;
    e_free = ent_get_next(NULL);
 801c844:	2000      	movs	r0, #0
 801c846:	f000 fd79 	bl	801d33c <ent_get_next>
 801c84a:	6078      	str	r0, [r7, #4]

    while(1) {
        /*Search the next free entry*/
        while(e_free != NULL) {
 801c84c:	e00a      	b.n	801c864 <lv_mem_defrag+0x26>
            if(e_free->header.s.used != 0) {
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	781b      	ldrb	r3, [r3, #0]
 801c852:	f003 0301 	and.w	r3, r3, #1
 801c856:	b2db      	uxtb	r3, r3
 801c858:	2b00      	cmp	r3, #0
 801c85a:	d007      	beq.n	801c86c <lv_mem_defrag+0x2e>
                e_free = ent_get_next(e_free);
 801c85c:	6878      	ldr	r0, [r7, #4]
 801c85e:	f000 fd6d 	bl	801d33c <ent_get_next>
 801c862:	6078      	str	r0, [r7, #4]
        while(e_free != NULL) {
 801c864:	687b      	ldr	r3, [r7, #4]
 801c866:	2b00      	cmp	r3, #0
 801c868:	d1f1      	bne.n	801c84e <lv_mem_defrag+0x10>
 801c86a:	e000      	b.n	801c86e <lv_mem_defrag+0x30>
            }
            else {
                break;
 801c86c:	bf00      	nop
            }
        }

        if(e_free == NULL) return;
 801c86e:	687b      	ldr	r3, [r7, #4]
 801c870:	2b00      	cmp	r3, #0
 801c872:	d02c      	beq.n	801c8ce <lv_mem_defrag+0x90>

        /*Joint the following free entries to the free*/
        e_next = ent_get_next(e_free);
 801c874:	6878      	ldr	r0, [r7, #4]
 801c876:	f000 fd61 	bl	801d33c <ent_get_next>
 801c87a:	6038      	str	r0, [r7, #0]
        while(e_next != NULL) {
 801c87c:	e01c      	b.n	801c8b8 <lv_mem_defrag+0x7a>
            if(e_next->header.s.used == 0) {
 801c87e:	683b      	ldr	r3, [r7, #0]
 801c880:	781b      	ldrb	r3, [r3, #0]
 801c882:	f003 0301 	and.w	r3, r3, #1
 801c886:	b2db      	uxtb	r3, r3
 801c888:	2b00      	cmp	r3, #0
 801c88a:	d119      	bne.n	801c8c0 <lv_mem_defrag+0x82>
                e_free->header.s.d_size += e_next->header.s.d_size + sizeof(e_next->header);
 801c88c:	687b      	ldr	r3, [r7, #4]
 801c88e:	681b      	ldr	r3, [r3, #0]
 801c890:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801c894:	461a      	mov	r2, r3
 801c896:	683b      	ldr	r3, [r7, #0]
 801c898:	681b      	ldr	r3, [r3, #0]
 801c89a:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801c89e:	4413      	add	r3, r2
 801c8a0:	3304      	adds	r3, #4
 801c8a2:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801c8a6:	687a      	ldr	r2, [r7, #4]
 801c8a8:	6813      	ldr	r3, [r2, #0]
 801c8aa:	f361 035f 	bfi	r3, r1, #1, #31
 801c8ae:	6013      	str	r3, [r2, #0]
            }
            else {
                break;
            }

            e_next = ent_get_next(e_next);
 801c8b0:	6838      	ldr	r0, [r7, #0]
 801c8b2:	f000 fd43 	bl	801d33c <ent_get_next>
 801c8b6:	6038      	str	r0, [r7, #0]
        while(e_next != NULL) {
 801c8b8:	683b      	ldr	r3, [r7, #0]
 801c8ba:	2b00      	cmp	r3, #0
 801c8bc:	d1df      	bne.n	801c87e <lv_mem_defrag+0x40>
 801c8be:	e000      	b.n	801c8c2 <lv_mem_defrag+0x84>
                break;
 801c8c0:	bf00      	nop
        }

        if(e_next == NULL) return;
 801c8c2:	683b      	ldr	r3, [r7, #0]
 801c8c4:	2b00      	cmp	r3, #0
 801c8c6:	d004      	beq.n	801c8d2 <lv_mem_defrag+0x94>

        /*Continue from the lastly checked entry*/
        e_free = e_next;
 801c8c8:	683b      	ldr	r3, [r7, #0]
 801c8ca:	607b      	str	r3, [r7, #4]
        while(e_free != NULL) {
 801c8cc:	e7ca      	b.n	801c864 <lv_mem_defrag+0x26>
        if(e_free == NULL) return;
 801c8ce:	bf00      	nop
 801c8d0:	e000      	b.n	801c8d4 <lv_mem_defrag+0x96>
        if(e_next == NULL) return;
 801c8d2:	bf00      	nop
    }
#endif
}
 801c8d4:	3708      	adds	r7, #8
 801c8d6:	46bd      	mov	sp, r7
 801c8d8:	bd80      	pop	{r7, pc}
	...

0801c8dc <_lv_mem_get_size>:
 */

#if LV_ENABLE_GC == 0

uint32_t _lv_mem_get_size(const void * data)
{
 801c8dc:	b480      	push	{r7}
 801c8de:	b085      	sub	sp, #20
 801c8e0:	af00      	add	r7, sp, #0
 801c8e2:	6078      	str	r0, [r7, #4]
    if(data == NULL) return 0;
 801c8e4:	687b      	ldr	r3, [r7, #4]
 801c8e6:	2b00      	cmp	r3, #0
 801c8e8:	d101      	bne.n	801c8ee <_lv_mem_get_size+0x12>
 801c8ea:	2300      	movs	r3, #0
 801c8ec:	e00c      	b.n	801c908 <_lv_mem_get_size+0x2c>
    if(data == &zero_mem) return 0;
 801c8ee:	687b      	ldr	r3, [r7, #4]
 801c8f0:	4a08      	ldr	r2, [pc, #32]	; (801c914 <_lv_mem_get_size+0x38>)
 801c8f2:	4293      	cmp	r3, r2
 801c8f4:	d101      	bne.n	801c8fa <_lv_mem_get_size+0x1e>
 801c8f6:	2300      	movs	r3, #0
 801c8f8:	e006      	b.n	801c908 <_lv_mem_get_size+0x2c>

    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
 801c8fa:	687b      	ldr	r3, [r7, #4]
 801c8fc:	3b04      	subs	r3, #4
 801c8fe:	60fb      	str	r3, [r7, #12]

    return e->header.s.d_size;
 801c900:	68fb      	ldr	r3, [r7, #12]
 801c902:	681b      	ldr	r3, [r3, #0]
 801c904:	f3c3 035e 	ubfx	r3, r3, #1, #31
}
 801c908:	4618      	mov	r0, r3
 801c90a:	3714      	adds	r7, #20
 801c90c:	46bd      	mov	sp, r7
 801c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c912:	4770      	bx	lr
 801c914:	20019430 	.word	0x20019430

0801c918 <_lv_mem_buf_get>:
/**
 * Get a temporal buffer with the given size.
 * @param size the required size
 */
void * _lv_mem_buf_get(uint32_t size)
{
 801c918:	b580      	push	{r7, lr}
 801c91a:	b084      	sub	sp, #16
 801c91c:	af00      	add	r7, sp, #0
 801c91e:	6078      	str	r0, [r7, #4]
    if(size == 0) return NULL;
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	2b00      	cmp	r3, #0
 801c924:	d101      	bne.n	801c92a <_lv_mem_buf_get+0x12>
 801c926:	2300      	movs	r3, #0
 801c928:	e0c8      	b.n	801cabc <_lv_mem_buf_get+0x1a4>

    /*Try small static buffers first*/
    uint8_t i;
    if(size <= MEM_BUF_SMALL_SIZE) {
 801c92a:	687b      	ldr	r3, [r7, #4]
 801c92c:	2b10      	cmp	r3, #16
 801c92e:	d81f      	bhi.n	801c970 <_lv_mem_buf_get+0x58>
        for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
 801c930:	2300      	movs	r3, #0
 801c932:	73fb      	strb	r3, [r7, #15]
 801c934:	e019      	b.n	801c96a <_lv_mem_buf_get+0x52>
            if(mem_buf_small[i].used == 0) {
 801c936:	7bfb      	ldrb	r3, [r7, #15]
 801c938:	4a62      	ldr	r2, [pc, #392]	; (801cac4 <_lv_mem_buf_get+0x1ac>)
 801c93a:	00db      	lsls	r3, r3, #3
 801c93c:	4413      	add	r3, r2
 801c93e:	799b      	ldrb	r3, [r3, #6]
 801c940:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c944:	b2db      	uxtb	r3, r3
 801c946:	2b00      	cmp	r3, #0
 801c948:	d10c      	bne.n	801c964 <_lv_mem_buf_get+0x4c>
                mem_buf_small[i].used = 1;
 801c94a:	7bfb      	ldrb	r3, [r7, #15]
 801c94c:	4a5d      	ldr	r2, [pc, #372]	; (801cac4 <_lv_mem_buf_get+0x1ac>)
 801c94e:	00db      	lsls	r3, r3, #3
 801c950:	4413      	add	r3, r2
 801c952:	799a      	ldrb	r2, [r3, #6]
 801c954:	f042 0201 	orr.w	r2, r2, #1
 801c958:	719a      	strb	r2, [r3, #6]
                return mem_buf_small[i].p;
 801c95a:	7bfb      	ldrb	r3, [r7, #15]
 801c95c:	4a59      	ldr	r2, [pc, #356]	; (801cac4 <_lv_mem_buf_get+0x1ac>)
 801c95e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801c962:	e0ab      	b.n	801cabc <_lv_mem_buf_get+0x1a4>
        for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
 801c964:	7bfb      	ldrb	r3, [r7, #15]
 801c966:	3301      	adds	r3, #1
 801c968:	73fb      	strb	r3, [r7, #15]
 801c96a:	7bfb      	ldrb	r3, [r7, #15]
 801c96c:	2b01      	cmp	r3, #1
 801c96e:	d9e2      	bls.n	801c936 <_lv_mem_buf_get+0x1e>
            }
        }
    }

    /*Try to find a free buffer with suitable size */
    int8_t i_guess = -1;
 801c970:	23ff      	movs	r3, #255	; 0xff
 801c972:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801c974:	2300      	movs	r3, #0
 801c976:	73fb      	strb	r3, [r7, #15]
 801c978:	e041      	b.n	801c9fe <_lv_mem_buf_get+0xe6>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
 801c97a:	7bfb      	ldrb	r3, [r7, #15]
 801c97c:	4a52      	ldr	r2, [pc, #328]	; (801cac8 <_lv_mem_buf_get+0x1b0>)
 801c97e:	00db      	lsls	r3, r3, #3
 801c980:	4413      	add	r3, r2
 801c982:	799b      	ldrb	r3, [r3, #6]
 801c984:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c988:	b2db      	uxtb	r3, r3
 801c98a:	2b00      	cmp	r3, #0
 801c98c:	d134      	bne.n	801c9f8 <_lv_mem_buf_get+0xe0>
 801c98e:	7bfb      	ldrb	r3, [r7, #15]
 801c990:	4a4d      	ldr	r2, [pc, #308]	; (801cac8 <_lv_mem_buf_get+0x1b0>)
 801c992:	00db      	lsls	r3, r3, #3
 801c994:	4413      	add	r3, r2
 801c996:	889b      	ldrh	r3, [r3, #4]
 801c998:	461a      	mov	r2, r3
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	4293      	cmp	r3, r2
 801c99e:	d82b      	bhi.n	801c9f8 <_lv_mem_buf_get+0xe0>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
 801c9a0:	7bfb      	ldrb	r3, [r7, #15]
 801c9a2:	4a49      	ldr	r2, [pc, #292]	; (801cac8 <_lv_mem_buf_get+0x1b0>)
 801c9a4:	00db      	lsls	r3, r3, #3
 801c9a6:	4413      	add	r3, r2
 801c9a8:	889b      	ldrh	r3, [r3, #4]
 801c9aa:	461a      	mov	r2, r3
 801c9ac:	687b      	ldr	r3, [r7, #4]
 801c9ae:	4293      	cmp	r3, r2
 801c9b0:	d10c      	bne.n	801c9cc <_lv_mem_buf_get+0xb4>
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
 801c9b2:	7bfb      	ldrb	r3, [r7, #15]
 801c9b4:	4a44      	ldr	r2, [pc, #272]	; (801cac8 <_lv_mem_buf_get+0x1b0>)
 801c9b6:	00db      	lsls	r3, r3, #3
 801c9b8:	4413      	add	r3, r2
 801c9ba:	799a      	ldrb	r2, [r3, #6]
 801c9bc:	f042 0201 	orr.w	r2, r2, #1
 801c9c0:	719a      	strb	r2, [r3, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
 801c9c2:	7bfb      	ldrb	r3, [r7, #15]
 801c9c4:	4a40      	ldr	r2, [pc, #256]	; (801cac8 <_lv_mem_buf_get+0x1b0>)
 801c9c6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801c9ca:	e077      	b.n	801cabc <_lv_mem_buf_get+0x1a4>
            }
            else if(i_guess < 0) {
 801c9cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	da02      	bge.n	801c9da <_lv_mem_buf_get+0xc2>
                i_guess = i;
 801c9d4:	7bfb      	ldrb	r3, [r7, #15]
 801c9d6:	73bb      	strb	r3, [r7, #14]
 801c9d8:	e00e      	b.n	801c9f8 <_lv_mem_buf_get+0xe0>
            }
            /*If size of `i` is closer to `size` prefer it*/
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
 801c9da:	7bfb      	ldrb	r3, [r7, #15]
 801c9dc:	4a3a      	ldr	r2, [pc, #232]	; (801cac8 <_lv_mem_buf_get+0x1b0>)
 801c9de:	00db      	lsls	r3, r3, #3
 801c9e0:	4413      	add	r3, r2
 801c9e2:	889a      	ldrh	r2, [r3, #4]
 801c9e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c9e8:	4937      	ldr	r1, [pc, #220]	; (801cac8 <_lv_mem_buf_get+0x1b0>)
 801c9ea:	00db      	lsls	r3, r3, #3
 801c9ec:	440b      	add	r3, r1
 801c9ee:	889b      	ldrh	r3, [r3, #4]
 801c9f0:	429a      	cmp	r2, r3
 801c9f2:	d201      	bcs.n	801c9f8 <_lv_mem_buf_get+0xe0>
                i_guess = i;
 801c9f4:	7bfb      	ldrb	r3, [r7, #15]
 801c9f6:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801c9f8:	7bfb      	ldrb	r3, [r7, #15]
 801c9fa:	3301      	adds	r3, #1
 801c9fc:	73fb      	strb	r3, [r7, #15]
 801c9fe:	7bfb      	ldrb	r3, [r7, #15]
 801ca00:	2b0f      	cmp	r3, #15
 801ca02:	d9ba      	bls.n	801c97a <_lv_mem_buf_get+0x62>
            }
        }
    }

    if(i_guess >= 0) {
 801ca04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ca08:	2b00      	cmp	r3, #0
 801ca0a:	db0e      	blt.n	801ca2a <_lv_mem_buf_get+0x112>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
 801ca0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ca10:	4a2d      	ldr	r2, [pc, #180]	; (801cac8 <_lv_mem_buf_get+0x1b0>)
 801ca12:	00db      	lsls	r3, r3, #3
 801ca14:	4413      	add	r3, r2
 801ca16:	799a      	ldrb	r2, [r3, #6]
 801ca18:	f042 0201 	orr.w	r2, r2, #1
 801ca1c:	719a      	strb	r2, [r3, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
 801ca1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ca22:	4a29      	ldr	r2, [pc, #164]	; (801cac8 <_lv_mem_buf_get+0x1b0>)
 801ca24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801ca28:	e048      	b.n	801cabc <_lv_mem_buf_get+0x1a4>
    }

    /*Reallocate a free buffer*/
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801ca2a:	2300      	movs	r3, #0
 801ca2c:	73fb      	strb	r3, [r7, #15]
 801ca2e:	e03a      	b.n	801caa6 <_lv_mem_buf_get+0x18e>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
 801ca30:	7bfb      	ldrb	r3, [r7, #15]
 801ca32:	4a25      	ldr	r2, [pc, #148]	; (801cac8 <_lv_mem_buf_get+0x1b0>)
 801ca34:	00db      	lsls	r3, r3, #3
 801ca36:	4413      	add	r3, r2
 801ca38:	799b      	ldrb	r3, [r3, #6]
 801ca3a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801ca3e:	b2db      	uxtb	r3, r3
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	d12d      	bne.n	801caa0 <_lv_mem_buf_get+0x188>
            /*if this fails you probably need to increase your LV_MEM_SIZE/heap size*/
            void * buf = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
 801ca44:	7bfb      	ldrb	r3, [r7, #15]
 801ca46:	4a20      	ldr	r2, [pc, #128]	; (801cac8 <_lv_mem_buf_get+0x1b0>)
 801ca48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801ca4c:	6879      	ldr	r1, [r7, #4]
 801ca4e:	4618      	mov	r0, r3
 801ca50:	f7ff fea0 	bl	801c794 <lv_mem_realloc>
 801ca54:	60b8      	str	r0, [r7, #8]
            if(buf == NULL) {
 801ca56:	68bb      	ldr	r3, [r7, #8]
 801ca58:	2b00      	cmp	r3, #0
 801ca5a:	d107      	bne.n	801ca6c <_lv_mem_buf_get+0x154>
                LV_DEBUG_ASSERT(false, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)", 0x00);
 801ca5c:	f04f 0200 	mov.w	r2, #0
 801ca60:	f04f 0300 	mov.w	r3, #0
 801ca64:	4819      	ldr	r0, [pc, #100]	; (801cacc <_lv_mem_buf_get+0x1b4>)
 801ca66:	f7ff f879 	bl	801bb5c <lv_debug_log_error>
 801ca6a:	e7fe      	b.n	801ca6a <_lv_mem_buf_get+0x152>
                return NULL;
            }
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
 801ca6c:	7bfb      	ldrb	r3, [r7, #15]
 801ca6e:	4a16      	ldr	r2, [pc, #88]	; (801cac8 <_lv_mem_buf_get+0x1b0>)
 801ca70:	00db      	lsls	r3, r3, #3
 801ca72:	4413      	add	r3, r2
 801ca74:	799a      	ldrb	r2, [r3, #6]
 801ca76:	f042 0201 	orr.w	r2, r2, #1
 801ca7a:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
 801ca7c:	7bfb      	ldrb	r3, [r7, #15]
 801ca7e:	687a      	ldr	r2, [r7, #4]
 801ca80:	b291      	uxth	r1, r2
 801ca82:	4a11      	ldr	r2, [pc, #68]	; (801cac8 <_lv_mem_buf_get+0x1b0>)
 801ca84:	00db      	lsls	r3, r3, #3
 801ca86:	4413      	add	r3, r2
 801ca88:	460a      	mov	r2, r1
 801ca8a:	809a      	strh	r2, [r3, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).p    = buf;
 801ca8c:	7bfb      	ldrb	r3, [r7, #15]
 801ca8e:	490e      	ldr	r1, [pc, #56]	; (801cac8 <_lv_mem_buf_get+0x1b0>)
 801ca90:	68ba      	ldr	r2, [r7, #8]
 801ca92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            return LV_GC_ROOT(_lv_mem_buf[i]).p;
 801ca96:	7bfb      	ldrb	r3, [r7, #15]
 801ca98:	4a0b      	ldr	r2, [pc, #44]	; (801cac8 <_lv_mem_buf_get+0x1b0>)
 801ca9a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801ca9e:	e00d      	b.n	801cabc <_lv_mem_buf_get+0x1a4>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801caa0:	7bfb      	ldrb	r3, [r7, #15]
 801caa2:	3301      	adds	r3, #1
 801caa4:	73fb      	strb	r3, [r7, #15]
 801caa6:	7bfb      	ldrb	r3, [r7, #15]
 801caa8:	2b0f      	cmp	r3, #15
 801caaa:	d9c1      	bls.n	801ca30 <_lv_mem_buf_get+0x118>
        }
    }

    LV_DEBUG_ASSERT(false, "No free buffer. Increase LV_MEM_BUF_MAX_NUM.", 0x00);
 801caac:	f04f 0200 	mov.w	r2, #0
 801cab0:	f04f 0300 	mov.w	r3, #0
 801cab4:	4806      	ldr	r0, [pc, #24]	; (801cad0 <_lv_mem_buf_get+0x1b8>)
 801cab6:	f7ff f851 	bl	801bb5c <lv_debug_log_error>
 801caba:	e7fe      	b.n	801caba <_lv_mem_buf_get+0x1a2>
    return NULL;
}
 801cabc:	4618      	mov	r0, r3
 801cabe:	3710      	adds	r7, #16
 801cac0:	46bd      	mov	sp, r7
 801cac2:	bd80      	pop	{r7, pc}
 801cac4:	200013fc 	.word	0x200013fc
 801cac8:	200217b4 	.word	0x200217b4
 801cacc:	0802d88c 	.word	0x0802d88c
 801cad0:	0802d8e0 	.word	0x0802d8e0

0801cad4 <_lv_mem_buf_release>:
/**
 * Release a memory buffer
 * @param p buffer to release
 */
void _lv_mem_buf_release(void * p)
{
 801cad4:	b480      	push	{r7}
 801cad6:	b085      	sub	sp, #20
 801cad8:	af00      	add	r7, sp, #0
 801cada:	6078      	str	r0, [r7, #4]
    uint8_t i;

    /*Try small static buffers first*/
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
 801cadc:	2300      	movs	r3, #0
 801cade:	73fb      	strb	r3, [r7, #15]
 801cae0:	e012      	b.n	801cb08 <_lv_mem_buf_release+0x34>
        if(mem_buf_small[i].p == p) {
 801cae2:	7bfb      	ldrb	r3, [r7, #15]
 801cae4:	4a19      	ldr	r2, [pc, #100]	; (801cb4c <_lv_mem_buf_release+0x78>)
 801cae6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801caea:	687a      	ldr	r2, [r7, #4]
 801caec:	429a      	cmp	r2, r3
 801caee:	d108      	bne.n	801cb02 <_lv_mem_buf_release+0x2e>
            mem_buf_small[i].used = 0;
 801caf0:	7bfb      	ldrb	r3, [r7, #15]
 801caf2:	4a16      	ldr	r2, [pc, #88]	; (801cb4c <_lv_mem_buf_release+0x78>)
 801caf4:	00db      	lsls	r3, r3, #3
 801caf6:	4413      	add	r3, r2
 801caf8:	799a      	ldrb	r2, [r3, #6]
 801cafa:	f36f 0200 	bfc	r2, #0, #1
 801cafe:	719a      	strb	r2, [r3, #6]
            return;
 801cb00:	e01e      	b.n	801cb40 <_lv_mem_buf_release+0x6c>
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
 801cb02:	7bfb      	ldrb	r3, [r7, #15]
 801cb04:	3301      	adds	r3, #1
 801cb06:	73fb      	strb	r3, [r7, #15]
 801cb08:	7bfb      	ldrb	r3, [r7, #15]
 801cb0a:	2b01      	cmp	r3, #1
 801cb0c:	d9e9      	bls.n	801cae2 <_lv_mem_buf_release+0xe>
        }
    }

    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801cb0e:	2300      	movs	r3, #0
 801cb10:	73fb      	strb	r3, [r7, #15]
 801cb12:	e012      	b.n	801cb3a <_lv_mem_buf_release+0x66>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
 801cb14:	7bfb      	ldrb	r3, [r7, #15]
 801cb16:	4a0e      	ldr	r2, [pc, #56]	; (801cb50 <_lv_mem_buf_release+0x7c>)
 801cb18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801cb1c:	687a      	ldr	r2, [r7, #4]
 801cb1e:	429a      	cmp	r2, r3
 801cb20:	d108      	bne.n	801cb34 <_lv_mem_buf_release+0x60>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
 801cb22:	7bfb      	ldrb	r3, [r7, #15]
 801cb24:	4a0a      	ldr	r2, [pc, #40]	; (801cb50 <_lv_mem_buf_release+0x7c>)
 801cb26:	00db      	lsls	r3, r3, #3
 801cb28:	4413      	add	r3, r2
 801cb2a:	799a      	ldrb	r2, [r3, #6]
 801cb2c:	f36f 0200 	bfc	r2, #0, #1
 801cb30:	719a      	strb	r2, [r3, #6]
            return;
 801cb32:	e005      	b.n	801cb40 <_lv_mem_buf_release+0x6c>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801cb34:	7bfb      	ldrb	r3, [r7, #15]
 801cb36:	3301      	adds	r3, #1
 801cb38:	73fb      	strb	r3, [r7, #15]
 801cb3a:	7bfb      	ldrb	r3, [r7, #15]
 801cb3c:	2b0f      	cmp	r3, #15
 801cb3e:	d9e9      	bls.n	801cb14 <_lv_mem_buf_release+0x40>
        }
    }

    LV_LOG_ERROR("lv_mem_buf_release: p is not a known buffer")
}
 801cb40:	3714      	adds	r7, #20
 801cb42:	46bd      	mov	sp, r7
 801cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb48:	4770      	bx	lr
 801cb4a:	bf00      	nop
 801cb4c:	200013fc 	.word	0x200013fc
 801cb50:	200217b4 	.word	0x200217b4

0801cb54 <_lv_mem_buf_free_all>:

/**
 * Free all memory buffers
 */
void _lv_mem_buf_free_all(void)
{
 801cb54:	b580      	push	{r7, lr}
 801cb56:	b082      	sub	sp, #8
 801cb58:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
 801cb5a:	2300      	movs	r3, #0
 801cb5c:	71fb      	strb	r3, [r7, #7]
 801cb5e:	e00a      	b.n	801cb76 <_lv_mem_buf_free_all+0x22>
        mem_buf_small[i].used = 0;
 801cb60:	79fb      	ldrb	r3, [r7, #7]
 801cb62:	4a1d      	ldr	r2, [pc, #116]	; (801cbd8 <_lv_mem_buf_free_all+0x84>)
 801cb64:	00db      	lsls	r3, r3, #3
 801cb66:	4413      	add	r3, r2
 801cb68:	799a      	ldrb	r2, [r3, #6]
 801cb6a:	f36f 0200 	bfc	r2, #0, #1
 801cb6e:	719a      	strb	r2, [r3, #6]
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
 801cb70:	79fb      	ldrb	r3, [r7, #7]
 801cb72:	3301      	adds	r3, #1
 801cb74:	71fb      	strb	r3, [r7, #7]
 801cb76:	79fb      	ldrb	r3, [r7, #7]
 801cb78:	2b01      	cmp	r3, #1
 801cb7a:	d9f1      	bls.n	801cb60 <_lv_mem_buf_free_all+0xc>
    }

    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801cb7c:	2300      	movs	r3, #0
 801cb7e:	71fb      	strb	r3, [r7, #7]
 801cb80:	e022      	b.n	801cbc8 <_lv_mem_buf_free_all+0x74>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
 801cb82:	79fb      	ldrb	r3, [r7, #7]
 801cb84:	4a15      	ldr	r2, [pc, #84]	; (801cbdc <_lv_mem_buf_free_all+0x88>)
 801cb86:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	d019      	beq.n	801cbc2 <_lv_mem_buf_free_all+0x6e>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
 801cb8e:	79fb      	ldrb	r3, [r7, #7]
 801cb90:	4a12      	ldr	r2, [pc, #72]	; (801cbdc <_lv_mem_buf_free_all+0x88>)
 801cb92:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801cb96:	4618      	mov	r0, r3
 801cb98:	f7ff fda6 	bl	801c6e8 <lv_mem_free>
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
 801cb9c:	79fb      	ldrb	r3, [r7, #7]
 801cb9e:	4a0f      	ldr	r2, [pc, #60]	; (801cbdc <_lv_mem_buf_free_all+0x88>)
 801cba0:	2100      	movs	r1, #0
 801cba2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
 801cba6:	79fb      	ldrb	r3, [r7, #7]
 801cba8:	4a0c      	ldr	r2, [pc, #48]	; (801cbdc <_lv_mem_buf_free_all+0x88>)
 801cbaa:	00db      	lsls	r3, r3, #3
 801cbac:	4413      	add	r3, r2
 801cbae:	799a      	ldrb	r2, [r3, #6]
 801cbb0:	f36f 0200 	bfc	r2, #0, #1
 801cbb4:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
 801cbb6:	79fb      	ldrb	r3, [r7, #7]
 801cbb8:	4a08      	ldr	r2, [pc, #32]	; (801cbdc <_lv_mem_buf_free_all+0x88>)
 801cbba:	00db      	lsls	r3, r3, #3
 801cbbc:	4413      	add	r3, r2
 801cbbe:	2200      	movs	r2, #0
 801cbc0:	809a      	strh	r2, [r3, #4]
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801cbc2:	79fb      	ldrb	r3, [r7, #7]
 801cbc4:	3301      	adds	r3, #1
 801cbc6:	71fb      	strb	r3, [r7, #7]
 801cbc8:	79fb      	ldrb	r3, [r7, #7]
 801cbca:	2b0f      	cmp	r3, #15
 801cbcc:	d9d9      	bls.n	801cb82 <_lv_mem_buf_free_all+0x2e>
        }
    }
}
 801cbce:	bf00      	nop
 801cbd0:	3708      	adds	r7, #8
 801cbd2:	46bd      	mov	sp, r7
 801cbd4:	bd80      	pop	{r7, pc}
 801cbd6:	bf00      	nop
 801cbd8:	200013fc 	.word	0x200013fc
 801cbdc:	200217b4 	.word	0x200217b4

0801cbe0 <_lv_memcpy>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM void * _lv_memcpy(void * dst, const void * src, size_t len)
{
 801cbe0:	b480      	push	{r7}
 801cbe2:	b08b      	sub	sp, #44	; 0x2c
 801cbe4:	af00      	add	r7, sp, #0
 801cbe6:	60f8      	str	r0, [r7, #12]
 801cbe8:	60b9      	str	r1, [r7, #8]
 801cbea:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = dst;
 801cbec:	68fb      	ldr	r3, [r7, #12]
 801cbee:	627b      	str	r3, [r7, #36]	; 0x24
    const uint8_t * s8 = src;
 801cbf0:	68bb      	ldr	r3, [r7, #8]
 801cbf2:	623b      	str	r3, [r7, #32]

    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 801cbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbf6:	f003 0303 	and.w	r3, r3, #3
 801cbfa:	61fb      	str	r3, [r7, #28]
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 801cbfc:	6a3b      	ldr	r3, [r7, #32]
 801cbfe:	f003 0303 	and.w	r3, r3, #3
 801cc02:	613b      	str	r3, [r7, #16]

    /*Byte copy for unaligned memories*/
    if(s_align != d_align) {
 801cc04:	693a      	ldr	r2, [r7, #16]
 801cc06:	69fb      	ldr	r3, [r7, #28]
 801cc08:	429a      	cmp	r2, r3
 801cc0a:	f000 815b 	beq.w	801cec4 <_lv_memcpy+0x2e4>
        while(len > 32) {
 801cc0e:	e142      	b.n	801ce96 <_lv_memcpy+0x2b6>
            REPEAT8(COPY8);
 801cc10:	6a3b      	ldr	r3, [r7, #32]
 801cc12:	781a      	ldrb	r2, [r3, #0]
 801cc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc16:	701a      	strb	r2, [r3, #0]
 801cc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc1a:	3301      	adds	r3, #1
 801cc1c:	627b      	str	r3, [r7, #36]	; 0x24
 801cc1e:	6a3b      	ldr	r3, [r7, #32]
 801cc20:	3301      	adds	r3, #1
 801cc22:	623b      	str	r3, [r7, #32]
 801cc24:	6a3b      	ldr	r3, [r7, #32]
 801cc26:	781a      	ldrb	r2, [r3, #0]
 801cc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc2a:	701a      	strb	r2, [r3, #0]
 801cc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc2e:	3301      	adds	r3, #1
 801cc30:	627b      	str	r3, [r7, #36]	; 0x24
 801cc32:	6a3b      	ldr	r3, [r7, #32]
 801cc34:	3301      	adds	r3, #1
 801cc36:	623b      	str	r3, [r7, #32]
 801cc38:	6a3b      	ldr	r3, [r7, #32]
 801cc3a:	781a      	ldrb	r2, [r3, #0]
 801cc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc3e:	701a      	strb	r2, [r3, #0]
 801cc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc42:	3301      	adds	r3, #1
 801cc44:	627b      	str	r3, [r7, #36]	; 0x24
 801cc46:	6a3b      	ldr	r3, [r7, #32]
 801cc48:	3301      	adds	r3, #1
 801cc4a:	623b      	str	r3, [r7, #32]
 801cc4c:	6a3b      	ldr	r3, [r7, #32]
 801cc4e:	781a      	ldrb	r2, [r3, #0]
 801cc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc52:	701a      	strb	r2, [r3, #0]
 801cc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc56:	3301      	adds	r3, #1
 801cc58:	627b      	str	r3, [r7, #36]	; 0x24
 801cc5a:	6a3b      	ldr	r3, [r7, #32]
 801cc5c:	3301      	adds	r3, #1
 801cc5e:	623b      	str	r3, [r7, #32]
 801cc60:	6a3b      	ldr	r3, [r7, #32]
 801cc62:	781a      	ldrb	r2, [r3, #0]
 801cc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc66:	701a      	strb	r2, [r3, #0]
 801cc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc6a:	3301      	adds	r3, #1
 801cc6c:	627b      	str	r3, [r7, #36]	; 0x24
 801cc6e:	6a3b      	ldr	r3, [r7, #32]
 801cc70:	3301      	adds	r3, #1
 801cc72:	623b      	str	r3, [r7, #32]
 801cc74:	6a3b      	ldr	r3, [r7, #32]
 801cc76:	781a      	ldrb	r2, [r3, #0]
 801cc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc7a:	701a      	strb	r2, [r3, #0]
 801cc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc7e:	3301      	adds	r3, #1
 801cc80:	627b      	str	r3, [r7, #36]	; 0x24
 801cc82:	6a3b      	ldr	r3, [r7, #32]
 801cc84:	3301      	adds	r3, #1
 801cc86:	623b      	str	r3, [r7, #32]
 801cc88:	6a3b      	ldr	r3, [r7, #32]
 801cc8a:	781a      	ldrb	r2, [r3, #0]
 801cc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc8e:	701a      	strb	r2, [r3, #0]
 801cc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc92:	3301      	adds	r3, #1
 801cc94:	627b      	str	r3, [r7, #36]	; 0x24
 801cc96:	6a3b      	ldr	r3, [r7, #32]
 801cc98:	3301      	adds	r3, #1
 801cc9a:	623b      	str	r3, [r7, #32]
 801cc9c:	6a3b      	ldr	r3, [r7, #32]
 801cc9e:	781a      	ldrb	r2, [r3, #0]
 801cca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cca2:	701a      	strb	r2, [r3, #0]
 801cca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cca6:	3301      	adds	r3, #1
 801cca8:	627b      	str	r3, [r7, #36]	; 0x24
 801ccaa:	6a3b      	ldr	r3, [r7, #32]
 801ccac:	3301      	adds	r3, #1
 801ccae:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 801ccb0:	6a3b      	ldr	r3, [r7, #32]
 801ccb2:	781a      	ldrb	r2, [r3, #0]
 801ccb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccb6:	701a      	strb	r2, [r3, #0]
 801ccb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccba:	3301      	adds	r3, #1
 801ccbc:	627b      	str	r3, [r7, #36]	; 0x24
 801ccbe:	6a3b      	ldr	r3, [r7, #32]
 801ccc0:	3301      	adds	r3, #1
 801ccc2:	623b      	str	r3, [r7, #32]
 801ccc4:	6a3b      	ldr	r3, [r7, #32]
 801ccc6:	781a      	ldrb	r2, [r3, #0]
 801ccc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccca:	701a      	strb	r2, [r3, #0]
 801cccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccce:	3301      	adds	r3, #1
 801ccd0:	627b      	str	r3, [r7, #36]	; 0x24
 801ccd2:	6a3b      	ldr	r3, [r7, #32]
 801ccd4:	3301      	adds	r3, #1
 801ccd6:	623b      	str	r3, [r7, #32]
 801ccd8:	6a3b      	ldr	r3, [r7, #32]
 801ccda:	781a      	ldrb	r2, [r3, #0]
 801ccdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccde:	701a      	strb	r2, [r3, #0]
 801cce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cce2:	3301      	adds	r3, #1
 801cce4:	627b      	str	r3, [r7, #36]	; 0x24
 801cce6:	6a3b      	ldr	r3, [r7, #32]
 801cce8:	3301      	adds	r3, #1
 801ccea:	623b      	str	r3, [r7, #32]
 801ccec:	6a3b      	ldr	r3, [r7, #32]
 801ccee:	781a      	ldrb	r2, [r3, #0]
 801ccf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccf2:	701a      	strb	r2, [r3, #0]
 801ccf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccf6:	3301      	adds	r3, #1
 801ccf8:	627b      	str	r3, [r7, #36]	; 0x24
 801ccfa:	6a3b      	ldr	r3, [r7, #32]
 801ccfc:	3301      	adds	r3, #1
 801ccfe:	623b      	str	r3, [r7, #32]
 801cd00:	6a3b      	ldr	r3, [r7, #32]
 801cd02:	781a      	ldrb	r2, [r3, #0]
 801cd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd06:	701a      	strb	r2, [r3, #0]
 801cd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd0a:	3301      	adds	r3, #1
 801cd0c:	627b      	str	r3, [r7, #36]	; 0x24
 801cd0e:	6a3b      	ldr	r3, [r7, #32]
 801cd10:	3301      	adds	r3, #1
 801cd12:	623b      	str	r3, [r7, #32]
 801cd14:	6a3b      	ldr	r3, [r7, #32]
 801cd16:	781a      	ldrb	r2, [r3, #0]
 801cd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd1a:	701a      	strb	r2, [r3, #0]
 801cd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd1e:	3301      	adds	r3, #1
 801cd20:	627b      	str	r3, [r7, #36]	; 0x24
 801cd22:	6a3b      	ldr	r3, [r7, #32]
 801cd24:	3301      	adds	r3, #1
 801cd26:	623b      	str	r3, [r7, #32]
 801cd28:	6a3b      	ldr	r3, [r7, #32]
 801cd2a:	781a      	ldrb	r2, [r3, #0]
 801cd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd2e:	701a      	strb	r2, [r3, #0]
 801cd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd32:	3301      	adds	r3, #1
 801cd34:	627b      	str	r3, [r7, #36]	; 0x24
 801cd36:	6a3b      	ldr	r3, [r7, #32]
 801cd38:	3301      	adds	r3, #1
 801cd3a:	623b      	str	r3, [r7, #32]
 801cd3c:	6a3b      	ldr	r3, [r7, #32]
 801cd3e:	781a      	ldrb	r2, [r3, #0]
 801cd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd42:	701a      	strb	r2, [r3, #0]
 801cd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd46:	3301      	adds	r3, #1
 801cd48:	627b      	str	r3, [r7, #36]	; 0x24
 801cd4a:	6a3b      	ldr	r3, [r7, #32]
 801cd4c:	3301      	adds	r3, #1
 801cd4e:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 801cd50:	6a3b      	ldr	r3, [r7, #32]
 801cd52:	781a      	ldrb	r2, [r3, #0]
 801cd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd56:	701a      	strb	r2, [r3, #0]
 801cd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd5a:	3301      	adds	r3, #1
 801cd5c:	627b      	str	r3, [r7, #36]	; 0x24
 801cd5e:	6a3b      	ldr	r3, [r7, #32]
 801cd60:	3301      	adds	r3, #1
 801cd62:	623b      	str	r3, [r7, #32]
 801cd64:	6a3b      	ldr	r3, [r7, #32]
 801cd66:	781a      	ldrb	r2, [r3, #0]
 801cd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd6a:	701a      	strb	r2, [r3, #0]
 801cd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd6e:	3301      	adds	r3, #1
 801cd70:	627b      	str	r3, [r7, #36]	; 0x24
 801cd72:	6a3b      	ldr	r3, [r7, #32]
 801cd74:	3301      	adds	r3, #1
 801cd76:	623b      	str	r3, [r7, #32]
 801cd78:	6a3b      	ldr	r3, [r7, #32]
 801cd7a:	781a      	ldrb	r2, [r3, #0]
 801cd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd7e:	701a      	strb	r2, [r3, #0]
 801cd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd82:	3301      	adds	r3, #1
 801cd84:	627b      	str	r3, [r7, #36]	; 0x24
 801cd86:	6a3b      	ldr	r3, [r7, #32]
 801cd88:	3301      	adds	r3, #1
 801cd8a:	623b      	str	r3, [r7, #32]
 801cd8c:	6a3b      	ldr	r3, [r7, #32]
 801cd8e:	781a      	ldrb	r2, [r3, #0]
 801cd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd92:	701a      	strb	r2, [r3, #0]
 801cd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd96:	3301      	adds	r3, #1
 801cd98:	627b      	str	r3, [r7, #36]	; 0x24
 801cd9a:	6a3b      	ldr	r3, [r7, #32]
 801cd9c:	3301      	adds	r3, #1
 801cd9e:	623b      	str	r3, [r7, #32]
 801cda0:	6a3b      	ldr	r3, [r7, #32]
 801cda2:	781a      	ldrb	r2, [r3, #0]
 801cda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cda6:	701a      	strb	r2, [r3, #0]
 801cda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdaa:	3301      	adds	r3, #1
 801cdac:	627b      	str	r3, [r7, #36]	; 0x24
 801cdae:	6a3b      	ldr	r3, [r7, #32]
 801cdb0:	3301      	adds	r3, #1
 801cdb2:	623b      	str	r3, [r7, #32]
 801cdb4:	6a3b      	ldr	r3, [r7, #32]
 801cdb6:	781a      	ldrb	r2, [r3, #0]
 801cdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdba:	701a      	strb	r2, [r3, #0]
 801cdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdbe:	3301      	adds	r3, #1
 801cdc0:	627b      	str	r3, [r7, #36]	; 0x24
 801cdc2:	6a3b      	ldr	r3, [r7, #32]
 801cdc4:	3301      	adds	r3, #1
 801cdc6:	623b      	str	r3, [r7, #32]
 801cdc8:	6a3b      	ldr	r3, [r7, #32]
 801cdca:	781a      	ldrb	r2, [r3, #0]
 801cdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdce:	701a      	strb	r2, [r3, #0]
 801cdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdd2:	3301      	adds	r3, #1
 801cdd4:	627b      	str	r3, [r7, #36]	; 0x24
 801cdd6:	6a3b      	ldr	r3, [r7, #32]
 801cdd8:	3301      	adds	r3, #1
 801cdda:	623b      	str	r3, [r7, #32]
 801cddc:	6a3b      	ldr	r3, [r7, #32]
 801cdde:	781a      	ldrb	r2, [r3, #0]
 801cde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cde2:	701a      	strb	r2, [r3, #0]
 801cde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cde6:	3301      	adds	r3, #1
 801cde8:	627b      	str	r3, [r7, #36]	; 0x24
 801cdea:	6a3b      	ldr	r3, [r7, #32]
 801cdec:	3301      	adds	r3, #1
 801cdee:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 801cdf0:	6a3b      	ldr	r3, [r7, #32]
 801cdf2:	781a      	ldrb	r2, [r3, #0]
 801cdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdf6:	701a      	strb	r2, [r3, #0]
 801cdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdfa:	3301      	adds	r3, #1
 801cdfc:	627b      	str	r3, [r7, #36]	; 0x24
 801cdfe:	6a3b      	ldr	r3, [r7, #32]
 801ce00:	3301      	adds	r3, #1
 801ce02:	623b      	str	r3, [r7, #32]
 801ce04:	6a3b      	ldr	r3, [r7, #32]
 801ce06:	781a      	ldrb	r2, [r3, #0]
 801ce08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce0a:	701a      	strb	r2, [r3, #0]
 801ce0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce0e:	3301      	adds	r3, #1
 801ce10:	627b      	str	r3, [r7, #36]	; 0x24
 801ce12:	6a3b      	ldr	r3, [r7, #32]
 801ce14:	3301      	adds	r3, #1
 801ce16:	623b      	str	r3, [r7, #32]
 801ce18:	6a3b      	ldr	r3, [r7, #32]
 801ce1a:	781a      	ldrb	r2, [r3, #0]
 801ce1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce1e:	701a      	strb	r2, [r3, #0]
 801ce20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce22:	3301      	adds	r3, #1
 801ce24:	627b      	str	r3, [r7, #36]	; 0x24
 801ce26:	6a3b      	ldr	r3, [r7, #32]
 801ce28:	3301      	adds	r3, #1
 801ce2a:	623b      	str	r3, [r7, #32]
 801ce2c:	6a3b      	ldr	r3, [r7, #32]
 801ce2e:	781a      	ldrb	r2, [r3, #0]
 801ce30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce32:	701a      	strb	r2, [r3, #0]
 801ce34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce36:	3301      	adds	r3, #1
 801ce38:	627b      	str	r3, [r7, #36]	; 0x24
 801ce3a:	6a3b      	ldr	r3, [r7, #32]
 801ce3c:	3301      	adds	r3, #1
 801ce3e:	623b      	str	r3, [r7, #32]
 801ce40:	6a3b      	ldr	r3, [r7, #32]
 801ce42:	781a      	ldrb	r2, [r3, #0]
 801ce44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce46:	701a      	strb	r2, [r3, #0]
 801ce48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce4a:	3301      	adds	r3, #1
 801ce4c:	627b      	str	r3, [r7, #36]	; 0x24
 801ce4e:	6a3b      	ldr	r3, [r7, #32]
 801ce50:	3301      	adds	r3, #1
 801ce52:	623b      	str	r3, [r7, #32]
 801ce54:	6a3b      	ldr	r3, [r7, #32]
 801ce56:	781a      	ldrb	r2, [r3, #0]
 801ce58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce5a:	701a      	strb	r2, [r3, #0]
 801ce5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce5e:	3301      	adds	r3, #1
 801ce60:	627b      	str	r3, [r7, #36]	; 0x24
 801ce62:	6a3b      	ldr	r3, [r7, #32]
 801ce64:	3301      	adds	r3, #1
 801ce66:	623b      	str	r3, [r7, #32]
 801ce68:	6a3b      	ldr	r3, [r7, #32]
 801ce6a:	781a      	ldrb	r2, [r3, #0]
 801ce6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce6e:	701a      	strb	r2, [r3, #0]
 801ce70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce72:	3301      	adds	r3, #1
 801ce74:	627b      	str	r3, [r7, #36]	; 0x24
 801ce76:	6a3b      	ldr	r3, [r7, #32]
 801ce78:	3301      	adds	r3, #1
 801ce7a:	623b      	str	r3, [r7, #32]
 801ce7c:	6a3b      	ldr	r3, [r7, #32]
 801ce7e:	781a      	ldrb	r2, [r3, #0]
 801ce80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce82:	701a      	strb	r2, [r3, #0]
 801ce84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce86:	3301      	adds	r3, #1
 801ce88:	627b      	str	r3, [r7, #36]	; 0x24
 801ce8a:	6a3b      	ldr	r3, [r7, #32]
 801ce8c:	3301      	adds	r3, #1
 801ce8e:	623b      	str	r3, [r7, #32]
            len -= 32;
 801ce90:	687b      	ldr	r3, [r7, #4]
 801ce92:	3b20      	subs	r3, #32
 801ce94:	607b      	str	r3, [r7, #4]
        while(len > 32) {
 801ce96:	687b      	ldr	r3, [r7, #4]
 801ce98:	2b20      	cmp	r3, #32
 801ce9a:	f63f aeb9 	bhi.w	801cc10 <_lv_memcpy+0x30>
        }
        while(len) {
 801ce9e:	e00c      	b.n	801ceba <_lv_memcpy+0x2da>
            COPY8
 801cea0:	6a3b      	ldr	r3, [r7, #32]
 801cea2:	781a      	ldrb	r2, [r3, #0]
 801cea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cea6:	701a      	strb	r2, [r3, #0]
 801cea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ceaa:	3301      	adds	r3, #1
 801ceac:	627b      	str	r3, [r7, #36]	; 0x24
 801ceae:	6a3b      	ldr	r3, [r7, #32]
 801ceb0:	3301      	adds	r3, #1
 801ceb2:	623b      	str	r3, [r7, #32]
            len--;
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	3b01      	subs	r3, #1
 801ceb8:	607b      	str	r3, [r7, #4]
        while(len) {
 801ceba:	687b      	ldr	r3, [r7, #4]
 801cebc:	2b00      	cmp	r3, #0
 801cebe:	d1ef      	bne.n	801cea0 <_lv_memcpy+0x2c0>
        }
        return dst;
 801cec0:	68fb      	ldr	r3, [r7, #12]
 801cec2:	e09f      	b.n	801d004 <_lv_memcpy+0x424>
    }

    /*Make the memories aligned*/
    if(d_align) {
 801cec4:	69fb      	ldr	r3, [r7, #28]
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	d01a      	beq.n	801cf00 <_lv_memcpy+0x320>
        d_align = ALIGN_MASK + 1 - d_align;
 801ceca:	69fb      	ldr	r3, [r7, #28]
 801cecc:	f1c3 0304 	rsb	r3, r3, #4
 801ced0:	61fb      	str	r3, [r7, #28]
        while(d_align && len) {
 801ced2:	e00f      	b.n	801cef4 <_lv_memcpy+0x314>
            COPY8;
 801ced4:	6a3b      	ldr	r3, [r7, #32]
 801ced6:	781a      	ldrb	r2, [r3, #0]
 801ced8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ceda:	701a      	strb	r2, [r3, #0]
 801cedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cede:	3301      	adds	r3, #1
 801cee0:	627b      	str	r3, [r7, #36]	; 0x24
 801cee2:	6a3b      	ldr	r3, [r7, #32]
 801cee4:	3301      	adds	r3, #1
 801cee6:	623b      	str	r3, [r7, #32]
            d_align--;
 801cee8:	69fb      	ldr	r3, [r7, #28]
 801ceea:	3b01      	subs	r3, #1
 801ceec:	61fb      	str	r3, [r7, #28]
            len--;
 801ceee:	687b      	ldr	r3, [r7, #4]
 801cef0:	3b01      	subs	r3, #1
 801cef2:	607b      	str	r3, [r7, #4]
        while(d_align && len) {
 801cef4:	69fb      	ldr	r3, [r7, #28]
 801cef6:	2b00      	cmp	r3, #0
 801cef8:	d002      	beq.n	801cf00 <_lv_memcpy+0x320>
 801cefa:	687b      	ldr	r3, [r7, #4]
 801cefc:	2b00      	cmp	r3, #0
 801cefe:	d1e9      	bne.n	801ced4 <_lv_memcpy+0x2f4>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 801cf00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf02:	61bb      	str	r3, [r7, #24]
    const uint32_t * s32 = (uint32_t *)s8;
 801cf04:	6a3b      	ldr	r3, [r7, #32]
 801cf06:	617b      	str	r3, [r7, #20]
    while(len > 32) {
 801cf08:	e052      	b.n	801cfb0 <_lv_memcpy+0x3d0>
        REPEAT8(COPY32)
 801cf0a:	697b      	ldr	r3, [r7, #20]
 801cf0c:	681a      	ldr	r2, [r3, #0]
 801cf0e:	69bb      	ldr	r3, [r7, #24]
 801cf10:	601a      	str	r2, [r3, #0]
 801cf12:	69bb      	ldr	r3, [r7, #24]
 801cf14:	3304      	adds	r3, #4
 801cf16:	61bb      	str	r3, [r7, #24]
 801cf18:	697b      	ldr	r3, [r7, #20]
 801cf1a:	3304      	adds	r3, #4
 801cf1c:	617b      	str	r3, [r7, #20]
 801cf1e:	697b      	ldr	r3, [r7, #20]
 801cf20:	681a      	ldr	r2, [r3, #0]
 801cf22:	69bb      	ldr	r3, [r7, #24]
 801cf24:	601a      	str	r2, [r3, #0]
 801cf26:	69bb      	ldr	r3, [r7, #24]
 801cf28:	3304      	adds	r3, #4
 801cf2a:	61bb      	str	r3, [r7, #24]
 801cf2c:	697b      	ldr	r3, [r7, #20]
 801cf2e:	3304      	adds	r3, #4
 801cf30:	617b      	str	r3, [r7, #20]
 801cf32:	697b      	ldr	r3, [r7, #20]
 801cf34:	681a      	ldr	r2, [r3, #0]
 801cf36:	69bb      	ldr	r3, [r7, #24]
 801cf38:	601a      	str	r2, [r3, #0]
 801cf3a:	69bb      	ldr	r3, [r7, #24]
 801cf3c:	3304      	adds	r3, #4
 801cf3e:	61bb      	str	r3, [r7, #24]
 801cf40:	697b      	ldr	r3, [r7, #20]
 801cf42:	3304      	adds	r3, #4
 801cf44:	617b      	str	r3, [r7, #20]
 801cf46:	697b      	ldr	r3, [r7, #20]
 801cf48:	681a      	ldr	r2, [r3, #0]
 801cf4a:	69bb      	ldr	r3, [r7, #24]
 801cf4c:	601a      	str	r2, [r3, #0]
 801cf4e:	69bb      	ldr	r3, [r7, #24]
 801cf50:	3304      	adds	r3, #4
 801cf52:	61bb      	str	r3, [r7, #24]
 801cf54:	697b      	ldr	r3, [r7, #20]
 801cf56:	3304      	adds	r3, #4
 801cf58:	617b      	str	r3, [r7, #20]
 801cf5a:	697b      	ldr	r3, [r7, #20]
 801cf5c:	681a      	ldr	r2, [r3, #0]
 801cf5e:	69bb      	ldr	r3, [r7, #24]
 801cf60:	601a      	str	r2, [r3, #0]
 801cf62:	69bb      	ldr	r3, [r7, #24]
 801cf64:	3304      	adds	r3, #4
 801cf66:	61bb      	str	r3, [r7, #24]
 801cf68:	697b      	ldr	r3, [r7, #20]
 801cf6a:	3304      	adds	r3, #4
 801cf6c:	617b      	str	r3, [r7, #20]
 801cf6e:	697b      	ldr	r3, [r7, #20]
 801cf70:	681a      	ldr	r2, [r3, #0]
 801cf72:	69bb      	ldr	r3, [r7, #24]
 801cf74:	601a      	str	r2, [r3, #0]
 801cf76:	69bb      	ldr	r3, [r7, #24]
 801cf78:	3304      	adds	r3, #4
 801cf7a:	61bb      	str	r3, [r7, #24]
 801cf7c:	697b      	ldr	r3, [r7, #20]
 801cf7e:	3304      	adds	r3, #4
 801cf80:	617b      	str	r3, [r7, #20]
 801cf82:	697b      	ldr	r3, [r7, #20]
 801cf84:	681a      	ldr	r2, [r3, #0]
 801cf86:	69bb      	ldr	r3, [r7, #24]
 801cf88:	601a      	str	r2, [r3, #0]
 801cf8a:	69bb      	ldr	r3, [r7, #24]
 801cf8c:	3304      	adds	r3, #4
 801cf8e:	61bb      	str	r3, [r7, #24]
 801cf90:	697b      	ldr	r3, [r7, #20]
 801cf92:	3304      	adds	r3, #4
 801cf94:	617b      	str	r3, [r7, #20]
 801cf96:	697b      	ldr	r3, [r7, #20]
 801cf98:	681a      	ldr	r2, [r3, #0]
 801cf9a:	69bb      	ldr	r3, [r7, #24]
 801cf9c:	601a      	str	r2, [r3, #0]
 801cf9e:	69bb      	ldr	r3, [r7, #24]
 801cfa0:	3304      	adds	r3, #4
 801cfa2:	61bb      	str	r3, [r7, #24]
 801cfa4:	697b      	ldr	r3, [r7, #20]
 801cfa6:	3304      	adds	r3, #4
 801cfa8:	617b      	str	r3, [r7, #20]
        len -= 32;
 801cfaa:	687b      	ldr	r3, [r7, #4]
 801cfac:	3b20      	subs	r3, #32
 801cfae:	607b      	str	r3, [r7, #4]
    while(len > 32) {
 801cfb0:	687b      	ldr	r3, [r7, #4]
 801cfb2:	2b20      	cmp	r3, #32
 801cfb4:	d8a9      	bhi.n	801cf0a <_lv_memcpy+0x32a>
    }

    while(len > 4) {
 801cfb6:	e00c      	b.n	801cfd2 <_lv_memcpy+0x3f2>
        COPY32;
 801cfb8:	697b      	ldr	r3, [r7, #20]
 801cfba:	681a      	ldr	r2, [r3, #0]
 801cfbc:	69bb      	ldr	r3, [r7, #24]
 801cfbe:	601a      	str	r2, [r3, #0]
 801cfc0:	69bb      	ldr	r3, [r7, #24]
 801cfc2:	3304      	adds	r3, #4
 801cfc4:	61bb      	str	r3, [r7, #24]
 801cfc6:	697b      	ldr	r3, [r7, #20]
 801cfc8:	3304      	adds	r3, #4
 801cfca:	617b      	str	r3, [r7, #20]
        len -= 4;
 801cfcc:	687b      	ldr	r3, [r7, #4]
 801cfce:	3b04      	subs	r3, #4
 801cfd0:	607b      	str	r3, [r7, #4]
    while(len > 4) {
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	2b04      	cmp	r3, #4
 801cfd6:	d8ef      	bhi.n	801cfb8 <_lv_memcpy+0x3d8>
    }

    d8 = (uint8_t *)d32;
 801cfd8:	69bb      	ldr	r3, [r7, #24]
 801cfda:	627b      	str	r3, [r7, #36]	; 0x24
    s8 = (const uint8_t *)s32;
 801cfdc:	697b      	ldr	r3, [r7, #20]
 801cfde:	623b      	str	r3, [r7, #32]
    while(len) {
 801cfe0:	e00c      	b.n	801cffc <_lv_memcpy+0x41c>
        COPY8
 801cfe2:	6a3b      	ldr	r3, [r7, #32]
 801cfe4:	781a      	ldrb	r2, [r3, #0]
 801cfe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfe8:	701a      	strb	r2, [r3, #0]
 801cfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfec:	3301      	adds	r3, #1
 801cfee:	627b      	str	r3, [r7, #36]	; 0x24
 801cff0:	6a3b      	ldr	r3, [r7, #32]
 801cff2:	3301      	adds	r3, #1
 801cff4:	623b      	str	r3, [r7, #32]
        len--;
 801cff6:	687b      	ldr	r3, [r7, #4]
 801cff8:	3b01      	subs	r3, #1
 801cffa:	607b      	str	r3, [r7, #4]
    while(len) {
 801cffc:	687b      	ldr	r3, [r7, #4]
 801cffe:	2b00      	cmp	r3, #0
 801d000:	d1ef      	bne.n	801cfe2 <_lv_memcpy+0x402>
    }

    return dst;
 801d002:	68fb      	ldr	r3, [r7, #12]
}
 801d004:	4618      	mov	r0, r3
 801d006:	372c      	adds	r7, #44	; 0x2c
 801d008:	46bd      	mov	sp, r7
 801d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d00e:	4770      	bx	lr

0801d010 <_lv_memset>:
 * @param dst pointer to the destination buffer
 * @param v value to set [0..255]
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void _lv_memset(void * dst, uint8_t v, size_t len)
{
 801d010:	b480      	push	{r7}
 801d012:	b089      	sub	sp, #36	; 0x24
 801d014:	af00      	add	r7, sp, #0
 801d016:	60f8      	str	r0, [r7, #12]
 801d018:	460b      	mov	r3, r1
 801d01a:	607a      	str	r2, [r7, #4]
 801d01c:	72fb      	strb	r3, [r7, #11]

    uint8_t * d8 = (uint8_t *) dst;
 801d01e:	68fb      	ldr	r3, [r7, #12]
 801d020:	61fb      	str	r3, [r7, #28]

    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 801d022:	69fb      	ldr	r3, [r7, #28]
 801d024:	f003 0303 	and.w	r3, r3, #3
 801d028:	61bb      	str	r3, [r7, #24]

    /*Make the address aligned*/
    if(d_align) {
 801d02a:	69bb      	ldr	r3, [r7, #24]
 801d02c:	2b00      	cmp	r3, #0
 801d02e:	d016      	beq.n	801d05e <_lv_memset+0x4e>
        d_align = ALIGN_MASK + 1 - d_align;
 801d030:	69bb      	ldr	r3, [r7, #24]
 801d032:	f1c3 0304 	rsb	r3, r3, #4
 801d036:	61bb      	str	r3, [r7, #24]
        while(d_align && len) {
 801d038:	e00b      	b.n	801d052 <_lv_memset+0x42>
            SET8(v);
 801d03a:	69fb      	ldr	r3, [r7, #28]
 801d03c:	7afa      	ldrb	r2, [r7, #11]
 801d03e:	701a      	strb	r2, [r3, #0]
 801d040:	69fb      	ldr	r3, [r7, #28]
 801d042:	3301      	adds	r3, #1
 801d044:	61fb      	str	r3, [r7, #28]
            len--;
 801d046:	687b      	ldr	r3, [r7, #4]
 801d048:	3b01      	subs	r3, #1
 801d04a:	607b      	str	r3, [r7, #4]
            d_align--;
 801d04c:	69bb      	ldr	r3, [r7, #24]
 801d04e:	3b01      	subs	r3, #1
 801d050:	61bb      	str	r3, [r7, #24]
        while(d_align && len) {
 801d052:	69bb      	ldr	r3, [r7, #24]
 801d054:	2b00      	cmp	r3, #0
 801d056:	d002      	beq.n	801d05e <_lv_memset+0x4e>
 801d058:	687b      	ldr	r3, [r7, #4]
 801d05a:	2b00      	cmp	r3, #0
 801d05c:	d1ed      	bne.n	801d03a <_lv_memset+0x2a>
        }
    }

    uint32_t v32 = v + (v << 8) + (v << 16) + (v << 24);
 801d05e:	7afa      	ldrb	r2, [r7, #11]
 801d060:	7afb      	ldrb	r3, [r7, #11]
 801d062:	021b      	lsls	r3, r3, #8
 801d064:	441a      	add	r2, r3
 801d066:	7afb      	ldrb	r3, [r7, #11]
 801d068:	041b      	lsls	r3, r3, #16
 801d06a:	441a      	add	r2, r3
 801d06c:	7afb      	ldrb	r3, [r7, #11]
 801d06e:	061b      	lsls	r3, r3, #24
 801d070:	4413      	add	r3, r2
 801d072:	613b      	str	r3, [r7, #16]

    uint32_t * d32 = (uint32_t *)d8;
 801d074:	69fb      	ldr	r3, [r7, #28]
 801d076:	617b      	str	r3, [r7, #20]

    while(len > 32) {
 801d078:	e032      	b.n	801d0e0 <_lv_memset+0xd0>
        REPEAT8(SET32(v32));
 801d07a:	697b      	ldr	r3, [r7, #20]
 801d07c:	693a      	ldr	r2, [r7, #16]
 801d07e:	601a      	str	r2, [r3, #0]
 801d080:	697b      	ldr	r3, [r7, #20]
 801d082:	3304      	adds	r3, #4
 801d084:	617b      	str	r3, [r7, #20]
 801d086:	697b      	ldr	r3, [r7, #20]
 801d088:	693a      	ldr	r2, [r7, #16]
 801d08a:	601a      	str	r2, [r3, #0]
 801d08c:	697b      	ldr	r3, [r7, #20]
 801d08e:	3304      	adds	r3, #4
 801d090:	617b      	str	r3, [r7, #20]
 801d092:	697b      	ldr	r3, [r7, #20]
 801d094:	693a      	ldr	r2, [r7, #16]
 801d096:	601a      	str	r2, [r3, #0]
 801d098:	697b      	ldr	r3, [r7, #20]
 801d09a:	3304      	adds	r3, #4
 801d09c:	617b      	str	r3, [r7, #20]
 801d09e:	697b      	ldr	r3, [r7, #20]
 801d0a0:	693a      	ldr	r2, [r7, #16]
 801d0a2:	601a      	str	r2, [r3, #0]
 801d0a4:	697b      	ldr	r3, [r7, #20]
 801d0a6:	3304      	adds	r3, #4
 801d0a8:	617b      	str	r3, [r7, #20]
 801d0aa:	697b      	ldr	r3, [r7, #20]
 801d0ac:	693a      	ldr	r2, [r7, #16]
 801d0ae:	601a      	str	r2, [r3, #0]
 801d0b0:	697b      	ldr	r3, [r7, #20]
 801d0b2:	3304      	adds	r3, #4
 801d0b4:	617b      	str	r3, [r7, #20]
 801d0b6:	697b      	ldr	r3, [r7, #20]
 801d0b8:	693a      	ldr	r2, [r7, #16]
 801d0ba:	601a      	str	r2, [r3, #0]
 801d0bc:	697b      	ldr	r3, [r7, #20]
 801d0be:	3304      	adds	r3, #4
 801d0c0:	617b      	str	r3, [r7, #20]
 801d0c2:	697b      	ldr	r3, [r7, #20]
 801d0c4:	693a      	ldr	r2, [r7, #16]
 801d0c6:	601a      	str	r2, [r3, #0]
 801d0c8:	697b      	ldr	r3, [r7, #20]
 801d0ca:	3304      	adds	r3, #4
 801d0cc:	617b      	str	r3, [r7, #20]
 801d0ce:	697b      	ldr	r3, [r7, #20]
 801d0d0:	693a      	ldr	r2, [r7, #16]
 801d0d2:	601a      	str	r2, [r3, #0]
 801d0d4:	697b      	ldr	r3, [r7, #20]
 801d0d6:	3304      	adds	r3, #4
 801d0d8:	617b      	str	r3, [r7, #20]
        len -= 32;
 801d0da:	687b      	ldr	r3, [r7, #4]
 801d0dc:	3b20      	subs	r3, #32
 801d0de:	607b      	str	r3, [r7, #4]
    while(len > 32) {
 801d0e0:	687b      	ldr	r3, [r7, #4]
 801d0e2:	2b20      	cmp	r3, #32
 801d0e4:	d8c9      	bhi.n	801d07a <_lv_memset+0x6a>
    }

    while(len > 4) {
 801d0e6:	e008      	b.n	801d0fa <_lv_memset+0xea>
        SET32(v32);
 801d0e8:	697b      	ldr	r3, [r7, #20]
 801d0ea:	693a      	ldr	r2, [r7, #16]
 801d0ec:	601a      	str	r2, [r3, #0]
 801d0ee:	697b      	ldr	r3, [r7, #20]
 801d0f0:	3304      	adds	r3, #4
 801d0f2:	617b      	str	r3, [r7, #20]
        len -= 4;
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	3b04      	subs	r3, #4
 801d0f8:	607b      	str	r3, [r7, #4]
    while(len > 4) {
 801d0fa:	687b      	ldr	r3, [r7, #4]
 801d0fc:	2b04      	cmp	r3, #4
 801d0fe:	d8f3      	bhi.n	801d0e8 <_lv_memset+0xd8>
    }

    d8 = (uint8_t *)d32;
 801d100:	697b      	ldr	r3, [r7, #20]
 801d102:	61fb      	str	r3, [r7, #28]
    while(len) {
 801d104:	e008      	b.n	801d118 <_lv_memset+0x108>
        SET8(v);
 801d106:	69fb      	ldr	r3, [r7, #28]
 801d108:	7afa      	ldrb	r2, [r7, #11]
 801d10a:	701a      	strb	r2, [r3, #0]
 801d10c:	69fb      	ldr	r3, [r7, #28]
 801d10e:	3301      	adds	r3, #1
 801d110:	61fb      	str	r3, [r7, #28]
        len--;
 801d112:	687b      	ldr	r3, [r7, #4]
 801d114:	3b01      	subs	r3, #1
 801d116:	607b      	str	r3, [r7, #4]
    while(len) {
 801d118:	687b      	ldr	r3, [r7, #4]
 801d11a:	2b00      	cmp	r3, #0
 801d11c:	d1f3      	bne.n	801d106 <_lv_memset+0xf6>
    }
}
 801d11e:	bf00      	nop
 801d120:	3724      	adds	r7, #36	; 0x24
 801d122:	46bd      	mov	sp, r7
 801d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d128:	4770      	bx	lr

0801d12a <_lv_memset_00>:
 * Same as `memset(dst, 0x00, len)` but optimized for 4 byte operation.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void _lv_memset_00(void * dst, size_t len)
{
 801d12a:	b480      	push	{r7}
 801d12c:	b087      	sub	sp, #28
 801d12e:	af00      	add	r7, sp, #0
 801d130:	6078      	str	r0, [r7, #4]
 801d132:	6039      	str	r1, [r7, #0]
    uint8_t * d8 = (uint8_t *) dst;
 801d134:	687b      	ldr	r3, [r7, #4]
 801d136:	617b      	str	r3, [r7, #20]
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 801d138:	697b      	ldr	r3, [r7, #20]
 801d13a:	f003 0303 	and.w	r3, r3, #3
 801d13e:	613b      	str	r3, [r7, #16]

    /*Make the address aligned*/
    if(d_align) {
 801d140:	693b      	ldr	r3, [r7, #16]
 801d142:	2b00      	cmp	r3, #0
 801d144:	d016      	beq.n	801d174 <_lv_memset_00+0x4a>
        d_align = ALIGN_MASK + 1 - d_align;
 801d146:	693b      	ldr	r3, [r7, #16]
 801d148:	f1c3 0304 	rsb	r3, r3, #4
 801d14c:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 801d14e:	e00b      	b.n	801d168 <_lv_memset_00+0x3e>
            SET8(0);
 801d150:	697b      	ldr	r3, [r7, #20]
 801d152:	2200      	movs	r2, #0
 801d154:	701a      	strb	r2, [r3, #0]
 801d156:	697b      	ldr	r3, [r7, #20]
 801d158:	3301      	adds	r3, #1
 801d15a:	617b      	str	r3, [r7, #20]
            len--;
 801d15c:	683b      	ldr	r3, [r7, #0]
 801d15e:	3b01      	subs	r3, #1
 801d160:	603b      	str	r3, [r7, #0]
            d_align--;
 801d162:	693b      	ldr	r3, [r7, #16]
 801d164:	3b01      	subs	r3, #1
 801d166:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 801d168:	693b      	ldr	r3, [r7, #16]
 801d16a:	2b00      	cmp	r3, #0
 801d16c:	d002      	beq.n	801d174 <_lv_memset_00+0x4a>
 801d16e:	683b      	ldr	r3, [r7, #0]
 801d170:	2b00      	cmp	r3, #0
 801d172:	d1ed      	bne.n	801d150 <_lv_memset_00+0x26>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 801d174:	697b      	ldr	r3, [r7, #20]
 801d176:	60fb      	str	r3, [r7, #12]
    while(len > 32) {
 801d178:	e032      	b.n	801d1e0 <_lv_memset_00+0xb6>
        REPEAT8(SET32(0));
 801d17a:	68fb      	ldr	r3, [r7, #12]
 801d17c:	2200      	movs	r2, #0
 801d17e:	601a      	str	r2, [r3, #0]
 801d180:	68fb      	ldr	r3, [r7, #12]
 801d182:	3304      	adds	r3, #4
 801d184:	60fb      	str	r3, [r7, #12]
 801d186:	68fb      	ldr	r3, [r7, #12]
 801d188:	2200      	movs	r2, #0
 801d18a:	601a      	str	r2, [r3, #0]
 801d18c:	68fb      	ldr	r3, [r7, #12]
 801d18e:	3304      	adds	r3, #4
 801d190:	60fb      	str	r3, [r7, #12]
 801d192:	68fb      	ldr	r3, [r7, #12]
 801d194:	2200      	movs	r2, #0
 801d196:	601a      	str	r2, [r3, #0]
 801d198:	68fb      	ldr	r3, [r7, #12]
 801d19a:	3304      	adds	r3, #4
 801d19c:	60fb      	str	r3, [r7, #12]
 801d19e:	68fb      	ldr	r3, [r7, #12]
 801d1a0:	2200      	movs	r2, #0
 801d1a2:	601a      	str	r2, [r3, #0]
 801d1a4:	68fb      	ldr	r3, [r7, #12]
 801d1a6:	3304      	adds	r3, #4
 801d1a8:	60fb      	str	r3, [r7, #12]
 801d1aa:	68fb      	ldr	r3, [r7, #12]
 801d1ac:	2200      	movs	r2, #0
 801d1ae:	601a      	str	r2, [r3, #0]
 801d1b0:	68fb      	ldr	r3, [r7, #12]
 801d1b2:	3304      	adds	r3, #4
 801d1b4:	60fb      	str	r3, [r7, #12]
 801d1b6:	68fb      	ldr	r3, [r7, #12]
 801d1b8:	2200      	movs	r2, #0
 801d1ba:	601a      	str	r2, [r3, #0]
 801d1bc:	68fb      	ldr	r3, [r7, #12]
 801d1be:	3304      	adds	r3, #4
 801d1c0:	60fb      	str	r3, [r7, #12]
 801d1c2:	68fb      	ldr	r3, [r7, #12]
 801d1c4:	2200      	movs	r2, #0
 801d1c6:	601a      	str	r2, [r3, #0]
 801d1c8:	68fb      	ldr	r3, [r7, #12]
 801d1ca:	3304      	adds	r3, #4
 801d1cc:	60fb      	str	r3, [r7, #12]
 801d1ce:	68fb      	ldr	r3, [r7, #12]
 801d1d0:	2200      	movs	r2, #0
 801d1d2:	601a      	str	r2, [r3, #0]
 801d1d4:	68fb      	ldr	r3, [r7, #12]
 801d1d6:	3304      	adds	r3, #4
 801d1d8:	60fb      	str	r3, [r7, #12]
        len -= 32;
 801d1da:	683b      	ldr	r3, [r7, #0]
 801d1dc:	3b20      	subs	r3, #32
 801d1de:	603b      	str	r3, [r7, #0]
    while(len > 32) {
 801d1e0:	683b      	ldr	r3, [r7, #0]
 801d1e2:	2b20      	cmp	r3, #32
 801d1e4:	d8c9      	bhi.n	801d17a <_lv_memset_00+0x50>
    }

    while(len > 4) {
 801d1e6:	e008      	b.n	801d1fa <_lv_memset_00+0xd0>
        SET32(0);
 801d1e8:	68fb      	ldr	r3, [r7, #12]
 801d1ea:	2200      	movs	r2, #0
 801d1ec:	601a      	str	r2, [r3, #0]
 801d1ee:	68fb      	ldr	r3, [r7, #12]
 801d1f0:	3304      	adds	r3, #4
 801d1f2:	60fb      	str	r3, [r7, #12]
        len -= 4;
 801d1f4:	683b      	ldr	r3, [r7, #0]
 801d1f6:	3b04      	subs	r3, #4
 801d1f8:	603b      	str	r3, [r7, #0]
    while(len > 4) {
 801d1fa:	683b      	ldr	r3, [r7, #0]
 801d1fc:	2b04      	cmp	r3, #4
 801d1fe:	d8f3      	bhi.n	801d1e8 <_lv_memset_00+0xbe>
    }

    d8 = (uint8_t *)d32;
 801d200:	68fb      	ldr	r3, [r7, #12]
 801d202:	617b      	str	r3, [r7, #20]
    while(len) {
 801d204:	e008      	b.n	801d218 <_lv_memset_00+0xee>
        SET8(0);
 801d206:	697b      	ldr	r3, [r7, #20]
 801d208:	2200      	movs	r2, #0
 801d20a:	701a      	strb	r2, [r3, #0]
 801d20c:	697b      	ldr	r3, [r7, #20]
 801d20e:	3301      	adds	r3, #1
 801d210:	617b      	str	r3, [r7, #20]
        len--;
 801d212:	683b      	ldr	r3, [r7, #0]
 801d214:	3b01      	subs	r3, #1
 801d216:	603b      	str	r3, [r7, #0]
    while(len) {
 801d218:	683b      	ldr	r3, [r7, #0]
 801d21a:	2b00      	cmp	r3, #0
 801d21c:	d1f3      	bne.n	801d206 <_lv_memset_00+0xdc>
    }
}
 801d21e:	bf00      	nop
 801d220:	371c      	adds	r7, #28
 801d222:	46bd      	mov	sp, r7
 801d224:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d228:	4770      	bx	lr

0801d22a <_lv_memset_ff>:
 * Same as `memset(dst, 0xFF, len)` but optimized for 4 byte operation.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void _lv_memset_ff(void * dst, size_t len)
{
 801d22a:	b480      	push	{r7}
 801d22c:	b087      	sub	sp, #28
 801d22e:	af00      	add	r7, sp, #0
 801d230:	6078      	str	r0, [r7, #4]
 801d232:	6039      	str	r1, [r7, #0]
    uint8_t * d8 = (uint8_t *) dst;
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	617b      	str	r3, [r7, #20]
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 801d238:	697b      	ldr	r3, [r7, #20]
 801d23a:	f003 0303 	and.w	r3, r3, #3
 801d23e:	613b      	str	r3, [r7, #16]

    /*Make the address aligned*/
    if(d_align) {
 801d240:	693b      	ldr	r3, [r7, #16]
 801d242:	2b00      	cmp	r3, #0
 801d244:	d016      	beq.n	801d274 <_lv_memset_ff+0x4a>
        d_align = ALIGN_MASK + 1 - d_align;
 801d246:	693b      	ldr	r3, [r7, #16]
 801d248:	f1c3 0304 	rsb	r3, r3, #4
 801d24c:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 801d24e:	e00b      	b.n	801d268 <_lv_memset_ff+0x3e>
            SET8(0xFF);
 801d250:	697b      	ldr	r3, [r7, #20]
 801d252:	22ff      	movs	r2, #255	; 0xff
 801d254:	701a      	strb	r2, [r3, #0]
 801d256:	697b      	ldr	r3, [r7, #20]
 801d258:	3301      	adds	r3, #1
 801d25a:	617b      	str	r3, [r7, #20]
            len--;
 801d25c:	683b      	ldr	r3, [r7, #0]
 801d25e:	3b01      	subs	r3, #1
 801d260:	603b      	str	r3, [r7, #0]
            d_align--;
 801d262:	693b      	ldr	r3, [r7, #16]
 801d264:	3b01      	subs	r3, #1
 801d266:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 801d268:	693b      	ldr	r3, [r7, #16]
 801d26a:	2b00      	cmp	r3, #0
 801d26c:	d002      	beq.n	801d274 <_lv_memset_ff+0x4a>
 801d26e:	683b      	ldr	r3, [r7, #0]
 801d270:	2b00      	cmp	r3, #0
 801d272:	d1ed      	bne.n	801d250 <_lv_memset_ff+0x26>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 801d274:	697b      	ldr	r3, [r7, #20]
 801d276:	60fb      	str	r3, [r7, #12]
    while(len > 32) {
 801d278:	e03a      	b.n	801d2f0 <_lv_memset_ff+0xc6>
        REPEAT8(SET32(0xFFFFFFFF));
 801d27a:	68fb      	ldr	r3, [r7, #12]
 801d27c:	f04f 32ff 	mov.w	r2, #4294967295
 801d280:	601a      	str	r2, [r3, #0]
 801d282:	68fb      	ldr	r3, [r7, #12]
 801d284:	3304      	adds	r3, #4
 801d286:	60fb      	str	r3, [r7, #12]
 801d288:	68fb      	ldr	r3, [r7, #12]
 801d28a:	f04f 32ff 	mov.w	r2, #4294967295
 801d28e:	601a      	str	r2, [r3, #0]
 801d290:	68fb      	ldr	r3, [r7, #12]
 801d292:	3304      	adds	r3, #4
 801d294:	60fb      	str	r3, [r7, #12]
 801d296:	68fb      	ldr	r3, [r7, #12]
 801d298:	f04f 32ff 	mov.w	r2, #4294967295
 801d29c:	601a      	str	r2, [r3, #0]
 801d29e:	68fb      	ldr	r3, [r7, #12]
 801d2a0:	3304      	adds	r3, #4
 801d2a2:	60fb      	str	r3, [r7, #12]
 801d2a4:	68fb      	ldr	r3, [r7, #12]
 801d2a6:	f04f 32ff 	mov.w	r2, #4294967295
 801d2aa:	601a      	str	r2, [r3, #0]
 801d2ac:	68fb      	ldr	r3, [r7, #12]
 801d2ae:	3304      	adds	r3, #4
 801d2b0:	60fb      	str	r3, [r7, #12]
 801d2b2:	68fb      	ldr	r3, [r7, #12]
 801d2b4:	f04f 32ff 	mov.w	r2, #4294967295
 801d2b8:	601a      	str	r2, [r3, #0]
 801d2ba:	68fb      	ldr	r3, [r7, #12]
 801d2bc:	3304      	adds	r3, #4
 801d2be:	60fb      	str	r3, [r7, #12]
 801d2c0:	68fb      	ldr	r3, [r7, #12]
 801d2c2:	f04f 32ff 	mov.w	r2, #4294967295
 801d2c6:	601a      	str	r2, [r3, #0]
 801d2c8:	68fb      	ldr	r3, [r7, #12]
 801d2ca:	3304      	adds	r3, #4
 801d2cc:	60fb      	str	r3, [r7, #12]
 801d2ce:	68fb      	ldr	r3, [r7, #12]
 801d2d0:	f04f 32ff 	mov.w	r2, #4294967295
 801d2d4:	601a      	str	r2, [r3, #0]
 801d2d6:	68fb      	ldr	r3, [r7, #12]
 801d2d8:	3304      	adds	r3, #4
 801d2da:	60fb      	str	r3, [r7, #12]
 801d2dc:	68fb      	ldr	r3, [r7, #12]
 801d2de:	f04f 32ff 	mov.w	r2, #4294967295
 801d2e2:	601a      	str	r2, [r3, #0]
 801d2e4:	68fb      	ldr	r3, [r7, #12]
 801d2e6:	3304      	adds	r3, #4
 801d2e8:	60fb      	str	r3, [r7, #12]
        len -= 32;
 801d2ea:	683b      	ldr	r3, [r7, #0]
 801d2ec:	3b20      	subs	r3, #32
 801d2ee:	603b      	str	r3, [r7, #0]
    while(len > 32) {
 801d2f0:	683b      	ldr	r3, [r7, #0]
 801d2f2:	2b20      	cmp	r3, #32
 801d2f4:	d8c1      	bhi.n	801d27a <_lv_memset_ff+0x50>
    }

    while(len > 4) {
 801d2f6:	e009      	b.n	801d30c <_lv_memset_ff+0xe2>
        SET32(0xFFFFFFFF);
 801d2f8:	68fb      	ldr	r3, [r7, #12]
 801d2fa:	f04f 32ff 	mov.w	r2, #4294967295
 801d2fe:	601a      	str	r2, [r3, #0]
 801d300:	68fb      	ldr	r3, [r7, #12]
 801d302:	3304      	adds	r3, #4
 801d304:	60fb      	str	r3, [r7, #12]
        len -= 4;
 801d306:	683b      	ldr	r3, [r7, #0]
 801d308:	3b04      	subs	r3, #4
 801d30a:	603b      	str	r3, [r7, #0]
    while(len > 4) {
 801d30c:	683b      	ldr	r3, [r7, #0]
 801d30e:	2b04      	cmp	r3, #4
 801d310:	d8f2      	bhi.n	801d2f8 <_lv_memset_ff+0xce>
    }

    d8 = (uint8_t *)d32;
 801d312:	68fb      	ldr	r3, [r7, #12]
 801d314:	617b      	str	r3, [r7, #20]
    while(len) {
 801d316:	e008      	b.n	801d32a <_lv_memset_ff+0x100>
        SET8(0xFF);
 801d318:	697b      	ldr	r3, [r7, #20]
 801d31a:	22ff      	movs	r2, #255	; 0xff
 801d31c:	701a      	strb	r2, [r3, #0]
 801d31e:	697b      	ldr	r3, [r7, #20]
 801d320:	3301      	adds	r3, #1
 801d322:	617b      	str	r3, [r7, #20]
        len--;
 801d324:	683b      	ldr	r3, [r7, #0]
 801d326:	3b01      	subs	r3, #1
 801d328:	603b      	str	r3, [r7, #0]
    while(len) {
 801d32a:	683b      	ldr	r3, [r7, #0]
 801d32c:	2b00      	cmp	r3, #0
 801d32e:	d1f3      	bne.n	801d318 <_lv_memset_ff+0xee>
    }
}
 801d330:	bf00      	nop
 801d332:	371c      	adds	r7, #28
 801d334:	46bd      	mov	sp, r7
 801d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d33a:	4770      	bx	lr

0801d33c <ent_get_next>:
 * Give the next entry after 'act_e'
 * @param act_e pointer to an entry
 * @return pointer to an entry after 'act_e'
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
 801d33c:	b480      	push	{r7}
 801d33e:	b085      	sub	sp, #20
 801d340:	af00      	add	r7, sp, #0
 801d342:	6078      	str	r0, [r7, #4]
    lv_mem_ent_t * next_e = NULL;
 801d344:	2300      	movs	r3, #0
 801d346:	60fb      	str	r3, [r7, #12]

    if(act_e == NULL) { /*NULL means: get the first entry*/
 801d348:	687b      	ldr	r3, [r7, #4]
 801d34a:	2b00      	cmp	r3, #0
 801d34c:	d103      	bne.n	801d356 <ent_get_next+0x1a>
        next_e = (lv_mem_ent_t *)work_mem;
 801d34e:	4b10      	ldr	r3, [pc, #64]	; (801d390 <ent_get_next+0x54>)
 801d350:	681b      	ldr	r3, [r3, #0]
 801d352:	60fb      	str	r3, [r7, #12]
 801d354:	e014      	b.n	801d380 <ent_get_next+0x44>
    }
    else {   /*Get the next entry */
        uint8_t * data = &act_e->first_data;
 801d356:	687b      	ldr	r3, [r7, #4]
 801d358:	3304      	adds	r3, #4
 801d35a:	60bb      	str	r3, [r7, #8]
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 801d35c:	687b      	ldr	r3, [r7, #4]
 801d35e:	681b      	ldr	r3, [r3, #0]
 801d360:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801d364:	461a      	mov	r2, r3
 801d366:	68bb      	ldr	r3, [r7, #8]
 801d368:	4413      	add	r3, r2
 801d36a:	60fb      	str	r3, [r7, #12]

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 801d36c:	68fb      	ldr	r3, [r7, #12]
 801d36e:	1d1a      	adds	r2, r3, #4
 801d370:	4b07      	ldr	r3, [pc, #28]	; (801d390 <ent_get_next+0x54>)
 801d372:	681b      	ldr	r3, [r3, #0]
 801d374:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801d378:	429a      	cmp	r2, r3
 801d37a:	d301      	bcc.n	801d380 <ent_get_next+0x44>
 801d37c:	2300      	movs	r3, #0
 801d37e:	60fb      	str	r3, [r7, #12]
    }

    return next_e;
 801d380:	68fb      	ldr	r3, [r7, #12]
}
 801d382:	4618      	mov	r0, r3
 801d384:	3714      	adds	r7, #20
 801d386:	46bd      	mov	sp, r7
 801d388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d38c:	4770      	bx	lr
 801d38e:	bf00      	nop
 801d390:	2001942c 	.word	0x2001942c

0801d394 <ent_alloc>:
 * @param e try to allocate to this entry
 * @param size size of the new memory in bytes
 * @return pointer to the allocated memory or NULL if not enough memory in the entry
 */
static void * ent_alloc(lv_mem_ent_t * e, size_t size)
{
 801d394:	b580      	push	{r7, lr}
 801d396:	b084      	sub	sp, #16
 801d398:	af00      	add	r7, sp, #0
 801d39a:	6078      	str	r0, [r7, #4]
 801d39c:	6039      	str	r1, [r7, #0]
    void * alloc = NULL;
 801d39e:	2300      	movs	r3, #0
 801d3a0:	60fb      	str	r3, [r7, #12]
    /*If the memory is free and big enough then use it */
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 801d3a2:	687b      	ldr	r3, [r7, #4]
 801d3a4:	781b      	ldrb	r3, [r3, #0]
 801d3a6:	f003 0301 	and.w	r3, r3, #1
 801d3aa:	b2db      	uxtb	r3, r3
 801d3ac:	2b00      	cmp	r3, #0
 801d3ae:	d113      	bne.n	801d3d8 <ent_alloc+0x44>
 801d3b0:	687b      	ldr	r3, [r7, #4]
 801d3b2:	681b      	ldr	r3, [r3, #0]
 801d3b4:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801d3b8:	461a      	mov	r2, r3
 801d3ba:	683b      	ldr	r3, [r7, #0]
 801d3bc:	4293      	cmp	r3, r2
 801d3be:	d80b      	bhi.n	801d3d8 <ent_alloc+0x44>
        /*Truncate the entry to the desired size */
        ent_trunc(e, size);
 801d3c0:	6839      	ldr	r1, [r7, #0]
 801d3c2:	6878      	ldr	r0, [r7, #4]
 801d3c4:	f000 f80d 	bl	801d3e2 <ent_trunc>
        e->header.s.used = 1;
 801d3c8:	687a      	ldr	r2, [r7, #4]
 801d3ca:	7813      	ldrb	r3, [r2, #0]
 801d3cc:	f043 0301 	orr.w	r3, r3, #1
 801d3d0:	7013      	strb	r3, [r2, #0]

        /*Save the allocated data*/
        alloc = &e->first_data;
 801d3d2:	687b      	ldr	r3, [r7, #4]
 801d3d4:	3304      	adds	r3, #4
 801d3d6:	60fb      	str	r3, [r7, #12]
    }

    return alloc;
 801d3d8:	68fb      	ldr	r3, [r7, #12]
}
 801d3da:	4618      	mov	r0, r3
 801d3dc:	3710      	adds	r7, #16
 801d3de:	46bd      	mov	sp, r7
 801d3e0:	bd80      	pop	{r7, pc}

0801d3e2 <ent_trunc>:
 * Truncate the data of entry to the given size
 * @param e Pointer to an entry
 * @param size new size in bytes
 */
static void ent_trunc(lv_mem_ent_t * e, size_t size)
{
 801d3e2:	b480      	push	{r7}
 801d3e4:	b085      	sub	sp, #20
 801d3e6:	af00      	add	r7, sp, #0
 801d3e8:	6078      	str	r0, [r7, #4]
 801d3ea:	6039      	str	r1, [r7, #0]
    /*Round the size up to ALIGN_MASK*/
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
 801d3ec:	683b      	ldr	r3, [r7, #0]
 801d3ee:	3303      	adds	r3, #3
 801d3f0:	f023 0303 	bic.w	r3, r3, #3
 801d3f4:	603b      	str	r3, [r7, #0]

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 801d3f6:	687b      	ldr	r3, [r7, #4]
 801d3f8:	681b      	ldr	r3, [r3, #0]
 801d3fa:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801d3fe:	461a      	mov	r2, r3
 801d400:	683b      	ldr	r3, [r7, #0]
 801d402:	3304      	adds	r3, #4
 801d404:	429a      	cmp	r2, r3
 801d406:	d104      	bne.n	801d412 <ent_trunc+0x30>
        size = e->header.s.d_size;
 801d408:	687b      	ldr	r3, [r7, #4]
 801d40a:	681b      	ldr	r3, [r3, #0]
 801d40c:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801d410:	603b      	str	r3, [r7, #0]
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
 801d412:	687b      	ldr	r3, [r7, #4]
 801d414:	681b      	ldr	r3, [r3, #0]
 801d416:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801d41a:	461a      	mov	r2, r3
 801d41c:	683b      	ldr	r3, [r7, #0]
 801d41e:	4293      	cmp	r3, r2
 801d420:	d022      	beq.n	801d468 <ent_trunc+0x86>
        uint8_t * e_data             = &e->first_data;
 801d422:	687b      	ldr	r3, [r7, #4]
 801d424:	3304      	adds	r3, #4
 801d426:	60fb      	str	r3, [r7, #12]
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
 801d428:	68fa      	ldr	r2, [r7, #12]
 801d42a:	683b      	ldr	r3, [r7, #0]
 801d42c:	4413      	add	r3, r2
 801d42e:	60bb      	str	r3, [r7, #8]
        after_new_e->header.s.used   = 0;
 801d430:	68ba      	ldr	r2, [r7, #8]
 801d432:	7813      	ldrb	r3, [r2, #0]
 801d434:	f36f 0300 	bfc	r3, #0, #1
 801d438:	7013      	strb	r3, [r2, #0]
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	681b      	ldr	r3, [r3, #0]
 801d43e:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801d442:	461a      	mov	r2, r3
 801d444:	683b      	ldr	r3, [r7, #0]
 801d446:	1ad3      	subs	r3, r2, r3
 801d448:	3b04      	subs	r3, #4
 801d44a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801d44e:	68ba      	ldr	r2, [r7, #8]
 801d450:	6813      	ldr	r3, [r2, #0]
 801d452:	f361 035f 	bfi	r3, r1, #1, #31
 801d456:	6013      	str	r3, [r2, #0]

        /* Set the new size for the original entry */
        e->header.s.d_size = (uint32_t)size;
 801d458:	683b      	ldr	r3, [r7, #0]
 801d45a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801d45e:	687a      	ldr	r2, [r7, #4]
 801d460:	6813      	ldr	r3, [r2, #0]
 801d462:	f361 035f 	bfi	r3, r1, #1, #31
 801d466:	6013      	str	r3, [r2, #0]
    }
}
 801d468:	bf00      	nop
 801d46a:	3714      	adds	r7, #20
 801d46c:	46bd      	mov	sp, r7
 801d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d472:	4770      	bx	lr

0801d474 <_lv_task_core_init>:

/**
 * Init the lv_task module
 */
void _lv_task_core_init(void)
{
 801d474:	b580      	push	{r7, lr}
 801d476:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 801d478:	2118      	movs	r1, #24
 801d47a:	4804      	ldr	r0, [pc, #16]	; (801d48c <_lv_task_core_init+0x18>)
 801d47c:	f7fe fd9e 	bl	801bfbc <_lv_ll_init>

    /*Initially enable the lv_task handling*/
    lv_task_enable(true);
 801d480:	2001      	movs	r0, #1
 801d482:	f000 fa63 	bl	801d94c <lv_task_enable>
}
 801d486:	bf00      	nop
 801d488:	bd80      	pop	{r7, pc}
 801d48a:	bf00      	nop
 801d48c:	20021780 	.word	0x20021780

0801d490 <lv_task_handler>:
/**
 * Call it periodically to handle lv_tasks.
 * @return the time after which it must be called again
 */
LV_ATTRIBUTE_TASK_HANDLER uint32_t lv_task_handler(void)
{
 801d490:	b580      	push	{r7, lr}
 801d492:	b088      	sub	sp, #32
 801d494:	af00      	add	r7, sp, #0
    LV_LOG_TRACE("lv_task_handler started");

    /*Avoid concurrent running of the task handler*/
    static bool already_running = false;
    if(already_running) return 1;
 801d496:	4b8e      	ldr	r3, [pc, #568]	; (801d6d0 <lv_task_handler+0x240>)
 801d498:	781b      	ldrb	r3, [r3, #0]
 801d49a:	2b00      	cmp	r3, #0
 801d49c:	d001      	beq.n	801d4a2 <lv_task_handler+0x12>
 801d49e:	2301      	movs	r3, #1
 801d4a0:	e112      	b.n	801d6c8 <lv_task_handler+0x238>
    already_running = true;
 801d4a2:	4b8b      	ldr	r3, [pc, #556]	; (801d6d0 <lv_task_handler+0x240>)
 801d4a4:	2201      	movs	r2, #1
 801d4a6:	701a      	strb	r2, [r3, #0]

    if(lv_task_run == false) {
 801d4a8:	4b8a      	ldr	r3, [pc, #552]	; (801d6d4 <lv_task_handler+0x244>)
 801d4aa:	781b      	ldrb	r3, [r3, #0]
 801d4ac:	f083 0301 	eor.w	r3, r3, #1
 801d4b0:	b2db      	uxtb	r3, r3
 801d4b2:	2b00      	cmp	r3, #0
 801d4b4:	d004      	beq.n	801d4c0 <lv_task_handler+0x30>
        already_running = false; /*Release mutex*/
 801d4b6:	4b86      	ldr	r3, [pc, #536]	; (801d6d0 <lv_task_handler+0x240>)
 801d4b8:	2200      	movs	r2, #0
 801d4ba:	701a      	strb	r2, [r3, #0]
        return 1;
 801d4bc:	2301      	movs	r3, #1
 801d4be:	e103      	b.n	801d6c8 <lv_task_handler+0x238>
    }

    static uint32_t idle_period_start = 0;
    static uint32_t busy_time         = 0;

    uint32_t handler_start = lv_tick_get();
 801d4c0:	f7fd f97c 	bl	801a7bc <lv_tick_get>
 801d4c4:	60f8      	str	r0, [r7, #12]

    /* Run all task from the highest to the lowest priority
     * If a lower priority task is executed check task again from the highest priority
     * but on the priority of executed tasks don't run tasks before the executed*/
    lv_task_t * task_interrupter = NULL;
 801d4c6:	2300      	movs	r3, #0
 801d4c8:	61fb      	str	r3, [r7, #28]
    lv_task_t * next;
    bool end_flag;
    do {
        end_flag                 = true;
 801d4ca:	2301      	movs	r3, #1
 801d4cc:	75fb      	strb	r3, [r7, #23]
        task_deleted             = false;
 801d4ce:	4b82      	ldr	r3, [pc, #520]	; (801d6d8 <lv_task_handler+0x248>)
 801d4d0:	2200      	movs	r2, #0
 801d4d2:	701a      	strb	r2, [r3, #0]
        task_created             = false;
 801d4d4:	4b81      	ldr	r3, [pc, #516]	; (801d6dc <lv_task_handler+0x24c>)
 801d4d6:	2200      	movs	r2, #0
 801d4d8:	701a      	strb	r2, [r3, #0]
        task_list_changed        = false;
 801d4da:	4b81      	ldr	r3, [pc, #516]	; (801d6e0 <lv_task_handler+0x250>)
 801d4dc:	2200      	movs	r2, #0
 801d4de:	701a      	strb	r2, [r3, #0]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 801d4e0:	4880      	ldr	r0, [pc, #512]	; (801d6e4 <lv_task_handler+0x254>)
 801d4e2:	f7fe fee1 	bl	801c2a8 <_lv_ll_get_head>
 801d4e6:	4602      	mov	r2, r0
 801d4e8:	4b7f      	ldr	r3, [pc, #508]	; (801d6e8 <lv_task_handler+0x258>)
 801d4ea:	601a      	str	r2, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 801d4ec:	e086      	b.n	801d5fc <lv_task_handler+0x16c>
            /* The task might be deleted if it runs only once ('once = 1')
             * So get next element until the current is surely valid*/
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 801d4ee:	4b7e      	ldr	r3, [pc, #504]	; (801d6e8 <lv_task_handler+0x258>)
 801d4f0:	681b      	ldr	r3, [r3, #0]
 801d4f2:	4619      	mov	r1, r3
 801d4f4:	487b      	ldr	r0, [pc, #492]	; (801d6e4 <lv_task_handler+0x254>)
 801d4f6:	f7fe fefd 	bl	801c2f4 <_lv_ll_get_next>
 801d4fa:	61b8      	str	r0, [r7, #24]

            /*We reach priority of the turned off task. There is nothing more to do.*/
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_OFF) {
 801d4fc:	4b7a      	ldr	r3, [pc, #488]	; (801d6e8 <lv_task_handler+0x258>)
 801d4fe:	681b      	ldr	r3, [r3, #0]
 801d500:	7d1b      	ldrb	r3, [r3, #20]
 801d502:	f003 0307 	and.w	r3, r3, #7
 801d506:	b2db      	uxtb	r3, r3
 801d508:	2b00      	cmp	r3, #0
 801d50a:	d07d      	beq.n	801d608 <lv_task_handler+0x178>
                break;
            }

            /*Here is the interrupter task. Don't execute it again.*/
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 801d50c:	4b76      	ldr	r3, [pc, #472]	; (801d6e8 <lv_task_handler+0x258>)
 801d50e:	681b      	ldr	r3, [r3, #0]
 801d510:	69fa      	ldr	r2, [r7, #28]
 801d512:	429a      	cmp	r2, r3
 801d514:	d105      	bne.n	801d522 <lv_task_handler+0x92>
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 801d516:	2300      	movs	r3, #0
 801d518:	61fb      	str	r3, [r7, #28]
                                            the interrupter is not interesting anymore*/
                LV_GC_ROOT(_lv_task_act) = next;
 801d51a:	4a73      	ldr	r2, [pc, #460]	; (801d6e8 <lv_task_handler+0x258>)
 801d51c:	69bb      	ldr	r3, [r7, #24]
 801d51e:	6013      	str	r3, [r2, #0]
                continue; /*Load the next task*/
 801d520:	e06c      	b.n	801d5fc <lv_task_handler+0x16c>
            }

            /*Just try to run the tasks with highest priority.*/
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_HIGHEST) {
 801d522:	4b71      	ldr	r3, [pc, #452]	; (801d6e8 <lv_task_handler+0x258>)
 801d524:	681b      	ldr	r3, [r3, #0]
 801d526:	7d1b      	ldrb	r3, [r3, #20]
 801d528:	f003 0307 	and.w	r3, r3, #7
 801d52c:	b2db      	uxtb	r3, r3
 801d52e:	2b05      	cmp	r3, #5
 801d530:	d105      	bne.n	801d53e <lv_task_handler+0xae>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 801d532:	4b6d      	ldr	r3, [pc, #436]	; (801d6e8 <lv_task_handler+0x258>)
 801d534:	681b      	ldr	r3, [r3, #0]
 801d536:	4618      	mov	r0, r3
 801d538:	f000 fa18 	bl	801d96c <lv_task_exec>
 801d53c:	e047      	b.n	801d5ce <lv_task_handler+0x13e>
            }
            /*Tasks with higher priority than the interrupted shall be run in every case*/
            else if(task_interrupter) {
 801d53e:	69fb      	ldr	r3, [r7, #28]
 801d540:	2b00      	cmp	r3, #0
 801d542:	d028      	beq.n	801d596 <lv_task_handler+0x106>
                if(LV_GC_ROOT(_lv_task_act)->prio > task_interrupter->prio) {
 801d544:	4b68      	ldr	r3, [pc, #416]	; (801d6e8 <lv_task_handler+0x258>)
 801d546:	681b      	ldr	r3, [r3, #0]
 801d548:	7d1b      	ldrb	r3, [r3, #20]
 801d54a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801d54e:	b2da      	uxtb	r2, r3
 801d550:	69fb      	ldr	r3, [r7, #28]
 801d552:	7d1b      	ldrb	r3, [r3, #20]
 801d554:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801d558:	b2db      	uxtb	r3, r3
 801d55a:	429a      	cmp	r2, r3
 801d55c:	d937      	bls.n	801d5ce <lv_task_handler+0x13e>
                    if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 801d55e:	4b62      	ldr	r3, [pc, #392]	; (801d6e8 <lv_task_handler+0x258>)
 801d560:	681b      	ldr	r3, [r3, #0]
 801d562:	4618      	mov	r0, r3
 801d564:	f000 fa02 	bl	801d96c <lv_task_exec>
 801d568:	4603      	mov	r3, r0
 801d56a:	2b00      	cmp	r3, #0
 801d56c:	d02f      	beq.n	801d5ce <lv_task_handler+0x13e>
                        if(!task_created && !task_deleted) {
 801d56e:	4b5b      	ldr	r3, [pc, #364]	; (801d6dc <lv_task_handler+0x24c>)
 801d570:	781b      	ldrb	r3, [r3, #0]
 801d572:	f083 0301 	eor.w	r3, r3, #1
 801d576:	b2db      	uxtb	r3, r3
 801d578:	2b00      	cmp	r3, #0
 801d57a:	d028      	beq.n	801d5ce <lv_task_handler+0x13e>
 801d57c:	4b56      	ldr	r3, [pc, #344]	; (801d6d8 <lv_task_handler+0x248>)
 801d57e:	781b      	ldrb	r3, [r3, #0]
 801d580:	f083 0301 	eor.w	r3, r3, #1
 801d584:	b2db      	uxtb	r3, r3
 801d586:	2b00      	cmp	r3, #0
 801d588:	d021      	beq.n	801d5ce <lv_task_handler+0x13e>
                            /*Check all tasks again from the highest priority */
                            task_interrupter = LV_GC_ROOT(_lv_task_act);
 801d58a:	4b57      	ldr	r3, [pc, #348]	; (801d6e8 <lv_task_handler+0x258>)
 801d58c:	681b      	ldr	r3, [r3, #0]
 801d58e:	61fb      	str	r3, [r7, #28]
                            end_flag = false;
 801d590:	2300      	movs	r3, #0
 801d592:	75fb      	strb	r3, [r7, #23]
                            break;
 801d594:	e039      	b.n	801d60a <lv_task_handler+0x17a>
                }
            }
            /* It is no interrupter task or we already reached it earlier.
             * Just run the remaining tasks*/
            else {
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 801d596:	4b54      	ldr	r3, [pc, #336]	; (801d6e8 <lv_task_handler+0x258>)
 801d598:	681b      	ldr	r3, [r3, #0]
 801d59a:	4618      	mov	r0, r3
 801d59c:	f000 f9e6 	bl	801d96c <lv_task_exec>
 801d5a0:	4603      	mov	r3, r0
 801d5a2:	2b00      	cmp	r3, #0
 801d5a4:	d013      	beq.n	801d5ce <lv_task_handler+0x13e>
                    if(!task_created && !task_deleted) {
 801d5a6:	4b4d      	ldr	r3, [pc, #308]	; (801d6dc <lv_task_handler+0x24c>)
 801d5a8:	781b      	ldrb	r3, [r3, #0]
 801d5aa:	f083 0301 	eor.w	r3, r3, #1
 801d5ae:	b2db      	uxtb	r3, r3
 801d5b0:	2b00      	cmp	r3, #0
 801d5b2:	d00c      	beq.n	801d5ce <lv_task_handler+0x13e>
 801d5b4:	4b48      	ldr	r3, [pc, #288]	; (801d6d8 <lv_task_handler+0x248>)
 801d5b6:	781b      	ldrb	r3, [r3, #0]
 801d5b8:	f083 0301 	eor.w	r3, r3, #1
 801d5bc:	b2db      	uxtb	r3, r3
 801d5be:	2b00      	cmp	r3, #0
 801d5c0:	d005      	beq.n	801d5ce <lv_task_handler+0x13e>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 801d5c2:	4b49      	ldr	r3, [pc, #292]	; (801d6e8 <lv_task_handler+0x258>)
 801d5c4:	681b      	ldr	r3, [r3, #0]
 801d5c6:	61fb      	str	r3, [r7, #28]
                        end_flag         = false;
 801d5c8:	2300      	movs	r3, #0
 801d5ca:	75fb      	strb	r3, [r7, #23]
                        break;
 801d5cc:	e01d      	b.n	801d60a <lv_task_handler+0x17a>
                    }
                }
            }

            /*If a task was created or deleted then this or the next item might be corrupted*/
            if(task_created || task_deleted) {
 801d5ce:	4b43      	ldr	r3, [pc, #268]	; (801d6dc <lv_task_handler+0x24c>)
 801d5d0:	781b      	ldrb	r3, [r3, #0]
 801d5d2:	2b00      	cmp	r3, #0
 801d5d4:	d103      	bne.n	801d5de <lv_task_handler+0x14e>
 801d5d6:	4b40      	ldr	r3, [pc, #256]	; (801d6d8 <lv_task_handler+0x248>)
 801d5d8:	781b      	ldrb	r3, [r3, #0]
 801d5da:	2b00      	cmp	r3, #0
 801d5dc:	d002      	beq.n	801d5e4 <lv_task_handler+0x154>
                task_interrupter = NULL;
 801d5de:	2300      	movs	r3, #0
 801d5e0:	61fb      	str	r3, [r7, #28]
                break;
 801d5e2:	e012      	b.n	801d60a <lv_task_handler+0x17a>
            }

            if(task_list_changed) {
 801d5e4:	4b3e      	ldr	r3, [pc, #248]	; (801d6e0 <lv_task_handler+0x250>)
 801d5e6:	781b      	ldrb	r3, [r3, #0]
 801d5e8:	2b00      	cmp	r3, #0
 801d5ea:	d004      	beq.n	801d5f6 <lv_task_handler+0x166>
                task_interrupter = NULL;
 801d5ec:	2300      	movs	r3, #0
 801d5ee:	61fb      	str	r3, [r7, #28]
                end_flag = false;
 801d5f0:	2300      	movs	r3, #0
 801d5f2:	75fb      	strb	r3, [r7, #23]
                break;
 801d5f4:	e009      	b.n	801d60a <lv_task_handler+0x17a>
            }

            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
 801d5f6:	4a3c      	ldr	r2, [pc, #240]	; (801d6e8 <lv_task_handler+0x258>)
 801d5f8:	69bb      	ldr	r3, [r7, #24]
 801d5fa:	6013      	str	r3, [r2, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 801d5fc:	4b3a      	ldr	r3, [pc, #232]	; (801d6e8 <lv_task_handler+0x258>)
 801d5fe:	681b      	ldr	r3, [r3, #0]
 801d600:	2b00      	cmp	r3, #0
 801d602:	f47f af74 	bne.w	801d4ee <lv_task_handler+0x5e>
 801d606:	e000      	b.n	801d60a <lv_task_handler+0x17a>
                break;
 801d608:	bf00      	nop
        }
    } while(!end_flag);
 801d60a:	7dfb      	ldrb	r3, [r7, #23]
 801d60c:	f083 0301 	eor.w	r3, r3, #1
 801d610:	b2db      	uxtb	r3, r3
 801d612:	2b00      	cmp	r3, #0
 801d614:	f47f af59 	bne.w	801d4ca <lv_task_handler+0x3a>

    uint32_t time_till_next = LV_NO_TASK_READY;
 801d618:	f04f 33ff 	mov.w	r3, #4294967295
 801d61c:	613b      	str	r3, [r7, #16]
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 801d61e:	4831      	ldr	r0, [pc, #196]	; (801d6e4 <lv_task_handler+0x254>)
 801d620:	f7fe fe42 	bl	801c2a8 <_lv_ll_get_head>
 801d624:	61b8      	str	r0, [r7, #24]
    while(next && next->prio != LV_TASK_PRIO_OFF) {
 801d626:	e00e      	b.n	801d646 <lv_task_handler+0x1b6>
        uint32_t delay = lv_task_time_remaining(next);
 801d628:	69b8      	ldr	r0, [r7, #24]
 801d62a:	f000 f9d9 	bl	801d9e0 <lv_task_time_remaining>
 801d62e:	60b8      	str	r0, [r7, #8]
        if(delay < time_till_next)
 801d630:	68ba      	ldr	r2, [r7, #8]
 801d632:	693b      	ldr	r3, [r7, #16]
 801d634:	429a      	cmp	r2, r3
 801d636:	d201      	bcs.n	801d63c <lv_task_handler+0x1ac>
            time_till_next = delay;
 801d638:	68bb      	ldr	r3, [r7, #8]
 801d63a:	613b      	str	r3, [r7, #16]

        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
 801d63c:	69b9      	ldr	r1, [r7, #24]
 801d63e:	4829      	ldr	r0, [pc, #164]	; (801d6e4 <lv_task_handler+0x254>)
 801d640:	f7fe fe58 	bl	801c2f4 <_lv_ll_get_next>
 801d644:	61b8      	str	r0, [r7, #24]
    while(next && next->prio != LV_TASK_PRIO_OFF) {
 801d646:	69bb      	ldr	r3, [r7, #24]
 801d648:	2b00      	cmp	r3, #0
 801d64a:	d006      	beq.n	801d65a <lv_task_handler+0x1ca>
 801d64c:	69bb      	ldr	r3, [r7, #24]
 801d64e:	7d1b      	ldrb	r3, [r3, #20]
 801d650:	f003 0307 	and.w	r3, r3, #7
 801d654:	b2db      	uxtb	r3, r3
 801d656:	2b00      	cmp	r3, #0
 801d658:	d1e6      	bne.n	801d628 <lv_task_handler+0x198>
    }

    busy_time += lv_tick_elaps(handler_start);
 801d65a:	68f8      	ldr	r0, [r7, #12]
 801d65c:	f7fd f8c8 	bl	801a7f0 <lv_tick_elaps>
 801d660:	4602      	mov	r2, r0
 801d662:	4b22      	ldr	r3, [pc, #136]	; (801d6ec <lv_task_handler+0x25c>)
 801d664:	681b      	ldr	r3, [r3, #0]
 801d666:	4413      	add	r3, r2
 801d668:	4a20      	ldr	r2, [pc, #128]	; (801d6ec <lv_task_handler+0x25c>)
 801d66a:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 801d66c:	4b20      	ldr	r3, [pc, #128]	; (801d6f0 <lv_task_handler+0x260>)
 801d66e:	681b      	ldr	r3, [r3, #0]
 801d670:	4618      	mov	r0, r3
 801d672:	f7fd f8bd 	bl	801a7f0 <lv_tick_elaps>
 801d676:	6078      	str	r0, [r7, #4]
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 801d678:	687b      	ldr	r3, [r7, #4]
 801d67a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801d67e:	d31f      	bcc.n	801d6c0 <lv_task_handler+0x230>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 801d680:	4b1a      	ldr	r3, [pc, #104]	; (801d6ec <lv_task_handler+0x25c>)
 801d682:	681b      	ldr	r3, [r3, #0]
 801d684:	2264      	movs	r2, #100	; 0x64
 801d686:	fb02 f203 	mul.w	r2, r2, r3
 801d68a:	687b      	ldr	r3, [r7, #4]
 801d68c:	fbb2 f3f3 	udiv	r3, r2, r3
 801d690:	b2da      	uxtb	r2, r3
 801d692:	4b18      	ldr	r3, [pc, #96]	; (801d6f4 <lv_task_handler+0x264>)
 801d694:	701a      	strb	r2, [r3, #0]
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 801d696:	4b17      	ldr	r3, [pc, #92]	; (801d6f4 <lv_task_handler+0x264>)
 801d698:	781b      	ldrb	r3, [r3, #0]
 801d69a:	2b64      	cmp	r3, #100	; 0x64
 801d69c:	d805      	bhi.n	801d6aa <lv_task_handler+0x21a>
 801d69e:	4b15      	ldr	r3, [pc, #84]	; (801d6f4 <lv_task_handler+0x264>)
 801d6a0:	781b      	ldrb	r3, [r3, #0]
 801d6a2:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 801d6a6:	b2db      	uxtb	r3, r3
 801d6a8:	e000      	b.n	801d6ac <lv_task_handler+0x21c>
 801d6aa:	2300      	movs	r3, #0
 801d6ac:	4a11      	ldr	r2, [pc, #68]	; (801d6f4 <lv_task_handler+0x264>)
 801d6ae:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 801d6b0:	4b0e      	ldr	r3, [pc, #56]	; (801d6ec <lv_task_handler+0x25c>)
 801d6b2:	2200      	movs	r2, #0
 801d6b4:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
 801d6b6:	f7fd f881 	bl	801a7bc <lv_tick_get>
 801d6ba:	4602      	mov	r2, r0
 801d6bc:	4b0c      	ldr	r3, [pc, #48]	; (801d6f0 <lv_task_handler+0x260>)
 801d6be:	601a      	str	r2, [r3, #0]
    }

    already_running = false; /*Release the mutex*/
 801d6c0:	4b03      	ldr	r3, [pc, #12]	; (801d6d0 <lv_task_handler+0x240>)
 801d6c2:	2200      	movs	r2, #0
 801d6c4:	701a      	strb	r2, [r3, #0]

    LV_LOG_TRACE("lv_task_handler ready");
    return time_till_next;
 801d6c6:	693b      	ldr	r3, [r7, #16]
}
 801d6c8:	4618      	mov	r0, r3
 801d6ca:	3720      	adds	r7, #32
 801d6cc:	46bd      	mov	sp, r7
 801d6ce:	bd80      	pop	{r7, pc}
 801d6d0:	2002145f 	.word	0x2002145f
 801d6d4:	2002145a 	.word	0x2002145a
 801d6d8:	2002145c 	.word	0x2002145c
 801d6dc:	2002145e 	.word	0x2002145e
 801d6e0:	2002145d 	.word	0x2002145d
 801d6e4:	20021780 	.word	0x20021780
 801d6e8:	20021850 	.word	0x20021850
 801d6ec:	20021460 	.word	0x20021460
 801d6f0:	20021464 	.word	0x20021464
 801d6f4:	2002145b 	.word	0x2002145b

0801d6f8 <lv_task_create>:
 * @param prio priority of the task (LV_TASK_PRIO_OFF means the task is stopped)
 * @param user_data custom parameter
 * @return pointer to the new task
 */
lv_task_t * lv_task_create(lv_task_cb_t task_xcb, uint32_t period, lv_task_prio_t prio, void * user_data)
{
 801d6f8:	b590      	push	{r4, r7, lr}
 801d6fa:	b087      	sub	sp, #28
 801d6fc:	af00      	add	r7, sp, #0
 801d6fe:	60f8      	str	r0, [r7, #12]
 801d700:	60b9      	str	r1, [r7, #8]
 801d702:	603b      	str	r3, [r7, #0]
 801d704:	4613      	mov	r3, r2
 801d706:	71fb      	strb	r3, [r7, #7]
    lv_task_t * new_task = NULL;
 801d708:	2300      	movs	r3, #0
 801d70a:	617b      	str	r3, [r7, #20]
    lv_task_t * tmp;

    /*Create task lists in order of priority from high to low*/
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 801d70c:	484a      	ldr	r0, [pc, #296]	; (801d838 <lv_task_create+0x140>)
 801d70e:	f7fe fdcb 	bl	801c2a8 <_lv_ll_get_head>
 801d712:	6138      	str	r0, [r7, #16]

    /*It's the first task*/
    if(NULL == tmp) {
 801d714:	693b      	ldr	r3, [r7, #16]
 801d716:	2b00      	cmp	r3, #0
 801d718:	d11a      	bne.n	801d750 <lv_task_create+0x58>
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 801d71a:	4847      	ldr	r0, [pc, #284]	; (801d838 <lv_task_create+0x140>)
 801d71c:	f7fe fc67 	bl	801bfee <_lv_ll_ins_head>
 801d720:	6178      	str	r0, [r7, #20]
        LV_ASSERT_MEM(new_task);
 801d722:	6978      	ldr	r0, [r7, #20]
 801d724:	f7fe fa0a 	bl	801bb3c <lv_debug_check_null>
 801d728:	4603      	mov	r3, r0
 801d72a:	f083 0301 	eor.w	r3, r3, #1
 801d72e:	b2db      	uxtb	r3, r3
 801d730:	2b00      	cmp	r3, #0
 801d732:	d008      	beq.n	801d746 <lv_task_create+0x4e>
 801d734:	697b      	ldr	r3, [r7, #20]
 801d736:	f04f 0400 	mov.w	r4, #0
 801d73a:	461a      	mov	r2, r3
 801d73c:	4623      	mov	r3, r4
 801d73e:	483f      	ldr	r0, [pc, #252]	; (801d83c <lv_task_create+0x144>)
 801d740:	f7fe fa0c 	bl	801bb5c <lv_debug_log_error>
 801d744:	e7fe      	b.n	801d744 <lv_task_create+0x4c>
        if(new_task == NULL) return NULL;
 801d746:	697b      	ldr	r3, [r7, #20]
 801d748:	2b00      	cmp	r3, #0
 801d74a:	d14e      	bne.n	801d7ea <lv_task_create+0xf2>
 801d74c:	2300      	movs	r3, #0
 801d74e:	e06e      	b.n	801d82e <lv_task_create+0x136>
    }
    /*Insert the new task to proper place according to its priority*/
    else {
        do {
            if(tmp->prio <= prio) {
 801d750:	693b      	ldr	r3, [r7, #16]
 801d752:	7d1b      	ldrb	r3, [r3, #20]
 801d754:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801d758:	b2db      	uxtb	r3, r3
 801d75a:	461a      	mov	r2, r3
 801d75c:	79fb      	ldrb	r3, [r7, #7]
 801d75e:	429a      	cmp	r2, r3
 801d760:	dc1b      	bgt.n	801d79a <lv_task_create+0xa2>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 801d762:	6939      	ldr	r1, [r7, #16]
 801d764:	4834      	ldr	r0, [pc, #208]	; (801d838 <lv_task_create+0x140>)
 801d766:	f7fe fc76 	bl	801c056 <_lv_ll_ins_prev>
 801d76a:	6178      	str	r0, [r7, #20]
                LV_ASSERT_MEM(new_task);
 801d76c:	6978      	ldr	r0, [r7, #20]
 801d76e:	f7fe f9e5 	bl	801bb3c <lv_debug_check_null>
 801d772:	4603      	mov	r3, r0
 801d774:	f083 0301 	eor.w	r3, r3, #1
 801d778:	b2db      	uxtb	r3, r3
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	d008      	beq.n	801d790 <lv_task_create+0x98>
 801d77e:	697b      	ldr	r3, [r7, #20]
 801d780:	f04f 0400 	mov.w	r4, #0
 801d784:	461a      	mov	r2, r3
 801d786:	4623      	mov	r3, r4
 801d788:	482c      	ldr	r0, [pc, #176]	; (801d83c <lv_task_create+0x144>)
 801d78a:	f7fe f9e7 	bl	801bb5c <lv_debug_log_error>
 801d78e:	e7fe      	b.n	801d78e <lv_task_create+0x96>
                if(new_task == NULL) return NULL;
 801d790:	697b      	ldr	r3, [r7, #20]
 801d792:	2b00      	cmp	r3, #0
 801d794:	d10a      	bne.n	801d7ac <lv_task_create+0xb4>
 801d796:	2300      	movs	r3, #0
 801d798:	e049      	b.n	801d82e <lv_task_create+0x136>
                break;
            }
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 801d79a:	6939      	ldr	r1, [r7, #16]
 801d79c:	4826      	ldr	r0, [pc, #152]	; (801d838 <lv_task_create+0x140>)
 801d79e:	f7fe fda9 	bl	801c2f4 <_lv_ll_get_next>
 801d7a2:	6138      	str	r0, [r7, #16]
        } while(tmp != NULL);
 801d7a4:	693b      	ldr	r3, [r7, #16]
 801d7a6:	2b00      	cmp	r3, #0
 801d7a8:	d1d2      	bne.n	801d750 <lv_task_create+0x58>
 801d7aa:	e000      	b.n	801d7ae <lv_task_create+0xb6>
                break;
 801d7ac:	bf00      	nop

        /*Only too high priority tasks were found. Add the task to the end*/
        if(tmp == NULL) {
 801d7ae:	693b      	ldr	r3, [r7, #16]
 801d7b0:	2b00      	cmp	r3, #0
 801d7b2:	d11a      	bne.n	801d7ea <lv_task_create+0xf2>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 801d7b4:	4820      	ldr	r0, [pc, #128]	; (801d838 <lv_task_create+0x140>)
 801d7b6:	f7fe fc95 	bl	801c0e4 <_lv_ll_ins_tail>
 801d7ba:	6178      	str	r0, [r7, #20]
            LV_ASSERT_MEM(new_task);
 801d7bc:	6978      	ldr	r0, [r7, #20]
 801d7be:	f7fe f9bd 	bl	801bb3c <lv_debug_check_null>
 801d7c2:	4603      	mov	r3, r0
 801d7c4:	f083 0301 	eor.w	r3, r3, #1
 801d7c8:	b2db      	uxtb	r3, r3
 801d7ca:	2b00      	cmp	r3, #0
 801d7cc:	d008      	beq.n	801d7e0 <lv_task_create+0xe8>
 801d7ce:	697b      	ldr	r3, [r7, #20]
 801d7d0:	f04f 0400 	mov.w	r4, #0
 801d7d4:	461a      	mov	r2, r3
 801d7d6:	4623      	mov	r3, r4
 801d7d8:	4818      	ldr	r0, [pc, #96]	; (801d83c <lv_task_create+0x144>)
 801d7da:	f7fe f9bf 	bl	801bb5c <lv_debug_log_error>
 801d7de:	e7fe      	b.n	801d7de <lv_task_create+0xe6>
            if(new_task == NULL) return NULL;
 801d7e0:	697b      	ldr	r3, [r7, #20]
 801d7e2:	2b00      	cmp	r3, #0
 801d7e4:	d101      	bne.n	801d7ea <lv_task_create+0xf2>
 801d7e6:	2300      	movs	r3, #0
 801d7e8:	e021      	b.n	801d82e <lv_task_create+0x136>
        }
    }
    task_list_changed = true;
 801d7ea:	4b15      	ldr	r3, [pc, #84]	; (801d840 <lv_task_create+0x148>)
 801d7ec:	2201      	movs	r2, #1
 801d7ee:	701a      	strb	r2, [r3, #0]

    new_task->period  = period;
 801d7f0:	697b      	ldr	r3, [r7, #20]
 801d7f2:	68ba      	ldr	r2, [r7, #8]
 801d7f4:	601a      	str	r2, [r3, #0]
    new_task->task_cb = task_xcb;
 801d7f6:	697b      	ldr	r3, [r7, #20]
 801d7f8:	68fa      	ldr	r2, [r7, #12]
 801d7fa:	609a      	str	r2, [r3, #8]
    new_task->prio    = prio;
 801d7fc:	79fb      	ldrb	r3, [r7, #7]
 801d7fe:	f003 0307 	and.w	r3, r3, #7
 801d802:	b2d9      	uxtb	r1, r3
 801d804:	697a      	ldr	r2, [r7, #20]
 801d806:	7d13      	ldrb	r3, [r2, #20]
 801d808:	f361 0302 	bfi	r3, r1, #0, #3
 801d80c:	7513      	strb	r3, [r2, #20]

    new_task->repeat_count = -1;
 801d80e:	697b      	ldr	r3, [r7, #20]
 801d810:	f04f 32ff 	mov.w	r2, #4294967295
 801d814:	611a      	str	r2, [r3, #16]
    new_task->last_run = lv_tick_get();
 801d816:	f7fc ffd1 	bl	801a7bc <lv_tick_get>
 801d81a:	4602      	mov	r2, r0
 801d81c:	697b      	ldr	r3, [r7, #20]
 801d81e:	605a      	str	r2, [r3, #4]

    new_task->user_data = user_data;
 801d820:	697b      	ldr	r3, [r7, #20]
 801d822:	683a      	ldr	r2, [r7, #0]
 801d824:	60da      	str	r2, [r3, #12]

    task_created = true;
 801d826:	4b07      	ldr	r3, [pc, #28]	; (801d844 <lv_task_create+0x14c>)
 801d828:	2201      	movs	r2, #1
 801d82a:	701a      	strb	r2, [r3, #0]

    return new_task;
 801d82c:	697b      	ldr	r3, [r7, #20]
}
 801d82e:	4618      	mov	r0, r3
 801d830:	371c      	adds	r7, #28
 801d832:	46bd      	mov	sp, r7
 801d834:	bd90      	pop	{r4, r7, pc}
 801d836:	bf00      	nop
 801d838:	20021780 	.word	0x20021780
 801d83c:	0802d910 	.word	0x0802d910
 801d840:	2002145d 	.word	0x2002145d
 801d844:	2002145e 	.word	0x2002145e

0801d848 <lv_task_del>:
/**
 * Delete a lv_task
 * @param task pointer to task created by task
 */
void lv_task_del(lv_task_t * task)
{
 801d848:	b580      	push	{r7, lr}
 801d84a:	b082      	sub	sp, #8
 801d84c:	af00      	add	r7, sp, #0
 801d84e:	6078      	str	r0, [r7, #4]
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
 801d850:	6879      	ldr	r1, [r7, #4]
 801d852:	480a      	ldr	r0, [pc, #40]	; (801d87c <lv_task_del+0x34>)
 801d854:	f7fe fc7a 	bl	801c14c <_lv_ll_remove>
    task_list_changed = true;
 801d858:	4b09      	ldr	r3, [pc, #36]	; (801d880 <lv_task_del+0x38>)
 801d85a:	2201      	movs	r2, #1
 801d85c:	701a      	strb	r2, [r3, #0]

    lv_mem_free(task);
 801d85e:	6878      	ldr	r0, [r7, #4]
 801d860:	f7fe ff42 	bl	801c6e8 <lv_mem_free>

    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 801d864:	4b07      	ldr	r3, [pc, #28]	; (801d884 <lv_task_del+0x3c>)
 801d866:	681b      	ldr	r3, [r3, #0]
 801d868:	687a      	ldr	r2, [r7, #4]
 801d86a:	429a      	cmp	r2, r3
 801d86c:	d102      	bne.n	801d874 <lv_task_del+0x2c>
 801d86e:	4b06      	ldr	r3, [pc, #24]	; (801d888 <lv_task_del+0x40>)
 801d870:	2201      	movs	r2, #1
 801d872:	701a      	strb	r2, [r3, #0]
}
 801d874:	bf00      	nop
 801d876:	3708      	adds	r7, #8
 801d878:	46bd      	mov	sp, r7
 801d87a:	bd80      	pop	{r7, pc}
 801d87c:	20021780 	.word	0x20021780
 801d880:	2002145d 	.word	0x2002145d
 801d884:	20021850 	.word	0x20021850
 801d888:	2002145c 	.word	0x2002145c

0801d88c <lv_task_set_prio>:
 * Set new priority for a lv_task
 * @param task pointer to a lv_task
 * @param prio the new priority
 */
void lv_task_set_prio(lv_task_t * task, lv_task_prio_t prio)
{
 801d88c:	b580      	push	{r7, lr}
 801d88e:	b084      	sub	sp, #16
 801d890:	af00      	add	r7, sp, #0
 801d892:	6078      	str	r0, [r7, #4]
 801d894:	460b      	mov	r3, r1
 801d896:	70fb      	strb	r3, [r7, #3]
    if(task->prio == prio) return;
 801d898:	687b      	ldr	r3, [r7, #4]
 801d89a:	7d1b      	ldrb	r3, [r3, #20]
 801d89c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801d8a0:	b2db      	uxtb	r3, r3
 801d8a2:	461a      	mov	r2, r3
 801d8a4:	78fb      	ldrb	r3, [r7, #3]
 801d8a6:	429a      	cmp	r2, r3
 801d8a8:	d036      	beq.n	801d918 <lv_task_set_prio+0x8c>

    /*Find the tasks with new priority*/
    lv_task_t * i;
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
 801d8aa:	481d      	ldr	r0, [pc, #116]	; (801d920 <lv_task_set_prio+0x94>)
 801d8ac:	f7fe fcfc 	bl	801c2a8 <_lv_ll_get_head>
 801d8b0:	60f8      	str	r0, [r7, #12]
 801d8b2:	e017      	b.n	801d8e4 <lv_task_set_prio+0x58>
        if(i->prio <= prio) {
 801d8b4:	68fb      	ldr	r3, [r7, #12]
 801d8b6:	7d1b      	ldrb	r3, [r3, #20]
 801d8b8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801d8bc:	b2db      	uxtb	r3, r3
 801d8be:	461a      	mov	r2, r3
 801d8c0:	78fb      	ldrb	r3, [r7, #3]
 801d8c2:	429a      	cmp	r2, r3
 801d8c4:	dc09      	bgt.n	801d8da <lv_task_set_prio+0x4e>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 801d8c6:	68fa      	ldr	r2, [r7, #12]
 801d8c8:	687b      	ldr	r3, [r7, #4]
 801d8ca:	429a      	cmp	r2, r3
 801d8cc:	d00e      	beq.n	801d8ec <lv_task_set_prio+0x60>
 801d8ce:	68fa      	ldr	r2, [r7, #12]
 801d8d0:	6879      	ldr	r1, [r7, #4]
 801d8d2:	4813      	ldr	r0, [pc, #76]	; (801d920 <lv_task_set_prio+0x94>)
 801d8d4:	f7fe fd5c 	bl	801c390 <_lv_ll_move_before>
            break;
 801d8d8:	e008      	b.n	801d8ec <lv_task_set_prio+0x60>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
 801d8da:	68f9      	ldr	r1, [r7, #12]
 801d8dc:	4810      	ldr	r0, [pc, #64]	; (801d920 <lv_task_set_prio+0x94>)
 801d8de:	f7fe fd09 	bl	801c2f4 <_lv_ll_get_next>
 801d8e2:	60f8      	str	r0, [r7, #12]
 801d8e4:	68fb      	ldr	r3, [r7, #12]
 801d8e6:	2b00      	cmp	r3, #0
 801d8e8:	d1e4      	bne.n	801d8b4 <lv_task_set_prio+0x28>
 801d8ea:	e000      	b.n	801d8ee <lv_task_set_prio+0x62>
            break;
 801d8ec:	bf00      	nop
        }
    }

    /*There was no such a low priority so far then add the node to the tail*/
    if(i == NULL) {
 801d8ee:	68fb      	ldr	r3, [r7, #12]
 801d8f0:	2b00      	cmp	r3, #0
 801d8f2:	d104      	bne.n	801d8fe <lv_task_set_prio+0x72>
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 801d8f4:	2200      	movs	r2, #0
 801d8f6:	6879      	ldr	r1, [r7, #4]
 801d8f8:	4809      	ldr	r0, [pc, #36]	; (801d920 <lv_task_set_prio+0x94>)
 801d8fa:	f7fe fd49 	bl	801c390 <_lv_ll_move_before>
    }
    task_list_changed = true;
 801d8fe:	4b09      	ldr	r3, [pc, #36]	; (801d924 <lv_task_set_prio+0x98>)
 801d900:	2201      	movs	r2, #1
 801d902:	701a      	strb	r2, [r3, #0]

    task->prio = prio;
 801d904:	78fb      	ldrb	r3, [r7, #3]
 801d906:	f003 0307 	and.w	r3, r3, #7
 801d90a:	b2d9      	uxtb	r1, r3
 801d90c:	687a      	ldr	r2, [r7, #4]
 801d90e:	7d13      	ldrb	r3, [r2, #20]
 801d910:	f361 0302 	bfi	r3, r1, #0, #3
 801d914:	7513      	strb	r3, [r2, #20]
 801d916:	e000      	b.n	801d91a <lv_task_set_prio+0x8e>
    if(task->prio == prio) return;
 801d918:	bf00      	nop
}
 801d91a:	3710      	adds	r7, #16
 801d91c:	46bd      	mov	sp, r7
 801d91e:	bd80      	pop	{r7, pc}
 801d920:	20021780 	.word	0x20021780
 801d924:	2002145d 	.word	0x2002145d

0801d928 <lv_task_ready>:
/**
 * Make a lv_task ready. It will not wait its period.
 * @param task pointer to a lv_task.
 */
void lv_task_ready(lv_task_t * task)
{
 801d928:	b580      	push	{r7, lr}
 801d92a:	b082      	sub	sp, #8
 801d92c:	af00      	add	r7, sp, #0
 801d92e:	6078      	str	r0, [r7, #4]
    task->last_run = lv_tick_get() - task->period - 1;
 801d930:	f7fc ff44 	bl	801a7bc <lv_tick_get>
 801d934:	4602      	mov	r2, r0
 801d936:	687b      	ldr	r3, [r7, #4]
 801d938:	681b      	ldr	r3, [r3, #0]
 801d93a:	1ad3      	subs	r3, r2, r3
 801d93c:	1e5a      	subs	r2, r3, #1
 801d93e:	687b      	ldr	r3, [r7, #4]
 801d940:	605a      	str	r2, [r3, #4]
}
 801d942:	bf00      	nop
 801d944:	3708      	adds	r7, #8
 801d946:	46bd      	mov	sp, r7
 801d948:	bd80      	pop	{r7, pc}
	...

0801d94c <lv_task_enable>:
/**
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
 801d94c:	b480      	push	{r7}
 801d94e:	b083      	sub	sp, #12
 801d950:	af00      	add	r7, sp, #0
 801d952:	4603      	mov	r3, r0
 801d954:	71fb      	strb	r3, [r7, #7]
    lv_task_run = en;
 801d956:	4a04      	ldr	r2, [pc, #16]	; (801d968 <lv_task_enable+0x1c>)
 801d958:	79fb      	ldrb	r3, [r7, #7]
 801d95a:	7013      	strb	r3, [r2, #0]
}
 801d95c:	bf00      	nop
 801d95e:	370c      	adds	r7, #12
 801d960:	46bd      	mov	sp, r7
 801d962:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d966:	4770      	bx	lr
 801d968:	2002145a 	.word	0x2002145a

0801d96c <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 801d96c:	b580      	push	{r7, lr}
 801d96e:	b084      	sub	sp, #16
 801d970:	af00      	add	r7, sp, #0
 801d972:	6078      	str	r0, [r7, #4]
    bool exec = false;
 801d974:	2300      	movs	r3, #0
 801d976:	73fb      	strb	r3, [r7, #15]

    if(lv_task_time_remaining(task) == 0) {
 801d978:	6878      	ldr	r0, [r7, #4]
 801d97a:	f000 f831 	bl	801d9e0 <lv_task_time_remaining>
 801d97e:	4603      	mov	r3, r0
 801d980:	2b00      	cmp	r3, #0
 801d982:	d125      	bne.n	801d9d0 <lv_task_exec+0x64>
        task->last_run = lv_tick_get();
 801d984:	f7fc ff1a 	bl	801a7bc <lv_tick_get>
 801d988:	4602      	mov	r2, r0
 801d98a:	687b      	ldr	r3, [r7, #4]
 801d98c:	605a      	str	r2, [r3, #4]
        if(task->task_cb) task->task_cb(task);
 801d98e:	687b      	ldr	r3, [r7, #4]
 801d990:	689b      	ldr	r3, [r3, #8]
 801d992:	2b00      	cmp	r3, #0
 801d994:	d003      	beq.n	801d99e <lv_task_exec+0x32>
 801d996:	687b      	ldr	r3, [r7, #4]
 801d998:	689b      	ldr	r3, [r3, #8]
 801d99a:	6878      	ldr	r0, [r7, #4]
 801d99c:	4798      	blx	r3

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 801d99e:	4b0f      	ldr	r3, [pc, #60]	; (801d9dc <lv_task_exec+0x70>)
 801d9a0:	781b      	ldrb	r3, [r3, #0]
 801d9a2:	f083 0301 	eor.w	r3, r3, #1
 801d9a6:	b2db      	uxtb	r3, r3
 801d9a8:	2b00      	cmp	r3, #0
 801d9aa:	d00f      	beq.n	801d9cc <lv_task_exec+0x60>
            if(task->repeat_count > 0) {
 801d9ac:	687b      	ldr	r3, [r7, #4]
 801d9ae:	691b      	ldr	r3, [r3, #16]
 801d9b0:	2b00      	cmp	r3, #0
 801d9b2:	dd04      	ble.n	801d9be <lv_task_exec+0x52>
                task->repeat_count--;
 801d9b4:	687b      	ldr	r3, [r7, #4]
 801d9b6:	691b      	ldr	r3, [r3, #16]
 801d9b8:	1e5a      	subs	r2, r3, #1
 801d9ba:	687b      	ldr	r3, [r7, #4]
 801d9bc:	611a      	str	r2, [r3, #16]
            }
            if(task->repeat_count == 0) {
 801d9be:	687b      	ldr	r3, [r7, #4]
 801d9c0:	691b      	ldr	r3, [r3, #16]
 801d9c2:	2b00      	cmp	r3, #0
 801d9c4:	d102      	bne.n	801d9cc <lv_task_exec+0x60>
                lv_task_del(task);
 801d9c6:	6878      	ldr	r0, [r7, #4]
 801d9c8:	f7ff ff3e 	bl	801d848 <lv_task_del>
            }
        }
        exec = true;
 801d9cc:	2301      	movs	r3, #1
 801d9ce:	73fb      	strb	r3, [r7, #15]
    }

    return exec;
 801d9d0:	7bfb      	ldrb	r3, [r7, #15]
}
 801d9d2:	4618      	mov	r0, r3
 801d9d4:	3710      	adds	r7, #16
 801d9d6:	46bd      	mov	sp, r7
 801d9d8:	bd80      	pop	{r7, pc}
 801d9da:	bf00      	nop
 801d9dc:	2002145c 	.word	0x2002145c

0801d9e0 <lv_task_time_remaining>:
 * Find out how much time remains before a task must be run.
 * @param task pointer to lv_task
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
 801d9e0:	b580      	push	{r7, lr}
 801d9e2:	b084      	sub	sp, #16
 801d9e4:	af00      	add	r7, sp, #0
 801d9e6:	6078      	str	r0, [r7, #4]
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 801d9e8:	687b      	ldr	r3, [r7, #4]
 801d9ea:	685b      	ldr	r3, [r3, #4]
 801d9ec:	4618      	mov	r0, r3
 801d9ee:	f7fc feff 	bl	801a7f0 <lv_tick_elaps>
 801d9f2:	60f8      	str	r0, [r7, #12]
    if(elp >= task->period)
 801d9f4:	687b      	ldr	r3, [r7, #4]
 801d9f6:	681b      	ldr	r3, [r3, #0]
 801d9f8:	68fa      	ldr	r2, [r7, #12]
 801d9fa:	429a      	cmp	r2, r3
 801d9fc:	d301      	bcc.n	801da02 <lv_task_time_remaining+0x22>
        return 0;
 801d9fe:	2300      	movs	r3, #0
 801da00:	e003      	b.n	801da0a <lv_task_time_remaining+0x2a>
    return task->period - elp;
 801da02:	687b      	ldr	r3, [r7, #4]
 801da04:	681a      	ldr	r2, [r3, #0]
 801da06:	68fb      	ldr	r3, [r7, #12]
 801da08:	1ad3      	subs	r3, r2, r3
}
 801da0a:	4618      	mov	r0, r3
 801da0c:	3710      	adds	r7, #16
 801da0e:	46bd      	mov	sp, r7
 801da10:	bd80      	pop	{r7, pc}

0801da12 <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
 801da12:	b480      	push	{r7}
 801da14:	b083      	sub	sp, #12
 801da16:	af00      	add	r7, sp, #0
 801da18:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 801da1a:	687b      	ldr	r3, [r7, #4]
 801da1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 801da20:	4618      	mov	r0, r3
 801da22:	370c      	adds	r7, #12
 801da24:	46bd      	mov	sp, r7
 801da26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da2a:	4770      	bx	lr

0801da2c <_lv_txt_get_size>:
 * @param max_width max with of the text (break the lines to fit this size) Set CORD_MAX to avoid
 * line breaks
 */
void _lv_txt_get_size(lv_point_t * size_res, const char * text, const lv_font_t * font, lv_coord_t letter_space,
                      lv_coord_t line_space, lv_coord_t max_width, lv_txt_flag_t flag)
{
 801da2c:	b580      	push	{r7, lr}
 801da2e:	b08a      	sub	sp, #40	; 0x28
 801da30:	af02      	add	r7, sp, #8
 801da32:	60f8      	str	r0, [r7, #12]
 801da34:	60b9      	str	r1, [r7, #8]
 801da36:	607a      	str	r2, [r7, #4]
 801da38:	807b      	strh	r3, [r7, #2]
    size_res->x = 0;
 801da3a:	68fb      	ldr	r3, [r7, #12]
 801da3c:	2200      	movs	r2, #0
 801da3e:	801a      	strh	r2, [r3, #0]
    size_res->y = 0;
 801da40:	68fb      	ldr	r3, [r7, #12]
 801da42:	2200      	movs	r2, #0
 801da44:	805a      	strh	r2, [r3, #2]

    if(text == NULL) return;
 801da46:	68bb      	ldr	r3, [r7, #8]
 801da48:	2b00      	cmp	r3, #0
 801da4a:	f000 80a0 	beq.w	801db8e <_lv_txt_get_size+0x162>
    if(font == NULL) return;
 801da4e:	687b      	ldr	r3, [r7, #4]
 801da50:	2b00      	cmp	r3, #0
 801da52:	f000 809e 	beq.w	801db92 <_lv_txt_get_size+0x166>

    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 801da56:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801da5a:	f003 0302 	and.w	r3, r3, #2
 801da5e:	2b00      	cmp	r3, #0
 801da60:	d002      	beq.n	801da68 <_lv_txt_get_size+0x3c>
 801da62:	f647 4318 	movw	r3, #31768	; 0x7c18
 801da66:	85bb      	strh	r3, [r7, #44]	; 0x2c

    uint32_t line_start     = 0;
 801da68:	2300      	movs	r3, #0
 801da6a:	61fb      	str	r3, [r7, #28]
    uint32_t new_line_start = 0;
 801da6c:	2300      	movs	r3, #0
 801da6e:	61bb      	str	r3, [r7, #24]
    uint16_t letter_height = lv_font_get_line_height(font);
 801da70:	6878      	ldr	r0, [r7, #4]
 801da72:	f7ff ffce 	bl	801da12 <lv_font_get_line_height>
 801da76:	4603      	mov	r3, r0
 801da78:	82fb      	strh	r3, [r7, #22]

    /*Calc. the height and longest line*/
    while(text[line_start] != '\0') {
 801da7a:	e04f      	b.n	801db1c <_lv_txt_get_size+0xf0>
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 801da7c:	68ba      	ldr	r2, [r7, #8]
 801da7e:	69fb      	ldr	r3, [r7, #28]
 801da80:	18d0      	adds	r0, r2, r3
 801da82:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801da86:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801da8a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801da8e:	9300      	str	r3, [sp, #0]
 801da90:	460b      	mov	r3, r1
 801da92:	6879      	ldr	r1, [r7, #4]
 801da94:	f000 f964 	bl	801dd60 <_lv_txt_get_next_line>
 801da98:	4602      	mov	r2, r0
 801da9a:	69bb      	ldr	r3, [r7, #24]
 801da9c:	4413      	add	r3, r2
 801da9e:	61bb      	str	r3, [r7, #24]

        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 801daa0:	68fb      	ldr	r3, [r7, #12]
 801daa2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801daa6:	461a      	mov	r2, r3
 801daa8:	8afb      	ldrh	r3, [r7, #22]
 801daaa:	441a      	add	r2, r3
 801daac:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801dab0:	4413      	add	r3, r2
 801dab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801dab6:	d26e      	bcs.n	801db96 <_lv_txt_get_size+0x16a>
            LV_LOG_WARN("lv_txt_get_size: integer overflow while calculating text height");
            return;
        }
        else {
            size_res->y += letter_height;
 801dab8:	68fb      	ldr	r3, [r7, #12]
 801daba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801dabe:	b29a      	uxth	r2, r3
 801dac0:	8afb      	ldrh	r3, [r7, #22]
 801dac2:	4413      	add	r3, r2
 801dac4:	b29b      	uxth	r3, r3
 801dac6:	b21a      	sxth	r2, r3
 801dac8:	68fb      	ldr	r3, [r7, #12]
 801daca:	805a      	strh	r2, [r3, #2]
            size_res->y += line_space;
 801dacc:	68fb      	ldr	r3, [r7, #12]
 801dace:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801dad2:	b29a      	uxth	r2, r3
 801dad4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801dad6:	4413      	add	r3, r2
 801dad8:	b29b      	uxth	r3, r3
 801dada:	b21a      	sxth	r2, r3
 801dadc:	68fb      	ldr	r3, [r7, #12]
 801dade:	805a      	strh	r2, [r3, #2]
        }

        /*Calculate the longest line*/
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
 801dae0:	68ba      	ldr	r2, [r7, #8]
 801dae2:	69fb      	ldr	r3, [r7, #28]
 801dae4:	18d0      	adds	r0, r2, r3
 801dae6:	69ba      	ldr	r2, [r7, #24]
 801dae8:	69fb      	ldr	r3, [r7, #28]
 801daea:	1ad1      	subs	r1, r2, r3
 801daec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801daf0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801daf4:	9300      	str	r3, [sp, #0]
 801daf6:	4613      	mov	r3, r2
 801daf8:	687a      	ldr	r2, [r7, #4]
 801dafa:	f000 f9ef 	bl	801dedc <_lv_txt_get_width>
 801dafe:	4603      	mov	r3, r0
 801db00:	82bb      	strh	r3, [r7, #20]
                                                       flag);

        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 801db02:	68fb      	ldr	r3, [r7, #12]
 801db04:	f9b3 3000 	ldrsh.w	r3, [r3]
 801db08:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801db0c:	4293      	cmp	r3, r2
 801db0e:	bfb8      	it	lt
 801db10:	4613      	movlt	r3, r2
 801db12:	b21a      	sxth	r2, r3
 801db14:	68fb      	ldr	r3, [r7, #12]
 801db16:	801a      	strh	r2, [r3, #0]
        line_start  = new_line_start;
 801db18:	69bb      	ldr	r3, [r7, #24]
 801db1a:	61fb      	str	r3, [r7, #28]
    while(text[line_start] != '\0') {
 801db1c:	68ba      	ldr	r2, [r7, #8]
 801db1e:	69fb      	ldr	r3, [r7, #28]
 801db20:	4413      	add	r3, r2
 801db22:	781b      	ldrb	r3, [r3, #0]
 801db24:	2b00      	cmp	r3, #0
 801db26:	d1a9      	bne.n	801da7c <_lv_txt_get_size+0x50>
    }

    /*Make the text one line taller if the last character is '\n' or '\r'*/
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 801db28:	69fb      	ldr	r3, [r7, #28]
 801db2a:	2b00      	cmp	r3, #0
 801db2c:	d01a      	beq.n	801db64 <_lv_txt_get_size+0x138>
 801db2e:	69fb      	ldr	r3, [r7, #28]
 801db30:	3b01      	subs	r3, #1
 801db32:	68ba      	ldr	r2, [r7, #8]
 801db34:	4413      	add	r3, r2
 801db36:	781b      	ldrb	r3, [r3, #0]
 801db38:	2b0a      	cmp	r3, #10
 801db3a:	d006      	beq.n	801db4a <_lv_txt_get_size+0x11e>
 801db3c:	69fb      	ldr	r3, [r7, #28]
 801db3e:	3b01      	subs	r3, #1
 801db40:	68ba      	ldr	r2, [r7, #8]
 801db42:	4413      	add	r3, r2
 801db44:	781b      	ldrb	r3, [r3, #0]
 801db46:	2b0d      	cmp	r3, #13
 801db48:	d10c      	bne.n	801db64 <_lv_txt_get_size+0x138>
        size_res->y += letter_height + line_space;
 801db4a:	68fb      	ldr	r3, [r7, #12]
 801db4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801db50:	b29a      	uxth	r2, r3
 801db52:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 801db54:	8afb      	ldrh	r3, [r7, #22]
 801db56:	440b      	add	r3, r1
 801db58:	b29b      	uxth	r3, r3
 801db5a:	4413      	add	r3, r2
 801db5c:	b29b      	uxth	r3, r3
 801db5e:	b21a      	sxth	r2, r3
 801db60:	68fb      	ldr	r3, [r7, #12]
 801db62:	805a      	strh	r2, [r3, #2]
    }

    /*Correction with the last line space or set the height manually if the text is empty*/
    if(size_res->y == 0)
 801db64:	68fb      	ldr	r3, [r7, #12]
 801db66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801db6a:	2b00      	cmp	r3, #0
 801db6c:	d104      	bne.n	801db78 <_lv_txt_get_size+0x14c>
        size_res->y = letter_height;
 801db6e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801db72:	68fb      	ldr	r3, [r7, #12]
 801db74:	805a      	strh	r2, [r3, #2]
 801db76:	e00f      	b.n	801db98 <_lv_txt_get_size+0x16c>
    else
        size_res->y -= line_space;
 801db78:	68fb      	ldr	r3, [r7, #12]
 801db7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801db7e:	b29a      	uxth	r2, r3
 801db80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801db82:	1ad3      	subs	r3, r2, r3
 801db84:	b29b      	uxth	r3, r3
 801db86:	b21a      	sxth	r2, r3
 801db88:	68fb      	ldr	r3, [r7, #12]
 801db8a:	805a      	strh	r2, [r3, #2]
 801db8c:	e004      	b.n	801db98 <_lv_txt_get_size+0x16c>
    if(text == NULL) return;
 801db8e:	bf00      	nop
 801db90:	e002      	b.n	801db98 <_lv_txt_get_size+0x16c>
    if(font == NULL) return;
 801db92:	bf00      	nop
 801db94:	e000      	b.n	801db98 <_lv_txt_get_size+0x16c>
            return;
 801db96:	bf00      	nop
}
 801db98:	3720      	adds	r7, #32
 801db9a:	46bd      	mov	sp, r7
 801db9c:	bd80      	pop	{r7, pc}
	...

0801dba0 <lv_txt_get_next_word>:
 * @return the index of the first char of the next word (in byte index not letter index. With UTF-8 they are different)
 */
static uint32_t lv_txt_get_next_word(const char * txt, const lv_font_t * font,
                                     lv_coord_t letter_space, lv_coord_t max_width,
                                     lv_txt_flag_t flag, uint32_t * word_w_ptr, lv_txt_cmd_state_t * cmd_state, bool force)
{
 801dba0:	b580      	push	{r7, lr}
 801dba2:	b08e      	sub	sp, #56	; 0x38
 801dba4:	af00      	add	r7, sp, #0
 801dba6:	60f8      	str	r0, [r7, #12]
 801dba8:	60b9      	str	r1, [r7, #8]
 801dbaa:	4611      	mov	r1, r2
 801dbac:	461a      	mov	r2, r3
 801dbae:	460b      	mov	r3, r1
 801dbb0:	80fb      	strh	r3, [r7, #6]
 801dbb2:	4613      	mov	r3, r2
 801dbb4:	80bb      	strh	r3, [r7, #4]
    if(txt == NULL || txt[0] == '\0') return 0;
 801dbb6:	68fb      	ldr	r3, [r7, #12]
 801dbb8:	2b00      	cmp	r3, #0
 801dbba:	d003      	beq.n	801dbc4 <lv_txt_get_next_word+0x24>
 801dbbc:	68fb      	ldr	r3, [r7, #12]
 801dbbe:	781b      	ldrb	r3, [r3, #0]
 801dbc0:	2b00      	cmp	r3, #0
 801dbc2:	d101      	bne.n	801dbc8 <lv_txt_get_next_word+0x28>
 801dbc4:	2300      	movs	r3, #0
 801dbc6:	e0c4      	b.n	801dd52 <lv_txt_get_next_word+0x1b2>
    if(font == NULL) return 0;
 801dbc8:	68bb      	ldr	r3, [r7, #8]
 801dbca:	2b00      	cmp	r3, #0
 801dbcc:	d101      	bne.n	801dbd2 <lv_txt_get_next_word+0x32>
 801dbce:	2300      	movs	r3, #0
 801dbd0:	e0bf      	b.n	801dd52 <lv_txt_get_next_word+0x1b2>

    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 801dbd2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801dbd6:	f003 0302 	and.w	r3, r3, #2
 801dbda:	2b00      	cmp	r3, #0
 801dbdc:	d002      	beq.n	801dbe4 <lv_txt_get_next_word+0x44>
 801dbde:	f647 4318 	movw	r3, #31768	; 0x7c18
 801dbe2:	80bb      	strh	r3, [r7, #4]

    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
 801dbe4:	2300      	movs	r3, #0
 801dbe6:	637b      	str	r3, [r7, #52]	; 0x34
 801dbe8:	2300      	movs	r3, #0
 801dbea:	617b      	str	r3, [r7, #20]
 801dbec:	2300      	movs	r3, #0
 801dbee:	613b      	str	r3, [r7, #16]
    uint32_t letter = 0;      /* Letter at i */
 801dbf0:	2300      	movs	r3, #0
 801dbf2:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t letter_next = 0; /* Letter at i_next */
 801dbf4:	2300      	movs	r3, #0
 801dbf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    lv_coord_t letter_w;
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
 801dbf8:	2300      	movs	r3, #0
 801dbfa:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
 801dbfc:	2300      	movs	r3, #0
 801dbfe:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
 801dc00:	f04f 33ff 	mov.w	r3, #4294967295
 801dc04:	623b      	str	r3, [r7, #32]
    uint32_t break_letter_count = 0; /* Number of characters up to the long word break point */
 801dc06:	2300      	movs	r3, #0
 801dc08:	61fb      	str	r3, [r7, #28]

    letter = _lv_txt_encoded_next(txt, &i_next);
 801dc0a:	4b54      	ldr	r3, [pc, #336]	; (801dd5c <lv_txt_get_next_word+0x1bc>)
 801dc0c:	681b      	ldr	r3, [r3, #0]
 801dc0e:	f107 0214 	add.w	r2, r7, #20
 801dc12:	4611      	mov	r1, r2
 801dc14:	68f8      	ldr	r0, [r7, #12]
 801dc16:	4798      	blx	r3
 801dc18:	6338      	str	r0, [r7, #48]	; 0x30
    i_next_next = i_next;
 801dc1a:	697b      	ldr	r3, [r7, #20]
 801dc1c:	613b      	str	r3, [r7, #16]

    /* Obtain the full word, regardless if it fits or not in max_width */
    while(txt[i] != '\0') {
 801dc1e:	e074      	b.n	801dd0a <lv_txt_get_next_word+0x16a>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 801dc20:	4b4e      	ldr	r3, [pc, #312]	; (801dd5c <lv_txt_get_next_word+0x1bc>)
 801dc22:	681b      	ldr	r3, [r3, #0]
 801dc24:	f107 0210 	add.w	r2, r7, #16
 801dc28:	4611      	mov	r1, r2
 801dc2a:	68f8      	ldr	r0, [r7, #12]
 801dc2c:	4798      	blx	r3
 801dc2e:	62f8      	str	r0, [r7, #44]	; 0x2c
        word_len++;
 801dc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc32:	3301      	adds	r3, #1
 801dc34:	627b      	str	r3, [r7, #36]	; 0x24

        /*Handle the recolor command*/
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 801dc36:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801dc3a:	f003 0301 	and.w	r3, r3, #1
 801dc3e:	2b00      	cmp	r3, #0
 801dc40:	d00d      	beq.n	801dc5e <lv_txt_get_next_word+0xbe>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
 801dc42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801dc44:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801dc46:	f000 f9af 	bl	801dfa8 <_lv_txt_is_cmd>
 801dc4a:	4603      	mov	r3, r0
 801dc4c:	2b00      	cmp	r3, #0
 801dc4e:	d006      	beq.n	801dc5e <lv_txt_get_next_word+0xbe>
                i = i_next;
 801dc50:	697b      	ldr	r3, [r7, #20]
 801dc52:	637b      	str	r3, [r7, #52]	; 0x34
                i_next = i_next_next;
 801dc54:	693b      	ldr	r3, [r7, #16]
 801dc56:	617b      	str	r3, [r7, #20]
                letter = letter_next;
 801dc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc5a:	633b      	str	r3, [r7, #48]	; 0x30
                continue;   /*Skip the letter is it is part of a command*/
 801dc5c:	e055      	b.n	801dd0a <lv_txt_get_next_word+0x16a>
            }
        }

        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 801dc5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dc60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801dc62:	68b8      	ldr	r0, [r7, #8]
 801dc64:	f7fb fbc2 	bl	80193ec <lv_font_get_glyph_width>
 801dc68:	4603      	mov	r3, r0
 801dc6a:	837b      	strh	r3, [r7, #26]
        cur_w += letter_w;
 801dc6c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 801dc6e:	8b7b      	ldrh	r3, [r7, #26]
 801dc70:	4413      	add	r3, r2
 801dc72:	b29b      	uxth	r3, r3
 801dc74:	857b      	strh	r3, [r7, #42]	; 0x2a

        if(letter_w > 0) {
 801dc76:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801dc7a:	2b00      	cmp	r3, #0
 801dc7c:	dd04      	ble.n	801dc88 <lv_txt_get_next_word+0xe8>
            cur_w += letter_space;
 801dc7e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 801dc80:	88fb      	ldrh	r3, [r7, #6]
 801dc82:	4413      	add	r3, r2
 801dc84:	b29b      	uxth	r3, r3
 801dc86:	857b      	strh	r3, [r7, #42]	; 0x2a
        }

        /* Test if this character fits within max_width */
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 801dc88:	6a3b      	ldr	r3, [r7, #32]
 801dc8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dc8e:	d10d      	bne.n	801dcac <lv_txt_get_next_word+0x10c>
 801dc90:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801dc94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801dc98:	1ad2      	subs	r2, r2, r3
 801dc9a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801dc9e:	429a      	cmp	r2, r3
 801dca0:	dd04      	ble.n	801dcac <lv_txt_get_next_word+0x10c>
            break_index = i;
 801dca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dca4:	623b      	str	r3, [r7, #32]
            break_letter_count = word_len - 1;
 801dca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dca8:	3b01      	subs	r3, #1
 801dcaa:	61fb      	str	r3, [r7, #28]
            /* break_index is now pointing at the character that doesn't fit */
        }

        /*Check for new line chars and breakchars*/
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
 801dcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dcae:	2b0a      	cmp	r3, #10
 801dcb0:	d008      	beq.n	801dcc4 <lv_txt_get_next_word+0x124>
 801dcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dcb4:	2b0d      	cmp	r3, #13
 801dcb6:	d005      	beq.n	801dcc4 <lv_txt_get_next_word+0x124>
 801dcb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dcba:	f000 fae5 	bl	801e288 <is_break_char>
 801dcbe:	4603      	mov	r3, r0
 801dcc0:	2b00      	cmp	r3, #0
 801dcc2:	d011      	beq.n	801dce8 <lv_txt_get_next_word+0x148>
            /* Update the output width on the first character if it fits.
             * Must do this here in case first letter is a break character. */
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 801dcc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dcc6:	2b00      	cmp	r3, #0
 801dcc8:	d10a      	bne.n	801dce0 <lv_txt_get_next_word+0x140>
 801dcca:	6a3b      	ldr	r3, [r7, #32]
 801dccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dcd0:	d106      	bne.n	801dce0 <lv_txt_get_next_word+0x140>
 801dcd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dcd4:	2b00      	cmp	r3, #0
 801dcd6:	d003      	beq.n	801dce0 <lv_txt_get_next_word+0x140>
 801dcd8:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801dcdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dcde:	601a      	str	r2, [r3, #0]
            word_len--;
 801dce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dce2:	3b01      	subs	r3, #1
 801dce4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801dce6:	e016      	b.n	801dd16 <lv_txt_get_next_word+0x176>
        }

        /* Update the output width */
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 801dce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dcea:	2b00      	cmp	r3, #0
 801dcec:	d007      	beq.n	801dcfe <lv_txt_get_next_word+0x15e>
 801dcee:	6a3b      	ldr	r3, [r7, #32]
 801dcf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dcf4:	d103      	bne.n	801dcfe <lv_txt_get_next_word+0x15e>
 801dcf6:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801dcfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dcfc:	601a      	str	r2, [r3, #0]

        i = i_next;
 801dcfe:	697b      	ldr	r3, [r7, #20]
 801dd00:	637b      	str	r3, [r7, #52]	; 0x34
        i_next = i_next_next;
 801dd02:	693b      	ldr	r3, [r7, #16]
 801dd04:	617b      	str	r3, [r7, #20]
        letter = letter_next;
 801dd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd08:	633b      	str	r3, [r7, #48]	; 0x30
    while(txt[i] != '\0') {
 801dd0a:	68fa      	ldr	r2, [r7, #12]
 801dd0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dd0e:	4413      	add	r3, r2
 801dd10:	781b      	ldrb	r3, [r3, #0]
 801dd12:	2b00      	cmp	r3, #0
 801dd14:	d184      	bne.n	801dc20 <lv_txt_get_next_word+0x80>
    }

    /* Entire Word fits in the provided space */
    if(break_index == NO_BREAK_FOUND) {
 801dd16:	6a3b      	ldr	r3, [r7, #32]
 801dd18:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dd1c:	d10c      	bne.n	801dd38 <lv_txt_get_next_word+0x198>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 801dd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd20:	2b00      	cmp	r3, #0
 801dd22:	d005      	beq.n	801dd30 <lv_txt_get_next_word+0x190>
 801dd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd26:	2b0d      	cmp	r3, #13
 801dd28:	d104      	bne.n	801dd34 <lv_txt_get_next_word+0x194>
 801dd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd2c:	2b0a      	cmp	r3, #10
 801dd2e:	d101      	bne.n	801dd34 <lv_txt_get_next_word+0x194>
 801dd30:	697b      	ldr	r3, [r7, #20]
 801dd32:	637b      	str	r3, [r7, #52]	; 0x34
        return i;
 801dd34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dd36:	e00c      	b.n	801dd52 <lv_txt_get_next_word+0x1b2>
            // However, in current usage, this doesn't impact anything.
        }
    }
    return i;
#else
    if(force) return break_index;
 801dd38:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801dd3c:	2b00      	cmp	r3, #0
 801dd3e:	d001      	beq.n	801dd44 <lv_txt_get_next_word+0x1a4>
 801dd40:	6a3b      	ldr	r3, [r7, #32]
 801dd42:	e006      	b.n	801dd52 <lv_txt_get_next_word+0x1b2>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /* Return no word */
 801dd44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dd46:	2b00      	cmp	r3, #0
 801dd48:	d002      	beq.n	801dd50 <lv_txt_get_next_word+0x1b0>
 801dd4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dd4c:	2200      	movs	r2, #0
 801dd4e:	601a      	str	r2, [r3, #0]
    (void) break_letter_count;
    return 0;
 801dd50:	2300      	movs	r3, #0
#endif
}
 801dd52:	4618      	mov	r0, r3
 801dd54:	3738      	adds	r7, #56	; 0x38
 801dd56:	46bd      	mov	sp, r7
 801dd58:	bd80      	pop	{r7, pc}
 801dd5a:	bf00      	nop
 801dd5c:	2000140c 	.word	0x2000140c

0801dd60 <_lv_txt_get_next_line>:
 * @param flags settings for the text from 'txt_flag_type' enum
 * @return the index of the first char of the new line (in byte index not letter index. With UTF-8 they are different)
 */
uint32_t _lv_txt_get_next_line(const char * txt, const lv_font_t * font,
                               lv_coord_t letter_space, lv_coord_t max_width, lv_txt_flag_t flag)
{
 801dd60:	b580      	push	{r7, lr}
 801dd62:	b08e      	sub	sp, #56	; 0x38
 801dd64:	af04      	add	r7, sp, #16
 801dd66:	60f8      	str	r0, [r7, #12]
 801dd68:	60b9      	str	r1, [r7, #8]
 801dd6a:	4611      	mov	r1, r2
 801dd6c:	461a      	mov	r2, r3
 801dd6e:	460b      	mov	r3, r1
 801dd70:	80fb      	strh	r3, [r7, #6]
 801dd72:	4613      	mov	r3, r2
 801dd74:	80bb      	strh	r3, [r7, #4]
    if(txt == NULL) return 0;
 801dd76:	68fb      	ldr	r3, [r7, #12]
 801dd78:	2b00      	cmp	r3, #0
 801dd7a:	d101      	bne.n	801dd80 <_lv_txt_get_next_line+0x20>
 801dd7c:	2300      	movs	r3, #0
 801dd7e:	e0a7      	b.n	801ded0 <_lv_txt_get_next_line+0x170>
    if(font == NULL) return 0;
 801dd80:	68bb      	ldr	r3, [r7, #8]
 801dd82:	2b00      	cmp	r3, #0
 801dd84:	d101      	bne.n	801dd8a <_lv_txt_get_next_line+0x2a>
 801dd86:	2300      	movs	r3, #0
 801dd88:	e0a2      	b.n	801ded0 <_lv_txt_get_next_line+0x170>

    /* If max_width doesn't mater simply find the new line character
     * without thinking about word wrapping*/
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
 801dd8a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801dd8e:	f003 0302 	and.w	r3, r3, #2
 801dd92:	2b00      	cmp	r3, #0
 801dd94:	d105      	bne.n	801dda2 <_lv_txt_get_next_line+0x42>
 801dd96:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801dd9a:	f003 0310 	and.w	r3, r3, #16
 801dd9e:	2b00      	cmp	r3, #0
 801dda0:	d022      	beq.n	801dde8 <_lv_txt_get_next_line+0x88>
        uint32_t i;
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 801dda2:	2300      	movs	r3, #0
 801dda4:	627b      	str	r3, [r7, #36]	; 0x24
 801dda6:	e002      	b.n	801ddae <_lv_txt_get_next_line+0x4e>
 801dda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddaa:	3301      	adds	r3, #1
 801ddac:	627b      	str	r3, [r7, #36]	; 0x24
 801ddae:	68fa      	ldr	r2, [r7, #12]
 801ddb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddb2:	4413      	add	r3, r2
 801ddb4:	781b      	ldrb	r3, [r3, #0]
 801ddb6:	2b0a      	cmp	r3, #10
 801ddb8:	d00b      	beq.n	801ddd2 <_lv_txt_get_next_line+0x72>
 801ddba:	68fa      	ldr	r2, [r7, #12]
 801ddbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddbe:	4413      	add	r3, r2
 801ddc0:	781b      	ldrb	r3, [r3, #0]
 801ddc2:	2b0d      	cmp	r3, #13
 801ddc4:	d005      	beq.n	801ddd2 <_lv_txt_get_next_line+0x72>
 801ddc6:	68fa      	ldr	r2, [r7, #12]
 801ddc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddca:	4413      	add	r3, r2
 801ddcc:	781b      	ldrb	r3, [r3, #0]
 801ddce:	2b00      	cmp	r3, #0
 801ddd0:	d1ea      	bne.n	801dda8 <_lv_txt_get_next_line+0x48>
            /*Just find the new line chars or string ends by incrementing `i`*/
        }
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 801ddd2:	68fa      	ldr	r2, [r7, #12]
 801ddd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddd6:	4413      	add	r3, r2
 801ddd8:	781b      	ldrb	r3, [r3, #0]
 801ddda:	2b00      	cmp	r3, #0
 801dddc:	d002      	beq.n	801dde4 <_lv_txt_get_next_line+0x84>
 801ddde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dde0:	3301      	adds	r3, #1
 801dde2:	627b      	str	r3, [r7, #36]	; 0x24
        return i;
 801dde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dde6:	e073      	b.n	801ded0 <_lv_txt_get_next_line+0x170>
    }

    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 801dde8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801ddec:	f003 0302 	and.w	r3, r3, #2
 801ddf0:	2b00      	cmp	r3, #0
 801ddf2:	d002      	beq.n	801ddfa <_lv_txt_get_next_line+0x9a>
 801ddf4:	f647 4318 	movw	r3, #31768	; 0x7c18
 801ddf8:	80bb      	strh	r3, [r7, #4]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 801ddfa:	2300      	movs	r3, #0
 801ddfc:	77fb      	strb	r3, [r7, #31]
    uint32_t i = 0;                                        /* Iterating index into txt */
 801ddfe:	2300      	movs	r3, #0
 801de00:	61bb      	str	r3, [r7, #24]

    while(txt[i] != '\0' && max_width > 0) {
 801de02:	e04e      	b.n	801dea2 <_lv_txt_get_next_line+0x142>
        uint32_t word_w = 0;
 801de04:	2300      	movs	r3, #0
 801de06:	617b      	str	r3, [r7, #20]
        uint32_t advance = lv_txt_get_next_word(&txt[i], font, letter_space, max_width, flag, &word_w, &cmd_state, i == 0);
 801de08:	69bb      	ldr	r3, [r7, #24]
 801de0a:	68fa      	ldr	r2, [r7, #12]
 801de0c:	18d0      	adds	r0, r2, r3
 801de0e:	69bb      	ldr	r3, [r7, #24]
 801de10:	2b00      	cmp	r3, #0
 801de12:	bf0c      	ite	eq
 801de14:	2301      	moveq	r3, #1
 801de16:	2300      	movne	r3, #0
 801de18:	b2db      	uxtb	r3, r3
 801de1a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 801de1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801de22:	9303      	str	r3, [sp, #12]
 801de24:	f107 031f 	add.w	r3, r7, #31
 801de28:	9302      	str	r3, [sp, #8]
 801de2a:	f107 0314 	add.w	r3, r7, #20
 801de2e:	9301      	str	r3, [sp, #4]
 801de30:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801de34:	9300      	str	r3, [sp, #0]
 801de36:	460b      	mov	r3, r1
 801de38:	68b9      	ldr	r1, [r7, #8]
 801de3a:	f7ff feb1 	bl	801dba0 <lv_txt_get_next_word>
 801de3e:	6238      	str	r0, [r7, #32]
        max_width -= word_w;
 801de40:	88ba      	ldrh	r2, [r7, #4]
 801de42:	697b      	ldr	r3, [r7, #20]
 801de44:	b29b      	uxth	r3, r3
 801de46:	1ad3      	subs	r3, r2, r3
 801de48:	b29b      	uxth	r3, r3
 801de4a:	80bb      	strh	r3, [r7, #4]

        if(advance == 0) {
 801de4c:	6a3b      	ldr	r3, [r7, #32]
 801de4e:	2b00      	cmp	r3, #0
 801de50:	d10a      	bne.n	801de68 <_lv_txt_get_next_line+0x108>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
 801de52:	69bb      	ldr	r3, [r7, #24]
 801de54:	2b00      	cmp	r3, #0
 801de56:	d12f      	bne.n	801deb8 <_lv_txt_get_next_line+0x158>
 801de58:	4b1f      	ldr	r3, [pc, #124]	; (801ded8 <_lv_txt_get_next_line+0x178>)
 801de5a:	681b      	ldr	r3, [r3, #0]
 801de5c:	f107 0218 	add.w	r2, r7, #24
 801de60:	4611      	mov	r1, r2
 801de62:	68f8      	ldr	r0, [r7, #12]
 801de64:	4798      	blx	r3
            break;
 801de66:	e027      	b.n	801deb8 <_lv_txt_get_next_line+0x158>
        }

        i += advance;
 801de68:	69ba      	ldr	r2, [r7, #24]
 801de6a:	6a3b      	ldr	r3, [r7, #32]
 801de6c:	4413      	add	r3, r2
 801de6e:	61bb      	str	r3, [r7, #24]

        if(txt[0] == '\n' || txt[0] == '\r') break;
 801de70:	68fb      	ldr	r3, [r7, #12]
 801de72:	781b      	ldrb	r3, [r3, #0]
 801de74:	2b0a      	cmp	r3, #10
 801de76:	d01f      	beq.n	801deb8 <_lv_txt_get_next_line+0x158>
 801de78:	68fb      	ldr	r3, [r7, #12]
 801de7a:	781b      	ldrb	r3, [r3, #0]
 801de7c:	2b0d      	cmp	r3, #13
 801de7e:	d01b      	beq.n	801deb8 <_lv_txt_get_next_line+0x158>

        if(txt[i] == '\n' || txt[i] == '\r') {
 801de80:	69bb      	ldr	r3, [r7, #24]
 801de82:	68fa      	ldr	r2, [r7, #12]
 801de84:	4413      	add	r3, r2
 801de86:	781b      	ldrb	r3, [r3, #0]
 801de88:	2b0a      	cmp	r3, #10
 801de8a:	d005      	beq.n	801de98 <_lv_txt_get_next_line+0x138>
 801de8c:	69bb      	ldr	r3, [r7, #24]
 801de8e:	68fa      	ldr	r2, [r7, #12]
 801de90:	4413      	add	r3, r2
 801de92:	781b      	ldrb	r3, [r3, #0]
 801de94:	2b0d      	cmp	r3, #13
 801de96:	d104      	bne.n	801dea2 <_lv_txt_get_next_line+0x142>
            i++;  /* Include the following newline in the current line */
 801de98:	69bb      	ldr	r3, [r7, #24]
 801de9a:	3301      	adds	r3, #1
 801de9c:	61bb      	str	r3, [r7, #24]
            break;
 801de9e:	bf00      	nop
 801dea0:	e00b      	b.n	801deba <_lv_txt_get_next_line+0x15a>
    while(txt[i] != '\0' && max_width > 0) {
 801dea2:	69bb      	ldr	r3, [r7, #24]
 801dea4:	68fa      	ldr	r2, [r7, #12]
 801dea6:	4413      	add	r3, r2
 801dea8:	781b      	ldrb	r3, [r3, #0]
 801deaa:	2b00      	cmp	r3, #0
 801deac:	d005      	beq.n	801deba <_lv_txt_get_next_line+0x15a>
 801deae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801deb2:	2b00      	cmp	r3, #0
 801deb4:	dca6      	bgt.n	801de04 <_lv_txt_get_next_line+0xa4>
 801deb6:	e000      	b.n	801deba <_lv_txt_get_next_line+0x15a>
            break;
 801deb8:	bf00      	nop
        }

    }

    /* Always step at least one to avoid infinite loops */
    if(i == 0) {
 801deba:	69bb      	ldr	r3, [r7, #24]
 801debc:	2b00      	cmp	r3, #0
 801debe:	d106      	bne.n	801dece <_lv_txt_get_next_line+0x16e>
        _lv_txt_encoded_next(txt, &i);
 801dec0:	4b05      	ldr	r3, [pc, #20]	; (801ded8 <_lv_txt_get_next_line+0x178>)
 801dec2:	681b      	ldr	r3, [r3, #0]
 801dec4:	f107 0218 	add.w	r2, r7, #24
 801dec8:	4611      	mov	r1, r2
 801deca:	68f8      	ldr	r0, [r7, #12]
 801decc:	4798      	blx	r3
    }

    return i;
 801dece:	69bb      	ldr	r3, [r7, #24]
}
 801ded0:	4618      	mov	r0, r3
 801ded2:	3728      	adds	r7, #40	; 0x28
 801ded4:	46bd      	mov	sp, r7
 801ded6:	bd80      	pop	{r7, pc}
 801ded8:	2000140c 	.word	0x2000140c

0801dedc <_lv_txt_get_width>:
 * @param flags settings for the text from 'txt_flag_t' enum
 * @return length of a char_num long text
 */
lv_coord_t _lv_txt_get_width(const char * txt, uint32_t length, const lv_font_t * font, lv_coord_t letter_space,
                             lv_txt_flag_t flag)
{
 801dedc:	b580      	push	{r7, lr}
 801dede:	b08a      	sub	sp, #40	; 0x28
 801dee0:	af00      	add	r7, sp, #0
 801dee2:	60f8      	str	r0, [r7, #12]
 801dee4:	60b9      	str	r1, [r7, #8]
 801dee6:	607a      	str	r2, [r7, #4]
 801dee8:	807b      	strh	r3, [r7, #2]
    if(txt == NULL) return 0;
 801deea:	68fb      	ldr	r3, [r7, #12]
 801deec:	2b00      	cmp	r3, #0
 801deee:	d101      	bne.n	801def4 <_lv_txt_get_width+0x18>
 801def0:	2300      	movs	r3, #0
 801def2:	e053      	b.n	801df9c <_lv_txt_get_width+0xc0>
    if(font == NULL) return 0;
 801def4:	687b      	ldr	r3, [r7, #4]
 801def6:	2b00      	cmp	r3, #0
 801def8:	d101      	bne.n	801defe <_lv_txt_get_width+0x22>
 801defa:	2300      	movs	r3, #0
 801defc:	e04e      	b.n	801df9c <_lv_txt_get_width+0xc0>

    uint32_t i                   = 0;
 801defe:	2300      	movs	r3, #0
 801df00:	617b      	str	r3, [r7, #20]
    lv_coord_t width             = 0;
 801df02:	2300      	movs	r3, #0
 801df04:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 801df06:	2300      	movs	r3, #0
 801df08:	74fb      	strb	r3, [r7, #19]

    if(length != 0) {
 801df0a:	68bb      	ldr	r3, [r7, #8]
 801df0c:	2b00      	cmp	r3, #0
 801df0e:	d043      	beq.n	801df98 <_lv_txt_get_width+0xbc>
        while(i < length) {
 801df10:	e035      	b.n	801df7e <_lv_txt_get_width+0xa2>
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
 801df12:	4b24      	ldr	r3, [pc, #144]	; (801dfa4 <_lv_txt_get_width+0xc8>)
 801df14:	681b      	ldr	r3, [r3, #0]
 801df16:	f107 0214 	add.w	r2, r7, #20
 801df1a:	4611      	mov	r1, r2
 801df1c:	68f8      	ldr	r0, [r7, #12]
 801df1e:	4798      	blx	r3
 801df20:	6238      	str	r0, [r7, #32]
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
 801df22:	4b20      	ldr	r3, [pc, #128]	; (801dfa4 <_lv_txt_get_width+0xc8>)
 801df24:	681b      	ldr	r3, [r3, #0]
 801df26:	697a      	ldr	r2, [r7, #20]
 801df28:	68f9      	ldr	r1, [r7, #12]
 801df2a:	440a      	add	r2, r1
 801df2c:	2100      	movs	r1, #0
 801df2e:	4610      	mov	r0, r2
 801df30:	4798      	blx	r3
 801df32:	61f8      	str	r0, [r7, #28]
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 801df34:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801df38:	f003 0301 	and.w	r3, r3, #1
 801df3c:	2b00      	cmp	r3, #0
 801df3e:	d009      	beq.n	801df54 <_lv_txt_get_width+0x78>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
 801df40:	f107 0313 	add.w	r3, r7, #19
 801df44:	6a39      	ldr	r1, [r7, #32]
 801df46:	4618      	mov	r0, r3
 801df48:	f000 f82e 	bl	801dfa8 <_lv_txt_is_cmd>
 801df4c:	4603      	mov	r3, r0
 801df4e:	2b00      	cmp	r3, #0
 801df50:	d000      	beq.n	801df54 <_lv_txt_get_width+0x78>
                    continue;
 801df52:	e014      	b.n	801df7e <_lv_txt_get_width+0xa2>
                }
            }

            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 801df54:	69fa      	ldr	r2, [r7, #28]
 801df56:	6a39      	ldr	r1, [r7, #32]
 801df58:	6878      	ldr	r0, [r7, #4]
 801df5a:	f7fb fa47 	bl	80193ec <lv_font_get_glyph_width>
 801df5e:	4603      	mov	r3, r0
 801df60:	837b      	strh	r3, [r7, #26]
            if(char_width > 0) {
 801df62:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801df66:	2b00      	cmp	r3, #0
 801df68:	dd09      	ble.n	801df7e <_lv_txt_get_width+0xa2>
                width += char_width;
 801df6a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801df6c:	8b7b      	ldrh	r3, [r7, #26]
 801df6e:	4413      	add	r3, r2
 801df70:	b29b      	uxth	r3, r3
 801df72:	84fb      	strh	r3, [r7, #38]	; 0x26
                width += letter_space;
 801df74:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801df76:	887b      	ldrh	r3, [r7, #2]
 801df78:	4413      	add	r3, r2
 801df7a:	b29b      	uxth	r3, r3
 801df7c:	84fb      	strh	r3, [r7, #38]	; 0x26
        while(i < length) {
 801df7e:	697b      	ldr	r3, [r7, #20]
 801df80:	68ba      	ldr	r2, [r7, #8]
 801df82:	429a      	cmp	r2, r3
 801df84:	d8c5      	bhi.n	801df12 <_lv_txt_get_width+0x36>
            }
        }

        if(width > 0) {
 801df86:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801df8a:	2b00      	cmp	r3, #0
 801df8c:	dd04      	ble.n	801df98 <_lv_txt_get_width+0xbc>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 801df8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801df90:	887b      	ldrh	r3, [r7, #2]
 801df92:	1ad3      	subs	r3, r2, r3
 801df94:	b29b      	uxth	r3, r3
 801df96:	84fb      	strh	r3, [r7, #38]	; 0x26
                                      aligned */
        }
    }

    return width;
 801df98:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 801df9c:	4618      	mov	r0, r3
 801df9e:	3728      	adds	r7, #40	; 0x28
 801dfa0:	46bd      	mov	sp, r7
 801dfa2:	bd80      	pop	{r7, pc}
 801dfa4:	2000140c 	.word	0x2000140c

0801dfa8 <_lv_txt_is_cmd>:
 * @param c the current character
 * @return true: the character is part of a command and should not be written,
 *         false: the character should be written
 */
bool _lv_txt_is_cmd(lv_txt_cmd_state_t * state, uint32_t c)
{
 801dfa8:	b480      	push	{r7}
 801dfaa:	b085      	sub	sp, #20
 801dfac:	af00      	add	r7, sp, #0
 801dfae:	6078      	str	r0, [r7, #4]
 801dfb0:	6039      	str	r1, [r7, #0]
    bool ret = false;
 801dfb2:	2300      	movs	r3, #0
 801dfb4:	73fb      	strb	r3, [r7, #15]

    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 801dfb6:	2323      	movs	r3, #35	; 0x23
 801dfb8:	461a      	mov	r2, r3
 801dfba:	683b      	ldr	r3, [r7, #0]
 801dfbc:	4293      	cmp	r3, r2
 801dfbe:	d11a      	bne.n	801dff6 <_lv_txt_is_cmd+0x4e>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 801dfc0:	687b      	ldr	r3, [r7, #4]
 801dfc2:	781b      	ldrb	r3, [r3, #0]
 801dfc4:	2b00      	cmp	r3, #0
 801dfc6:	d105      	bne.n	801dfd4 <_lv_txt_is_cmd+0x2c>
            *state = LV_TXT_CMD_STATE_PAR;
 801dfc8:	687b      	ldr	r3, [r7, #4]
 801dfca:	2201      	movs	r2, #1
 801dfcc:	701a      	strb	r2, [r3, #0]
            ret    = true;
 801dfce:	2301      	movs	r3, #1
 801dfd0:	73fb      	strb	r3, [r7, #15]
 801dfd2:	e010      	b.n	801dff6 <_lv_txt_is_cmd+0x4e>
        }
        /*Other start char in parameter is escaped cmd. char */
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 801dfd4:	687b      	ldr	r3, [r7, #4]
 801dfd6:	781b      	ldrb	r3, [r3, #0]
 801dfd8:	2b01      	cmp	r3, #1
 801dfda:	d103      	bne.n	801dfe4 <_lv_txt_is_cmd+0x3c>
            *state = LV_TXT_CMD_STATE_WAIT;
 801dfdc:	687b      	ldr	r3, [r7, #4]
 801dfde:	2200      	movs	r2, #0
 801dfe0:	701a      	strb	r2, [r3, #0]
 801dfe2:	e008      	b.n	801dff6 <_lv_txt_is_cmd+0x4e>
        }
        /*Command end */
        else if(*state == LV_TXT_CMD_STATE_IN) {
 801dfe4:	687b      	ldr	r3, [r7, #4]
 801dfe6:	781b      	ldrb	r3, [r3, #0]
 801dfe8:	2b02      	cmp	r3, #2
 801dfea:	d104      	bne.n	801dff6 <_lv_txt_is_cmd+0x4e>
            *state = LV_TXT_CMD_STATE_WAIT;
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	2200      	movs	r2, #0
 801dff0:	701a      	strb	r2, [r3, #0]
            ret    = true;
 801dff2:	2301      	movs	r3, #1
 801dff4:	73fb      	strb	r3, [r7, #15]
        }
    }

    /*Skip the color parameter and wait the space after it*/
    if(*state == LV_TXT_CMD_STATE_PAR) {
 801dff6:	687b      	ldr	r3, [r7, #4]
 801dff8:	781b      	ldrb	r3, [r3, #0]
 801dffa:	2b01      	cmp	r3, #1
 801dffc:	d107      	bne.n	801e00e <_lv_txt_is_cmd+0x66>
        if(c == ' ') {
 801dffe:	683b      	ldr	r3, [r7, #0]
 801e000:	2b20      	cmp	r3, #32
 801e002:	d102      	bne.n	801e00a <_lv_txt_is_cmd+0x62>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 801e004:	687b      	ldr	r3, [r7, #4]
 801e006:	2202      	movs	r2, #2
 801e008:	701a      	strb	r2, [r3, #0]
        }
        ret = true;
 801e00a:	2301      	movs	r3, #1
 801e00c:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 801e00e:	7bfb      	ldrb	r3, [r7, #15]
}
 801e010:	4618      	mov	r0, r3
 801e012:	3714      	adds	r7, #20
 801e014:	46bd      	mov	sp, r7
 801e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e01a:	4770      	bx	lr

0801e01c <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 801e01c:	b480      	push	{r7}
 801e01e:	b085      	sub	sp, #20
 801e020:	af00      	add	r7, sp, #0
 801e022:	6078      	str	r0, [r7, #4]
 801e024:	6039      	str	r1, [r7, #0]
     * 00000000 00000000 00000yyy yyxxxxxx -> 110yyyyy 10xxxxxx
     * 00000000 00000000 zzzzyyyy yyxxxxxx -> 1110zzzz 10yyyyyy 10xxxxxx
     * 00000000 000wwwzz zzzzyyyy yyxxxxxx -> 11110www 10zzzzzz 10yyyyyy 10xxxxxx
     * */

    uint32_t result = 0;
 801e026:	2300      	movs	r3, #0
 801e028:	60fb      	str	r3, [r7, #12]

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 801e02a:	2300      	movs	r3, #0
 801e02c:	60bb      	str	r3, [r7, #8]
    if(i == NULL) i = &i_tmp;
 801e02e:	683b      	ldr	r3, [r7, #0]
 801e030:	2b00      	cmp	r3, #0
 801e032:	d102      	bne.n	801e03a <lv_txt_utf8_next+0x1e>
 801e034:	f107 0308 	add.w	r3, r7, #8
 801e038:	603b      	str	r3, [r7, #0]

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 801e03a:	683b      	ldr	r3, [r7, #0]
 801e03c:	681b      	ldr	r3, [r3, #0]
 801e03e:	687a      	ldr	r2, [r7, #4]
 801e040:	4413      	add	r3, r2
 801e042:	781b      	ldrb	r3, [r3, #0]
 801e044:	b25b      	sxtb	r3, r3
 801e046:	2b00      	cmp	r3, #0
 801e048:	db0b      	blt.n	801e062 <lv_txt_utf8_next+0x46>
        result = txt[*i];
 801e04a:	683b      	ldr	r3, [r7, #0]
 801e04c:	681b      	ldr	r3, [r3, #0]
 801e04e:	687a      	ldr	r2, [r7, #4]
 801e050:	4413      	add	r3, r2
 801e052:	781b      	ldrb	r3, [r3, #0]
 801e054:	60fb      	str	r3, [r7, #12]
        (*i)++;
 801e056:	683b      	ldr	r3, [r7, #0]
 801e058:	681b      	ldr	r3, [r3, #0]
 801e05a:	1c5a      	adds	r2, r3, #1
 801e05c:	683b      	ldr	r3, [r7, #0]
 801e05e:	601a      	str	r2, [r3, #0]
 801e060:	e0ea      	b.n	801e238 <lv_txt_utf8_next+0x21c>
    }
    /*Real UTF-8 decode*/
    else {
        /*2 bytes UTF-8 code*/
        if((txt[*i] & 0xE0) == 0xC0) {
 801e062:	683b      	ldr	r3, [r7, #0]
 801e064:	681b      	ldr	r3, [r3, #0]
 801e066:	687a      	ldr	r2, [r7, #4]
 801e068:	4413      	add	r3, r2
 801e06a:	781b      	ldrb	r3, [r3, #0]
 801e06c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801e070:	2bc0      	cmp	r3, #192	; 0xc0
 801e072:	d128      	bne.n	801e0c6 <lv_txt_utf8_next+0xaa>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 801e074:	683b      	ldr	r3, [r7, #0]
 801e076:	681b      	ldr	r3, [r3, #0]
 801e078:	687a      	ldr	r2, [r7, #4]
 801e07a:	4413      	add	r3, r2
 801e07c:	781b      	ldrb	r3, [r3, #0]
 801e07e:	019b      	lsls	r3, r3, #6
 801e080:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 801e084:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801e086:	683b      	ldr	r3, [r7, #0]
 801e088:	681b      	ldr	r3, [r3, #0]
 801e08a:	1c5a      	adds	r2, r3, #1
 801e08c:	683b      	ldr	r3, [r7, #0]
 801e08e:	601a      	str	r2, [r3, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801e090:	683b      	ldr	r3, [r7, #0]
 801e092:	681b      	ldr	r3, [r3, #0]
 801e094:	687a      	ldr	r2, [r7, #4]
 801e096:	4413      	add	r3, r2
 801e098:	781b      	ldrb	r3, [r3, #0]
 801e09a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801e09e:	2b80      	cmp	r3, #128	; 0x80
 801e0a0:	d001      	beq.n	801e0a6 <lv_txt_utf8_next+0x8a>
 801e0a2:	2300      	movs	r3, #0
 801e0a4:	e0c9      	b.n	801e23a <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 801e0a6:	683b      	ldr	r3, [r7, #0]
 801e0a8:	681b      	ldr	r3, [r3, #0]
 801e0aa:	687a      	ldr	r2, [r7, #4]
 801e0ac:	4413      	add	r3, r2
 801e0ae:	781b      	ldrb	r3, [r3, #0]
 801e0b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e0b4:	68fa      	ldr	r2, [r7, #12]
 801e0b6:	4413      	add	r3, r2
 801e0b8:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801e0ba:	683b      	ldr	r3, [r7, #0]
 801e0bc:	681b      	ldr	r3, [r3, #0]
 801e0be:	1c5a      	adds	r2, r3, #1
 801e0c0:	683b      	ldr	r3, [r7, #0]
 801e0c2:	601a      	str	r2, [r3, #0]
 801e0c4:	e0b8      	b.n	801e238 <lv_txt_utf8_next+0x21c>
        }
        /*3 bytes UTF-8 code*/
        else if((txt[*i] & 0xF0) == 0xE0) {
 801e0c6:	683b      	ldr	r3, [r7, #0]
 801e0c8:	681b      	ldr	r3, [r3, #0]
 801e0ca:	687a      	ldr	r2, [r7, #4]
 801e0cc:	4413      	add	r3, r2
 801e0ce:	781b      	ldrb	r3, [r3, #0]
 801e0d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801e0d4:	2be0      	cmp	r3, #224	; 0xe0
 801e0d6:	d142      	bne.n	801e15e <lv_txt_utf8_next+0x142>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 801e0d8:	683b      	ldr	r3, [r7, #0]
 801e0da:	681b      	ldr	r3, [r3, #0]
 801e0dc:	687a      	ldr	r2, [r7, #4]
 801e0de:	4413      	add	r3, r2
 801e0e0:	781b      	ldrb	r3, [r3, #0]
 801e0e2:	031b      	lsls	r3, r3, #12
 801e0e4:	b29b      	uxth	r3, r3
 801e0e6:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801e0e8:	683b      	ldr	r3, [r7, #0]
 801e0ea:	681b      	ldr	r3, [r3, #0]
 801e0ec:	1c5a      	adds	r2, r3, #1
 801e0ee:	683b      	ldr	r3, [r7, #0]
 801e0f0:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801e0f2:	683b      	ldr	r3, [r7, #0]
 801e0f4:	681b      	ldr	r3, [r3, #0]
 801e0f6:	687a      	ldr	r2, [r7, #4]
 801e0f8:	4413      	add	r3, r2
 801e0fa:	781b      	ldrb	r3, [r3, #0]
 801e0fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801e100:	2b80      	cmp	r3, #128	; 0x80
 801e102:	d001      	beq.n	801e108 <lv_txt_utf8_next+0xec>
 801e104:	2300      	movs	r3, #0
 801e106:	e098      	b.n	801e23a <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 801e108:	683b      	ldr	r3, [r7, #0]
 801e10a:	681b      	ldr	r3, [r3, #0]
 801e10c:	687a      	ldr	r2, [r7, #4]
 801e10e:	4413      	add	r3, r2
 801e110:	781b      	ldrb	r3, [r3, #0]
 801e112:	019b      	lsls	r3, r3, #6
 801e114:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 801e118:	68fa      	ldr	r2, [r7, #12]
 801e11a:	4413      	add	r3, r2
 801e11c:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801e11e:	683b      	ldr	r3, [r7, #0]
 801e120:	681b      	ldr	r3, [r3, #0]
 801e122:	1c5a      	adds	r2, r3, #1
 801e124:	683b      	ldr	r3, [r7, #0]
 801e126:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801e128:	683b      	ldr	r3, [r7, #0]
 801e12a:	681b      	ldr	r3, [r3, #0]
 801e12c:	687a      	ldr	r2, [r7, #4]
 801e12e:	4413      	add	r3, r2
 801e130:	781b      	ldrb	r3, [r3, #0]
 801e132:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801e136:	2b80      	cmp	r3, #128	; 0x80
 801e138:	d001      	beq.n	801e13e <lv_txt_utf8_next+0x122>
 801e13a:	2300      	movs	r3, #0
 801e13c:	e07d      	b.n	801e23a <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 801e13e:	683b      	ldr	r3, [r7, #0]
 801e140:	681b      	ldr	r3, [r3, #0]
 801e142:	687a      	ldr	r2, [r7, #4]
 801e144:	4413      	add	r3, r2
 801e146:	781b      	ldrb	r3, [r3, #0]
 801e148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e14c:	68fa      	ldr	r2, [r7, #12]
 801e14e:	4413      	add	r3, r2
 801e150:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801e152:	683b      	ldr	r3, [r7, #0]
 801e154:	681b      	ldr	r3, [r3, #0]
 801e156:	1c5a      	adds	r2, r3, #1
 801e158:	683b      	ldr	r3, [r7, #0]
 801e15a:	601a      	str	r2, [r3, #0]
 801e15c:	e06c      	b.n	801e238 <lv_txt_utf8_next+0x21c>
        }
        /*4 bytes UTF-8 code*/
        else if((txt[*i] & 0xF8) == 0xF0) {
 801e15e:	683b      	ldr	r3, [r7, #0]
 801e160:	681b      	ldr	r3, [r3, #0]
 801e162:	687a      	ldr	r2, [r7, #4]
 801e164:	4413      	add	r3, r2
 801e166:	781b      	ldrb	r3, [r3, #0]
 801e168:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801e16c:	2bf0      	cmp	r3, #240	; 0xf0
 801e16e:	d15e      	bne.n	801e22e <lv_txt_utf8_next+0x212>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 801e170:	683b      	ldr	r3, [r7, #0]
 801e172:	681b      	ldr	r3, [r3, #0]
 801e174:	687a      	ldr	r2, [r7, #4]
 801e176:	4413      	add	r3, r2
 801e178:	781b      	ldrb	r3, [r3, #0]
 801e17a:	049b      	lsls	r3, r3, #18
 801e17c:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 801e180:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801e182:	683b      	ldr	r3, [r7, #0]
 801e184:	681b      	ldr	r3, [r3, #0]
 801e186:	1c5a      	adds	r2, r3, #1
 801e188:	683b      	ldr	r3, [r7, #0]
 801e18a:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801e18c:	683b      	ldr	r3, [r7, #0]
 801e18e:	681b      	ldr	r3, [r3, #0]
 801e190:	687a      	ldr	r2, [r7, #4]
 801e192:	4413      	add	r3, r2
 801e194:	781b      	ldrb	r3, [r3, #0]
 801e196:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801e19a:	2b80      	cmp	r3, #128	; 0x80
 801e19c:	d001      	beq.n	801e1a2 <lv_txt_utf8_next+0x186>
 801e19e:	2300      	movs	r3, #0
 801e1a0:	e04b      	b.n	801e23a <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 801e1a2:	683b      	ldr	r3, [r7, #0]
 801e1a4:	681b      	ldr	r3, [r3, #0]
 801e1a6:	687a      	ldr	r2, [r7, #4]
 801e1a8:	4413      	add	r3, r2
 801e1aa:	781b      	ldrb	r3, [r3, #0]
 801e1ac:	031b      	lsls	r3, r3, #12
 801e1ae:	f403 337c 	and.w	r3, r3, #258048	; 0x3f000
 801e1b2:	68fa      	ldr	r2, [r7, #12]
 801e1b4:	4413      	add	r3, r2
 801e1b6:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801e1b8:	683b      	ldr	r3, [r7, #0]
 801e1ba:	681b      	ldr	r3, [r3, #0]
 801e1bc:	1c5a      	adds	r2, r3, #1
 801e1be:	683b      	ldr	r3, [r7, #0]
 801e1c0:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801e1c2:	683b      	ldr	r3, [r7, #0]
 801e1c4:	681b      	ldr	r3, [r3, #0]
 801e1c6:	687a      	ldr	r2, [r7, #4]
 801e1c8:	4413      	add	r3, r2
 801e1ca:	781b      	ldrb	r3, [r3, #0]
 801e1cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801e1d0:	2b80      	cmp	r3, #128	; 0x80
 801e1d2:	d001      	beq.n	801e1d8 <lv_txt_utf8_next+0x1bc>
 801e1d4:	2300      	movs	r3, #0
 801e1d6:	e030      	b.n	801e23a <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 801e1d8:	683b      	ldr	r3, [r7, #0]
 801e1da:	681b      	ldr	r3, [r3, #0]
 801e1dc:	687a      	ldr	r2, [r7, #4]
 801e1de:	4413      	add	r3, r2
 801e1e0:	781b      	ldrb	r3, [r3, #0]
 801e1e2:	019b      	lsls	r3, r3, #6
 801e1e4:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 801e1e8:	68fa      	ldr	r2, [r7, #12]
 801e1ea:	4413      	add	r3, r2
 801e1ec:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801e1ee:	683b      	ldr	r3, [r7, #0]
 801e1f0:	681b      	ldr	r3, [r3, #0]
 801e1f2:	1c5a      	adds	r2, r3, #1
 801e1f4:	683b      	ldr	r3, [r7, #0]
 801e1f6:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801e1f8:	683b      	ldr	r3, [r7, #0]
 801e1fa:	681b      	ldr	r3, [r3, #0]
 801e1fc:	687a      	ldr	r2, [r7, #4]
 801e1fe:	4413      	add	r3, r2
 801e200:	781b      	ldrb	r3, [r3, #0]
 801e202:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801e206:	2b80      	cmp	r3, #128	; 0x80
 801e208:	d001      	beq.n	801e20e <lv_txt_utf8_next+0x1f2>
 801e20a:	2300      	movs	r3, #0
 801e20c:	e015      	b.n	801e23a <lv_txt_utf8_next+0x21e>
            result += txt[*i] & 0x3F;
 801e20e:	683b      	ldr	r3, [r7, #0]
 801e210:	681b      	ldr	r3, [r3, #0]
 801e212:	687a      	ldr	r2, [r7, #4]
 801e214:	4413      	add	r3, r2
 801e216:	781b      	ldrb	r3, [r3, #0]
 801e218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e21c:	68fa      	ldr	r2, [r7, #12]
 801e21e:	4413      	add	r3, r2
 801e220:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801e222:	683b      	ldr	r3, [r7, #0]
 801e224:	681b      	ldr	r3, [r3, #0]
 801e226:	1c5a      	adds	r2, r3, #1
 801e228:	683b      	ldr	r3, [r7, #0]
 801e22a:	601a      	str	r2, [r3, #0]
 801e22c:	e004      	b.n	801e238 <lv_txt_utf8_next+0x21c>
        }
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
 801e22e:	683b      	ldr	r3, [r7, #0]
 801e230:	681b      	ldr	r3, [r3, #0]
 801e232:	1c5a      	adds	r2, r3, #1
 801e234:	683b      	ldr	r3, [r7, #0]
 801e236:	601a      	str	r2, [r3, #0]
        }
    }
    return result;
 801e238:	68fb      	ldr	r3, [r7, #12]
}
 801e23a:	4618      	mov	r0, r3
 801e23c:	3714      	adds	r7, #20
 801e23e:	46bd      	mov	sp, r7
 801e240:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e244:	4770      	bx	lr
	...

0801e248 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 801e248:	b580      	push	{r7, lr}
 801e24a:	b084      	sub	sp, #16
 801e24c:	af00      	add	r7, sp, #0
 801e24e:	6078      	str	r0, [r7, #4]
 801e250:	6039      	str	r1, [r7, #0]
    uint32_t i        = 0;
 801e252:	2300      	movs	r3, #0
 801e254:	60bb      	str	r3, [r7, #8]
    uint32_t char_cnt = 0;
 801e256:	2300      	movs	r3, #0
 801e258:	60fb      	str	r3, [r7, #12]

    while(i < byte_id) {
 801e25a:	e009      	b.n	801e270 <lv_txt_utf8_get_char_id+0x28>
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 801e25c:	4b09      	ldr	r3, [pc, #36]	; (801e284 <lv_txt_utf8_get_char_id+0x3c>)
 801e25e:	681b      	ldr	r3, [r3, #0]
 801e260:	f107 0208 	add.w	r2, r7, #8
 801e264:	4611      	mov	r1, r2
 801e266:	6878      	ldr	r0, [r7, #4]
 801e268:	4798      	blx	r3
        char_cnt++;
 801e26a:	68fb      	ldr	r3, [r7, #12]
 801e26c:	3301      	adds	r3, #1
 801e26e:	60fb      	str	r3, [r7, #12]
    while(i < byte_id) {
 801e270:	68bb      	ldr	r3, [r7, #8]
 801e272:	683a      	ldr	r2, [r7, #0]
 801e274:	429a      	cmp	r2, r3
 801e276:	d8f1      	bhi.n	801e25c <lv_txt_utf8_get_char_id+0x14>
    }

    return char_cnt;
 801e278:	68fb      	ldr	r3, [r7, #12]
}
 801e27a:	4618      	mov	r0, r3
 801e27c:	3710      	adds	r7, #16
 801e27e:	46bd      	mov	sp, r7
 801e280:	bd80      	pop	{r7, pc}
 801e282:	bf00      	nop
 801e284:	2000140c 	.word	0x2000140c

0801e288 <is_break_char>:
 * Test if char is break char or not (a text can broken here or not)
 * @param letter a letter
 * @return false: 'letter' is not break char
 */
static inline bool is_break_char(uint32_t letter)
{
 801e288:	b480      	push	{r7}
 801e28a:	b085      	sub	sp, #20
 801e28c:	af00      	add	r7, sp, #0
 801e28e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    bool ret = false;
 801e290:	2300      	movs	r3, #0
 801e292:	73bb      	strb	r3, [r7, #14]

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 801e294:	2300      	movs	r3, #0
 801e296:	73fb      	strb	r3, [r7, #15]
 801e298:	e00c      	b.n	801e2b4 <is_break_char+0x2c>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 801e29a:	7bfb      	ldrb	r3, [r7, #15]
 801e29c:	4a0b      	ldr	r2, [pc, #44]	; (801e2cc <is_break_char+0x44>)
 801e29e:	5cd3      	ldrb	r3, [r2, r3]
 801e2a0:	461a      	mov	r2, r3
 801e2a2:	687b      	ldr	r3, [r7, #4]
 801e2a4:	4293      	cmp	r3, r2
 801e2a6:	d102      	bne.n	801e2ae <is_break_char+0x26>
            ret = true; /*If match then it is break char*/
 801e2a8:	2301      	movs	r3, #1
 801e2aa:	73bb      	strb	r3, [r7, #14]
            break;
 801e2ac:	e007      	b.n	801e2be <is_break_char+0x36>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 801e2ae:	7bfb      	ldrb	r3, [r7, #15]
 801e2b0:	3301      	adds	r3, #1
 801e2b2:	73fb      	strb	r3, [r7, #15]
 801e2b4:	7bfb      	ldrb	r3, [r7, #15]
 801e2b6:	4a05      	ldr	r2, [pc, #20]	; (801e2cc <is_break_char+0x44>)
 801e2b8:	5cd3      	ldrb	r3, [r2, r3]
 801e2ba:	2b00      	cmp	r3, #0
 801e2bc:	d1ed      	bne.n	801e29a <is_break_char+0x12>
        }
    }

    return ret;
 801e2be:	7bbb      	ldrb	r3, [r7, #14]
}
 801e2c0:	4618      	mov	r0, r3
 801e2c2:	3714      	adds	r7, #20
 801e2c4:	46bd      	mov	sp, r7
 801e2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2ca:	4770      	bx	lr
 801e2cc:	0802d930 	.word	0x0802d930

0801e2d0 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 801e2d0:	b580      	push	{r7, lr}
 801e2d2:	b086      	sub	sp, #24
 801e2d4:	af00      	add	r7, sp, #0
 801e2d6:	60f8      	str	r0, [r7, #12]
 801e2d8:	60b9      	str	r1, [r7, #8]
 801e2da:	607a      	str	r2, [r7, #4]
 801e2dc:	603b      	str	r3, [r7, #0]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 801e2de:	68bb      	ldr	r3, [r7, #8]
 801e2e0:	617b      	str	r3, [r7, #20]
 801e2e2:	e02d      	b.n	801e340 <_lv_utils_bsearch+0x70>
        middle += (n / 2) * size;
 801e2e4:	687b      	ldr	r3, [r7, #4]
 801e2e6:	085b      	lsrs	r3, r3, #1
 801e2e8:	683a      	ldr	r2, [r7, #0]
 801e2ea:	fb02 f303 	mul.w	r3, r2, r3
 801e2ee:	697a      	ldr	r2, [r7, #20]
 801e2f0:	4413      	add	r3, r2
 801e2f2:	617b      	str	r3, [r7, #20]
        if((c = (*cmp)(key, middle)) > 0) {
 801e2f4:	6a3b      	ldr	r3, [r7, #32]
 801e2f6:	6979      	ldr	r1, [r7, #20]
 801e2f8:	68f8      	ldr	r0, [r7, #12]
 801e2fa:	4798      	blx	r3
 801e2fc:	6138      	str	r0, [r7, #16]
 801e2fe:	693b      	ldr	r3, [r7, #16]
 801e300:	2b00      	cmp	r3, #0
 801e302:	dd12      	ble.n	801e32a <_lv_utils_bsearch+0x5a>
            n    = (n / 2) - ((n & 1) == 0);
 801e304:	687b      	ldr	r3, [r7, #4]
 801e306:	085b      	lsrs	r3, r3, #1
 801e308:	687a      	ldr	r2, [r7, #4]
 801e30a:	f002 0201 	and.w	r2, r2, #1
 801e30e:	2a00      	cmp	r2, #0
 801e310:	bf0c      	ite	eq
 801e312:	2201      	moveq	r2, #1
 801e314:	2200      	movne	r2, #0
 801e316:	b2d2      	uxtb	r2, r2
 801e318:	1a9b      	subs	r3, r3, r2
 801e31a:	607b      	str	r3, [r7, #4]
            base = (middle += size);
 801e31c:	697a      	ldr	r2, [r7, #20]
 801e31e:	683b      	ldr	r3, [r7, #0]
 801e320:	4413      	add	r3, r2
 801e322:	617b      	str	r3, [r7, #20]
 801e324:	697b      	ldr	r3, [r7, #20]
 801e326:	60bb      	str	r3, [r7, #8]
 801e328:	e00a      	b.n	801e340 <_lv_utils_bsearch+0x70>
        }
        else if(c < 0) {
 801e32a:	693b      	ldr	r3, [r7, #16]
 801e32c:	2b00      	cmp	r3, #0
 801e32e:	da05      	bge.n	801e33c <_lv_utils_bsearch+0x6c>
            n /= 2;
 801e330:	687b      	ldr	r3, [r7, #4]
 801e332:	085b      	lsrs	r3, r3, #1
 801e334:	607b      	str	r3, [r7, #4]
            middle = base;
 801e336:	68bb      	ldr	r3, [r7, #8]
 801e338:	617b      	str	r3, [r7, #20]
 801e33a:	e001      	b.n	801e340 <_lv_utils_bsearch+0x70>
        }
        else {
            return (char *)middle;
 801e33c:	697b      	ldr	r3, [r7, #20]
 801e33e:	e003      	b.n	801e348 <_lv_utils_bsearch+0x78>
    for(middle = base; n != 0;) {
 801e340:	687b      	ldr	r3, [r7, #4]
 801e342:	2b00      	cmp	r3, #0
 801e344:	d1ce      	bne.n	801e2e4 <_lv_utils_bsearch+0x14>
        }
    }
    return NULL;
 801e346:	2300      	movs	r3, #0
}
 801e348:	4618      	mov	r0, r3
 801e34a:	3718      	adds	r7, #24
 801e34c:	46bd      	mov	sp, r7
 801e34e:	bd80      	pop	{r7, pc}

0801e350 <lv_theme_set_act>:
 * Set a theme for the system.
 * From now, all the created objects will use styles from this theme by default
 * @param th pointer to theme (return value of: 'lv_theme_init_xxx()')
 */
void lv_theme_set_act(lv_theme_t * th)
{
 801e350:	b480      	push	{r7}
 801e352:	b083      	sub	sp, #12
 801e354:	af00      	add	r7, sp, #0
 801e356:	6078      	str	r0, [r7, #4]
    act_theme = th;
 801e358:	4a04      	ldr	r2, [pc, #16]	; (801e36c <lv_theme_set_act+0x1c>)
 801e35a:	687b      	ldr	r3, [r7, #4]
 801e35c:	6013      	str	r3, [r2, #0]
}
 801e35e:	bf00      	nop
 801e360:	370c      	adds	r7, #12
 801e362:	46bd      	mov	sp, r7
 801e364:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e368:	4770      	bx	lr
 801e36a:	bf00      	nop
 801e36c:	20021468 	.word	0x20021468

0801e370 <lv_theme_apply>:
 * Apply the active theme on an object
 * @param obj pointer to an object
 * @param name the name of the theme element to apply. E.g. `LV_THEME_BTN`
 */
void lv_theme_apply(lv_obj_t * obj, lv_theme_style_t name)
{
 801e370:	b580      	push	{r7, lr}
 801e372:	b082      	sub	sp, #8
 801e374:	af00      	add	r7, sp, #0
 801e376:	6078      	str	r0, [r7, #4]
 801e378:	460b      	mov	r3, r1
 801e37a:	807b      	strh	r3, [r7, #2]
    /* Remove the existing styles from all part of the object. */
    clear_styles(obj, name);
 801e37c:	887b      	ldrh	r3, [r7, #2]
 801e37e:	4619      	mov	r1, r3
 801e380:	6878      	ldr	r0, [r7, #4]
 801e382:	f000 f847 	bl	801e414 <clear_styles>

    /*Apply the theme including the base theme(s)*/

    apply_theme(act_theme, obj, name);
 801e386:	4b05      	ldr	r3, [pc, #20]	; (801e39c <lv_theme_apply+0x2c>)
 801e388:	681b      	ldr	r3, [r3, #0]
 801e38a:	887a      	ldrh	r2, [r7, #2]
 801e38c:	6879      	ldr	r1, [r7, #4]
 801e38e:	4618      	mov	r0, r3
 801e390:	f000 f812 	bl	801e3b8 <apply_theme>
}
 801e394:	bf00      	nop
 801e396:	3708      	adds	r7, #8
 801e398:	46bd      	mov	sp, r7
 801e39a:	bd80      	pop	{r7, pc}
 801e39c:	20021468 	.word	0x20021468

0801e3a0 <lv_theme_get_font_normal>:
/**
 * Get the normal font of the theme
 * @return pointer to the font
 */
const lv_font_t * lv_theme_get_font_normal(void)
{
 801e3a0:	b480      	push	{r7}
 801e3a2:	af00      	add	r7, sp, #0
    return act_theme->font_normal;
 801e3a4:	4b03      	ldr	r3, [pc, #12]	; (801e3b4 <lv_theme_get_font_normal+0x14>)
 801e3a6:	681b      	ldr	r3, [r3, #0]
 801e3a8:	699b      	ldr	r3, [r3, #24]
}
 801e3aa:	4618      	mov	r0, r3
 801e3ac:	46bd      	mov	sp, r7
 801e3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3b2:	4770      	bx	lr
 801e3b4:	20021468 	.word	0x20021468

0801e3b8 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
 801e3b8:	b580      	push	{r7, lr}
 801e3ba:	b084      	sub	sp, #16
 801e3bc:	af00      	add	r7, sp, #0
 801e3be:	60f8      	str	r0, [r7, #12]
 801e3c0:	60b9      	str	r1, [r7, #8]
 801e3c2:	4613      	mov	r3, r2
 801e3c4:	80fb      	strh	r3, [r7, #6]
    if(th->base) {
 801e3c6:	68fb      	ldr	r3, [r7, #12]
 801e3c8:	689b      	ldr	r3, [r3, #8]
 801e3ca:	2b00      	cmp	r3, #0
 801e3cc:	d006      	beq.n	801e3dc <apply_theme+0x24>
        apply_theme(th->base, obj, name);
 801e3ce:	68fb      	ldr	r3, [r7, #12]
 801e3d0:	689b      	ldr	r3, [r3, #8]
 801e3d2:	88fa      	ldrh	r2, [r7, #6]
 801e3d4:	68b9      	ldr	r1, [r7, #8]
 801e3d6:	4618      	mov	r0, r3
 801e3d8:	f7ff ffee 	bl	801e3b8 <apply_theme>
    }

    /*apply_xcb is deprecated, use apply_cb instead*/
    if(th->apply_xcb) {
 801e3dc:	68fb      	ldr	r3, [r7, #12]
 801e3de:	685b      	ldr	r3, [r3, #4]
 801e3e0:	2b00      	cmp	r3, #0
 801e3e2:	d006      	beq.n	801e3f2 <apply_theme+0x3a>
        th->apply_xcb(obj, name);
 801e3e4:	68fb      	ldr	r3, [r7, #12]
 801e3e6:	685b      	ldr	r3, [r3, #4]
 801e3e8:	88fa      	ldrh	r2, [r7, #6]
 801e3ea:	4611      	mov	r1, r2
 801e3ec:	68b8      	ldr	r0, [r7, #8]
 801e3ee:	4798      	blx	r3
    }
    else if(th->apply_cb) {
        th->apply_cb(act_theme, obj, name);
    }
}
 801e3f0:	e00a      	b.n	801e408 <apply_theme+0x50>
    else if(th->apply_cb) {
 801e3f2:	68fb      	ldr	r3, [r7, #12]
 801e3f4:	681b      	ldr	r3, [r3, #0]
 801e3f6:	2b00      	cmp	r3, #0
 801e3f8:	d006      	beq.n	801e408 <apply_theme+0x50>
        th->apply_cb(act_theme, obj, name);
 801e3fa:	68fb      	ldr	r3, [r7, #12]
 801e3fc:	681b      	ldr	r3, [r3, #0]
 801e3fe:	4a04      	ldr	r2, [pc, #16]	; (801e410 <apply_theme+0x58>)
 801e400:	6810      	ldr	r0, [r2, #0]
 801e402:	88fa      	ldrh	r2, [r7, #6]
 801e404:	68b9      	ldr	r1, [r7, #8]
 801e406:	4798      	blx	r3
}
 801e408:	bf00      	nop
 801e40a:	3710      	adds	r7, #16
 801e40c:	46bd      	mov	sp, r7
 801e40e:	bd80      	pop	{r7, pc}
 801e410:	20021468 	.word	0x20021468

0801e414 <clear_styles>:

static void clear_styles(lv_obj_t * obj, lv_theme_style_t name)
{
 801e414:	b580      	push	{r7, lr}
 801e416:	b082      	sub	sp, #8
 801e418:	af00      	add	r7, sp, #0
 801e41a:	6078      	str	r0, [r7, #4]
 801e41c:	460b      	mov	r3, r1
 801e41e:	807b      	strh	r3, [r7, #2]
    switch(name) {
 801e420:	887b      	ldrh	r3, [r7, #2]
 801e422:	2b28      	cmp	r3, #40	; 0x28
 801e424:	f200 81d2 	bhi.w	801e7cc <clear_styles+0x3b8>
 801e428:	a201      	add	r2, pc, #4	; (adr r2, 801e430 <clear_styles+0x1c>)
 801e42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e42e:	bf00      	nop
 801e430:	0801e7cd 	.word	0x0801e7cd
 801e434:	0801e4d5 	.word	0x0801e4d5
 801e438:	0801e4df 	.word	0x0801e4df
 801e43c:	0801e57f 	.word	0x0801e57f
 801e440:	0801e521 	.word	0x0801e521
 801e444:	0801e4f3 	.word	0x0801e4f3
 801e448:	0801e4fd 	.word	0x0801e4fd
 801e44c:	0801e775 	.word	0x0801e775
 801e450:	0801e54d 	.word	0x0801e54d
 801e454:	0801e5bd 	.word	0x0801e5bd
 801e458:	0801e6c7 	.word	0x0801e6c7
 801e45c:	0801e4e9 	.word	0x0801e4e9
 801e460:	0801e797 	.word	0x0801e797
 801e464:	0801e6a5 	.word	0x0801e6a5
 801e468:	0801e7b3 	.word	0x0801e7b3
 801e46c:	0801e557 	.word	0x0801e557
 801e470:	0801e561 	.word	0x0801e561
 801e474:	0801e50f 	.word	0x0801e50f
 801e478:	0801e56b 	.word	0x0801e56b
 801e47c:	0801e5eb 	.word	0x0801e5eb
 801e480:	0801e575 	.word	0x0801e575
 801e484:	0801e681 	.word	0x0801e681
 801e488:	0801e69b 	.word	0x0801e69b
 801e48c:	0801e7a9 	.word	0x0801e7a9
 801e490:	0801e5cf 	.word	0x0801e5cf
 801e494:	0801e5d9 	.word	0x0801e5d9
 801e498:	0801e677 	.word	0x0801e677
 801e49c:	0801e5f5 	.word	0x0801e5f5
 801e4a0:	0801e665 	.word	0x0801e665
 801e4a4:	0801e5a3 	.word	0x0801e5a3
 801e4a8:	0801e759 	.word	0x0801e759
 801e4ac:	0801e76b 	.word	0x0801e76b
 801e4b0:	0801e591 	.word	0x0801e591
 801e4b4:	0801e533 	.word	0x0801e533
 801e4b8:	0801e6e1 	.word	0x0801e6e1
 801e4bc:	0801e60f 	.word	0x0801e60f
 801e4c0:	0801e639 	.word	0x0801e639
 801e4c4:	0801e737 	.word	0x0801e737
 801e4c8:	0801e64b 	.word	0x0801e64b
 801e4cc:	0801e70b 	.word	0x0801e70b
 801e4d0:	0801e72d 	.word	0x0801e72d
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
 801e4d4:	2100      	movs	r1, #0
 801e4d6:	6878      	ldr	r0, [r7, #4]
 801e4d8:	f7e7 fcda 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e4dc:	e177      	b.n	801e7ce <clear_styles+0x3ba>
        case LV_THEME_OBJ:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
 801e4de:	2100      	movs	r1, #0
 801e4e0:	6878      	ldr	r0, [r7, #4]
 801e4e2:	f7e7 fcd5 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e4e6:	e172      	b.n	801e7ce <clear_styles+0x3ba>
#if LV_USE_CONT
        case LV_THEME_CONT:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
 801e4e8:	2100      	movs	r1, #0
 801e4ea:	6878      	ldr	r0, [r7, #4]
 801e4ec:	f7e7 fcd0 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e4f0:	e16d      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_BTN
        case LV_THEME_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
 801e4f2:	2100      	movs	r1, #0
 801e4f4:	6878      	ldr	r0, [r7, #4]
 801e4f6:	f7e7 fccb 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e4fa:	e168      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_BTNMATRIX
        case LV_THEME_BTNMATRIX:
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BG);
 801e4fc:	2100      	movs	r1, #0
 801e4fe:	6878      	ldr	r0, [r7, #4]
 801e500:	f7e7 fcc6 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BTN);
 801e504:	2101      	movs	r1, #1
 801e506:	6878      	ldr	r0, [r7, #4]
 801e508:	f7e7 fcc2 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e50c:	e15f      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_KEYBOARD
        case LV_THEME_KEYBOARD:
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BG);
 801e50e:	2100      	movs	r1, #0
 801e510:	6878      	ldr	r0, [r7, #4]
 801e512:	f7e7 fcbd 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BTN);
 801e516:	2101      	movs	r1, #1
 801e518:	6878      	ldr	r0, [r7, #4]
 801e51a:	f7e7 fcb9 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e51e:	e156      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_BAR
        case LV_THEME_BAR:
            lv_obj_clean_style_list(obj, LV_BAR_PART_BG);
 801e520:	2100      	movs	r1, #0
 801e522:	6878      	ldr	r0, [r7, #4]
 801e524:	f7e7 fcb4 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_BAR_PART_INDIC);
 801e528:	2101      	movs	r1, #1
 801e52a:	6878      	ldr	r0, [r7, #4]
 801e52c:	f7e7 fcb0 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e530:	e14d      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_SWITCH
        case LV_THEME_SWITCH:
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_BG);
 801e532:	2100      	movs	r1, #0
 801e534:	6878      	ldr	r0, [r7, #4]
 801e536:	f7e7 fcab 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_INDIC);
 801e53a:	2101      	movs	r1, #1
 801e53c:	6878      	ldr	r0, [r7, #4]
 801e53e:	f7e7 fca7 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_KNOB);
 801e542:	2102      	movs	r1, #2
 801e544:	6878      	ldr	r0, [r7, #4]
 801e546:	f7e7 fca3 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e54a:	e140      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_CANVAS
        case LV_THEME_CANVAS:
            lv_obj_clean_style_list(obj, LV_CANVAS_PART_MAIN);
 801e54c:	2100      	movs	r1, #0
 801e54e:	6878      	ldr	r0, [r7, #4]
 801e550:	f7e7 fc9e 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e554:	e13b      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_IMG
        case LV_THEME_IMAGE:
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
 801e556:	2100      	movs	r1, #0
 801e558:	6878      	ldr	r0, [r7, #4]
 801e55a:	f7e7 fc99 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e55e:	e136      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_IMGBTN
        case LV_THEME_IMGBTN:
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
 801e560:	2100      	movs	r1, #0
 801e562:	6878      	ldr	r0, [r7, #4]
 801e564:	f7e7 fc94 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e568:	e131      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_LABEL
        case LV_THEME_LABEL:
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
 801e56a:	2100      	movs	r1, #0
 801e56c:	6878      	ldr	r0, [r7, #4]
 801e56e:	f7e7 fc8f 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e572:	e12c      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_LINE
        case LV_THEME_LINE:
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
 801e574:	2100      	movs	r1, #0
 801e576:	6878      	ldr	r0, [r7, #4]
 801e578:	f7e7 fc8a 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e57c:	e127      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_ARC
        case LV_THEME_ARC:
            lv_obj_clean_style_list(obj, LV_ARC_PART_BG);
 801e57e:	2100      	movs	r1, #0
 801e580:	6878      	ldr	r0, [r7, #4]
 801e582:	f7e7 fc85 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_ARC_PART_INDIC);
 801e586:	2101      	movs	r1, #1
 801e588:	6878      	ldr	r0, [r7, #4]
 801e58a:	f7e7 fc81 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e58e:	e11e      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_SPINNER
        case LV_THEME_SPINNER:
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_BG);
 801e590:	2100      	movs	r1, #0
 801e592:	6878      	ldr	r0, [r7, #4]
 801e594:	f7e7 fc7c 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_INDIC);
 801e598:	2101      	movs	r1, #1
 801e59a:	6878      	ldr	r0, [r7, #4]
 801e59c:	f7e7 fc78 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e5a0:	e115      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_SLIDER
        case LV_THEME_SLIDER:
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_BG);
 801e5a2:	2100      	movs	r1, #0
 801e5a4:	6878      	ldr	r0, [r7, #4]
 801e5a6:	f7e7 fc73 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_INDIC);
 801e5aa:	2101      	movs	r1, #1
 801e5ac:	6878      	ldr	r0, [r7, #4]
 801e5ae:	f7e7 fc6f 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_KNOB);
 801e5b2:	2102      	movs	r1, #2
 801e5b4:	6878      	ldr	r0, [r7, #4]
 801e5b6:	f7e7 fc6b 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e5ba:	e108      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_CHECKBOX
        case LV_THEME_CHECKBOX:
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BG);
 801e5bc:	2100      	movs	r1, #0
 801e5be:	6878      	ldr	r0, [r7, #4]
 801e5c0:	f7e7 fc66 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BULLET);
 801e5c4:	2140      	movs	r1, #64	; 0x40
 801e5c6:	6878      	ldr	r0, [r7, #4]
 801e5c8:	f7e7 fc62 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e5cc:	e0ff      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_MSGBOX
        case LV_THEME_MSGBOX:
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BG);
 801e5ce:	2100      	movs	r1, #0
 801e5d0:	6878      	ldr	r0, [r7, #4]
 801e5d2:	f7e7 fc5d 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e5d6:	e0fa      	b.n	801e7ce <clear_styles+0x3ba>

        case LV_THEME_MSGBOX_BTNS:
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN_BG);
 801e5d8:	2140      	movs	r1, #64	; 0x40
 801e5da:	6878      	ldr	r0, [r7, #4]
 801e5dc:	f7e7 fc58 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN);
 801e5e0:	2141      	movs	r1, #65	; 0x41
 801e5e2:	6878      	ldr	r0, [r7, #4]
 801e5e4:	f7e7 fc54 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e5e8:	e0f1      	b.n	801e7ce <clear_styles+0x3ba>

#endif
#if LV_USE_LED
        case LV_THEME_LED:
            lv_obj_clean_style_list(obj, LV_LED_PART_MAIN);
 801e5ea:	2100      	movs	r1, #0
 801e5ec:	6878      	ldr	r0, [r7, #4]
 801e5ee:	f7e7 fc4f 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e5f2:	e0ec      	b.n	801e7ce <clear_styles+0x3ba>
#endif
#if LV_USE_PAGE
        case LV_THEME_PAGE:
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
 801e5f4:	2100      	movs	r1, #0
 801e5f6:	6878      	ldr	r0, [r7, #4]
 801e5f8:	f7e7 fc4a 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
 801e5fc:	2140      	movs	r1, #64	; 0x40
 801e5fe:	6878      	ldr	r0, [r7, #4]
 801e600:	f7e7 fc46 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLBAR);
 801e604:	2101      	movs	r1, #1
 801e606:	6878      	ldr	r0, [r7, #4]
 801e608:	f7e7 fc42 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e60c:	e0df      	b.n	801e7ce <clear_styles+0x3ba>
#endif
#if LV_USE_TABVIEW
        case LV_THEME_TABVIEW:
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG);
 801e60e:	2100      	movs	r1, #0
 801e610:	6878      	ldr	r0, [r7, #4]
 801e612:	f7e7 fc3d 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG_SCROLLABLE);
 801e616:	2140      	movs	r1, #64	; 0x40
 801e618:	6878      	ldr	r0, [r7, #4]
 801e61a:	f7e7 fc39 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BG);
 801e61e:	2141      	movs	r1, #65	; 0x41
 801e620:	6878      	ldr	r0, [r7, #4]
 801e622:	f7e7 fc35 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_INDIC);
 801e626:	2143      	movs	r1, #67	; 0x43
 801e628:	6878      	ldr	r0, [r7, #4]
 801e62a:	f7e7 fc31 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
 801e62e:	2142      	movs	r1, #66	; 0x42
 801e630:	6878      	ldr	r0, [r7, #4]
 801e632:	f7e7 fc2d 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e636:	e0ca      	b.n	801e7ce <clear_styles+0x3ba>

        case LV_THEME_TABVIEW_PAGE:
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
 801e638:	2100      	movs	r1, #0
 801e63a:	6878      	ldr	r0, [r7, #4]
 801e63c:	f7e7 fc28 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
 801e640:	2140      	movs	r1, #64	; 0x40
 801e642:	6878      	ldr	r0, [r7, #4]
 801e644:	f7e7 fc24 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e648:	e0c1      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_TILEVIEW
        case LV_THEME_TILEVIEW:
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_BG);
 801e64a:	2100      	movs	r1, #0
 801e64c:	6878      	ldr	r0, [r7, #4]
 801e64e:	f7e7 fc1f 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
 801e652:	2101      	movs	r1, #1
 801e654:	6878      	ldr	r0, [r7, #4]
 801e656:	f7e7 fc1b 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
 801e65a:	2102      	movs	r1, #2
 801e65c:	6878      	ldr	r0, [r7, #4]
 801e65e:	f7e7 fc17 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e662:	e0b4      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_ROLLER
        case LV_THEME_ROLLER:
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_BG);
 801e664:	2100      	movs	r1, #0
 801e666:	6878      	ldr	r0, [r7, #4]
 801e668:	f7e7 fc12 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_SELECTED);
 801e66c:	2103      	movs	r1, #3
 801e66e:	6878      	ldr	r0, [r7, #4]
 801e670:	f7e7 fc0e 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e674:	e0ab      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_OBJMASK
        case LV_THEME_OBJMASK:
            lv_obj_clean_style_list(obj, LV_OBJMASK_PART_MAIN);
 801e676:	2100      	movs	r1, #0
 801e678:	6878      	ldr	r0, [r7, #4]
 801e67a:	f7e7 fc09 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e67e:	e0a6      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_LIST
        case LV_THEME_LIST:
            lv_obj_clean_style_list(obj, LV_LIST_PART_BG);
 801e680:	2100      	movs	r1, #0
 801e682:	6878      	ldr	r0, [r7, #4]
 801e684:	f7e7 fc04 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLABLE);
 801e688:	2140      	movs	r1, #64	; 0x40
 801e68a:	6878      	ldr	r0, [r7, #4]
 801e68c:	f7e7 fc00 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLBAR);
 801e690:	2101      	movs	r1, #1
 801e692:	6878      	ldr	r0, [r7, #4]
 801e694:	f7e7 fbfc 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e698:	e099      	b.n	801e7ce <clear_styles+0x3ba>

        case LV_THEME_LIST_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
 801e69a:	2100      	movs	r1, #0
 801e69c:	6878      	ldr	r0, [r7, #4]
 801e69e:	f7e7 fbf7 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e6a2:	e094      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_DROPDOWN
        case LV_THEME_DROPDOWN:
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_MAIN);
 801e6a4:	2100      	movs	r1, #0
 801e6a6:	6878      	ldr	r0, [r7, #4]
 801e6a8:	f7e7 fbf2 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_LIST);
 801e6ac:	2140      	movs	r1, #64	; 0x40
 801e6ae:	6878      	ldr	r0, [r7, #4]
 801e6b0:	f7e7 fbee 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
 801e6b4:	2141      	movs	r1, #65	; 0x41
 801e6b6:	6878      	ldr	r0, [r7, #4]
 801e6b8:	f7e7 fbea 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SELECTED);
 801e6bc:	2142      	movs	r1, #66	; 0x42
 801e6be:	6878      	ldr	r0, [r7, #4]
 801e6c0:	f7e7 fbe6 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e6c4:	e083      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_CHART
        case LV_THEME_CHART:
            lv_obj_clean_style_list(obj, LV_CHART_PART_BG);
 801e6c6:	2100      	movs	r1, #0
 801e6c8:	6878      	ldr	r0, [r7, #4]
 801e6ca:	f7e7 fbe1 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES_BG);
 801e6ce:	2101      	movs	r1, #1
 801e6d0:	6878      	ldr	r0, [r7, #4]
 801e6d2:	f7e7 fbdd 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES);
 801e6d6:	2102      	movs	r1, #2
 801e6d8:	6878      	ldr	r0, [r7, #4]
 801e6da:	f7e7 fbd9 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e6de:	e076      	b.n	801e7ce <clear_styles+0x3ba>
#endif
#if LV_USE_TABLE
        case LV_THEME_TABLE:
            lv_obj_clean_style_list(obj, LV_TABLE_PART_BG);
 801e6e0:	2100      	movs	r1, #0
 801e6e2:	6878      	ldr	r0, [r7, #4]
 801e6e4:	f7e7 fbd4 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL1);
 801e6e8:	2101      	movs	r1, #1
 801e6ea:	6878      	ldr	r0, [r7, #4]
 801e6ec:	f7e7 fbd0 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL2);
 801e6f0:	2102      	movs	r1, #2
 801e6f2:	6878      	ldr	r0, [r7, #4]
 801e6f4:	f7e7 fbcc 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL3);
 801e6f8:	2103      	movs	r1, #3
 801e6fa:	6878      	ldr	r0, [r7, #4]
 801e6fc:	f7e7 fbc8 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL4);
 801e700:	2104      	movs	r1, #4
 801e702:	6878      	ldr	r0, [r7, #4]
 801e704:	f7e7 fbc4 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e708:	e061      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_WIN
        case LV_THEME_WIN:
            lv_obj_clean_style_list(obj, LV_WIN_PART_BG);
 801e70a:	2100      	movs	r1, #0
 801e70c:	6878      	ldr	r0, [r7, #4]
 801e70e:	f7e7 fbbf 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_WIN_PART_SCROLLBAR);
 801e712:	2142      	movs	r1, #66	; 0x42
 801e714:	6878      	ldr	r0, [r7, #4]
 801e716:	f7e7 fbbb 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
 801e71a:	2141      	movs	r1, #65	; 0x41
 801e71c:	6878      	ldr	r0, [r7, #4]
 801e71e:	f7e7 fbb7 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_WIN_PART_HEADER);
 801e722:	2140      	movs	r1, #64	; 0x40
 801e724:	6878      	ldr	r0, [r7, #4]
 801e726:	f7e7 fbb3 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e72a:	e050      	b.n	801e7ce <clear_styles+0x3ba>

        case LV_THEME_WIN_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
 801e72c:	2100      	movs	r1, #0
 801e72e:	6878      	ldr	r0, [r7, #4]
 801e730:	f7e7 fbae 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e734:	e04b      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_TEXTAREA
        case LV_THEME_TEXTAREA:
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_BG);
 801e736:	2100      	movs	r1, #0
 801e738:	6878      	ldr	r0, [r7, #4]
 801e73a:	f7e7 fba9 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
 801e73e:	2104      	movs	r1, #4
 801e740:	6878      	ldr	r0, [r7, #4]
 801e742:	f7e7 fba5 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_CURSOR);
 801e746:	2103      	movs	r1, #3
 801e748:	6878      	ldr	r0, [r7, #4]
 801e74a:	f7e7 fba1 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
 801e74e:	2101      	movs	r1, #1
 801e750:	6878      	ldr	r0, [r7, #4]
 801e752:	f7e7 fb9d 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e756:	e03a      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_SPINBOX
        case LV_THEME_SPINBOX:
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_BG);
 801e758:	2100      	movs	r1, #0
 801e75a:	6878      	ldr	r0, [r7, #4]
 801e75c:	f7e7 fb98 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_CURSOR);
 801e760:	2103      	movs	r1, #3
 801e762:	6878      	ldr	r0, [r7, #4]
 801e764:	f7e7 fb94 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e768:	e031      	b.n	801e7ce <clear_styles+0x3ba>

        case LV_THEME_SPINBOX_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
 801e76a:	2100      	movs	r1, #0
 801e76c:	6878      	ldr	r0, [r7, #4]
 801e76e:	f7e7 fb8f 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e772:	e02c      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_CALENDAR
        case LV_THEME_CALENDAR:
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_BG);
 801e774:	2100      	movs	r1, #0
 801e776:	6878      	ldr	r0, [r7, #4]
 801e778:	f7e7 fb8a 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DATE);
 801e77c:	2103      	movs	r1, #3
 801e77e:	6878      	ldr	r0, [r7, #4]
 801e780:	f7e7 fb86 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_HEADER);
 801e784:	2101      	movs	r1, #1
 801e786:	6878      	ldr	r0, [r7, #4]
 801e788:	f7e7 fb82 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
 801e78c:	2102      	movs	r1, #2
 801e78e:	6878      	ldr	r0, [r7, #4]
 801e790:	f7e7 fb7e 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e794:	e01b      	b.n	801e7ce <clear_styles+0x3ba>
#endif
#if LV_USE_CPICKER
        case LV_THEME_CPICKER:
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_MAIN);
 801e796:	2100      	movs	r1, #0
 801e798:	6878      	ldr	r0, [r7, #4]
 801e79a:	f7e7 fb79 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_KNOB);
 801e79e:	2101      	movs	r1, #1
 801e7a0:	6878      	ldr	r0, [r7, #4]
 801e7a2:	f7e7 fb75 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e7a6:	e012      	b.n	801e7ce <clear_styles+0x3ba>
#endif

#if LV_USE_LINEMETER
        case LV_THEME_LINEMETER:
            lv_obj_clean_style_list(obj, LV_LINEMETER_PART_MAIN);
 801e7a8:	2100      	movs	r1, #0
 801e7aa:	6878      	ldr	r0, [r7, #4]
 801e7ac:	f7e7 fb70 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e7b0:	e00d      	b.n	801e7ce <clear_styles+0x3ba>
#endif
#if LV_USE_GAUGE
        case LV_THEME_GAUGE:
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAIN);
 801e7b2:	2100      	movs	r1, #0
 801e7b4:	6878      	ldr	r0, [r7, #4]
 801e7b6:	f7e7 fb6b 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAJOR);
 801e7ba:	2101      	movs	r1, #1
 801e7bc:	6878      	ldr	r0, [r7, #4]
 801e7be:	f7e7 fb67 	bl	8005e90 <lv_obj_clean_style_list>
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_NEEDLE);
 801e7c2:	2102      	movs	r1, #2
 801e7c4:	6878      	ldr	r0, [r7, #4]
 801e7c6:	f7e7 fb63 	bl	8005e90 <lv_obj_clean_style_list>
            break;
 801e7ca:	e000      	b.n	801e7ce <clear_styles+0x3ba>
#endif
        default:
            break;
 801e7cc:	bf00      	nop
    }

}
 801e7ce:	bf00      	nop
 801e7d0:	3708      	adds	r7, #8
 801e7d2:	46bd      	mov	sp, r7
 801e7d4:	bd80      	pop	{r7, pc}
 801e7d6:	bf00      	nop

0801e7d8 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 801e7d8:	b480      	push	{r7}
 801e7da:	b087      	sub	sp, #28
 801e7dc:	af00      	add	r7, sp, #0
 801e7de:	60f8      	str	r0, [r7, #12]
 801e7e0:	60b9      	str	r1, [r7, #8]
 801e7e2:	4613      	mov	r3, r2
 801e7e4:	71fb      	strb	r3, [r7, #7]
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801e7e6:	7bbb      	ldrb	r3, [r7, #14]
 801e7e8:	461a      	mov	r2, r3
 801e7ea:	79fb      	ldrb	r3, [r7, #7]
 801e7ec:	fb03 f202 	mul.w	r2, r3, r2
 801e7f0:	7abb      	ldrb	r3, [r7, #10]
 801e7f2:	4619      	mov	r1, r3
 801e7f4:	79fb      	ldrb	r3, [r7, #7]
 801e7f6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801e7fa:	fb03 f301 	mul.w	r3, r3, r1
 801e7fe:	4413      	add	r3, r2
 801e800:	461a      	mov	r2, r3
 801e802:	4613      	mov	r3, r2
 801e804:	021b      	lsls	r3, r3, #8
 801e806:	4413      	add	r3, r2
 801e808:	01db      	lsls	r3, r3, #7
 801e80a:	4413      	add	r3, r2
 801e80c:	0ddb      	lsrs	r3, r3, #23
 801e80e:	b2db      	uxtb	r3, r3
 801e810:	75bb      	strb	r3, [r7, #22]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801e812:	7b7b      	ldrb	r3, [r7, #13]
 801e814:	461a      	mov	r2, r3
 801e816:	79fb      	ldrb	r3, [r7, #7]
 801e818:	fb03 f202 	mul.w	r2, r3, r2
 801e81c:	7a7b      	ldrb	r3, [r7, #9]
 801e81e:	4619      	mov	r1, r3
 801e820:	79fb      	ldrb	r3, [r7, #7]
 801e822:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801e826:	fb03 f301 	mul.w	r3, r3, r1
 801e82a:	4413      	add	r3, r2
 801e82c:	461a      	mov	r2, r3
 801e82e:	4613      	mov	r3, r2
 801e830:	021b      	lsls	r3, r3, #8
 801e832:	4413      	add	r3, r2
 801e834:	01db      	lsls	r3, r3, #7
 801e836:	4413      	add	r3, r2
 801e838:	0ddb      	lsrs	r3, r3, #23
 801e83a:	b2db      	uxtb	r3, r3
 801e83c:	757b      	strb	r3, [r7, #21]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801e83e:	7b3b      	ldrb	r3, [r7, #12]
 801e840:	461a      	mov	r2, r3
 801e842:	79fb      	ldrb	r3, [r7, #7]
 801e844:	fb03 f202 	mul.w	r2, r3, r2
 801e848:	7a3b      	ldrb	r3, [r7, #8]
 801e84a:	4619      	mov	r1, r3
 801e84c:	79fb      	ldrb	r3, [r7, #7]
 801e84e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801e852:	fb03 f301 	mul.w	r3, r3, r1
 801e856:	4413      	add	r3, r2
 801e858:	461a      	mov	r2, r3
 801e85a:	4613      	mov	r3, r2
 801e85c:	021b      	lsls	r3, r3, #8
 801e85e:	4413      	add	r3, r2
 801e860:	01db      	lsls	r3, r3, #7
 801e862:	4413      	add	r3, r2
 801e864:	0ddb      	lsrs	r3, r3, #23
 801e866:	b2db      	uxtb	r3, r3
 801e868:	753b      	strb	r3, [r7, #20]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
 801e86a:	23ff      	movs	r3, #255	; 0xff
 801e86c:	75fb      	strb	r3, [r7, #23]
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 801e86e:	697b      	ldr	r3, [r7, #20]
}
 801e870:	4618      	mov	r0, r3
 801e872:	371c      	adds	r7, #28
 801e874:	46bd      	mov	sp, r7
 801e876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e87a:	4770      	bx	lr

0801e87c <lv_color_make>:
#elif LV_COLOR_DEPTH == 32
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 801e87c:	b490      	push	{r4, r7}
 801e87e:	b082      	sub	sp, #8
 801e880:	af00      	add	r7, sp, #0
 801e882:	4604      	mov	r4, r0
 801e884:	4608      	mov	r0, r1
 801e886:	4611      	mov	r1, r2
 801e888:	4622      	mov	r2, r4
 801e88a:	71fa      	strb	r2, [r7, #7]
 801e88c:	4602      	mov	r2, r0
 801e88e:	71ba      	strb	r2, [r7, #6]
 801e890:	460a      	mov	r2, r1
 801e892:	717a      	strb	r2, [r7, #5]
    return LV_COLOR_MAKE(r, g, b);
 801e894:	797a      	ldrb	r2, [r7, #5]
 801e896:	f362 0307 	bfi	r3, r2, #0, #8
 801e89a:	79ba      	ldrb	r2, [r7, #6]
 801e89c:	f362 230f 	bfi	r3, r2, #8, #8
 801e8a0:	79fa      	ldrb	r2, [r7, #7]
 801e8a2:	f362 4317 	bfi	r3, r2, #16, #8
 801e8a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
}
 801e8aa:	4618      	mov	r0, r3
 801e8ac:	3708      	adds	r7, #8
 801e8ae:	46bd      	mov	sp, r7
 801e8b0:	bc90      	pop	{r4, r7}
 801e8b2:	4770      	bx	lr

0801e8b4 <lv_color_hex>:

static inline lv_color_t lv_color_hex(uint32_t c)
{
 801e8b4:	b580      	push	{r7, lr}
 801e8b6:	b082      	sub	sp, #8
 801e8b8:	af00      	add	r7, sp, #0
 801e8ba:	6078      	str	r0, [r7, #4]
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
 801e8bc:	687b      	ldr	r3, [r7, #4]
 801e8be:	0c1b      	lsrs	r3, r3, #16
 801e8c0:	b2d8      	uxtb	r0, r3
 801e8c2:	687b      	ldr	r3, [r7, #4]
 801e8c4:	0a1b      	lsrs	r3, r3, #8
 801e8c6:	b2db      	uxtb	r3, r3
 801e8c8:	687a      	ldr	r2, [r7, #4]
 801e8ca:	b2d2      	uxtb	r2, r2
 801e8cc:	4619      	mov	r1, r3
 801e8ce:	f7ff ffd5 	bl	801e87c <lv_color_make>
 801e8d2:	4603      	mov	r3, r0
}
 801e8d4:	4618      	mov	r0, r3
 801e8d6:	3708      	adds	r7, #8
 801e8d8:	46bd      	mov	sp, r7
 801e8da:	bd80      	pop	{r7, pc}

0801e8dc <lv_color_hex3>:

static inline lv_color_t lv_color_hex3(uint32_t c)
{
 801e8dc:	b580      	push	{r7, lr}
 801e8de:	b082      	sub	sp, #8
 801e8e0:	af00      	add	r7, sp, #0
 801e8e2:	6078      	str	r0, [r7, #4]
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
 801e8e4:	687b      	ldr	r3, [r7, #4]
 801e8e6:	091b      	lsrs	r3, r3, #4
 801e8e8:	b2db      	uxtb	r3, r3
 801e8ea:	f023 030f 	bic.w	r3, r3, #15
 801e8ee:	b2da      	uxtb	r2, r3
 801e8f0:	687b      	ldr	r3, [r7, #4]
 801e8f2:	0a1b      	lsrs	r3, r3, #8
 801e8f4:	b2db      	uxtb	r3, r3
 801e8f6:	f003 030f 	and.w	r3, r3, #15
 801e8fa:	b2db      	uxtb	r3, r3
 801e8fc:	4313      	orrs	r3, r2
 801e8fe:	b2d8      	uxtb	r0, r3
 801e900:	687b      	ldr	r3, [r7, #4]
 801e902:	b2db      	uxtb	r3, r3
 801e904:	f023 030f 	bic.w	r3, r3, #15
 801e908:	b2da      	uxtb	r2, r3
 801e90a:	687b      	ldr	r3, [r7, #4]
 801e90c:	091b      	lsrs	r3, r3, #4
 801e90e:	b2db      	uxtb	r3, r3
 801e910:	f003 030f 	and.w	r3, r3, #15
 801e914:	b2db      	uxtb	r3, r3
 801e916:	4313      	orrs	r3, r2
 801e918:	b2d9      	uxtb	r1, r3
                         (uint8_t)((c & 0xF) | ((c & 0xF) << 4)));
 801e91a:	687b      	ldr	r3, [r7, #4]
 801e91c:	b2db      	uxtb	r3, r3
 801e91e:	f003 030f 	and.w	r3, r3, #15
 801e922:	b2da      	uxtb	r2, r3
 801e924:	687b      	ldr	r3, [r7, #4]
 801e926:	b2db      	uxtb	r3, r3
 801e928:	011b      	lsls	r3, r3, #4
 801e92a:	b2db      	uxtb	r3, r3
    return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((c & 0xF0) >> 4)),
 801e92c:	4313      	orrs	r3, r2
 801e92e:	b2db      	uxtb	r3, r3
 801e930:	461a      	mov	r2, r3
 801e932:	f7ff ffa3 	bl	801e87c <lv_color_make>
 801e936:	4603      	mov	r3, r0
}
 801e938:	4618      	mov	r0, r3
 801e93a:	3708      	adds	r7, #8
 801e93c:	46bd      	mov	sp, r7
 801e93e:	bd80      	pop	{r7, pc}

0801e940 <lv_style_set_radius>:
#define _LV_OBJ_STYLE_SET_GET_DECLARE(prop_name, func_name, value_type, style_type, scalar)                             \
    _OBJ_GET_STYLE_##scalar(prop_name, func_name, value_type, style_type)                                               \
    _OBJ_SET_STYLE_LOCAL_##scalar(prop_name, func_name, value_type, style_type)                                         \
    _OBJ_SET_STYLE_##scalar(prop_name, func_name, value_type, style_type)

_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
 801e940:	b580      	push	{r7, lr}
 801e942:	b082      	sub	sp, #8
 801e944:	af00      	add	r7, sp, #0
 801e946:	6078      	str	r0, [r7, #4]
 801e948:	460b      	mov	r3, r1
 801e94a:	70fb      	strb	r3, [r7, #3]
 801e94c:	4613      	mov	r3, r2
 801e94e:	803b      	strh	r3, [r7, #0]
 801e950:	78fb      	ldrb	r3, [r7, #3]
 801e952:	021b      	lsls	r3, r3, #8
 801e954:	b21b      	sxth	r3, r3
 801e956:	f043 0301 	orr.w	r3, r3, #1
 801e95a:	b21b      	sxth	r3, r3
 801e95c:	b29b      	uxth	r3, r3
 801e95e:	f9b7 2000 	ldrsh.w	r2, [r7]
 801e962:	4619      	mov	r1, r3
 801e964:	6878      	ldr	r0, [r7, #4]
 801e966:	f7ec fed9 	bl	800b71c <_lv_style_set_int>
 801e96a:	bf00      	nop
 801e96c:	3708      	adds	r7, #8
 801e96e:	46bd      	mov	sp, r7
 801e970:	bd80      	pop	{r7, pc}

0801e972 <lv_style_set_clip_corner>:
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
 801e972:	b580      	push	{r7, lr}
 801e974:	b082      	sub	sp, #8
 801e976:	af00      	add	r7, sp, #0
 801e978:	6078      	str	r0, [r7, #4]
 801e97a:	460b      	mov	r3, r1
 801e97c:	70fb      	strb	r3, [r7, #3]
 801e97e:	4613      	mov	r3, r2
 801e980:	70bb      	strb	r3, [r7, #2]
 801e982:	78fb      	ldrb	r3, [r7, #3]
 801e984:	021b      	lsls	r3, r3, #8
 801e986:	b21b      	sxth	r3, r3
 801e988:	f043 0302 	orr.w	r3, r3, #2
 801e98c:	b21b      	sxth	r3, r3
 801e98e:	b29b      	uxth	r3, r3
 801e990:	78ba      	ldrb	r2, [r7, #2]
 801e992:	b212      	sxth	r2, r2
 801e994:	4619      	mov	r1, r3
 801e996:	6878      	ldr	r0, [r7, #4]
 801e998:	f7ec fec0 	bl	800b71c <_lv_style_set_int>
 801e99c:	bf00      	nop
 801e99e:	3708      	adds	r7, #8
 801e9a0:	46bd      	mov	sp, r7
 801e9a2:	bd80      	pop	{r7, pc}

0801e9a4 <lv_style_set_size>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
 801e9a4:	b580      	push	{r7, lr}
 801e9a6:	b082      	sub	sp, #8
 801e9a8:	af00      	add	r7, sp, #0
 801e9aa:	6078      	str	r0, [r7, #4]
 801e9ac:	460b      	mov	r3, r1
 801e9ae:	70fb      	strb	r3, [r7, #3]
 801e9b0:	4613      	mov	r3, r2
 801e9b2:	803b      	strh	r3, [r7, #0]
 801e9b4:	78fb      	ldrb	r3, [r7, #3]
 801e9b6:	021b      	lsls	r3, r3, #8
 801e9b8:	b21b      	sxth	r3, r3
 801e9ba:	f043 0303 	orr.w	r3, r3, #3
 801e9be:	b21b      	sxth	r3, r3
 801e9c0:	b29b      	uxth	r3, r3
 801e9c2:	f9b7 2000 	ldrsh.w	r2, [r7]
 801e9c6:	4619      	mov	r1, r3
 801e9c8:	6878      	ldr	r0, [r7, #4]
 801e9ca:	f7ec fea7 	bl	800b71c <_lv_style_set_int>
 801e9ce:	bf00      	nop
 801e9d0:	3708      	adds	r7, #8
 801e9d2:	46bd      	mov	sp, r7
 801e9d4:	bd80      	pop	{r7, pc}

0801e9d6 <lv_style_set_transform_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
 801e9d6:	b580      	push	{r7, lr}
 801e9d8:	b082      	sub	sp, #8
 801e9da:	af00      	add	r7, sp, #0
 801e9dc:	6078      	str	r0, [r7, #4]
 801e9de:	460b      	mov	r3, r1
 801e9e0:	70fb      	strb	r3, [r7, #3]
 801e9e2:	4613      	mov	r3, r2
 801e9e4:	803b      	strh	r3, [r7, #0]
 801e9e6:	78fb      	ldrb	r3, [r7, #3]
 801e9e8:	021b      	lsls	r3, r3, #8
 801e9ea:	b21b      	sxth	r3, r3
 801e9ec:	f043 0304 	orr.w	r3, r3, #4
 801e9f0:	b21b      	sxth	r3, r3
 801e9f2:	b29b      	uxth	r3, r3
 801e9f4:	f9b7 2000 	ldrsh.w	r2, [r7]
 801e9f8:	4619      	mov	r1, r3
 801e9fa:	6878      	ldr	r0, [r7, #4]
 801e9fc:	f7ec fe8e 	bl	800b71c <_lv_style_set_int>
 801ea00:	bf00      	nop
 801ea02:	3708      	adds	r7, #8
 801ea04:	46bd      	mov	sp, r7
 801ea06:	bd80      	pop	{r7, pc}

0801ea08 <lv_style_set_pad_top>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
 801ea08:	b580      	push	{r7, lr}
 801ea0a:	b082      	sub	sp, #8
 801ea0c:	af00      	add	r7, sp, #0
 801ea0e:	6078      	str	r0, [r7, #4]
 801ea10:	460b      	mov	r3, r1
 801ea12:	70fb      	strb	r3, [r7, #3]
 801ea14:	4613      	mov	r3, r2
 801ea16:	803b      	strh	r3, [r7, #0]
 801ea18:	78fb      	ldrb	r3, [r7, #3]
 801ea1a:	021b      	lsls	r3, r3, #8
 801ea1c:	b21b      	sxth	r3, r3
 801ea1e:	f043 0310 	orr.w	r3, r3, #16
 801ea22:	b21b      	sxth	r3, r3
 801ea24:	b29b      	uxth	r3, r3
 801ea26:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ea2a:	4619      	mov	r1, r3
 801ea2c:	6878      	ldr	r0, [r7, #4]
 801ea2e:	f7ec fe75 	bl	800b71c <_lv_style_set_int>
 801ea32:	bf00      	nop
 801ea34:	3708      	adds	r7, #8
 801ea36:	46bd      	mov	sp, r7
 801ea38:	bd80      	pop	{r7, pc}

0801ea3a <lv_style_set_pad_bottom>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
 801ea3a:	b580      	push	{r7, lr}
 801ea3c:	b082      	sub	sp, #8
 801ea3e:	af00      	add	r7, sp, #0
 801ea40:	6078      	str	r0, [r7, #4]
 801ea42:	460b      	mov	r3, r1
 801ea44:	70fb      	strb	r3, [r7, #3]
 801ea46:	4613      	mov	r3, r2
 801ea48:	803b      	strh	r3, [r7, #0]
 801ea4a:	78fb      	ldrb	r3, [r7, #3]
 801ea4c:	021b      	lsls	r3, r3, #8
 801ea4e:	b21b      	sxth	r3, r3
 801ea50:	f043 0311 	orr.w	r3, r3, #17
 801ea54:	b21b      	sxth	r3, r3
 801ea56:	b29b      	uxth	r3, r3
 801ea58:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ea5c:	4619      	mov	r1, r3
 801ea5e:	6878      	ldr	r0, [r7, #4]
 801ea60:	f7ec fe5c 	bl	800b71c <_lv_style_set_int>
 801ea64:	bf00      	nop
 801ea66:	3708      	adds	r7, #8
 801ea68:	46bd      	mov	sp, r7
 801ea6a:	bd80      	pop	{r7, pc}

0801ea6c <lv_style_set_pad_left>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
 801ea6c:	b580      	push	{r7, lr}
 801ea6e:	b082      	sub	sp, #8
 801ea70:	af00      	add	r7, sp, #0
 801ea72:	6078      	str	r0, [r7, #4]
 801ea74:	460b      	mov	r3, r1
 801ea76:	70fb      	strb	r3, [r7, #3]
 801ea78:	4613      	mov	r3, r2
 801ea7a:	803b      	strh	r3, [r7, #0]
 801ea7c:	78fb      	ldrb	r3, [r7, #3]
 801ea7e:	021b      	lsls	r3, r3, #8
 801ea80:	b21b      	sxth	r3, r3
 801ea82:	f043 0312 	orr.w	r3, r3, #18
 801ea86:	b21b      	sxth	r3, r3
 801ea88:	b29b      	uxth	r3, r3
 801ea8a:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ea8e:	4619      	mov	r1, r3
 801ea90:	6878      	ldr	r0, [r7, #4]
 801ea92:	f7ec fe43 	bl	800b71c <_lv_style_set_int>
 801ea96:	bf00      	nop
 801ea98:	3708      	adds	r7, #8
 801ea9a:	46bd      	mov	sp, r7
 801ea9c:	bd80      	pop	{r7, pc}

0801ea9e <lv_style_set_pad_right>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
 801ea9e:	b580      	push	{r7, lr}
 801eaa0:	b082      	sub	sp, #8
 801eaa2:	af00      	add	r7, sp, #0
 801eaa4:	6078      	str	r0, [r7, #4]
 801eaa6:	460b      	mov	r3, r1
 801eaa8:	70fb      	strb	r3, [r7, #3]
 801eaaa:	4613      	mov	r3, r2
 801eaac:	803b      	strh	r3, [r7, #0]
 801eaae:	78fb      	ldrb	r3, [r7, #3]
 801eab0:	021b      	lsls	r3, r3, #8
 801eab2:	b21b      	sxth	r3, r3
 801eab4:	f043 0313 	orr.w	r3, r3, #19
 801eab8:	b21b      	sxth	r3, r3
 801eaba:	b29b      	uxth	r3, r3
 801eabc:	f9b7 2000 	ldrsh.w	r2, [r7]
 801eac0:	4619      	mov	r1, r3
 801eac2:	6878      	ldr	r0, [r7, #4]
 801eac4:	f7ec fe2a 	bl	800b71c <_lv_style_set_int>
 801eac8:	bf00      	nop
 801eaca:	3708      	adds	r7, #8
 801eacc:	46bd      	mov	sp, r7
 801eace:	bd80      	pop	{r7, pc}

0801ead0 <lv_style_set_pad_inner>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
 801ead0:	b580      	push	{r7, lr}
 801ead2:	b082      	sub	sp, #8
 801ead4:	af00      	add	r7, sp, #0
 801ead6:	6078      	str	r0, [r7, #4]
 801ead8:	460b      	mov	r3, r1
 801eada:	70fb      	strb	r3, [r7, #3]
 801eadc:	4613      	mov	r3, r2
 801eade:	803b      	strh	r3, [r7, #0]
 801eae0:	78fb      	ldrb	r3, [r7, #3]
 801eae2:	021b      	lsls	r3, r3, #8
 801eae4:	b21b      	sxth	r3, r3
 801eae6:	f043 0314 	orr.w	r3, r3, #20
 801eaea:	b21b      	sxth	r3, r3
 801eaec:	b29b      	uxth	r3, r3
 801eaee:	f9b7 2000 	ldrsh.w	r2, [r7]
 801eaf2:	4619      	mov	r1, r3
 801eaf4:	6878      	ldr	r0, [r7, #4]
 801eaf6:	f7ec fe11 	bl	800b71c <_lv_style_set_int>
 801eafa:	bf00      	nop
 801eafc:	3708      	adds	r7, #8
 801eafe:	46bd      	mov	sp, r7
 801eb00:	bd80      	pop	{r7, pc}

0801eb02 <lv_style_set_margin_top>:
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
 801eb02:	b580      	push	{r7, lr}
 801eb04:	b082      	sub	sp, #8
 801eb06:	af00      	add	r7, sp, #0
 801eb08:	6078      	str	r0, [r7, #4]
 801eb0a:	460b      	mov	r3, r1
 801eb0c:	70fb      	strb	r3, [r7, #3]
 801eb0e:	4613      	mov	r3, r2
 801eb10:	803b      	strh	r3, [r7, #0]
 801eb12:	78fb      	ldrb	r3, [r7, #3]
 801eb14:	021b      	lsls	r3, r3, #8
 801eb16:	b21b      	sxth	r3, r3
 801eb18:	f043 0315 	orr.w	r3, r3, #21
 801eb1c:	b21b      	sxth	r3, r3
 801eb1e:	b29b      	uxth	r3, r3
 801eb20:	f9b7 2000 	ldrsh.w	r2, [r7]
 801eb24:	4619      	mov	r1, r3
 801eb26:	6878      	ldr	r0, [r7, #4]
 801eb28:	f7ec fdf8 	bl	800b71c <_lv_style_set_int>
 801eb2c:	bf00      	nop
 801eb2e:	3708      	adds	r7, #8
 801eb30:	46bd      	mov	sp, r7
 801eb32:	bd80      	pop	{r7, pc}

0801eb34 <lv_style_set_margin_bottom>:
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
 801eb34:	b580      	push	{r7, lr}
 801eb36:	b082      	sub	sp, #8
 801eb38:	af00      	add	r7, sp, #0
 801eb3a:	6078      	str	r0, [r7, #4]
 801eb3c:	460b      	mov	r3, r1
 801eb3e:	70fb      	strb	r3, [r7, #3]
 801eb40:	4613      	mov	r3, r2
 801eb42:	803b      	strh	r3, [r7, #0]
 801eb44:	78fb      	ldrb	r3, [r7, #3]
 801eb46:	021b      	lsls	r3, r3, #8
 801eb48:	b21b      	sxth	r3, r3
 801eb4a:	f043 0316 	orr.w	r3, r3, #22
 801eb4e:	b21b      	sxth	r3, r3
 801eb50:	b29b      	uxth	r3, r3
 801eb52:	f9b7 2000 	ldrsh.w	r2, [r7]
 801eb56:	4619      	mov	r1, r3
 801eb58:	6878      	ldr	r0, [r7, #4]
 801eb5a:	f7ec fddf 	bl	800b71c <_lv_style_set_int>
 801eb5e:	bf00      	nop
 801eb60:	3708      	adds	r7, #8
 801eb62:	46bd      	mov	sp, r7
 801eb64:	bd80      	pop	{r7, pc}

0801eb66 <lv_style_set_margin_left>:
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
 801eb66:	b580      	push	{r7, lr}
 801eb68:	b082      	sub	sp, #8
 801eb6a:	af00      	add	r7, sp, #0
 801eb6c:	6078      	str	r0, [r7, #4]
 801eb6e:	460b      	mov	r3, r1
 801eb70:	70fb      	strb	r3, [r7, #3]
 801eb72:	4613      	mov	r3, r2
 801eb74:	803b      	strh	r3, [r7, #0]
 801eb76:	78fb      	ldrb	r3, [r7, #3]
 801eb78:	021b      	lsls	r3, r3, #8
 801eb7a:	b21b      	sxth	r3, r3
 801eb7c:	f043 0317 	orr.w	r3, r3, #23
 801eb80:	b21b      	sxth	r3, r3
 801eb82:	b29b      	uxth	r3, r3
 801eb84:	f9b7 2000 	ldrsh.w	r2, [r7]
 801eb88:	4619      	mov	r1, r3
 801eb8a:	6878      	ldr	r0, [r7, #4]
 801eb8c:	f7ec fdc6 	bl	800b71c <_lv_style_set_int>
 801eb90:	bf00      	nop
 801eb92:	3708      	adds	r7, #8
 801eb94:	46bd      	mov	sp, r7
 801eb96:	bd80      	pop	{r7, pc}

0801eb98 <lv_style_set_margin_right>:
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
 801eb98:	b580      	push	{r7, lr}
 801eb9a:	b082      	sub	sp, #8
 801eb9c:	af00      	add	r7, sp, #0
 801eb9e:	6078      	str	r0, [r7, #4]
 801eba0:	460b      	mov	r3, r1
 801eba2:	70fb      	strb	r3, [r7, #3]
 801eba4:	4613      	mov	r3, r2
 801eba6:	803b      	strh	r3, [r7, #0]
 801eba8:	78fb      	ldrb	r3, [r7, #3]
 801ebaa:	021b      	lsls	r3, r3, #8
 801ebac:	b21b      	sxth	r3, r3
 801ebae:	f043 0318 	orr.w	r3, r3, #24
 801ebb2:	b21b      	sxth	r3, r3
 801ebb4:	b29b      	uxth	r3, r3
 801ebb6:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ebba:	4619      	mov	r1, r3
 801ebbc:	6878      	ldr	r0, [r7, #4]
 801ebbe:	f7ec fdad 	bl	800b71c <_lv_style_set_int>
 801ebc2:	bf00      	nop
 801ebc4:	3708      	adds	r7, #8
 801ebc6:	46bd      	mov	sp, r7
 801ebc8:	bd80      	pop	{r7, pc}

0801ebca <lv_style_set_bg_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
 801ebca:	b580      	push	{r7, lr}
 801ebcc:	b084      	sub	sp, #16
 801ebce:	af00      	add	r7, sp, #0
 801ebd0:	60f8      	str	r0, [r7, #12]
 801ebd2:	460b      	mov	r3, r1
 801ebd4:	607a      	str	r2, [r7, #4]
 801ebd6:	72fb      	strb	r3, [r7, #11]
 801ebd8:	7afb      	ldrb	r3, [r7, #11]
 801ebda:	021b      	lsls	r3, r3, #8
 801ebdc:	b21b      	sxth	r3, r3
 801ebde:	f043 0329 	orr.w	r3, r3, #41	; 0x29
 801ebe2:	b21b      	sxth	r3, r3
 801ebe4:	b29b      	uxth	r3, r3
 801ebe6:	687a      	ldr	r2, [r7, #4]
 801ebe8:	4619      	mov	r1, r3
 801ebea:	68f8      	ldr	r0, [r7, #12]
 801ebec:	f7ec fe24 	bl	800b838 <_lv_style_set_color>
 801ebf0:	bf00      	nop
 801ebf2:	3710      	adds	r7, #16
 801ebf4:	46bd      	mov	sp, r7
 801ebf6:	bd80      	pop	{r7, pc}

0801ebf8 <lv_style_set_bg_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
 801ebf8:	b580      	push	{r7, lr}
 801ebfa:	b082      	sub	sp, #8
 801ebfc:	af00      	add	r7, sp, #0
 801ebfe:	6078      	str	r0, [r7, #4]
 801ec00:	460b      	mov	r3, r1
 801ec02:	70fb      	strb	r3, [r7, #3]
 801ec04:	4613      	mov	r3, r2
 801ec06:	70bb      	strb	r3, [r7, #2]
 801ec08:	78fb      	ldrb	r3, [r7, #3]
 801ec0a:	021b      	lsls	r3, r3, #8
 801ec0c:	b21b      	sxth	r3, r3
 801ec0e:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 801ec12:	b21b      	sxth	r3, r3
 801ec14:	b29b      	uxth	r3, r3
 801ec16:	78ba      	ldrb	r2, [r7, #2]
 801ec18:	4619      	mov	r1, r3
 801ec1a:	6878      	ldr	r0, [r7, #4]
 801ec1c:	f7ec fe9a 	bl	800b954 <_lv_style_set_opa>
 801ec20:	bf00      	nop
 801ec22:	3708      	adds	r7, #8
 801ec24:	46bd      	mov	sp, r7
 801ec26:	bd80      	pop	{r7, pc}

0801ec28 <lv_style_set_border_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
 801ec28:	b580      	push	{r7, lr}
 801ec2a:	b082      	sub	sp, #8
 801ec2c:	af00      	add	r7, sp, #0
 801ec2e:	6078      	str	r0, [r7, #4]
 801ec30:	460b      	mov	r3, r1
 801ec32:	70fb      	strb	r3, [r7, #3]
 801ec34:	4613      	mov	r3, r2
 801ec36:	803b      	strh	r3, [r7, #0]
 801ec38:	78fb      	ldrb	r3, [r7, #3]
 801ec3a:	021b      	lsls	r3, r3, #8
 801ec3c:	b21b      	sxth	r3, r3
 801ec3e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 801ec42:	b21b      	sxth	r3, r3
 801ec44:	b29b      	uxth	r3, r3
 801ec46:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ec4a:	4619      	mov	r1, r3
 801ec4c:	6878      	ldr	r0, [r7, #4]
 801ec4e:	f7ec fd65 	bl	800b71c <_lv_style_set_int>
 801ec52:	bf00      	nop
 801ec54:	3708      	adds	r7, #8
 801ec56:	46bd      	mov	sp, r7
 801ec58:	bd80      	pop	{r7, pc}

0801ec5a <lv_style_set_border_side>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
 801ec5a:	b580      	push	{r7, lr}
 801ec5c:	b082      	sub	sp, #8
 801ec5e:	af00      	add	r7, sp, #0
 801ec60:	6078      	str	r0, [r7, #4]
 801ec62:	460b      	mov	r3, r1
 801ec64:	70fb      	strb	r3, [r7, #3]
 801ec66:	4613      	mov	r3, r2
 801ec68:	70bb      	strb	r3, [r7, #2]
 801ec6a:	78fb      	ldrb	r3, [r7, #3]
 801ec6c:	021b      	lsls	r3, r3, #8
 801ec6e:	b21b      	sxth	r3, r3
 801ec70:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 801ec74:	b21b      	sxth	r3, r3
 801ec76:	b29b      	uxth	r3, r3
 801ec78:	78ba      	ldrb	r2, [r7, #2]
 801ec7a:	b212      	sxth	r2, r2
 801ec7c:	4619      	mov	r1, r3
 801ec7e:	6878      	ldr	r0, [r7, #4]
 801ec80:	f7ec fd4c 	bl	800b71c <_lv_style_set_int>
 801ec84:	bf00      	nop
 801ec86:	3708      	adds	r7, #8
 801ec88:	46bd      	mov	sp, r7
 801ec8a:	bd80      	pop	{r7, pc}

0801ec8c <lv_style_set_border_post>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
 801ec8c:	b580      	push	{r7, lr}
 801ec8e:	b082      	sub	sp, #8
 801ec90:	af00      	add	r7, sp, #0
 801ec92:	6078      	str	r0, [r7, #4]
 801ec94:	460b      	mov	r3, r1
 801ec96:	70fb      	strb	r3, [r7, #3]
 801ec98:	4613      	mov	r3, r2
 801ec9a:	70bb      	strb	r3, [r7, #2]
 801ec9c:	78fb      	ldrb	r3, [r7, #3]
 801ec9e:	021b      	lsls	r3, r3, #8
 801eca0:	b21b      	sxth	r3, r3
 801eca2:	f043 0333 	orr.w	r3, r3, #51	; 0x33
 801eca6:	b21b      	sxth	r3, r3
 801eca8:	b29b      	uxth	r3, r3
 801ecaa:	78ba      	ldrb	r2, [r7, #2]
 801ecac:	b212      	sxth	r2, r2
 801ecae:	4619      	mov	r1, r3
 801ecb0:	6878      	ldr	r0, [r7, #4]
 801ecb2:	f7ec fd33 	bl	800b71c <_lv_style_set_int>
 801ecb6:	bf00      	nop
 801ecb8:	3708      	adds	r7, #8
 801ecba:	46bd      	mov	sp, r7
 801ecbc:	bd80      	pop	{r7, pc}

0801ecbe <lv_style_set_border_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
 801ecbe:	b580      	push	{r7, lr}
 801ecc0:	b084      	sub	sp, #16
 801ecc2:	af00      	add	r7, sp, #0
 801ecc4:	60f8      	str	r0, [r7, #12]
 801ecc6:	460b      	mov	r3, r1
 801ecc8:	607a      	str	r2, [r7, #4]
 801ecca:	72fb      	strb	r3, [r7, #11]
 801eccc:	7afb      	ldrb	r3, [r7, #11]
 801ecce:	021b      	lsls	r3, r3, #8
 801ecd0:	b21b      	sxth	r3, r3
 801ecd2:	f043 0339 	orr.w	r3, r3, #57	; 0x39
 801ecd6:	b21b      	sxth	r3, r3
 801ecd8:	b29b      	uxth	r3, r3
 801ecda:	687a      	ldr	r2, [r7, #4]
 801ecdc:	4619      	mov	r1, r3
 801ecde:	68f8      	ldr	r0, [r7, #12]
 801ece0:	f7ec fdaa 	bl	800b838 <_lv_style_set_color>
 801ece4:	bf00      	nop
 801ece6:	3710      	adds	r7, #16
 801ece8:	46bd      	mov	sp, r7
 801ecea:	bd80      	pop	{r7, pc}

0801ecec <lv_style_set_border_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
 801ecec:	b580      	push	{r7, lr}
 801ecee:	b082      	sub	sp, #8
 801ecf0:	af00      	add	r7, sp, #0
 801ecf2:	6078      	str	r0, [r7, #4]
 801ecf4:	460b      	mov	r3, r1
 801ecf6:	70fb      	strb	r3, [r7, #3]
 801ecf8:	4613      	mov	r3, r2
 801ecfa:	70bb      	strb	r3, [r7, #2]
 801ecfc:	78fb      	ldrb	r3, [r7, #3]
 801ecfe:	021b      	lsls	r3, r3, #8
 801ed00:	b21b      	sxth	r3, r3
 801ed02:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 801ed06:	b21b      	sxth	r3, r3
 801ed08:	b29b      	uxth	r3, r3
 801ed0a:	78ba      	ldrb	r2, [r7, #2]
 801ed0c:	4619      	mov	r1, r3
 801ed0e:	6878      	ldr	r0, [r7, #4]
 801ed10:	f7ec fe20 	bl	800b954 <_lv_style_set_opa>
 801ed14:	bf00      	nop
 801ed16:	3708      	adds	r7, #8
 801ed18:	46bd      	mov	sp, r7
 801ed1a:	bd80      	pop	{r7, pc}

0801ed1c <lv_style_set_outline_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
 801ed1c:	b580      	push	{r7, lr}
 801ed1e:	b082      	sub	sp, #8
 801ed20:	af00      	add	r7, sp, #0
 801ed22:	6078      	str	r0, [r7, #4]
 801ed24:	460b      	mov	r3, r1
 801ed26:	70fb      	strb	r3, [r7, #3]
 801ed28:	4613      	mov	r3, r2
 801ed2a:	803b      	strh	r3, [r7, #0]
 801ed2c:	78fb      	ldrb	r3, [r7, #3]
 801ed2e:	021b      	lsls	r3, r3, #8
 801ed30:	b21b      	sxth	r3, r3
 801ed32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ed36:	b21b      	sxth	r3, r3
 801ed38:	b29b      	uxth	r3, r3
 801ed3a:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ed3e:	4619      	mov	r1, r3
 801ed40:	6878      	ldr	r0, [r7, #4]
 801ed42:	f7ec fceb 	bl	800b71c <_lv_style_set_int>
 801ed46:	bf00      	nop
 801ed48:	3708      	adds	r7, #8
 801ed4a:	46bd      	mov	sp, r7
 801ed4c:	bd80      	pop	{r7, pc}

0801ed4e <lv_style_set_outline_pad>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
 801ed4e:	b580      	push	{r7, lr}
 801ed50:	b082      	sub	sp, #8
 801ed52:	af00      	add	r7, sp, #0
 801ed54:	6078      	str	r0, [r7, #4]
 801ed56:	460b      	mov	r3, r1
 801ed58:	70fb      	strb	r3, [r7, #3]
 801ed5a:	4613      	mov	r3, r2
 801ed5c:	803b      	strh	r3, [r7, #0]
 801ed5e:	78fb      	ldrb	r3, [r7, #3]
 801ed60:	021b      	lsls	r3, r3, #8
 801ed62:	b21b      	sxth	r3, r3
 801ed64:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 801ed68:	b21b      	sxth	r3, r3
 801ed6a:	b29b      	uxth	r3, r3
 801ed6c:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ed70:	4619      	mov	r1, r3
 801ed72:	6878      	ldr	r0, [r7, #4]
 801ed74:	f7ec fcd2 	bl	800b71c <_lv_style_set_int>
 801ed78:	bf00      	nop
 801ed7a:	3708      	adds	r7, #8
 801ed7c:	46bd      	mov	sp, r7
 801ed7e:	bd80      	pop	{r7, pc}

0801ed80 <lv_style_set_outline_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
 801ed80:	b580      	push	{r7, lr}
 801ed82:	b084      	sub	sp, #16
 801ed84:	af00      	add	r7, sp, #0
 801ed86:	60f8      	str	r0, [r7, #12]
 801ed88:	460b      	mov	r3, r1
 801ed8a:	607a      	str	r2, [r7, #4]
 801ed8c:	72fb      	strb	r3, [r7, #11]
 801ed8e:	7afb      	ldrb	r3, [r7, #11]
 801ed90:	021b      	lsls	r3, r3, #8
 801ed92:	b21b      	sxth	r3, r3
 801ed94:	f043 0349 	orr.w	r3, r3, #73	; 0x49
 801ed98:	b21b      	sxth	r3, r3
 801ed9a:	b29b      	uxth	r3, r3
 801ed9c:	687a      	ldr	r2, [r7, #4]
 801ed9e:	4619      	mov	r1, r3
 801eda0:	68f8      	ldr	r0, [r7, #12]
 801eda2:	f7ec fd49 	bl	800b838 <_lv_style_set_color>
 801eda6:	bf00      	nop
 801eda8:	3710      	adds	r7, #16
 801edaa:	46bd      	mov	sp, r7
 801edac:	bd80      	pop	{r7, pc}

0801edae <lv_style_set_outline_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
 801edae:	b580      	push	{r7, lr}
 801edb0:	b082      	sub	sp, #8
 801edb2:	af00      	add	r7, sp, #0
 801edb4:	6078      	str	r0, [r7, #4]
 801edb6:	460b      	mov	r3, r1
 801edb8:	70fb      	strb	r3, [r7, #3]
 801edba:	4613      	mov	r3, r2
 801edbc:	70bb      	strb	r3, [r7, #2]
 801edbe:	78fb      	ldrb	r3, [r7, #3]
 801edc0:	021b      	lsls	r3, r3, #8
 801edc2:	b21b      	sxth	r3, r3
 801edc4:	f043 034c 	orr.w	r3, r3, #76	; 0x4c
 801edc8:	b21b      	sxth	r3, r3
 801edca:	b29b      	uxth	r3, r3
 801edcc:	78ba      	ldrb	r2, [r7, #2]
 801edce:	4619      	mov	r1, r3
 801edd0:	6878      	ldr	r0, [r7, #4]
 801edd2:	f7ec fdbf 	bl	800b954 <_lv_style_set_opa>
 801edd6:	bf00      	nop
 801edd8:	3708      	adds	r7, #8
 801edda:	46bd      	mov	sp, r7
 801eddc:	bd80      	pop	{r7, pc}

0801edde <lv_style_set_shadow_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
 801edde:	b580      	push	{r7, lr}
 801ede0:	b082      	sub	sp, #8
 801ede2:	af00      	add	r7, sp, #0
 801ede4:	6078      	str	r0, [r7, #4]
 801ede6:	460b      	mov	r3, r1
 801ede8:	70fb      	strb	r3, [r7, #3]
 801edea:	4613      	mov	r3, r2
 801edec:	803b      	strh	r3, [r7, #0]
 801edee:	78fb      	ldrb	r3, [r7, #3]
 801edf0:	021b      	lsls	r3, r3, #8
 801edf2:	b21b      	sxth	r3, r3
 801edf4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801edf8:	b21b      	sxth	r3, r3
 801edfa:	b29b      	uxth	r3, r3
 801edfc:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ee00:	4619      	mov	r1, r3
 801ee02:	6878      	ldr	r0, [r7, #4]
 801ee04:	f7ec fc8a 	bl	800b71c <_lv_style_set_int>
 801ee08:	bf00      	nop
 801ee0a:	3708      	adds	r7, #8
 801ee0c:	46bd      	mov	sp, r7
 801ee0e:	bd80      	pop	{r7, pc}

0801ee10 <lv_style_set_shadow_spread>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
 801ee10:	b580      	push	{r7, lr}
 801ee12:	b082      	sub	sp, #8
 801ee14:	af00      	add	r7, sp, #0
 801ee16:	6078      	str	r0, [r7, #4]
 801ee18:	460b      	mov	r3, r1
 801ee1a:	70fb      	strb	r3, [r7, #3]
 801ee1c:	4613      	mov	r3, r2
 801ee1e:	803b      	strh	r3, [r7, #0]
 801ee20:	78fb      	ldrb	r3, [r7, #3]
 801ee22:	021b      	lsls	r3, r3, #8
 801ee24:	b21b      	sxth	r3, r3
 801ee26:	f043 0353 	orr.w	r3, r3, #83	; 0x53
 801ee2a:	b21b      	sxth	r3, r3
 801ee2c:	b29b      	uxth	r3, r3
 801ee2e:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ee32:	4619      	mov	r1, r3
 801ee34:	6878      	ldr	r0, [r7, #4]
 801ee36:	f7ec fc71 	bl	800b71c <_lv_style_set_int>
 801ee3a:	bf00      	nop
 801ee3c:	3708      	adds	r7, #8
 801ee3e:	46bd      	mov	sp, r7
 801ee40:	bd80      	pop	{r7, pc}

0801ee42 <lv_style_set_shadow_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
 801ee42:	b580      	push	{r7, lr}
 801ee44:	b084      	sub	sp, #16
 801ee46:	af00      	add	r7, sp, #0
 801ee48:	60f8      	str	r0, [r7, #12]
 801ee4a:	460b      	mov	r3, r1
 801ee4c:	607a      	str	r2, [r7, #4]
 801ee4e:	72fb      	strb	r3, [r7, #11]
 801ee50:	7afb      	ldrb	r3, [r7, #11]
 801ee52:	021b      	lsls	r3, r3, #8
 801ee54:	b21b      	sxth	r3, r3
 801ee56:	f043 0359 	orr.w	r3, r3, #89	; 0x59
 801ee5a:	b21b      	sxth	r3, r3
 801ee5c:	b29b      	uxth	r3, r3
 801ee5e:	687a      	ldr	r2, [r7, #4]
 801ee60:	4619      	mov	r1, r3
 801ee62:	68f8      	ldr	r0, [r7, #12]
 801ee64:	f7ec fce8 	bl	800b838 <_lv_style_set_color>
 801ee68:	bf00      	nop
 801ee6a:	3710      	adds	r7, #16
 801ee6c:	46bd      	mov	sp, r7
 801ee6e:	bd80      	pop	{r7, pc}

0801ee70 <lv_style_set_pattern_recolor>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_REPEAT, pattern_repeat, bool, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
 801ee70:	b580      	push	{r7, lr}
 801ee72:	b084      	sub	sp, #16
 801ee74:	af00      	add	r7, sp, #0
 801ee76:	60f8      	str	r0, [r7, #12]
 801ee78:	460b      	mov	r3, r1
 801ee7a:	607a      	str	r2, [r7, #4]
 801ee7c:	72fb      	strb	r3, [r7, #11]
 801ee7e:	7afb      	ldrb	r3, [r7, #11]
 801ee80:	021b      	lsls	r3, r3, #8
 801ee82:	b21b      	sxth	r3, r3
 801ee84:	f043 0369 	orr.w	r3, r3, #105	; 0x69
 801ee88:	b21b      	sxth	r3, r3
 801ee8a:	b29b      	uxth	r3, r3
 801ee8c:	687a      	ldr	r2, [r7, #4]
 801ee8e:	4619      	mov	r1, r3
 801ee90:	68f8      	ldr	r0, [r7, #12]
 801ee92:	f7ec fcd1 	bl	800b838 <_lv_style_set_color>
 801ee96:	bf00      	nop
 801ee98:	3710      	adds	r7, #16
 801ee9a:	46bd      	mov	sp, r7
 801ee9c:	bd80      	pop	{r7, pc}

0801ee9e <lv_style_set_pattern_opa>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
 801ee9e:	b580      	push	{r7, lr}
 801eea0:	b082      	sub	sp, #8
 801eea2:	af00      	add	r7, sp, #0
 801eea4:	6078      	str	r0, [r7, #4]
 801eea6:	460b      	mov	r3, r1
 801eea8:	70fb      	strb	r3, [r7, #3]
 801eeaa:	4613      	mov	r3, r2
 801eeac:	70bb      	strb	r3, [r7, #2]
 801eeae:	78fb      	ldrb	r3, [r7, #3]
 801eeb0:	021b      	lsls	r3, r3, #8
 801eeb2:	b21b      	sxth	r3, r3
 801eeb4:	f043 036c 	orr.w	r3, r3, #108	; 0x6c
 801eeb8:	b21b      	sxth	r3, r3
 801eeba:	b29b      	uxth	r3, r3
 801eebc:	78ba      	ldrb	r2, [r7, #2]
 801eebe:	4619      	mov	r1, r3
 801eec0:	6878      	ldr	r0, [r7, #4]
 801eec2:	f7ec fd47 	bl	800b954 <_lv_style_set_opa>
 801eec6:	bf00      	nop
 801eec8:	3708      	adds	r7, #8
 801eeca:	46bd      	mov	sp, r7
 801eecc:	bd80      	pop	{r7, pc}

0801eece <lv_style_set_pattern_image>:
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR_OPA, pattern_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
 801eece:	b580      	push	{r7, lr}
 801eed0:	b084      	sub	sp, #16
 801eed2:	af00      	add	r7, sp, #0
 801eed4:	60f8      	str	r0, [r7, #12]
 801eed6:	460b      	mov	r3, r1
 801eed8:	607a      	str	r2, [r7, #4]
 801eeda:	72fb      	strb	r3, [r7, #11]
 801eedc:	7afb      	ldrb	r3, [r7, #11]
 801eede:	021b      	lsls	r3, r3, #8
 801eee0:	b21b      	sxth	r3, r3
 801eee2:	f043 036e 	orr.w	r3, r3, #110	; 0x6e
 801eee6:	b21b      	sxth	r3, r3
 801eee8:	b29b      	uxth	r3, r3
 801eeea:	687a      	ldr	r2, [r7, #4]
 801eeec:	4619      	mov	r1, r3
 801eeee:	68f8      	ldr	r0, [r7, #12]
 801eef0:	f7ec fdbe 	bl	800ba70 <_lv_style_set_ptr>
 801eef4:	bf00      	nop
 801eef6:	3710      	adds	r7, #16
 801eef8:	46bd      	mov	sp, r7
 801eefa:	bd80      	pop	{r7, pc}

0801eefc <lv_style_set_value_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
 801eefc:	b580      	push	{r7, lr}
 801eefe:	b084      	sub	sp, #16
 801ef00:	af00      	add	r7, sp, #0
 801ef02:	60f8      	str	r0, [r7, #12]
 801ef04:	460b      	mov	r3, r1
 801ef06:	607a      	str	r2, [r7, #4]
 801ef08:	72fb      	strb	r3, [r7, #11]
 801ef0a:	7afb      	ldrb	r3, [r7, #11]
 801ef0c:	021b      	lsls	r3, r3, #8
 801ef0e:	b21b      	sxth	r3, r3
 801ef10:	f043 0379 	orr.w	r3, r3, #121	; 0x79
 801ef14:	b21b      	sxth	r3, r3
 801ef16:	b29b      	uxth	r3, r3
 801ef18:	687a      	ldr	r2, [r7, #4]
 801ef1a:	4619      	mov	r1, r3
 801ef1c:	68f8      	ldr	r0, [r7, #12]
 801ef1e:	f7ec fc8b 	bl	800b838 <_lv_style_set_color>
 801ef22:	bf00      	nop
 801ef24:	3710      	adds	r7, #16
 801ef26:	46bd      	mov	sp, r7
 801ef28:	bd80      	pop	{r7, pc}

0801ef2a <lv_style_set_value_font>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
 801ef2a:	b580      	push	{r7, lr}
 801ef2c:	b084      	sub	sp, #16
 801ef2e:	af00      	add	r7, sp, #0
 801ef30:	60f8      	str	r0, [r7, #12]
 801ef32:	460b      	mov	r3, r1
 801ef34:	607a      	str	r2, [r7, #4]
 801ef36:	72fb      	strb	r3, [r7, #11]
 801ef38:	7afb      	ldrb	r3, [r7, #11]
 801ef3a:	021b      	lsls	r3, r3, #8
 801ef3c:	b21b      	sxth	r3, r3
 801ef3e:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
 801ef42:	b21b      	sxth	r3, r3
 801ef44:	b29b      	uxth	r3, r3
 801ef46:	687a      	ldr	r2, [r7, #4]
 801ef48:	4619      	mov	r1, r3
 801ef4a:	68f8      	ldr	r0, [r7, #12]
 801ef4c:	f7ec fd90 	bl	800ba70 <_lv_style_set_ptr>
 801ef50:	bf00      	nop
 801ef52:	3710      	adds	r7, #16
 801ef54:	46bd      	mov	sp, r7
 801ef56:	bd80      	pop	{r7, pc}

0801ef58 <lv_style_set_text_line_space>:
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
 801ef58:	b580      	push	{r7, lr}
 801ef5a:	b082      	sub	sp, #8
 801ef5c:	af00      	add	r7, sp, #0
 801ef5e:	6078      	str	r0, [r7, #4]
 801ef60:	460b      	mov	r3, r1
 801ef62:	70fb      	strb	r3, [r7, #3]
 801ef64:	4613      	mov	r3, r2
 801ef66:	803b      	strh	r3, [r7, #0]
 801ef68:	78fb      	ldrb	r3, [r7, #3]
 801ef6a:	021b      	lsls	r3, r3, #8
 801ef6c:	b21a      	sxth	r2, r3
 801ef6e:	4b07      	ldr	r3, [pc, #28]	; (801ef8c <lv_style_set_text_line_space+0x34>)
 801ef70:	4313      	orrs	r3, r2
 801ef72:	b21b      	sxth	r3, r3
 801ef74:	b29b      	uxth	r3, r3
 801ef76:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ef7a:	4619      	mov	r1, r3
 801ef7c:	6878      	ldr	r0, [r7, #4]
 801ef7e:	f7ec fbcd 	bl	800b71c <_lv_style_set_int>
 801ef82:	bf00      	nop
 801ef84:	3708      	adds	r7, #8
 801ef86:	46bd      	mov	sp, r7
 801ef88:	bd80      	pop	{r7, pc}
 801ef8a:	bf00      	nop
 801ef8c:	ffff8081 	.word	0xffff8081

0801ef90 <lv_style_set_text_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
 801ef90:	b580      	push	{r7, lr}
 801ef92:	b084      	sub	sp, #16
 801ef94:	af00      	add	r7, sp, #0
 801ef96:	60f8      	str	r0, [r7, #12]
 801ef98:	460b      	mov	r3, r1
 801ef9a:	607a      	str	r2, [r7, #4]
 801ef9c:	72fb      	strb	r3, [r7, #11]
 801ef9e:	7afb      	ldrb	r3, [r7, #11]
 801efa0:	021b      	lsls	r3, r3, #8
 801efa2:	b21a      	sxth	r2, r3
 801efa4:	4b06      	ldr	r3, [pc, #24]	; (801efc0 <lv_style_set_text_color+0x30>)
 801efa6:	4313      	orrs	r3, r2
 801efa8:	b21b      	sxth	r3, r3
 801efaa:	b29b      	uxth	r3, r3
 801efac:	687a      	ldr	r2, [r7, #4]
 801efae:	4619      	mov	r1, r3
 801efb0:	68f8      	ldr	r0, [r7, #12]
 801efb2:	f7ec fc41 	bl	800b838 <_lv_style_set_color>
 801efb6:	bf00      	nop
 801efb8:	3710      	adds	r7, #16
 801efba:	46bd      	mov	sp, r7
 801efbc:	bd80      	pop	{r7, pc}
 801efbe:	bf00      	nop
 801efc0:	ffff8089 	.word	0xffff8089

0801efc4 <lv_style_set_text_sel_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
 801efc4:	b580      	push	{r7, lr}
 801efc6:	b084      	sub	sp, #16
 801efc8:	af00      	add	r7, sp, #0
 801efca:	60f8      	str	r0, [r7, #12]
 801efcc:	460b      	mov	r3, r1
 801efce:	607a      	str	r2, [r7, #4]
 801efd0:	72fb      	strb	r3, [r7, #11]
 801efd2:	7afb      	ldrb	r3, [r7, #11]
 801efd4:	021b      	lsls	r3, r3, #8
 801efd6:	b21a      	sxth	r2, r3
 801efd8:	4b06      	ldr	r3, [pc, #24]	; (801eff4 <lv_style_set_text_sel_color+0x30>)
 801efda:	4313      	orrs	r3, r2
 801efdc:	b21b      	sxth	r3, r3
 801efde:	b29b      	uxth	r3, r3
 801efe0:	687a      	ldr	r2, [r7, #4]
 801efe2:	4619      	mov	r1, r3
 801efe4:	68f8      	ldr	r0, [r7, #12]
 801efe6:	f7ec fc27 	bl	800b838 <_lv_style_set_color>
 801efea:	bf00      	nop
 801efec:	3710      	adds	r7, #16
 801efee:	46bd      	mov	sp, r7
 801eff0:	bd80      	pop	{r7, pc}
 801eff2:	bf00      	nop
 801eff4:	ffff808a 	.word	0xffff808a

0801eff8 <lv_style_set_text_sel_bg_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
 801eff8:	b580      	push	{r7, lr}
 801effa:	b084      	sub	sp, #16
 801effc:	af00      	add	r7, sp, #0
 801effe:	60f8      	str	r0, [r7, #12]
 801f000:	460b      	mov	r3, r1
 801f002:	607a      	str	r2, [r7, #4]
 801f004:	72fb      	strb	r3, [r7, #11]
 801f006:	7afb      	ldrb	r3, [r7, #11]
 801f008:	021b      	lsls	r3, r3, #8
 801f00a:	b21a      	sxth	r2, r3
 801f00c:	4b06      	ldr	r3, [pc, #24]	; (801f028 <lv_style_set_text_sel_bg_color+0x30>)
 801f00e:	4313      	orrs	r3, r2
 801f010:	b21b      	sxth	r3, r3
 801f012:	b29b      	uxth	r3, r3
 801f014:	687a      	ldr	r2, [r7, #4]
 801f016:	4619      	mov	r1, r3
 801f018:	68f8      	ldr	r0, [r7, #12]
 801f01a:	f7ec fc0d 	bl	800b838 <_lv_style_set_color>
 801f01e:	bf00      	nop
 801f020:	3710      	adds	r7, #16
 801f022:	46bd      	mov	sp, r7
 801f024:	bd80      	pop	{r7, pc}
 801f026:	bf00      	nop
 801f028:	ffff808b 	.word	0xffff808b

0801f02c <lv_style_set_text_font>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
 801f02c:	b580      	push	{r7, lr}
 801f02e:	b084      	sub	sp, #16
 801f030:	af00      	add	r7, sp, #0
 801f032:	60f8      	str	r0, [r7, #12]
 801f034:	460b      	mov	r3, r1
 801f036:	607a      	str	r2, [r7, #4]
 801f038:	72fb      	strb	r3, [r7, #11]
 801f03a:	7afb      	ldrb	r3, [r7, #11]
 801f03c:	021b      	lsls	r3, r3, #8
 801f03e:	b21a      	sxth	r2, r3
 801f040:	4b06      	ldr	r3, [pc, #24]	; (801f05c <lv_style_set_text_font+0x30>)
 801f042:	4313      	orrs	r3, r2
 801f044:	b21b      	sxth	r3, r3
 801f046:	b29b      	uxth	r3, r3
 801f048:	687a      	ldr	r2, [r7, #4]
 801f04a:	4619      	mov	r1, r3
 801f04c:	68f8      	ldr	r0, [r7, #12]
 801f04e:	f7ec fd0f 	bl	800ba70 <_lv_style_set_ptr>
 801f052:	bf00      	nop
 801f054:	3710      	adds	r7, #16
 801f056:	46bd      	mov	sp, r7
 801f058:	bd80      	pop	{r7, pc}
 801f05a:	bf00      	nop
 801f05c:	ffff808e 	.word	0xffff808e

0801f060 <lv_style_set_line_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
 801f060:	b580      	push	{r7, lr}
 801f062:	b082      	sub	sp, #8
 801f064:	af00      	add	r7, sp, #0
 801f066:	6078      	str	r0, [r7, #4]
 801f068:	460b      	mov	r3, r1
 801f06a:	70fb      	strb	r3, [r7, #3]
 801f06c:	4613      	mov	r3, r2
 801f06e:	803b      	strh	r3, [r7, #0]
 801f070:	78fb      	ldrb	r3, [r7, #3]
 801f072:	021b      	lsls	r3, r3, #8
 801f074:	b21b      	sxth	r3, r3
 801f076:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 801f07a:	b21b      	sxth	r3, r3
 801f07c:	b29b      	uxth	r3, r3
 801f07e:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f082:	4619      	mov	r1, r3
 801f084:	6878      	ldr	r0, [r7, #4]
 801f086:	f7ec fb49 	bl	800b71c <_lv_style_set_int>
 801f08a:	bf00      	nop
 801f08c:	3708      	adds	r7, #8
 801f08e:	46bd      	mov	sp, r7
 801f090:	bd80      	pop	{r7, pc}

0801f092 <lv_style_set_line_dash_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
 801f092:	b580      	push	{r7, lr}
 801f094:	b082      	sub	sp, #8
 801f096:	af00      	add	r7, sp, #0
 801f098:	6078      	str	r0, [r7, #4]
 801f09a:	460b      	mov	r3, r1
 801f09c:	70fb      	strb	r3, [r7, #3]
 801f09e:	4613      	mov	r3, r2
 801f0a0:	803b      	strh	r3, [r7, #0]
 801f0a2:	78fb      	ldrb	r3, [r7, #3]
 801f0a4:	021b      	lsls	r3, r3, #8
 801f0a6:	b21b      	sxth	r3, r3
 801f0a8:	f043 0392 	orr.w	r3, r3, #146	; 0x92
 801f0ac:	b21b      	sxth	r3, r3
 801f0ae:	b29b      	uxth	r3, r3
 801f0b0:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f0b4:	4619      	mov	r1, r3
 801f0b6:	6878      	ldr	r0, [r7, #4]
 801f0b8:	f7ec fb30 	bl	800b71c <_lv_style_set_int>
 801f0bc:	bf00      	nop
 801f0be:	3708      	adds	r7, #8
 801f0c0:	46bd      	mov	sp, r7
 801f0c2:	bd80      	pop	{r7, pc}

0801f0c4 <lv_style_set_line_dash_gap>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
 801f0c4:	b580      	push	{r7, lr}
 801f0c6:	b082      	sub	sp, #8
 801f0c8:	af00      	add	r7, sp, #0
 801f0ca:	6078      	str	r0, [r7, #4]
 801f0cc:	460b      	mov	r3, r1
 801f0ce:	70fb      	strb	r3, [r7, #3]
 801f0d0:	4613      	mov	r3, r2
 801f0d2:	803b      	strh	r3, [r7, #0]
 801f0d4:	78fb      	ldrb	r3, [r7, #3]
 801f0d6:	021b      	lsls	r3, r3, #8
 801f0d8:	b21b      	sxth	r3, r3
 801f0da:	f043 0393 	orr.w	r3, r3, #147	; 0x93
 801f0de:	b21b      	sxth	r3, r3
 801f0e0:	b29b      	uxth	r3, r3
 801f0e2:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f0e6:	4619      	mov	r1, r3
 801f0e8:	6878      	ldr	r0, [r7, #4]
 801f0ea:	f7ec fb17 	bl	800b71c <_lv_style_set_int>
 801f0ee:	bf00      	nop
 801f0f0:	3708      	adds	r7, #8
 801f0f2:	46bd      	mov	sp, r7
 801f0f4:	bd80      	pop	{r7, pc}

0801f0f6 <lv_style_set_line_rounded>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
 801f0f6:	b580      	push	{r7, lr}
 801f0f8:	b082      	sub	sp, #8
 801f0fa:	af00      	add	r7, sp, #0
 801f0fc:	6078      	str	r0, [r7, #4]
 801f0fe:	460b      	mov	r3, r1
 801f100:	70fb      	strb	r3, [r7, #3]
 801f102:	4613      	mov	r3, r2
 801f104:	70bb      	strb	r3, [r7, #2]
 801f106:	78fb      	ldrb	r3, [r7, #3]
 801f108:	021b      	lsls	r3, r3, #8
 801f10a:	b21b      	sxth	r3, r3
 801f10c:	f043 0394 	orr.w	r3, r3, #148	; 0x94
 801f110:	b21b      	sxth	r3, r3
 801f112:	b29b      	uxth	r3, r3
 801f114:	78ba      	ldrb	r2, [r7, #2]
 801f116:	b212      	sxth	r2, r2
 801f118:	4619      	mov	r1, r3
 801f11a:	6878      	ldr	r0, [r7, #4]
 801f11c:	f7ec fafe 	bl	800b71c <_lv_style_set_int>
 801f120:	bf00      	nop
 801f122:	3708      	adds	r7, #8
 801f124:	46bd      	mov	sp, r7
 801f126:	bd80      	pop	{r7, pc}

0801f128 <lv_style_set_line_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
 801f128:	b580      	push	{r7, lr}
 801f12a:	b084      	sub	sp, #16
 801f12c:	af00      	add	r7, sp, #0
 801f12e:	60f8      	str	r0, [r7, #12]
 801f130:	460b      	mov	r3, r1
 801f132:	607a      	str	r2, [r7, #4]
 801f134:	72fb      	strb	r3, [r7, #11]
 801f136:	7afb      	ldrb	r3, [r7, #11]
 801f138:	021b      	lsls	r3, r3, #8
 801f13a:	b21b      	sxth	r3, r3
 801f13c:	f043 0399 	orr.w	r3, r3, #153	; 0x99
 801f140:	b21b      	sxth	r3, r3
 801f142:	b29b      	uxth	r3, r3
 801f144:	687a      	ldr	r2, [r7, #4]
 801f146:	4619      	mov	r1, r3
 801f148:	68f8      	ldr	r0, [r7, #12]
 801f14a:	f7ec fb75 	bl	800b838 <_lv_style_set_color>
 801f14e:	bf00      	nop
 801f150:	3710      	adds	r7, #16
 801f152:	46bd      	mov	sp, r7
 801f154:	bd80      	pop	{r7, pc}
	...

0801f158 <lv_style_set_image_recolor>:
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
 801f158:	b580      	push	{r7, lr}
 801f15a:	b084      	sub	sp, #16
 801f15c:	af00      	add	r7, sp, #0
 801f15e:	60f8      	str	r0, [r7, #12]
 801f160:	460b      	mov	r3, r1
 801f162:	607a      	str	r2, [r7, #4]
 801f164:	72fb      	strb	r3, [r7, #11]
 801f166:	7afb      	ldrb	r3, [r7, #11]
 801f168:	021b      	lsls	r3, r3, #8
 801f16a:	b21a      	sxth	r2, r3
 801f16c:	4b06      	ldr	r3, [pc, #24]	; (801f188 <lv_style_set_image_recolor+0x30>)
 801f16e:	4313      	orrs	r3, r2
 801f170:	b21b      	sxth	r3, r3
 801f172:	b29b      	uxth	r3, r3
 801f174:	687a      	ldr	r2, [r7, #4]
 801f176:	4619      	mov	r1, r3
 801f178:	68f8      	ldr	r0, [r7, #12]
 801f17a:	f7ec fb5d 	bl	800b838 <_lv_style_set_color>
 801f17e:	bf00      	nop
 801f180:	3710      	adds	r7, #16
 801f182:	46bd      	mov	sp, r7
 801f184:	bd80      	pop	{r7, pc}
 801f186:	bf00      	nop
 801f188:	ffff80a9 	.word	0xffff80a9

0801f18c <lv_style_set_transition_time>:
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
 801f18c:	b580      	push	{r7, lr}
 801f18e:	b082      	sub	sp, #8
 801f190:	af00      	add	r7, sp, #0
 801f192:	6078      	str	r0, [r7, #4]
 801f194:	460b      	mov	r3, r1
 801f196:	70fb      	strb	r3, [r7, #3]
 801f198:	4613      	mov	r3, r2
 801f19a:	803b      	strh	r3, [r7, #0]
 801f19c:	78fb      	ldrb	r3, [r7, #3]
 801f19e:	021b      	lsls	r3, r3, #8
 801f1a0:	b21b      	sxth	r3, r3
 801f1a2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 801f1a6:	b21b      	sxth	r3, r3
 801f1a8:	b29b      	uxth	r3, r3
 801f1aa:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f1ae:	4619      	mov	r1, r3
 801f1b0:	6878      	ldr	r0, [r7, #4]
 801f1b2:	f7ec fab3 	bl	800b71c <_lv_style_set_int>
 801f1b6:	bf00      	nop
 801f1b8:	3708      	adds	r7, #8
 801f1ba:	46bd      	mov	sp, r7
 801f1bc:	bd80      	pop	{r7, pc}

0801f1be <lv_style_set_transition_delay>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
 801f1be:	b580      	push	{r7, lr}
 801f1c0:	b082      	sub	sp, #8
 801f1c2:	af00      	add	r7, sp, #0
 801f1c4:	6078      	str	r0, [r7, #4]
 801f1c6:	460b      	mov	r3, r1
 801f1c8:	70fb      	strb	r3, [r7, #3]
 801f1ca:	4613      	mov	r3, r2
 801f1cc:	803b      	strh	r3, [r7, #0]
 801f1ce:	78fb      	ldrb	r3, [r7, #3]
 801f1d0:	021b      	lsls	r3, r3, #8
 801f1d2:	b21b      	sxth	r3, r3
 801f1d4:	f043 03b1 	orr.w	r3, r3, #177	; 0xb1
 801f1d8:	b21b      	sxth	r3, r3
 801f1da:	b29b      	uxth	r3, r3
 801f1dc:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f1e0:	4619      	mov	r1, r3
 801f1e2:	6878      	ldr	r0, [r7, #4]
 801f1e4:	f7ec fa9a 	bl	800b71c <_lv_style_set_int>
 801f1e8:	bf00      	nop
 801f1ea:	3708      	adds	r7, #8
 801f1ec:	46bd      	mov	sp, r7
 801f1ee:	bd80      	pop	{r7, pc}

0801f1f0 <lv_style_set_transition_prop_3>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
 801f1f0:	b580      	push	{r7, lr}
 801f1f2:	b082      	sub	sp, #8
 801f1f4:	af00      	add	r7, sp, #0
 801f1f6:	6078      	str	r0, [r7, #4]
 801f1f8:	460b      	mov	r3, r1
 801f1fa:	70fb      	strb	r3, [r7, #3]
 801f1fc:	4613      	mov	r3, r2
 801f1fe:	803b      	strh	r3, [r7, #0]
 801f200:	78fb      	ldrb	r3, [r7, #3]
 801f202:	021b      	lsls	r3, r3, #8
 801f204:	b21b      	sxth	r3, r3
 801f206:	f043 03b4 	orr.w	r3, r3, #180	; 0xb4
 801f20a:	b21b      	sxth	r3, r3
 801f20c:	b29b      	uxth	r3, r3
 801f20e:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f212:	4619      	mov	r1, r3
 801f214:	6878      	ldr	r0, [r7, #4]
 801f216:	f7ec fa81 	bl	800b71c <_lv_style_set_int>
 801f21a:	bf00      	nop
 801f21c:	3708      	adds	r7, #8
 801f21e:	46bd      	mov	sp, r7
 801f220:	bd80      	pop	{r7, pc}

0801f222 <lv_style_set_transition_prop_4>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
 801f222:	b580      	push	{r7, lr}
 801f224:	b082      	sub	sp, #8
 801f226:	af00      	add	r7, sp, #0
 801f228:	6078      	str	r0, [r7, #4]
 801f22a:	460b      	mov	r3, r1
 801f22c:	70fb      	strb	r3, [r7, #3]
 801f22e:	4613      	mov	r3, r2
 801f230:	803b      	strh	r3, [r7, #0]
 801f232:	78fb      	ldrb	r3, [r7, #3]
 801f234:	021b      	lsls	r3, r3, #8
 801f236:	b21b      	sxth	r3, r3
 801f238:	f043 03b5 	orr.w	r3, r3, #181	; 0xb5
 801f23c:	b21b      	sxth	r3, r3
 801f23e:	b29b      	uxth	r3, r3
 801f240:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f244:	4619      	mov	r1, r3
 801f246:	6878      	ldr	r0, [r7, #4]
 801f248:	f7ec fa68 	bl	800b71c <_lv_style_set_int>
 801f24c:	bf00      	nop
 801f24e:	3708      	adds	r7, #8
 801f250:	46bd      	mov	sp, r7
 801f252:	bd80      	pop	{r7, pc}

0801f254 <lv_style_set_transition_prop_5>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
 801f254:	b580      	push	{r7, lr}
 801f256:	b082      	sub	sp, #8
 801f258:	af00      	add	r7, sp, #0
 801f25a:	6078      	str	r0, [r7, #4]
 801f25c:	460b      	mov	r3, r1
 801f25e:	70fb      	strb	r3, [r7, #3]
 801f260:	4613      	mov	r3, r2
 801f262:	803b      	strh	r3, [r7, #0]
 801f264:	78fb      	ldrb	r3, [r7, #3]
 801f266:	021b      	lsls	r3, r3, #8
 801f268:	b21b      	sxth	r3, r3
 801f26a:	f043 03b6 	orr.w	r3, r3, #182	; 0xb6
 801f26e:	b21b      	sxth	r3, r3
 801f270:	b29b      	uxth	r3, r3
 801f272:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f276:	4619      	mov	r1, r3
 801f278:	6878      	ldr	r0, [r7, #4]
 801f27a:	f7ec fa4f 	bl	800b71c <_lv_style_set_int>
 801f27e:	bf00      	nop
 801f280:	3708      	adds	r7, #8
 801f282:	46bd      	mov	sp, r7
 801f284:	bd80      	pop	{r7, pc}

0801f286 <lv_style_set_transition_prop_6>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
 801f286:	b580      	push	{r7, lr}
 801f288:	b082      	sub	sp, #8
 801f28a:	af00      	add	r7, sp, #0
 801f28c:	6078      	str	r0, [r7, #4]
 801f28e:	460b      	mov	r3, r1
 801f290:	70fb      	strb	r3, [r7, #3]
 801f292:	4613      	mov	r3, r2
 801f294:	803b      	strh	r3, [r7, #0]
 801f296:	78fb      	ldrb	r3, [r7, #3]
 801f298:	021b      	lsls	r3, r3, #8
 801f29a:	b21b      	sxth	r3, r3
 801f29c:	f043 03b7 	orr.w	r3, r3, #183	; 0xb7
 801f2a0:	b21b      	sxth	r3, r3
 801f2a2:	b29b      	uxth	r3, r3
 801f2a4:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f2a8:	4619      	mov	r1, r3
 801f2aa:	6878      	ldr	r0, [r7, #4]
 801f2ac:	f7ec fa36 	bl	800b71c <_lv_style_set_int>
 801f2b0:	bf00      	nop
 801f2b2:	3708      	adds	r7, #8
 801f2b4:	46bd      	mov	sp, r7
 801f2b6:	bd80      	pop	{r7, pc}

0801f2b8 <lv_style_set_scale_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
 801f2b8:	b580      	push	{r7, lr}
 801f2ba:	b082      	sub	sp, #8
 801f2bc:	af00      	add	r7, sp, #0
 801f2be:	6078      	str	r0, [r7, #4]
 801f2c0:	460b      	mov	r3, r1
 801f2c2:	70fb      	strb	r3, [r7, #3]
 801f2c4:	4613      	mov	r3, r2
 801f2c6:	803b      	strh	r3, [r7, #0]
 801f2c8:	78fb      	ldrb	r3, [r7, #3]
 801f2ca:	021b      	lsls	r3, r3, #8
 801f2cc:	b21b      	sxth	r3, r3
 801f2ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801f2d2:	b21b      	sxth	r3, r3
 801f2d4:	b29b      	uxth	r3, r3
 801f2d6:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f2da:	4619      	mov	r1, r3
 801f2dc:	6878      	ldr	r0, [r7, #4]
 801f2de:	f7ec fa1d 	bl	800b71c <_lv_style_set_int>
 801f2e2:	bf00      	nop
 801f2e4:	3708      	adds	r7, #8
 801f2e6:	46bd      	mov	sp, r7
 801f2e8:	bd80      	pop	{r7, pc}

0801f2ea <lv_style_set_scale_end_border_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
 801f2ea:	b580      	push	{r7, lr}
 801f2ec:	b082      	sub	sp, #8
 801f2ee:	af00      	add	r7, sp, #0
 801f2f0:	6078      	str	r0, [r7, #4]
 801f2f2:	460b      	mov	r3, r1
 801f2f4:	70fb      	strb	r3, [r7, #3]
 801f2f6:	4613      	mov	r3, r2
 801f2f8:	803b      	strh	r3, [r7, #0]
 801f2fa:	78fb      	ldrb	r3, [r7, #3]
 801f2fc:	021b      	lsls	r3, r3, #8
 801f2fe:	b21b      	sxth	r3, r3
 801f300:	f043 03c2 	orr.w	r3, r3, #194	; 0xc2
 801f304:	b21b      	sxth	r3, r3
 801f306:	b29b      	uxth	r3, r3
 801f308:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f30c:	4619      	mov	r1, r3
 801f30e:	6878      	ldr	r0, [r7, #4]
 801f310:	f7ec fa04 	bl	800b71c <_lv_style_set_int>
 801f314:	bf00      	nop
 801f316:	3708      	adds	r7, #8
 801f318:	46bd      	mov	sp, r7
 801f31a:	bd80      	pop	{r7, pc}

0801f31c <lv_style_set_scale_end_line_width>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
 801f31c:	b580      	push	{r7, lr}
 801f31e:	b082      	sub	sp, #8
 801f320:	af00      	add	r7, sp, #0
 801f322:	6078      	str	r0, [r7, #4]
 801f324:	460b      	mov	r3, r1
 801f326:	70fb      	strb	r3, [r7, #3]
 801f328:	4613      	mov	r3, r2
 801f32a:	803b      	strh	r3, [r7, #0]
 801f32c:	78fb      	ldrb	r3, [r7, #3]
 801f32e:	021b      	lsls	r3, r3, #8
 801f330:	b21b      	sxth	r3, r3
 801f332:	f043 03c3 	orr.w	r3, r3, #195	; 0xc3
 801f336:	b21b      	sxth	r3, r3
 801f338:	b29b      	uxth	r3, r3
 801f33a:	f9b7 2000 	ldrsh.w	r2, [r7]
 801f33e:	4619      	mov	r1, r3
 801f340:	6878      	ldr	r0, [r7, #4]
 801f342:	f7ec f9eb 	bl	800b71c <_lv_style_set_int>
 801f346:	bf00      	nop
 801f348:	3708      	adds	r7, #8
 801f34a:	46bd      	mov	sp, r7
 801f34c:	bd80      	pop	{r7, pc}

0801f34e <lv_style_set_scale_grad_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
 801f34e:	b580      	push	{r7, lr}
 801f350:	b084      	sub	sp, #16
 801f352:	af00      	add	r7, sp, #0
 801f354:	60f8      	str	r0, [r7, #12]
 801f356:	460b      	mov	r3, r1
 801f358:	607a      	str	r2, [r7, #4]
 801f35a:	72fb      	strb	r3, [r7, #11]
 801f35c:	7afb      	ldrb	r3, [r7, #11]
 801f35e:	021b      	lsls	r3, r3, #8
 801f360:	b21b      	sxth	r3, r3
 801f362:	f043 03c9 	orr.w	r3, r3, #201	; 0xc9
 801f366:	b21b      	sxth	r3, r3
 801f368:	b29b      	uxth	r3, r3
 801f36a:	687a      	ldr	r2, [r7, #4]
 801f36c:	4619      	mov	r1, r3
 801f36e:	68f8      	ldr	r0, [r7, #12]
 801f370:	f7ec fa62 	bl	800b838 <_lv_style_set_color>
 801f374:	bf00      	nop
 801f376:	3710      	adds	r7, #16
 801f378:	46bd      	mov	sp, r7
 801f37a:	bd80      	pop	{r7, pc}

0801f37c <lv_style_set_scale_end_color>:
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
 801f37c:	b580      	push	{r7, lr}
 801f37e:	b084      	sub	sp, #16
 801f380:	af00      	add	r7, sp, #0
 801f382:	60f8      	str	r0, [r7, #12]
 801f384:	460b      	mov	r3, r1
 801f386:	607a      	str	r2, [r7, #4]
 801f388:	72fb      	strb	r3, [r7, #11]
 801f38a:	7afb      	ldrb	r3, [r7, #11]
 801f38c:	021b      	lsls	r3, r3, #8
 801f38e:	b21b      	sxth	r3, r3
 801f390:	f043 03ca 	orr.w	r3, r3, #202	; 0xca
 801f394:	b21b      	sxth	r3, r3
 801f396:	b29b      	uxth	r3, r3
 801f398:	687a      	ldr	r2, [r7, #4]
 801f39a:	4619      	mov	r1, r3
 801f39c:	68f8      	ldr	r0, [r7, #12]
 801f39e:	f7ec fa4b 	bl	800b838 <_lv_style_set_color>
 801f3a2:	bf00      	nop
 801f3a4:	3710      	adds	r7, #16
 801f3a6:	46bd      	mov	sp, r7
 801f3a8:	bd80      	pop	{r7, pc}
	...

0801f3ac <basic_init>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void basic_init(void)
{
 801f3ac:	b5b0      	push	{r4, r5, r7, lr}
 801f3ae:	b082      	sub	sp, #8
 801f3b0:	af00      	add	r7, sp, #0
    style_init_reset(&styles->scr);
 801f3b2:	4bb9      	ldr	r3, [pc, #740]	; (801f698 <basic_init+0x2ec>)
 801f3b4:	681b      	ldr	r3, [r3, #0]
 801f3b6:	4618      	mov	r0, r3
 801f3b8:	f006 f83a 	bl	8025430 <style_init_reset>
    lv_style_set_bg_opa(&styles->scr, LV_STATE_DEFAULT, LV_OPA_COVER);
 801f3bc:	4bb6      	ldr	r3, [pc, #728]	; (801f698 <basic_init+0x2ec>)
 801f3be:	681b      	ldr	r3, [r3, #0]
 801f3c0:	22ff      	movs	r2, #255	; 0xff
 801f3c2:	2100      	movs	r1, #0
 801f3c4:	4618      	mov	r0, r3
 801f3c6:	f7ff fc17 	bl	801ebf8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR);
 801f3ca:	4bb3      	ldr	r3, [pc, #716]	; (801f698 <basic_init+0x2ec>)
 801f3cc:	681b      	ldr	r3, [r3, #0]
 801f3ce:	461c      	mov	r4, r3
 801f3d0:	4bb2      	ldr	r3, [pc, #712]	; (801f69c <basic_init+0x2f0>)
 801f3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f3d4:	f003 0302 	and.w	r3, r3, #2
 801f3d8:	2b00      	cmp	r3, #0
 801f3da:	d004      	beq.n	801f3e6 <basic_init+0x3a>
 801f3dc:	48b0      	ldr	r0, [pc, #704]	; (801f6a0 <basic_init+0x2f4>)
 801f3de:	f7ff fa69 	bl	801e8b4 <lv_color_hex>
 801f3e2:	4603      	mov	r3, r0
 801f3e4:	e003      	b.n	801f3ee <basic_init+0x42>
 801f3e6:	48af      	ldr	r0, [pc, #700]	; (801f6a4 <basic_init+0x2f8>)
 801f3e8:	f7ff fa64 	bl	801e8b4 <lv_color_hex>
 801f3ec:	4603      	mov	r3, r0
 801f3ee:	461a      	mov	r2, r3
 801f3f0:	2100      	movs	r1, #0
 801f3f2:	4620      	mov	r0, r4
 801f3f4:	f7ff fbe9 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 801f3f8:	4ba7      	ldr	r3, [pc, #668]	; (801f698 <basic_init+0x2ec>)
 801f3fa:	681b      	ldr	r3, [r3, #0]
 801f3fc:	461c      	mov	r4, r3
 801f3fe:	4ba7      	ldr	r3, [pc, #668]	; (801f69c <basic_init+0x2f0>)
 801f400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f402:	f003 0302 	and.w	r3, r3, #2
 801f406:	2b00      	cmp	r3, #0
 801f408:	d004      	beq.n	801f414 <basic_init+0x68>
 801f40a:	48a7      	ldr	r0, [pc, #668]	; (801f6a8 <basic_init+0x2fc>)
 801f40c:	f7ff fa52 	bl	801e8b4 <lv_color_hex>
 801f410:	4603      	mov	r3, r0
 801f412:	e003      	b.n	801f41c <basic_init+0x70>
 801f414:	48a5      	ldr	r0, [pc, #660]	; (801f6ac <basic_init+0x300>)
 801f416:	f7ff fa4d 	bl	801e8b4 <lv_color_hex>
 801f41a:	4603      	mov	r3, r0
 801f41c:	461a      	mov	r2, r3
 801f41e:	2100      	movs	r1, #0
 801f420:	4620      	mov	r0, r4
 801f422:	f7ff fdb5 	bl	801ef90 <lv_style_set_text_color>
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 801f426:	4b9c      	ldr	r3, [pc, #624]	; (801f698 <basic_init+0x2ec>)
 801f428:	681b      	ldr	r3, [r3, #0]
 801f42a:	461c      	mov	r4, r3
 801f42c:	4b9b      	ldr	r3, [pc, #620]	; (801f69c <basic_init+0x2f0>)
 801f42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f430:	f003 0302 	and.w	r3, r3, #2
 801f434:	2b00      	cmp	r3, #0
 801f436:	d004      	beq.n	801f442 <basic_init+0x96>
 801f438:	489b      	ldr	r0, [pc, #620]	; (801f6a8 <basic_init+0x2fc>)
 801f43a:	f7ff fa3b 	bl	801e8b4 <lv_color_hex>
 801f43e:	4603      	mov	r3, r0
 801f440:	e003      	b.n	801f44a <basic_init+0x9e>
 801f442:	489a      	ldr	r0, [pc, #616]	; (801f6ac <basic_init+0x300>)
 801f444:	f7ff fa36 	bl	801e8b4 <lv_color_hex>
 801f448:	4603      	mov	r3, r0
 801f44a:	461a      	mov	r2, r3
 801f44c:	2100      	movs	r1, #0
 801f44e:	4620      	mov	r0, r4
 801f450:	f7ff fd54 	bl	801eefc <lv_style_set_value_color>
    lv_style_set_text_sel_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 801f454:	4b90      	ldr	r3, [pc, #576]	; (801f698 <basic_init+0x2ec>)
 801f456:	681b      	ldr	r3, [r3, #0]
 801f458:	461c      	mov	r4, r3
 801f45a:	4b90      	ldr	r3, [pc, #576]	; (801f69c <basic_init+0x2f0>)
 801f45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f45e:	f003 0302 	and.w	r3, r3, #2
 801f462:	2b00      	cmp	r3, #0
 801f464:	d004      	beq.n	801f470 <basic_init+0xc4>
 801f466:	4890      	ldr	r0, [pc, #576]	; (801f6a8 <basic_init+0x2fc>)
 801f468:	f7ff fa24 	bl	801e8b4 <lv_color_hex>
 801f46c:	4603      	mov	r3, r0
 801f46e:	e003      	b.n	801f478 <basic_init+0xcc>
 801f470:	488e      	ldr	r0, [pc, #568]	; (801f6ac <basic_init+0x300>)
 801f472:	f7ff fa1f 	bl	801e8b4 <lv_color_hex>
 801f476:	4603      	mov	r3, r0
 801f478:	461a      	mov	r2, r3
 801f47a:	2100      	movs	r1, #0
 801f47c:	4620      	mov	r0, r4
 801f47e:	f7ff fda1 	bl	801efc4 <lv_style_set_text_sel_color>
    lv_style_set_text_sel_bg_color(&styles->scr, LV_STATE_DEFAULT, theme.color_primary);
 801f482:	4b85      	ldr	r3, [pc, #532]	; (801f698 <basic_init+0x2ec>)
 801f484:	681b      	ldr	r3, [r3, #0]
 801f486:	4618      	mov	r0, r3
 801f488:	4b84      	ldr	r3, [pc, #528]	; (801f69c <basic_init+0x2f0>)
 801f48a:	68da      	ldr	r2, [r3, #12]
 801f48c:	2100      	movs	r1, #0
 801f48e:	f7ff fdb3 	bl	801eff8 <lv_style_set_text_sel_bg_color>
    lv_style_set_value_font(&styles->scr, LV_STATE_DEFAULT, theme.font_normal);
 801f492:	4b81      	ldr	r3, [pc, #516]	; (801f698 <basic_init+0x2ec>)
 801f494:	681b      	ldr	r3, [r3, #0]
 801f496:	4618      	mov	r0, r3
 801f498:	4b80      	ldr	r3, [pc, #512]	; (801f69c <basic_init+0x2f0>)
 801f49a:	699b      	ldr	r3, [r3, #24]
 801f49c:	461a      	mov	r2, r3
 801f49e:	2100      	movs	r1, #0
 801f4a0:	f7ff fd43 	bl	801ef2a <lv_style_set_value_font>

    style_init_reset(&styles->bg);
 801f4a4:	4b7c      	ldr	r3, [pc, #496]	; (801f698 <basic_init+0x2ec>)
 801f4a6:	681b      	ldr	r3, [r3, #0]
 801f4a8:	3304      	adds	r3, #4
 801f4aa:	4618      	mov	r0, r3
 801f4ac:	f005 ffc0 	bl	8025430 <style_init_reset>
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
 801f4b0:	4b79      	ldr	r3, [pc, #484]	; (801f698 <basic_init+0x2ec>)
 801f4b2:	681b      	ldr	r3, [r3, #0]
 801f4b4:	1d1c      	adds	r4, r3, #4
 801f4b6:	2000      	movs	r0, #0
 801f4b8:	f7fa ffaa 	bl	801a410 <lv_disp_get_dpi>
 801f4bc:	4603      	mov	r3, r0
 801f4be:	330a      	adds	r3, #10
 801f4c0:	00db      	lsls	r3, r3, #3
 801f4c2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f4c6:	db0d      	blt.n	801f4e4 <basic_init+0x138>
 801f4c8:	2000      	movs	r0, #0
 801f4ca:	f7fa ffa1 	bl	801a410 <lv_disp_get_dpi>
 801f4ce:	4603      	mov	r3, r0
 801f4d0:	330a      	adds	r3, #10
 801f4d2:	00db      	lsls	r3, r3, #3
 801f4d4:	4a76      	ldr	r2, [pc, #472]	; (801f6b0 <basic_init+0x304>)
 801f4d6:	fb82 1203 	smull	r1, r2, r2, r3
 801f4da:	1192      	asrs	r2, r2, #6
 801f4dc:	17db      	asrs	r3, r3, #31
 801f4de:	1ad3      	subs	r3, r2, r3
 801f4e0:	b21b      	sxth	r3, r3
 801f4e2:	e000      	b.n	801f4e6 <basic_init+0x13a>
 801f4e4:	2301      	movs	r3, #1
 801f4e6:	461a      	mov	r2, r3
 801f4e8:	2100      	movs	r1, #0
 801f4ea:	4620      	mov	r0, r4
 801f4ec:	f7ff fa28 	bl	801e940 <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 801f4f0:	4b69      	ldr	r3, [pc, #420]	; (801f698 <basic_init+0x2ec>)
 801f4f2:	681b      	ldr	r3, [r3, #0]
 801f4f4:	3304      	adds	r3, #4
 801f4f6:	22ff      	movs	r2, #255	; 0xff
 801f4f8:	2100      	movs	r1, #0
 801f4fa:	4618      	mov	r0, r3
 801f4fc:	f7ff fb7c 	bl	801ebf8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
 801f500:	4b65      	ldr	r3, [pc, #404]	; (801f698 <basic_init+0x2ec>)
 801f502:	681b      	ldr	r3, [r3, #0]
 801f504:	1d1c      	adds	r4, r3, #4
 801f506:	4b65      	ldr	r3, [pc, #404]	; (801f69c <basic_init+0x2f0>)
 801f508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f50a:	f003 0302 	and.w	r3, r3, #2
 801f50e:	2b00      	cmp	r3, #0
 801f510:	d005      	beq.n	801f51e <basic_init+0x172>
 801f512:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801f516:	f7ff f9cd 	bl	801e8b4 <lv_color_hex>
 801f51a:	4603      	mov	r3, r0
 801f51c:	e003      	b.n	801f526 <basic_init+0x17a>
 801f51e:	4865      	ldr	r0, [pc, #404]	; (801f6b4 <basic_init+0x308>)
 801f520:	f7ff f9c8 	bl	801e8b4 <lv_color_hex>
 801f524:	4603      	mov	r3, r0
 801f526:	461a      	mov	r2, r3
 801f528:	2100      	movs	r1, #0
 801f52a:	4620      	mov	r0, r4
 801f52c:	f7ff fb4d 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 801f530:	4b59      	ldr	r3, [pc, #356]	; (801f698 <basic_init+0x2ec>)
 801f532:	681b      	ldr	r3, [r3, #0]
 801f534:	1d1c      	adds	r4, r3, #4
 801f536:	4b59      	ldr	r3, [pc, #356]	; (801f69c <basic_init+0x2f0>)
 801f538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f53a:	f003 0302 	and.w	r3, r3, #2
 801f53e:	2b00      	cmp	r3, #0
 801f540:	d004      	beq.n	801f54c <basic_init+0x1a0>
 801f542:	485d      	ldr	r0, [pc, #372]	; (801f6b8 <basic_init+0x30c>)
 801f544:	f7ff f9b6 	bl	801e8b4 <lv_color_hex>
 801f548:	4603      	mov	r3, r0
 801f54a:	e003      	b.n	801f554 <basic_init+0x1a8>
 801f54c:	485b      	ldr	r0, [pc, #364]	; (801f6bc <basic_init+0x310>)
 801f54e:	f7ff f9b1 	bl	801e8b4 <lv_color_hex>
 801f552:	4603      	mov	r3, r0
 801f554:	461a      	mov	r2, r3
 801f556:	2100      	movs	r1, #0
 801f558:	4620      	mov	r0, r4
 801f55a:	f7ff fbb0 	bl	801ecbe <lv_style_set_border_color>
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
 801f55e:	4b4f      	ldr	r3, [pc, #316]	; (801f69c <basic_init+0x2f0>)
 801f560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f562:	f003 0320 	and.w	r3, r3, #32
 801f566:	2b00      	cmp	r3, #0
 801f568:	d107      	bne.n	801f57a <basic_init+0x1ce>
 801f56a:	4b4b      	ldr	r3, [pc, #300]	; (801f698 <basic_init+0x2ec>)
 801f56c:	681b      	ldr	r3, [r3, #0]
 801f56e:	1d18      	adds	r0, r3, #4
 801f570:	4b4a      	ldr	r3, [pc, #296]	; (801f69c <basic_init+0x2f0>)
 801f572:	68da      	ldr	r2, [r3, #12]
 801f574:	2102      	movs	r1, #2
 801f576:	f7ff fba2 	bl	801ecbe <lv_style_set_border_color>
                                                                                          theme.color_primary);
    lv_style_set_border_color(&styles->bg, LV_STATE_EDITED, theme.color_secondary);
 801f57a:	4b47      	ldr	r3, [pc, #284]	; (801f698 <basic_init+0x2ec>)
 801f57c:	681b      	ldr	r3, [r3, #0]
 801f57e:	1d18      	adds	r0, r3, #4
 801f580:	4b46      	ldr	r3, [pc, #280]	; (801f69c <basic_init+0x2f0>)
 801f582:	691a      	ldr	r2, [r3, #16]
 801f584:	2104      	movs	r1, #4
 801f586:	f7ff fb9a 	bl	801ecbe <lv_style_set_border_color>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
 801f58a:	4b43      	ldr	r3, [pc, #268]	; (801f698 <basic_init+0x2ec>)
 801f58c:	681b      	ldr	r3, [r3, #0]
 801f58e:	1d1c      	adds	r4, r3, #4
 801f590:	2000      	movs	r0, #0
 801f592:	f7fa ff3d 	bl	801a410 <lv_disp_get_dpi>
 801f596:	4603      	mov	r3, r0
 801f598:	3328      	adds	r3, #40	; 0x28
 801f59a:	005b      	lsls	r3, r3, #1
 801f59c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f5a0:	db0d      	blt.n	801f5be <basic_init+0x212>
 801f5a2:	2000      	movs	r0, #0
 801f5a4:	f7fa ff34 	bl	801a410 <lv_disp_get_dpi>
 801f5a8:	4603      	mov	r3, r0
 801f5aa:	3328      	adds	r3, #40	; 0x28
 801f5ac:	005b      	lsls	r3, r3, #1
 801f5ae:	4a40      	ldr	r2, [pc, #256]	; (801f6b0 <basic_init+0x304>)
 801f5b0:	fb82 1203 	smull	r1, r2, r2, r3
 801f5b4:	1192      	asrs	r2, r2, #6
 801f5b6:	17db      	asrs	r3, r3, #31
 801f5b8:	1ad3      	subs	r3, r2, r3
 801f5ba:	b21b      	sxth	r3, r3
 801f5bc:	e000      	b.n	801f5c0 <basic_init+0x214>
 801f5be:	2301      	movs	r3, #1
 801f5c0:	461a      	mov	r2, r3
 801f5c2:	2100      	movs	r1, #0
 801f5c4:	4620      	mov	r0, r4
 801f5c6:	f7ff fb2f 	bl	801ec28 <lv_style_set_border_width>
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
 801f5ca:	4b33      	ldr	r3, [pc, #204]	; (801f698 <basic_init+0x2ec>)
 801f5cc:	681b      	ldr	r3, [r3, #0]
 801f5ce:	3304      	adds	r3, #4
 801f5d0:	2201      	movs	r2, #1
 801f5d2:	2100      	movs	r1, #0
 801f5d4:	4618      	mov	r0, r3
 801f5d6:	f7ff fb59 	bl	801ec8c <lv_style_set_border_post>
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 801f5da:	4b2f      	ldr	r3, [pc, #188]	; (801f698 <basic_init+0x2ec>)
 801f5dc:	681b      	ldr	r3, [r3, #0]
 801f5de:	1d1c      	adds	r4, r3, #4
 801f5e0:	4b2e      	ldr	r3, [pc, #184]	; (801f69c <basic_init+0x2f0>)
 801f5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f5e4:	f003 0302 	and.w	r3, r3, #2
 801f5e8:	2b00      	cmp	r3, #0
 801f5ea:	d004      	beq.n	801f5f6 <basic_init+0x24a>
 801f5ec:	482e      	ldr	r0, [pc, #184]	; (801f6a8 <basic_init+0x2fc>)
 801f5ee:	f7ff f961 	bl	801e8b4 <lv_color_hex>
 801f5f2:	4603      	mov	r3, r0
 801f5f4:	e004      	b.n	801f600 <basic_init+0x254>
 801f5f6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801f5fa:	f7ff f95b 	bl	801e8b4 <lv_color_hex>
 801f5fe:	4603      	mov	r3, r0
 801f600:	461a      	mov	r2, r3
 801f602:	2100      	movs	r1, #0
 801f604:	4620      	mov	r0, r4
 801f606:	f7ff fcc3 	bl	801ef90 <lv_style_set_text_color>
    lv_style_set_value_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
 801f60a:	4b23      	ldr	r3, [pc, #140]	; (801f698 <basic_init+0x2ec>)
 801f60c:	681b      	ldr	r3, [r3, #0]
 801f60e:	1d18      	adds	r0, r3, #4
 801f610:	4b22      	ldr	r3, [pc, #136]	; (801f69c <basic_init+0x2f0>)
 801f612:	699b      	ldr	r3, [r3, #24]
 801f614:	461a      	mov	r2, r3
 801f616:	2100      	movs	r1, #0
 801f618:	f7ff fc87 	bl	801ef2a <lv_style_set_value_font>
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 801f61c:	4b1e      	ldr	r3, [pc, #120]	; (801f698 <basic_init+0x2ec>)
 801f61e:	681b      	ldr	r3, [r3, #0]
 801f620:	1d1c      	adds	r4, r3, #4
 801f622:	4b1e      	ldr	r3, [pc, #120]	; (801f69c <basic_init+0x2f0>)
 801f624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f626:	f003 0302 	and.w	r3, r3, #2
 801f62a:	2b00      	cmp	r3, #0
 801f62c:	d004      	beq.n	801f638 <basic_init+0x28c>
 801f62e:	481e      	ldr	r0, [pc, #120]	; (801f6a8 <basic_init+0x2fc>)
 801f630:	f7ff f940 	bl	801e8b4 <lv_color_hex>
 801f634:	4603      	mov	r3, r0
 801f636:	e004      	b.n	801f642 <basic_init+0x296>
 801f638:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801f63c:	f7ff f93a 	bl	801e8b4 <lv_color_hex>
 801f640:	4603      	mov	r3, r0
 801f642:	461a      	mov	r2, r3
 801f644:	2100      	movs	r1, #0
 801f646:	4620      	mov	r0, r4
 801f648:	f7ff fc58 	bl	801eefc <lv_style_set_value_color>
    lv_style_set_image_recolor(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 801f64c:	4b12      	ldr	r3, [pc, #72]	; (801f698 <basic_init+0x2ec>)
 801f64e:	681b      	ldr	r3, [r3, #0]
 801f650:	1d1c      	adds	r4, r3, #4
 801f652:	4b12      	ldr	r3, [pc, #72]	; (801f69c <basic_init+0x2f0>)
 801f654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f656:	f003 0302 	and.w	r3, r3, #2
 801f65a:	2b00      	cmp	r3, #0
 801f65c:	d004      	beq.n	801f668 <basic_init+0x2bc>
 801f65e:	4812      	ldr	r0, [pc, #72]	; (801f6a8 <basic_init+0x2fc>)
 801f660:	f7ff f928 	bl	801e8b4 <lv_color_hex>
 801f664:	4603      	mov	r3, r0
 801f666:	e004      	b.n	801f672 <basic_init+0x2c6>
 801f668:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801f66c:	f7ff f922 	bl	801e8b4 <lv_color_hex>
 801f670:	4603      	mov	r3, r0
 801f672:	461a      	mov	r2, r3
 801f674:	2100      	movs	r1, #0
 801f676:	4620      	mov	r0, r4
 801f678:	f7ff fd6e 	bl	801f158 <lv_style_set_image_recolor>
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 801f67c:	4b06      	ldr	r3, [pc, #24]	; (801f698 <basic_init+0x2ec>)
 801f67e:	681b      	ldr	r3, [r3, #0]
 801f680:	1d1c      	adds	r4, r3, #4
 801f682:	4b06      	ldr	r3, [pc, #24]	; (801f69c <basic_init+0x2f0>)
 801f684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f686:	f003 0302 	and.w	r3, r3, #2
 801f68a:	2b00      	cmp	r3, #0
 801f68c:	d018      	beq.n	801f6c0 <basic_init+0x314>
 801f68e:	4806      	ldr	r0, [pc, #24]	; (801f6a8 <basic_init+0x2fc>)
 801f690:	f7ff f910 	bl	801e8b4 <lv_color_hex>
 801f694:	4603      	mov	r3, r0
 801f696:	e018      	b.n	801f6ca <basic_init+0x31e>
 801f698:	20021498 	.word	0x20021498
 801f69c:	2002146c 	.word	0x2002146c
 801f6a0:	00eaeff3 	.word	0x00eaeff3
 801f6a4:	00444b5a 	.word	0x00444b5a
 801f6a8:	003b3e42 	.word	0x003b3e42
 801f6ac:	00e7e9ec 	.word	0x00e7e9ec
 801f6b0:	66666667 	.word	0x66666667
 801f6b4:	00586273 	.word	0x00586273
 801f6b8:	00d6dde3 	.word	0x00d6dde3
 801f6bc:	00808a97 	.word	0x00808a97
 801f6c0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801f6c4:	f7ff f8f6 	bl	801e8b4 <lv_color_hex>
 801f6c8:	4603      	mov	r3, r0
 801f6ca:	461a      	mov	r2, r3
 801f6cc:	2100      	movs	r1, #0
 801f6ce:	4620      	mov	r0, r4
 801f6d0:	f7ff fd2a 	bl	801f128 <lv_style_set_line_color>
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, 1);
 801f6d4:	4bcf      	ldr	r3, [pc, #828]	; (801fa14 <basic_init+0x668>)
 801f6d6:	681b      	ldr	r3, [r3, #0]
 801f6d8:	3304      	adds	r3, #4
 801f6da:	2201      	movs	r2, #1
 801f6dc:	2100      	movs	r1, #0
 801f6de:	4618      	mov	r0, r3
 801f6e0:	f7ff fcbe 	bl	801f060 <lv_style_set_line_width>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 801f6e4:	4bcb      	ldr	r3, [pc, #812]	; (801fa14 <basic_init+0x668>)
 801f6e6:	681b      	ldr	r3, [r3, #0]
 801f6e8:	1d1d      	adds	r5, r3, #4
 801f6ea:	2000      	movs	r0, #0
 801f6ec:	f7fa fea9 	bl	801a442 <lv_disp_get_size_category>
 801f6f0:	4603      	mov	r3, r0
 801f6f2:	2b01      	cmp	r3, #1
 801f6f4:	d81e      	bhi.n	801f734 <basic_init+0x388>
 801f6f6:	2000      	movs	r0, #0
 801f6f8:	f7fa fe8a 	bl	801a410 <lv_disp_get_dpi>
 801f6fc:	4603      	mov	r3, r0
 801f6fe:	461a      	mov	r2, r3
 801f700:	4613      	mov	r3, r2
 801f702:	011b      	lsls	r3, r3, #4
 801f704:	1a9b      	subs	r3, r3, r2
 801f706:	3350      	adds	r3, #80	; 0x50
 801f708:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f70c:	db10      	blt.n	801f730 <basic_init+0x384>
 801f70e:	2000      	movs	r0, #0
 801f710:	f7fa fe7e 	bl	801a410 <lv_disp_get_dpi>
 801f714:	4603      	mov	r3, r0
 801f716:	461a      	mov	r2, r3
 801f718:	4613      	mov	r3, r2
 801f71a:	011b      	lsls	r3, r3, #4
 801f71c:	1a9b      	subs	r3, r3, r2
 801f71e:	3350      	adds	r3, #80	; 0x50
 801f720:	4abd      	ldr	r2, [pc, #756]	; (801fa18 <basic_init+0x66c>)
 801f722:	fb82 1203 	smull	r1, r2, r2, r3
 801f726:	1192      	asrs	r2, r2, #6
 801f728:	17db      	asrs	r3, r3, #31
 801f72a:	1ad3      	subs	r3, r2, r3
 801f72c:	b29c      	uxth	r4, r3
 801f72e:	e021      	b.n	801f774 <basic_init+0x3c8>
 801f730:	2401      	movs	r4, #1
 801f732:	e01f      	b.n	801f774 <basic_init+0x3c8>
 801f734:	2000      	movs	r0, #0
 801f736:	f7fa fe6b 	bl	801a410 <lv_disp_get_dpi>
 801f73a:	4603      	mov	r3, r0
 801f73c:	461a      	mov	r2, r3
 801f73e:	4613      	mov	r3, r2
 801f740:	011b      	lsls	r3, r3, #4
 801f742:	1a9b      	subs	r3, r3, r2
 801f744:	005b      	lsls	r3, r3, #1
 801f746:	3350      	adds	r3, #80	; 0x50
 801f748:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f74c:	db11      	blt.n	801f772 <basic_init+0x3c6>
 801f74e:	2000      	movs	r0, #0
 801f750:	f7fa fe5e 	bl	801a410 <lv_disp_get_dpi>
 801f754:	4603      	mov	r3, r0
 801f756:	461a      	mov	r2, r3
 801f758:	4613      	mov	r3, r2
 801f75a:	011b      	lsls	r3, r3, #4
 801f75c:	1a9b      	subs	r3, r3, r2
 801f75e:	005b      	lsls	r3, r3, #1
 801f760:	3350      	adds	r3, #80	; 0x50
 801f762:	4aad      	ldr	r2, [pc, #692]	; (801fa18 <basic_init+0x66c>)
 801f764:	fb82 1203 	smull	r1, r2, r2, r3
 801f768:	1192      	asrs	r2, r2, #6
 801f76a:	17db      	asrs	r3, r3, #31
 801f76c:	1ad3      	subs	r3, r2, r3
 801f76e:	b29c      	uxth	r4, r3
 801f770:	e000      	b.n	801f774 <basic_init+0x3c8>
 801f772:	2401      	movs	r4, #1
 801f774:	2000      	movs	r0, #0
 801f776:	f7fa fe4b 	bl	801a410 <lv_disp_get_dpi>
 801f77a:	4603      	mov	r3, r0
 801f77c:	3328      	adds	r3, #40	; 0x28
 801f77e:	005b      	lsls	r3, r3, #1
 801f780:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f784:	db0d      	blt.n	801f7a2 <basic_init+0x3f6>
 801f786:	2000      	movs	r0, #0
 801f788:	f7fa fe42 	bl	801a410 <lv_disp_get_dpi>
 801f78c:	4603      	mov	r3, r0
 801f78e:	3328      	adds	r3, #40	; 0x28
 801f790:	005b      	lsls	r3, r3, #1
 801f792:	4aa1      	ldr	r2, [pc, #644]	; (801fa18 <basic_init+0x66c>)
 801f794:	fb82 1203 	smull	r1, r2, r2, r3
 801f798:	1192      	asrs	r2, r2, #6
 801f79a:	17db      	asrs	r3, r3, #31
 801f79c:	1ad3      	subs	r3, r2, r3
 801f79e:	b29b      	uxth	r3, r3
 801f7a0:	e000      	b.n	801f7a4 <basic_init+0x3f8>
 801f7a2:	2301      	movs	r3, #1
 801f7a4:	4423      	add	r3, r4
 801f7a6:	b29b      	uxth	r3, r3
 801f7a8:	b21b      	sxth	r3, r3
 801f7aa:	461a      	mov	r2, r3
 801f7ac:	2100      	movs	r1, #0
 801f7ae:	4628      	mov	r0, r5
 801f7b0:	f7ff f95c 	bl	801ea6c <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 801f7b4:	4b97      	ldr	r3, [pc, #604]	; (801fa14 <basic_init+0x668>)
 801f7b6:	681b      	ldr	r3, [r3, #0]
 801f7b8:	1d1d      	adds	r5, r3, #4
 801f7ba:	2000      	movs	r0, #0
 801f7bc:	f7fa fe41 	bl	801a442 <lv_disp_get_size_category>
 801f7c0:	4603      	mov	r3, r0
 801f7c2:	2b01      	cmp	r3, #1
 801f7c4:	d81e      	bhi.n	801f804 <basic_init+0x458>
 801f7c6:	2000      	movs	r0, #0
 801f7c8:	f7fa fe22 	bl	801a410 <lv_disp_get_dpi>
 801f7cc:	4603      	mov	r3, r0
 801f7ce:	461a      	mov	r2, r3
 801f7d0:	4613      	mov	r3, r2
 801f7d2:	011b      	lsls	r3, r3, #4
 801f7d4:	1a9b      	subs	r3, r3, r2
 801f7d6:	3350      	adds	r3, #80	; 0x50
 801f7d8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f7dc:	db10      	blt.n	801f800 <basic_init+0x454>
 801f7de:	2000      	movs	r0, #0
 801f7e0:	f7fa fe16 	bl	801a410 <lv_disp_get_dpi>
 801f7e4:	4603      	mov	r3, r0
 801f7e6:	461a      	mov	r2, r3
 801f7e8:	4613      	mov	r3, r2
 801f7ea:	011b      	lsls	r3, r3, #4
 801f7ec:	1a9b      	subs	r3, r3, r2
 801f7ee:	3350      	adds	r3, #80	; 0x50
 801f7f0:	4a89      	ldr	r2, [pc, #548]	; (801fa18 <basic_init+0x66c>)
 801f7f2:	fb82 1203 	smull	r1, r2, r2, r3
 801f7f6:	1192      	asrs	r2, r2, #6
 801f7f8:	17db      	asrs	r3, r3, #31
 801f7fa:	1ad3      	subs	r3, r2, r3
 801f7fc:	b29c      	uxth	r4, r3
 801f7fe:	e021      	b.n	801f844 <basic_init+0x498>
 801f800:	2401      	movs	r4, #1
 801f802:	e01f      	b.n	801f844 <basic_init+0x498>
 801f804:	2000      	movs	r0, #0
 801f806:	f7fa fe03 	bl	801a410 <lv_disp_get_dpi>
 801f80a:	4603      	mov	r3, r0
 801f80c:	461a      	mov	r2, r3
 801f80e:	4613      	mov	r3, r2
 801f810:	011b      	lsls	r3, r3, #4
 801f812:	1a9b      	subs	r3, r3, r2
 801f814:	005b      	lsls	r3, r3, #1
 801f816:	3350      	adds	r3, #80	; 0x50
 801f818:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f81c:	db11      	blt.n	801f842 <basic_init+0x496>
 801f81e:	2000      	movs	r0, #0
 801f820:	f7fa fdf6 	bl	801a410 <lv_disp_get_dpi>
 801f824:	4603      	mov	r3, r0
 801f826:	461a      	mov	r2, r3
 801f828:	4613      	mov	r3, r2
 801f82a:	011b      	lsls	r3, r3, #4
 801f82c:	1a9b      	subs	r3, r3, r2
 801f82e:	005b      	lsls	r3, r3, #1
 801f830:	3350      	adds	r3, #80	; 0x50
 801f832:	4a79      	ldr	r2, [pc, #484]	; (801fa18 <basic_init+0x66c>)
 801f834:	fb82 1203 	smull	r1, r2, r2, r3
 801f838:	1192      	asrs	r2, r2, #6
 801f83a:	17db      	asrs	r3, r3, #31
 801f83c:	1ad3      	subs	r3, r2, r3
 801f83e:	b29c      	uxth	r4, r3
 801f840:	e000      	b.n	801f844 <basic_init+0x498>
 801f842:	2401      	movs	r4, #1
 801f844:	2000      	movs	r0, #0
 801f846:	f7fa fde3 	bl	801a410 <lv_disp_get_dpi>
 801f84a:	4603      	mov	r3, r0
 801f84c:	3328      	adds	r3, #40	; 0x28
 801f84e:	005b      	lsls	r3, r3, #1
 801f850:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f854:	db0d      	blt.n	801f872 <basic_init+0x4c6>
 801f856:	2000      	movs	r0, #0
 801f858:	f7fa fdda 	bl	801a410 <lv_disp_get_dpi>
 801f85c:	4603      	mov	r3, r0
 801f85e:	3328      	adds	r3, #40	; 0x28
 801f860:	005b      	lsls	r3, r3, #1
 801f862:	4a6d      	ldr	r2, [pc, #436]	; (801fa18 <basic_init+0x66c>)
 801f864:	fb82 1203 	smull	r1, r2, r2, r3
 801f868:	1192      	asrs	r2, r2, #6
 801f86a:	17db      	asrs	r3, r3, #31
 801f86c:	1ad3      	subs	r3, r2, r3
 801f86e:	b29b      	uxth	r3, r3
 801f870:	e000      	b.n	801f874 <basic_init+0x4c8>
 801f872:	2301      	movs	r3, #1
 801f874:	4423      	add	r3, r4
 801f876:	b29b      	uxth	r3, r3
 801f878:	b21b      	sxth	r3, r3
 801f87a:	461a      	mov	r2, r3
 801f87c:	2100      	movs	r1, #0
 801f87e:	4628      	mov	r0, r5
 801f880:	f7ff f90d 	bl	801ea9e <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 801f884:	4b63      	ldr	r3, [pc, #396]	; (801fa14 <basic_init+0x668>)
 801f886:	681b      	ldr	r3, [r3, #0]
 801f888:	1d1d      	adds	r5, r3, #4
 801f88a:	2000      	movs	r0, #0
 801f88c:	f7fa fdd9 	bl	801a442 <lv_disp_get_size_category>
 801f890:	4603      	mov	r3, r0
 801f892:	2b01      	cmp	r3, #1
 801f894:	d81e      	bhi.n	801f8d4 <basic_init+0x528>
 801f896:	2000      	movs	r0, #0
 801f898:	f7fa fdba 	bl	801a410 <lv_disp_get_dpi>
 801f89c:	4603      	mov	r3, r0
 801f89e:	461a      	mov	r2, r3
 801f8a0:	4613      	mov	r3, r2
 801f8a2:	011b      	lsls	r3, r3, #4
 801f8a4:	1a9b      	subs	r3, r3, r2
 801f8a6:	3350      	adds	r3, #80	; 0x50
 801f8a8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f8ac:	db10      	blt.n	801f8d0 <basic_init+0x524>
 801f8ae:	2000      	movs	r0, #0
 801f8b0:	f7fa fdae 	bl	801a410 <lv_disp_get_dpi>
 801f8b4:	4603      	mov	r3, r0
 801f8b6:	461a      	mov	r2, r3
 801f8b8:	4613      	mov	r3, r2
 801f8ba:	011b      	lsls	r3, r3, #4
 801f8bc:	1a9b      	subs	r3, r3, r2
 801f8be:	3350      	adds	r3, #80	; 0x50
 801f8c0:	4a55      	ldr	r2, [pc, #340]	; (801fa18 <basic_init+0x66c>)
 801f8c2:	fb82 1203 	smull	r1, r2, r2, r3
 801f8c6:	1192      	asrs	r2, r2, #6
 801f8c8:	17db      	asrs	r3, r3, #31
 801f8ca:	1ad3      	subs	r3, r2, r3
 801f8cc:	b29c      	uxth	r4, r3
 801f8ce:	e021      	b.n	801f914 <basic_init+0x568>
 801f8d0:	2401      	movs	r4, #1
 801f8d2:	e01f      	b.n	801f914 <basic_init+0x568>
 801f8d4:	2000      	movs	r0, #0
 801f8d6:	f7fa fd9b 	bl	801a410 <lv_disp_get_dpi>
 801f8da:	4603      	mov	r3, r0
 801f8dc:	461a      	mov	r2, r3
 801f8de:	4613      	mov	r3, r2
 801f8e0:	011b      	lsls	r3, r3, #4
 801f8e2:	1a9b      	subs	r3, r3, r2
 801f8e4:	005b      	lsls	r3, r3, #1
 801f8e6:	3350      	adds	r3, #80	; 0x50
 801f8e8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f8ec:	db11      	blt.n	801f912 <basic_init+0x566>
 801f8ee:	2000      	movs	r0, #0
 801f8f0:	f7fa fd8e 	bl	801a410 <lv_disp_get_dpi>
 801f8f4:	4603      	mov	r3, r0
 801f8f6:	461a      	mov	r2, r3
 801f8f8:	4613      	mov	r3, r2
 801f8fa:	011b      	lsls	r3, r3, #4
 801f8fc:	1a9b      	subs	r3, r3, r2
 801f8fe:	005b      	lsls	r3, r3, #1
 801f900:	3350      	adds	r3, #80	; 0x50
 801f902:	4a45      	ldr	r2, [pc, #276]	; (801fa18 <basic_init+0x66c>)
 801f904:	fb82 1203 	smull	r1, r2, r2, r3
 801f908:	1192      	asrs	r2, r2, #6
 801f90a:	17db      	asrs	r3, r3, #31
 801f90c:	1ad3      	subs	r3, r2, r3
 801f90e:	b29c      	uxth	r4, r3
 801f910:	e000      	b.n	801f914 <basic_init+0x568>
 801f912:	2401      	movs	r4, #1
 801f914:	2000      	movs	r0, #0
 801f916:	f7fa fd7b 	bl	801a410 <lv_disp_get_dpi>
 801f91a:	4603      	mov	r3, r0
 801f91c:	3328      	adds	r3, #40	; 0x28
 801f91e:	005b      	lsls	r3, r3, #1
 801f920:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f924:	db0d      	blt.n	801f942 <basic_init+0x596>
 801f926:	2000      	movs	r0, #0
 801f928:	f7fa fd72 	bl	801a410 <lv_disp_get_dpi>
 801f92c:	4603      	mov	r3, r0
 801f92e:	3328      	adds	r3, #40	; 0x28
 801f930:	005b      	lsls	r3, r3, #1
 801f932:	4a39      	ldr	r2, [pc, #228]	; (801fa18 <basic_init+0x66c>)
 801f934:	fb82 1203 	smull	r1, r2, r2, r3
 801f938:	1192      	asrs	r2, r2, #6
 801f93a:	17db      	asrs	r3, r3, #31
 801f93c:	1ad3      	subs	r3, r2, r3
 801f93e:	b29b      	uxth	r3, r3
 801f940:	e000      	b.n	801f944 <basic_init+0x598>
 801f942:	2301      	movs	r3, #1
 801f944:	4423      	add	r3, r4
 801f946:	b29b      	uxth	r3, r3
 801f948:	b21b      	sxth	r3, r3
 801f94a:	461a      	mov	r2, r3
 801f94c:	2100      	movs	r1, #0
 801f94e:	4628      	mov	r0, r5
 801f950:	f7ff f85a 	bl	801ea08 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
 801f954:	4b2f      	ldr	r3, [pc, #188]	; (801fa14 <basic_init+0x668>)
 801f956:	681b      	ldr	r3, [r3, #0]
 801f958:	1d1d      	adds	r5, r3, #4
 801f95a:	2000      	movs	r0, #0
 801f95c:	f7fa fd71 	bl	801a442 <lv_disp_get_size_category>
 801f960:	4603      	mov	r3, r0
 801f962:	2b01      	cmp	r3, #1
 801f964:	d81e      	bhi.n	801f9a4 <basic_init+0x5f8>
 801f966:	2000      	movs	r0, #0
 801f968:	f7fa fd52 	bl	801a410 <lv_disp_get_dpi>
 801f96c:	4603      	mov	r3, r0
 801f96e:	461a      	mov	r2, r3
 801f970:	4613      	mov	r3, r2
 801f972:	011b      	lsls	r3, r3, #4
 801f974:	1a9b      	subs	r3, r3, r2
 801f976:	3350      	adds	r3, #80	; 0x50
 801f978:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f97c:	db10      	blt.n	801f9a0 <basic_init+0x5f4>
 801f97e:	2000      	movs	r0, #0
 801f980:	f7fa fd46 	bl	801a410 <lv_disp_get_dpi>
 801f984:	4603      	mov	r3, r0
 801f986:	461a      	mov	r2, r3
 801f988:	4613      	mov	r3, r2
 801f98a:	011b      	lsls	r3, r3, #4
 801f98c:	1a9b      	subs	r3, r3, r2
 801f98e:	3350      	adds	r3, #80	; 0x50
 801f990:	4a21      	ldr	r2, [pc, #132]	; (801fa18 <basic_init+0x66c>)
 801f992:	fb82 1203 	smull	r1, r2, r2, r3
 801f996:	1192      	asrs	r2, r2, #6
 801f998:	17db      	asrs	r3, r3, #31
 801f99a:	1ad3      	subs	r3, r2, r3
 801f99c:	b29c      	uxth	r4, r3
 801f99e:	e021      	b.n	801f9e4 <basic_init+0x638>
 801f9a0:	2401      	movs	r4, #1
 801f9a2:	e01f      	b.n	801f9e4 <basic_init+0x638>
 801f9a4:	2000      	movs	r0, #0
 801f9a6:	f7fa fd33 	bl	801a410 <lv_disp_get_dpi>
 801f9aa:	4603      	mov	r3, r0
 801f9ac:	461a      	mov	r2, r3
 801f9ae:	4613      	mov	r3, r2
 801f9b0:	011b      	lsls	r3, r3, #4
 801f9b2:	1a9b      	subs	r3, r3, r2
 801f9b4:	005b      	lsls	r3, r3, #1
 801f9b6:	3350      	adds	r3, #80	; 0x50
 801f9b8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f9bc:	db11      	blt.n	801f9e2 <basic_init+0x636>
 801f9be:	2000      	movs	r0, #0
 801f9c0:	f7fa fd26 	bl	801a410 <lv_disp_get_dpi>
 801f9c4:	4603      	mov	r3, r0
 801f9c6:	461a      	mov	r2, r3
 801f9c8:	4613      	mov	r3, r2
 801f9ca:	011b      	lsls	r3, r3, #4
 801f9cc:	1a9b      	subs	r3, r3, r2
 801f9ce:	005b      	lsls	r3, r3, #1
 801f9d0:	3350      	adds	r3, #80	; 0x50
 801f9d2:	4a11      	ldr	r2, [pc, #68]	; (801fa18 <basic_init+0x66c>)
 801f9d4:	fb82 1203 	smull	r1, r2, r2, r3
 801f9d8:	1192      	asrs	r2, r2, #6
 801f9da:	17db      	asrs	r3, r3, #31
 801f9dc:	1ad3      	subs	r3, r2, r3
 801f9de:	b29c      	uxth	r4, r3
 801f9e0:	e000      	b.n	801f9e4 <basic_init+0x638>
 801f9e2:	2401      	movs	r4, #1
 801f9e4:	2000      	movs	r0, #0
 801f9e6:	f7fa fd13 	bl	801a410 <lv_disp_get_dpi>
 801f9ea:	4603      	mov	r3, r0
 801f9ec:	3328      	adds	r3, #40	; 0x28
 801f9ee:	005b      	lsls	r3, r3, #1
 801f9f0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801f9f4:	db12      	blt.n	801fa1c <basic_init+0x670>
 801f9f6:	2000      	movs	r0, #0
 801f9f8:	f7fa fd0a 	bl	801a410 <lv_disp_get_dpi>
 801f9fc:	4603      	mov	r3, r0
 801f9fe:	3328      	adds	r3, #40	; 0x28
 801fa00:	005b      	lsls	r3, r3, #1
 801fa02:	4a05      	ldr	r2, [pc, #20]	; (801fa18 <basic_init+0x66c>)
 801fa04:	fb82 1203 	smull	r1, r2, r2, r3
 801fa08:	1192      	asrs	r2, r2, #6
 801fa0a:	17db      	asrs	r3, r3, #31
 801fa0c:	1ad3      	subs	r3, r2, r3
 801fa0e:	b29b      	uxth	r3, r3
 801fa10:	e005      	b.n	801fa1e <basic_init+0x672>
 801fa12:	bf00      	nop
 801fa14:	20021498 	.word	0x20021498
 801fa18:	66666667 	.word	0x66666667
 801fa1c:	2301      	movs	r3, #1
 801fa1e:	4423      	add	r3, r4
 801fa20:	b29b      	uxth	r3, r3
 801fa22:	b21b      	sxth	r3, r3
 801fa24:	461a      	mov	r2, r3
 801fa26:	2100      	movs	r1, #0
 801fa28:	4628      	mov	r0, r5
 801fa2a:	f7ff f806 	bl	801ea3a <lv_style_set_pad_bottom>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
 801fa2e:	4bba      	ldr	r3, [pc, #744]	; (801fd18 <basic_init+0x96c>)
 801fa30:	681b      	ldr	r3, [r3, #0]
 801fa32:	1d1c      	adds	r4, r3, #4
 801fa34:	2000      	movs	r0, #0
 801fa36:	f7fa fd04 	bl	801a442 <lv_disp_get_size_category>
 801fa3a:	4603      	mov	r3, r0
 801fa3c:	2b01      	cmp	r3, #1
 801fa3e:	d81e      	bhi.n	801fa7e <basic_init+0x6d2>
 801fa40:	2000      	movs	r0, #0
 801fa42:	f7fa fce5 	bl	801a410 <lv_disp_get_dpi>
 801fa46:	4603      	mov	r3, r0
 801fa48:	461a      	mov	r2, r3
 801fa4a:	4613      	mov	r3, r2
 801fa4c:	011b      	lsls	r3, r3, #4
 801fa4e:	1a9b      	subs	r3, r3, r2
 801fa50:	3350      	adds	r3, #80	; 0x50
 801fa52:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801fa56:	db10      	blt.n	801fa7a <basic_init+0x6ce>
 801fa58:	2000      	movs	r0, #0
 801fa5a:	f7fa fcd9 	bl	801a410 <lv_disp_get_dpi>
 801fa5e:	4603      	mov	r3, r0
 801fa60:	461a      	mov	r2, r3
 801fa62:	4613      	mov	r3, r2
 801fa64:	011b      	lsls	r3, r3, #4
 801fa66:	1a9b      	subs	r3, r3, r2
 801fa68:	3350      	adds	r3, #80	; 0x50
 801fa6a:	4aac      	ldr	r2, [pc, #688]	; (801fd1c <basic_init+0x970>)
 801fa6c:	fb82 1203 	smull	r1, r2, r2, r3
 801fa70:	1192      	asrs	r2, r2, #6
 801fa72:	17db      	asrs	r3, r3, #31
 801fa74:	1ad3      	subs	r3, r2, r3
 801fa76:	b21b      	sxth	r3, r3
 801fa78:	e021      	b.n	801fabe <basic_init+0x712>
 801fa7a:	2301      	movs	r3, #1
 801fa7c:	e01f      	b.n	801fabe <basic_init+0x712>
 801fa7e:	2000      	movs	r0, #0
 801fa80:	f7fa fcc6 	bl	801a410 <lv_disp_get_dpi>
 801fa84:	4603      	mov	r3, r0
 801fa86:	461a      	mov	r2, r3
 801fa88:	4613      	mov	r3, r2
 801fa8a:	011b      	lsls	r3, r3, #4
 801fa8c:	1a9b      	subs	r3, r3, r2
 801fa8e:	005b      	lsls	r3, r3, #1
 801fa90:	3350      	adds	r3, #80	; 0x50
 801fa92:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801fa96:	db11      	blt.n	801fabc <basic_init+0x710>
 801fa98:	2000      	movs	r0, #0
 801fa9a:	f7fa fcb9 	bl	801a410 <lv_disp_get_dpi>
 801fa9e:	4603      	mov	r3, r0
 801faa0:	461a      	mov	r2, r3
 801faa2:	4613      	mov	r3, r2
 801faa4:	011b      	lsls	r3, r3, #4
 801faa6:	1a9b      	subs	r3, r3, r2
 801faa8:	005b      	lsls	r3, r3, #1
 801faaa:	3350      	adds	r3, #80	; 0x50
 801faac:	4a9b      	ldr	r2, [pc, #620]	; (801fd1c <basic_init+0x970>)
 801faae:	fb82 1203 	smull	r1, r2, r2, r3
 801fab2:	1192      	asrs	r2, r2, #6
 801fab4:	17db      	asrs	r3, r3, #31
 801fab6:	1ad3      	subs	r3, r2, r3
 801fab8:	b21b      	sxth	r3, r3
 801faba:	e000      	b.n	801fabe <basic_init+0x712>
 801fabc:	2301      	movs	r3, #1
 801fabe:	461a      	mov	r2, r3
 801fac0:	2100      	movs	r1, #0
 801fac2:	4620      	mov	r0, r4
 801fac4:	f7ff f804 	bl	801ead0 <lv_style_set_pad_inner>
    lv_style_set_transition_time(&styles->bg, LV_STATE_DEFAULT, TRANSITION_TIME);
 801fac8:	4b93      	ldr	r3, [pc, #588]	; (801fd18 <basic_init+0x96c>)
 801faca:	681b      	ldr	r3, [r3, #0]
 801facc:	3304      	adds	r3, #4
 801face:	2200      	movs	r2, #0
 801fad0:	2100      	movs	r1, #0
 801fad2:	4618      	mov	r0, r3
 801fad4:	f7ff fb5a 	bl	801f18c <lv_style_set_transition_time>
    lv_style_set_transition_prop_6(&styles->bg, LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR);
 801fad8:	4b8f      	ldr	r3, [pc, #572]	; (801fd18 <basic_init+0x96c>)
 801fada:	681b      	ldr	r3, [r3, #0]
 801fadc:	3304      	adds	r3, #4
 801fade:	2239      	movs	r2, #57	; 0x39
 801fae0:	2100      	movs	r1, #0
 801fae2:	4618      	mov	r0, r3
 801fae4:	f7ff fbcf 	bl	801f286 <lv_style_set_transition_prop_6>

    style_init_reset(&styles->bg_sec);
 801fae8:	4b8b      	ldr	r3, [pc, #556]	; (801fd18 <basic_init+0x96c>)
 801faea:	681b      	ldr	r3, [r3, #0]
 801faec:	330c      	adds	r3, #12
 801faee:	4618      	mov	r0, r3
 801faf0:	f005 fc9e 	bl	8025430 <style_init_reset>
    lv_style_copy(&styles->bg_sec, &styles->bg);
 801faf4:	4b88      	ldr	r3, [pc, #544]	; (801fd18 <basic_init+0x96c>)
 801faf6:	681b      	ldr	r3, [r3, #0]
 801faf8:	f103 020c 	add.w	r2, r3, #12
 801fafc:	4b86      	ldr	r3, [pc, #536]	; (801fd18 <basic_init+0x96c>)
 801fafe:	681b      	ldr	r3, [r3, #0]
 801fb00:	3304      	adds	r3, #4
 801fb02:	4619      	mov	r1, r3
 801fb04:	4610      	mov	r0, r2
 801fb06:	f7eb fad4 	bl	800b0b2 <lv_style_copy>
    lv_style_set_bg_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC);
 801fb0a:	4b83      	ldr	r3, [pc, #524]	; (801fd18 <basic_init+0x96c>)
 801fb0c:	681b      	ldr	r3, [r3, #0]
 801fb0e:	f103 040c 	add.w	r4, r3, #12
 801fb12:	4b83      	ldr	r3, [pc, #524]	; (801fd20 <basic_init+0x974>)
 801fb14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb16:	f003 0302 	and.w	r3, r3, #2
 801fb1a:	2b00      	cmp	r3, #0
 801fb1c:	d004      	beq.n	801fb28 <basic_init+0x77c>
 801fb1e:	4881      	ldr	r0, [pc, #516]	; (801fd24 <basic_init+0x978>)
 801fb20:	f7fe fec8 	bl	801e8b4 <lv_color_hex>
 801fb24:	4603      	mov	r3, r0
 801fb26:	e003      	b.n	801fb30 <basic_init+0x784>
 801fb28:	487f      	ldr	r0, [pc, #508]	; (801fd28 <basic_init+0x97c>)
 801fb2a:	f7fe fec3 	bl	801e8b4 <lv_color_hex>
 801fb2e:	4603      	mov	r3, r0
 801fb30:	461a      	mov	r2, r3
 801fb32:	2100      	movs	r1, #0
 801fb34:	4620      	mov	r0, r4
 801fb36:	f7ff f848 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_border_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_BORDER);
 801fb3a:	4b77      	ldr	r3, [pc, #476]	; (801fd18 <basic_init+0x96c>)
 801fb3c:	681b      	ldr	r3, [r3, #0]
 801fb3e:	f103 040c 	add.w	r4, r3, #12
 801fb42:	4b77      	ldr	r3, [pc, #476]	; (801fd20 <basic_init+0x974>)
 801fb44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb46:	f003 0302 	and.w	r3, r3, #2
 801fb4a:	2b00      	cmp	r3, #0
 801fb4c:	d004      	beq.n	801fb58 <basic_init+0x7ac>
 801fb4e:	4877      	ldr	r0, [pc, #476]	; (801fd2c <basic_init+0x980>)
 801fb50:	f7fe feb0 	bl	801e8b4 <lv_color_hex>
 801fb54:	4603      	mov	r3, r0
 801fb56:	e003      	b.n	801fb60 <basic_init+0x7b4>
 801fb58:	4875      	ldr	r0, [pc, #468]	; (801fd30 <basic_init+0x984>)
 801fb5a:	f7fe feab 	bl	801e8b4 <lv_color_hex>
 801fb5e:	4603      	mov	r3, r0
 801fb60:	461a      	mov	r2, r3
 801fb62:	2100      	movs	r1, #0
 801fb64:	4620      	mov	r0, r4
 801fb66:	f7ff f8aa 	bl	801ecbe <lv_style_set_border_color>
    lv_style_set_text_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 801fb6a:	4b6b      	ldr	r3, [pc, #428]	; (801fd18 <basic_init+0x96c>)
 801fb6c:	681b      	ldr	r3, [r3, #0]
 801fb6e:	f103 040c 	add.w	r4, r3, #12
 801fb72:	4b6b      	ldr	r3, [pc, #428]	; (801fd20 <basic_init+0x974>)
 801fb74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb76:	f003 0302 	and.w	r3, r3, #2
 801fb7a:	2b00      	cmp	r3, #0
 801fb7c:	d004      	beq.n	801fb88 <basic_init+0x7dc>
 801fb7e:	486d      	ldr	r0, [pc, #436]	; (801fd34 <basic_init+0x988>)
 801fb80:	f7fe fe98 	bl	801e8b4 <lv_color_hex>
 801fb84:	4603      	mov	r3, r0
 801fb86:	e003      	b.n	801fb90 <basic_init+0x7e4>
 801fb88:	486b      	ldr	r0, [pc, #428]	; (801fd38 <basic_init+0x98c>)
 801fb8a:	f7fe fe93 	bl	801e8b4 <lv_color_hex>
 801fb8e:	4603      	mov	r3, r0
 801fb90:	461a      	mov	r2, r3
 801fb92:	2100      	movs	r1, #0
 801fb94:	4620      	mov	r0, r4
 801fb96:	f7ff f9fb 	bl	801ef90 <lv_style_set_text_color>
    lv_style_set_value_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 801fb9a:	4b5f      	ldr	r3, [pc, #380]	; (801fd18 <basic_init+0x96c>)
 801fb9c:	681b      	ldr	r3, [r3, #0]
 801fb9e:	f103 040c 	add.w	r4, r3, #12
 801fba2:	4b5f      	ldr	r3, [pc, #380]	; (801fd20 <basic_init+0x974>)
 801fba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fba6:	f003 0302 	and.w	r3, r3, #2
 801fbaa:	2b00      	cmp	r3, #0
 801fbac:	d004      	beq.n	801fbb8 <basic_init+0x80c>
 801fbae:	4861      	ldr	r0, [pc, #388]	; (801fd34 <basic_init+0x988>)
 801fbb0:	f7fe fe80 	bl	801e8b4 <lv_color_hex>
 801fbb4:	4603      	mov	r3, r0
 801fbb6:	e003      	b.n	801fbc0 <basic_init+0x814>
 801fbb8:	485f      	ldr	r0, [pc, #380]	; (801fd38 <basic_init+0x98c>)
 801fbba:	f7fe fe7b 	bl	801e8b4 <lv_color_hex>
 801fbbe:	4603      	mov	r3, r0
 801fbc0:	461a      	mov	r2, r3
 801fbc2:	2100      	movs	r1, #0
 801fbc4:	4620      	mov	r0, r4
 801fbc6:	f7ff f999 	bl	801eefc <lv_style_set_value_color>
    lv_style_set_image_recolor(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 801fbca:	4b53      	ldr	r3, [pc, #332]	; (801fd18 <basic_init+0x96c>)
 801fbcc:	681b      	ldr	r3, [r3, #0]
 801fbce:	f103 040c 	add.w	r4, r3, #12
 801fbd2:	4b53      	ldr	r3, [pc, #332]	; (801fd20 <basic_init+0x974>)
 801fbd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fbd6:	f003 0302 	and.w	r3, r3, #2
 801fbda:	2b00      	cmp	r3, #0
 801fbdc:	d004      	beq.n	801fbe8 <basic_init+0x83c>
 801fbde:	4855      	ldr	r0, [pc, #340]	; (801fd34 <basic_init+0x988>)
 801fbe0:	f7fe fe68 	bl	801e8b4 <lv_color_hex>
 801fbe4:	4603      	mov	r3, r0
 801fbe6:	e003      	b.n	801fbf0 <basic_init+0x844>
 801fbe8:	4853      	ldr	r0, [pc, #332]	; (801fd38 <basic_init+0x98c>)
 801fbea:	f7fe fe63 	bl	801e8b4 <lv_color_hex>
 801fbee:	4603      	mov	r3, r0
 801fbf0:	461a      	mov	r2, r3
 801fbf2:	2100      	movs	r1, #0
 801fbf4:	4620      	mov	r0, r4
 801fbf6:	f7ff faaf 	bl	801f158 <lv_style_set_image_recolor>
    lv_style_set_line_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 801fbfa:	4b47      	ldr	r3, [pc, #284]	; (801fd18 <basic_init+0x96c>)
 801fbfc:	681b      	ldr	r3, [r3, #0]
 801fbfe:	f103 040c 	add.w	r4, r3, #12
 801fc02:	4b47      	ldr	r3, [pc, #284]	; (801fd20 <basic_init+0x974>)
 801fc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fc06:	f003 0302 	and.w	r3, r3, #2
 801fc0a:	2b00      	cmp	r3, #0
 801fc0c:	d004      	beq.n	801fc18 <basic_init+0x86c>
 801fc0e:	4849      	ldr	r0, [pc, #292]	; (801fd34 <basic_init+0x988>)
 801fc10:	f7fe fe50 	bl	801e8b4 <lv_color_hex>
 801fc14:	4603      	mov	r3, r0
 801fc16:	e003      	b.n	801fc20 <basic_init+0x874>
 801fc18:	4847      	ldr	r0, [pc, #284]	; (801fd38 <basic_init+0x98c>)
 801fc1a:	f7fe fe4b 	bl	801e8b4 <lv_color_hex>
 801fc1e:	4603      	mov	r3, r0
 801fc20:	461a      	mov	r2, r3
 801fc22:	2100      	movs	r1, #0
 801fc24:	4620      	mov	r0, r4
 801fc26:	f7ff fa7f 	bl	801f128 <lv_style_set_line_color>

    style_init_reset(&styles->bg_click);
 801fc2a:	4b3b      	ldr	r3, [pc, #236]	; (801fd18 <basic_init+0x96c>)
 801fc2c:	681b      	ldr	r3, [r3, #0]
 801fc2e:	3308      	adds	r3, #8
 801fc30:	4618      	mov	r0, r3
 801fc32:	f005 fbfd 	bl	8025430 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_PR);
 801fc36:	4b38      	ldr	r3, [pc, #224]	; (801fd18 <basic_init+0x96c>)
 801fc38:	681b      	ldr	r3, [r3, #0]
 801fc3a:	f103 0408 	add.w	r4, r3, #8
 801fc3e:	4b38      	ldr	r3, [pc, #224]	; (801fd20 <basic_init+0x974>)
 801fc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fc42:	f003 0302 	and.w	r3, r3, #2
 801fc46:	2b00      	cmp	r3, #0
 801fc48:	d004      	beq.n	801fc54 <basic_init+0x8a8>
 801fc4a:	483c      	ldr	r0, [pc, #240]	; (801fd3c <basic_init+0x990>)
 801fc4c:	f7fe fe32 	bl	801e8b4 <lv_color_hex>
 801fc50:	4603      	mov	r3, r0
 801fc52:	e003      	b.n	801fc5c <basic_init+0x8b0>
 801fc54:	483a      	ldr	r0, [pc, #232]	; (801fd40 <basic_init+0x994>)
 801fc56:	f7fe fe2d 	bl	801e8b4 <lv_color_hex>
 801fc5a:	4603      	mov	r3, r0
 801fc5c:	461a      	mov	r2, r3
 801fc5e:	2110      	movs	r1, #16
 801fc60:	4620      	mov	r0, r4
 801fc62:	f7fe ffb2 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_CHK);
 801fc66:	4b2c      	ldr	r3, [pc, #176]	; (801fd18 <basic_init+0x96c>)
 801fc68:	681b      	ldr	r3, [r3, #0]
 801fc6a:	f103 0008 	add.w	r0, r3, #8
 801fc6e:	4b2c      	ldr	r3, [pc, #176]	; (801fd20 <basic_init+0x974>)
 801fc70:	68da      	ldr	r2, [r3, #12]
 801fc72:	2101      	movs	r1, #1
 801fc74:	f7fe ffa9 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_PR_CHK);
 801fc78:	4b27      	ldr	r3, [pc, #156]	; (801fd18 <basic_init+0x96c>)
 801fc7a:	681b      	ldr	r3, [r3, #0]
 801fc7c:	f103 0408 	add.w	r4, r3, #8
 801fc80:	4b27      	ldr	r3, [pc, #156]	; (801fd20 <basic_init+0x974>)
 801fc82:	2133      	movs	r1, #51	; 0x33
 801fc84:	68d8      	ldr	r0, [r3, #12]
 801fc86:	f7fb ff41 	bl	801bb0c <lv_color_darken>
 801fc8a:	4603      	mov	r3, r0
 801fc8c:	461a      	mov	r2, r3
 801fc8e:	2111      	movs	r1, #17
 801fc90:	4620      	mov	r0, r4
 801fc92:	f7fe ff9a 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_DIS);
 801fc96:	4b20      	ldr	r3, [pc, #128]	; (801fd18 <basic_init+0x96c>)
 801fc98:	681b      	ldr	r3, [r3, #0]
 801fc9a:	f103 0408 	add.w	r4, r3, #8
 801fc9e:	4b20      	ldr	r3, [pc, #128]	; (801fd20 <basic_init+0x974>)
 801fca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fca2:	f003 0302 	and.w	r3, r3, #2
 801fca6:	2b00      	cmp	r3, #0
 801fca8:	d005      	beq.n	801fcb6 <basic_init+0x90a>
 801fcaa:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fcae:	f7fe fe01 	bl	801e8b4 <lv_color_hex>
 801fcb2:	4603      	mov	r3, r0
 801fcb4:	e003      	b.n	801fcbe <basic_init+0x912>
 801fcb6:	4823      	ldr	r0, [pc, #140]	; (801fd44 <basic_init+0x998>)
 801fcb8:	f7fe fdfc 	bl	801e8b4 <lv_color_hex>
 801fcbc:	4603      	mov	r3, r0
 801fcbe:	461a      	mov	r2, r3
 801fcc0:	2120      	movs	r1, #32
 801fcc2:	4620      	mov	r0, r4
 801fcc4:	f7fe ff81 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_border_width(&styles->bg_click, LV_STATE_CHECKED, 0);
 801fcc8:	4b13      	ldr	r3, [pc, #76]	; (801fd18 <basic_init+0x96c>)
 801fcca:	681b      	ldr	r3, [r3, #0]
 801fccc:	3308      	adds	r3, #8
 801fcce:	2200      	movs	r2, #0
 801fcd0:	2101      	movs	r1, #1
 801fcd2:	4618      	mov	r0, r3
 801fcd4:	f7fe ffa8 	bl	801ec28 <lv_style_set_border_width>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_FOCUSED | LV_STATE_PRESSED, lv_color_darken(theme.color_primary,
 801fcd8:	4b0f      	ldr	r3, [pc, #60]	; (801fd18 <basic_init+0x96c>)
 801fcda:	681b      	ldr	r3, [r3, #0]
 801fcdc:	f103 0408 	add.w	r4, r3, #8
 801fce0:	4b0f      	ldr	r3, [pc, #60]	; (801fd20 <basic_init+0x974>)
 801fce2:	2133      	movs	r1, #51	; 0x33
 801fce4:	68d8      	ldr	r0, [r3, #12]
 801fce6:	f7fb ff11 	bl	801bb0c <lv_color_darken>
 801fcea:	4603      	mov	r3, r0
 801fcec:	461a      	mov	r2, r3
 801fcee:	2112      	movs	r1, #18
 801fcf0:	4620      	mov	r0, r4
 801fcf2:	f7fe ffe4 	bl	801ecbe <lv_style_set_border_color>
                                                                                                      LV_OPA_20));
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
 801fcf6:	4b08      	ldr	r3, [pc, #32]	; (801fd18 <basic_init+0x96c>)
 801fcf8:	681b      	ldr	r3, [r3, #0]
 801fcfa:	f103 0408 	add.w	r4, r3, #8
 801fcfe:	4b08      	ldr	r3, [pc, #32]	; (801fd20 <basic_init+0x974>)
 801fd00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fd02:	f003 0302 	and.w	r3, r3, #2
 801fd06:	2b00      	cmp	r3, #0
 801fd08:	d01e      	beq.n	801fd48 <basic_init+0x99c>
 801fd0a:	f640 40cc 	movw	r0, #3276	; 0xccc
 801fd0e:	f7fe fde5 	bl	801e8dc <lv_color_hex3>
 801fd12:	4603      	mov	r3, r0
 801fd14:	e01c      	b.n	801fd50 <basic_init+0x9a4>
 801fd16:	bf00      	nop
 801fd18:	20021498 	.word	0x20021498
 801fd1c:	66666667 	.word	0x66666667
 801fd20:	2002146c 	.word	0x2002146c
 801fd24:	00d4d7d9 	.word	0x00d4d7d9
 801fd28:	0045494d 	.word	0x0045494d
 801fd2c:	00dfe7ed 	.word	0x00dfe7ed
 801fd30:	00404040 	.word	0x00404040
 801fd34:	0031404f 	.word	0x0031404f
 801fd38:	00a5a8ad 	.word	0x00a5a8ad
 801fd3c:	00eeeeee 	.word	0x00eeeeee
 801fd40:	00494f57 	.word	0x00494f57
 801fd44:	00586273 	.word	0x00586273
 801fd48:	48c1      	ldr	r0, [pc, #772]	; (8020050 <basic_init+0xca4>)
 801fd4a:	f7fe fdb3 	bl	801e8b4 <lv_color_hex>
 801fd4e:	4603      	mov	r3, r0
 801fd50:	461a      	mov	r2, r3
 801fd52:	2110      	movs	r1, #16
 801fd54:	4620      	mov	r0, r4
 801fd56:	f7fe ffb2 	bl	801ecbe <lv_style_set_border_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
 801fd5a:	4bbe      	ldr	r3, [pc, #760]	; (8020054 <basic_init+0xca8>)
 801fd5c:	681b      	ldr	r3, [r3, #0]
 801fd5e:	f103 0408 	add.w	r4, r3, #8
 801fd62:	4bbd      	ldr	r3, [pc, #756]	; (8020058 <basic_init+0xcac>)
 801fd64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fd66:	f003 0302 	and.w	r3, r3, #2
 801fd6a:	2b00      	cmp	r3, #0
 801fd6c:	d004      	beq.n	801fd78 <basic_init+0x9cc>
 801fd6e:	48bb      	ldr	r0, [pc, #748]	; (802005c <basic_init+0xcb0>)
 801fd70:	f7fe fda0 	bl	801e8b4 <lv_color_hex>
 801fd74:	4603      	mov	r3, r0
 801fd76:	e003      	b.n	801fd80 <basic_init+0x9d4>
 801fd78:	48b5      	ldr	r0, [pc, #724]	; (8020050 <basic_init+0xca4>)
 801fd7a:	f7fe fd9b 	bl	801e8b4 <lv_color_hex>
 801fd7e:	4603      	mov	r3, r0
 801fd80:	461a      	mov	r2, r3
 801fd82:	2101      	movs	r1, #1
 801fd84:	4620      	mov	r0, r4
 801fd86:	f7fe ff9a 	bl	801ecbe <lv_style_set_border_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
 801fd8a:	4bb2      	ldr	r3, [pc, #712]	; (8020054 <basic_init+0xca8>)
 801fd8c:	681b      	ldr	r3, [r3, #0]
 801fd8e:	f103 0408 	add.w	r4, r3, #8
 801fd92:	4bb1      	ldr	r3, [pc, #708]	; (8020058 <basic_init+0xcac>)
 801fd94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fd96:	f003 0302 	and.w	r3, r3, #2
 801fd9a:	2b00      	cmp	r3, #0
 801fd9c:	d004      	beq.n	801fda8 <basic_init+0x9fc>
 801fd9e:	48af      	ldr	r0, [pc, #700]	; (802005c <basic_init+0xcb0>)
 801fda0:	f7fe fd88 	bl	801e8b4 <lv_color_hex>
 801fda4:	4603      	mov	r3, r0
 801fda6:	e003      	b.n	801fdb0 <basic_init+0xa04>
 801fda8:	48a9      	ldr	r0, [pc, #676]	; (8020050 <basic_init+0xca4>)
 801fdaa:	f7fe fd83 	bl	801e8b4 <lv_color_hex>
 801fdae:	4603      	mov	r3, r0
 801fdb0:	461a      	mov	r2, r3
 801fdb2:	2111      	movs	r1, #17
 801fdb4:	4620      	mov	r0, r4
 801fdb6:	f7fe ff82 	bl	801ecbe <lv_style_set_border_color>
    lv_style_set_border_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_BORDER_DIS);
 801fdba:	4ba6      	ldr	r3, [pc, #664]	; (8020054 <basic_init+0xca8>)
 801fdbc:	681b      	ldr	r3, [r3, #0]
 801fdbe:	f103 0408 	add.w	r4, r3, #8
 801fdc2:	4ba5      	ldr	r3, [pc, #660]	; (8020058 <basic_init+0xcac>)
 801fdc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fdc6:	f003 0302 	and.w	r3, r3, #2
 801fdca:	2b00      	cmp	r3, #0
 801fdcc:	d004      	beq.n	801fdd8 <basic_init+0xa2c>
 801fdce:	48a4      	ldr	r0, [pc, #656]	; (8020060 <basic_init+0xcb4>)
 801fdd0:	f7fe fd70 	bl	801e8b4 <lv_color_hex>
 801fdd4:	4603      	mov	r3, r0
 801fdd6:	e003      	b.n	801fde0 <basic_init+0xa34>
 801fdd8:	489d      	ldr	r0, [pc, #628]	; (8020050 <basic_init+0xca4>)
 801fdda:	f7fe fd6b 	bl	801e8b4 <lv_color_hex>
 801fdde:	4603      	mov	r3, r0
 801fde0:	461a      	mov	r2, r3
 801fde2:	2120      	movs	r1, #32
 801fde4:	4620      	mov	r0, r4
 801fde6:	f7fe ff6a 	bl	801ecbe <lv_style_set_border_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
 801fdea:	4b9a      	ldr	r3, [pc, #616]	; (8020054 <basic_init+0xca8>)
 801fdec:	681b      	ldr	r3, [r3, #0]
 801fdee:	f103 0408 	add.w	r4, r3, #8
 801fdf2:	4b99      	ldr	r3, [pc, #612]	; (8020058 <basic_init+0xcac>)
 801fdf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fdf6:	f003 0302 	and.w	r3, r3, #2
 801fdfa:	2b00      	cmp	r3, #0
 801fdfc:	d004      	beq.n	801fe08 <basic_init+0xa5c>
 801fdfe:	4897      	ldr	r0, [pc, #604]	; (802005c <basic_init+0xcb0>)
 801fe00:	f7fe fd58 	bl	801e8b4 <lv_color_hex>
 801fe04:	4603      	mov	r3, r0
 801fe06:	e004      	b.n	801fe12 <basic_init+0xa66>
 801fe08:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fe0c:	f7fe fd52 	bl	801e8b4 <lv_color_hex>
 801fe10:	4603      	mov	r3, r0
 801fe12:	461a      	mov	r2, r3
 801fe14:	2110      	movs	r1, #16
 801fe16:	4620      	mov	r0, r4
 801fe18:	f7ff f8ba 	bl	801ef90 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
 801fe1c:	4b8d      	ldr	r3, [pc, #564]	; (8020054 <basic_init+0xca8>)
 801fe1e:	681b      	ldr	r3, [r3, #0]
 801fe20:	f103 0408 	add.w	r4, r3, #8
 801fe24:	4b8c      	ldr	r3, [pc, #560]	; (8020058 <basic_init+0xcac>)
 801fe26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fe28:	f003 0302 	and.w	r3, r3, #2
 801fe2c:	2b00      	cmp	r3, #0
 801fe2e:	d005      	beq.n	801fe3c <basic_init+0xa90>
 801fe30:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fe34:	f7fe fd3e 	bl	801e8b4 <lv_color_hex>
 801fe38:	4603      	mov	r3, r0
 801fe3a:	e004      	b.n	801fe46 <basic_init+0xa9a>
 801fe3c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fe40:	f7fe fd38 	bl	801e8b4 <lv_color_hex>
 801fe44:	4603      	mov	r3, r0
 801fe46:	461a      	mov	r2, r3
 801fe48:	2101      	movs	r1, #1
 801fe4a:	4620      	mov	r0, r4
 801fe4c:	f7ff f8a0 	bl	801ef90 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
 801fe50:	4b80      	ldr	r3, [pc, #512]	; (8020054 <basic_init+0xca8>)
 801fe52:	681b      	ldr	r3, [r3, #0]
 801fe54:	f103 0408 	add.w	r4, r3, #8
 801fe58:	4b7f      	ldr	r3, [pc, #508]	; (8020058 <basic_init+0xcac>)
 801fe5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fe5c:	f003 0302 	and.w	r3, r3, #2
 801fe60:	2b00      	cmp	r3, #0
 801fe62:	d005      	beq.n	801fe70 <basic_init+0xac4>
 801fe64:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fe68:	f7fe fd24 	bl	801e8b4 <lv_color_hex>
 801fe6c:	4603      	mov	r3, r0
 801fe6e:	e004      	b.n	801fe7a <basic_init+0xace>
 801fe70:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801fe74:	f7fe fd1e 	bl	801e8b4 <lv_color_hex>
 801fe78:	4603      	mov	r3, r0
 801fe7a:	461a      	mov	r2, r3
 801fe7c:	2111      	movs	r1, #17
 801fe7e:	4620      	mov	r0, r4
 801fe80:	f7ff f886 	bl	801ef90 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 801fe84:	4b73      	ldr	r3, [pc, #460]	; (8020054 <basic_init+0xca8>)
 801fe86:	681b      	ldr	r3, [r3, #0]
 801fe88:	f103 0408 	add.w	r4, r3, #8
 801fe8c:	4b72      	ldr	r3, [pc, #456]	; (8020058 <basic_init+0xcac>)
 801fe8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fe90:	f003 0302 	and.w	r3, r3, #2
 801fe94:	2b00      	cmp	r3, #0
 801fe96:	d005      	beq.n	801fea4 <basic_init+0xaf8>
 801fe98:	f640 20aa 	movw	r0, #2730	; 0xaaa
 801fe9c:	f7fe fd1e 	bl	801e8dc <lv_color_hex3>
 801fea0:	4603      	mov	r3, r0
 801fea2:	e004      	b.n	801feae <basic_init+0xb02>
 801fea4:	f640 1099 	movw	r0, #2457	; 0x999
 801fea8:	f7fe fd18 	bl	801e8dc <lv_color_hex3>
 801feac:	4603      	mov	r3, r0
 801feae:	461a      	mov	r2, r3
 801feb0:	2120      	movs	r1, #32
 801feb2:	4620      	mov	r0, r4
 801feb4:	f7ff f86c 	bl	801ef90 <lv_style_set_text_color>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
 801feb8:	4b66      	ldr	r3, [pc, #408]	; (8020054 <basic_init+0xca8>)
 801feba:	681b      	ldr	r3, [r3, #0]
 801febc:	f103 0408 	add.w	r4, r3, #8
 801fec0:	4b65      	ldr	r3, [pc, #404]	; (8020058 <basic_init+0xcac>)
 801fec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fec4:	f003 0302 	and.w	r3, r3, #2
 801fec8:	2b00      	cmp	r3, #0
 801feca:	d004      	beq.n	801fed6 <basic_init+0xb2a>
 801fecc:	4863      	ldr	r0, [pc, #396]	; (802005c <basic_init+0xcb0>)
 801fece:	f7fe fcf1 	bl	801e8b4 <lv_color_hex>
 801fed2:	4603      	mov	r3, r0
 801fed4:	e004      	b.n	801fee0 <basic_init+0xb34>
 801fed6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801feda:	f7fe fceb 	bl	801e8b4 <lv_color_hex>
 801fede:	4603      	mov	r3, r0
 801fee0:	461a      	mov	r2, r3
 801fee2:	2110      	movs	r1, #16
 801fee4:	4620      	mov	r0, r4
 801fee6:	f7ff f937 	bl	801f158 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
 801feea:	4b5a      	ldr	r3, [pc, #360]	; (8020054 <basic_init+0xca8>)
 801feec:	681b      	ldr	r3, [r3, #0]
 801feee:	f103 0408 	add.w	r4, r3, #8
 801fef2:	4b59      	ldr	r3, [pc, #356]	; (8020058 <basic_init+0xcac>)
 801fef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fef6:	f003 0302 	and.w	r3, r3, #2
 801fefa:	2b00      	cmp	r3, #0
 801fefc:	d005      	beq.n	801ff0a <basic_init+0xb5e>
 801fefe:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ff02:	f7fe fcd7 	bl	801e8b4 <lv_color_hex>
 801ff06:	4603      	mov	r3, r0
 801ff08:	e004      	b.n	801ff14 <basic_init+0xb68>
 801ff0a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ff0e:	f7fe fcd1 	bl	801e8b4 <lv_color_hex>
 801ff12:	4603      	mov	r3, r0
 801ff14:	461a      	mov	r2, r3
 801ff16:	2101      	movs	r1, #1
 801ff18:	4620      	mov	r0, r4
 801ff1a:	f7ff f91d 	bl	801f158 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
 801ff1e:	4b4d      	ldr	r3, [pc, #308]	; (8020054 <basic_init+0xca8>)
 801ff20:	681b      	ldr	r3, [r3, #0]
 801ff22:	f103 0408 	add.w	r4, r3, #8
 801ff26:	4b4c      	ldr	r3, [pc, #304]	; (8020058 <basic_init+0xcac>)
 801ff28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ff2a:	f003 0302 	and.w	r3, r3, #2
 801ff2e:	2b00      	cmp	r3, #0
 801ff30:	d005      	beq.n	801ff3e <basic_init+0xb92>
 801ff32:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ff36:	f7fe fcbd 	bl	801e8b4 <lv_color_hex>
 801ff3a:	4603      	mov	r3, r0
 801ff3c:	e004      	b.n	801ff48 <basic_init+0xb9c>
 801ff3e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ff42:	f7fe fcb7 	bl	801e8b4 <lv_color_hex>
 801ff46:	4603      	mov	r3, r0
 801ff48:	461a      	mov	r2, r3
 801ff4a:	2111      	movs	r1, #17
 801ff4c:	4620      	mov	r0, r4
 801ff4e:	f7ff f903 	bl	801f158 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 801ff52:	4b40      	ldr	r3, [pc, #256]	; (8020054 <basic_init+0xca8>)
 801ff54:	681b      	ldr	r3, [r3, #0]
 801ff56:	f103 0408 	add.w	r4, r3, #8
 801ff5a:	4b3f      	ldr	r3, [pc, #252]	; (8020058 <basic_init+0xcac>)
 801ff5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ff5e:	f003 0302 	and.w	r3, r3, #2
 801ff62:	2b00      	cmp	r3, #0
 801ff64:	d005      	beq.n	801ff72 <basic_init+0xbc6>
 801ff66:	f640 20aa 	movw	r0, #2730	; 0xaaa
 801ff6a:	f7fe fcb7 	bl	801e8dc <lv_color_hex3>
 801ff6e:	4603      	mov	r3, r0
 801ff70:	e004      	b.n	801ff7c <basic_init+0xbd0>
 801ff72:	f640 1099 	movw	r0, #2457	; 0x999
 801ff76:	f7fe fcb1 	bl	801e8dc <lv_color_hex3>
 801ff7a:	4603      	mov	r3, r0
 801ff7c:	461a      	mov	r2, r3
 801ff7e:	2120      	movs	r1, #32
 801ff80:	4620      	mov	r0, r4
 801ff82:	f7ff f8e9 	bl	801f158 <lv_style_set_image_recolor>
    lv_style_set_transition_prop_5(&styles->bg_click, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
 801ff86:	4b33      	ldr	r3, [pc, #204]	; (8020054 <basic_init+0xca8>)
 801ff88:	681b      	ldr	r3, [r3, #0]
 801ff8a:	3308      	adds	r3, #8
 801ff8c:	2229      	movs	r2, #41	; 0x29
 801ff8e:	2100      	movs	r1, #0
 801ff90:	4618      	mov	r0, r3
 801ff92:	f7ff f95f 	bl	801f254 <lv_style_set_transition_prop_5>

    style_init_reset(&styles->btn);
 801ff96:	4b2f      	ldr	r3, [pc, #188]	; (8020054 <basic_init+0xca8>)
 801ff98:	681b      	ldr	r3, [r3, #0]
 801ff9a:	3310      	adds	r3, #16
 801ff9c:	4618      	mov	r0, r3
 801ff9e:	f005 fa47 	bl	8025430 <style_init_reset>
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 801ffa2:	4b2c      	ldr	r3, [pc, #176]	; (8020054 <basic_init+0xca8>)
 801ffa4:	681b      	ldr	r3, [r3, #0]
 801ffa6:	3310      	adds	r3, #16
 801ffa8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801ffac:	2100      	movs	r1, #0
 801ffae:	4618      	mov	r0, r3
 801ffb0:	f7fe fcc6 	bl	801e940 <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_COVER);
 801ffb4:	4b27      	ldr	r3, [pc, #156]	; (8020054 <basic_init+0xca8>)
 801ffb6:	681b      	ldr	r3, [r3, #0]
 801ffb8:	3310      	adds	r3, #16
 801ffba:	22ff      	movs	r2, #255	; 0xff
 801ffbc:	2100      	movs	r1, #0
 801ffbe:	4618      	mov	r0, r3
 801ffc0:	f7fe fe1a 	bl	801ebf8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN);
 801ffc4:	4b23      	ldr	r3, [pc, #140]	; (8020054 <basic_init+0xca8>)
 801ffc6:	681b      	ldr	r3, [r3, #0]
 801ffc8:	f103 0410 	add.w	r4, r3, #16
 801ffcc:	4b22      	ldr	r3, [pc, #136]	; (8020058 <basic_init+0xcac>)
 801ffce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ffd0:	f003 0302 	and.w	r3, r3, #2
 801ffd4:	2b00      	cmp	r3, #0
 801ffd6:	d005      	beq.n	801ffe4 <basic_init+0xc38>
 801ffd8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ffdc:	f7fe fc6a 	bl	801e8b4 <lv_color_hex>
 801ffe0:	4603      	mov	r3, r0
 801ffe2:	e003      	b.n	801ffec <basic_init+0xc40>
 801ffe4:	481f      	ldr	r0, [pc, #124]	; (8020064 <basic_init+0xcb8>)
 801ffe6:	f7fe fc65 	bl	801e8b4 <lv_color_hex>
 801ffea:	4603      	mov	r3, r0
 801ffec:	461a      	mov	r2, r3
 801ffee:	2100      	movs	r1, #0
 801fff0:	4620      	mov	r0, r4
 801fff2:	f7fe fdea 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
 801fff6:	4b17      	ldr	r3, [pc, #92]	; (8020054 <basic_init+0xca8>)
 801fff8:	681b      	ldr	r3, [r3, #0]
 801fffa:	f103 0410 	add.w	r4, r3, #16
 801fffe:	4b16      	ldr	r3, [pc, #88]	; (8020058 <basic_init+0xcac>)
 8020000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020002:	f003 0302 	and.w	r3, r3, #2
 8020006:	2b00      	cmp	r3, #0
 8020008:	d016      	beq.n	8020038 <basic_init+0xc8c>
 802000a:	4b13      	ldr	r3, [pc, #76]	; (8020058 <basic_init+0xcac>)
 802000c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802000e:	f003 0302 	and.w	r3, r3, #2
 8020012:	2b00      	cmp	r3, #0
 8020014:	d005      	beq.n	8020022 <basic_init+0xc76>
 8020016:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 802001a:	f7fe fc4b 	bl	801e8b4 <lv_color_hex>
 802001e:	4601      	mov	r1, r0
 8020020:	e003      	b.n	802002a <basic_init+0xc7e>
 8020022:	4810      	ldr	r0, [pc, #64]	; (8020064 <basic_init+0xcb8>)
 8020024:	f7fe fc46 	bl	801e8b4 <lv_color_hex>
 8020028:	4601      	mov	r1, r0
 802002a:	4b0b      	ldr	r3, [pc, #44]	; (8020058 <basic_init+0xcac>)
 802002c:	2233      	movs	r2, #51	; 0x33
 802002e:	68d8      	ldr	r0, [r3, #12]
 8020030:	f7fe fbd2 	bl	801e7d8 <lv_color_mix>
 8020034:	4603      	mov	r3, r0
 8020036:	e021      	b.n	802007c <basic_init+0xcd0>
 8020038:	4b07      	ldr	r3, [pc, #28]	; (8020058 <basic_init+0xcac>)
 802003a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802003c:	f003 0302 	and.w	r3, r3, #2
 8020040:	2b00      	cmp	r3, #0
 8020042:	d011      	beq.n	8020068 <basic_init+0xcbc>
 8020044:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8020048:	f7fe fc34 	bl	801e8b4 <lv_color_hex>
 802004c:	4601      	mov	r1, r0
 802004e:	e00f      	b.n	8020070 <basic_init+0xcc4>
 8020050:	005f656e 	.word	0x005f656e
 8020054:	20021498 	.word	0x20021498
 8020058:	2002146c 	.word	0x2002146c
 802005c:	003b3e42 	.word	0x003b3e42
 8020060:	00d6dde3 	.word	0x00d6dde3
 8020064:	00586273 	.word	0x00586273
 8020068:	48c4      	ldr	r0, [pc, #784]	; (802037c <basic_init+0xfd0>)
 802006a:	f7fe fc23 	bl	801e8b4 <lv_color_hex>
 802006e:	4601      	mov	r1, r0
 8020070:	4bc3      	ldr	r3, [pc, #780]	; (8020380 <basic_init+0xfd4>)
 8020072:	224c      	movs	r2, #76	; 0x4c
 8020074:	68d8      	ldr	r0, [r3, #12]
 8020076:	f7fe fbaf 	bl	801e7d8 <lv_color_mix>
 802007a:	4603      	mov	r3, r0
 802007c:	461a      	mov	r2, r3
 802007e:	2110      	movs	r1, #16
 8020080:	4620      	mov	r0, r4
 8020082:	f7fe fda2 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, COLOR_BTN_CHK);
 8020086:	4bbf      	ldr	r3, [pc, #764]	; (8020384 <basic_init+0xfd8>)
 8020088:	681b      	ldr	r3, [r3, #0]
 802008a:	f103 0010 	add.w	r0, r3, #16
 802008e:	4bbc      	ldr	r3, [pc, #752]	; (8020380 <basic_init+0xfd4>)
 8020090:	68da      	ldr	r2, [r3, #12]
 8020092:	2101      	movs	r1, #1
 8020094:	f7fe fd99 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BTN_CHK_PR);
 8020098:	4bba      	ldr	r3, [pc, #744]	; (8020384 <basic_init+0xfd8>)
 802009a:	681b      	ldr	r3, [r3, #0]
 802009c:	f103 0410 	add.w	r4, r3, #16
 80200a0:	4bb7      	ldr	r3, [pc, #732]	; (8020380 <basic_init+0xfd4>)
 80200a2:	214c      	movs	r1, #76	; 0x4c
 80200a4:	68d8      	ldr	r0, [r3, #12]
 80200a6:	f7fb fd31 	bl	801bb0c <lv_color_darken>
 80200aa:	4603      	mov	r3, r0
 80200ac:	461a      	mov	r2, r3
 80200ae:	2111      	movs	r1, #17
 80200b0:	4620      	mov	r0, r4
 80200b2:	f7fe fd8a 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN);
 80200b6:	4bb3      	ldr	r3, [pc, #716]	; (8020384 <basic_init+0xfd8>)
 80200b8:	681b      	ldr	r3, [r3, #0]
 80200ba:	f103 0410 	add.w	r4, r3, #16
 80200be:	4bb0      	ldr	r3, [pc, #704]	; (8020380 <basic_init+0xfd4>)
 80200c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80200c2:	f003 0302 	and.w	r3, r3, #2
 80200c6:	2b00      	cmp	r3, #0
 80200c8:	d005      	beq.n	80200d6 <basic_init+0xd2a>
 80200ca:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80200ce:	f7fe fbf1 	bl	801e8b4 <lv_color_hex>
 80200d2:	4603      	mov	r3, r0
 80200d4:	e003      	b.n	80200de <basic_init+0xd32>
 80200d6:	48a9      	ldr	r0, [pc, #676]	; (802037c <basic_init+0xfd0>)
 80200d8:	f7fe fbec 	bl	801e8b4 <lv_color_hex>
 80200dc:	4603      	mov	r3, r0
 80200de:	461a      	mov	r2, r3
 80200e0:	2120      	movs	r1, #32
 80200e2:	4620      	mov	r0, r4
 80200e4:	f7fe fd71 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED | LV_STATE_CHECKED, COLOR_BTN_DIS);
 80200e8:	4ba6      	ldr	r3, [pc, #664]	; (8020384 <basic_init+0xfd8>)
 80200ea:	681b      	ldr	r3, [r3, #0]
 80200ec:	f103 0410 	add.w	r4, r3, #16
 80200f0:	4ba3      	ldr	r3, [pc, #652]	; (8020380 <basic_init+0xfd4>)
 80200f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80200f4:	f003 0302 	and.w	r3, r3, #2
 80200f8:	2b00      	cmp	r3, #0
 80200fa:	d005      	beq.n	8020108 <basic_init+0xd5c>
 80200fc:	f640 40cc 	movw	r0, #3276	; 0xccc
 8020100:	f7fe fbec 	bl	801e8dc <lv_color_hex3>
 8020104:	4603      	mov	r3, r0
 8020106:	e004      	b.n	8020112 <basic_init+0xd66>
 8020108:	f640 0088 	movw	r0, #2184	; 0x888
 802010c:	f7fe fbe6 	bl	801e8dc <lv_color_hex3>
 8020110:	4603      	mov	r3, r0
 8020112:	461a      	mov	r2, r3
 8020114:	2121      	movs	r1, #33	; 0x21
 8020116:	4620      	mov	r0, r4
 8020118:	f7fe fd57 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN_BORDER);
 802011c:	4b99      	ldr	r3, [pc, #612]	; (8020384 <basic_init+0xfd8>)
 802011e:	681b      	ldr	r3, [r3, #0]
 8020120:	f103 0010 	add.w	r0, r3, #16
 8020124:	4b96      	ldr	r3, [pc, #600]	; (8020380 <basic_init+0xfd4>)
 8020126:	68da      	ldr	r2, [r3, #12]
 8020128:	2100      	movs	r1, #0
 802012a:	f7fe fdc8 	bl	801ecbe <lv_style_set_border_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_BORDER_PR);
 802012e:	4b95      	ldr	r3, [pc, #596]	; (8020384 <basic_init+0xfd8>)
 8020130:	681b      	ldr	r3, [r3, #0]
 8020132:	f103 0010 	add.w	r0, r3, #16
 8020136:	4b92      	ldr	r3, [pc, #584]	; (8020380 <basic_init+0xfd4>)
 8020138:	68da      	ldr	r2, [r3, #12]
 802013a:	2110      	movs	r1, #16
 802013c:	f7fe fdbf 	bl	801ecbe <lv_style_set_border_color>
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
 8020140:	4b90      	ldr	r3, [pc, #576]	; (8020384 <basic_init+0xfd8>)
 8020142:	681b      	ldr	r3, [r3, #0]
 8020144:	f103 0410 	add.w	r4, r3, #16
 8020148:	4b8d      	ldr	r3, [pc, #564]	; (8020380 <basic_init+0xfd4>)
 802014a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802014c:	f003 0302 	and.w	r3, r3, #2
 8020150:	2b00      	cmp	r3, #0
 8020152:	d005      	beq.n	8020160 <basic_init+0xdb4>
 8020154:	f640 0088 	movw	r0, #2184	; 0x888
 8020158:	f7fe fbc0 	bl	801e8dc <lv_color_hex3>
 802015c:	4603      	mov	r3, r0
 802015e:	e003      	b.n	8020168 <basic_init+0xdbc>
 8020160:	4889      	ldr	r0, [pc, #548]	; (8020388 <basic_init+0xfdc>)
 8020162:	f7fe fba7 	bl	801e8b4 <lv_color_hex>
 8020166:	4603      	mov	r3, r0
 8020168:	461a      	mov	r2, r3
 802016a:	2120      	movs	r1, #32
 802016c:	4620      	mov	r0, r4
 802016e:	f7fe fda6 	bl	801ecbe <lv_style_set_border_color>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
 8020172:	4b84      	ldr	r3, [pc, #528]	; (8020384 <basic_init+0xfd8>)
 8020174:	681b      	ldr	r3, [r3, #0]
 8020176:	f103 0410 	add.w	r4, r3, #16
 802017a:	2000      	movs	r0, #0
 802017c:	f7fa f948 	bl	801a410 <lv_disp_get_dpi>
 8020180:	4603      	mov	r3, r0
 8020182:	3328      	adds	r3, #40	; 0x28
 8020184:	005b      	lsls	r3, r3, #1
 8020186:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802018a:	db0d      	blt.n	80201a8 <basic_init+0xdfc>
 802018c:	2000      	movs	r0, #0
 802018e:	f7fa f93f 	bl	801a410 <lv_disp_get_dpi>
 8020192:	4603      	mov	r3, r0
 8020194:	3328      	adds	r3, #40	; 0x28
 8020196:	005b      	lsls	r3, r3, #1
 8020198:	4a7c      	ldr	r2, [pc, #496]	; (802038c <basic_init+0xfe0>)
 802019a:	fb82 1203 	smull	r1, r2, r2, r3
 802019e:	1192      	asrs	r2, r2, #6
 80201a0:	17db      	asrs	r3, r3, #31
 80201a2:	1ad3      	subs	r3, r2, r3
 80201a4:	b21b      	sxth	r3, r3
 80201a6:	e000      	b.n	80201aa <basic_init+0xdfe>
 80201a8:	2301      	movs	r3, #1
 80201aa:	461a      	mov	r2, r3
 80201ac:	2100      	movs	r1, #0
 80201ae:	4620      	mov	r0, r4
 80201b0:	f7fe fd3a 	bl	801ec28 <lv_style_set_border_width>
    lv_style_set_border_opa(&styles->btn, LV_STATE_CHECKED, LV_OPA_TRANSP);
 80201b4:	4b73      	ldr	r3, [pc, #460]	; (8020384 <basic_init+0xfd8>)
 80201b6:	681b      	ldr	r3, [r3, #0]
 80201b8:	3310      	adds	r3, #16
 80201ba:	2200      	movs	r2, #0
 80201bc:	2101      	movs	r1, #1
 80201be:	4618      	mov	r0, r3
 80201c0:	f7fe fd94 	bl	801ecec <lv_style_set_border_opa>

    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 80201c4:	4b6f      	ldr	r3, [pc, #444]	; (8020384 <basic_init+0xfd8>)
 80201c6:	681b      	ldr	r3, [r3, #0]
 80201c8:	f103 0410 	add.w	r4, r3, #16
 80201cc:	4b6c      	ldr	r3, [pc, #432]	; (8020380 <basic_init+0xfd4>)
 80201ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80201d0:	f003 0302 	and.w	r3, r3, #2
 80201d4:	2b00      	cmp	r3, #0
 80201d6:	d004      	beq.n	80201e2 <basic_init+0xe36>
 80201d8:	486d      	ldr	r0, [pc, #436]	; (8020390 <basic_init+0xfe4>)
 80201da:	f7fe fb6b 	bl	801e8b4 <lv_color_hex>
 80201de:	4603      	mov	r3, r0
 80201e0:	e004      	b.n	80201ec <basic_init+0xe40>
 80201e2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80201e6:	f7fe fb65 	bl	801e8b4 <lv_color_hex>
 80201ea:	4603      	mov	r3, r0
 80201ec:	461a      	mov	r2, r3
 80201ee:	2100      	movs	r1, #0
 80201f0:	4620      	mov	r0, r4
 80201f2:	f7fe fecd 	bl	801ef90 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 80201f6:	4b63      	ldr	r3, [pc, #396]	; (8020384 <basic_init+0xfd8>)
 80201f8:	681b      	ldr	r3, [r3, #0]
 80201fa:	f103 0410 	add.w	r4, r3, #16
 80201fe:	4b60      	ldr	r3, [pc, #384]	; (8020380 <basic_init+0xfd4>)
 8020200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020202:	f003 0302 	and.w	r3, r3, #2
 8020206:	2b00      	cmp	r3, #0
 8020208:	d004      	beq.n	8020214 <basic_init+0xe68>
 802020a:	4861      	ldr	r0, [pc, #388]	; (8020390 <basic_init+0xfe4>)
 802020c:	f7fe fb52 	bl	801e8b4 <lv_color_hex>
 8020210:	4603      	mov	r3, r0
 8020212:	e004      	b.n	802021e <basic_init+0xe72>
 8020214:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8020218:	f7fe fb4c 	bl	801e8b4 <lv_color_hex>
 802021c:	4603      	mov	r3, r0
 802021e:	461a      	mov	r2, r3
 8020220:	2110      	movs	r1, #16
 8020222:	4620      	mov	r0, r4
 8020224:	f7fe feb4 	bl	801ef90 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
 8020228:	4b56      	ldr	r3, [pc, #344]	; (8020384 <basic_init+0xfd8>)
 802022a:	681b      	ldr	r3, [r3, #0]
 802022c:	f103 0410 	add.w	r4, r3, #16
 8020230:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8020234:	f7fe fb3e 	bl	801e8b4 <lv_color_hex>
 8020238:	4603      	mov	r3, r0
 802023a:	461a      	mov	r2, r3
 802023c:	2101      	movs	r1, #1
 802023e:	4620      	mov	r0, r4
 8020240:	f7fe fea6 	bl	801ef90 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
 8020244:	4b4f      	ldr	r3, [pc, #316]	; (8020384 <basic_init+0xfd8>)
 8020246:	681b      	ldr	r3, [r3, #0]
 8020248:	f103 0410 	add.w	r4, r3, #16
 802024c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8020250:	f7fe fb30 	bl	801e8b4 <lv_color_hex>
 8020254:	4603      	mov	r3, r0
 8020256:	461a      	mov	r2, r3
 8020258:	2111      	movs	r1, #17
 802025a:	4620      	mov	r0, r4
 802025c:	f7fe fe98 	bl	801ef90 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
 8020260:	4b48      	ldr	r3, [pc, #288]	; (8020384 <basic_init+0xfd8>)
 8020262:	681b      	ldr	r3, [r3, #0]
 8020264:	f103 0410 	add.w	r4, r3, #16
 8020268:	4b45      	ldr	r3, [pc, #276]	; (8020380 <basic_init+0xfd4>)
 802026a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802026c:	f003 0302 	and.w	r3, r3, #2
 8020270:	2b00      	cmp	r3, #0
 8020272:	d004      	beq.n	802027e <basic_init+0xed2>
 8020274:	4847      	ldr	r0, [pc, #284]	; (8020394 <basic_init+0xfe8>)
 8020276:	f7fe fb1d 	bl	801e8b4 <lv_color_hex>
 802027a:	4603      	mov	r3, r0
 802027c:	e003      	b.n	8020286 <basic_init+0xeda>
 802027e:	4845      	ldr	r0, [pc, #276]	; (8020394 <basic_init+0xfe8>)
 8020280:	f7fe fb18 	bl	801e8b4 <lv_color_hex>
 8020284:	4603      	mov	r3, r0
 8020286:	461a      	mov	r2, r3
 8020288:	2120      	movs	r1, #32
 802028a:	4620      	mov	r0, r4
 802028c:	f7fe fe80 	bl	801ef90 <lv_style_set_text_color>

    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 8020290:	4b3c      	ldr	r3, [pc, #240]	; (8020384 <basic_init+0xfd8>)
 8020292:	681b      	ldr	r3, [r3, #0]
 8020294:	f103 0410 	add.w	r4, r3, #16
 8020298:	4b39      	ldr	r3, [pc, #228]	; (8020380 <basic_init+0xfd4>)
 802029a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802029c:	f003 0302 	and.w	r3, r3, #2
 80202a0:	2b00      	cmp	r3, #0
 80202a2:	d004      	beq.n	80202ae <basic_init+0xf02>
 80202a4:	483a      	ldr	r0, [pc, #232]	; (8020390 <basic_init+0xfe4>)
 80202a6:	f7fe fb05 	bl	801e8b4 <lv_color_hex>
 80202aa:	4603      	mov	r3, r0
 80202ac:	e004      	b.n	80202b8 <basic_init+0xf0c>
 80202ae:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80202b2:	f7fe faff 	bl	801e8b4 <lv_color_hex>
 80202b6:	4603      	mov	r3, r0
 80202b8:	461a      	mov	r2, r3
 80202ba:	2100      	movs	r1, #0
 80202bc:	4620      	mov	r0, r4
 80202be:	f7fe ff4b 	bl	801f158 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 80202c2:	4b30      	ldr	r3, [pc, #192]	; (8020384 <basic_init+0xfd8>)
 80202c4:	681b      	ldr	r3, [r3, #0]
 80202c6:	f103 0410 	add.w	r4, r3, #16
 80202ca:	4b2d      	ldr	r3, [pc, #180]	; (8020380 <basic_init+0xfd4>)
 80202cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80202ce:	f003 0302 	and.w	r3, r3, #2
 80202d2:	2b00      	cmp	r3, #0
 80202d4:	d004      	beq.n	80202e0 <basic_init+0xf34>
 80202d6:	482e      	ldr	r0, [pc, #184]	; (8020390 <basic_init+0xfe4>)
 80202d8:	f7fe faec 	bl	801e8b4 <lv_color_hex>
 80202dc:	4603      	mov	r3, r0
 80202de:	e004      	b.n	80202ea <basic_init+0xf3e>
 80202e0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80202e4:	f7fe fae6 	bl	801e8b4 <lv_color_hex>
 80202e8:	4603      	mov	r3, r0
 80202ea:	461a      	mov	r2, r3
 80202ec:	2110      	movs	r1, #16
 80202ee:	4620      	mov	r0, r4
 80202f0:	f7fe ff32 	bl	801f158 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, lv_color_hex(0xffffff));
 80202f4:	4b23      	ldr	r3, [pc, #140]	; (8020384 <basic_init+0xfd8>)
 80202f6:	681b      	ldr	r3, [r3, #0]
 80202f8:	f103 0410 	add.w	r4, r3, #16
 80202fc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8020300:	f7fe fad8 	bl	801e8b4 <lv_color_hex>
 8020304:	4603      	mov	r3, r0
 8020306:	461a      	mov	r2, r3
 8020308:	2110      	movs	r1, #16
 802030a:	4620      	mov	r0, r4
 802030c:	f7fe ff24 	bl	801f158 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
 8020310:	4b1c      	ldr	r3, [pc, #112]	; (8020384 <basic_init+0xfd8>)
 8020312:	681b      	ldr	r3, [r3, #0]
 8020314:	f103 0410 	add.w	r4, r3, #16
 8020318:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 802031c:	f7fe faca 	bl	801e8b4 <lv_color_hex>
 8020320:	4603      	mov	r3, r0
 8020322:	461a      	mov	r2, r3
 8020324:	2111      	movs	r1, #17
 8020326:	4620      	mov	r0, r4
 8020328:	f7fe ff16 	bl	801f158 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
 802032c:	4b15      	ldr	r3, [pc, #84]	; (8020384 <basic_init+0xfd8>)
 802032e:	681b      	ldr	r3, [r3, #0]
 8020330:	f103 0410 	add.w	r4, r3, #16
 8020334:	4b12      	ldr	r3, [pc, #72]	; (8020380 <basic_init+0xfd4>)
 8020336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020338:	f003 0302 	and.w	r3, r3, #2
 802033c:	2b00      	cmp	r3, #0
 802033e:	d004      	beq.n	802034a <basic_init+0xf9e>
 8020340:	4814      	ldr	r0, [pc, #80]	; (8020394 <basic_init+0xfe8>)
 8020342:	f7fe fab7 	bl	801e8b4 <lv_color_hex>
 8020346:	4603      	mov	r3, r0
 8020348:	e003      	b.n	8020352 <basic_init+0xfa6>
 802034a:	4812      	ldr	r0, [pc, #72]	; (8020394 <basic_init+0xfe8>)
 802034c:	f7fe fab2 	bl	801e8b4 <lv_color_hex>
 8020350:	4603      	mov	r3, r0
 8020352:	461a      	mov	r2, r3
 8020354:	2120      	movs	r1, #32
 8020356:	4620      	mov	r0, r4
 8020358:	f7fe fefe 	bl	801f158 <lv_style_set_image_recolor>

    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 802035c:	4b09      	ldr	r3, [pc, #36]	; (8020384 <basic_init+0xfd8>)
 802035e:	681b      	ldr	r3, [r3, #0]
 8020360:	f103 0410 	add.w	r4, r3, #16
 8020364:	4b06      	ldr	r3, [pc, #24]	; (8020380 <basic_init+0xfd4>)
 8020366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020368:	f003 0302 	and.w	r3, r3, #2
 802036c:	2b00      	cmp	r3, #0
 802036e:	d013      	beq.n	8020398 <basic_init+0xfec>
 8020370:	4807      	ldr	r0, [pc, #28]	; (8020390 <basic_init+0xfe4>)
 8020372:	f7fe fa9f 	bl	801e8b4 <lv_color_hex>
 8020376:	4603      	mov	r3, r0
 8020378:	e013      	b.n	80203a2 <basic_init+0xff6>
 802037a:	bf00      	nop
 802037c:	00586273 	.word	0x00586273
 8020380:	2002146c 	.word	0x2002146c
 8020384:	20021498 	.word	0x20021498
 8020388:	00404040 	.word	0x00404040
 802038c:	66666667 	.word	0x66666667
 8020390:	0031404f 	.word	0x0031404f
 8020394:	00888888 	.word	0x00888888
 8020398:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 802039c:	f7fe fa8a 	bl	801e8b4 <lv_color_hex>
 80203a0:	4603      	mov	r3, r0
 80203a2:	461a      	mov	r2, r3
 80203a4:	2100      	movs	r1, #0
 80203a6:	4620      	mov	r0, r4
 80203a8:	f7fe fda8 	bl	801eefc <lv_style_set_value_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
 80203ac:	4b9c      	ldr	r3, [pc, #624]	; (8020620 <basic_init+0x1274>)
 80203ae:	681b      	ldr	r3, [r3, #0]
 80203b0:	f103 0410 	add.w	r4, r3, #16
 80203b4:	4b9b      	ldr	r3, [pc, #620]	; (8020624 <basic_init+0x1278>)
 80203b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80203b8:	f003 0302 	and.w	r3, r3, #2
 80203bc:	2b00      	cmp	r3, #0
 80203be:	d004      	beq.n	80203ca <basic_init+0x101e>
 80203c0:	4899      	ldr	r0, [pc, #612]	; (8020628 <basic_init+0x127c>)
 80203c2:	f7fe fa77 	bl	801e8b4 <lv_color_hex>
 80203c6:	4603      	mov	r3, r0
 80203c8:	e004      	b.n	80203d4 <basic_init+0x1028>
 80203ca:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80203ce:	f7fe fa71 	bl	801e8b4 <lv_color_hex>
 80203d2:	4603      	mov	r3, r0
 80203d4:	461a      	mov	r2, r3
 80203d6:	2110      	movs	r1, #16
 80203d8:	4620      	mov	r0, r4
 80203da:	f7fe fd8f 	bl	801eefc <lv_style_set_value_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
 80203de:	4b90      	ldr	r3, [pc, #576]	; (8020620 <basic_init+0x1274>)
 80203e0:	681b      	ldr	r3, [r3, #0]
 80203e2:	f103 0410 	add.w	r4, r3, #16
 80203e6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80203ea:	f7fe fa63 	bl	801e8b4 <lv_color_hex>
 80203ee:	4603      	mov	r3, r0
 80203f0:	461a      	mov	r2, r3
 80203f2:	2101      	movs	r1, #1
 80203f4:	4620      	mov	r0, r4
 80203f6:	f7fe fd81 	bl	801eefc <lv_style_set_value_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
 80203fa:	4b89      	ldr	r3, [pc, #548]	; (8020620 <basic_init+0x1274>)
 80203fc:	681b      	ldr	r3, [r3, #0]
 80203fe:	f103 0410 	add.w	r4, r3, #16
 8020402:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8020406:	f7fe fa55 	bl	801e8b4 <lv_color_hex>
 802040a:	4603      	mov	r3, r0
 802040c:	461a      	mov	r2, r3
 802040e:	2111      	movs	r1, #17
 8020410:	4620      	mov	r0, r4
 8020412:	f7fe fd73 	bl	801eefc <lv_style_set_value_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
 8020416:	4b82      	ldr	r3, [pc, #520]	; (8020620 <basic_init+0x1274>)
 8020418:	681b      	ldr	r3, [r3, #0]
 802041a:	f103 0410 	add.w	r4, r3, #16
 802041e:	4b81      	ldr	r3, [pc, #516]	; (8020624 <basic_init+0x1278>)
 8020420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020422:	f003 0302 	and.w	r3, r3, #2
 8020426:	2b00      	cmp	r3, #0
 8020428:	d004      	beq.n	8020434 <basic_init+0x1088>
 802042a:	4880      	ldr	r0, [pc, #512]	; (802062c <basic_init+0x1280>)
 802042c:	f7fe fa42 	bl	801e8b4 <lv_color_hex>
 8020430:	4603      	mov	r3, r0
 8020432:	e003      	b.n	802043c <basic_init+0x1090>
 8020434:	487d      	ldr	r0, [pc, #500]	; (802062c <basic_init+0x1280>)
 8020436:	f7fe fa3d 	bl	801e8b4 <lv_color_hex>
 802043a:	4603      	mov	r3, r0
 802043c:	461a      	mov	r2, r3
 802043e:	2120      	movs	r1, #32
 8020440:	4620      	mov	r0, r4
 8020442:	f7fe fd5b 	bl	801eefc <lv_style_set_value_color>

    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
 8020446:	4b76      	ldr	r3, [pc, #472]	; (8020620 <basic_init+0x1274>)
 8020448:	681b      	ldr	r3, [r3, #0]
 802044a:	f103 0410 	add.w	r4, r3, #16
 802044e:	2000      	movs	r0, #0
 8020450:	f7f9 ffde 	bl	801a410 <lv_disp_get_dpi>
 8020454:	4603      	mov	r3, r0
 8020456:	461a      	mov	r2, r3
 8020458:	4613      	mov	r3, r2
 802045a:	009b      	lsls	r3, r3, #2
 802045c:	4413      	add	r3, r2
 802045e:	00db      	lsls	r3, r3, #3
 8020460:	3350      	adds	r3, #80	; 0x50
 8020462:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020466:	db11      	blt.n	802048c <basic_init+0x10e0>
 8020468:	2000      	movs	r0, #0
 802046a:	f7f9 ffd1 	bl	801a410 <lv_disp_get_dpi>
 802046e:	4603      	mov	r3, r0
 8020470:	461a      	mov	r2, r3
 8020472:	4613      	mov	r3, r2
 8020474:	009b      	lsls	r3, r3, #2
 8020476:	4413      	add	r3, r2
 8020478:	00db      	lsls	r3, r3, #3
 802047a:	3350      	adds	r3, #80	; 0x50
 802047c:	4a6c      	ldr	r2, [pc, #432]	; (8020630 <basic_init+0x1284>)
 802047e:	fb82 1203 	smull	r1, r2, r2, r3
 8020482:	1192      	asrs	r2, r2, #6
 8020484:	17db      	asrs	r3, r3, #31
 8020486:	1ad3      	subs	r3, r2, r3
 8020488:	b21b      	sxth	r3, r3
 802048a:	e000      	b.n	802048e <basic_init+0x10e2>
 802048c:	2301      	movs	r3, #1
 802048e:	461a      	mov	r2, r3
 8020490:	2100      	movs	r1, #0
 8020492:	4620      	mov	r0, r4
 8020494:	f7fe faea 	bl	801ea6c <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
 8020498:	4b61      	ldr	r3, [pc, #388]	; (8020620 <basic_init+0x1274>)
 802049a:	681b      	ldr	r3, [r3, #0]
 802049c:	f103 0410 	add.w	r4, r3, #16
 80204a0:	2000      	movs	r0, #0
 80204a2:	f7f9 ffb5 	bl	801a410 <lv_disp_get_dpi>
 80204a6:	4603      	mov	r3, r0
 80204a8:	461a      	mov	r2, r3
 80204aa:	4613      	mov	r3, r2
 80204ac:	009b      	lsls	r3, r3, #2
 80204ae:	4413      	add	r3, r2
 80204b0:	00db      	lsls	r3, r3, #3
 80204b2:	3350      	adds	r3, #80	; 0x50
 80204b4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80204b8:	db11      	blt.n	80204de <basic_init+0x1132>
 80204ba:	2000      	movs	r0, #0
 80204bc:	f7f9 ffa8 	bl	801a410 <lv_disp_get_dpi>
 80204c0:	4603      	mov	r3, r0
 80204c2:	461a      	mov	r2, r3
 80204c4:	4613      	mov	r3, r2
 80204c6:	009b      	lsls	r3, r3, #2
 80204c8:	4413      	add	r3, r2
 80204ca:	00db      	lsls	r3, r3, #3
 80204cc:	3350      	adds	r3, #80	; 0x50
 80204ce:	4a58      	ldr	r2, [pc, #352]	; (8020630 <basic_init+0x1284>)
 80204d0:	fb82 1203 	smull	r1, r2, r2, r3
 80204d4:	1192      	asrs	r2, r2, #6
 80204d6:	17db      	asrs	r3, r3, #31
 80204d8:	1ad3      	subs	r3, r2, r3
 80204da:	b21b      	sxth	r3, r3
 80204dc:	e000      	b.n	80204e0 <basic_init+0x1134>
 80204de:	2301      	movs	r3, #1
 80204e0:	461a      	mov	r2, r3
 80204e2:	2100      	movs	r1, #0
 80204e4:	4620      	mov	r0, r4
 80204e6:	f7fe fada 	bl	801ea9e <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
 80204ea:	4b4d      	ldr	r3, [pc, #308]	; (8020620 <basic_init+0x1274>)
 80204ec:	681b      	ldr	r3, [r3, #0]
 80204ee:	f103 0410 	add.w	r4, r3, #16
 80204f2:	2000      	movs	r0, #0
 80204f4:	f7f9 ff8c 	bl	801a410 <lv_disp_get_dpi>
 80204f8:	4603      	mov	r3, r0
 80204fa:	461a      	mov	r2, r3
 80204fc:	4613      	mov	r3, r2
 80204fe:	011b      	lsls	r3, r3, #4
 8020500:	1a9b      	subs	r3, r3, r2
 8020502:	3350      	adds	r3, #80	; 0x50
 8020504:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020508:	db10      	blt.n	802052c <basic_init+0x1180>
 802050a:	2000      	movs	r0, #0
 802050c:	f7f9 ff80 	bl	801a410 <lv_disp_get_dpi>
 8020510:	4603      	mov	r3, r0
 8020512:	461a      	mov	r2, r3
 8020514:	4613      	mov	r3, r2
 8020516:	011b      	lsls	r3, r3, #4
 8020518:	1a9b      	subs	r3, r3, r2
 802051a:	3350      	adds	r3, #80	; 0x50
 802051c:	4a44      	ldr	r2, [pc, #272]	; (8020630 <basic_init+0x1284>)
 802051e:	fb82 1203 	smull	r1, r2, r2, r3
 8020522:	1192      	asrs	r2, r2, #6
 8020524:	17db      	asrs	r3, r3, #31
 8020526:	1ad3      	subs	r3, r2, r3
 8020528:	b21b      	sxth	r3, r3
 802052a:	e000      	b.n	802052e <basic_init+0x1182>
 802052c:	2301      	movs	r3, #1
 802052e:	461a      	mov	r2, r3
 8020530:	2100      	movs	r1, #0
 8020532:	4620      	mov	r0, r4
 8020534:	f7fe fa68 	bl	801ea08 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
 8020538:	4b39      	ldr	r3, [pc, #228]	; (8020620 <basic_init+0x1274>)
 802053a:	681b      	ldr	r3, [r3, #0]
 802053c:	f103 0410 	add.w	r4, r3, #16
 8020540:	2000      	movs	r0, #0
 8020542:	f7f9 ff65 	bl	801a410 <lv_disp_get_dpi>
 8020546:	4603      	mov	r3, r0
 8020548:	461a      	mov	r2, r3
 802054a:	4613      	mov	r3, r2
 802054c:	011b      	lsls	r3, r3, #4
 802054e:	1a9b      	subs	r3, r3, r2
 8020550:	3350      	adds	r3, #80	; 0x50
 8020552:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020556:	db10      	blt.n	802057a <basic_init+0x11ce>
 8020558:	2000      	movs	r0, #0
 802055a:	f7f9 ff59 	bl	801a410 <lv_disp_get_dpi>
 802055e:	4603      	mov	r3, r0
 8020560:	461a      	mov	r2, r3
 8020562:	4613      	mov	r3, r2
 8020564:	011b      	lsls	r3, r3, #4
 8020566:	1a9b      	subs	r3, r3, r2
 8020568:	3350      	adds	r3, #80	; 0x50
 802056a:	4a31      	ldr	r2, [pc, #196]	; (8020630 <basic_init+0x1284>)
 802056c:	fb82 1203 	smull	r1, r2, r2, r3
 8020570:	1192      	asrs	r2, r2, #6
 8020572:	17db      	asrs	r3, r3, #31
 8020574:	1ad3      	subs	r3, r2, r3
 8020576:	b21b      	sxth	r3, r3
 8020578:	e000      	b.n	802057c <basic_init+0x11d0>
 802057a:	2301      	movs	r3, #1
 802057c:	461a      	mov	r2, r3
 802057e:	2100      	movs	r1, #0
 8020580:	4620      	mov	r0, r4
 8020582:	f7fe fa5a 	bl	801ea3a <lv_style_set_pad_bottom>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
 8020586:	4b26      	ldr	r3, [pc, #152]	; (8020620 <basic_init+0x1274>)
 8020588:	681b      	ldr	r3, [r3, #0]
 802058a:	f103 0410 	add.w	r4, r3, #16
 802058e:	2000      	movs	r0, #0
 8020590:	f7f9 ff3e 	bl	801a410 <lv_disp_get_dpi>
 8020594:	4603      	mov	r3, r0
 8020596:	461a      	mov	r2, r3
 8020598:	4613      	mov	r3, r2
 802059a:	009b      	lsls	r3, r3, #2
 802059c:	4413      	add	r3, r2
 802059e:	009b      	lsls	r3, r3, #2
 80205a0:	3350      	adds	r3, #80	; 0x50
 80205a2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80205a6:	db11      	blt.n	80205cc <basic_init+0x1220>
 80205a8:	2000      	movs	r0, #0
 80205aa:	f7f9 ff31 	bl	801a410 <lv_disp_get_dpi>
 80205ae:	4603      	mov	r3, r0
 80205b0:	461a      	mov	r2, r3
 80205b2:	4613      	mov	r3, r2
 80205b4:	009b      	lsls	r3, r3, #2
 80205b6:	4413      	add	r3, r2
 80205b8:	009b      	lsls	r3, r3, #2
 80205ba:	3350      	adds	r3, #80	; 0x50
 80205bc:	4a1c      	ldr	r2, [pc, #112]	; (8020630 <basic_init+0x1284>)
 80205be:	fb82 1203 	smull	r1, r2, r2, r3
 80205c2:	1192      	asrs	r2, r2, #6
 80205c4:	17db      	asrs	r3, r3, #31
 80205c6:	1ad3      	subs	r3, r2, r3
 80205c8:	b21b      	sxth	r3, r3
 80205ca:	e000      	b.n	80205ce <basic_init+0x1222>
 80205cc:	2301      	movs	r3, #1
 80205ce:	461a      	mov	r2, r3
 80205d0:	2100      	movs	r1, #0
 80205d2:	4620      	mov	r0, r4
 80205d4:	f7fe fa7c 	bl	801ead0 <lv_style_set_pad_inner>
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 80205d8:	4b11      	ldr	r3, [pc, #68]	; (8020620 <basic_init+0x1274>)
 80205da:	681b      	ldr	r3, [r3, #0]
 80205dc:	f103 0410 	add.w	r4, r3, #16
 80205e0:	4b10      	ldr	r3, [pc, #64]	; (8020624 <basic_init+0x1278>)
 80205e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80205e4:	f003 0320 	and.w	r3, r3, #32
 80205e8:	2b00      	cmp	r3, #0
 80205ea:	d123      	bne.n	8020634 <basic_init+0x1288>
 80205ec:	2000      	movs	r0, #0
 80205ee:	f7f9 ff0f 	bl	801a410 <lv_disp_get_dpi>
 80205f2:	4603      	mov	r3, r0
 80205f4:	3328      	adds	r3, #40	; 0x28
 80205f6:	005b      	lsls	r3, r3, #1
 80205f8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80205fc:	db0d      	blt.n	802061a <basic_init+0x126e>
 80205fe:	2000      	movs	r0, #0
 8020600:	f7f9 ff06 	bl	801a410 <lv_disp_get_dpi>
 8020604:	4603      	mov	r3, r0
 8020606:	3328      	adds	r3, #40	; 0x28
 8020608:	005b      	lsls	r3, r3, #1
 802060a:	4a09      	ldr	r2, [pc, #36]	; (8020630 <basic_init+0x1284>)
 802060c:	fb82 1203 	smull	r1, r2, r2, r3
 8020610:	1192      	asrs	r2, r2, #6
 8020612:	17db      	asrs	r3, r3, #31
 8020614:	1ad3      	subs	r3, r2, r3
 8020616:	b21b      	sxth	r3, r3
 8020618:	e00d      	b.n	8020636 <basic_init+0x128a>
 802061a:	2301      	movs	r3, #1
 802061c:	e00b      	b.n	8020636 <basic_init+0x128a>
 802061e:	bf00      	nop
 8020620:	20021498 	.word	0x20021498
 8020624:	2002146c 	.word	0x2002146c
 8020628:	0031404f 	.word	0x0031404f
 802062c:	00888888 	.word	0x00888888
 8020630:	66666667 	.word	0x66666667
 8020634:	2300      	movs	r3, #0
 8020636:	461a      	mov	r2, r3
 8020638:	2100      	movs	r1, #0
 802063a:	4620      	mov	r0, r4
 802063c:	f7fe fb6e 	bl	801ed1c <lv_style_set_outline_width>
    lv_style_set_outline_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_0);
 8020640:	4b93      	ldr	r3, [pc, #588]	; (8020890 <basic_init+0x14e4>)
 8020642:	681b      	ldr	r3, [r3, #0]
 8020644:	3310      	adds	r3, #16
 8020646:	2200      	movs	r2, #0
 8020648:	2100      	movs	r1, #0
 802064a:	4618      	mov	r0, r3
 802064c:	f7fe fbaf 	bl	801edae <lv_style_set_outline_opa>
    lv_style_set_outline_opa(&styles->btn, LV_STATE_FOCUSED, LV_OPA_50);
 8020650:	4b8f      	ldr	r3, [pc, #572]	; (8020890 <basic_init+0x14e4>)
 8020652:	681b      	ldr	r3, [r3, #0]
 8020654:	3310      	adds	r3, #16
 8020656:	227f      	movs	r2, #127	; 0x7f
 8020658:	2102      	movs	r1, #2
 802065a:	4618      	mov	r0, r3
 802065c:	f7fe fba7 	bl	801edae <lv_style_set_outline_opa>
    lv_style_set_outline_color(&styles->btn, LV_STATE_DEFAULT, theme.color_primary);
 8020660:	4b8b      	ldr	r3, [pc, #556]	; (8020890 <basic_init+0x14e4>)
 8020662:	681b      	ldr	r3, [r3, #0]
 8020664:	f103 0010 	add.w	r0, r3, #16
 8020668:	4b8a      	ldr	r3, [pc, #552]	; (8020894 <basic_init+0x14e8>)
 802066a:	68da      	ldr	r2, [r3, #12]
 802066c:	2100      	movs	r1, #0
 802066e:	f7fe fb87 	bl	801ed80 <lv_style_set_outline_color>
    lv_style_set_outline_color(&styles->btn, LV_STATE_EDITED, theme.color_secondary);
 8020672:	4b87      	ldr	r3, [pc, #540]	; (8020890 <basic_init+0x14e4>)
 8020674:	681b      	ldr	r3, [r3, #0]
 8020676:	f103 0010 	add.w	r0, r3, #16
 802067a:	4b86      	ldr	r3, [pc, #536]	; (8020894 <basic_init+0x14e8>)
 802067c:	691a      	ldr	r2, [r3, #16]
 802067e:	2104      	movs	r1, #4
 8020680:	f7fe fb7e 	bl	801ed80 <lv_style_set_outline_color>
    lv_style_set_transition_time(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
 8020684:	4b82      	ldr	r3, [pc, #520]	; (8020890 <basic_init+0x14e4>)
 8020686:	681b      	ldr	r3, [r3, #0]
 8020688:	3310      	adds	r3, #16
 802068a:	2200      	movs	r2, #0
 802068c:	2100      	movs	r1, #0
 802068e:	4618      	mov	r0, r3
 8020690:	f7fe fd7c 	bl	801f18c <lv_style_set_transition_time>
    lv_style_set_transition_prop_4(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA);
 8020694:	4b7e      	ldr	r3, [pc, #504]	; (8020890 <basic_init+0x14e4>)
 8020696:	681b      	ldr	r3, [r3, #0]
 8020698:	3310      	adds	r3, #16
 802069a:	223c      	movs	r2, #60	; 0x3c
 802069c:	2100      	movs	r1, #0
 802069e:	4618      	mov	r0, r3
 80206a0:	f7fe fdbf 	bl	801f222 <lv_style_set_transition_prop_4>
    lv_style_set_transition_prop_5(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
 80206a4:	4b7a      	ldr	r3, [pc, #488]	; (8020890 <basic_init+0x14e4>)
 80206a6:	681b      	ldr	r3, [r3, #0]
 80206a8:	3310      	adds	r3, #16
 80206aa:	2229      	movs	r2, #41	; 0x29
 80206ac:	2100      	movs	r1, #0
 80206ae:	4618      	mov	r0, r3
 80206b0:	f7fe fdd0 	bl	801f254 <lv_style_set_transition_prop_5>
    lv_style_set_transition_prop_6(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
 80206b4:	4b76      	ldr	r3, [pc, #472]	; (8020890 <basic_init+0x14e4>)
 80206b6:	681b      	ldr	r3, [r3, #0]
 80206b8:	3310      	adds	r3, #16
 80206ba:	224c      	movs	r2, #76	; 0x4c
 80206bc:	2100      	movs	r1, #0
 80206be:	4618      	mov	r0, r3
 80206c0:	f7fe fde1 	bl	801f286 <lv_style_set_transition_prop_6>
    lv_style_set_transition_delay(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
 80206c4:	4b72      	ldr	r3, [pc, #456]	; (8020890 <basic_init+0x14e4>)
 80206c6:	681b      	ldr	r3, [r3, #0]
 80206c8:	3310      	adds	r3, #16
 80206ca:	2200      	movs	r2, #0
 80206cc:	2100      	movs	r1, #0
 80206ce:	4618      	mov	r0, r3
 80206d0:	f7fe fd75 	bl	801f1be <lv_style_set_transition_delay>
    lv_style_set_transition_delay(&styles->btn, LV_STATE_PRESSED, 0);
 80206d4:	4b6e      	ldr	r3, [pc, #440]	; (8020890 <basic_init+0x14e4>)
 80206d6:	681b      	ldr	r3, [r3, #0]
 80206d8:	3310      	adds	r3, #16
 80206da:	2200      	movs	r2, #0
 80206dc:	2110      	movs	r1, #16
 80206de:	4618      	mov	r0, r3
 80206e0:	f7fe fd6d 	bl	801f1be <lv_style_set_transition_delay>

    style_init_reset(&styles->pad_inner);
 80206e4:	4b6a      	ldr	r3, [pc, #424]	; (8020890 <basic_init+0x14e4>)
 80206e6:	681b      	ldr	r3, [r3, #0]
 80206e8:	3314      	adds	r3, #20
 80206ea:	4618      	mov	r0, r3
 80206ec:	f004 fea0 	bl	8025430 <style_init_reset>

    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 80206f0:	4b67      	ldr	r3, [pc, #412]	; (8020890 <basic_init+0x14e4>)
 80206f2:	681b      	ldr	r3, [r3, #0]
 80206f4:	f103 0414 	add.w	r4, r3, #20
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 80206f8:	2000      	movs	r0, #0
 80206fa:	f7f9 fea2 	bl	801a442 <lv_disp_get_size_category>
 80206fe:	4603      	mov	r3, r0
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 8020700:	2b01      	cmp	r3, #1
 8020702:	d820      	bhi.n	8020746 <basic_init+0x139a>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 8020704:	2000      	movs	r0, #0
 8020706:	f7f9 fe83 	bl	801a410 <lv_disp_get_dpi>
 802070a:	4603      	mov	r3, r0
 802070c:	461a      	mov	r2, r3
 802070e:	4613      	mov	r3, r2
 8020710:	009b      	lsls	r3, r3, #2
 8020712:	4413      	add	r3, r2
 8020714:	009b      	lsls	r3, r3, #2
 8020716:	3350      	adds	r3, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 8020718:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802071c:	db11      	blt.n	8020742 <basic_init+0x1396>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 802071e:	2000      	movs	r0, #0
 8020720:	f7f9 fe76 	bl	801a410 <lv_disp_get_dpi>
 8020724:	4603      	mov	r3, r0
 8020726:	461a      	mov	r2, r3
 8020728:	4613      	mov	r3, r2
 802072a:	009b      	lsls	r3, r3, #2
 802072c:	4413      	add	r3, r2
 802072e:	009b      	lsls	r3, r3, #2
 8020730:	3350      	adds	r3, #80	; 0x50
 8020732:	4a59      	ldr	r2, [pc, #356]	; (8020898 <basic_init+0x14ec>)
 8020734:	fb82 1203 	smull	r1, r2, r2, r3
 8020738:	1192      	asrs	r2, r2, #6
 802073a:	17db      	asrs	r3, r3, #31
 802073c:	1ad3      	subs	r3, r2, r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 802073e:	b21b      	sxth	r3, r3
 8020740:	e021      	b.n	8020786 <basic_init+0x13da>
 8020742:	2301      	movs	r3, #1
 8020744:	e01f      	b.n	8020786 <basic_init+0x13da>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 8020746:	2000      	movs	r0, #0
 8020748:	f7f9 fe62 	bl	801a410 <lv_disp_get_dpi>
 802074c:	4603      	mov	r3, r0
 802074e:	461a      	mov	r2, r3
 8020750:	4613      	mov	r3, r2
 8020752:	009b      	lsls	r3, r3, #2
 8020754:	4413      	add	r3, r2
 8020756:	00db      	lsls	r3, r3, #3
 8020758:	3350      	adds	r3, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 802075a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802075e:	db11      	blt.n	8020784 <basic_init+0x13d8>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
 8020760:	2000      	movs	r0, #0
 8020762:	f7f9 fe55 	bl	801a410 <lv_disp_get_dpi>
 8020766:	4603      	mov	r3, r0
 8020768:	461a      	mov	r2, r3
 802076a:	4613      	mov	r3, r2
 802076c:	009b      	lsls	r3, r3, #2
 802076e:	4413      	add	r3, r2
 8020770:	00db      	lsls	r3, r3, #3
 8020772:	3350      	adds	r3, #80	; 0x50
 8020774:	4a48      	ldr	r2, [pc, #288]	; (8020898 <basic_init+0x14ec>)
 8020776:	fb82 1203 	smull	r1, r2, r2, r3
 802077a:	1192      	asrs	r2, r2, #6
 802077c:	17db      	asrs	r3, r3, #31
 802077e:	1ad3      	subs	r3, r2, r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
 8020780:	b21b      	sxth	r3, r3
 8020782:	e000      	b.n	8020786 <basic_init+0x13da>
 8020784:	2301      	movs	r3, #1
 8020786:	461a      	mov	r2, r3
 8020788:	2100      	movs	r1, #0
 802078a:	4620      	mov	r0, r4
 802078c:	f7fe f9a0 	bl	801ead0 <lv_style_set_pad_inner>

    style_init_reset(&styles->pad_small);
 8020790:	4b3f      	ldr	r3, [pc, #252]	; (8020890 <basic_init+0x14e4>)
 8020792:	681b      	ldr	r3, [r3, #0]
 8020794:	3318      	adds	r3, #24
 8020796:	4618      	mov	r0, r3
 8020798:	f004 fe4a 	bl	8025430 <style_init_reset>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
 802079c:	2000      	movs	r0, #0
 802079e:	f7f9 fe50 	bl	801a442 <lv_disp_get_size_category>
 80207a2:	4603      	mov	r3, r0
 80207a4:	2b01      	cmp	r3, #1
 80207a6:	d820      	bhi.n	80207ea <basic_init+0x143e>
 80207a8:	2000      	movs	r0, #0
 80207aa:	f7f9 fe31 	bl	801a410 <lv_disp_get_dpi>
 80207ae:	4603      	mov	r3, r0
 80207b0:	461a      	mov	r2, r3
 80207b2:	4613      	mov	r3, r2
 80207b4:	009b      	lsls	r3, r3, #2
 80207b6:	4413      	add	r3, r2
 80207b8:	005b      	lsls	r3, r3, #1
 80207ba:	3350      	adds	r3, #80	; 0x50
 80207bc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80207c0:	db11      	blt.n	80207e6 <basic_init+0x143a>
 80207c2:	2000      	movs	r0, #0
 80207c4:	f7f9 fe24 	bl	801a410 <lv_disp_get_dpi>
 80207c8:	4603      	mov	r3, r0
 80207ca:	461a      	mov	r2, r3
 80207cc:	4613      	mov	r3, r2
 80207ce:	009b      	lsls	r3, r3, #2
 80207d0:	4413      	add	r3, r2
 80207d2:	005b      	lsls	r3, r3, #1
 80207d4:	3350      	adds	r3, #80	; 0x50
 80207d6:	4a30      	ldr	r2, [pc, #192]	; (8020898 <basic_init+0x14ec>)
 80207d8:	fb82 1203 	smull	r1, r2, r2, r3
 80207dc:	1192      	asrs	r2, r2, #6
 80207de:	17db      	asrs	r3, r3, #31
 80207e0:	1ad3      	subs	r3, r2, r3
 80207e2:	b21b      	sxth	r3, r3
 80207e4:	e021      	b.n	802082a <basic_init+0x147e>
 80207e6:	2301      	movs	r3, #1
 80207e8:	e01f      	b.n	802082a <basic_init+0x147e>
 80207ea:	2000      	movs	r0, #0
 80207ec:	f7f9 fe10 	bl	801a410 <lv_disp_get_dpi>
 80207f0:	4603      	mov	r3, r0
 80207f2:	461a      	mov	r2, r3
 80207f4:	4613      	mov	r3, r2
 80207f6:	009b      	lsls	r3, r3, #2
 80207f8:	4413      	add	r3, r2
 80207fa:	009b      	lsls	r3, r3, #2
 80207fc:	3350      	adds	r3, #80	; 0x50
 80207fe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020802:	db11      	blt.n	8020828 <basic_init+0x147c>
 8020804:	2000      	movs	r0, #0
 8020806:	f7f9 fe03 	bl	801a410 <lv_disp_get_dpi>
 802080a:	4603      	mov	r3, r0
 802080c:	461a      	mov	r2, r3
 802080e:	4613      	mov	r3, r2
 8020810:	009b      	lsls	r3, r3, #2
 8020812:	4413      	add	r3, r2
 8020814:	009b      	lsls	r3, r3, #2
 8020816:	3350      	adds	r3, #80	; 0x50
 8020818:	4a1f      	ldr	r2, [pc, #124]	; (8020898 <basic_init+0x14ec>)
 802081a:	fb82 1203 	smull	r1, r2, r2, r3
 802081e:	1192      	asrs	r2, r2, #6
 8020820:	17db      	asrs	r3, r3, #31
 8020822:	1ad3      	subs	r3, r2, r3
 8020824:	b21b      	sxth	r3, r3
 8020826:	e000      	b.n	802082a <basic_init+0x147e>
 8020828:	2301      	movs	r3, #1
 802082a:	80fb      	strh	r3, [r7, #6]
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
 802082c:	4b18      	ldr	r3, [pc, #96]	; (8020890 <basic_init+0x14e4>)
 802082e:	681b      	ldr	r3, [r3, #0]
 8020830:	3318      	adds	r3, #24
 8020832:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020836:	2100      	movs	r1, #0
 8020838:	4618      	mov	r0, r3
 802083a:	f7fe f917 	bl	801ea6c <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
 802083e:	4b14      	ldr	r3, [pc, #80]	; (8020890 <basic_init+0x14e4>)
 8020840:	681b      	ldr	r3, [r3, #0]
 8020842:	3318      	adds	r3, #24
 8020844:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8020848:	2100      	movs	r1, #0
 802084a:	4618      	mov	r0, r3
 802084c:	f7fe f927 	bl	801ea9e <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
 8020850:	4b0f      	ldr	r3, [pc, #60]	; (8020890 <basic_init+0x14e4>)
 8020852:	681b      	ldr	r3, [r3, #0]
 8020854:	3318      	adds	r3, #24
 8020856:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 802085a:	2100      	movs	r1, #0
 802085c:	4618      	mov	r0, r3
 802085e:	f7fe f8d3 	bl	801ea08 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
 8020862:	4b0b      	ldr	r3, [pc, #44]	; (8020890 <basic_init+0x14e4>)
 8020864:	681b      	ldr	r3, [r3, #0]
 8020866:	3318      	adds	r3, #24
 8020868:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 802086c:	2100      	movs	r1, #0
 802086e:	4618      	mov	r0, r3
 8020870:	f7fe f8e3 	bl	801ea3a <lv_style_set_pad_bottom>
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
 8020874:	4b06      	ldr	r3, [pc, #24]	; (8020890 <basic_init+0x14e4>)
 8020876:	681b      	ldr	r3, [r3, #0]
 8020878:	3318      	adds	r3, #24
 802087a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 802087e:	2100      	movs	r1, #0
 8020880:	4618      	mov	r0, r3
 8020882:	f7fe f925 	bl	801ead0 <lv_style_set_pad_inner>
}
 8020886:	bf00      	nop
 8020888:	3708      	adds	r7, #8
 802088a:	46bd      	mov	sp, r7
 802088c:	bdb0      	pop	{r4, r5, r7, pc}
 802088e:	bf00      	nop
 8020890:	20021498 	.word	0x20021498
 8020894:	2002146c 	.word	0x2002146c
 8020898:	66666667 	.word	0x66666667

0802089c <cont_init>:

static void cont_init(void)
{
 802089c:	b480      	push	{r7}
 802089e:	af00      	add	r7, sp, #0
#if LV_USE_CONT != 0

#endif
}
 80208a0:	bf00      	nop
 80208a2:	46bd      	mov	sp, r7
 80208a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208a8:	4770      	bx	lr

080208aa <btn_init>:

static void btn_init(void)
{
 80208aa:	b480      	push	{r7}
 80208ac:	af00      	add	r7, sp, #0
#if LV_USE_BTN != 0

#endif
}
 80208ae:	bf00      	nop
 80208b0:	46bd      	mov	sp, r7
 80208b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208b6:	4770      	bx	lr

080208b8 <label_init>:

static void label_init(void)
{
 80208b8:	b480      	push	{r7}
 80208ba:	af00      	add	r7, sp, #0
#if LV_USE_LABEL != 0

#endif
}
 80208bc:	bf00      	nop
 80208be:	46bd      	mov	sp, r7
 80208c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208c4:	4770      	bx	lr
	...

080208c8 <bar_init>:

static void bar_init(void)
{
 80208c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80208ca:	af00      	add	r7, sp, #0
#if LV_USE_BAR
    style_init_reset(&styles->bar_bg);
 80208cc:	4b7c      	ldr	r3, [pc, #496]	; (8020ac0 <bar_init+0x1f8>)
 80208ce:	681b      	ldr	r3, [r3, #0]
 80208d0:	3328      	adds	r3, #40	; 0x28
 80208d2:	4618      	mov	r0, r3
 80208d4:	f004 fdac 	bl	8025430 <style_init_reset>
    lv_style_set_radius(&styles->bar_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 80208d8:	4b79      	ldr	r3, [pc, #484]	; (8020ac0 <bar_init+0x1f8>)
 80208da:	681b      	ldr	r3, [r3, #0]
 80208dc:	3328      	adds	r3, #40	; 0x28
 80208de:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80208e2:	2100      	movs	r1, #0
 80208e4:	4618      	mov	r0, r3
 80208e6:	f7fe f82b 	bl	801e940 <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 80208ea:	4b75      	ldr	r3, [pc, #468]	; (8020ac0 <bar_init+0x1f8>)
 80208ec:	681b      	ldr	r3, [r3, #0]
 80208ee:	3328      	adds	r3, #40	; 0x28
 80208f0:	22ff      	movs	r2, #255	; 0xff
 80208f2:	2100      	movs	r1, #0
 80208f4:	4618      	mov	r0, r3
 80208f6:	f7fe f97f 	bl	801ebf8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->bar_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
 80208fa:	4b71      	ldr	r3, [pc, #452]	; (8020ac0 <bar_init+0x1f8>)
 80208fc:	681b      	ldr	r3, [r3, #0]
 80208fe:	f103 0628 	add.w	r6, r3, #40	; 0x28
 8020902:	4b70      	ldr	r3, [pc, #448]	; (8020ac4 <bar_init+0x1fc>)
 8020904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020906:	f003 0302 	and.w	r3, r3, #2
 802090a:	2b00      	cmp	r3, #0
 802090c:	d004      	beq.n	8020918 <bar_init+0x50>
 802090e:	486e      	ldr	r0, [pc, #440]	; (8020ac8 <bar_init+0x200>)
 8020910:	f7fd ffd0 	bl	801e8b4 <lv_color_hex>
 8020914:	4603      	mov	r3, r0
 8020916:	e003      	b.n	8020920 <bar_init+0x58>
 8020918:	486c      	ldr	r0, [pc, #432]	; (8020acc <bar_init+0x204>)
 802091a:	f7fd ffcb 	bl	801e8b4 <lv_color_hex>
 802091e:	4603      	mov	r3, r0
 8020920:	461a      	mov	r2, r3
 8020922:	2100      	movs	r1, #0
 8020924:	4630      	mov	r0, r6
 8020926:	f7fe f950 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
 802092a:	4b65      	ldr	r3, [pc, #404]	; (8020ac0 <bar_init+0x1f8>)
 802092c:	681b      	ldr	r3, [r3, #0]
 802092e:	f103 0628 	add.w	r6, r3, #40	; 0x28
 8020932:	4b64      	ldr	r3, [pc, #400]	; (8020ac4 <bar_init+0x1fc>)
 8020934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020936:	f003 0302 	and.w	r3, r3, #2
 802093a:	2b00      	cmp	r3, #0
 802093c:	d004      	beq.n	8020948 <bar_init+0x80>
 802093e:	4864      	ldr	r0, [pc, #400]	; (8020ad0 <bar_init+0x208>)
 8020940:	f7fd ffb8 	bl	801e8b4 <lv_color_hex>
 8020944:	4605      	mov	r5, r0
 8020946:	e00b      	b.n	8020960 <bar_init+0x98>
 8020948:	462b      	mov	r3, r5
 802094a:	f043 05ff 	orr.w	r5, r3, #255	; 0xff
 802094e:	462b      	mov	r3, r5
 8020950:	f443 457f 	orr.w	r5, r3, #65280	; 0xff00
 8020954:	462b      	mov	r3, r5
 8020956:	f443 057f 	orr.w	r5, r3, #16711680	; 0xff0000
 802095a:	462b      	mov	r3, r5
 802095c:	f043 457f 	orr.w	r5, r3, #4278190080	; 0xff000000
 8020960:	462a      	mov	r2, r5
 8020962:	2100      	movs	r1, #0
 8020964:	4630      	mov	r0, r6
 8020966:	f7fe fac9 	bl	801eefc <lv_style_set_value_color>
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_DEFAULT, theme.color_primary);
 802096a:	4b55      	ldr	r3, [pc, #340]	; (8020ac0 <bar_init+0x1f8>)
 802096c:	681b      	ldr	r3, [r3, #0]
 802096e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8020972:	4b54      	ldr	r3, [pc, #336]	; (8020ac4 <bar_init+0x1fc>)
 8020974:	68da      	ldr	r2, [r3, #12]
 8020976:	2100      	movs	r1, #0
 8020978:	f7fe fa02 	bl	801ed80 <lv_style_set_outline_color>
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_EDITED, theme.color_secondary);
 802097c:	4b50      	ldr	r3, [pc, #320]	; (8020ac0 <bar_init+0x1f8>)
 802097e:	681b      	ldr	r3, [r3, #0]
 8020980:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8020984:	4b4f      	ldr	r3, [pc, #316]	; (8020ac4 <bar_init+0x1fc>)
 8020986:	691a      	ldr	r2, [r3, #16]
 8020988:	2104      	movs	r1, #4
 802098a:	f7fe f9f9 	bl	801ed80 <lv_style_set_outline_color>
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
 802098e:	4b4c      	ldr	r3, [pc, #304]	; (8020ac0 <bar_init+0x1f8>)
 8020990:	681b      	ldr	r3, [r3, #0]
 8020992:	3328      	adds	r3, #40	; 0x28
 8020994:	2200      	movs	r2, #0
 8020996:	2100      	movs	r1, #0
 8020998:	4618      	mov	r0, r3
 802099a:	f7fe fa08 	bl	801edae <lv_style_set_outline_opa>
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_FOCUSED, LV_OPA_50);
 802099e:	4b48      	ldr	r3, [pc, #288]	; (8020ac0 <bar_init+0x1f8>)
 80209a0:	681b      	ldr	r3, [r3, #0]
 80209a2:	3328      	adds	r3, #40	; 0x28
 80209a4:	227f      	movs	r2, #127	; 0x7f
 80209a6:	2102      	movs	r1, #2
 80209a8:	4618      	mov	r0, r3
 80209aa:	f7fe fa00 	bl	801edae <lv_style_set_outline_opa>
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 80209ae:	4b44      	ldr	r3, [pc, #272]	; (8020ac0 <bar_init+0x1f8>)
 80209b0:	681b      	ldr	r3, [r3, #0]
 80209b2:	f103 0528 	add.w	r5, r3, #40	; 0x28
 80209b6:	4b43      	ldr	r3, [pc, #268]	; (8020ac4 <bar_init+0x1fc>)
 80209b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80209ba:	f003 0320 	and.w	r3, r3, #32
 80209be:	2b00      	cmp	r3, #0
 80209c0:	d118      	bne.n	80209f4 <bar_init+0x12c>
 80209c2:	2000      	movs	r0, #0
 80209c4:	f7f9 fd24 	bl	801a410 <lv_disp_get_dpi>
 80209c8:	4603      	mov	r3, r0
 80209ca:	3328      	adds	r3, #40	; 0x28
 80209cc:	005b      	lsls	r3, r3, #1
 80209ce:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80209d2:	db0d      	blt.n	80209f0 <bar_init+0x128>
 80209d4:	2000      	movs	r0, #0
 80209d6:	f7f9 fd1b 	bl	801a410 <lv_disp_get_dpi>
 80209da:	4603      	mov	r3, r0
 80209dc:	3328      	adds	r3, #40	; 0x28
 80209de:	005b      	lsls	r3, r3, #1
 80209e0:	4a3c      	ldr	r2, [pc, #240]	; (8020ad4 <bar_init+0x20c>)
 80209e2:	fb82 1203 	smull	r1, r2, r2, r3
 80209e6:	1192      	asrs	r2, r2, #6
 80209e8:	17db      	asrs	r3, r3, #31
 80209ea:	1ad3      	subs	r3, r2, r3
 80209ec:	b21b      	sxth	r3, r3
 80209ee:	e002      	b.n	80209f6 <bar_init+0x12e>
 80209f0:	2301      	movs	r3, #1
 80209f2:	e000      	b.n	80209f6 <bar_init+0x12e>
 80209f4:	2300      	movs	r3, #0
 80209f6:	461a      	mov	r2, r3
 80209f8:	2100      	movs	r1, #0
 80209fa:	4628      	mov	r0, r5
 80209fc:	f7fe f98e 	bl	801ed1c <lv_style_set_outline_width>
    lv_style_set_transition_time(&styles->bar_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
 8020a00:	4b2f      	ldr	r3, [pc, #188]	; (8020ac0 <bar_init+0x1f8>)
 8020a02:	681b      	ldr	r3, [r3, #0]
 8020a04:	3328      	adds	r3, #40	; 0x28
 8020a06:	2200      	movs	r2, #0
 8020a08:	2100      	movs	r1, #0
 8020a0a:	4618      	mov	r0, r3
 8020a0c:	f7fe fbbe 	bl	801f18c <lv_style_set_transition_time>
    lv_style_set_transition_prop_6(&styles->bar_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
 8020a10:	4b2b      	ldr	r3, [pc, #172]	; (8020ac0 <bar_init+0x1f8>)
 8020a12:	681b      	ldr	r3, [r3, #0]
 8020a14:	3328      	adds	r3, #40	; 0x28
 8020a16:	224c      	movs	r2, #76	; 0x4c
 8020a18:	2100      	movs	r1, #0
 8020a1a:	4618      	mov	r0, r3
 8020a1c:	f7fe fc33 	bl	801f286 <lv_style_set_transition_prop_6>

    style_init_reset(&styles->bar_indic);
 8020a20:	4b27      	ldr	r3, [pc, #156]	; (8020ac0 <bar_init+0x1f8>)
 8020a22:	681b      	ldr	r3, [r3, #0]
 8020a24:	332c      	adds	r3, #44	; 0x2c
 8020a26:	4618      	mov	r0, r3
 8020a28:	f004 fd02 	bl	8025430 <style_init_reset>
    lv_style_set_bg_opa(&styles->bar_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
 8020a2c:	4b24      	ldr	r3, [pc, #144]	; (8020ac0 <bar_init+0x1f8>)
 8020a2e:	681b      	ldr	r3, [r3, #0]
 8020a30:	332c      	adds	r3, #44	; 0x2c
 8020a32:	22ff      	movs	r2, #255	; 0xff
 8020a34:	2100      	movs	r1, #0
 8020a36:	4618      	mov	r0, r3
 8020a38:	f7fe f8de 	bl	801ebf8 <lv_style_set_bg_opa>
    lv_style_set_radius(&styles->bar_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8020a3c:	4b20      	ldr	r3, [pc, #128]	; (8020ac0 <bar_init+0x1f8>)
 8020a3e:	681b      	ldr	r3, [r3, #0]
 8020a40:	332c      	adds	r3, #44	; 0x2c
 8020a42:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020a46:	2100      	movs	r1, #0
 8020a48:	4618      	mov	r0, r3
 8020a4a:	f7fd ff79 	bl	801e940 <lv_style_set_radius>
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DEFAULT, theme.color_primary);
 8020a4e:	4b1c      	ldr	r3, [pc, #112]	; (8020ac0 <bar_init+0x1f8>)
 8020a50:	681b      	ldr	r3, [r3, #0]
 8020a52:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8020a56:	4b1b      	ldr	r3, [pc, #108]	; (8020ac4 <bar_init+0x1fc>)
 8020a58:	68da      	ldr	r2, [r3, #12]
 8020a5a:	2100      	movs	r1, #0
 8020a5c:	f7fe f8b5 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DISABLED, lv_color_hex3(0x888));
 8020a60:	4b17      	ldr	r3, [pc, #92]	; (8020ac0 <bar_init+0x1f8>)
 8020a62:	681b      	ldr	r3, [r3, #0]
 8020a64:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8020a68:	f640 0088 	movw	r0, #2184	; 0x888
 8020a6c:	f7fd ff36 	bl	801e8dc <lv_color_hex3>
 8020a70:	4603      	mov	r3, r0
 8020a72:	461a      	mov	r2, r3
 8020a74:	2120      	movs	r1, #32
 8020a76:	4628      	mov	r0, r5
 8020a78:	f7fe f8a7 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
 8020a7c:	4b10      	ldr	r3, [pc, #64]	; (8020ac0 <bar_init+0x1f8>)
 8020a7e:	681b      	ldr	r3, [r3, #0]
 8020a80:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8020a84:	4b0f      	ldr	r3, [pc, #60]	; (8020ac4 <bar_init+0x1fc>)
 8020a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020a88:	f003 0302 	and.w	r3, r3, #2
 8020a8c:	2b00      	cmp	r3, #0
 8020a8e:	d004      	beq.n	8020a9a <bar_init+0x1d2>
 8020a90:	4811      	ldr	r0, [pc, #68]	; (8020ad8 <bar_init+0x210>)
 8020a92:	f7fd ff0f 	bl	801e8b4 <lv_color_hex>
 8020a96:	4604      	mov	r4, r0
 8020a98:	e00b      	b.n	8020ab2 <bar_init+0x1ea>
 8020a9a:	4623      	mov	r3, r4
 8020a9c:	f043 04ff 	orr.w	r4, r3, #255	; 0xff
 8020aa0:	4623      	mov	r3, r4
 8020aa2:	f443 447f 	orr.w	r4, r3, #65280	; 0xff00
 8020aa6:	4623      	mov	r3, r4
 8020aa8:	f443 047f 	orr.w	r4, r3, #16711680	; 0xff0000
 8020aac:	4623      	mov	r3, r4
 8020aae:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 8020ab2:	4622      	mov	r2, r4
 8020ab4:	2100      	movs	r1, #0
 8020ab6:	4628      	mov	r0, r5
 8020ab8:	f7fe fa20 	bl	801eefc <lv_style_set_value_color>
#endif
}
 8020abc:	bf00      	nop
 8020abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020ac0:	20021498 	.word	0x20021498
 8020ac4:	2002146c 	.word	0x2002146c
 8020ac8:	00d4d7d9 	.word	0x00d4d7d9
 8020acc:	0045494d 	.word	0x0045494d
 8020ad0:	0031404f 	.word	0x0031404f
 8020ad4:	66666667 	.word	0x66666667
 8020ad8:	0041404f 	.word	0x0041404f

08020adc <img_init>:

static void img_init(void)
{
 8020adc:	b480      	push	{r7}
 8020ade:	af00      	add	r7, sp, #0
#if LV_USE_IMG != 0

#endif
}
 8020ae0:	bf00      	nop
 8020ae2:	46bd      	mov	sp, r7
 8020ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ae8:	4770      	bx	lr

08020aea <line_init>:

static void line_init(void)
{
 8020aea:	b480      	push	{r7}
 8020aec:	af00      	add	r7, sp, #0
#if LV_USE_LINE != 0

#endif
}
 8020aee:	bf00      	nop
 8020af0:	46bd      	mov	sp, r7
 8020af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020af6:	4770      	bx	lr

08020af8 <led_init>:

static void led_init(void)
{
 8020af8:	b598      	push	{r3, r4, r7, lr}
 8020afa:	af00      	add	r7, sp, #0
#if LV_USE_LED != 0
    style_init_reset(&styles->led);
 8020afc:	4b4b      	ldr	r3, [pc, #300]	; (8020c2c <led_init+0x134>)
 8020afe:	681b      	ldr	r3, [r3, #0]
 8020b00:	3370      	adds	r3, #112	; 0x70
 8020b02:	4618      	mov	r0, r3
 8020b04:	f004 fc94 	bl	8025430 <style_init_reset>
    lv_style_set_bg_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_COVER);
 8020b08:	4b48      	ldr	r3, [pc, #288]	; (8020c2c <led_init+0x134>)
 8020b0a:	681b      	ldr	r3, [r3, #0]
 8020b0c:	3370      	adds	r3, #112	; 0x70
 8020b0e:	22ff      	movs	r2, #255	; 0xff
 8020b10:	2100      	movs	r1, #0
 8020b12:	4618      	mov	r0, r3
 8020b14:	f7fe f870 	bl	801ebf8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
 8020b18:	4b44      	ldr	r3, [pc, #272]	; (8020c2c <led_init+0x134>)
 8020b1a:	681b      	ldr	r3, [r3, #0]
 8020b1c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8020b20:	4b43      	ldr	r3, [pc, #268]	; (8020c30 <led_init+0x138>)
 8020b22:	68da      	ldr	r2, [r3, #12]
 8020b24:	2100      	movs	r1, #0
 8020b26:	f7fe f850 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_border_width(&styles->led, LV_STATE_DEFAULT, 2);
 8020b2a:	4b40      	ldr	r3, [pc, #256]	; (8020c2c <led_init+0x134>)
 8020b2c:	681b      	ldr	r3, [r3, #0]
 8020b2e:	3370      	adds	r3, #112	; 0x70
 8020b30:	2202      	movs	r2, #2
 8020b32:	2100      	movs	r1, #0
 8020b34:	4618      	mov	r0, r3
 8020b36:	f7fe f877 	bl	801ec28 <lv_style_set_border_width>
    lv_style_set_border_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_50);
 8020b3a:	4b3c      	ldr	r3, [pc, #240]	; (8020c2c <led_init+0x134>)
 8020b3c:	681b      	ldr	r3, [r3, #0]
 8020b3e:	3370      	adds	r3, #112	; 0x70
 8020b40:	227f      	movs	r2, #127	; 0x7f
 8020b42:	2100      	movs	r1, #0
 8020b44:	4618      	mov	r0, r3
 8020b46:	f7fe f8d1 	bl	801ecec <lv_style_set_border_opa>
    lv_style_set_border_color(&styles->led, LV_STATE_DEFAULT, lv_color_lighten(theme.color_primary, LV_OPA_30));
 8020b4a:	4b38      	ldr	r3, [pc, #224]	; (8020c2c <led_init+0x134>)
 8020b4c:	681b      	ldr	r3, [r3, #0]
 8020b4e:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8020b52:	4b37      	ldr	r3, [pc, #220]	; (8020c30 <led_init+0x138>)
 8020b54:	214c      	movs	r1, #76	; 0x4c
 8020b56:	68d8      	ldr	r0, [r3, #12]
 8020b58:	f7fa ffc0 	bl	801badc <lv_color_lighten>
 8020b5c:	4603      	mov	r3, r0
 8020b5e:	461a      	mov	r2, r3
 8020b60:	2100      	movs	r1, #0
 8020b62:	4620      	mov	r0, r4
 8020b64:	f7fe f8ab 	bl	801ecbe <lv_style_set_border_color>
    lv_style_set_radius(&styles->led, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8020b68:	4b30      	ldr	r3, [pc, #192]	; (8020c2c <led_init+0x134>)
 8020b6a:	681b      	ldr	r3, [r3, #0]
 8020b6c:	3370      	adds	r3, #112	; 0x70
 8020b6e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020b72:	2100      	movs	r1, #0
 8020b74:	4618      	mov	r0, r3
 8020b76:	f7fd fee3 	bl	801e940 <lv_style_set_radius>
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
 8020b7a:	4b2c      	ldr	r3, [pc, #176]	; (8020c2c <led_init+0x134>)
 8020b7c:	681b      	ldr	r3, [r3, #0]
 8020b7e:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8020b82:	2000      	movs	r0, #0
 8020b84:	f7f9 fc44 	bl	801a410 <lv_disp_get_dpi>
 8020b88:	4603      	mov	r3, r0
 8020b8a:	461a      	mov	r2, r3
 8020b8c:	4613      	mov	r3, r2
 8020b8e:	011b      	lsls	r3, r3, #4
 8020b90:	1a9b      	subs	r3, r3, r2
 8020b92:	3350      	adds	r3, #80	; 0x50
 8020b94:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020b98:	db10      	blt.n	8020bbc <led_init+0xc4>
 8020b9a:	2000      	movs	r0, #0
 8020b9c:	f7f9 fc38 	bl	801a410 <lv_disp_get_dpi>
 8020ba0:	4603      	mov	r3, r0
 8020ba2:	461a      	mov	r2, r3
 8020ba4:	4613      	mov	r3, r2
 8020ba6:	011b      	lsls	r3, r3, #4
 8020ba8:	1a9b      	subs	r3, r3, r2
 8020baa:	3350      	adds	r3, #80	; 0x50
 8020bac:	4a21      	ldr	r2, [pc, #132]	; (8020c34 <led_init+0x13c>)
 8020bae:	fb82 1203 	smull	r1, r2, r2, r3
 8020bb2:	1192      	asrs	r2, r2, #6
 8020bb4:	17db      	asrs	r3, r3, #31
 8020bb6:	1ad3      	subs	r3, r2, r3
 8020bb8:	b21b      	sxth	r3, r3
 8020bba:	e000      	b.n	8020bbe <led_init+0xc6>
 8020bbc:	2301      	movs	r3, #1
 8020bbe:	461a      	mov	r2, r3
 8020bc0:	2100      	movs	r1, #0
 8020bc2:	4620      	mov	r0, r4
 8020bc4:	f7fe f90b 	bl	801edde <lv_style_set_shadow_width>
    lv_style_set_shadow_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
 8020bc8:	4b18      	ldr	r3, [pc, #96]	; (8020c2c <led_init+0x134>)
 8020bca:	681b      	ldr	r3, [r3, #0]
 8020bcc:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8020bd0:	4b17      	ldr	r3, [pc, #92]	; (8020c30 <led_init+0x138>)
 8020bd2:	68da      	ldr	r2, [r3, #12]
 8020bd4:	2100      	movs	r1, #0
 8020bd6:	f7fe f934 	bl	801ee42 <lv_style_set_shadow_color>
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
 8020bda:	4b14      	ldr	r3, [pc, #80]	; (8020c2c <led_init+0x134>)
 8020bdc:	681b      	ldr	r3, [r3, #0]
 8020bde:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8020be2:	2000      	movs	r0, #0
 8020be4:	f7f9 fc14 	bl	801a410 <lv_disp_get_dpi>
 8020be8:	4603      	mov	r3, r0
 8020bea:	461a      	mov	r2, r3
 8020bec:	4613      	mov	r3, r2
 8020bee:	009b      	lsls	r3, r3, #2
 8020bf0:	4413      	add	r3, r2
 8020bf2:	3350      	adds	r3, #80	; 0x50
 8020bf4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020bf8:	db10      	blt.n	8020c1c <led_init+0x124>
 8020bfa:	2000      	movs	r0, #0
 8020bfc:	f7f9 fc08 	bl	801a410 <lv_disp_get_dpi>
 8020c00:	4603      	mov	r3, r0
 8020c02:	461a      	mov	r2, r3
 8020c04:	4613      	mov	r3, r2
 8020c06:	009b      	lsls	r3, r3, #2
 8020c08:	4413      	add	r3, r2
 8020c0a:	3350      	adds	r3, #80	; 0x50
 8020c0c:	4a09      	ldr	r2, [pc, #36]	; (8020c34 <led_init+0x13c>)
 8020c0e:	fb82 1203 	smull	r1, r2, r2, r3
 8020c12:	1192      	asrs	r2, r2, #6
 8020c14:	17db      	asrs	r3, r3, #31
 8020c16:	1ad3      	subs	r3, r2, r3
 8020c18:	b21b      	sxth	r3, r3
 8020c1a:	e000      	b.n	8020c1e <led_init+0x126>
 8020c1c:	2301      	movs	r3, #1
 8020c1e:	461a      	mov	r2, r3
 8020c20:	2100      	movs	r1, #0
 8020c22:	4620      	mov	r0, r4
 8020c24:	f7fe f8f4 	bl	801ee10 <lv_style_set_shadow_spread>
#endif
}
 8020c28:	bf00      	nop
 8020c2a:	bd98      	pop	{r3, r4, r7, pc}
 8020c2c:	20021498 	.word	0x20021498
 8020c30:	2002146c 	.word	0x2002146c
 8020c34:	66666667 	.word	0x66666667

08020c38 <slider_init>:

static void slider_init(void)
{
 8020c38:	b5b0      	push	{r4, r5, r7, lr}
 8020c3a:	af00      	add	r7, sp, #0
#if LV_USE_SLIDER != 0
    style_init_reset(&styles->slider_knob);
 8020c3c:	4bcd      	ldr	r3, [pc, #820]	; (8020f74 <slider_init+0x33c>)
 8020c3e:	681b      	ldr	r3, [r3, #0]
 8020c40:	3394      	adds	r3, #148	; 0x94
 8020c42:	4618      	mov	r0, r3
 8020c44:	f004 fbf4 	bl	8025430 <style_init_reset>
    lv_style_set_bg_opa(&styles->slider_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
 8020c48:	4bca      	ldr	r3, [pc, #808]	; (8020f74 <slider_init+0x33c>)
 8020c4a:	681b      	ldr	r3, [r3, #0]
 8020c4c:	3394      	adds	r3, #148	; 0x94
 8020c4e:	22ff      	movs	r2, #255	; 0xff
 8020c50:	2100      	movs	r1, #0
 8020c52:	4618      	mov	r0, r3
 8020c54:	f7fd ffd0 	bl	801ebf8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
 8020c58:	4bc6      	ldr	r3, [pc, #792]	; (8020f74 <slider_init+0x33c>)
 8020c5a:	681b      	ldr	r3, [r3, #0]
 8020c5c:	f103 0094 	add.w	r0, r3, #148	; 0x94
 8020c60:	4bc5      	ldr	r3, [pc, #788]	; (8020f78 <slider_init+0x340>)
 8020c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020c64:	f003 0302 	and.w	r3, r3, #2
 8020c68:	2b00      	cmp	r3, #0
 8020c6a:	d002      	beq.n	8020c72 <slider_init+0x3a>
 8020c6c:	4bc2      	ldr	r3, [pc, #776]	; (8020f78 <slider_init+0x340>)
 8020c6e:	68dc      	ldr	r4, [r3, #12]
 8020c70:	e00b      	b.n	8020c8a <slider_init+0x52>
 8020c72:	4623      	mov	r3, r4
 8020c74:	f043 04ff 	orr.w	r4, r3, #255	; 0xff
 8020c78:	4623      	mov	r3, r4
 8020c7a:	f443 447f 	orr.w	r4, r3, #65280	; 0xff00
 8020c7e:	4623      	mov	r3, r4
 8020c80:	f443 047f 	orr.w	r4, r3, #16711680	; 0xff0000
 8020c84:	4623      	mov	r3, r4
 8020c86:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 8020c8a:	4622      	mov	r2, r4
 8020c8c:	2100      	movs	r1, #0
 8020c8e:	f7fd ff9c 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
 8020c92:	4bb8      	ldr	r3, [pc, #736]	; (8020f74 <slider_init+0x33c>)
 8020c94:	681b      	ldr	r3, [r3, #0]
 8020c96:	f103 0494 	add.w	r4, r3, #148	; 0x94
 8020c9a:	4bb7      	ldr	r3, [pc, #732]	; (8020f78 <slider_init+0x340>)
 8020c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020c9e:	f003 0302 	and.w	r3, r3, #2
 8020ca2:	2b00      	cmp	r3, #0
 8020ca4:	d004      	beq.n	8020cb0 <slider_init+0x78>
 8020ca6:	48b5      	ldr	r0, [pc, #724]	; (8020f7c <slider_init+0x344>)
 8020ca8:	f7fd fe04 	bl	801e8b4 <lv_color_hex>
 8020cac:	4605      	mov	r5, r0
 8020cae:	e00b      	b.n	8020cc8 <slider_init+0x90>
 8020cb0:	462b      	mov	r3, r5
 8020cb2:	f043 05ff 	orr.w	r5, r3, #255	; 0xff
 8020cb6:	462b      	mov	r3, r5
 8020cb8:	f443 457f 	orr.w	r5, r3, #65280	; 0xff00
 8020cbc:	462b      	mov	r3, r5
 8020cbe:	f443 057f 	orr.w	r5, r3, #16711680	; 0xff0000
 8020cc2:	462b      	mov	r3, r5
 8020cc4:	f043 457f 	orr.w	r5, r3, #4278190080	; 0xff000000
 8020cc8:	462a      	mov	r2, r5
 8020cca:	2100      	movs	r1, #0
 8020ccc:	4620      	mov	r0, r4
 8020cce:	f7fe f915 	bl	801eefc <lv_style_set_value_color>
    lv_style_set_radius(&styles->slider_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8020cd2:	4ba8      	ldr	r3, [pc, #672]	; (8020f74 <slider_init+0x33c>)
 8020cd4:	681b      	ldr	r3, [r3, #0]
 8020cd6:	3394      	adds	r3, #148	; 0x94
 8020cd8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020cdc:	2100      	movs	r1, #0
 8020cde:	4618      	mov	r0, r3
 8020ce0:	f7fd fe2e 	bl	801e940 <lv_style_set_radius>
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8020ce4:	4ba3      	ldr	r3, [pc, #652]	; (8020f74 <slider_init+0x33c>)
 8020ce6:	681b      	ldr	r3, [r3, #0]
 8020ce8:	f103 0494 	add.w	r4, r3, #148	; 0x94
 8020cec:	2000      	movs	r0, #0
 8020cee:	f7f9 fb8f 	bl	801a410 <lv_disp_get_dpi>
 8020cf2:	4603      	mov	r3, r0
 8020cf4:	461a      	mov	r2, r3
 8020cf6:	4613      	mov	r3, r2
 8020cf8:	00db      	lsls	r3, r3, #3
 8020cfa:	1a9b      	subs	r3, r3, r2
 8020cfc:	3350      	adds	r3, #80	; 0x50
 8020cfe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020d02:	db10      	blt.n	8020d26 <slider_init+0xee>
 8020d04:	2000      	movs	r0, #0
 8020d06:	f7f9 fb83 	bl	801a410 <lv_disp_get_dpi>
 8020d0a:	4603      	mov	r3, r0
 8020d0c:	461a      	mov	r2, r3
 8020d0e:	4613      	mov	r3, r2
 8020d10:	00db      	lsls	r3, r3, #3
 8020d12:	1a9b      	subs	r3, r3, r2
 8020d14:	3350      	adds	r3, #80	; 0x50
 8020d16:	4a9a      	ldr	r2, [pc, #616]	; (8020f80 <slider_init+0x348>)
 8020d18:	fb82 1203 	smull	r1, r2, r2, r3
 8020d1c:	1192      	asrs	r2, r2, #6
 8020d1e:	17db      	asrs	r3, r3, #31
 8020d20:	1ad3      	subs	r3, r2, r3
 8020d22:	b21b      	sxth	r3, r3
 8020d24:	e000      	b.n	8020d28 <slider_init+0xf0>
 8020d26:	2301      	movs	r3, #1
 8020d28:	461a      	mov	r2, r3
 8020d2a:	2100      	movs	r1, #0
 8020d2c:	4620      	mov	r0, r4
 8020d2e:	f7fd fe9d 	bl	801ea6c <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8020d32:	4b90      	ldr	r3, [pc, #576]	; (8020f74 <slider_init+0x33c>)
 8020d34:	681b      	ldr	r3, [r3, #0]
 8020d36:	f103 0494 	add.w	r4, r3, #148	; 0x94
 8020d3a:	2000      	movs	r0, #0
 8020d3c:	f7f9 fb68 	bl	801a410 <lv_disp_get_dpi>
 8020d40:	4603      	mov	r3, r0
 8020d42:	461a      	mov	r2, r3
 8020d44:	4613      	mov	r3, r2
 8020d46:	00db      	lsls	r3, r3, #3
 8020d48:	1a9b      	subs	r3, r3, r2
 8020d4a:	3350      	adds	r3, #80	; 0x50
 8020d4c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020d50:	db10      	blt.n	8020d74 <slider_init+0x13c>
 8020d52:	2000      	movs	r0, #0
 8020d54:	f7f9 fb5c 	bl	801a410 <lv_disp_get_dpi>
 8020d58:	4603      	mov	r3, r0
 8020d5a:	461a      	mov	r2, r3
 8020d5c:	4613      	mov	r3, r2
 8020d5e:	00db      	lsls	r3, r3, #3
 8020d60:	1a9b      	subs	r3, r3, r2
 8020d62:	3350      	adds	r3, #80	; 0x50
 8020d64:	4a86      	ldr	r2, [pc, #536]	; (8020f80 <slider_init+0x348>)
 8020d66:	fb82 1203 	smull	r1, r2, r2, r3
 8020d6a:	1192      	asrs	r2, r2, #6
 8020d6c:	17db      	asrs	r3, r3, #31
 8020d6e:	1ad3      	subs	r3, r2, r3
 8020d70:	b21b      	sxth	r3, r3
 8020d72:	e000      	b.n	8020d76 <slider_init+0x13e>
 8020d74:	2301      	movs	r3, #1
 8020d76:	461a      	mov	r2, r3
 8020d78:	2100      	movs	r1, #0
 8020d7a:	4620      	mov	r0, r4
 8020d7c:	f7fd fe8f 	bl	801ea9e <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8020d80:	4b7c      	ldr	r3, [pc, #496]	; (8020f74 <slider_init+0x33c>)
 8020d82:	681b      	ldr	r3, [r3, #0]
 8020d84:	f103 0494 	add.w	r4, r3, #148	; 0x94
 8020d88:	2000      	movs	r0, #0
 8020d8a:	f7f9 fb41 	bl	801a410 <lv_disp_get_dpi>
 8020d8e:	4603      	mov	r3, r0
 8020d90:	461a      	mov	r2, r3
 8020d92:	4613      	mov	r3, r2
 8020d94:	00db      	lsls	r3, r3, #3
 8020d96:	1a9b      	subs	r3, r3, r2
 8020d98:	3350      	adds	r3, #80	; 0x50
 8020d9a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020d9e:	db10      	blt.n	8020dc2 <slider_init+0x18a>
 8020da0:	2000      	movs	r0, #0
 8020da2:	f7f9 fb35 	bl	801a410 <lv_disp_get_dpi>
 8020da6:	4603      	mov	r3, r0
 8020da8:	461a      	mov	r2, r3
 8020daa:	4613      	mov	r3, r2
 8020dac:	00db      	lsls	r3, r3, #3
 8020dae:	1a9b      	subs	r3, r3, r2
 8020db0:	3350      	adds	r3, #80	; 0x50
 8020db2:	4a73      	ldr	r2, [pc, #460]	; (8020f80 <slider_init+0x348>)
 8020db4:	fb82 1203 	smull	r1, r2, r2, r3
 8020db8:	1192      	asrs	r2, r2, #6
 8020dba:	17db      	asrs	r3, r3, #31
 8020dbc:	1ad3      	subs	r3, r2, r3
 8020dbe:	b21b      	sxth	r3, r3
 8020dc0:	e000      	b.n	8020dc4 <slider_init+0x18c>
 8020dc2:	2301      	movs	r3, #1
 8020dc4:	461a      	mov	r2, r3
 8020dc6:	2100      	movs	r1, #0
 8020dc8:	4620      	mov	r0, r4
 8020dca:	f7fd fe1d 	bl	801ea08 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
 8020dce:	4b69      	ldr	r3, [pc, #420]	; (8020f74 <slider_init+0x33c>)
 8020dd0:	681b      	ldr	r3, [r3, #0]
 8020dd2:	f103 0494 	add.w	r4, r3, #148	; 0x94
 8020dd6:	2000      	movs	r0, #0
 8020dd8:	f7f9 fb1a 	bl	801a410 <lv_disp_get_dpi>
 8020ddc:	4603      	mov	r3, r0
 8020dde:	461a      	mov	r2, r3
 8020de0:	4613      	mov	r3, r2
 8020de2:	00db      	lsls	r3, r3, #3
 8020de4:	1a9b      	subs	r3, r3, r2
 8020de6:	3350      	adds	r3, #80	; 0x50
 8020de8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020dec:	db10      	blt.n	8020e10 <slider_init+0x1d8>
 8020dee:	2000      	movs	r0, #0
 8020df0:	f7f9 fb0e 	bl	801a410 <lv_disp_get_dpi>
 8020df4:	4603      	mov	r3, r0
 8020df6:	461a      	mov	r2, r3
 8020df8:	4613      	mov	r3, r2
 8020dfa:	00db      	lsls	r3, r3, #3
 8020dfc:	1a9b      	subs	r3, r3, r2
 8020dfe:	3350      	adds	r3, #80	; 0x50
 8020e00:	4a5f      	ldr	r2, [pc, #380]	; (8020f80 <slider_init+0x348>)
 8020e02:	fb82 1203 	smull	r1, r2, r2, r3
 8020e06:	1192      	asrs	r2, r2, #6
 8020e08:	17db      	asrs	r3, r3, #31
 8020e0a:	1ad3      	subs	r3, r2, r3
 8020e0c:	b21b      	sxth	r3, r3
 8020e0e:	e000      	b.n	8020e12 <slider_init+0x1da>
 8020e10:	2301      	movs	r3, #1
 8020e12:	461a      	mov	r2, r3
 8020e14:	2100      	movs	r1, #0
 8020e16:	4620      	mov	r0, r4
 8020e18:	f7fd fe0f 	bl	801ea3a <lv_style_set_pad_bottom>

    style_init_reset(&styles->slider_bg);
 8020e1c:	4b55      	ldr	r3, [pc, #340]	; (8020f74 <slider_init+0x33c>)
 8020e1e:	681b      	ldr	r3, [r3, #0]
 8020e20:	3398      	adds	r3, #152	; 0x98
 8020e22:	4618      	mov	r0, r3
 8020e24:	f004 fb04 	bl	8025430 <style_init_reset>
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8020e28:	4b52      	ldr	r3, [pc, #328]	; (8020f74 <slider_init+0x33c>)
 8020e2a:	681b      	ldr	r3, [r3, #0]
 8020e2c:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8020e30:	2000      	movs	r0, #0
 8020e32:	f7f9 faed 	bl	801a410 <lv_disp_get_dpi>
 8020e36:	4603      	mov	r3, r0
 8020e38:	461a      	mov	r2, r3
 8020e3a:	4613      	mov	r3, r2
 8020e3c:	009b      	lsls	r3, r3, #2
 8020e3e:	4413      	add	r3, r2
 8020e40:	005b      	lsls	r3, r3, #1
 8020e42:	3350      	adds	r3, #80	; 0x50
 8020e44:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020e48:	db11      	blt.n	8020e6e <slider_init+0x236>
 8020e4a:	2000      	movs	r0, #0
 8020e4c:	f7f9 fae0 	bl	801a410 <lv_disp_get_dpi>
 8020e50:	4603      	mov	r3, r0
 8020e52:	461a      	mov	r2, r3
 8020e54:	4613      	mov	r3, r2
 8020e56:	009b      	lsls	r3, r3, #2
 8020e58:	4413      	add	r3, r2
 8020e5a:	005b      	lsls	r3, r3, #1
 8020e5c:	3350      	adds	r3, #80	; 0x50
 8020e5e:	4a48      	ldr	r2, [pc, #288]	; (8020f80 <slider_init+0x348>)
 8020e60:	fb82 1203 	smull	r1, r2, r2, r3
 8020e64:	1192      	asrs	r2, r2, #6
 8020e66:	17db      	asrs	r3, r3, #31
 8020e68:	1ad3      	subs	r3, r2, r3
 8020e6a:	b21b      	sxth	r3, r3
 8020e6c:	e000      	b.n	8020e70 <slider_init+0x238>
 8020e6e:	2301      	movs	r3, #1
 8020e70:	461a      	mov	r2, r3
 8020e72:	2100      	movs	r1, #0
 8020e74:	4620      	mov	r0, r4
 8020e76:	f7fd fe76 	bl	801eb66 <lv_style_set_margin_left>
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8020e7a:	4b3e      	ldr	r3, [pc, #248]	; (8020f74 <slider_init+0x33c>)
 8020e7c:	681b      	ldr	r3, [r3, #0]
 8020e7e:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8020e82:	2000      	movs	r0, #0
 8020e84:	f7f9 fac4 	bl	801a410 <lv_disp_get_dpi>
 8020e88:	4603      	mov	r3, r0
 8020e8a:	461a      	mov	r2, r3
 8020e8c:	4613      	mov	r3, r2
 8020e8e:	009b      	lsls	r3, r3, #2
 8020e90:	4413      	add	r3, r2
 8020e92:	005b      	lsls	r3, r3, #1
 8020e94:	3350      	adds	r3, #80	; 0x50
 8020e96:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020e9a:	db11      	blt.n	8020ec0 <slider_init+0x288>
 8020e9c:	2000      	movs	r0, #0
 8020e9e:	f7f9 fab7 	bl	801a410 <lv_disp_get_dpi>
 8020ea2:	4603      	mov	r3, r0
 8020ea4:	461a      	mov	r2, r3
 8020ea6:	4613      	mov	r3, r2
 8020ea8:	009b      	lsls	r3, r3, #2
 8020eaa:	4413      	add	r3, r2
 8020eac:	005b      	lsls	r3, r3, #1
 8020eae:	3350      	adds	r3, #80	; 0x50
 8020eb0:	4a33      	ldr	r2, [pc, #204]	; (8020f80 <slider_init+0x348>)
 8020eb2:	fb82 1203 	smull	r1, r2, r2, r3
 8020eb6:	1192      	asrs	r2, r2, #6
 8020eb8:	17db      	asrs	r3, r3, #31
 8020eba:	1ad3      	subs	r3, r2, r3
 8020ebc:	b21b      	sxth	r3, r3
 8020ebe:	e000      	b.n	8020ec2 <slider_init+0x28a>
 8020ec0:	2301      	movs	r3, #1
 8020ec2:	461a      	mov	r2, r3
 8020ec4:	2100      	movs	r1, #0
 8020ec6:	4620      	mov	r0, r4
 8020ec8:	f7fd fe66 	bl	801eb98 <lv_style_set_margin_right>
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8020ecc:	4b29      	ldr	r3, [pc, #164]	; (8020f74 <slider_init+0x33c>)
 8020ece:	681b      	ldr	r3, [r3, #0]
 8020ed0:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8020ed4:	2000      	movs	r0, #0
 8020ed6:	f7f9 fa9b 	bl	801a410 <lv_disp_get_dpi>
 8020eda:	4603      	mov	r3, r0
 8020edc:	461a      	mov	r2, r3
 8020ede:	4613      	mov	r3, r2
 8020ee0:	009b      	lsls	r3, r3, #2
 8020ee2:	4413      	add	r3, r2
 8020ee4:	005b      	lsls	r3, r3, #1
 8020ee6:	3350      	adds	r3, #80	; 0x50
 8020ee8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020eec:	db11      	blt.n	8020f12 <slider_init+0x2da>
 8020eee:	2000      	movs	r0, #0
 8020ef0:	f7f9 fa8e 	bl	801a410 <lv_disp_get_dpi>
 8020ef4:	4603      	mov	r3, r0
 8020ef6:	461a      	mov	r2, r3
 8020ef8:	4613      	mov	r3, r2
 8020efa:	009b      	lsls	r3, r3, #2
 8020efc:	4413      	add	r3, r2
 8020efe:	005b      	lsls	r3, r3, #1
 8020f00:	3350      	adds	r3, #80	; 0x50
 8020f02:	4a1f      	ldr	r2, [pc, #124]	; (8020f80 <slider_init+0x348>)
 8020f04:	fb82 1203 	smull	r1, r2, r2, r3
 8020f08:	1192      	asrs	r2, r2, #6
 8020f0a:	17db      	asrs	r3, r3, #31
 8020f0c:	1ad3      	subs	r3, r2, r3
 8020f0e:	b21b      	sxth	r3, r3
 8020f10:	e000      	b.n	8020f14 <slider_init+0x2dc>
 8020f12:	2301      	movs	r3, #1
 8020f14:	461a      	mov	r2, r3
 8020f16:	2100      	movs	r1, #0
 8020f18:	4620      	mov	r0, r4
 8020f1a:	f7fd fdf2 	bl	801eb02 <lv_style_set_margin_top>
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8020f1e:	4b15      	ldr	r3, [pc, #84]	; (8020f74 <slider_init+0x33c>)
 8020f20:	681b      	ldr	r3, [r3, #0]
 8020f22:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8020f26:	2000      	movs	r0, #0
 8020f28:	f7f9 fa72 	bl	801a410 <lv_disp_get_dpi>
 8020f2c:	4603      	mov	r3, r0
 8020f2e:	461a      	mov	r2, r3
 8020f30:	4613      	mov	r3, r2
 8020f32:	009b      	lsls	r3, r3, #2
 8020f34:	4413      	add	r3, r2
 8020f36:	005b      	lsls	r3, r3, #1
 8020f38:	3350      	adds	r3, #80	; 0x50
 8020f3a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020f3e:	db11      	blt.n	8020f64 <slider_init+0x32c>
 8020f40:	2000      	movs	r0, #0
 8020f42:	f7f9 fa65 	bl	801a410 <lv_disp_get_dpi>
 8020f46:	4603      	mov	r3, r0
 8020f48:	461a      	mov	r2, r3
 8020f4a:	4613      	mov	r3, r2
 8020f4c:	009b      	lsls	r3, r3, #2
 8020f4e:	4413      	add	r3, r2
 8020f50:	005b      	lsls	r3, r3, #1
 8020f52:	3350      	adds	r3, #80	; 0x50
 8020f54:	4a0a      	ldr	r2, [pc, #40]	; (8020f80 <slider_init+0x348>)
 8020f56:	fb82 1203 	smull	r1, r2, r2, r3
 8020f5a:	1192      	asrs	r2, r2, #6
 8020f5c:	17db      	asrs	r3, r3, #31
 8020f5e:	1ad3      	subs	r3, r2, r3
 8020f60:	b21b      	sxth	r3, r3
 8020f62:	e000      	b.n	8020f66 <slider_init+0x32e>
 8020f64:	2301      	movs	r3, #1
 8020f66:	461a      	mov	r2, r3
 8020f68:	2100      	movs	r1, #0
 8020f6a:	4620      	mov	r0, r4
 8020f6c:	f7fd fde2 	bl	801eb34 <lv_style_set_margin_bottom>

#endif
}
 8020f70:	bf00      	nop
 8020f72:	bdb0      	pop	{r4, r5, r7, pc}
 8020f74:	20021498 	.word	0x20021498
 8020f78:	2002146c 	.word	0x2002146c
 8020f7c:	0031404f 	.word	0x0031404f
 8020f80:	66666667 	.word	0x66666667

08020f84 <switch_init>:

static void switch_init(void)
{
 8020f84:	b598      	push	{r3, r4, r7, lr}
 8020f86:	af00      	add	r7, sp, #0
#if LV_USE_SWITCH != 0
    style_init_reset(&styles->sw_knob);
 8020f88:	4b5a      	ldr	r3, [pc, #360]	; (80210f4 <switch_init+0x170>)
 8020f8a:	681b      	ldr	r3, [r3, #0]
 8020f8c:	33a0      	adds	r3, #160	; 0xa0
 8020f8e:	4618      	mov	r0, r3
 8020f90:	f004 fa4e 	bl	8025430 <style_init_reset>
    lv_style_set_bg_opa(&styles->sw_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
 8020f94:	4b57      	ldr	r3, [pc, #348]	; (80210f4 <switch_init+0x170>)
 8020f96:	681b      	ldr	r3, [r3, #0]
 8020f98:	33a0      	adds	r3, #160	; 0xa0
 8020f9a:	22ff      	movs	r2, #255	; 0xff
 8020f9c:	2100      	movs	r1, #0
 8020f9e:	4618      	mov	r0, r3
 8020fa0:	f7fd fe2a 	bl	801ebf8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->sw_knob, LV_STATE_DEFAULT, LV_COLOR_WHITE);
 8020fa4:	4b53      	ldr	r3, [pc, #332]	; (80210f4 <switch_init+0x170>)
 8020fa6:	681b      	ldr	r3, [r3, #0]
 8020fa8:	33a0      	adds	r3, #160	; 0xa0
 8020faa:	4622      	mov	r2, r4
 8020fac:	f042 04ff 	orr.w	r4, r2, #255	; 0xff
 8020fb0:	4622      	mov	r2, r4
 8020fb2:	f442 447f 	orr.w	r4, r2, #65280	; 0xff00
 8020fb6:	4622      	mov	r2, r4
 8020fb8:	f442 047f 	orr.w	r4, r2, #16711680	; 0xff0000
 8020fbc:	4622      	mov	r2, r4
 8020fbe:	f042 447f 	orr.w	r4, r2, #4278190080	; 0xff000000
 8020fc2:	4622      	mov	r2, r4
 8020fc4:	2100      	movs	r1, #0
 8020fc6:	4618      	mov	r0, r3
 8020fc8:	f7fd fdff 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_radius(&styles->sw_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8020fcc:	4b49      	ldr	r3, [pc, #292]	; (80210f4 <switch_init+0x170>)
 8020fce:	681b      	ldr	r3, [r3, #0]
 8020fd0:	33a0      	adds	r3, #160	; 0xa0
 8020fd2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020fd6:	2100      	movs	r1, #0
 8020fd8:	4618      	mov	r0, r3
 8020fda:	f7fd fcb1 	bl	801e940 <lv_style_set_radius>
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
 8020fde:	4b45      	ldr	r3, [pc, #276]	; (80210f4 <switch_init+0x170>)
 8020fe0:	681b      	ldr	r3, [r3, #0]
 8020fe2:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8020fe6:	2000      	movs	r0, #0
 8020fe8:	f7f9 fa12 	bl	801a410 <lv_disp_get_dpi>
 8020fec:	4603      	mov	r3, r0
 8020fee:	3314      	adds	r3, #20
 8020ff0:	009b      	lsls	r3, r3, #2
 8020ff2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8020ff6:	db0d      	blt.n	8021014 <switch_init+0x90>
 8020ff8:	2000      	movs	r0, #0
 8020ffa:	f7f9 fa09 	bl	801a410 <lv_disp_get_dpi>
 8020ffe:	4603      	mov	r3, r0
 8021000:	3314      	adds	r3, #20
 8021002:	009b      	lsls	r3, r3, #2
 8021004:	4a3c      	ldr	r2, [pc, #240]	; (80210f8 <switch_init+0x174>)
 8021006:	fb82 1203 	smull	r1, r2, r2, r3
 802100a:	1192      	asrs	r2, r2, #6
 802100c:	17db      	asrs	r3, r3, #31
 802100e:	1a9b      	subs	r3, r3, r2
 8021010:	b21b      	sxth	r3, r3
 8021012:	e001      	b.n	8021018 <switch_init+0x94>
 8021014:	f04f 33ff 	mov.w	r3, #4294967295
 8021018:	461a      	mov	r2, r3
 802101a:	2100      	movs	r1, #0
 802101c:	4620      	mov	r0, r4
 802101e:	f7fd fcf3 	bl	801ea08 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
 8021022:	4b34      	ldr	r3, [pc, #208]	; (80210f4 <switch_init+0x170>)
 8021024:	681b      	ldr	r3, [r3, #0]
 8021026:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 802102a:	2000      	movs	r0, #0
 802102c:	f7f9 f9f0 	bl	801a410 <lv_disp_get_dpi>
 8021030:	4603      	mov	r3, r0
 8021032:	3314      	adds	r3, #20
 8021034:	009b      	lsls	r3, r3, #2
 8021036:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802103a:	db0d      	blt.n	8021058 <switch_init+0xd4>
 802103c:	2000      	movs	r0, #0
 802103e:	f7f9 f9e7 	bl	801a410 <lv_disp_get_dpi>
 8021042:	4603      	mov	r3, r0
 8021044:	3314      	adds	r3, #20
 8021046:	009b      	lsls	r3, r3, #2
 8021048:	4a2b      	ldr	r2, [pc, #172]	; (80210f8 <switch_init+0x174>)
 802104a:	fb82 1203 	smull	r1, r2, r2, r3
 802104e:	1192      	asrs	r2, r2, #6
 8021050:	17db      	asrs	r3, r3, #31
 8021052:	1a9b      	subs	r3, r3, r2
 8021054:	b21b      	sxth	r3, r3
 8021056:	e001      	b.n	802105c <switch_init+0xd8>
 8021058:	f04f 33ff 	mov.w	r3, #4294967295
 802105c:	461a      	mov	r2, r3
 802105e:	2100      	movs	r1, #0
 8021060:	4620      	mov	r0, r4
 8021062:	f7fd fcea 	bl	801ea3a <lv_style_set_pad_bottom>
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
 8021066:	4b23      	ldr	r3, [pc, #140]	; (80210f4 <switch_init+0x170>)
 8021068:	681b      	ldr	r3, [r3, #0]
 802106a:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 802106e:	2000      	movs	r0, #0
 8021070:	f7f9 f9ce 	bl	801a410 <lv_disp_get_dpi>
 8021074:	4603      	mov	r3, r0
 8021076:	3314      	adds	r3, #20
 8021078:	009b      	lsls	r3, r3, #2
 802107a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802107e:	db0d      	blt.n	802109c <switch_init+0x118>
 8021080:	2000      	movs	r0, #0
 8021082:	f7f9 f9c5 	bl	801a410 <lv_disp_get_dpi>
 8021086:	4603      	mov	r3, r0
 8021088:	3314      	adds	r3, #20
 802108a:	009b      	lsls	r3, r3, #2
 802108c:	4a1a      	ldr	r2, [pc, #104]	; (80210f8 <switch_init+0x174>)
 802108e:	fb82 1203 	smull	r1, r2, r2, r3
 8021092:	1192      	asrs	r2, r2, #6
 8021094:	17db      	asrs	r3, r3, #31
 8021096:	1a9b      	subs	r3, r3, r2
 8021098:	b21b      	sxth	r3, r3
 802109a:	e001      	b.n	80210a0 <switch_init+0x11c>
 802109c:	f04f 33ff 	mov.w	r3, #4294967295
 80210a0:	461a      	mov	r2, r3
 80210a2:	2100      	movs	r1, #0
 80210a4:	4620      	mov	r0, r4
 80210a6:	f7fd fce1 	bl	801ea6c <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
 80210aa:	4b12      	ldr	r3, [pc, #72]	; (80210f4 <switch_init+0x170>)
 80210ac:	681b      	ldr	r3, [r3, #0]
 80210ae:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80210b2:	2000      	movs	r0, #0
 80210b4:	f7f9 f9ac 	bl	801a410 <lv_disp_get_dpi>
 80210b8:	4603      	mov	r3, r0
 80210ba:	3314      	adds	r3, #20
 80210bc:	009b      	lsls	r3, r3, #2
 80210be:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80210c2:	db0d      	blt.n	80210e0 <switch_init+0x15c>
 80210c4:	2000      	movs	r0, #0
 80210c6:	f7f9 f9a3 	bl	801a410 <lv_disp_get_dpi>
 80210ca:	4603      	mov	r3, r0
 80210cc:	3314      	adds	r3, #20
 80210ce:	009b      	lsls	r3, r3, #2
 80210d0:	4a09      	ldr	r2, [pc, #36]	; (80210f8 <switch_init+0x174>)
 80210d2:	fb82 1203 	smull	r1, r2, r2, r3
 80210d6:	1192      	asrs	r2, r2, #6
 80210d8:	17db      	asrs	r3, r3, #31
 80210da:	1a9b      	subs	r3, r3, r2
 80210dc:	b21b      	sxth	r3, r3
 80210de:	e001      	b.n	80210e4 <switch_init+0x160>
 80210e0:	f04f 33ff 	mov.w	r3, #4294967295
 80210e4:	461a      	mov	r2, r3
 80210e6:	2100      	movs	r1, #0
 80210e8:	4620      	mov	r0, r4
 80210ea:	f7fd fcd8 	bl	801ea9e <lv_style_set_pad_right>
#endif
}
 80210ee:	bf00      	nop
 80210f0:	bd98      	pop	{r3, r4, r7, pc}
 80210f2:	bf00      	nop
 80210f4:	20021498 	.word	0x20021498
 80210f8:	66666667 	.word	0x66666667

080210fc <linemeter_init>:

static void linemeter_init(void)
{
 80210fc:	b598      	push	{r3, r4, r7, lr}
 80210fe:	af00      	add	r7, sp, #0
#if LV_USE_LINEMETER != 0
    style_init_reset(&styles->lmeter);
 8021100:	4ba7      	ldr	r3, [pc, #668]	; (80213a0 <linemeter_init+0x2a4>)
 8021102:	681b      	ldr	r3, [r3, #0]
 8021104:	3374      	adds	r3, #116	; 0x74
 8021106:	4618      	mov	r0, r3
 8021108:	f004 f992 	bl	8025430 <style_init_reset>
    lv_style_set_radius(&styles->lmeter, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 802110c:	4ba4      	ldr	r3, [pc, #656]	; (80213a0 <linemeter_init+0x2a4>)
 802110e:	681b      	ldr	r3, [r3, #0]
 8021110:	3374      	adds	r3, #116	; 0x74
 8021112:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8021116:	2100      	movs	r1, #0
 8021118:	4618      	mov	r0, r3
 802111a:	f7fd fc11 	bl	801e940 <lv_style_set_radius>
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
 802111e:	4ba0      	ldr	r3, [pc, #640]	; (80213a0 <linemeter_init+0x2a4>)
 8021120:	681b      	ldr	r3, [r3, #0]
 8021122:	f103 0474 	add.w	r4, r3, #116	; 0x74
 8021126:	2000      	movs	r0, #0
 8021128:	f7f9 f972 	bl	801a410 <lv_disp_get_dpi>
 802112c:	4603      	mov	r3, r0
 802112e:	461a      	mov	r2, r3
 8021130:	4613      	mov	r3, r2
 8021132:	009b      	lsls	r3, r3, #2
 8021134:	4413      	add	r3, r2
 8021136:	009b      	lsls	r3, r3, #2
 8021138:	3350      	adds	r3, #80	; 0x50
 802113a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802113e:	db11      	blt.n	8021164 <linemeter_init+0x68>
 8021140:	2000      	movs	r0, #0
 8021142:	f7f9 f965 	bl	801a410 <lv_disp_get_dpi>
 8021146:	4603      	mov	r3, r0
 8021148:	461a      	mov	r2, r3
 802114a:	4613      	mov	r3, r2
 802114c:	009b      	lsls	r3, r3, #2
 802114e:	4413      	add	r3, r2
 8021150:	009b      	lsls	r3, r3, #2
 8021152:	3350      	adds	r3, #80	; 0x50
 8021154:	4a93      	ldr	r2, [pc, #588]	; (80213a4 <linemeter_init+0x2a8>)
 8021156:	fb82 1203 	smull	r1, r2, r2, r3
 802115a:	1192      	asrs	r2, r2, #6
 802115c:	17db      	asrs	r3, r3, #31
 802115e:	1ad3      	subs	r3, r2, r3
 8021160:	b21b      	sxth	r3, r3
 8021162:	e000      	b.n	8021166 <linemeter_init+0x6a>
 8021164:	2301      	movs	r3, #1
 8021166:	461a      	mov	r2, r3
 8021168:	2100      	movs	r1, #0
 802116a:	4620      	mov	r0, r4
 802116c:	f7fd fc7e 	bl	801ea6c <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
 8021170:	4b8b      	ldr	r3, [pc, #556]	; (80213a0 <linemeter_init+0x2a4>)
 8021172:	681b      	ldr	r3, [r3, #0]
 8021174:	f103 0474 	add.w	r4, r3, #116	; 0x74
 8021178:	2000      	movs	r0, #0
 802117a:	f7f9 f949 	bl	801a410 <lv_disp_get_dpi>
 802117e:	4603      	mov	r3, r0
 8021180:	461a      	mov	r2, r3
 8021182:	4613      	mov	r3, r2
 8021184:	009b      	lsls	r3, r3, #2
 8021186:	4413      	add	r3, r2
 8021188:	009b      	lsls	r3, r3, #2
 802118a:	3350      	adds	r3, #80	; 0x50
 802118c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021190:	db11      	blt.n	80211b6 <linemeter_init+0xba>
 8021192:	2000      	movs	r0, #0
 8021194:	f7f9 f93c 	bl	801a410 <lv_disp_get_dpi>
 8021198:	4603      	mov	r3, r0
 802119a:	461a      	mov	r2, r3
 802119c:	4613      	mov	r3, r2
 802119e:	009b      	lsls	r3, r3, #2
 80211a0:	4413      	add	r3, r2
 80211a2:	009b      	lsls	r3, r3, #2
 80211a4:	3350      	adds	r3, #80	; 0x50
 80211a6:	4a7f      	ldr	r2, [pc, #508]	; (80213a4 <linemeter_init+0x2a8>)
 80211a8:	fb82 1203 	smull	r1, r2, r2, r3
 80211ac:	1192      	asrs	r2, r2, #6
 80211ae:	17db      	asrs	r3, r3, #31
 80211b0:	1ad3      	subs	r3, r2, r3
 80211b2:	b21b      	sxth	r3, r3
 80211b4:	e000      	b.n	80211b8 <linemeter_init+0xbc>
 80211b6:	2301      	movs	r3, #1
 80211b8:	461a      	mov	r2, r3
 80211ba:	2100      	movs	r1, #0
 80211bc:	4620      	mov	r0, r4
 80211be:	f7fd fc6e 	bl	801ea9e <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
 80211c2:	4b77      	ldr	r3, [pc, #476]	; (80213a0 <linemeter_init+0x2a4>)
 80211c4:	681b      	ldr	r3, [r3, #0]
 80211c6:	f103 0474 	add.w	r4, r3, #116	; 0x74
 80211ca:	2000      	movs	r0, #0
 80211cc:	f7f9 f920 	bl	801a410 <lv_disp_get_dpi>
 80211d0:	4603      	mov	r3, r0
 80211d2:	461a      	mov	r2, r3
 80211d4:	4613      	mov	r3, r2
 80211d6:	009b      	lsls	r3, r3, #2
 80211d8:	4413      	add	r3, r2
 80211da:	009b      	lsls	r3, r3, #2
 80211dc:	3350      	adds	r3, #80	; 0x50
 80211de:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80211e2:	db11      	blt.n	8021208 <linemeter_init+0x10c>
 80211e4:	2000      	movs	r0, #0
 80211e6:	f7f9 f913 	bl	801a410 <lv_disp_get_dpi>
 80211ea:	4603      	mov	r3, r0
 80211ec:	461a      	mov	r2, r3
 80211ee:	4613      	mov	r3, r2
 80211f0:	009b      	lsls	r3, r3, #2
 80211f2:	4413      	add	r3, r2
 80211f4:	009b      	lsls	r3, r3, #2
 80211f6:	3350      	adds	r3, #80	; 0x50
 80211f8:	4a6a      	ldr	r2, [pc, #424]	; (80213a4 <linemeter_init+0x2a8>)
 80211fa:	fb82 1203 	smull	r1, r2, r2, r3
 80211fe:	1192      	asrs	r2, r2, #6
 8021200:	17db      	asrs	r3, r3, #31
 8021202:	1ad3      	subs	r3, r2, r3
 8021204:	b21b      	sxth	r3, r3
 8021206:	e000      	b.n	802120a <linemeter_init+0x10e>
 8021208:	2301      	movs	r3, #1
 802120a:	461a      	mov	r2, r3
 802120c:	2100      	movs	r1, #0
 802120e:	4620      	mov	r0, r4
 8021210:	f7fd fbfa 	bl	801ea08 <lv_style_set_pad_top>
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
 8021214:	4b62      	ldr	r3, [pc, #392]	; (80213a0 <linemeter_init+0x2a4>)
 8021216:	681b      	ldr	r3, [r3, #0]
 8021218:	f103 0474 	add.w	r4, r3, #116	; 0x74
 802121c:	2000      	movs	r0, #0
 802121e:	f7f9 f8f7 	bl	801a410 <lv_disp_get_dpi>
 8021222:	4603      	mov	r3, r0
 8021224:	461a      	mov	r2, r3
 8021226:	4613      	mov	r3, r2
 8021228:	011b      	lsls	r3, r3, #4
 802122a:	1a9b      	subs	r3, r3, r2
 802122c:	005b      	lsls	r3, r3, #1
 802122e:	3350      	adds	r3, #80	; 0x50
 8021230:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021234:	db11      	blt.n	802125a <linemeter_init+0x15e>
 8021236:	2000      	movs	r0, #0
 8021238:	f7f9 f8ea 	bl	801a410 <lv_disp_get_dpi>
 802123c:	4603      	mov	r3, r0
 802123e:	461a      	mov	r2, r3
 8021240:	4613      	mov	r3, r2
 8021242:	011b      	lsls	r3, r3, #4
 8021244:	1a9b      	subs	r3, r3, r2
 8021246:	005b      	lsls	r3, r3, #1
 8021248:	3350      	adds	r3, #80	; 0x50
 802124a:	4a56      	ldr	r2, [pc, #344]	; (80213a4 <linemeter_init+0x2a8>)
 802124c:	fb82 1203 	smull	r1, r2, r2, r3
 8021250:	1192      	asrs	r2, r2, #6
 8021252:	17db      	asrs	r3, r3, #31
 8021254:	1ad3      	subs	r3, r2, r3
 8021256:	b21b      	sxth	r3, r3
 8021258:	e000      	b.n	802125c <linemeter_init+0x160>
 802125a:	2301      	movs	r3, #1
 802125c:	461a      	mov	r2, r3
 802125e:	2100      	movs	r1, #0
 8021260:	4620      	mov	r0, r4
 8021262:	f7fd fc35 	bl	801ead0 <lv_style_set_pad_inner>
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
 8021266:	4b4e      	ldr	r3, [pc, #312]	; (80213a0 <linemeter_init+0x2a4>)
 8021268:	681b      	ldr	r3, [r3, #0]
 802126a:	f103 0474 	add.w	r4, r3, #116	; 0x74
 802126e:	2000      	movs	r0, #0
 8021270:	f7f9 f8ce 	bl	801a410 <lv_disp_get_dpi>
 8021274:	4603      	mov	r3, r0
 8021276:	461a      	mov	r2, r3
 8021278:	4613      	mov	r3, r2
 802127a:	009b      	lsls	r3, r3, #2
 802127c:	4413      	add	r3, r2
 802127e:	009a      	lsls	r2, r3, #2
 8021280:	4413      	add	r3, r2
 8021282:	3350      	adds	r3, #80	; 0x50
 8021284:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021288:	db12      	blt.n	80212b0 <linemeter_init+0x1b4>
 802128a:	2000      	movs	r0, #0
 802128c:	f7f9 f8c0 	bl	801a410 <lv_disp_get_dpi>
 8021290:	4603      	mov	r3, r0
 8021292:	461a      	mov	r2, r3
 8021294:	4613      	mov	r3, r2
 8021296:	009b      	lsls	r3, r3, #2
 8021298:	4413      	add	r3, r2
 802129a:	009a      	lsls	r2, r3, #2
 802129c:	4413      	add	r3, r2
 802129e:	3350      	adds	r3, #80	; 0x50
 80212a0:	4a40      	ldr	r2, [pc, #256]	; (80213a4 <linemeter_init+0x2a8>)
 80212a2:	fb82 1203 	smull	r1, r2, r2, r3
 80212a6:	1192      	asrs	r2, r2, #6
 80212a8:	17db      	asrs	r3, r3, #31
 80212aa:	1ad3      	subs	r3, r2, r3
 80212ac:	b21b      	sxth	r3, r3
 80212ae:	e000      	b.n	80212b2 <linemeter_init+0x1b6>
 80212b0:	2301      	movs	r3, #1
 80212b2:	461a      	mov	r2, r3
 80212b4:	2100      	movs	r1, #0
 80212b6:	4620      	mov	r0, r4
 80212b8:	f7fd fffe 	bl	801f2b8 <lv_style_set_scale_width>

    lv_style_set_line_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
 80212bc:	4b38      	ldr	r3, [pc, #224]	; (80213a0 <linemeter_init+0x2a4>)
 80212be:	681b      	ldr	r3, [r3, #0]
 80212c0:	f103 0074 	add.w	r0, r3, #116	; 0x74
 80212c4:	4b38      	ldr	r3, [pc, #224]	; (80213a8 <linemeter_init+0x2ac>)
 80212c6:	68da      	ldr	r2, [r3, #12]
 80212c8:	2100      	movs	r1, #0
 80212ca:	f7fd ff2d 	bl	801f128 <lv_style_set_line_color>
    lv_style_set_scale_grad_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
 80212ce:	4b34      	ldr	r3, [pc, #208]	; (80213a0 <linemeter_init+0x2a4>)
 80212d0:	681b      	ldr	r3, [r3, #0]
 80212d2:	f103 0074 	add.w	r0, r3, #116	; 0x74
 80212d6:	4b34      	ldr	r3, [pc, #208]	; (80213a8 <linemeter_init+0x2ac>)
 80212d8:	68da      	ldr	r2, [r3, #12]
 80212da:	2100      	movs	r1, #0
 80212dc:	f7fe f837 	bl	801f34e <lv_style_set_scale_grad_color>
    lv_style_set_scale_end_color(&styles->lmeter, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 80212e0:	4b2f      	ldr	r3, [pc, #188]	; (80213a0 <linemeter_init+0x2a4>)
 80212e2:	681b      	ldr	r3, [r3, #0]
 80212e4:	f103 0474 	add.w	r4, r3, #116	; 0x74
 80212e8:	f640 0088 	movw	r0, #2184	; 0x888
 80212ec:	f7fd faf6 	bl	801e8dc <lv_color_hex3>
 80212f0:	4603      	mov	r3, r0
 80212f2:	461a      	mov	r2, r3
 80212f4:	2100      	movs	r1, #0
 80212f6:	4620      	mov	r0, r4
 80212f8:	f7fe f840 	bl	801f37c <lv_style_set_scale_end_color>
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
 80212fc:	4b28      	ldr	r3, [pc, #160]	; (80213a0 <linemeter_init+0x2a4>)
 80212fe:	681b      	ldr	r3, [r3, #0]
 8021300:	f103 0474 	add.w	r4, r3, #116	; 0x74
 8021304:	2000      	movs	r0, #0
 8021306:	f7f9 f883 	bl	801a410 <lv_disp_get_dpi>
 802130a:	4603      	mov	r3, r0
 802130c:	461a      	mov	r2, r3
 802130e:	4613      	mov	r3, r2
 8021310:	009b      	lsls	r3, r3, #2
 8021312:	4413      	add	r3, r2
 8021314:	005b      	lsls	r3, r3, #1
 8021316:	3350      	adds	r3, #80	; 0x50
 8021318:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802131c:	db11      	blt.n	8021342 <linemeter_init+0x246>
 802131e:	2000      	movs	r0, #0
 8021320:	f7f9 f876 	bl	801a410 <lv_disp_get_dpi>
 8021324:	4603      	mov	r3, r0
 8021326:	461a      	mov	r2, r3
 8021328:	4613      	mov	r3, r2
 802132a:	009b      	lsls	r3, r3, #2
 802132c:	4413      	add	r3, r2
 802132e:	005b      	lsls	r3, r3, #1
 8021330:	3350      	adds	r3, #80	; 0x50
 8021332:	4a1c      	ldr	r2, [pc, #112]	; (80213a4 <linemeter_init+0x2a8>)
 8021334:	fb82 1203 	smull	r1, r2, r2, r3
 8021338:	1192      	asrs	r2, r2, #6
 802133a:	17db      	asrs	r3, r3, #31
 802133c:	1ad3      	subs	r3, r2, r3
 802133e:	b21b      	sxth	r3, r3
 8021340:	e000      	b.n	8021344 <linemeter_init+0x248>
 8021342:	2301      	movs	r3, #1
 8021344:	461a      	mov	r2, r3
 8021346:	2100      	movs	r1, #0
 8021348:	4620      	mov	r0, r4
 802134a:	f7fd fe89 	bl	801f060 <lv_style_set_line_width>
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
 802134e:	4b14      	ldr	r3, [pc, #80]	; (80213a0 <linemeter_init+0x2a4>)
 8021350:	681b      	ldr	r3, [r3, #0]
 8021352:	f103 0474 	add.w	r4, r3, #116	; 0x74
 8021356:	2000      	movs	r0, #0
 8021358:	f7f9 f85a 	bl	801a410 <lv_disp_get_dpi>
 802135c:	4603      	mov	r3, r0
 802135e:	461a      	mov	r2, r3
 8021360:	4613      	mov	r3, r2
 8021362:	00db      	lsls	r3, r3, #3
 8021364:	1a9b      	subs	r3, r3, r2
 8021366:	3350      	adds	r3, #80	; 0x50
 8021368:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802136c:	db10      	blt.n	8021390 <linemeter_init+0x294>
 802136e:	2000      	movs	r0, #0
 8021370:	f7f9 f84e 	bl	801a410 <lv_disp_get_dpi>
 8021374:	4603      	mov	r3, r0
 8021376:	461a      	mov	r2, r3
 8021378:	4613      	mov	r3, r2
 802137a:	00db      	lsls	r3, r3, #3
 802137c:	1a9b      	subs	r3, r3, r2
 802137e:	3350      	adds	r3, #80	; 0x50
 8021380:	4a08      	ldr	r2, [pc, #32]	; (80213a4 <linemeter_init+0x2a8>)
 8021382:	fb82 1203 	smull	r1, r2, r2, r3
 8021386:	1192      	asrs	r2, r2, #6
 8021388:	17db      	asrs	r3, r3, #31
 802138a:	1ad3      	subs	r3, r2, r3
 802138c:	b21b      	sxth	r3, r3
 802138e:	e000      	b.n	8021392 <linemeter_init+0x296>
 8021390:	2301      	movs	r3, #1
 8021392:	461a      	mov	r2, r3
 8021394:	2100      	movs	r1, #0
 8021396:	4620      	mov	r0, r4
 8021398:	f7fd ffc0 	bl	801f31c <lv_style_set_scale_end_line_width>
#endif
}
 802139c:	bf00      	nop
 802139e:	bd98      	pop	{r3, r4, r7, pc}
 80213a0:	20021498 	.word	0x20021498
 80213a4:	66666667 	.word	0x66666667
 80213a8:	2002146c 	.word	0x2002146c

080213ac <gauge_init>:

static void gauge_init(void)
{
 80213ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80213ae:	af00      	add	r7, sp, #0
#if LV_USE_GAUGE != 0
    style_init_reset(&styles->gauge_main);
 80213b0:	4bd6      	ldr	r3, [pc, #856]	; (802170c <gauge_init+0x360>)
 80213b2:	681b      	ldr	r3, [r3, #0]
 80213b4:	3360      	adds	r3, #96	; 0x60
 80213b6:	4618      	mov	r0, r3
 80213b8:	f004 f83a 	bl	8025430 <style_init_reset>
    lv_style_set_line_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 80213bc:	4bd3      	ldr	r3, [pc, #844]	; (802170c <gauge_init+0x360>)
 80213be:	681b      	ldr	r3, [r3, #0]
 80213c0:	f103 0660 	add.w	r6, r3, #96	; 0x60
 80213c4:	f640 0088 	movw	r0, #2184	; 0x888
 80213c8:	f7fd fa88 	bl	801e8dc <lv_color_hex3>
 80213cc:	4603      	mov	r3, r0
 80213ce:	461a      	mov	r2, r3
 80213d0:	2100      	movs	r1, #0
 80213d2:	4630      	mov	r0, r6
 80213d4:	f7fd fea8 	bl	801f128 <lv_style_set_line_color>
    lv_style_set_scale_grad_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 80213d8:	4bcc      	ldr	r3, [pc, #816]	; (802170c <gauge_init+0x360>)
 80213da:	681b      	ldr	r3, [r3, #0]
 80213dc:	f103 0660 	add.w	r6, r3, #96	; 0x60
 80213e0:	f640 0088 	movw	r0, #2184	; 0x888
 80213e4:	f7fd fa7a 	bl	801e8dc <lv_color_hex3>
 80213e8:	4603      	mov	r3, r0
 80213ea:	461a      	mov	r2, r3
 80213ec:	2100      	movs	r1, #0
 80213ee:	4630      	mov	r0, r6
 80213f0:	f7fd ffad 	bl	801f34e <lv_style_set_scale_grad_color>
    lv_style_set_scale_end_color(&styles->gauge_main, LV_STATE_DEFAULT, theme.color_primary);
 80213f4:	4bc5      	ldr	r3, [pc, #788]	; (802170c <gauge_init+0x360>)
 80213f6:	681b      	ldr	r3, [r3, #0]
 80213f8:	f103 0060 	add.w	r0, r3, #96	; 0x60
 80213fc:	4bc4      	ldr	r3, [pc, #784]	; (8021710 <gauge_init+0x364>)
 80213fe:	68da      	ldr	r2, [r3, #12]
 8021400:	2100      	movs	r1, #0
 8021402:	f7fd ffbb 	bl	801f37c <lv_style_set_scale_end_color>
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
 8021406:	4bc1      	ldr	r3, [pc, #772]	; (802170c <gauge_init+0x360>)
 8021408:	681b      	ldr	r3, [r3, #0]
 802140a:	f103 0660 	add.w	r6, r3, #96	; 0x60
 802140e:	2000      	movs	r0, #0
 8021410:	f7f8 fffe 	bl	801a410 <lv_disp_get_dpi>
 8021414:	4603      	mov	r3, r0
 8021416:	461a      	mov	r2, r3
 8021418:	4613      	mov	r3, r2
 802141a:	009b      	lsls	r3, r3, #2
 802141c:	4413      	add	r3, r2
 802141e:	3350      	adds	r3, #80	; 0x50
 8021420:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021424:	db10      	blt.n	8021448 <gauge_init+0x9c>
 8021426:	2000      	movs	r0, #0
 8021428:	f7f8 fff2 	bl	801a410 <lv_disp_get_dpi>
 802142c:	4603      	mov	r3, r0
 802142e:	461a      	mov	r2, r3
 8021430:	4613      	mov	r3, r2
 8021432:	009b      	lsls	r3, r3, #2
 8021434:	4413      	add	r3, r2
 8021436:	3350      	adds	r3, #80	; 0x50
 8021438:	4ab6      	ldr	r2, [pc, #728]	; (8021714 <gauge_init+0x368>)
 802143a:	fb82 1203 	smull	r1, r2, r2, r3
 802143e:	1192      	asrs	r2, r2, #6
 8021440:	17db      	asrs	r3, r3, #31
 8021442:	1ad3      	subs	r3, r2, r3
 8021444:	b21b      	sxth	r3, r3
 8021446:	e000      	b.n	802144a <gauge_init+0x9e>
 8021448:	2301      	movs	r3, #1
 802144a:	461a      	mov	r2, r3
 802144c:	2100      	movs	r1, #0
 802144e:	4630      	mov	r0, r6
 8021450:	f7fd fe06 	bl	801f060 <lv_style_set_line_width>
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
 8021454:	4bad      	ldr	r3, [pc, #692]	; (802170c <gauge_init+0x360>)
 8021456:	681b      	ldr	r3, [r3, #0]
 8021458:	f103 0660 	add.w	r6, r3, #96	; 0x60
 802145c:	2000      	movs	r0, #0
 802145e:	f7f8 ffd7 	bl	801a410 <lv_disp_get_dpi>
 8021462:	4603      	mov	r3, r0
 8021464:	3314      	adds	r3, #20
 8021466:	009b      	lsls	r3, r3, #2
 8021468:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802146c:	db0d      	blt.n	802148a <gauge_init+0xde>
 802146e:	2000      	movs	r0, #0
 8021470:	f7f8 ffce 	bl	801a410 <lv_disp_get_dpi>
 8021474:	4603      	mov	r3, r0
 8021476:	3314      	adds	r3, #20
 8021478:	009b      	lsls	r3, r3, #2
 802147a:	4aa6      	ldr	r2, [pc, #664]	; (8021714 <gauge_init+0x368>)
 802147c:	fb82 1203 	smull	r1, r2, r2, r3
 8021480:	1192      	asrs	r2, r2, #6
 8021482:	17db      	asrs	r3, r3, #31
 8021484:	1ad3      	subs	r3, r2, r3
 8021486:	b21b      	sxth	r3, r3
 8021488:	e000      	b.n	802148c <gauge_init+0xe0>
 802148a:	2301      	movs	r3, #1
 802148c:	461a      	mov	r2, r3
 802148e:	2100      	movs	r1, #0
 8021490:	4630      	mov	r0, r6
 8021492:	f7fd ff43 	bl	801f31c <lv_style_set_scale_end_line_width>
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
 8021496:	4b9d      	ldr	r3, [pc, #628]	; (802170c <gauge_init+0x360>)
 8021498:	681b      	ldr	r3, [r3, #0]
 802149a:	f103 0660 	add.w	r6, r3, #96	; 0x60
 802149e:	2000      	movs	r0, #0
 80214a0:	f7f8 ffb6 	bl	801a410 <lv_disp_get_dpi>
 80214a4:	4603      	mov	r3, r0
 80214a6:	330a      	adds	r3, #10
 80214a8:	00db      	lsls	r3, r3, #3
 80214aa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80214ae:	db0d      	blt.n	80214cc <gauge_init+0x120>
 80214b0:	2000      	movs	r0, #0
 80214b2:	f7f8 ffad 	bl	801a410 <lv_disp_get_dpi>
 80214b6:	4603      	mov	r3, r0
 80214b8:	330a      	adds	r3, #10
 80214ba:	00db      	lsls	r3, r3, #3
 80214bc:	4a95      	ldr	r2, [pc, #596]	; (8021714 <gauge_init+0x368>)
 80214be:	fb82 1203 	smull	r1, r2, r2, r3
 80214c2:	1192      	asrs	r2, r2, #6
 80214c4:	17db      	asrs	r3, r3, #31
 80214c6:	1ad3      	subs	r3, r2, r3
 80214c8:	b21b      	sxth	r3, r3
 80214ca:	e000      	b.n	80214ce <gauge_init+0x122>
 80214cc:	2301      	movs	r3, #1
 80214ce:	461a      	mov	r2, r3
 80214d0:	2100      	movs	r1, #0
 80214d2:	4630      	mov	r0, r6
 80214d4:	f7fd ff09 	bl	801f2ea <lv_style_set_scale_end_border_width>
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 80214d8:	4b8c      	ldr	r3, [pc, #560]	; (802170c <gauge_init+0x360>)
 80214da:	681b      	ldr	r3, [r3, #0]
 80214dc:	f103 0660 	add.w	r6, r3, #96	; 0x60
 80214e0:	2000      	movs	r0, #0
 80214e2:	f7f8 ff95 	bl	801a410 <lv_disp_get_dpi>
 80214e6:	4603      	mov	r3, r0
 80214e8:	461a      	mov	r2, r3
 80214ea:	4613      	mov	r3, r2
 80214ec:	009b      	lsls	r3, r3, #2
 80214ee:	4413      	add	r3, r2
 80214f0:	009b      	lsls	r3, r3, #2
 80214f2:	3350      	adds	r3, #80	; 0x50
 80214f4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80214f8:	db11      	blt.n	802151e <gauge_init+0x172>
 80214fa:	2000      	movs	r0, #0
 80214fc:	f7f8 ff88 	bl	801a410 <lv_disp_get_dpi>
 8021500:	4603      	mov	r3, r0
 8021502:	461a      	mov	r2, r3
 8021504:	4613      	mov	r3, r2
 8021506:	009b      	lsls	r3, r3, #2
 8021508:	4413      	add	r3, r2
 802150a:	009b      	lsls	r3, r3, #2
 802150c:	3350      	adds	r3, #80	; 0x50
 802150e:	4a81      	ldr	r2, [pc, #516]	; (8021714 <gauge_init+0x368>)
 8021510:	fb82 1203 	smull	r1, r2, r2, r3
 8021514:	1192      	asrs	r2, r2, #6
 8021516:	17db      	asrs	r3, r3, #31
 8021518:	1ad3      	subs	r3, r2, r3
 802151a:	b21b      	sxth	r3, r3
 802151c:	e000      	b.n	8021520 <gauge_init+0x174>
 802151e:	2301      	movs	r3, #1
 8021520:	461a      	mov	r2, r3
 8021522:	2100      	movs	r1, #0
 8021524:	4630      	mov	r0, r6
 8021526:	f7fd faa1 	bl	801ea6c <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 802152a:	4b78      	ldr	r3, [pc, #480]	; (802170c <gauge_init+0x360>)
 802152c:	681b      	ldr	r3, [r3, #0]
 802152e:	f103 0660 	add.w	r6, r3, #96	; 0x60
 8021532:	2000      	movs	r0, #0
 8021534:	f7f8 ff6c 	bl	801a410 <lv_disp_get_dpi>
 8021538:	4603      	mov	r3, r0
 802153a:	461a      	mov	r2, r3
 802153c:	4613      	mov	r3, r2
 802153e:	009b      	lsls	r3, r3, #2
 8021540:	4413      	add	r3, r2
 8021542:	009b      	lsls	r3, r3, #2
 8021544:	3350      	adds	r3, #80	; 0x50
 8021546:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802154a:	db11      	blt.n	8021570 <gauge_init+0x1c4>
 802154c:	2000      	movs	r0, #0
 802154e:	f7f8 ff5f 	bl	801a410 <lv_disp_get_dpi>
 8021552:	4603      	mov	r3, r0
 8021554:	461a      	mov	r2, r3
 8021556:	4613      	mov	r3, r2
 8021558:	009b      	lsls	r3, r3, #2
 802155a:	4413      	add	r3, r2
 802155c:	009b      	lsls	r3, r3, #2
 802155e:	3350      	adds	r3, #80	; 0x50
 8021560:	4a6c      	ldr	r2, [pc, #432]	; (8021714 <gauge_init+0x368>)
 8021562:	fb82 1203 	smull	r1, r2, r2, r3
 8021566:	1192      	asrs	r2, r2, #6
 8021568:	17db      	asrs	r3, r3, #31
 802156a:	1ad3      	subs	r3, r2, r3
 802156c:	b21b      	sxth	r3, r3
 802156e:	e000      	b.n	8021572 <gauge_init+0x1c6>
 8021570:	2301      	movs	r3, #1
 8021572:	461a      	mov	r2, r3
 8021574:	2100      	movs	r1, #0
 8021576:	4630      	mov	r0, r6
 8021578:	f7fd fa91 	bl	801ea9e <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 802157c:	4b63      	ldr	r3, [pc, #396]	; (802170c <gauge_init+0x360>)
 802157e:	681b      	ldr	r3, [r3, #0]
 8021580:	f103 0660 	add.w	r6, r3, #96	; 0x60
 8021584:	2000      	movs	r0, #0
 8021586:	f7f8 ff43 	bl	801a410 <lv_disp_get_dpi>
 802158a:	4603      	mov	r3, r0
 802158c:	461a      	mov	r2, r3
 802158e:	4613      	mov	r3, r2
 8021590:	009b      	lsls	r3, r3, #2
 8021592:	4413      	add	r3, r2
 8021594:	009b      	lsls	r3, r3, #2
 8021596:	3350      	adds	r3, #80	; 0x50
 8021598:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802159c:	db11      	blt.n	80215c2 <gauge_init+0x216>
 802159e:	2000      	movs	r0, #0
 80215a0:	f7f8 ff36 	bl	801a410 <lv_disp_get_dpi>
 80215a4:	4603      	mov	r3, r0
 80215a6:	461a      	mov	r2, r3
 80215a8:	4613      	mov	r3, r2
 80215aa:	009b      	lsls	r3, r3, #2
 80215ac:	4413      	add	r3, r2
 80215ae:	009b      	lsls	r3, r3, #2
 80215b0:	3350      	adds	r3, #80	; 0x50
 80215b2:	4a58      	ldr	r2, [pc, #352]	; (8021714 <gauge_init+0x368>)
 80215b4:	fb82 1203 	smull	r1, r2, r2, r3
 80215b8:	1192      	asrs	r2, r2, #6
 80215ba:	17db      	asrs	r3, r3, #31
 80215bc:	1ad3      	subs	r3, r2, r3
 80215be:	b21b      	sxth	r3, r3
 80215c0:	e000      	b.n	80215c4 <gauge_init+0x218>
 80215c2:	2301      	movs	r3, #1
 80215c4:	461a      	mov	r2, r3
 80215c6:	2100      	movs	r1, #0
 80215c8:	4630      	mov	r0, r6
 80215ca:	f7fd fa1d 	bl	801ea08 <lv_style_set_pad_top>
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
 80215ce:	4b4f      	ldr	r3, [pc, #316]	; (802170c <gauge_init+0x360>)
 80215d0:	681b      	ldr	r3, [r3, #0]
 80215d2:	f103 0660 	add.w	r6, r3, #96	; 0x60
 80215d6:	2000      	movs	r0, #0
 80215d8:	f7f8 ff1a 	bl	801a410 <lv_disp_get_dpi>
 80215dc:	4603      	mov	r3, r0
 80215de:	461a      	mov	r2, r3
 80215e0:	4613      	mov	r3, r2
 80215e2:	009b      	lsls	r3, r3, #2
 80215e4:	4413      	add	r3, r2
 80215e6:	009b      	lsls	r3, r3, #2
 80215e8:	3350      	adds	r3, #80	; 0x50
 80215ea:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80215ee:	db11      	blt.n	8021614 <gauge_init+0x268>
 80215f0:	2000      	movs	r0, #0
 80215f2:	f7f8 ff0d 	bl	801a410 <lv_disp_get_dpi>
 80215f6:	4603      	mov	r3, r0
 80215f8:	461a      	mov	r2, r3
 80215fa:	4613      	mov	r3, r2
 80215fc:	009b      	lsls	r3, r3, #2
 80215fe:	4413      	add	r3, r2
 8021600:	009b      	lsls	r3, r3, #2
 8021602:	3350      	adds	r3, #80	; 0x50
 8021604:	4a43      	ldr	r2, [pc, #268]	; (8021714 <gauge_init+0x368>)
 8021606:	fb82 1203 	smull	r1, r2, r2, r3
 802160a:	1192      	asrs	r2, r2, #6
 802160c:	17db      	asrs	r3, r3, #31
 802160e:	1ad3      	subs	r3, r2, r3
 8021610:	b21b      	sxth	r3, r3
 8021612:	e000      	b.n	8021616 <gauge_init+0x26a>
 8021614:	2301      	movs	r3, #1
 8021616:	461a      	mov	r2, r3
 8021618:	2100      	movs	r1, #0
 802161a:	4630      	mov	r0, r6
 802161c:	f7fd fa58 	bl	801ead0 <lv_style_set_pad_inner>
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
 8021620:	4b3a      	ldr	r3, [pc, #232]	; (802170c <gauge_init+0x360>)
 8021622:	681b      	ldr	r3, [r3, #0]
 8021624:	f103 0660 	add.w	r6, r3, #96	; 0x60
 8021628:	2000      	movs	r0, #0
 802162a:	f7f8 fef1 	bl	801a410 <lv_disp_get_dpi>
 802162e:	4603      	mov	r3, r0
 8021630:	461a      	mov	r2, r3
 8021632:	4613      	mov	r3, r2
 8021634:	011b      	lsls	r3, r3, #4
 8021636:	1a9b      	subs	r3, r3, r2
 8021638:	3350      	adds	r3, #80	; 0x50
 802163a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802163e:	db10      	blt.n	8021662 <gauge_init+0x2b6>
 8021640:	2000      	movs	r0, #0
 8021642:	f7f8 fee5 	bl	801a410 <lv_disp_get_dpi>
 8021646:	4603      	mov	r3, r0
 8021648:	461a      	mov	r2, r3
 802164a:	4613      	mov	r3, r2
 802164c:	011b      	lsls	r3, r3, #4
 802164e:	1a9b      	subs	r3, r3, r2
 8021650:	3350      	adds	r3, #80	; 0x50
 8021652:	4a30      	ldr	r2, [pc, #192]	; (8021714 <gauge_init+0x368>)
 8021654:	fb82 1203 	smull	r1, r2, r2, r3
 8021658:	1192      	asrs	r2, r2, #6
 802165a:	17db      	asrs	r3, r3, #31
 802165c:	1ad3      	subs	r3, r2, r3
 802165e:	b21b      	sxth	r3, r3
 8021660:	e000      	b.n	8021664 <gauge_init+0x2b8>
 8021662:	2301      	movs	r3, #1
 8021664:	461a      	mov	r2, r3
 8021666:	2100      	movs	r1, #0
 8021668:	4630      	mov	r0, r6
 802166a:	f7fd fe25 	bl	801f2b8 <lv_style_set_scale_width>
    lv_style_set_radius(&styles->gauge_main, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 802166e:	4b27      	ldr	r3, [pc, #156]	; (802170c <gauge_init+0x360>)
 8021670:	681b      	ldr	r3, [r3, #0]
 8021672:	3360      	adds	r3, #96	; 0x60
 8021674:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8021678:	2100      	movs	r1, #0
 802167a:	4618      	mov	r0, r3
 802167c:	f7fd f960 	bl	801e940 <lv_style_set_radius>

    style_init_reset(&styles->gauge_strong);
 8021680:	4b22      	ldr	r3, [pc, #136]	; (802170c <gauge_init+0x360>)
 8021682:	681b      	ldr	r3, [r3, #0]
 8021684:	3364      	adds	r3, #100	; 0x64
 8021686:	4618      	mov	r0, r3
 8021688:	f003 fed2 	bl	8025430 <style_init_reset>
    lv_style_set_line_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 802168c:	4b1f      	ldr	r3, [pc, #124]	; (802170c <gauge_init+0x360>)
 802168e:	681b      	ldr	r3, [r3, #0]
 8021690:	f103 0664 	add.w	r6, r3, #100	; 0x64
 8021694:	f640 0088 	movw	r0, #2184	; 0x888
 8021698:	f7fd f920 	bl	801e8dc <lv_color_hex3>
 802169c:	4603      	mov	r3, r0
 802169e:	461a      	mov	r2, r3
 80216a0:	2100      	movs	r1, #0
 80216a2:	4630      	mov	r0, r6
 80216a4:	f7fd fd40 	bl	801f128 <lv_style_set_line_color>
    lv_style_set_scale_grad_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
 80216a8:	4b18      	ldr	r3, [pc, #96]	; (802170c <gauge_init+0x360>)
 80216aa:	681b      	ldr	r3, [r3, #0]
 80216ac:	f103 0664 	add.w	r6, r3, #100	; 0x64
 80216b0:	f640 0088 	movw	r0, #2184	; 0x888
 80216b4:	f7fd f912 	bl	801e8dc <lv_color_hex3>
 80216b8:	4603      	mov	r3, r0
 80216ba:	461a      	mov	r2, r3
 80216bc:	2100      	movs	r1, #0
 80216be:	4630      	mov	r0, r6
 80216c0:	f7fd fe45 	bl	801f34e <lv_style_set_scale_grad_color>
    lv_style_set_scale_end_color(&styles->gauge_strong, LV_STATE_DEFAULT, theme.color_primary);
 80216c4:	4b11      	ldr	r3, [pc, #68]	; (802170c <gauge_init+0x360>)
 80216c6:	681b      	ldr	r3, [r3, #0]
 80216c8:	f103 0064 	add.w	r0, r3, #100	; 0x64
 80216cc:	4b10      	ldr	r3, [pc, #64]	; (8021710 <gauge_init+0x364>)
 80216ce:	68da      	ldr	r2, [r3, #12]
 80216d0:	2100      	movs	r1, #0
 80216d2:	f7fd fe53 	bl	801f37c <lv_style_set_scale_end_color>
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
 80216d6:	4b0d      	ldr	r3, [pc, #52]	; (802170c <gauge_init+0x360>)
 80216d8:	681b      	ldr	r3, [r3, #0]
 80216da:	f103 0664 	add.w	r6, r3, #100	; 0x64
 80216de:	2000      	movs	r0, #0
 80216e0:	f7f8 fe96 	bl	801a410 <lv_disp_get_dpi>
 80216e4:	4603      	mov	r3, r0
 80216e6:	330a      	adds	r3, #10
 80216e8:	00db      	lsls	r3, r3, #3
 80216ea:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80216ee:	db13      	blt.n	8021718 <gauge_init+0x36c>
 80216f0:	2000      	movs	r0, #0
 80216f2:	f7f8 fe8d 	bl	801a410 <lv_disp_get_dpi>
 80216f6:	4603      	mov	r3, r0
 80216f8:	330a      	adds	r3, #10
 80216fa:	00db      	lsls	r3, r3, #3
 80216fc:	4a05      	ldr	r2, [pc, #20]	; (8021714 <gauge_init+0x368>)
 80216fe:	fb82 1203 	smull	r1, r2, r2, r3
 8021702:	1192      	asrs	r2, r2, #6
 8021704:	17db      	asrs	r3, r3, #31
 8021706:	1ad3      	subs	r3, r2, r3
 8021708:	b21b      	sxth	r3, r3
 802170a:	e006      	b.n	802171a <gauge_init+0x36e>
 802170c:	20021498 	.word	0x20021498
 8021710:	2002146c 	.word	0x2002146c
 8021714:	66666667 	.word	0x66666667
 8021718:	2301      	movs	r3, #1
 802171a:	461a      	mov	r2, r3
 802171c:	2100      	movs	r1, #0
 802171e:	4630      	mov	r0, r6
 8021720:	f7fd fc9e 	bl	801f060 <lv_style_set_line_width>
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
 8021724:	4b8b      	ldr	r3, [pc, #556]	; (8021954 <gauge_init+0x5a8>)
 8021726:	681b      	ldr	r3, [r3, #0]
 8021728:	f103 0664 	add.w	r6, r3, #100	; 0x64
 802172c:	2000      	movs	r0, #0
 802172e:	f7f8 fe6f 	bl	801a410 <lv_disp_get_dpi>
 8021732:	4603      	mov	r3, r0
 8021734:	330a      	adds	r3, #10
 8021736:	00db      	lsls	r3, r3, #3
 8021738:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802173c:	db0d      	blt.n	802175a <gauge_init+0x3ae>
 802173e:	2000      	movs	r0, #0
 8021740:	f7f8 fe66 	bl	801a410 <lv_disp_get_dpi>
 8021744:	4603      	mov	r3, r0
 8021746:	330a      	adds	r3, #10
 8021748:	00db      	lsls	r3, r3, #3
 802174a:	4a83      	ldr	r2, [pc, #524]	; (8021958 <gauge_init+0x5ac>)
 802174c:	fb82 1203 	smull	r1, r2, r2, r3
 8021750:	1192      	asrs	r2, r2, #6
 8021752:	17db      	asrs	r3, r3, #31
 8021754:	1ad3      	subs	r3, r2, r3
 8021756:	b21b      	sxth	r3, r3
 8021758:	e000      	b.n	802175c <gauge_init+0x3b0>
 802175a:	2301      	movs	r3, #1
 802175c:	461a      	mov	r2, r3
 802175e:	2100      	movs	r1, #0
 8021760:	4630      	mov	r0, r6
 8021762:	f7fd fddb 	bl	801f31c <lv_style_set_scale_end_line_width>
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
 8021766:	4b7b      	ldr	r3, [pc, #492]	; (8021954 <gauge_init+0x5a8>)
 8021768:	681b      	ldr	r3, [r3, #0]
 802176a:	f103 0664 	add.w	r6, r3, #100	; 0x64
 802176e:	2000      	movs	r0, #0
 8021770:	f7f8 fe4e 	bl	801a410 <lv_disp_get_dpi>
 8021774:	4603      	mov	r3, r0
 8021776:	461a      	mov	r2, r3
 8021778:	4613      	mov	r3, r2
 802177a:	009b      	lsls	r3, r3, #2
 802177c:	4413      	add	r3, r2
 802177e:	009a      	lsls	r2, r3, #2
 8021780:	4413      	add	r3, r2
 8021782:	3350      	adds	r3, #80	; 0x50
 8021784:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021788:	db12      	blt.n	80217b0 <gauge_init+0x404>
 802178a:	2000      	movs	r0, #0
 802178c:	f7f8 fe40 	bl	801a410 <lv_disp_get_dpi>
 8021790:	4603      	mov	r3, r0
 8021792:	461a      	mov	r2, r3
 8021794:	4613      	mov	r3, r2
 8021796:	009b      	lsls	r3, r3, #2
 8021798:	4413      	add	r3, r2
 802179a:	009a      	lsls	r2, r3, #2
 802179c:	4413      	add	r3, r2
 802179e:	3350      	adds	r3, #80	; 0x50
 80217a0:	4a6d      	ldr	r2, [pc, #436]	; (8021958 <gauge_init+0x5ac>)
 80217a2:	fb82 1203 	smull	r1, r2, r2, r3
 80217a6:	1192      	asrs	r2, r2, #6
 80217a8:	17db      	asrs	r3, r3, #31
 80217aa:	1ad3      	subs	r3, r2, r3
 80217ac:	b21b      	sxth	r3, r3
 80217ae:	e000      	b.n	80217b2 <gauge_init+0x406>
 80217b0:	2301      	movs	r3, #1
 80217b2:	461a      	mov	r2, r3
 80217b4:	2100      	movs	r1, #0
 80217b6:	4630      	mov	r0, r6
 80217b8:	f7fd fd7e 	bl	801f2b8 <lv_style_set_scale_width>

    style_init_reset(&styles->gauge_needle);
 80217bc:	4b65      	ldr	r3, [pc, #404]	; (8021954 <gauge_init+0x5a8>)
 80217be:	681b      	ldr	r3, [r3, #0]
 80217c0:	3368      	adds	r3, #104	; 0x68
 80217c2:	4618      	mov	r0, r3
 80217c4:	f003 fe34 	bl	8025430 <style_init_reset>
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
 80217c8:	4b62      	ldr	r3, [pc, #392]	; (8021954 <gauge_init+0x5a8>)
 80217ca:	681b      	ldr	r3, [r3, #0]
 80217cc:	f103 0668 	add.w	r6, r3, #104	; 0x68
 80217d0:	4b62      	ldr	r3, [pc, #392]	; (802195c <gauge_init+0x5b0>)
 80217d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80217d4:	f003 0302 	and.w	r3, r3, #2
 80217d8:	2b00      	cmp	r3, #0
 80217da:	d004      	beq.n	80217e6 <gauge_init+0x43a>
 80217dc:	4860      	ldr	r0, [pc, #384]	; (8021960 <gauge_init+0x5b4>)
 80217de:	f7fd f869 	bl	801e8b4 <lv_color_hex>
 80217e2:	4605      	mov	r5, r0
 80217e4:	e00b      	b.n	80217fe <gauge_init+0x452>
 80217e6:	462b      	mov	r3, r5
 80217e8:	f043 05ff 	orr.w	r5, r3, #255	; 0xff
 80217ec:	462b      	mov	r3, r5
 80217ee:	f443 457f 	orr.w	r5, r3, #65280	; 0xff00
 80217f2:	462b      	mov	r3, r5
 80217f4:	f443 057f 	orr.w	r5, r3, #16711680	; 0xff0000
 80217f8:	462b      	mov	r3, r5
 80217fa:	f043 457f 	orr.w	r5, r3, #4278190080	; 0xff000000
 80217fe:	462a      	mov	r2, r5
 8021800:	2100      	movs	r1, #0
 8021802:	4630      	mov	r0, r6
 8021804:	f7fd fc90 	bl	801f128 <lv_style_set_line_color>
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
 8021808:	4b52      	ldr	r3, [pc, #328]	; (8021954 <gauge_init+0x5a8>)
 802180a:	681b      	ldr	r3, [r3, #0]
 802180c:	f103 0568 	add.w	r5, r3, #104	; 0x68
 8021810:	2000      	movs	r0, #0
 8021812:	f7f8 fdfd 	bl	801a410 <lv_disp_get_dpi>
 8021816:	4603      	mov	r3, r0
 8021818:	330a      	adds	r3, #10
 802181a:	00db      	lsls	r3, r3, #3
 802181c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021820:	db0d      	blt.n	802183e <gauge_init+0x492>
 8021822:	2000      	movs	r0, #0
 8021824:	f7f8 fdf4 	bl	801a410 <lv_disp_get_dpi>
 8021828:	4603      	mov	r3, r0
 802182a:	330a      	adds	r3, #10
 802182c:	00db      	lsls	r3, r3, #3
 802182e:	4a4a      	ldr	r2, [pc, #296]	; (8021958 <gauge_init+0x5ac>)
 8021830:	fb82 1203 	smull	r1, r2, r2, r3
 8021834:	1192      	asrs	r2, r2, #6
 8021836:	17db      	asrs	r3, r3, #31
 8021838:	1ad3      	subs	r3, r2, r3
 802183a:	b21b      	sxth	r3, r3
 802183c:	e000      	b.n	8021840 <gauge_init+0x494>
 802183e:	2301      	movs	r3, #1
 8021840:	461a      	mov	r2, r3
 8021842:	2100      	movs	r1, #0
 8021844:	4628      	mov	r0, r5
 8021846:	f7fd fc0b 	bl	801f060 <lv_style_set_line_width>
    lv_style_set_bg_opa(&styles->gauge_needle, LV_STATE_DEFAULT, LV_OPA_COVER);
 802184a:	4b42      	ldr	r3, [pc, #264]	; (8021954 <gauge_init+0x5a8>)
 802184c:	681b      	ldr	r3, [r3, #0]
 802184e:	3368      	adds	r3, #104	; 0x68
 8021850:	22ff      	movs	r2, #255	; 0xff
 8021852:	2100      	movs	r1, #0
 8021854:	4618      	mov	r0, r3
 8021856:	f7fd f9cf 	bl	801ebf8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
 802185a:	4b3e      	ldr	r3, [pc, #248]	; (8021954 <gauge_init+0x5a8>)
 802185c:	681b      	ldr	r3, [r3, #0]
 802185e:	f103 0568 	add.w	r5, r3, #104	; 0x68
 8021862:	4b3e      	ldr	r3, [pc, #248]	; (802195c <gauge_init+0x5b0>)
 8021864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021866:	f003 0302 	and.w	r3, r3, #2
 802186a:	2b00      	cmp	r3, #0
 802186c:	d004      	beq.n	8021878 <gauge_init+0x4cc>
 802186e:	483c      	ldr	r0, [pc, #240]	; (8021960 <gauge_init+0x5b4>)
 8021870:	f7fd f820 	bl	801e8b4 <lv_color_hex>
 8021874:	4604      	mov	r4, r0
 8021876:	e00b      	b.n	8021890 <gauge_init+0x4e4>
 8021878:	4623      	mov	r3, r4
 802187a:	f043 04ff 	orr.w	r4, r3, #255	; 0xff
 802187e:	4623      	mov	r3, r4
 8021880:	f443 447f 	orr.w	r4, r3, #65280	; 0xff00
 8021884:	4623      	mov	r3, r4
 8021886:	f443 047f 	orr.w	r4, r3, #16711680	; 0xff0000
 802188a:	4623      	mov	r3, r4
 802188c:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 8021890:	4622      	mov	r2, r4
 8021892:	2100      	movs	r1, #0
 8021894:	4628      	mov	r0, r5
 8021896:	f7fd f998 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_radius(&styles->gauge_needle, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 802189a:	4b2e      	ldr	r3, [pc, #184]	; (8021954 <gauge_init+0x5a8>)
 802189c:	681b      	ldr	r3, [r3, #0]
 802189e:	3368      	adds	r3, #104	; 0x68
 80218a0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80218a4:	2100      	movs	r1, #0
 80218a6:	4618      	mov	r0, r3
 80218a8:	f7fd f84a 	bl	801e940 <lv_style_set_radius>
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
 80218ac:	4b29      	ldr	r3, [pc, #164]	; (8021954 <gauge_init+0x5a8>)
 80218ae:	681b      	ldr	r3, [r3, #0]
 80218b0:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80218b4:	2000      	movs	r0, #0
 80218b6:	f7f8 fdab 	bl	801a410 <lv_disp_get_dpi>
 80218ba:	4603      	mov	r3, r0
 80218bc:	461a      	mov	r2, r3
 80218be:	4613      	mov	r3, r2
 80218c0:	011b      	lsls	r3, r3, #4
 80218c2:	1a9b      	subs	r3, r3, r2
 80218c4:	005b      	lsls	r3, r3, #1
 80218c6:	3350      	adds	r3, #80	; 0x50
 80218c8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80218cc:	db11      	blt.n	80218f2 <gauge_init+0x546>
 80218ce:	2000      	movs	r0, #0
 80218d0:	f7f8 fd9e 	bl	801a410 <lv_disp_get_dpi>
 80218d4:	4603      	mov	r3, r0
 80218d6:	461a      	mov	r2, r3
 80218d8:	4613      	mov	r3, r2
 80218da:	011b      	lsls	r3, r3, #4
 80218dc:	1a9b      	subs	r3, r3, r2
 80218de:	005b      	lsls	r3, r3, #1
 80218e0:	3350      	adds	r3, #80	; 0x50
 80218e2:	4a1d      	ldr	r2, [pc, #116]	; (8021958 <gauge_init+0x5ac>)
 80218e4:	fb82 1203 	smull	r1, r2, r2, r3
 80218e8:	1192      	asrs	r2, r2, #6
 80218ea:	17db      	asrs	r3, r3, #31
 80218ec:	1ad3      	subs	r3, r2, r3
 80218ee:	b21b      	sxth	r3, r3
 80218f0:	e000      	b.n	80218f4 <gauge_init+0x548>
 80218f2:	2301      	movs	r3, #1
 80218f4:	461a      	mov	r2, r3
 80218f6:	2100      	movs	r1, #0
 80218f8:	4620      	mov	r0, r4
 80218fa:	f7fd f853 	bl	801e9a4 <lv_style_set_size>
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
 80218fe:	4b15      	ldr	r3, [pc, #84]	; (8021954 <gauge_init+0x5a8>)
 8021900:	681b      	ldr	r3, [r3, #0]
 8021902:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8021906:	2000      	movs	r0, #0
 8021908:	f7f8 fd82 	bl	801a410 <lv_disp_get_dpi>
 802190c:	4603      	mov	r3, r0
 802190e:	461a      	mov	r2, r3
 8021910:	4613      	mov	r3, r2
 8021912:	009b      	lsls	r3, r3, #2
 8021914:	4413      	add	r3, r2
 8021916:	005b      	lsls	r3, r3, #1
 8021918:	3350      	adds	r3, #80	; 0x50
 802191a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802191e:	db11      	blt.n	8021944 <gauge_init+0x598>
 8021920:	2000      	movs	r0, #0
 8021922:	f7f8 fd75 	bl	801a410 <lv_disp_get_dpi>
 8021926:	4603      	mov	r3, r0
 8021928:	461a      	mov	r2, r3
 802192a:	4613      	mov	r3, r2
 802192c:	009b      	lsls	r3, r3, #2
 802192e:	4413      	add	r3, r2
 8021930:	005b      	lsls	r3, r3, #1
 8021932:	3350      	adds	r3, #80	; 0x50
 8021934:	4a08      	ldr	r2, [pc, #32]	; (8021958 <gauge_init+0x5ac>)
 8021936:	fb82 1203 	smull	r1, r2, r2, r3
 802193a:	1192      	asrs	r2, r2, #6
 802193c:	17db      	asrs	r3, r3, #31
 802193e:	1ad3      	subs	r3, r2, r3
 8021940:	b21b      	sxth	r3, r3
 8021942:	e000      	b.n	8021946 <gauge_init+0x59a>
 8021944:	2301      	movs	r3, #1
 8021946:	461a      	mov	r2, r3
 8021948:	2100      	movs	r1, #0
 802194a:	4620      	mov	r0, r4
 802194c:	f7fd f8c0 	bl	801ead0 <lv_style_set_pad_inner>
#endif
}
 8021950:	bf00      	nop
 8021952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021954:	20021498 	.word	0x20021498
 8021958:	66666667 	.word	0x66666667
 802195c:	2002146c 	.word	0x2002146c
 8021960:	00464b5b 	.word	0x00464b5b

08021964 <arc_init>:

static void arc_init(void)
{
 8021964:	b598      	push	{r3, r4, r7, lr}
 8021966:	af00      	add	r7, sp, #0
#if LV_USE_ARC != 0
    style_init_reset(&styles->arc_indic);
 8021968:	4b61      	ldr	r3, [pc, #388]	; (8021af0 <arc_init+0x18c>)
 802196a:	681b      	ldr	r3, [r3, #0]
 802196c:	331c      	adds	r3, #28
 802196e:	4618      	mov	r0, r3
 8021970:	f003 fd5e 	bl	8025430 <style_init_reset>
    lv_style_set_line_color(&styles->arc_indic, LV_STATE_DEFAULT, theme.color_primary);
 8021974:	4b5e      	ldr	r3, [pc, #376]	; (8021af0 <arc_init+0x18c>)
 8021976:	681b      	ldr	r3, [r3, #0]
 8021978:	f103 001c 	add.w	r0, r3, #28
 802197c:	4b5d      	ldr	r3, [pc, #372]	; (8021af4 <arc_init+0x190>)
 802197e:	68da      	ldr	r2, [r3, #12]
 8021980:	2100      	movs	r1, #0
 8021982:	f7fd fbd1 	bl	801f128 <lv_style_set_line_color>
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
 8021986:	4b5a      	ldr	r3, [pc, #360]	; (8021af0 <arc_init+0x18c>)
 8021988:	681b      	ldr	r3, [r3, #0]
 802198a:	f103 041c 	add.w	r4, r3, #28
 802198e:	2000      	movs	r0, #0
 8021990:	f7f8 fd3e 	bl	801a410 <lv_disp_get_dpi>
 8021994:	4603      	mov	r3, r0
 8021996:	461a      	mov	r2, r3
 8021998:	4613      	mov	r3, r2
 802199a:	009b      	lsls	r3, r3, #2
 802199c:	4413      	add	r3, r2
 802199e:	009a      	lsls	r2, r3, #2
 80219a0:	4413      	add	r3, r2
 80219a2:	3350      	adds	r3, #80	; 0x50
 80219a4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80219a8:	db12      	blt.n	80219d0 <arc_init+0x6c>
 80219aa:	2000      	movs	r0, #0
 80219ac:	f7f8 fd30 	bl	801a410 <lv_disp_get_dpi>
 80219b0:	4603      	mov	r3, r0
 80219b2:	461a      	mov	r2, r3
 80219b4:	4613      	mov	r3, r2
 80219b6:	009b      	lsls	r3, r3, #2
 80219b8:	4413      	add	r3, r2
 80219ba:	009a      	lsls	r2, r3, #2
 80219bc:	4413      	add	r3, r2
 80219be:	3350      	adds	r3, #80	; 0x50
 80219c0:	4a4d      	ldr	r2, [pc, #308]	; (8021af8 <arc_init+0x194>)
 80219c2:	fb82 1203 	smull	r1, r2, r2, r3
 80219c6:	1192      	asrs	r2, r2, #6
 80219c8:	17db      	asrs	r3, r3, #31
 80219ca:	1ad3      	subs	r3, r2, r3
 80219cc:	b21b      	sxth	r3, r3
 80219ce:	e000      	b.n	80219d2 <arc_init+0x6e>
 80219d0:	2301      	movs	r3, #1
 80219d2:	461a      	mov	r2, r3
 80219d4:	2100      	movs	r1, #0
 80219d6:	4620      	mov	r0, r4
 80219d8:	f7fd fb42 	bl	801f060 <lv_style_set_line_width>
    lv_style_set_line_rounded(&styles->arc_indic, LV_STATE_DEFAULT, true);
 80219dc:	4b44      	ldr	r3, [pc, #272]	; (8021af0 <arc_init+0x18c>)
 80219de:	681b      	ldr	r3, [r3, #0]
 80219e0:	331c      	adds	r3, #28
 80219e2:	2201      	movs	r2, #1
 80219e4:	2100      	movs	r1, #0
 80219e6:	4618      	mov	r0, r3
 80219e8:	f7fd fb85 	bl	801f0f6 <lv_style_set_line_rounded>

    style_init_reset(&styles->arc_bg);
 80219ec:	4b40      	ldr	r3, [pc, #256]	; (8021af0 <arc_init+0x18c>)
 80219ee:	681b      	ldr	r3, [r3, #0]
 80219f0:	3320      	adds	r3, #32
 80219f2:	4618      	mov	r0, r3
 80219f4:	f003 fd1c 	bl	8025430 <style_init_reset>
    lv_style_set_line_color(&styles->arc_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
 80219f8:	4b3d      	ldr	r3, [pc, #244]	; (8021af0 <arc_init+0x18c>)
 80219fa:	681b      	ldr	r3, [r3, #0]
 80219fc:	f103 0420 	add.w	r4, r3, #32
 8021a00:	4b3c      	ldr	r3, [pc, #240]	; (8021af4 <arc_init+0x190>)
 8021a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021a04:	f003 0302 	and.w	r3, r3, #2
 8021a08:	2b00      	cmp	r3, #0
 8021a0a:	d004      	beq.n	8021a16 <arc_init+0xb2>
 8021a0c:	483b      	ldr	r0, [pc, #236]	; (8021afc <arc_init+0x198>)
 8021a0e:	f7fc ff51 	bl	801e8b4 <lv_color_hex>
 8021a12:	4603      	mov	r3, r0
 8021a14:	e003      	b.n	8021a1e <arc_init+0xba>
 8021a16:	483a      	ldr	r0, [pc, #232]	; (8021b00 <arc_init+0x19c>)
 8021a18:	f7fc ff4c 	bl	801e8b4 <lv_color_hex>
 8021a1c:	4603      	mov	r3, r0
 8021a1e:	461a      	mov	r2, r3
 8021a20:	2100      	movs	r1, #0
 8021a22:	4620      	mov	r0, r4
 8021a24:	f7fd fb80 	bl	801f128 <lv_style_set_line_color>
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
 8021a28:	4b31      	ldr	r3, [pc, #196]	; (8021af0 <arc_init+0x18c>)
 8021a2a:	681b      	ldr	r3, [r3, #0]
 8021a2c:	f103 0420 	add.w	r4, r3, #32
 8021a30:	2000      	movs	r0, #0
 8021a32:	f7f8 fced 	bl	801a410 <lv_disp_get_dpi>
 8021a36:	4603      	mov	r3, r0
 8021a38:	461a      	mov	r2, r3
 8021a3a:	4613      	mov	r3, r2
 8021a3c:	009b      	lsls	r3, r3, #2
 8021a3e:	4413      	add	r3, r2
 8021a40:	009a      	lsls	r2, r3, #2
 8021a42:	4413      	add	r3, r2
 8021a44:	3350      	adds	r3, #80	; 0x50
 8021a46:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021a4a:	db12      	blt.n	8021a72 <arc_init+0x10e>
 8021a4c:	2000      	movs	r0, #0
 8021a4e:	f7f8 fcdf 	bl	801a410 <lv_disp_get_dpi>
 8021a52:	4603      	mov	r3, r0
 8021a54:	461a      	mov	r2, r3
 8021a56:	4613      	mov	r3, r2
 8021a58:	009b      	lsls	r3, r3, #2
 8021a5a:	4413      	add	r3, r2
 8021a5c:	009a      	lsls	r2, r3, #2
 8021a5e:	4413      	add	r3, r2
 8021a60:	3350      	adds	r3, #80	; 0x50
 8021a62:	4a25      	ldr	r2, [pc, #148]	; (8021af8 <arc_init+0x194>)
 8021a64:	fb82 1203 	smull	r1, r2, r2, r3
 8021a68:	1192      	asrs	r2, r2, #6
 8021a6a:	17db      	asrs	r3, r3, #31
 8021a6c:	1ad3      	subs	r3, r2, r3
 8021a6e:	b21b      	sxth	r3, r3
 8021a70:	e000      	b.n	8021a74 <arc_init+0x110>
 8021a72:	2301      	movs	r3, #1
 8021a74:	461a      	mov	r2, r3
 8021a76:	2100      	movs	r1, #0
 8021a78:	4620      	mov	r0, r4
 8021a7a:	f7fd faf1 	bl	801f060 <lv_style_set_line_width>
    lv_style_set_line_rounded(&styles->arc_bg, LV_STATE_DEFAULT, true);
 8021a7e:	4b1c      	ldr	r3, [pc, #112]	; (8021af0 <arc_init+0x18c>)
 8021a80:	681b      	ldr	r3, [r3, #0]
 8021a82:	3320      	adds	r3, #32
 8021a84:	2201      	movs	r2, #1
 8021a86:	2100      	movs	r1, #0
 8021a88:	4618      	mov	r0, r3
 8021a8a:	f7fd fb34 	bl	801f0f6 <lv_style_set_line_rounded>

    style_init_reset(&styles->arc_knob);
 8021a8e:	4b18      	ldr	r3, [pc, #96]	; (8021af0 <arc_init+0x18c>)
 8021a90:	681b      	ldr	r3, [r3, #0]
 8021a92:	3324      	adds	r3, #36	; 0x24
 8021a94:	4618      	mov	r0, r3
 8021a96:	f003 fccb 	bl	8025430 <style_init_reset>
    lv_style_set_radius(&styles->arc_knob, LV_STATE_DEFAULT,   LV_RADIUS_CIRCLE);
 8021a9a:	4b15      	ldr	r3, [pc, #84]	; (8021af0 <arc_init+0x18c>)
 8021a9c:	681b      	ldr	r3, [r3, #0]
 8021a9e:	3324      	adds	r3, #36	; 0x24
 8021aa0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8021aa4:	2100      	movs	r1, #0
 8021aa6:	4618      	mov	r0, r3
 8021aa8:	f7fc ff4a 	bl	801e940 <lv_style_set_radius>
    lv_style_set_pad_top(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
 8021aac:	4b10      	ldr	r3, [pc, #64]	; (8021af0 <arc_init+0x18c>)
 8021aae:	681b      	ldr	r3, [r3, #0]
 8021ab0:	3324      	adds	r3, #36	; 0x24
 8021ab2:	2200      	movs	r2, #0
 8021ab4:	2100      	movs	r1, #0
 8021ab6:	4618      	mov	r0, r3
 8021ab8:	f7fc ffa6 	bl	801ea08 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
 8021abc:	4b0c      	ldr	r3, [pc, #48]	; (8021af0 <arc_init+0x18c>)
 8021abe:	681b      	ldr	r3, [r3, #0]
 8021ac0:	3324      	adds	r3, #36	; 0x24
 8021ac2:	2200      	movs	r2, #0
 8021ac4:	2100      	movs	r1, #0
 8021ac6:	4618      	mov	r0, r3
 8021ac8:	f7fc ffb7 	bl	801ea3a <lv_style_set_pad_bottom>
    lv_style_set_pad_left(&styles->arc_knob, LV_STATE_DEFAULT,    LV_DPX(0));
 8021acc:	4b08      	ldr	r3, [pc, #32]	; (8021af0 <arc_init+0x18c>)
 8021ace:	681b      	ldr	r3, [r3, #0]
 8021ad0:	3324      	adds	r3, #36	; 0x24
 8021ad2:	2200      	movs	r2, #0
 8021ad4:	2100      	movs	r1, #0
 8021ad6:	4618      	mov	r0, r3
 8021ad8:	f7fc ffc8 	bl	801ea6c <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->arc_knob, LV_STATE_DEFAULT,   LV_DPX(0));
 8021adc:	4b04      	ldr	r3, [pc, #16]	; (8021af0 <arc_init+0x18c>)
 8021ade:	681b      	ldr	r3, [r3, #0]
 8021ae0:	3324      	adds	r3, #36	; 0x24
 8021ae2:	2200      	movs	r2, #0
 8021ae4:	2100      	movs	r1, #0
 8021ae6:	4618      	mov	r0, r3
 8021ae8:	f7fc ffd9 	bl	801ea9e <lv_style_set_pad_right>

#endif
}
 8021aec:	bf00      	nop
 8021aee:	bd98      	pop	{r3, r4, r7, pc}
 8021af0:	20021498 	.word	0x20021498
 8021af4:	2002146c 	.word	0x2002146c
 8021af8:	66666667 	.word	0x66666667
 8021afc:	00d4d7d9 	.word	0x00d4d7d9
 8021b00:	0045494d 	.word	0x0045494d

08021b04 <spinner_init>:

static void spinner_init(void)
{
 8021b04:	b480      	push	{r7}
 8021b06:	af00      	add	r7, sp, #0
#if LV_USE_SPINNER != 0
#endif
}
 8021b08:	bf00      	nop
 8021b0a:	46bd      	mov	sp, r7
 8021b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b10:	4770      	bx	lr
	...

08021b14 <chart_init>:

static void chart_init(void)
{
 8021b14:	b598      	push	{r3, r4, r7, lr}
 8021b16:	af00      	add	r7, sp, #0
#if LV_USE_CHART
    style_init_reset(&styles->chart_bg);
 8021b18:	4ba4      	ldr	r3, [pc, #656]	; (8021dac <chart_init+0x298>)
 8021b1a:	681b      	ldr	r3, [r3, #0]
 8021b1c:	3344      	adds	r3, #68	; 0x44
 8021b1e:	4618      	mov	r0, r3
 8021b20:	f003 fc86 	bl	8025430 <style_init_reset>
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
 8021b24:	4ba1      	ldr	r3, [pc, #644]	; (8021dac <chart_init+0x298>)
 8021b26:	681b      	ldr	r3, [r3, #0]
 8021b28:	f103 0444 	add.w	r4, r3, #68	; 0x44
 8021b2c:	4ba0      	ldr	r3, [pc, #640]	; (8021db0 <chart_init+0x29c>)
 8021b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021b30:	f003 0302 	and.w	r3, r3, #2
 8021b34:	2b00      	cmp	r3, #0
 8021b36:	d011      	beq.n	8021b5c <chart_init+0x48>
 8021b38:	4b9d      	ldr	r3, [pc, #628]	; (8021db0 <chart_init+0x29c>)
 8021b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021b3c:	f003 0302 	and.w	r3, r3, #2
 8021b40:	2b00      	cmp	r3, #0
 8021b42:	d005      	beq.n	8021b50 <chart_init+0x3c>
 8021b44:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8021b48:	f7fc fec8 	bl	801e8dc <lv_color_hex3>
 8021b4c:	4603      	mov	r3, r0
 8021b4e:	e009      	b.n	8021b64 <chart_init+0x50>
 8021b50:	f640 1099 	movw	r0, #2457	; 0x999
 8021b54:	f7fc fec2 	bl	801e8dc <lv_color_hex3>
 8021b58:	4603      	mov	r3, r0
 8021b5a:	e003      	b.n	8021b64 <chart_init+0x50>
 8021b5c:	4895      	ldr	r0, [pc, #596]	; (8021db4 <chart_init+0x2a0>)
 8021b5e:	f7fc fea9 	bl	801e8b4 <lv_color_hex>
 8021b62:	4603      	mov	r3, r0
 8021b64:	461a      	mov	r2, r3
 8021b66:	2100      	movs	r1, #0
 8021b68:	4620      	mov	r0, r4
 8021b6a:	f7fd fa11 	bl	801ef90 <lv_style_set_text_color>

    style_init_reset(&styles->chart_series_bg);
 8021b6e:	4b8f      	ldr	r3, [pc, #572]	; (8021dac <chart_init+0x298>)
 8021b70:	681b      	ldr	r3, [r3, #0]
 8021b72:	3348      	adds	r3, #72	; 0x48
 8021b74:	4618      	mov	r0, r3
 8021b76:	f003 fc5b 	bl	8025430 <style_init_reset>
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
 8021b7a:	4b8c      	ldr	r3, [pc, #560]	; (8021dac <chart_init+0x298>)
 8021b7c:	681b      	ldr	r3, [r3, #0]
 8021b7e:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8021b82:	2000      	movs	r0, #0
 8021b84:	f7f8 fc44 	bl	801a410 <lv_disp_get_dpi>
 8021b88:	4603      	mov	r3, r0
 8021b8a:	3350      	adds	r3, #80	; 0x50
 8021b8c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021b90:	db0c      	blt.n	8021bac <chart_init+0x98>
 8021b92:	2000      	movs	r0, #0
 8021b94:	f7f8 fc3c 	bl	801a410 <lv_disp_get_dpi>
 8021b98:	4603      	mov	r3, r0
 8021b9a:	3350      	adds	r3, #80	; 0x50
 8021b9c:	4a86      	ldr	r2, [pc, #536]	; (8021db8 <chart_init+0x2a4>)
 8021b9e:	fb82 1203 	smull	r1, r2, r2, r3
 8021ba2:	1192      	asrs	r2, r2, #6
 8021ba4:	17db      	asrs	r3, r3, #31
 8021ba6:	1ad3      	subs	r3, r2, r3
 8021ba8:	b21b      	sxth	r3, r3
 8021baa:	e000      	b.n	8021bae <chart_init+0x9a>
 8021bac:	2301      	movs	r3, #1
 8021bae:	461a      	mov	r2, r3
 8021bb0:	2100      	movs	r1, #0
 8021bb2:	4620      	mov	r0, r4
 8021bb4:	f7fd fa54 	bl	801f060 <lv_style_set_line_width>
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8021bb8:	4b7c      	ldr	r3, [pc, #496]	; (8021dac <chart_init+0x298>)
 8021bba:	681b      	ldr	r3, [r3, #0]
 8021bbc:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8021bc0:	2000      	movs	r0, #0
 8021bc2:	f7f8 fc25 	bl	801a410 <lv_disp_get_dpi>
 8021bc6:	4603      	mov	r3, r0
 8021bc8:	461a      	mov	r2, r3
 8021bca:	4613      	mov	r3, r2
 8021bcc:	009b      	lsls	r3, r3, #2
 8021bce:	4413      	add	r3, r2
 8021bd0:	005b      	lsls	r3, r3, #1
 8021bd2:	3350      	adds	r3, #80	; 0x50
 8021bd4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021bd8:	db11      	blt.n	8021bfe <chart_init+0xea>
 8021bda:	2000      	movs	r0, #0
 8021bdc:	f7f8 fc18 	bl	801a410 <lv_disp_get_dpi>
 8021be0:	4603      	mov	r3, r0
 8021be2:	461a      	mov	r2, r3
 8021be4:	4613      	mov	r3, r2
 8021be6:	009b      	lsls	r3, r3, #2
 8021be8:	4413      	add	r3, r2
 8021bea:	005b      	lsls	r3, r3, #1
 8021bec:	3350      	adds	r3, #80	; 0x50
 8021bee:	4a72      	ldr	r2, [pc, #456]	; (8021db8 <chart_init+0x2a4>)
 8021bf0:	fb82 1203 	smull	r1, r2, r2, r3
 8021bf4:	1192      	asrs	r2, r2, #6
 8021bf6:	17db      	asrs	r3, r3, #31
 8021bf8:	1ad3      	subs	r3, r2, r3
 8021bfa:	b21b      	sxth	r3, r3
 8021bfc:	e000      	b.n	8021c00 <chart_init+0xec>
 8021bfe:	2301      	movs	r3, #1
 8021c00:	461a      	mov	r2, r3
 8021c02:	2100      	movs	r1, #0
 8021c04:	4620      	mov	r0, r4
 8021c06:	f7fd fa44 	bl	801f092 <lv_style_set_line_dash_width>
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8021c0a:	4b68      	ldr	r3, [pc, #416]	; (8021dac <chart_init+0x298>)
 8021c0c:	681b      	ldr	r3, [r3, #0]
 8021c0e:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8021c12:	2000      	movs	r0, #0
 8021c14:	f7f8 fbfc 	bl	801a410 <lv_disp_get_dpi>
 8021c18:	4603      	mov	r3, r0
 8021c1a:	461a      	mov	r2, r3
 8021c1c:	4613      	mov	r3, r2
 8021c1e:	009b      	lsls	r3, r3, #2
 8021c20:	4413      	add	r3, r2
 8021c22:	005b      	lsls	r3, r3, #1
 8021c24:	3350      	adds	r3, #80	; 0x50
 8021c26:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021c2a:	db11      	blt.n	8021c50 <chart_init+0x13c>
 8021c2c:	2000      	movs	r0, #0
 8021c2e:	f7f8 fbef 	bl	801a410 <lv_disp_get_dpi>
 8021c32:	4603      	mov	r3, r0
 8021c34:	461a      	mov	r2, r3
 8021c36:	4613      	mov	r3, r2
 8021c38:	009b      	lsls	r3, r3, #2
 8021c3a:	4413      	add	r3, r2
 8021c3c:	005b      	lsls	r3, r3, #1
 8021c3e:	3350      	adds	r3, #80	; 0x50
 8021c40:	4a5d      	ldr	r2, [pc, #372]	; (8021db8 <chart_init+0x2a4>)
 8021c42:	fb82 1203 	smull	r1, r2, r2, r3
 8021c46:	1192      	asrs	r2, r2, #6
 8021c48:	17db      	asrs	r3, r3, #31
 8021c4a:	1ad3      	subs	r3, r2, r3
 8021c4c:	b21b      	sxth	r3, r3
 8021c4e:	e000      	b.n	8021c52 <chart_init+0x13e>
 8021c50:	2301      	movs	r3, #1
 8021c52:	461a      	mov	r2, r3
 8021c54:	2100      	movs	r1, #0
 8021c56:	4620      	mov	r0, r4
 8021c58:	f7fd fa34 	bl	801f0c4 <lv_style_set_line_dash_gap>
    lv_style_set_line_color(&styles->chart_series_bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 8021c5c:	4b53      	ldr	r3, [pc, #332]	; (8021dac <chart_init+0x298>)
 8021c5e:	681b      	ldr	r3, [r3, #0]
 8021c60:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8021c64:	4b52      	ldr	r3, [pc, #328]	; (8021db0 <chart_init+0x29c>)
 8021c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021c68:	f003 0302 	and.w	r3, r3, #2
 8021c6c:	2b00      	cmp	r3, #0
 8021c6e:	d004      	beq.n	8021c7a <chart_init+0x166>
 8021c70:	4852      	ldr	r0, [pc, #328]	; (8021dbc <chart_init+0x2a8>)
 8021c72:	f7fc fe1f 	bl	801e8b4 <lv_color_hex>
 8021c76:	4603      	mov	r3, r0
 8021c78:	e003      	b.n	8021c82 <chart_init+0x16e>
 8021c7a:	4851      	ldr	r0, [pc, #324]	; (8021dc0 <chart_init+0x2ac>)
 8021c7c:	f7fc fe1a 	bl	801e8b4 <lv_color_hex>
 8021c80:	4603      	mov	r3, r0
 8021c82:	461a      	mov	r2, r3
 8021c84:	2100      	movs	r1, #0
 8021c86:	4620      	mov	r0, r4
 8021c88:	f7fd fa4e 	bl	801f128 <lv_style_set_line_color>

    style_init_reset(&styles->chart_series);
 8021c8c:	4b47      	ldr	r3, [pc, #284]	; (8021dac <chart_init+0x298>)
 8021c8e:	681b      	ldr	r3, [r3, #0]
 8021c90:	334c      	adds	r3, #76	; 0x4c
 8021c92:	4618      	mov	r0, r3
 8021c94:	f003 fbcc 	bl	8025430 <style_init_reset>
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
 8021c98:	4b44      	ldr	r3, [pc, #272]	; (8021dac <chart_init+0x298>)
 8021c9a:	681b      	ldr	r3, [r3, #0]
 8021c9c:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8021ca0:	2000      	movs	r0, #0
 8021ca2:	f7f8 fbb5 	bl	801a410 <lv_disp_get_dpi>
 8021ca6:	4603      	mov	r3, r0
 8021ca8:	461a      	mov	r2, r3
 8021caa:	4613      	mov	r3, r2
 8021cac:	005b      	lsls	r3, r3, #1
 8021cae:	4413      	add	r3, r2
 8021cb0:	3350      	adds	r3, #80	; 0x50
 8021cb2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021cb6:	db10      	blt.n	8021cda <chart_init+0x1c6>
 8021cb8:	2000      	movs	r0, #0
 8021cba:	f7f8 fba9 	bl	801a410 <lv_disp_get_dpi>
 8021cbe:	4603      	mov	r3, r0
 8021cc0:	461a      	mov	r2, r3
 8021cc2:	4613      	mov	r3, r2
 8021cc4:	005b      	lsls	r3, r3, #1
 8021cc6:	4413      	add	r3, r2
 8021cc8:	3350      	adds	r3, #80	; 0x50
 8021cca:	4a3b      	ldr	r2, [pc, #236]	; (8021db8 <chart_init+0x2a4>)
 8021ccc:	fb82 1203 	smull	r1, r2, r2, r3
 8021cd0:	1192      	asrs	r2, r2, #6
 8021cd2:	17db      	asrs	r3, r3, #31
 8021cd4:	1ad3      	subs	r3, r2, r3
 8021cd6:	b21b      	sxth	r3, r3
 8021cd8:	e000      	b.n	8021cdc <chart_init+0x1c8>
 8021cda:	2301      	movs	r3, #1
 8021cdc:	461a      	mov	r2, r3
 8021cde:	2100      	movs	r1, #0
 8021ce0:	4620      	mov	r0, r4
 8021ce2:	f7fd f9bd 	bl	801f060 <lv_style_set_line_width>
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
 8021ce6:	4b31      	ldr	r3, [pc, #196]	; (8021dac <chart_init+0x298>)
 8021ce8:	681b      	ldr	r3, [r3, #0]
 8021cea:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8021cee:	2000      	movs	r0, #0
 8021cf0:	f7f8 fb8e 	bl	801a410 <lv_disp_get_dpi>
 8021cf4:	4603      	mov	r3, r0
 8021cf6:	3314      	adds	r3, #20
 8021cf8:	009b      	lsls	r3, r3, #2
 8021cfa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021cfe:	db0d      	blt.n	8021d1c <chart_init+0x208>
 8021d00:	2000      	movs	r0, #0
 8021d02:	f7f8 fb85 	bl	801a410 <lv_disp_get_dpi>
 8021d06:	4603      	mov	r3, r0
 8021d08:	3314      	adds	r3, #20
 8021d0a:	009b      	lsls	r3, r3, #2
 8021d0c:	4a2a      	ldr	r2, [pc, #168]	; (8021db8 <chart_init+0x2a4>)
 8021d0e:	fb82 1203 	smull	r1, r2, r2, r3
 8021d12:	1192      	asrs	r2, r2, #6
 8021d14:	17db      	asrs	r3, r3, #31
 8021d16:	1ad3      	subs	r3, r2, r3
 8021d18:	b21b      	sxth	r3, r3
 8021d1a:	e000      	b.n	8021d1e <chart_init+0x20a>
 8021d1c:	2301      	movs	r3, #1
 8021d1e:	461a      	mov	r2, r3
 8021d20:	2100      	movs	r1, #0
 8021d22:	4620      	mov	r0, r4
 8021d24:	f7fc fe3e 	bl	801e9a4 <lv_style_set_size>
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
 8021d28:	4b20      	ldr	r3, [pc, #128]	; (8021dac <chart_init+0x298>)
 8021d2a:	681b      	ldr	r3, [r3, #0]
 8021d2c:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8021d30:	2000      	movs	r0, #0
 8021d32:	f7f8 fb6d 	bl	801a410 <lv_disp_get_dpi>
 8021d36:	4603      	mov	r3, r0
 8021d38:	3328      	adds	r3, #40	; 0x28
 8021d3a:	005b      	lsls	r3, r3, #1
 8021d3c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021d40:	db0d      	blt.n	8021d5e <chart_init+0x24a>
 8021d42:	2000      	movs	r0, #0
 8021d44:	f7f8 fb64 	bl	801a410 <lv_disp_get_dpi>
 8021d48:	4603      	mov	r3, r0
 8021d4a:	3328      	adds	r3, #40	; 0x28
 8021d4c:	005b      	lsls	r3, r3, #1
 8021d4e:	4a1a      	ldr	r2, [pc, #104]	; (8021db8 <chart_init+0x2a4>)
 8021d50:	fb82 1203 	smull	r1, r2, r2, r3
 8021d54:	1192      	asrs	r2, r2, #6
 8021d56:	17db      	asrs	r3, r3, #31
 8021d58:	1ad3      	subs	r3, r2, r3
 8021d5a:	b21b      	sxth	r3, r3
 8021d5c:	e000      	b.n	8021d60 <chart_init+0x24c>
 8021d5e:	2301      	movs	r3, #1
 8021d60:	461a      	mov	r2, r3
 8021d62:	2100      	movs	r1, #0
 8021d64:	4620      	mov	r0, r4
 8021d66:	f7fc feb3 	bl	801ead0 <lv_style_set_pad_inner>
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
 8021d6a:	4b10      	ldr	r3, [pc, #64]	; (8021dac <chart_init+0x298>)
 8021d6c:	681b      	ldr	r3, [r3, #0]
 8021d6e:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8021d72:	2000      	movs	r0, #0
 8021d74:	f7f8 fb4c 	bl	801a410 <lv_disp_get_dpi>
 8021d78:	4603      	mov	r3, r0
 8021d7a:	3350      	adds	r3, #80	; 0x50
 8021d7c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021d80:	db0c      	blt.n	8021d9c <chart_init+0x288>
 8021d82:	2000      	movs	r0, #0
 8021d84:	f7f8 fb44 	bl	801a410 <lv_disp_get_dpi>
 8021d88:	4603      	mov	r3, r0
 8021d8a:	3350      	adds	r3, #80	; 0x50
 8021d8c:	4a0a      	ldr	r2, [pc, #40]	; (8021db8 <chart_init+0x2a4>)
 8021d8e:	fb82 1203 	smull	r1, r2, r2, r3
 8021d92:	1192      	asrs	r2, r2, #6
 8021d94:	17db      	asrs	r3, r3, #31
 8021d96:	1ad3      	subs	r3, r2, r3
 8021d98:	b21b      	sxth	r3, r3
 8021d9a:	e000      	b.n	8021d9e <chart_init+0x28a>
 8021d9c:	2301      	movs	r3, #1
 8021d9e:	461a      	mov	r2, r3
 8021da0:	2100      	movs	r1, #0
 8021da2:	4620      	mov	r0, r4
 8021da4:	f7fc fdcc 	bl	801e940 <lv_style_set_radius>

#endif
}
 8021da8:	bf00      	nop
 8021daa:	bd98      	pop	{r3, r4, r7, pc}
 8021dac:	20021498 	.word	0x20021498
 8021db0:	2002146c 	.word	0x2002146c
 8021db4:	00a1adbd 	.word	0x00a1adbd
 8021db8:	66666667 	.word	0x66666667
 8021dbc:	00d6dde3 	.word	0x00d6dde3
 8021dc0:	00808a97 	.word	0x00808a97

08021dc4 <calendar_init>:

static void calendar_init(void)
{
 8021dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021dc8:	af00      	add	r7, sp, #0
#if LV_USE_CALENDAR

    style_init_reset(&styles->calendar_header);
 8021dca:	4bc1      	ldr	r3, [pc, #772]	; (80220d0 <calendar_init+0x30c>)
 8021dcc:	681b      	ldr	r3, [r3, #0]
 8021dce:	3334      	adds	r3, #52	; 0x34
 8021dd0:	4618      	mov	r0, r3
 8021dd2:	f003 fb2d 	bl	8025430 <style_init_reset>
    lv_style_set_pad_top(&styles->calendar_header, LV_STATE_DEFAULT, 0);
 8021dd6:	4bbe      	ldr	r3, [pc, #760]	; (80220d0 <calendar_init+0x30c>)
 8021dd8:	681b      	ldr	r3, [r3, #0]
 8021dda:	3334      	adds	r3, #52	; 0x34
 8021ddc:	2200      	movs	r2, #0
 8021dde:	2100      	movs	r1, #0
 8021de0:	4618      	mov	r0, r3
 8021de2:	f7fc fe11 	bl	801ea08 <lv_style_set_pad_top>
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 8021de6:	4bba      	ldr	r3, [pc, #744]	; (80220d0 <calendar_init+0x30c>)
 8021de8:	681b      	ldr	r3, [r3, #0]
 8021dea:	f103 0a34 	add.w	sl, r3, #52	; 0x34
 8021dee:	2000      	movs	r0, #0
 8021df0:	f7f8 fb27 	bl	801a442 <lv_disp_get_size_category>
 8021df4:	4603      	mov	r3, r0
 8021df6:	2b01      	cmp	r3, #1
 8021df8:	d81e      	bhi.n	8021e38 <calendar_init+0x74>
 8021dfa:	2000      	movs	r0, #0
 8021dfc:	f7f8 fb08 	bl	801a410 <lv_disp_get_dpi>
 8021e00:	4603      	mov	r3, r0
 8021e02:	461a      	mov	r2, r3
 8021e04:	4613      	mov	r3, r2
 8021e06:	011b      	lsls	r3, r3, #4
 8021e08:	1a9b      	subs	r3, r3, r2
 8021e0a:	3350      	adds	r3, #80	; 0x50
 8021e0c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021e10:	db10      	blt.n	8021e34 <calendar_init+0x70>
 8021e12:	2000      	movs	r0, #0
 8021e14:	f7f8 fafc 	bl	801a410 <lv_disp_get_dpi>
 8021e18:	4603      	mov	r3, r0
 8021e1a:	461a      	mov	r2, r3
 8021e1c:	4613      	mov	r3, r2
 8021e1e:	011b      	lsls	r3, r3, #4
 8021e20:	1a9b      	subs	r3, r3, r2
 8021e22:	3350      	adds	r3, #80	; 0x50
 8021e24:	4aab      	ldr	r2, [pc, #684]	; (80220d4 <calendar_init+0x310>)
 8021e26:	fb82 1203 	smull	r1, r2, r2, r3
 8021e2a:	1192      	asrs	r2, r2, #6
 8021e2c:	17db      	asrs	r3, r3, #31
 8021e2e:	1ad3      	subs	r3, r2, r3
 8021e30:	b21b      	sxth	r3, r3
 8021e32:	e021      	b.n	8021e78 <calendar_init+0xb4>
 8021e34:	2301      	movs	r3, #1
 8021e36:	e01f      	b.n	8021e78 <calendar_init+0xb4>
 8021e38:	2000      	movs	r0, #0
 8021e3a:	f7f8 fae9 	bl	801a410 <lv_disp_get_dpi>
 8021e3e:	4603      	mov	r3, r0
 8021e40:	461a      	mov	r2, r3
 8021e42:	4613      	mov	r3, r2
 8021e44:	011b      	lsls	r3, r3, #4
 8021e46:	1a9b      	subs	r3, r3, r2
 8021e48:	005b      	lsls	r3, r3, #1
 8021e4a:	3350      	adds	r3, #80	; 0x50
 8021e4c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021e50:	db11      	blt.n	8021e76 <calendar_init+0xb2>
 8021e52:	2000      	movs	r0, #0
 8021e54:	f7f8 fadc 	bl	801a410 <lv_disp_get_dpi>
 8021e58:	4603      	mov	r3, r0
 8021e5a:	461a      	mov	r2, r3
 8021e5c:	4613      	mov	r3, r2
 8021e5e:	011b      	lsls	r3, r3, #4
 8021e60:	1a9b      	subs	r3, r3, r2
 8021e62:	005b      	lsls	r3, r3, #1
 8021e64:	3350      	adds	r3, #80	; 0x50
 8021e66:	4a9b      	ldr	r2, [pc, #620]	; (80220d4 <calendar_init+0x310>)
 8021e68:	fb82 1203 	smull	r1, r2, r2, r3
 8021e6c:	1192      	asrs	r2, r2, #6
 8021e6e:	17db      	asrs	r3, r3, #31
 8021e70:	1ad3      	subs	r3, r2, r3
 8021e72:	b21b      	sxth	r3, r3
 8021e74:	e000      	b.n	8021e78 <calendar_init+0xb4>
 8021e76:	2301      	movs	r3, #1
 8021e78:	461a      	mov	r2, r3
 8021e7a:	2100      	movs	r1, #0
 8021e7c:	4650      	mov	r0, sl
 8021e7e:	f7fc fdf5 	bl	801ea6c <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 8021e82:	4b93      	ldr	r3, [pc, #588]	; (80220d0 <calendar_init+0x30c>)
 8021e84:	681b      	ldr	r3, [r3, #0]
 8021e86:	f103 0a34 	add.w	sl, r3, #52	; 0x34
 8021e8a:	2000      	movs	r0, #0
 8021e8c:	f7f8 fad9 	bl	801a442 <lv_disp_get_size_category>
 8021e90:	4603      	mov	r3, r0
 8021e92:	2b01      	cmp	r3, #1
 8021e94:	d81e      	bhi.n	8021ed4 <calendar_init+0x110>
 8021e96:	2000      	movs	r0, #0
 8021e98:	f7f8 faba 	bl	801a410 <lv_disp_get_dpi>
 8021e9c:	4603      	mov	r3, r0
 8021e9e:	461a      	mov	r2, r3
 8021ea0:	4613      	mov	r3, r2
 8021ea2:	011b      	lsls	r3, r3, #4
 8021ea4:	1a9b      	subs	r3, r3, r2
 8021ea6:	3350      	adds	r3, #80	; 0x50
 8021ea8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021eac:	db10      	blt.n	8021ed0 <calendar_init+0x10c>
 8021eae:	2000      	movs	r0, #0
 8021eb0:	f7f8 faae 	bl	801a410 <lv_disp_get_dpi>
 8021eb4:	4603      	mov	r3, r0
 8021eb6:	461a      	mov	r2, r3
 8021eb8:	4613      	mov	r3, r2
 8021eba:	011b      	lsls	r3, r3, #4
 8021ebc:	1a9b      	subs	r3, r3, r2
 8021ebe:	3350      	adds	r3, #80	; 0x50
 8021ec0:	4a84      	ldr	r2, [pc, #528]	; (80220d4 <calendar_init+0x310>)
 8021ec2:	fb82 1203 	smull	r1, r2, r2, r3
 8021ec6:	1192      	asrs	r2, r2, #6
 8021ec8:	17db      	asrs	r3, r3, #31
 8021eca:	1ad3      	subs	r3, r2, r3
 8021ecc:	b21b      	sxth	r3, r3
 8021ece:	e021      	b.n	8021f14 <calendar_init+0x150>
 8021ed0:	2301      	movs	r3, #1
 8021ed2:	e01f      	b.n	8021f14 <calendar_init+0x150>
 8021ed4:	2000      	movs	r0, #0
 8021ed6:	f7f8 fa9b 	bl	801a410 <lv_disp_get_dpi>
 8021eda:	4603      	mov	r3, r0
 8021edc:	461a      	mov	r2, r3
 8021ede:	4613      	mov	r3, r2
 8021ee0:	011b      	lsls	r3, r3, #4
 8021ee2:	1a9b      	subs	r3, r3, r2
 8021ee4:	005b      	lsls	r3, r3, #1
 8021ee6:	3350      	adds	r3, #80	; 0x50
 8021ee8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021eec:	db11      	blt.n	8021f12 <calendar_init+0x14e>
 8021eee:	2000      	movs	r0, #0
 8021ef0:	f7f8 fa8e 	bl	801a410 <lv_disp_get_dpi>
 8021ef4:	4603      	mov	r3, r0
 8021ef6:	461a      	mov	r2, r3
 8021ef8:	4613      	mov	r3, r2
 8021efa:	011b      	lsls	r3, r3, #4
 8021efc:	1a9b      	subs	r3, r3, r2
 8021efe:	005b      	lsls	r3, r3, #1
 8021f00:	3350      	adds	r3, #80	; 0x50
 8021f02:	4a74      	ldr	r2, [pc, #464]	; (80220d4 <calendar_init+0x310>)
 8021f04:	fb82 1203 	smull	r1, r2, r2, r3
 8021f08:	1192      	asrs	r2, r2, #6
 8021f0a:	17db      	asrs	r3, r3, #31
 8021f0c:	1ad3      	subs	r3, r2, r3
 8021f0e:	b21b      	sxth	r3, r3
 8021f10:	e000      	b.n	8021f14 <calendar_init+0x150>
 8021f12:	2301      	movs	r3, #1
 8021f14:	461a      	mov	r2, r3
 8021f16:	2100      	movs	r1, #0
 8021f18:	4650      	mov	r0, sl
 8021f1a:	f7fc fdc0 	bl	801ea9e <lv_style_set_pad_right>
    lv_style_set_pad_bottom(&styles->calendar_header, LV_STATE_DEFAULT, 0);
 8021f1e:	4b6c      	ldr	r3, [pc, #432]	; (80220d0 <calendar_init+0x30c>)
 8021f20:	681b      	ldr	r3, [r3, #0]
 8021f22:	3334      	adds	r3, #52	; 0x34
 8021f24:	2200      	movs	r2, #0
 8021f26:	2100      	movs	r1, #0
 8021f28:	4618      	mov	r0, r3
 8021f2a:	f7fc fd86 	bl	801ea3a <lv_style_set_pad_bottom>
    lv_style_set_margin_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 8021f2e:	4b68      	ldr	r3, [pc, #416]	; (80220d0 <calendar_init+0x30c>)
 8021f30:	681b      	ldr	r3, [r3, #0]
 8021f32:	f103 0a34 	add.w	sl, r3, #52	; 0x34
 8021f36:	2000      	movs	r0, #0
 8021f38:	f7f8 fa83 	bl	801a442 <lv_disp_get_size_category>
 8021f3c:	4603      	mov	r3, r0
 8021f3e:	2b01      	cmp	r3, #1
 8021f40:	d81e      	bhi.n	8021f80 <calendar_init+0x1bc>
 8021f42:	2000      	movs	r0, #0
 8021f44:	f7f8 fa64 	bl	801a410 <lv_disp_get_dpi>
 8021f48:	4603      	mov	r3, r0
 8021f4a:	461a      	mov	r2, r3
 8021f4c:	4613      	mov	r3, r2
 8021f4e:	011b      	lsls	r3, r3, #4
 8021f50:	1a9b      	subs	r3, r3, r2
 8021f52:	3350      	adds	r3, #80	; 0x50
 8021f54:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021f58:	db10      	blt.n	8021f7c <calendar_init+0x1b8>
 8021f5a:	2000      	movs	r0, #0
 8021f5c:	f7f8 fa58 	bl	801a410 <lv_disp_get_dpi>
 8021f60:	4603      	mov	r3, r0
 8021f62:	461a      	mov	r2, r3
 8021f64:	4613      	mov	r3, r2
 8021f66:	011b      	lsls	r3, r3, #4
 8021f68:	1a9b      	subs	r3, r3, r2
 8021f6a:	3350      	adds	r3, #80	; 0x50
 8021f6c:	4a59      	ldr	r2, [pc, #356]	; (80220d4 <calendar_init+0x310>)
 8021f6e:	fb82 1203 	smull	r1, r2, r2, r3
 8021f72:	1192      	asrs	r2, r2, #6
 8021f74:	17db      	asrs	r3, r3, #31
 8021f76:	1ad3      	subs	r3, r2, r3
 8021f78:	b21b      	sxth	r3, r3
 8021f7a:	e021      	b.n	8021fc0 <calendar_init+0x1fc>
 8021f7c:	2301      	movs	r3, #1
 8021f7e:	e01f      	b.n	8021fc0 <calendar_init+0x1fc>
 8021f80:	2000      	movs	r0, #0
 8021f82:	f7f8 fa45 	bl	801a410 <lv_disp_get_dpi>
 8021f86:	4603      	mov	r3, r0
 8021f88:	461a      	mov	r2, r3
 8021f8a:	4613      	mov	r3, r2
 8021f8c:	011b      	lsls	r3, r3, #4
 8021f8e:	1a9b      	subs	r3, r3, r2
 8021f90:	005b      	lsls	r3, r3, #1
 8021f92:	3350      	adds	r3, #80	; 0x50
 8021f94:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021f98:	db11      	blt.n	8021fbe <calendar_init+0x1fa>
 8021f9a:	2000      	movs	r0, #0
 8021f9c:	f7f8 fa38 	bl	801a410 <lv_disp_get_dpi>
 8021fa0:	4603      	mov	r3, r0
 8021fa2:	461a      	mov	r2, r3
 8021fa4:	4613      	mov	r3, r2
 8021fa6:	011b      	lsls	r3, r3, #4
 8021fa8:	1a9b      	subs	r3, r3, r2
 8021faa:	005b      	lsls	r3, r3, #1
 8021fac:	3350      	adds	r3, #80	; 0x50
 8021fae:	4a49      	ldr	r2, [pc, #292]	; (80220d4 <calendar_init+0x310>)
 8021fb0:	fb82 1203 	smull	r1, r2, r2, r3
 8021fb4:	1192      	asrs	r2, r2, #6
 8021fb6:	17db      	asrs	r3, r3, #31
 8021fb8:	1ad3      	subs	r3, r2, r3
 8021fba:	b21b      	sxth	r3, r3
 8021fbc:	e000      	b.n	8021fc0 <calendar_init+0x1fc>
 8021fbe:	2301      	movs	r3, #1
 8021fc0:	461a      	mov	r2, r3
 8021fc2:	2100      	movs	r1, #0
 8021fc4:	4650      	mov	r0, sl
 8021fc6:	f7fc fd9c 	bl	801eb02 <lv_style_set_margin_top>
    lv_style_set_margin_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
 8021fca:	4b41      	ldr	r3, [pc, #260]	; (80220d0 <calendar_init+0x30c>)
 8021fcc:	681b      	ldr	r3, [r3, #0]
 8021fce:	f103 0a34 	add.w	sl, r3, #52	; 0x34
 8021fd2:	2000      	movs	r0, #0
 8021fd4:	f7f8 fa35 	bl	801a442 <lv_disp_get_size_category>
 8021fd8:	4603      	mov	r3, r0
 8021fda:	2b01      	cmp	r3, #1
 8021fdc:	d81e      	bhi.n	802201c <calendar_init+0x258>
 8021fde:	2000      	movs	r0, #0
 8021fe0:	f7f8 fa16 	bl	801a410 <lv_disp_get_dpi>
 8021fe4:	4603      	mov	r3, r0
 8021fe6:	461a      	mov	r2, r3
 8021fe8:	4613      	mov	r3, r2
 8021fea:	011b      	lsls	r3, r3, #4
 8021fec:	1a9b      	subs	r3, r3, r2
 8021fee:	3350      	adds	r3, #80	; 0x50
 8021ff0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8021ff4:	db10      	blt.n	8022018 <calendar_init+0x254>
 8021ff6:	2000      	movs	r0, #0
 8021ff8:	f7f8 fa0a 	bl	801a410 <lv_disp_get_dpi>
 8021ffc:	4603      	mov	r3, r0
 8021ffe:	461a      	mov	r2, r3
 8022000:	4613      	mov	r3, r2
 8022002:	011b      	lsls	r3, r3, #4
 8022004:	1a9b      	subs	r3, r3, r2
 8022006:	3350      	adds	r3, #80	; 0x50
 8022008:	4a32      	ldr	r2, [pc, #200]	; (80220d4 <calendar_init+0x310>)
 802200a:	fb82 1203 	smull	r1, r2, r2, r3
 802200e:	1192      	asrs	r2, r2, #6
 8022010:	17db      	asrs	r3, r3, #31
 8022012:	1ad3      	subs	r3, r2, r3
 8022014:	b21b      	sxth	r3, r3
 8022016:	e021      	b.n	802205c <calendar_init+0x298>
 8022018:	2301      	movs	r3, #1
 802201a:	e01f      	b.n	802205c <calendar_init+0x298>
 802201c:	2000      	movs	r0, #0
 802201e:	f7f8 f9f7 	bl	801a410 <lv_disp_get_dpi>
 8022022:	4603      	mov	r3, r0
 8022024:	461a      	mov	r2, r3
 8022026:	4613      	mov	r3, r2
 8022028:	011b      	lsls	r3, r3, #4
 802202a:	1a9b      	subs	r3, r3, r2
 802202c:	005b      	lsls	r3, r3, #1
 802202e:	3350      	adds	r3, #80	; 0x50
 8022030:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022034:	db11      	blt.n	802205a <calendar_init+0x296>
 8022036:	2000      	movs	r0, #0
 8022038:	f7f8 f9ea 	bl	801a410 <lv_disp_get_dpi>
 802203c:	4603      	mov	r3, r0
 802203e:	461a      	mov	r2, r3
 8022040:	4613      	mov	r3, r2
 8022042:	011b      	lsls	r3, r3, #4
 8022044:	1a9b      	subs	r3, r3, r2
 8022046:	005b      	lsls	r3, r3, #1
 8022048:	3350      	adds	r3, #80	; 0x50
 802204a:	4a22      	ldr	r2, [pc, #136]	; (80220d4 <calendar_init+0x310>)
 802204c:	fb82 1203 	smull	r1, r2, r2, r3
 8022050:	1192      	asrs	r2, r2, #6
 8022052:	17db      	asrs	r3, r3, #31
 8022054:	1ad3      	subs	r3, r2, r3
 8022056:	b21b      	sxth	r3, r3
 8022058:	e000      	b.n	802205c <calendar_init+0x298>
 802205a:	2301      	movs	r3, #1
 802205c:	461a      	mov	r2, r3
 802205e:	2100      	movs	r1, #0
 8022060:	4650      	mov	r0, sl
 8022062:	f7fc fd67 	bl	801eb34 <lv_style_set_margin_bottom>
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
 8022066:	4b1a      	ldr	r3, [pc, #104]	; (80220d0 <calendar_init+0x30c>)
 8022068:	681b      	ldr	r3, [r3, #0]
 802206a:	f103 0a34 	add.w	sl, r3, #52	; 0x34
 802206e:	4b1a      	ldr	r3, [pc, #104]	; (80220d8 <calendar_init+0x314>)
 8022070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022072:	f003 0302 	and.w	r3, r3, #2
 8022076:	2b00      	cmp	r3, #0
 8022078:	d004      	beq.n	8022084 <calendar_init+0x2c0>
 802207a:	4818      	ldr	r0, [pc, #96]	; (80220dc <calendar_init+0x318>)
 802207c:	f7fc fc1a 	bl	801e8b4 <lv_color_hex>
 8022080:	4680      	mov	r8, r0
 8022082:	e00b      	b.n	802209c <calendar_init+0x2d8>
 8022084:	4643      	mov	r3, r8
 8022086:	f043 08ff 	orr.w	r8, r3, #255	; 0xff
 802208a:	4643      	mov	r3, r8
 802208c:	f443 487f 	orr.w	r8, r3, #65280	; 0xff00
 8022090:	4643      	mov	r3, r8
 8022092:	f443 087f 	orr.w	r8, r3, #16711680	; 0xff0000
 8022096:	4643      	mov	r3, r8
 8022098:	f043 487f 	orr.w	r8, r3, #4278190080	; 0xff000000
 802209c:	4642      	mov	r2, r8
 802209e:	2110      	movs	r1, #16
 80220a0:	4650      	mov	r0, sl
 80220a2:	f7fc ff75 	bl	801ef90 <lv_style_set_text_color>

    style_init_reset(&styles->calendar_daynames);
 80220a6:	4b0a      	ldr	r3, [pc, #40]	; (80220d0 <calendar_init+0x30c>)
 80220a8:	681b      	ldr	r3, [r3, #0]
 80220aa:	3338      	adds	r3, #56	; 0x38
 80220ac:	4618      	mov	r0, r3
 80220ae:	f003 f9bf 	bl	8025430 <style_init_reset>
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
 80220b2:	4b07      	ldr	r3, [pc, #28]	; (80220d0 <calendar_init+0x30c>)
 80220b4:	681b      	ldr	r3, [r3, #0]
 80220b6:	f103 0838 	add.w	r8, r3, #56	; 0x38
                            IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex3(0xeee));
 80220ba:	4b07      	ldr	r3, [pc, #28]	; (80220d8 <calendar_init+0x314>)
 80220bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80220be:	f003 0302 	and.w	r3, r3, #2
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
 80220c2:	2b00      	cmp	r3, #0
 80220c4:	d00e      	beq.n	80220e4 <calendar_init+0x320>
 80220c6:	4806      	ldr	r0, [pc, #24]	; (80220e0 <calendar_init+0x31c>)
 80220c8:	f7fc fbf4 	bl	801e8b4 <lv_color_hex>
 80220cc:	4603      	mov	r3, r0
 80220ce:	e00e      	b.n	80220ee <calendar_init+0x32a>
 80220d0:	20021498 	.word	0x20021498
 80220d4:	66666667 	.word	0x66666667
 80220d8:	2002146c 	.word	0x2002146c
 80220dc:	00888888 	.word	0x00888888
 80220e0:	0031404f 	.word	0x0031404f
 80220e4:	f640 60ee 	movw	r0, #3822	; 0xeee
 80220e8:	f7fc fbf8 	bl	801e8dc <lv_color_hex3>
 80220ec:	4603      	mov	r3, r0
 80220ee:	461a      	mov	r2, r3
 80220f0:	2100      	movs	r1, #0
 80220f2:	4640      	mov	r0, r8
 80220f4:	f7fc ff4c 	bl	801ef90 <lv_style_set_text_color>
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
 80220f8:	4bca      	ldr	r3, [pc, #808]	; (8022424 <calendar_init+0x660>)
 80220fa:	681b      	ldr	r3, [r3, #0]
 80220fc:	f103 0838 	add.w	r8, r3, #56	; 0x38
 8022100:	2000      	movs	r0, #0
 8022102:	f7f8 f99e 	bl	801a442 <lv_disp_get_size_category>
 8022106:	4603      	mov	r3, r0
 8022108:	2b01      	cmp	r3, #1
 802210a:	d81e      	bhi.n	802214a <calendar_init+0x386>
 802210c:	2000      	movs	r0, #0
 802210e:	f7f8 f97f 	bl	801a410 <lv_disp_get_dpi>
 8022112:	4603      	mov	r3, r0
 8022114:	461a      	mov	r2, r3
 8022116:	4613      	mov	r3, r2
 8022118:	011b      	lsls	r3, r3, #4
 802211a:	1a9b      	subs	r3, r3, r2
 802211c:	3350      	adds	r3, #80	; 0x50
 802211e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022122:	db10      	blt.n	8022146 <calendar_init+0x382>
 8022124:	2000      	movs	r0, #0
 8022126:	f7f8 f973 	bl	801a410 <lv_disp_get_dpi>
 802212a:	4603      	mov	r3, r0
 802212c:	461a      	mov	r2, r3
 802212e:	4613      	mov	r3, r2
 8022130:	011b      	lsls	r3, r3, #4
 8022132:	1a9b      	subs	r3, r3, r2
 8022134:	3350      	adds	r3, #80	; 0x50
 8022136:	4abc      	ldr	r2, [pc, #752]	; (8022428 <calendar_init+0x664>)
 8022138:	fb82 1203 	smull	r1, r2, r2, r3
 802213c:	1192      	asrs	r2, r2, #6
 802213e:	17db      	asrs	r3, r3, #31
 8022140:	1ad3      	subs	r3, r2, r3
 8022142:	b21b      	sxth	r3, r3
 8022144:	e021      	b.n	802218a <calendar_init+0x3c6>
 8022146:	2301      	movs	r3, #1
 8022148:	e01f      	b.n	802218a <calendar_init+0x3c6>
 802214a:	2000      	movs	r0, #0
 802214c:	f7f8 f960 	bl	801a410 <lv_disp_get_dpi>
 8022150:	4603      	mov	r3, r0
 8022152:	461a      	mov	r2, r3
 8022154:	4613      	mov	r3, r2
 8022156:	011b      	lsls	r3, r3, #4
 8022158:	1a9b      	subs	r3, r3, r2
 802215a:	005b      	lsls	r3, r3, #1
 802215c:	3350      	adds	r3, #80	; 0x50
 802215e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022162:	db11      	blt.n	8022188 <calendar_init+0x3c4>
 8022164:	2000      	movs	r0, #0
 8022166:	f7f8 f953 	bl	801a410 <lv_disp_get_dpi>
 802216a:	4603      	mov	r3, r0
 802216c:	461a      	mov	r2, r3
 802216e:	4613      	mov	r3, r2
 8022170:	011b      	lsls	r3, r3, #4
 8022172:	1a9b      	subs	r3, r3, r2
 8022174:	005b      	lsls	r3, r3, #1
 8022176:	3350      	adds	r3, #80	; 0x50
 8022178:	4aab      	ldr	r2, [pc, #684]	; (8022428 <calendar_init+0x664>)
 802217a:	fb82 1203 	smull	r1, r2, r2, r3
 802217e:	1192      	asrs	r2, r2, #6
 8022180:	17db      	asrs	r3, r3, #31
 8022182:	1ad3      	subs	r3, r2, r3
 8022184:	b21b      	sxth	r3, r3
 8022186:	e000      	b.n	802218a <calendar_init+0x3c6>
 8022188:	2301      	movs	r3, #1
 802218a:	461a      	mov	r2, r3
 802218c:	2100      	movs	r1, #0
 802218e:	4640      	mov	r0, r8
 8022190:	f7fc fc6c 	bl	801ea6c <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
 8022194:	4ba3      	ldr	r3, [pc, #652]	; (8022424 <calendar_init+0x660>)
 8022196:	681b      	ldr	r3, [r3, #0]
 8022198:	f103 0838 	add.w	r8, r3, #56	; 0x38
 802219c:	2000      	movs	r0, #0
 802219e:	f7f8 f950 	bl	801a442 <lv_disp_get_size_category>
 80221a2:	4603      	mov	r3, r0
 80221a4:	2b01      	cmp	r3, #1
 80221a6:	d81e      	bhi.n	80221e6 <calendar_init+0x422>
 80221a8:	2000      	movs	r0, #0
 80221aa:	f7f8 f931 	bl	801a410 <lv_disp_get_dpi>
 80221ae:	4603      	mov	r3, r0
 80221b0:	461a      	mov	r2, r3
 80221b2:	4613      	mov	r3, r2
 80221b4:	011b      	lsls	r3, r3, #4
 80221b6:	1a9b      	subs	r3, r3, r2
 80221b8:	3350      	adds	r3, #80	; 0x50
 80221ba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80221be:	db10      	blt.n	80221e2 <calendar_init+0x41e>
 80221c0:	2000      	movs	r0, #0
 80221c2:	f7f8 f925 	bl	801a410 <lv_disp_get_dpi>
 80221c6:	4603      	mov	r3, r0
 80221c8:	461a      	mov	r2, r3
 80221ca:	4613      	mov	r3, r2
 80221cc:	011b      	lsls	r3, r3, #4
 80221ce:	1a9b      	subs	r3, r3, r2
 80221d0:	3350      	adds	r3, #80	; 0x50
 80221d2:	4a95      	ldr	r2, [pc, #596]	; (8022428 <calendar_init+0x664>)
 80221d4:	fb82 1203 	smull	r1, r2, r2, r3
 80221d8:	1192      	asrs	r2, r2, #6
 80221da:	17db      	asrs	r3, r3, #31
 80221dc:	1ad3      	subs	r3, r2, r3
 80221de:	b21b      	sxth	r3, r3
 80221e0:	e021      	b.n	8022226 <calendar_init+0x462>
 80221e2:	2301      	movs	r3, #1
 80221e4:	e01f      	b.n	8022226 <calendar_init+0x462>
 80221e6:	2000      	movs	r0, #0
 80221e8:	f7f8 f912 	bl	801a410 <lv_disp_get_dpi>
 80221ec:	4603      	mov	r3, r0
 80221ee:	461a      	mov	r2, r3
 80221f0:	4613      	mov	r3, r2
 80221f2:	011b      	lsls	r3, r3, #4
 80221f4:	1a9b      	subs	r3, r3, r2
 80221f6:	005b      	lsls	r3, r3, #1
 80221f8:	3350      	adds	r3, #80	; 0x50
 80221fa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80221fe:	db11      	blt.n	8022224 <calendar_init+0x460>
 8022200:	2000      	movs	r0, #0
 8022202:	f7f8 f905 	bl	801a410 <lv_disp_get_dpi>
 8022206:	4603      	mov	r3, r0
 8022208:	461a      	mov	r2, r3
 802220a:	4613      	mov	r3, r2
 802220c:	011b      	lsls	r3, r3, #4
 802220e:	1a9b      	subs	r3, r3, r2
 8022210:	005b      	lsls	r3, r3, #1
 8022212:	3350      	adds	r3, #80	; 0x50
 8022214:	4a84      	ldr	r2, [pc, #528]	; (8022428 <calendar_init+0x664>)
 8022216:	fb82 1203 	smull	r1, r2, r2, r3
 802221a:	1192      	asrs	r2, r2, #6
 802221c:	17db      	asrs	r3, r3, #31
 802221e:	1ad3      	subs	r3, r2, r3
 8022220:	b21b      	sxth	r3, r3
 8022222:	e000      	b.n	8022226 <calendar_init+0x462>
 8022224:	2301      	movs	r3, #1
 8022226:	461a      	mov	r2, r3
 8022228:	2100      	movs	r1, #0
 802222a:	4640      	mov	r0, r8
 802222c:	f7fc fc37 	bl	801ea9e <lv_style_set_pad_right>
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
 8022230:	4b7c      	ldr	r3, [pc, #496]	; (8022424 <calendar_init+0x660>)
 8022232:	681b      	ldr	r3, [r3, #0]
 8022234:	f103 0838 	add.w	r8, r3, #56	; 0x38
 8022238:	2000      	movs	r0, #0
 802223a:	f7f8 f902 	bl	801a442 <lv_disp_get_size_category>
 802223e:	4603      	mov	r3, r0
 8022240:	2b01      	cmp	r3, #1
 8022242:	d81e      	bhi.n	8022282 <calendar_init+0x4be>
 8022244:	2000      	movs	r0, #0
 8022246:	f7f8 f8e3 	bl	801a410 <lv_disp_get_dpi>
 802224a:	4603      	mov	r3, r0
 802224c:	461a      	mov	r2, r3
 802224e:	4613      	mov	r3, r2
 8022250:	011b      	lsls	r3, r3, #4
 8022252:	1a9b      	subs	r3, r3, r2
 8022254:	3350      	adds	r3, #80	; 0x50
 8022256:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802225a:	db10      	blt.n	802227e <calendar_init+0x4ba>
 802225c:	2000      	movs	r0, #0
 802225e:	f7f8 f8d7 	bl	801a410 <lv_disp_get_dpi>
 8022262:	4603      	mov	r3, r0
 8022264:	461a      	mov	r2, r3
 8022266:	4613      	mov	r3, r2
 8022268:	011b      	lsls	r3, r3, #4
 802226a:	1a9b      	subs	r3, r3, r2
 802226c:	3350      	adds	r3, #80	; 0x50
 802226e:	4a6e      	ldr	r2, [pc, #440]	; (8022428 <calendar_init+0x664>)
 8022270:	fb82 1203 	smull	r1, r2, r2, r3
 8022274:	1192      	asrs	r2, r2, #6
 8022276:	17db      	asrs	r3, r3, #31
 8022278:	1ad3      	subs	r3, r2, r3
 802227a:	b21b      	sxth	r3, r3
 802227c:	e021      	b.n	80222c2 <calendar_init+0x4fe>
 802227e:	2301      	movs	r3, #1
 8022280:	e01f      	b.n	80222c2 <calendar_init+0x4fe>
 8022282:	2000      	movs	r0, #0
 8022284:	f7f8 f8c4 	bl	801a410 <lv_disp_get_dpi>
 8022288:	4603      	mov	r3, r0
 802228a:	461a      	mov	r2, r3
 802228c:	4613      	mov	r3, r2
 802228e:	011b      	lsls	r3, r3, #4
 8022290:	1a9b      	subs	r3, r3, r2
 8022292:	005b      	lsls	r3, r3, #1
 8022294:	3350      	adds	r3, #80	; 0x50
 8022296:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802229a:	db11      	blt.n	80222c0 <calendar_init+0x4fc>
 802229c:	2000      	movs	r0, #0
 802229e:	f7f8 f8b7 	bl	801a410 <lv_disp_get_dpi>
 80222a2:	4603      	mov	r3, r0
 80222a4:	461a      	mov	r2, r3
 80222a6:	4613      	mov	r3, r2
 80222a8:	011b      	lsls	r3, r3, #4
 80222aa:	1a9b      	subs	r3, r3, r2
 80222ac:	005b      	lsls	r3, r3, #1
 80222ae:	3350      	adds	r3, #80	; 0x50
 80222b0:	4a5d      	ldr	r2, [pc, #372]	; (8022428 <calendar_init+0x664>)
 80222b2:	fb82 1203 	smull	r1, r2, r2, r3
 80222b6:	1192      	asrs	r2, r2, #6
 80222b8:	17db      	asrs	r3, r3, #31
 80222ba:	1ad3      	subs	r3, r2, r3
 80222bc:	b21b      	sxth	r3, r3
 80222be:	e000      	b.n	80222c2 <calendar_init+0x4fe>
 80222c0:	2301      	movs	r3, #1
 80222c2:	461a      	mov	r2, r3
 80222c4:	2100      	movs	r1, #0
 80222c6:	4640      	mov	r0, r8
 80222c8:	f7fc fbb7 	bl	801ea3a <lv_style_set_pad_bottom>

    style_init_reset(&styles->calendar_date_nums);
 80222cc:	4b55      	ldr	r3, [pc, #340]	; (8022424 <calendar_init+0x660>)
 80222ce:	681b      	ldr	r3, [r3, #0]
 80222d0:	3330      	adds	r3, #48	; 0x30
 80222d2:	4618      	mov	r0, r3
 80222d4:	f003 f8ac 	bl	8025430 <style_init_reset>
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
 80222d8:	4b52      	ldr	r3, [pc, #328]	; (8022424 <calendar_init+0x660>)
 80222da:	681b      	ldr	r3, [r3, #0]
 80222dc:	f103 0830 	add.w	r8, r3, #48	; 0x30
 80222e0:	2000      	movs	r0, #0
 80222e2:	f7f8 f895 	bl	801a410 <lv_disp_get_dpi>
 80222e6:	4603      	mov	r3, r0
 80222e8:	3314      	adds	r3, #20
 80222ea:	009b      	lsls	r3, r3, #2
 80222ec:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80222f0:	db0d      	blt.n	802230e <calendar_init+0x54a>
 80222f2:	2000      	movs	r0, #0
 80222f4:	f7f8 f88c 	bl	801a410 <lv_disp_get_dpi>
 80222f8:	4603      	mov	r3, r0
 80222fa:	3314      	adds	r3, #20
 80222fc:	009b      	lsls	r3, r3, #2
 80222fe:	4a4a      	ldr	r2, [pc, #296]	; (8022428 <calendar_init+0x664>)
 8022300:	fb82 1203 	smull	r1, r2, r2, r3
 8022304:	1192      	asrs	r2, r2, #6
 8022306:	17db      	asrs	r3, r3, #31
 8022308:	1ad3      	subs	r3, r2, r3
 802230a:	b21b      	sxth	r3, r3
 802230c:	e000      	b.n	8022310 <calendar_init+0x54c>
 802230e:	2301      	movs	r3, #1
 8022310:	461a      	mov	r2, r3
 8022312:	2100      	movs	r1, #0
 8022314:	4640      	mov	r0, r8
 8022316:	f7fc fb13 	bl	801e940 <lv_style_set_radius>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
 802231a:	4b42      	ldr	r3, [pc, #264]	; (8022424 <calendar_init+0x660>)
 802231c:	681b      	ldr	r3, [r3, #0]
 802231e:	f103 0830 	add.w	r8, r3, #48	; 0x30
                            IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
 8022322:	4b42      	ldr	r3, [pc, #264]	; (802242c <calendar_init+0x668>)
 8022324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022326:	f003 0302 	and.w	r3, r3, #2
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
 802232a:	2b00      	cmp	r3, #0
 802232c:	d004      	beq.n	8022338 <calendar_init+0x574>
 802232e:	4840      	ldr	r0, [pc, #256]	; (8022430 <calendar_init+0x66c>)
 8022330:	f7fc fac0 	bl	801e8b4 <lv_color_hex>
 8022334:	4606      	mov	r6, r0
 8022336:	e00b      	b.n	8022350 <calendar_init+0x58c>
 8022338:	4633      	mov	r3, r6
 802233a:	f043 06ff 	orr.w	r6, r3, #255	; 0xff
 802233e:	4633      	mov	r3, r6
 8022340:	f443 467f 	orr.w	r6, r3, #65280	; 0xff00
 8022344:	4633      	mov	r3, r6
 8022346:	f443 067f 	orr.w	r6, r3, #16711680	; 0xff0000
 802234a:	4633      	mov	r3, r6
 802234c:	f043 467f 	orr.w	r6, r3, #4278190080	; 0xff000000
 8022350:	4632      	mov	r2, r6
 8022352:	2101      	movs	r1, #1
 8022354:	4640      	mov	r0, r8
 8022356:	f7fc fe1b 	bl	801ef90 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_DISABLED, LV_COLOR_GRAY);
 802235a:	4b32      	ldr	r3, [pc, #200]	; (8022424 <calendar_init+0x660>)
 802235c:	681b      	ldr	r3, [r3, #0]
 802235e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8022362:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8022366:	f363 0407 	bfi	r4, r3, #0, #8
 802236a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 802236e:	f363 240f 	bfi	r4, r3, #8, #8
 8022372:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8022376:	f363 4417 	bfi	r4, r3, #16, #8
 802237a:	4623      	mov	r3, r4
 802237c:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 8022380:	4622      	mov	r2, r4
 8022382:	2120      	movs	r1, #32
 8022384:	f7fc fe04 	bl	801ef90 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
 8022388:	4b26      	ldr	r3, [pc, #152]	; (8022424 <calendar_init+0x660>)
 802238a:	681b      	ldr	r3, [r3, #0]
 802238c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8022390:	4b26      	ldr	r3, [pc, #152]	; (802242c <calendar_init+0x668>)
 8022392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022394:	f003 0302 	and.w	r3, r3, #2
 8022398:	2b00      	cmp	r3, #0
 802239a:	d001      	beq.n	80223a0 <calendar_init+0x5dc>
 802239c:	2333      	movs	r3, #51	; 0x33
 802239e:	e000      	b.n	80223a2 <calendar_init+0x5de>
 80223a0:	2366      	movs	r3, #102	; 0x66
 80223a2:	461a      	mov	r2, r3
 80223a4:	2101      	movs	r1, #1
 80223a6:	f7fc fc27 	bl	801ebf8 <lv_style_set_bg_opa>
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_PRESSED, LV_OPA_20);
 80223aa:	4b1e      	ldr	r3, [pc, #120]	; (8022424 <calendar_init+0x660>)
 80223ac:	681b      	ldr	r3, [r3, #0]
 80223ae:	3330      	adds	r3, #48	; 0x30
 80223b0:	2233      	movs	r2, #51	; 0x33
 80223b2:	2110      	movs	r1, #16
 80223b4:	4618      	mov	r0, r3
 80223b6:	f7fc fc1f 	bl	801ebf8 <lv_style_set_bg_opa>
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_OPA_COVER);
 80223ba:	4b1a      	ldr	r3, [pc, #104]	; (8022424 <calendar_init+0x660>)
 80223bc:	681b      	ldr	r3, [r3, #0]
 80223be:	3330      	adds	r3, #48	; 0x30
 80223c0:	22ff      	movs	r2, #255	; 0xff
 80223c2:	2102      	movs	r1, #2
 80223c4:	4618      	mov	r0, r3
 80223c6:	f7fc fc17 	bl	801ebf8 <lv_style_set_bg_opa>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_COLOR_WHITE);
 80223ca:	4b16      	ldr	r3, [pc, #88]	; (8022424 <calendar_init+0x660>)
 80223cc:	681b      	ldr	r3, [r3, #0]
 80223ce:	3330      	adds	r3, #48	; 0x30
 80223d0:	464a      	mov	r2, r9
 80223d2:	f042 09ff 	orr.w	r9, r2, #255	; 0xff
 80223d6:	464a      	mov	r2, r9
 80223d8:	f442 497f 	orr.w	r9, r2, #65280	; 0xff00
 80223dc:	464a      	mov	r2, r9
 80223de:	f442 097f 	orr.w	r9, r2, #16711680	; 0xff0000
 80223e2:	464a      	mov	r2, r9
 80223e4:	f042 497f 	orr.w	r9, r2, #4278190080	; 0xff000000
 80223e8:	464a      	mov	r2, r9
 80223ea:	2102      	movs	r1, #2
 80223ec:	4618      	mov	r0, r3
 80223ee:	f7fc fdcf 	bl	801ef90 <lv_style_set_text_color>
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, theme.color_primary);
 80223f2:	4b0c      	ldr	r3, [pc, #48]	; (8022424 <calendar_init+0x660>)
 80223f4:	681b      	ldr	r3, [r3, #0]
 80223f6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80223fa:	4b0c      	ldr	r3, [pc, #48]	; (802242c <calendar_init+0x668>)
 80223fc:	68da      	ldr	r2, [r3, #12]
 80223fe:	2102      	movs	r1, #2
 8022400:	f7fc fbe3 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
 8022404:	4b07      	ldr	r3, [pc, #28]	; (8022424 <calendar_init+0x660>)
 8022406:	681b      	ldr	r3, [r3, #0]
 8022408:	f103 0430 	add.w	r4, r3, #48	; 0x30
                          IS_LIGHT ? lv_color_hex(0x666666) : LV_COLOR_WHITE);
 802240c:	4b07      	ldr	r3, [pc, #28]	; (802242c <calendar_init+0x668>)
 802240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022410:	f003 0302 	and.w	r3, r3, #2
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
 8022414:	2b00      	cmp	r3, #0
 8022416:	d00f      	beq.n	8022438 <calendar_init+0x674>
 8022418:	4806      	ldr	r0, [pc, #24]	; (8022434 <calendar_init+0x670>)
 802241a:	f7fc fa4b 	bl	801e8b4 <lv_color_hex>
 802241e:	4605      	mov	r5, r0
 8022420:	e016      	b.n	8022450 <calendar_init+0x68c>
 8022422:	bf00      	nop
 8022424:	20021498 	.word	0x20021498
 8022428:	66666667 	.word	0x66666667
 802242c:	2002146c 	.word	0x2002146c
 8022430:	0031404f 	.word	0x0031404f
 8022434:	00666666 	.word	0x00666666
 8022438:	462b      	mov	r3, r5
 802243a:	f043 05ff 	orr.w	r5, r3, #255	; 0xff
 802243e:	462b      	mov	r3, r5
 8022440:	f443 457f 	orr.w	r5, r3, #65280	; 0xff00
 8022444:	462b      	mov	r3, r5
 8022446:	f443 057f 	orr.w	r5, r3, #16711680	; 0xff0000
 802244a:	462b      	mov	r3, r5
 802244c:	f043 457f 	orr.w	r5, r3, #4278190080	; 0xff000000
 8022450:	462a      	mov	r2, r5
 8022452:	2100      	movs	r1, #0
 8022454:	4620      	mov	r0, r4
 8022456:	f7fc fbb8 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
 802245a:	4b9b      	ldr	r3, [pc, #620]	; (80226c8 <calendar_init+0x904>)
 802245c:	681b      	ldr	r3, [r3, #0]
 802245e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8022462:	4b9a      	ldr	r3, [pc, #616]	; (80226cc <calendar_init+0x908>)
 8022464:	68da      	ldr	r2, [r3, #12]
 8022466:	2101      	movs	r1, #1
 8022468:	f7fc fbaf 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_border_width(&styles->calendar_date_nums, LV_STATE_CHECKED, 2);
 802246c:	4b96      	ldr	r3, [pc, #600]	; (80226c8 <calendar_init+0x904>)
 802246e:	681b      	ldr	r3, [r3, #0]
 8022470:	3330      	adds	r3, #48	; 0x30
 8022472:	2202      	movs	r2, #2
 8022474:	2101      	movs	r1, #1
 8022476:	4618      	mov	r0, r3
 8022478:	f7fc fbd6 	bl	801ec28 <lv_style_set_border_width>
    lv_style_set_border_side(&styles->calendar_date_nums, LV_STATE_CHECKED, LV_BORDER_SIDE_LEFT);
 802247c:	4b92      	ldr	r3, [pc, #584]	; (80226c8 <calendar_init+0x904>)
 802247e:	681b      	ldr	r3, [r3, #0]
 8022480:	3330      	adds	r3, #48	; 0x30
 8022482:	2204      	movs	r2, #4
 8022484:	2101      	movs	r1, #1
 8022486:	4618      	mov	r0, r3
 8022488:	f7fc fbe7 	bl	801ec5a <lv_style_set_border_side>
    lv_style_set_border_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
 802248c:	4b8e      	ldr	r3, [pc, #568]	; (80226c8 <calendar_init+0x904>)
 802248e:	681b      	ldr	r3, [r3, #0]
 8022490:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8022494:	4b8d      	ldr	r3, [pc, #564]	; (80226cc <calendar_init+0x908>)
 8022496:	68da      	ldr	r2, [r3, #12]
 8022498:	2101      	movs	r1, #1
 802249a:	f7fc fc10 	bl	801ecbe <lv_style_set_border_color>
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
 802249e:	4b8a      	ldr	r3, [pc, #552]	; (80226c8 <calendar_init+0x904>)
 80224a0:	681b      	ldr	r3, [r3, #0]
 80224a2:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80224a6:	2000      	movs	r0, #0
 80224a8:	f7f7 ffb2 	bl	801a410 <lv_disp_get_dpi>
 80224ac:	4603      	mov	r3, r0
 80224ae:	461a      	mov	r2, r3
 80224b0:	4613      	mov	r3, r2
 80224b2:	005b      	lsls	r3, r3, #1
 80224b4:	4413      	add	r3, r2
 80224b6:	3350      	adds	r3, #80	; 0x50
 80224b8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80224bc:	db10      	blt.n	80224e0 <calendar_init+0x71c>
 80224be:	2000      	movs	r0, #0
 80224c0:	f7f7 ffa6 	bl	801a410 <lv_disp_get_dpi>
 80224c4:	4603      	mov	r3, r0
 80224c6:	461a      	mov	r2, r3
 80224c8:	4613      	mov	r3, r2
 80224ca:	005b      	lsls	r3, r3, #1
 80224cc:	4413      	add	r3, r2
 80224ce:	3350      	adds	r3, #80	; 0x50
 80224d0:	4a7f      	ldr	r2, [pc, #508]	; (80226d0 <calendar_init+0x90c>)
 80224d2:	fb82 1203 	smull	r1, r2, r2, r3
 80224d6:	1192      	asrs	r2, r2, #6
 80224d8:	17db      	asrs	r3, r3, #31
 80224da:	1ad3      	subs	r3, r2, r3
 80224dc:	b21b      	sxth	r3, r3
 80224de:	e000      	b.n	80224e2 <calendar_init+0x71e>
 80224e0:	2301      	movs	r3, #1
 80224e2:	461a      	mov	r2, r3
 80224e4:	2100      	movs	r1, #0
 80224e6:	4620      	mov	r0, r4
 80224e8:	f7fc faf2 	bl	801ead0 <lv_style_set_pad_inner>
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 80224ec:	4b76      	ldr	r3, [pc, #472]	; (80226c8 <calendar_init+0x904>)
 80224ee:	681b      	ldr	r3, [r3, #0]
 80224f0:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80224f4:	2000      	movs	r0, #0
 80224f6:	f7f7 ffa4 	bl	801a442 <lv_disp_get_size_category>
 80224fa:	4603      	mov	r3, r0
 80224fc:	2b01      	cmp	r3, #1
 80224fe:	d81e      	bhi.n	802253e <calendar_init+0x77a>
 8022500:	2000      	movs	r0, #0
 8022502:	f7f7 ff85 	bl	801a410 <lv_disp_get_dpi>
 8022506:	4603      	mov	r3, r0
 8022508:	461a      	mov	r2, r3
 802250a:	4613      	mov	r3, r2
 802250c:	011b      	lsls	r3, r3, #4
 802250e:	1a9b      	subs	r3, r3, r2
 8022510:	3350      	adds	r3, #80	; 0x50
 8022512:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022516:	db10      	blt.n	802253a <calendar_init+0x776>
 8022518:	2000      	movs	r0, #0
 802251a:	f7f7 ff79 	bl	801a410 <lv_disp_get_dpi>
 802251e:	4603      	mov	r3, r0
 8022520:	461a      	mov	r2, r3
 8022522:	4613      	mov	r3, r2
 8022524:	011b      	lsls	r3, r3, #4
 8022526:	1a9b      	subs	r3, r3, r2
 8022528:	3350      	adds	r3, #80	; 0x50
 802252a:	4a69      	ldr	r2, [pc, #420]	; (80226d0 <calendar_init+0x90c>)
 802252c:	fb82 1203 	smull	r1, r2, r2, r3
 8022530:	1192      	asrs	r2, r2, #6
 8022532:	17db      	asrs	r3, r3, #31
 8022534:	1ad3      	subs	r3, r2, r3
 8022536:	b21b      	sxth	r3, r3
 8022538:	e021      	b.n	802257e <calendar_init+0x7ba>
 802253a:	2301      	movs	r3, #1
 802253c:	e01f      	b.n	802257e <calendar_init+0x7ba>
 802253e:	2000      	movs	r0, #0
 8022540:	f7f7 ff66 	bl	801a410 <lv_disp_get_dpi>
 8022544:	4603      	mov	r3, r0
 8022546:	461a      	mov	r2, r3
 8022548:	4613      	mov	r3, r2
 802254a:	011b      	lsls	r3, r3, #4
 802254c:	1a9b      	subs	r3, r3, r2
 802254e:	005b      	lsls	r3, r3, #1
 8022550:	3350      	adds	r3, #80	; 0x50
 8022552:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022556:	db11      	blt.n	802257c <calendar_init+0x7b8>
 8022558:	2000      	movs	r0, #0
 802255a:	f7f7 ff59 	bl	801a410 <lv_disp_get_dpi>
 802255e:	4603      	mov	r3, r0
 8022560:	461a      	mov	r2, r3
 8022562:	4613      	mov	r3, r2
 8022564:	011b      	lsls	r3, r3, #4
 8022566:	1a9b      	subs	r3, r3, r2
 8022568:	005b      	lsls	r3, r3, #1
 802256a:	3350      	adds	r3, #80	; 0x50
 802256c:	4a58      	ldr	r2, [pc, #352]	; (80226d0 <calendar_init+0x90c>)
 802256e:	fb82 1203 	smull	r1, r2, r2, r3
 8022572:	1192      	asrs	r2, r2, #6
 8022574:	17db      	asrs	r3, r3, #31
 8022576:	1ad3      	subs	r3, r2, r3
 8022578:	b21b      	sxth	r3, r3
 802257a:	e000      	b.n	802257e <calendar_init+0x7ba>
 802257c:	2301      	movs	r3, #1
 802257e:	461a      	mov	r2, r3
 8022580:	2100      	movs	r1, #0
 8022582:	4620      	mov	r0, r4
 8022584:	f7fc fa72 	bl	801ea6c <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 8022588:	4b4f      	ldr	r3, [pc, #316]	; (80226c8 <calendar_init+0x904>)
 802258a:	681b      	ldr	r3, [r3, #0]
 802258c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8022590:	2000      	movs	r0, #0
 8022592:	f7f7 ff56 	bl	801a442 <lv_disp_get_size_category>
 8022596:	4603      	mov	r3, r0
 8022598:	2b01      	cmp	r3, #1
 802259a:	d81e      	bhi.n	80225da <calendar_init+0x816>
 802259c:	2000      	movs	r0, #0
 802259e:	f7f7 ff37 	bl	801a410 <lv_disp_get_dpi>
 80225a2:	4603      	mov	r3, r0
 80225a4:	461a      	mov	r2, r3
 80225a6:	4613      	mov	r3, r2
 80225a8:	011b      	lsls	r3, r3, #4
 80225aa:	1a9b      	subs	r3, r3, r2
 80225ac:	3350      	adds	r3, #80	; 0x50
 80225ae:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80225b2:	db10      	blt.n	80225d6 <calendar_init+0x812>
 80225b4:	2000      	movs	r0, #0
 80225b6:	f7f7 ff2b 	bl	801a410 <lv_disp_get_dpi>
 80225ba:	4603      	mov	r3, r0
 80225bc:	461a      	mov	r2, r3
 80225be:	4613      	mov	r3, r2
 80225c0:	011b      	lsls	r3, r3, #4
 80225c2:	1a9b      	subs	r3, r3, r2
 80225c4:	3350      	adds	r3, #80	; 0x50
 80225c6:	4a42      	ldr	r2, [pc, #264]	; (80226d0 <calendar_init+0x90c>)
 80225c8:	fb82 1203 	smull	r1, r2, r2, r3
 80225cc:	1192      	asrs	r2, r2, #6
 80225ce:	17db      	asrs	r3, r3, #31
 80225d0:	1ad3      	subs	r3, r2, r3
 80225d2:	b21b      	sxth	r3, r3
 80225d4:	e021      	b.n	802261a <calendar_init+0x856>
 80225d6:	2301      	movs	r3, #1
 80225d8:	e01f      	b.n	802261a <calendar_init+0x856>
 80225da:	2000      	movs	r0, #0
 80225dc:	f7f7 ff18 	bl	801a410 <lv_disp_get_dpi>
 80225e0:	4603      	mov	r3, r0
 80225e2:	461a      	mov	r2, r3
 80225e4:	4613      	mov	r3, r2
 80225e6:	011b      	lsls	r3, r3, #4
 80225e8:	1a9b      	subs	r3, r3, r2
 80225ea:	005b      	lsls	r3, r3, #1
 80225ec:	3350      	adds	r3, #80	; 0x50
 80225ee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80225f2:	db11      	blt.n	8022618 <calendar_init+0x854>
 80225f4:	2000      	movs	r0, #0
 80225f6:	f7f7 ff0b 	bl	801a410 <lv_disp_get_dpi>
 80225fa:	4603      	mov	r3, r0
 80225fc:	461a      	mov	r2, r3
 80225fe:	4613      	mov	r3, r2
 8022600:	011b      	lsls	r3, r3, #4
 8022602:	1a9b      	subs	r3, r3, r2
 8022604:	005b      	lsls	r3, r3, #1
 8022606:	3350      	adds	r3, #80	; 0x50
 8022608:	4a31      	ldr	r2, [pc, #196]	; (80226d0 <calendar_init+0x90c>)
 802260a:	fb82 1203 	smull	r1, r2, r2, r3
 802260e:	1192      	asrs	r2, r2, #6
 8022610:	17db      	asrs	r3, r3, #31
 8022612:	1ad3      	subs	r3, r2, r3
 8022614:	b21b      	sxth	r3, r3
 8022616:	e000      	b.n	802261a <calendar_init+0x856>
 8022618:	2301      	movs	r3, #1
 802261a:	461a      	mov	r2, r3
 802261c:	2100      	movs	r1, #0
 802261e:	4620      	mov	r0, r4
 8022620:	f7fc fa3d 	bl	801ea9e <lv_style_set_pad_right>
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
 8022624:	4b28      	ldr	r3, [pc, #160]	; (80226c8 <calendar_init+0x904>)
 8022626:	681b      	ldr	r3, [r3, #0]
 8022628:	f103 0430 	add.w	r4, r3, #48	; 0x30
 802262c:	2000      	movs	r0, #0
 802262e:	f7f7 ff08 	bl	801a442 <lv_disp_get_size_category>
 8022632:	4603      	mov	r3, r0
 8022634:	2b01      	cmp	r3, #1
 8022636:	d81e      	bhi.n	8022676 <calendar_init+0x8b2>
 8022638:	2000      	movs	r0, #0
 802263a:	f7f7 fee9 	bl	801a410 <lv_disp_get_dpi>
 802263e:	4603      	mov	r3, r0
 8022640:	461a      	mov	r2, r3
 8022642:	4613      	mov	r3, r2
 8022644:	011b      	lsls	r3, r3, #4
 8022646:	1a9b      	subs	r3, r3, r2
 8022648:	3350      	adds	r3, #80	; 0x50
 802264a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802264e:	db10      	blt.n	8022672 <calendar_init+0x8ae>
 8022650:	2000      	movs	r0, #0
 8022652:	f7f7 fedd 	bl	801a410 <lv_disp_get_dpi>
 8022656:	4603      	mov	r3, r0
 8022658:	461a      	mov	r2, r3
 802265a:	4613      	mov	r3, r2
 802265c:	011b      	lsls	r3, r3, #4
 802265e:	1a9b      	subs	r3, r3, r2
 8022660:	3350      	adds	r3, #80	; 0x50
 8022662:	4a1b      	ldr	r2, [pc, #108]	; (80226d0 <calendar_init+0x90c>)
 8022664:	fb82 1203 	smull	r1, r2, r2, r3
 8022668:	1192      	asrs	r2, r2, #6
 802266a:	17db      	asrs	r3, r3, #31
 802266c:	1ad3      	subs	r3, r2, r3
 802266e:	b21b      	sxth	r3, r3
 8022670:	e021      	b.n	80226b6 <calendar_init+0x8f2>
 8022672:	2301      	movs	r3, #1
 8022674:	e01f      	b.n	80226b6 <calendar_init+0x8f2>
 8022676:	2000      	movs	r0, #0
 8022678:	f7f7 feca 	bl	801a410 <lv_disp_get_dpi>
 802267c:	4603      	mov	r3, r0
 802267e:	461a      	mov	r2, r3
 8022680:	4613      	mov	r3, r2
 8022682:	011b      	lsls	r3, r3, #4
 8022684:	1a9b      	subs	r3, r3, r2
 8022686:	005b      	lsls	r3, r3, #1
 8022688:	3350      	adds	r3, #80	; 0x50
 802268a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802268e:	db11      	blt.n	80226b4 <calendar_init+0x8f0>
 8022690:	2000      	movs	r0, #0
 8022692:	f7f7 febd 	bl	801a410 <lv_disp_get_dpi>
 8022696:	4603      	mov	r3, r0
 8022698:	461a      	mov	r2, r3
 802269a:	4613      	mov	r3, r2
 802269c:	011b      	lsls	r3, r3, #4
 802269e:	1a9b      	subs	r3, r3, r2
 80226a0:	005b      	lsls	r3, r3, #1
 80226a2:	3350      	adds	r3, #80	; 0x50
 80226a4:	4a0a      	ldr	r2, [pc, #40]	; (80226d0 <calendar_init+0x90c>)
 80226a6:	fb82 1203 	smull	r1, r2, r2, r3
 80226aa:	1192      	asrs	r2, r2, #6
 80226ac:	17db      	asrs	r3, r3, #31
 80226ae:	1ad3      	subs	r3, r2, r3
 80226b0:	b21b      	sxth	r3, r3
 80226b2:	e000      	b.n	80226b6 <calendar_init+0x8f2>
 80226b4:	2301      	movs	r3, #1
 80226b6:	461a      	mov	r2, r3
 80226b8:	2100      	movs	r1, #0
 80226ba:	4620      	mov	r0, r4
 80226bc:	f7fc f9bd 	bl	801ea3a <lv_style_set_pad_bottom>
#endif
}
 80226c0:	bf00      	nop
 80226c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80226c6:	bf00      	nop
 80226c8:	20021498 	.word	0x20021498
 80226cc:	2002146c 	.word	0x2002146c
 80226d0:	66666667 	.word	0x66666667

080226d4 <cpicker_init>:

static void cpicker_init(void)
{
 80226d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80226d6:	af00      	add	r7, sp, #0
#if LV_USE_CPICKER
    style_init_reset(&styles->cpicker_bg);
 80226d8:	4bc5      	ldr	r3, [pc, #788]	; (80229f0 <cpicker_init+0x31c>)
 80226da:	681b      	ldr	r3, [r3, #0]
 80226dc:	333c      	adds	r3, #60	; 0x3c
 80226de:	4618      	mov	r0, r3
 80226e0:	f002 fea6 	bl	8025430 <style_init_reset>
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
 80226e4:	4bc2      	ldr	r3, [pc, #776]	; (80229f0 <cpicker_init+0x31c>)
 80226e6:	681b      	ldr	r3, [r3, #0]
 80226e8:	f103 063c 	add.w	r6, r3, #60	; 0x3c
 80226ec:	2000      	movs	r0, #0
 80226ee:	f7f7 fe8f 	bl	801a410 <lv_disp_get_dpi>
 80226f2:	4603      	mov	r3, r0
 80226f4:	461a      	mov	r2, r3
 80226f6:	4613      	mov	r3, r2
 80226f8:	011b      	lsls	r3, r3, #4
 80226fa:	1a9b      	subs	r3, r3, r2
 80226fc:	005b      	lsls	r3, r3, #1
 80226fe:	3350      	adds	r3, #80	; 0x50
 8022700:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022704:	db11      	blt.n	802272a <cpicker_init+0x56>
 8022706:	2000      	movs	r0, #0
 8022708:	f7f7 fe82 	bl	801a410 <lv_disp_get_dpi>
 802270c:	4603      	mov	r3, r0
 802270e:	461a      	mov	r2, r3
 8022710:	4613      	mov	r3, r2
 8022712:	011b      	lsls	r3, r3, #4
 8022714:	1a9b      	subs	r3, r3, r2
 8022716:	005b      	lsls	r3, r3, #1
 8022718:	3350      	adds	r3, #80	; 0x50
 802271a:	4ab6      	ldr	r2, [pc, #728]	; (80229f4 <cpicker_init+0x320>)
 802271c:	fb82 1203 	smull	r1, r2, r2, r3
 8022720:	1192      	asrs	r2, r2, #6
 8022722:	17db      	asrs	r3, r3, #31
 8022724:	1ad3      	subs	r3, r2, r3
 8022726:	b21b      	sxth	r3, r3
 8022728:	e000      	b.n	802272c <cpicker_init+0x58>
 802272a:	2301      	movs	r3, #1
 802272c:	461a      	mov	r2, r3
 802272e:	2100      	movs	r1, #0
 8022730:	4630      	mov	r0, r6
 8022732:	f7fc fdc1 	bl	801f2b8 <lv_style_set_scale_width>
    lv_style_set_bg_opa(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 8022736:	4bae      	ldr	r3, [pc, #696]	; (80229f0 <cpicker_init+0x31c>)
 8022738:	681b      	ldr	r3, [r3, #0]
 802273a:	333c      	adds	r3, #60	; 0x3c
 802273c:	22ff      	movs	r2, #255	; 0xff
 802273e:	2100      	movs	r1, #0
 8022740:	4618      	mov	r0, r3
 8022742:	f7fc fa59 	bl	801ebf8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->cpicker_bg, LV_STATE_DEFAULT, COLOR_SCR);
 8022746:	4baa      	ldr	r3, [pc, #680]	; (80229f0 <cpicker_init+0x31c>)
 8022748:	681b      	ldr	r3, [r3, #0]
 802274a:	f103 063c 	add.w	r6, r3, #60	; 0x3c
 802274e:	4baa      	ldr	r3, [pc, #680]	; (80229f8 <cpicker_init+0x324>)
 8022750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022752:	f003 0302 	and.w	r3, r3, #2
 8022756:	2b00      	cmp	r3, #0
 8022758:	d004      	beq.n	8022764 <cpicker_init+0x90>
 802275a:	48a8      	ldr	r0, [pc, #672]	; (80229fc <cpicker_init+0x328>)
 802275c:	f7fc f8aa 	bl	801e8b4 <lv_color_hex>
 8022760:	4603      	mov	r3, r0
 8022762:	e003      	b.n	802276c <cpicker_init+0x98>
 8022764:	48a6      	ldr	r0, [pc, #664]	; (8022a00 <cpicker_init+0x32c>)
 8022766:	f7fc f8a5 	bl	801e8b4 <lv_color_hex>
 802276a:	4603      	mov	r3, r0
 802276c:	461a      	mov	r2, r3
 802276e:	2100      	movs	r1, #0
 8022770:	4630      	mov	r0, r6
 8022772:	f7fc fa2a 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
 8022776:	4b9e      	ldr	r3, [pc, #632]	; (80229f0 <cpicker_init+0x31c>)
 8022778:	681b      	ldr	r3, [r3, #0]
 802277a:	f103 063c 	add.w	r6, r3, #60	; 0x3c
 802277e:	2000      	movs	r0, #0
 8022780:	f7f7 fe46 	bl	801a410 <lv_disp_get_dpi>
 8022784:	4603      	mov	r3, r0
 8022786:	461a      	mov	r2, r3
 8022788:	4613      	mov	r3, r2
 802278a:	009b      	lsls	r3, r3, #2
 802278c:	4413      	add	r3, r2
 802278e:	009b      	lsls	r3, r3, #2
 8022790:	3350      	adds	r3, #80	; 0x50
 8022792:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022796:	db11      	blt.n	80227bc <cpicker_init+0xe8>
 8022798:	2000      	movs	r0, #0
 802279a:	f7f7 fe39 	bl	801a410 <lv_disp_get_dpi>
 802279e:	4603      	mov	r3, r0
 80227a0:	461a      	mov	r2, r3
 80227a2:	4613      	mov	r3, r2
 80227a4:	009b      	lsls	r3, r3, #2
 80227a6:	4413      	add	r3, r2
 80227a8:	009b      	lsls	r3, r3, #2
 80227aa:	3350      	adds	r3, #80	; 0x50
 80227ac:	4a91      	ldr	r2, [pc, #580]	; (80229f4 <cpicker_init+0x320>)
 80227ae:	fb82 1203 	smull	r1, r2, r2, r3
 80227b2:	1192      	asrs	r2, r2, #6
 80227b4:	17db      	asrs	r3, r3, #31
 80227b6:	1ad3      	subs	r3, r2, r3
 80227b8:	b21b      	sxth	r3, r3
 80227ba:	e000      	b.n	80227be <cpicker_init+0xea>
 80227bc:	2301      	movs	r3, #1
 80227be:	461a      	mov	r2, r3
 80227c0:	2100      	movs	r1, #0
 80227c2:	4630      	mov	r0, r6
 80227c4:	f7fc f984 	bl	801ead0 <lv_style_set_pad_inner>
    lv_style_set_radius(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 80227c8:	4b89      	ldr	r3, [pc, #548]	; (80229f0 <cpicker_init+0x31c>)
 80227ca:	681b      	ldr	r3, [r3, #0]
 80227cc:	333c      	adds	r3, #60	; 0x3c
 80227ce:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80227d2:	2100      	movs	r1, #0
 80227d4:	4618      	mov	r0, r3
 80227d6:	f7fc f8b3 	bl	801e940 <lv_style_set_radius>

    style_init_reset(&styles->cpicker_indic);
 80227da:	4b85      	ldr	r3, [pc, #532]	; (80229f0 <cpicker_init+0x31c>)
 80227dc:	681b      	ldr	r3, [r3, #0]
 80227de:	3340      	adds	r3, #64	; 0x40
 80227e0:	4618      	mov	r0, r3
 80227e2:	f002 fe25 	bl	8025430 <style_init_reset>
    lv_style_set_radius(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 80227e6:	4b82      	ldr	r3, [pc, #520]	; (80229f0 <cpicker_init+0x31c>)
 80227e8:	681b      	ldr	r3, [r3, #0]
 80227ea:	3340      	adds	r3, #64	; 0x40
 80227ec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80227f0:	2100      	movs	r1, #0
 80227f2:	4618      	mov	r0, r3
 80227f4:	f7fc f8a4 	bl	801e940 <lv_style_set_radius>
    lv_style_set_bg_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_WHITE);
 80227f8:	4b7d      	ldr	r3, [pc, #500]	; (80229f0 <cpicker_init+0x31c>)
 80227fa:	681b      	ldr	r3, [r3, #0]
 80227fc:	3340      	adds	r3, #64	; 0x40
 80227fe:	462a      	mov	r2, r5
 8022800:	f042 05ff 	orr.w	r5, r2, #255	; 0xff
 8022804:	462a      	mov	r2, r5
 8022806:	f442 457f 	orr.w	r5, r2, #65280	; 0xff00
 802280a:	462a      	mov	r2, r5
 802280c:	f442 057f 	orr.w	r5, r2, #16711680	; 0xff0000
 8022810:	462a      	mov	r2, r5
 8022812:	f042 457f 	orr.w	r5, r2, #4278190080	; 0xff000000
 8022816:	462a      	mov	r2, r5
 8022818:	2100      	movs	r1, #0
 802281a:	4618      	mov	r0, r3
 802281c:	f7fc f9d5 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
 8022820:	4b73      	ldr	r3, [pc, #460]	; (80229f0 <cpicker_init+0x31c>)
 8022822:	681b      	ldr	r3, [r3, #0]
 8022824:	3340      	adds	r3, #64	; 0x40
 8022826:	22ff      	movs	r2, #255	; 0xff
 8022828:	2100      	movs	r1, #0
 802282a:	4618      	mov	r0, r3
 802282c:	f7fc f9e4 	bl	801ebf8 <lv_style_set_bg_opa>
    lv_style_set_border_width(&styles->cpicker_indic, LV_STATE_DEFAULT, 2);
 8022830:	4b6f      	ldr	r3, [pc, #444]	; (80229f0 <cpicker_init+0x31c>)
 8022832:	681b      	ldr	r3, [r3, #0]
 8022834:	3340      	adds	r3, #64	; 0x40
 8022836:	2202      	movs	r2, #2
 8022838:	2100      	movs	r1, #0
 802283a:	4618      	mov	r0, r3
 802283c:	f7fc f9f4 	bl	801ec28 <lv_style_set_border_width>
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_GRAY);
 8022840:	4b6b      	ldr	r3, [pc, #428]	; (80229f0 <cpicker_init+0x31c>)
 8022842:	681b      	ldr	r3, [r3, #0]
 8022844:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8022848:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 802284c:	f363 0407 	bfi	r4, r3, #0, #8
 8022850:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8022854:	f363 240f 	bfi	r4, r3, #8, #8
 8022858:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 802285c:	f363 4417 	bfi	r4, r3, #16, #8
 8022860:	4623      	mov	r3, r4
 8022862:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 8022866:	4622      	mov	r2, r4
 8022868:	2100      	movs	r1, #0
 802286a:	f7fc fa28 	bl	801ecbe <lv_style_set_border_color>
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_FOCUSED, theme.color_primary);
 802286e:	4b60      	ldr	r3, [pc, #384]	; (80229f0 <cpicker_init+0x31c>)
 8022870:	681b      	ldr	r3, [r3, #0]
 8022872:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8022876:	4b60      	ldr	r3, [pc, #384]	; (80229f8 <cpicker_init+0x324>)
 8022878:	68da      	ldr	r2, [r3, #12]
 802287a:	2102      	movs	r1, #2
 802287c:	f7fc fa1f 	bl	801ecbe <lv_style_set_border_color>
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_EDITED, theme.color_secondary);
 8022880:	4b5b      	ldr	r3, [pc, #364]	; (80229f0 <cpicker_init+0x31c>)
 8022882:	681b      	ldr	r3, [r3, #0]
 8022884:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8022888:	4b5b      	ldr	r3, [pc, #364]	; (80229f8 <cpicker_init+0x324>)
 802288a:	691a      	ldr	r2, [r3, #16]
 802288c:	2104      	movs	r1, #4
 802288e:	f7fc fa16 	bl	801ecbe <lv_style_set_border_color>
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 8022892:	4b57      	ldr	r3, [pc, #348]	; (80229f0 <cpicker_init+0x31c>)
 8022894:	681b      	ldr	r3, [r3, #0]
 8022896:	f103 0440 	add.w	r4, r3, #64	; 0x40
 802289a:	2000      	movs	r0, #0
 802289c:	f7f7 fdb8 	bl	801a410 <lv_disp_get_dpi>
 80228a0:	4603      	mov	r3, r0
 80228a2:	461a      	mov	r2, r3
 80228a4:	4613      	mov	r3, r2
 80228a6:	005b      	lsls	r3, r3, #1
 80228a8:	4413      	add	r3, r2
 80228aa:	009b      	lsls	r3, r3, #2
 80228ac:	4413      	add	r3, r2
 80228ae:	3350      	adds	r3, #80	; 0x50
 80228b0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80228b4:	db12      	blt.n	80228dc <cpicker_init+0x208>
 80228b6:	2000      	movs	r0, #0
 80228b8:	f7f7 fdaa 	bl	801a410 <lv_disp_get_dpi>
 80228bc:	4603      	mov	r3, r0
 80228be:	461a      	mov	r2, r3
 80228c0:	4613      	mov	r3, r2
 80228c2:	005b      	lsls	r3, r3, #1
 80228c4:	4413      	add	r3, r2
 80228c6:	009b      	lsls	r3, r3, #2
 80228c8:	4413      	add	r3, r2
 80228ca:	3350      	adds	r3, #80	; 0x50
 80228cc:	4a49      	ldr	r2, [pc, #292]	; (80229f4 <cpicker_init+0x320>)
 80228ce:	fb82 1203 	smull	r1, r2, r2, r3
 80228d2:	1192      	asrs	r2, r2, #6
 80228d4:	17db      	asrs	r3, r3, #31
 80228d6:	1ad3      	subs	r3, r2, r3
 80228d8:	b21b      	sxth	r3, r3
 80228da:	e000      	b.n	80228de <cpicker_init+0x20a>
 80228dc:	2301      	movs	r3, #1
 80228de:	461a      	mov	r2, r3
 80228e0:	2100      	movs	r1, #0
 80228e2:	4620      	mov	r0, r4
 80228e4:	f7fc f8c2 	bl	801ea6c <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 80228e8:	4b41      	ldr	r3, [pc, #260]	; (80229f0 <cpicker_init+0x31c>)
 80228ea:	681b      	ldr	r3, [r3, #0]
 80228ec:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80228f0:	2000      	movs	r0, #0
 80228f2:	f7f7 fd8d 	bl	801a410 <lv_disp_get_dpi>
 80228f6:	4603      	mov	r3, r0
 80228f8:	461a      	mov	r2, r3
 80228fa:	4613      	mov	r3, r2
 80228fc:	005b      	lsls	r3, r3, #1
 80228fe:	4413      	add	r3, r2
 8022900:	009b      	lsls	r3, r3, #2
 8022902:	4413      	add	r3, r2
 8022904:	3350      	adds	r3, #80	; 0x50
 8022906:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802290a:	db12      	blt.n	8022932 <cpicker_init+0x25e>
 802290c:	2000      	movs	r0, #0
 802290e:	f7f7 fd7f 	bl	801a410 <lv_disp_get_dpi>
 8022912:	4603      	mov	r3, r0
 8022914:	461a      	mov	r2, r3
 8022916:	4613      	mov	r3, r2
 8022918:	005b      	lsls	r3, r3, #1
 802291a:	4413      	add	r3, r2
 802291c:	009b      	lsls	r3, r3, #2
 802291e:	4413      	add	r3, r2
 8022920:	3350      	adds	r3, #80	; 0x50
 8022922:	4a34      	ldr	r2, [pc, #208]	; (80229f4 <cpicker_init+0x320>)
 8022924:	fb82 1203 	smull	r1, r2, r2, r3
 8022928:	1192      	asrs	r2, r2, #6
 802292a:	17db      	asrs	r3, r3, #31
 802292c:	1ad3      	subs	r3, r2, r3
 802292e:	b21b      	sxth	r3, r3
 8022930:	e000      	b.n	8022934 <cpicker_init+0x260>
 8022932:	2301      	movs	r3, #1
 8022934:	461a      	mov	r2, r3
 8022936:	2100      	movs	r1, #0
 8022938:	4620      	mov	r0, r4
 802293a:	f7fc f8b0 	bl	801ea9e <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 802293e:	4b2c      	ldr	r3, [pc, #176]	; (80229f0 <cpicker_init+0x31c>)
 8022940:	681b      	ldr	r3, [r3, #0]
 8022942:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8022946:	2000      	movs	r0, #0
 8022948:	f7f7 fd62 	bl	801a410 <lv_disp_get_dpi>
 802294c:	4603      	mov	r3, r0
 802294e:	461a      	mov	r2, r3
 8022950:	4613      	mov	r3, r2
 8022952:	005b      	lsls	r3, r3, #1
 8022954:	4413      	add	r3, r2
 8022956:	009b      	lsls	r3, r3, #2
 8022958:	4413      	add	r3, r2
 802295a:	3350      	adds	r3, #80	; 0x50
 802295c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022960:	db12      	blt.n	8022988 <cpicker_init+0x2b4>
 8022962:	2000      	movs	r0, #0
 8022964:	f7f7 fd54 	bl	801a410 <lv_disp_get_dpi>
 8022968:	4603      	mov	r3, r0
 802296a:	461a      	mov	r2, r3
 802296c:	4613      	mov	r3, r2
 802296e:	005b      	lsls	r3, r3, #1
 8022970:	4413      	add	r3, r2
 8022972:	009b      	lsls	r3, r3, #2
 8022974:	4413      	add	r3, r2
 8022976:	3350      	adds	r3, #80	; 0x50
 8022978:	4a1e      	ldr	r2, [pc, #120]	; (80229f4 <cpicker_init+0x320>)
 802297a:	fb82 1203 	smull	r1, r2, r2, r3
 802297e:	1192      	asrs	r2, r2, #6
 8022980:	17db      	asrs	r3, r3, #31
 8022982:	1ad3      	subs	r3, r2, r3
 8022984:	b21b      	sxth	r3, r3
 8022986:	e000      	b.n	802298a <cpicker_init+0x2b6>
 8022988:	2301      	movs	r3, #1
 802298a:	461a      	mov	r2, r3
 802298c:	2100      	movs	r1, #0
 802298e:	4620      	mov	r0, r4
 8022990:	f7fc f83a 	bl	801ea08 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
 8022994:	4b16      	ldr	r3, [pc, #88]	; (80229f0 <cpicker_init+0x31c>)
 8022996:	681b      	ldr	r3, [r3, #0]
 8022998:	f103 0440 	add.w	r4, r3, #64	; 0x40
 802299c:	2000      	movs	r0, #0
 802299e:	f7f7 fd37 	bl	801a410 <lv_disp_get_dpi>
 80229a2:	4603      	mov	r3, r0
 80229a4:	461a      	mov	r2, r3
 80229a6:	4613      	mov	r3, r2
 80229a8:	005b      	lsls	r3, r3, #1
 80229aa:	4413      	add	r3, r2
 80229ac:	009b      	lsls	r3, r3, #2
 80229ae:	4413      	add	r3, r2
 80229b0:	3350      	adds	r3, #80	; 0x50
 80229b2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80229b6:	db12      	blt.n	80229de <cpicker_init+0x30a>
 80229b8:	2000      	movs	r0, #0
 80229ba:	f7f7 fd29 	bl	801a410 <lv_disp_get_dpi>
 80229be:	4603      	mov	r3, r0
 80229c0:	461a      	mov	r2, r3
 80229c2:	4613      	mov	r3, r2
 80229c4:	005b      	lsls	r3, r3, #1
 80229c6:	4413      	add	r3, r2
 80229c8:	009b      	lsls	r3, r3, #2
 80229ca:	4413      	add	r3, r2
 80229cc:	3350      	adds	r3, #80	; 0x50
 80229ce:	4a09      	ldr	r2, [pc, #36]	; (80229f4 <cpicker_init+0x320>)
 80229d0:	fb82 1203 	smull	r1, r2, r2, r3
 80229d4:	1192      	asrs	r2, r2, #6
 80229d6:	17db      	asrs	r3, r3, #31
 80229d8:	1ad3      	subs	r3, r2, r3
 80229da:	b21b      	sxth	r3, r3
 80229dc:	e000      	b.n	80229e0 <cpicker_init+0x30c>
 80229de:	2301      	movs	r3, #1
 80229e0:	461a      	mov	r2, r3
 80229e2:	2100      	movs	r1, #0
 80229e4:	4620      	mov	r0, r4
 80229e6:	f7fc f828 	bl	801ea3a <lv_style_set_pad_bottom>
#endif
}
 80229ea:	bf00      	nop
 80229ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80229ee:	bf00      	nop
 80229f0:	20021498 	.word	0x20021498
 80229f4:	66666667 	.word	0x66666667
 80229f8:	2002146c 	.word	0x2002146c
 80229fc:	00eaeff3 	.word	0x00eaeff3
 8022a00:	00444b5a 	.word	0x00444b5a

08022a04 <checkbox_init>:

static void checkbox_init(void)
{
 8022a04:	b5b0      	push	{r4, r5, r7, lr}
 8022a06:	af00      	add	r7, sp, #0
#if LV_USE_CHECKBOX != 0
    style_init_reset(&styles->cb_bg);
 8022a08:	4bd3      	ldr	r3, [pc, #844]	; (8022d58 <checkbox_init+0x354>)
 8022a0a:	681b      	ldr	r3, [r3, #0]
 8022a0c:	3350      	adds	r3, #80	; 0x50
 8022a0e:	4618      	mov	r0, r3
 8022a10:	f002 fd0e 	bl	8025430 <style_init_reset>
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
 8022a14:	4bd0      	ldr	r3, [pc, #832]	; (8022d58 <checkbox_init+0x354>)
 8022a16:	681b      	ldr	r3, [r3, #0]
 8022a18:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8022a1c:	2000      	movs	r0, #0
 8022a1e:	f7f7 fcf7 	bl	801a410 <lv_disp_get_dpi>
 8022a22:	4603      	mov	r3, r0
 8022a24:	3314      	adds	r3, #20
 8022a26:	009b      	lsls	r3, r3, #2
 8022a28:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022a2c:	db0d      	blt.n	8022a4a <checkbox_init+0x46>
 8022a2e:	2000      	movs	r0, #0
 8022a30:	f7f7 fcee 	bl	801a410 <lv_disp_get_dpi>
 8022a34:	4603      	mov	r3, r0
 8022a36:	3314      	adds	r3, #20
 8022a38:	009b      	lsls	r3, r3, #2
 8022a3a:	4ac8      	ldr	r2, [pc, #800]	; (8022d5c <checkbox_init+0x358>)
 8022a3c:	fb82 1203 	smull	r1, r2, r2, r3
 8022a40:	1192      	asrs	r2, r2, #6
 8022a42:	17db      	asrs	r3, r3, #31
 8022a44:	1ad3      	subs	r3, r2, r3
 8022a46:	b21b      	sxth	r3, r3
 8022a48:	e000      	b.n	8022a4c <checkbox_init+0x48>
 8022a4a:	2301      	movs	r3, #1
 8022a4c:	461a      	mov	r2, r3
 8022a4e:	2100      	movs	r1, #0
 8022a50:	4628      	mov	r0, r5
 8022a52:	f7fb ff75 	bl	801e940 <lv_style_set_radius>
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8022a56:	4bc0      	ldr	r3, [pc, #768]	; (8022d58 <checkbox_init+0x354>)
 8022a58:	681b      	ldr	r3, [r3, #0]
 8022a5a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8022a5e:	2000      	movs	r0, #0
 8022a60:	f7f7 fcd6 	bl	801a410 <lv_disp_get_dpi>
 8022a64:	4603      	mov	r3, r0
 8022a66:	461a      	mov	r2, r3
 8022a68:	4613      	mov	r3, r2
 8022a6a:	009b      	lsls	r3, r3, #2
 8022a6c:	4413      	add	r3, r2
 8022a6e:	005b      	lsls	r3, r3, #1
 8022a70:	3350      	adds	r3, #80	; 0x50
 8022a72:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022a76:	db11      	blt.n	8022a9c <checkbox_init+0x98>
 8022a78:	2000      	movs	r0, #0
 8022a7a:	f7f7 fcc9 	bl	801a410 <lv_disp_get_dpi>
 8022a7e:	4603      	mov	r3, r0
 8022a80:	461a      	mov	r2, r3
 8022a82:	4613      	mov	r3, r2
 8022a84:	009b      	lsls	r3, r3, #2
 8022a86:	4413      	add	r3, r2
 8022a88:	005b      	lsls	r3, r3, #1
 8022a8a:	3350      	adds	r3, #80	; 0x50
 8022a8c:	4ab3      	ldr	r2, [pc, #716]	; (8022d5c <checkbox_init+0x358>)
 8022a8e:	fb82 1203 	smull	r1, r2, r2, r3
 8022a92:	1192      	asrs	r2, r2, #6
 8022a94:	17db      	asrs	r3, r3, #31
 8022a96:	1ad3      	subs	r3, r2, r3
 8022a98:	b21b      	sxth	r3, r3
 8022a9a:	e000      	b.n	8022a9e <checkbox_init+0x9a>
 8022a9c:	2301      	movs	r3, #1
 8022a9e:	461a      	mov	r2, r3
 8022aa0:	2100      	movs	r1, #0
 8022aa2:	4628      	mov	r0, r5
 8022aa4:	f7fc f814 	bl	801ead0 <lv_style_set_pad_inner>
    lv_style_set_outline_color(&styles->cb_bg, LV_STATE_DEFAULT, theme.color_primary);
 8022aa8:	4bab      	ldr	r3, [pc, #684]	; (8022d58 <checkbox_init+0x354>)
 8022aaa:	681b      	ldr	r3, [r3, #0]
 8022aac:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8022ab0:	4bab      	ldr	r3, [pc, #684]	; (8022d60 <checkbox_init+0x35c>)
 8022ab2:	68da      	ldr	r2, [r3, #12]
 8022ab4:	2100      	movs	r1, #0
 8022ab6:	f7fc f963 	bl	801ed80 <lv_style_set_outline_color>
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
 8022aba:	4ba7      	ldr	r3, [pc, #668]	; (8022d58 <checkbox_init+0x354>)
 8022abc:	681b      	ldr	r3, [r3, #0]
 8022abe:	3350      	adds	r3, #80	; 0x50
 8022ac0:	2200      	movs	r2, #0
 8022ac2:	2100      	movs	r1, #0
 8022ac4:	4618      	mov	r0, r3
 8022ac6:	f7fc f972 	bl	801edae <lv_style_set_outline_opa>
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_FOCUSED, LV_OPA_50);
 8022aca:	4ba3      	ldr	r3, [pc, #652]	; (8022d58 <checkbox_init+0x354>)
 8022acc:	681b      	ldr	r3, [r3, #0]
 8022ace:	3350      	adds	r3, #80	; 0x50
 8022ad0:	227f      	movs	r2, #127	; 0x7f
 8022ad2:	2102      	movs	r1, #2
 8022ad4:	4618      	mov	r0, r3
 8022ad6:	f7fc f96a 	bl	801edae <lv_style_set_outline_opa>
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
 8022ada:	4b9f      	ldr	r3, [pc, #636]	; (8022d58 <checkbox_init+0x354>)
 8022adc:	681b      	ldr	r3, [r3, #0]
 8022ade:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8022ae2:	4b9f      	ldr	r3, [pc, #636]	; (8022d60 <checkbox_init+0x35c>)
 8022ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022ae6:	f003 0320 	and.w	r3, r3, #32
 8022aea:	2b00      	cmp	r3, #0
 8022aec:	d118      	bne.n	8022b20 <checkbox_init+0x11c>
 8022aee:	2000      	movs	r0, #0
 8022af0:	f7f7 fc8e 	bl	801a410 <lv_disp_get_dpi>
 8022af4:	4603      	mov	r3, r0
 8022af6:	3328      	adds	r3, #40	; 0x28
 8022af8:	005b      	lsls	r3, r3, #1
 8022afa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022afe:	db0d      	blt.n	8022b1c <checkbox_init+0x118>
 8022b00:	2000      	movs	r0, #0
 8022b02:	f7f7 fc85 	bl	801a410 <lv_disp_get_dpi>
 8022b06:	4603      	mov	r3, r0
 8022b08:	3328      	adds	r3, #40	; 0x28
 8022b0a:	005b      	lsls	r3, r3, #1
 8022b0c:	4a93      	ldr	r2, [pc, #588]	; (8022d5c <checkbox_init+0x358>)
 8022b0e:	fb82 1203 	smull	r1, r2, r2, r3
 8022b12:	1192      	asrs	r2, r2, #6
 8022b14:	17db      	asrs	r3, r3, #31
 8022b16:	1ad3      	subs	r3, r2, r3
 8022b18:	b21b      	sxth	r3, r3
 8022b1a:	e002      	b.n	8022b22 <checkbox_init+0x11e>
 8022b1c:	2301      	movs	r3, #1
 8022b1e:	e000      	b.n	8022b22 <checkbox_init+0x11e>
 8022b20:	2300      	movs	r3, #0
 8022b22:	461a      	mov	r2, r3
 8022b24:	2100      	movs	r1, #0
 8022b26:	4628      	mov	r0, r5
 8022b28:	f7fc f8f8 	bl	801ed1c <lv_style_set_outline_width>
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
 8022b2c:	4b8a      	ldr	r3, [pc, #552]	; (8022d58 <checkbox_init+0x354>)
 8022b2e:	681b      	ldr	r3, [r3, #0]
 8022b30:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8022b34:	2000      	movs	r0, #0
 8022b36:	f7f7 fc6b 	bl	801a410 <lv_disp_get_dpi>
 8022b3a:	4603      	mov	r3, r0
 8022b3c:	461a      	mov	r2, r3
 8022b3e:	4613      	mov	r3, r2
 8022b40:	009b      	lsls	r3, r3, #2
 8022b42:	4413      	add	r3, r2
 8022b44:	005b      	lsls	r3, r3, #1
 8022b46:	3350      	adds	r3, #80	; 0x50
 8022b48:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022b4c:	db11      	blt.n	8022b72 <checkbox_init+0x16e>
 8022b4e:	2000      	movs	r0, #0
 8022b50:	f7f7 fc5e 	bl	801a410 <lv_disp_get_dpi>
 8022b54:	4603      	mov	r3, r0
 8022b56:	461a      	mov	r2, r3
 8022b58:	4613      	mov	r3, r2
 8022b5a:	009b      	lsls	r3, r3, #2
 8022b5c:	4413      	add	r3, r2
 8022b5e:	005b      	lsls	r3, r3, #1
 8022b60:	3350      	adds	r3, #80	; 0x50
 8022b62:	4a7e      	ldr	r2, [pc, #504]	; (8022d5c <checkbox_init+0x358>)
 8022b64:	fb82 1203 	smull	r1, r2, r2, r3
 8022b68:	1192      	asrs	r2, r2, #6
 8022b6a:	17db      	asrs	r3, r3, #31
 8022b6c:	1ad3      	subs	r3, r2, r3
 8022b6e:	b21b      	sxth	r3, r3
 8022b70:	e000      	b.n	8022b74 <checkbox_init+0x170>
 8022b72:	2301      	movs	r3, #1
 8022b74:	461a      	mov	r2, r3
 8022b76:	2100      	movs	r1, #0
 8022b78:	4628      	mov	r0, r5
 8022b7a:	f7fc f8e8 	bl	801ed4e <lv_style_set_outline_pad>
    lv_style_set_transition_time(&styles->cb_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
 8022b7e:	4b76      	ldr	r3, [pc, #472]	; (8022d58 <checkbox_init+0x354>)
 8022b80:	681b      	ldr	r3, [r3, #0]
 8022b82:	3350      	adds	r3, #80	; 0x50
 8022b84:	2200      	movs	r2, #0
 8022b86:	2100      	movs	r1, #0
 8022b88:	4618      	mov	r0, r3
 8022b8a:	f7fc faff 	bl	801f18c <lv_style_set_transition_time>
    lv_style_set_transition_prop_6(&styles->cb_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
 8022b8e:	4b72      	ldr	r3, [pc, #456]	; (8022d58 <checkbox_init+0x354>)
 8022b90:	681b      	ldr	r3, [r3, #0]
 8022b92:	3350      	adds	r3, #80	; 0x50
 8022b94:	224c      	movs	r2, #76	; 0x4c
 8022b96:	2100      	movs	r1, #0
 8022b98:	4618      	mov	r0, r3
 8022b9a:	f7fc fb74 	bl	801f286 <lv_style_set_transition_prop_6>

    style_init_reset(&styles->cb_bullet);
 8022b9e:	4b6e      	ldr	r3, [pc, #440]	; (8022d58 <checkbox_init+0x354>)
 8022ba0:	681b      	ldr	r3, [r3, #0]
 8022ba2:	3354      	adds	r3, #84	; 0x54
 8022ba4:	4618      	mov	r0, r3
 8022ba6:	f002 fc43 	bl	8025430 <style_init_reset>
    lv_style_set_outline_opa(&styles->cb_bullet, LV_STATE_FOCUSED, LV_OPA_TRANSP);
 8022baa:	4b6b      	ldr	r3, [pc, #428]	; (8022d58 <checkbox_init+0x354>)
 8022bac:	681b      	ldr	r3, [r3, #0]
 8022bae:	3354      	adds	r3, #84	; 0x54
 8022bb0:	2200      	movs	r2, #0
 8022bb2:	2102      	movs	r1, #2
 8022bb4:	4618      	mov	r0, r3
 8022bb6:	f7fc f8fa 	bl	801edae <lv_style_set_outline_opa>
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
 8022bba:	4b67      	ldr	r3, [pc, #412]	; (8022d58 <checkbox_init+0x354>)
 8022bbc:	681b      	ldr	r3, [r3, #0]
 8022bbe:	f103 0554 	add.w	r5, r3, #84	; 0x54
 8022bc2:	2000      	movs	r0, #0
 8022bc4:	f7f7 fc24 	bl	801a410 <lv_disp_get_dpi>
 8022bc8:	4603      	mov	r3, r0
 8022bca:	3314      	adds	r3, #20
 8022bcc:	009b      	lsls	r3, r3, #2
 8022bce:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022bd2:	db0d      	blt.n	8022bf0 <checkbox_init+0x1ec>
 8022bd4:	2000      	movs	r0, #0
 8022bd6:	f7f7 fc1b 	bl	801a410 <lv_disp_get_dpi>
 8022bda:	4603      	mov	r3, r0
 8022bdc:	3314      	adds	r3, #20
 8022bde:	009b      	lsls	r3, r3, #2
 8022be0:	4a5e      	ldr	r2, [pc, #376]	; (8022d5c <checkbox_init+0x358>)
 8022be2:	fb82 1203 	smull	r1, r2, r2, r3
 8022be6:	1192      	asrs	r2, r2, #6
 8022be8:	17db      	asrs	r3, r3, #31
 8022bea:	1ad3      	subs	r3, r2, r3
 8022bec:	b21b      	sxth	r3, r3
 8022bee:	e000      	b.n	8022bf2 <checkbox_init+0x1ee>
 8022bf0:	2301      	movs	r3, #1
 8022bf2:	461a      	mov	r2, r3
 8022bf4:	2100      	movs	r1, #0
 8022bf6:	4628      	mov	r0, r5
 8022bf8:	f7fb fea2 	bl	801e940 <lv_style_set_radius>
    lv_style_set_pattern_image(&styles->cb_bullet, LV_STATE_CHECKED, LV_SYMBOL_OK);
 8022bfc:	4b56      	ldr	r3, [pc, #344]	; (8022d58 <checkbox_init+0x354>)
 8022bfe:	681b      	ldr	r3, [r3, #0]
 8022c00:	3354      	adds	r3, #84	; 0x54
 8022c02:	4a58      	ldr	r2, [pc, #352]	; (8022d64 <checkbox_init+0x360>)
 8022c04:	2101      	movs	r1, #1
 8022c06:	4618      	mov	r0, r3
 8022c08:	f7fc f961 	bl	801eece <lv_style_set_pattern_image>
    lv_style_set_pattern_recolor(&styles->cb_bullet, LV_STATE_CHECKED, LV_COLOR_WHITE);
 8022c0c:	4b52      	ldr	r3, [pc, #328]	; (8022d58 <checkbox_init+0x354>)
 8022c0e:	681b      	ldr	r3, [r3, #0]
 8022c10:	3354      	adds	r3, #84	; 0x54
 8022c12:	4622      	mov	r2, r4
 8022c14:	f042 04ff 	orr.w	r4, r2, #255	; 0xff
 8022c18:	4622      	mov	r2, r4
 8022c1a:	f442 447f 	orr.w	r4, r2, #65280	; 0xff00
 8022c1e:	4622      	mov	r2, r4
 8022c20:	f442 047f 	orr.w	r4, r2, #16711680	; 0xff0000
 8022c24:	4622      	mov	r2, r4
 8022c26:	f042 447f 	orr.w	r4, r2, #4278190080	; 0xff000000
 8022c2a:	4622      	mov	r2, r4
 8022c2c:	2101      	movs	r1, #1
 8022c2e:	4618      	mov	r0, r3
 8022c30:	f7fc f91e 	bl	801ee70 <lv_style_set_pattern_recolor>
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_DEFAULT, LV_OPA_TRANSP);
 8022c34:	4b48      	ldr	r3, [pc, #288]	; (8022d58 <checkbox_init+0x354>)
 8022c36:	681b      	ldr	r3, [r3, #0]
 8022c38:	3354      	adds	r3, #84	; 0x54
 8022c3a:	2200      	movs	r2, #0
 8022c3c:	2100      	movs	r1, #0
 8022c3e:	4618      	mov	r0, r3
 8022c40:	f7fc f92d 	bl	801ee9e <lv_style_set_pattern_opa>
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_CHECKED, LV_OPA_COVER);
 8022c44:	4b44      	ldr	r3, [pc, #272]	; (8022d58 <checkbox_init+0x354>)
 8022c46:	681b      	ldr	r3, [r3, #0]
 8022c48:	3354      	adds	r3, #84	; 0x54
 8022c4a:	22ff      	movs	r2, #255	; 0xff
 8022c4c:	2101      	movs	r1, #1
 8022c4e:	4618      	mov	r0, r3
 8022c50:	f7fc f925 	bl	801ee9e <lv_style_set_pattern_opa>
    lv_style_set_transition_prop_3(&styles->cb_bullet, LV_STATE_DEFAULT, LV_STYLE_PATTERN_OPA);
 8022c54:	4b40      	ldr	r3, [pc, #256]	; (8022d58 <checkbox_init+0x354>)
 8022c56:	681b      	ldr	r3, [r3, #0]
 8022c58:	3354      	adds	r3, #84	; 0x54
 8022c5a:	226c      	movs	r2, #108	; 0x6c
 8022c5c:	2100      	movs	r1, #0
 8022c5e:	4618      	mov	r0, r3
 8022c60:	f7fc fac6 	bl	801f1f0 <lv_style_set_transition_prop_3>
    lv_style_set_text_font(&styles->cb_bullet, LV_STATE_CHECKED, theme.font_small);
 8022c64:	4b3c      	ldr	r3, [pc, #240]	; (8022d58 <checkbox_init+0x354>)
 8022c66:	681b      	ldr	r3, [r3, #0]
 8022c68:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8022c6c:	4b3c      	ldr	r3, [pc, #240]	; (8022d60 <checkbox_init+0x35c>)
 8022c6e:	695b      	ldr	r3, [r3, #20]
 8022c70:	461a      	mov	r2, r3
 8022c72:	2101      	movs	r1, #1
 8022c74:	f7fc f9da 	bl	801f02c <lv_style_set_text_font>
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 8022c78:	4b37      	ldr	r3, [pc, #220]	; (8022d58 <checkbox_init+0x354>)
 8022c7a:	681b      	ldr	r3, [r3, #0]
 8022c7c:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8022c80:	2000      	movs	r0, #0
 8022c82:	f7f7 fbc5 	bl	801a410 <lv_disp_get_dpi>
 8022c86:	4603      	mov	r3, r0
 8022c88:	461a      	mov	r2, r3
 8022c8a:	4613      	mov	r3, r2
 8022c8c:	005b      	lsls	r3, r3, #1
 8022c8e:	4413      	add	r3, r2
 8022c90:	3350      	adds	r3, #80	; 0x50
 8022c92:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022c96:	db10      	blt.n	8022cba <checkbox_init+0x2b6>
 8022c98:	2000      	movs	r0, #0
 8022c9a:	f7f7 fbb9 	bl	801a410 <lv_disp_get_dpi>
 8022c9e:	4603      	mov	r3, r0
 8022ca0:	461a      	mov	r2, r3
 8022ca2:	4613      	mov	r3, r2
 8022ca4:	005b      	lsls	r3, r3, #1
 8022ca6:	4413      	add	r3, r2
 8022ca8:	3350      	adds	r3, #80	; 0x50
 8022caa:	4a2c      	ldr	r2, [pc, #176]	; (8022d5c <checkbox_init+0x358>)
 8022cac:	fb82 1203 	smull	r1, r2, r2, r3
 8022cb0:	1192      	asrs	r2, r2, #6
 8022cb2:	17db      	asrs	r3, r3, #31
 8022cb4:	1ad3      	subs	r3, r2, r3
 8022cb6:	b21b      	sxth	r3, r3
 8022cb8:	e000      	b.n	8022cbc <checkbox_init+0x2b8>
 8022cba:	2301      	movs	r3, #1
 8022cbc:	461a      	mov	r2, r3
 8022cbe:	2100      	movs	r1, #0
 8022cc0:	4620      	mov	r0, r4
 8022cc2:	f7fb fed3 	bl	801ea6c <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 8022cc6:	4b24      	ldr	r3, [pc, #144]	; (8022d58 <checkbox_init+0x354>)
 8022cc8:	681b      	ldr	r3, [r3, #0]
 8022cca:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8022cce:	2000      	movs	r0, #0
 8022cd0:	f7f7 fb9e 	bl	801a410 <lv_disp_get_dpi>
 8022cd4:	4603      	mov	r3, r0
 8022cd6:	461a      	mov	r2, r3
 8022cd8:	4613      	mov	r3, r2
 8022cda:	005b      	lsls	r3, r3, #1
 8022cdc:	4413      	add	r3, r2
 8022cde:	3350      	adds	r3, #80	; 0x50
 8022ce0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022ce4:	db10      	blt.n	8022d08 <checkbox_init+0x304>
 8022ce6:	2000      	movs	r0, #0
 8022ce8:	f7f7 fb92 	bl	801a410 <lv_disp_get_dpi>
 8022cec:	4603      	mov	r3, r0
 8022cee:	461a      	mov	r2, r3
 8022cf0:	4613      	mov	r3, r2
 8022cf2:	005b      	lsls	r3, r3, #1
 8022cf4:	4413      	add	r3, r2
 8022cf6:	3350      	adds	r3, #80	; 0x50
 8022cf8:	4a18      	ldr	r2, [pc, #96]	; (8022d5c <checkbox_init+0x358>)
 8022cfa:	fb82 1203 	smull	r1, r2, r2, r3
 8022cfe:	1192      	asrs	r2, r2, #6
 8022d00:	17db      	asrs	r3, r3, #31
 8022d02:	1ad3      	subs	r3, r2, r3
 8022d04:	b21b      	sxth	r3, r3
 8022d06:	e000      	b.n	8022d0a <checkbox_init+0x306>
 8022d08:	2301      	movs	r3, #1
 8022d0a:	461a      	mov	r2, r3
 8022d0c:	2100      	movs	r1, #0
 8022d0e:	4620      	mov	r0, r4
 8022d10:	f7fb fec5 	bl	801ea9e <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 8022d14:	4b10      	ldr	r3, [pc, #64]	; (8022d58 <checkbox_init+0x354>)
 8022d16:	681b      	ldr	r3, [r3, #0]
 8022d18:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8022d1c:	2000      	movs	r0, #0
 8022d1e:	f7f7 fb77 	bl	801a410 <lv_disp_get_dpi>
 8022d22:	4603      	mov	r3, r0
 8022d24:	461a      	mov	r2, r3
 8022d26:	4613      	mov	r3, r2
 8022d28:	005b      	lsls	r3, r3, #1
 8022d2a:	4413      	add	r3, r2
 8022d2c:	3350      	adds	r3, #80	; 0x50
 8022d2e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022d32:	db19      	blt.n	8022d68 <checkbox_init+0x364>
 8022d34:	2000      	movs	r0, #0
 8022d36:	f7f7 fb6b 	bl	801a410 <lv_disp_get_dpi>
 8022d3a:	4603      	mov	r3, r0
 8022d3c:	461a      	mov	r2, r3
 8022d3e:	4613      	mov	r3, r2
 8022d40:	005b      	lsls	r3, r3, #1
 8022d42:	4413      	add	r3, r2
 8022d44:	3350      	adds	r3, #80	; 0x50
 8022d46:	4a05      	ldr	r2, [pc, #20]	; (8022d5c <checkbox_init+0x358>)
 8022d48:	fb82 1203 	smull	r1, r2, r2, r3
 8022d4c:	1192      	asrs	r2, r2, #6
 8022d4e:	17db      	asrs	r3, r3, #31
 8022d50:	1ad3      	subs	r3, r2, r3
 8022d52:	b21b      	sxth	r3, r3
 8022d54:	e009      	b.n	8022d6a <checkbox_init+0x366>
 8022d56:	bf00      	nop
 8022d58:	20021498 	.word	0x20021498
 8022d5c:	66666667 	.word	0x66666667
 8022d60:	2002146c 	.word	0x2002146c
 8022d64:	0802d938 	.word	0x0802d938
 8022d68:	2301      	movs	r3, #1
 8022d6a:	461a      	mov	r2, r3
 8022d6c:	2100      	movs	r1, #0
 8022d6e:	4620      	mov	r0, r4
 8022d70:	f7fb fe4a 	bl	801ea08 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
 8022d74:	4b14      	ldr	r3, [pc, #80]	; (8022dc8 <checkbox_init+0x3c4>)
 8022d76:	681b      	ldr	r3, [r3, #0]
 8022d78:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8022d7c:	2000      	movs	r0, #0
 8022d7e:	f7f7 fb47 	bl	801a410 <lv_disp_get_dpi>
 8022d82:	4603      	mov	r3, r0
 8022d84:	461a      	mov	r2, r3
 8022d86:	4613      	mov	r3, r2
 8022d88:	005b      	lsls	r3, r3, #1
 8022d8a:	4413      	add	r3, r2
 8022d8c:	3350      	adds	r3, #80	; 0x50
 8022d8e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022d92:	db10      	blt.n	8022db6 <checkbox_init+0x3b2>
 8022d94:	2000      	movs	r0, #0
 8022d96:	f7f7 fb3b 	bl	801a410 <lv_disp_get_dpi>
 8022d9a:	4603      	mov	r3, r0
 8022d9c:	461a      	mov	r2, r3
 8022d9e:	4613      	mov	r3, r2
 8022da0:	005b      	lsls	r3, r3, #1
 8022da2:	4413      	add	r3, r2
 8022da4:	3350      	adds	r3, #80	; 0x50
 8022da6:	4a09      	ldr	r2, [pc, #36]	; (8022dcc <checkbox_init+0x3c8>)
 8022da8:	fb82 1203 	smull	r1, r2, r2, r3
 8022dac:	1192      	asrs	r2, r2, #6
 8022dae:	17db      	asrs	r3, r3, #31
 8022db0:	1ad3      	subs	r3, r2, r3
 8022db2:	b21b      	sxth	r3, r3
 8022db4:	e000      	b.n	8022db8 <checkbox_init+0x3b4>
 8022db6:	2301      	movs	r3, #1
 8022db8:	461a      	mov	r2, r3
 8022dba:	2100      	movs	r1, #0
 8022dbc:	4620      	mov	r0, r4
 8022dbe:	f7fb fe3c 	bl	801ea3a <lv_style_set_pad_bottom>
#endif
}
 8022dc2:	bf00      	nop
 8022dc4:	bdb0      	pop	{r4, r5, r7, pc}
 8022dc6:	bf00      	nop
 8022dc8:	20021498 	.word	0x20021498
 8022dcc:	66666667 	.word	0x66666667

08022dd0 <btnmatrix_init>:

static void btnmatrix_init(void)
{
 8022dd0:	b480      	push	{r7}
 8022dd2:	af00      	add	r7, sp, #0
}
 8022dd4:	bf00      	nop
 8022dd6:	46bd      	mov	sp, r7
 8022dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ddc:	4770      	bx	lr
	...

08022de0 <keyboard_init>:

static void keyboard_init(void)
{
 8022de0:	b5b0      	push	{r4, r5, r7, lr}
 8022de2:	af00      	add	r7, sp, #0
#if LV_USE_KEYBOARD
    style_init_reset(&styles->kb_bg);
 8022de4:	4b96      	ldr	r3, [pc, #600]	; (8023040 <keyboard_init+0x260>)
 8022de6:	681b      	ldr	r3, [r3, #0]
 8022de8:	336c      	adds	r3, #108	; 0x6c
 8022dea:	4618      	mov	r0, r3
 8022dec:	f002 fb20 	bl	8025430 <style_init_reset>
    lv_style_set_radius(&styles->kb_bg, LV_STATE_DEFAULT, 0);
 8022df0:	4b93      	ldr	r3, [pc, #588]	; (8023040 <keyboard_init+0x260>)
 8022df2:	681b      	ldr	r3, [r3, #0]
 8022df4:	336c      	adds	r3, #108	; 0x6c
 8022df6:	2200      	movs	r2, #0
 8022df8:	2100      	movs	r1, #0
 8022dfa:	4618      	mov	r0, r3
 8022dfc:	f7fb fda0 	bl	801e940 <lv_style_set_radius>
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
 8022e00:	4b8f      	ldr	r3, [pc, #572]	; (8023040 <keyboard_init+0x260>)
 8022e02:	681b      	ldr	r3, [r3, #0]
 8022e04:	f103 056c 	add.w	r5, r3, #108	; 0x6c
 8022e08:	2000      	movs	r0, #0
 8022e0a:	f7f7 fb01 	bl	801a410 <lv_disp_get_dpi>
 8022e0e:	4603      	mov	r3, r0
 8022e10:	3314      	adds	r3, #20
 8022e12:	009b      	lsls	r3, r3, #2
 8022e14:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022e18:	db0d      	blt.n	8022e36 <keyboard_init+0x56>
 8022e1a:	2000      	movs	r0, #0
 8022e1c:	f7f7 faf8 	bl	801a410 <lv_disp_get_dpi>
 8022e20:	4603      	mov	r3, r0
 8022e22:	3314      	adds	r3, #20
 8022e24:	009b      	lsls	r3, r3, #2
 8022e26:	4a87      	ldr	r2, [pc, #540]	; (8023044 <keyboard_init+0x264>)
 8022e28:	fb82 1203 	smull	r1, r2, r2, r3
 8022e2c:	1192      	asrs	r2, r2, #6
 8022e2e:	17db      	asrs	r3, r3, #31
 8022e30:	1ad3      	subs	r3, r2, r3
 8022e32:	b21b      	sxth	r3, r3
 8022e34:	e000      	b.n	8022e38 <keyboard_init+0x58>
 8022e36:	2301      	movs	r3, #1
 8022e38:	461a      	mov	r2, r3
 8022e3a:	2100      	movs	r1, #0
 8022e3c:	4628      	mov	r0, r5
 8022e3e:	f7fb fef3 	bl	801ec28 <lv_style_set_border_width>
    lv_style_set_border_side(&styles->kb_bg, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP);
 8022e42:	4b7f      	ldr	r3, [pc, #508]	; (8023040 <keyboard_init+0x260>)
 8022e44:	681b      	ldr	r3, [r3, #0]
 8022e46:	336c      	adds	r3, #108	; 0x6c
 8022e48:	2202      	movs	r2, #2
 8022e4a:	2100      	movs	r1, #0
 8022e4c:	4618      	mov	r0, r3
 8022e4e:	f7fb ff04 	bl	801ec5a <lv_style_set_border_side>
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
 8022e52:	4b7b      	ldr	r3, [pc, #492]	; (8023040 <keyboard_init+0x260>)
 8022e54:	681b      	ldr	r3, [r3, #0]
 8022e56:	f103 056c 	add.w	r5, r3, #108	; 0x6c
 8022e5a:	4b7b      	ldr	r3, [pc, #492]	; (8023048 <keyboard_init+0x268>)
 8022e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022e5e:	f003 0302 	and.w	r3, r3, #2
 8022e62:	2b00      	cmp	r3, #0
 8022e64:	d010      	beq.n	8022e88 <keyboard_init+0xa8>
 8022e66:	4b78      	ldr	r3, [pc, #480]	; (8023048 <keyboard_init+0x268>)
 8022e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022e6a:	f003 0302 	and.w	r3, r3, #2
 8022e6e:	2b00      	cmp	r3, #0
 8022e70:	d004      	beq.n	8022e7c <keyboard_init+0x9c>
 8022e72:	4876      	ldr	r0, [pc, #472]	; (802304c <keyboard_init+0x26c>)
 8022e74:	f7fb fd1e 	bl	801e8b4 <lv_color_hex>
 8022e78:	4604      	mov	r4, r0
 8022e7a:	e00e      	b.n	8022e9a <keyboard_init+0xba>
 8022e7c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8022e80:	f7fb fd18 	bl	801e8b4 <lv_color_hex>
 8022e84:	4604      	mov	r4, r0
 8022e86:	e008      	b.n	8022e9a <keyboard_init+0xba>
 8022e88:	f36f 0407 	bfc	r4, #0, #8
 8022e8c:	f36f 240f 	bfc	r4, #8, #8
 8022e90:	f36f 4417 	bfc	r4, #16, #8
 8022e94:	4623      	mov	r3, r4
 8022e96:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 8022e9a:	4622      	mov	r2, r4
 8022e9c:	2100      	movs	r1, #0
 8022e9e:	4628      	mov	r0, r5
 8022ea0:	f7fb ff0d 	bl	801ecbe <lv_style_set_border_color>
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_EDITED, theme.color_secondary);
 8022ea4:	4b66      	ldr	r3, [pc, #408]	; (8023040 <keyboard_init+0x260>)
 8022ea6:	681b      	ldr	r3, [r3, #0]
 8022ea8:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8022eac:	4b66      	ldr	r3, [pc, #408]	; (8023048 <keyboard_init+0x268>)
 8022eae:	691a      	ldr	r2, [r3, #16]
 8022eb0:	2104      	movs	r1, #4
 8022eb2:	f7fb ff04 	bl	801ecbe <lv_style_set_border_color>
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
 8022eb6:	4b62      	ldr	r3, [pc, #392]	; (8023040 <keyboard_init+0x260>)
 8022eb8:	681b      	ldr	r3, [r3, #0]
 8022eba:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8022ebe:	2000      	movs	r0, #0
 8022ec0:	f7f7 faa6 	bl	801a410 <lv_disp_get_dpi>
 8022ec4:	4603      	mov	r3, r0
 8022ec6:	461a      	mov	r2, r3
 8022ec8:	4613      	mov	r3, r2
 8022eca:	009b      	lsls	r3, r3, #2
 8022ecc:	4413      	add	r3, r2
 8022ece:	3350      	adds	r3, #80	; 0x50
 8022ed0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022ed4:	db10      	blt.n	8022ef8 <keyboard_init+0x118>
 8022ed6:	2000      	movs	r0, #0
 8022ed8:	f7f7 fa9a 	bl	801a410 <lv_disp_get_dpi>
 8022edc:	4603      	mov	r3, r0
 8022ede:	461a      	mov	r2, r3
 8022ee0:	4613      	mov	r3, r2
 8022ee2:	009b      	lsls	r3, r3, #2
 8022ee4:	4413      	add	r3, r2
 8022ee6:	3350      	adds	r3, #80	; 0x50
 8022ee8:	4a56      	ldr	r2, [pc, #344]	; (8023044 <keyboard_init+0x264>)
 8022eea:	fb82 1203 	smull	r1, r2, r2, r3
 8022eee:	1192      	asrs	r2, r2, #6
 8022ef0:	17db      	asrs	r3, r3, #31
 8022ef2:	1ad3      	subs	r3, r2, r3
 8022ef4:	b21b      	sxth	r3, r3
 8022ef6:	e000      	b.n	8022efa <keyboard_init+0x11a>
 8022ef8:	2301      	movs	r3, #1
 8022efa:	461a      	mov	r2, r3
 8022efc:	2100      	movs	r1, #0
 8022efe:	4620      	mov	r0, r4
 8022f00:	f7fb fdb4 	bl	801ea6c <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
 8022f04:	4b4e      	ldr	r3, [pc, #312]	; (8023040 <keyboard_init+0x260>)
 8022f06:	681b      	ldr	r3, [r3, #0]
 8022f08:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8022f0c:	2000      	movs	r0, #0
 8022f0e:	f7f7 fa7f 	bl	801a410 <lv_disp_get_dpi>
 8022f12:	4603      	mov	r3, r0
 8022f14:	461a      	mov	r2, r3
 8022f16:	4613      	mov	r3, r2
 8022f18:	009b      	lsls	r3, r3, #2
 8022f1a:	4413      	add	r3, r2
 8022f1c:	3350      	adds	r3, #80	; 0x50
 8022f1e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022f22:	db10      	blt.n	8022f46 <keyboard_init+0x166>
 8022f24:	2000      	movs	r0, #0
 8022f26:	f7f7 fa73 	bl	801a410 <lv_disp_get_dpi>
 8022f2a:	4603      	mov	r3, r0
 8022f2c:	461a      	mov	r2, r3
 8022f2e:	4613      	mov	r3, r2
 8022f30:	009b      	lsls	r3, r3, #2
 8022f32:	4413      	add	r3, r2
 8022f34:	3350      	adds	r3, #80	; 0x50
 8022f36:	4a43      	ldr	r2, [pc, #268]	; (8023044 <keyboard_init+0x264>)
 8022f38:	fb82 1203 	smull	r1, r2, r2, r3
 8022f3c:	1192      	asrs	r2, r2, #6
 8022f3e:	17db      	asrs	r3, r3, #31
 8022f40:	1ad3      	subs	r3, r2, r3
 8022f42:	b21b      	sxth	r3, r3
 8022f44:	e000      	b.n	8022f48 <keyboard_init+0x168>
 8022f46:	2301      	movs	r3, #1
 8022f48:	461a      	mov	r2, r3
 8022f4a:	2100      	movs	r1, #0
 8022f4c:	4620      	mov	r0, r4
 8022f4e:	f7fb fda6 	bl	801ea9e <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
 8022f52:	4b3b      	ldr	r3, [pc, #236]	; (8023040 <keyboard_init+0x260>)
 8022f54:	681b      	ldr	r3, [r3, #0]
 8022f56:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8022f5a:	2000      	movs	r0, #0
 8022f5c:	f7f7 fa58 	bl	801a410 <lv_disp_get_dpi>
 8022f60:	4603      	mov	r3, r0
 8022f62:	461a      	mov	r2, r3
 8022f64:	4613      	mov	r3, r2
 8022f66:	009b      	lsls	r3, r3, #2
 8022f68:	4413      	add	r3, r2
 8022f6a:	3350      	adds	r3, #80	; 0x50
 8022f6c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022f70:	db10      	blt.n	8022f94 <keyboard_init+0x1b4>
 8022f72:	2000      	movs	r0, #0
 8022f74:	f7f7 fa4c 	bl	801a410 <lv_disp_get_dpi>
 8022f78:	4603      	mov	r3, r0
 8022f7a:	461a      	mov	r2, r3
 8022f7c:	4613      	mov	r3, r2
 8022f7e:	009b      	lsls	r3, r3, #2
 8022f80:	4413      	add	r3, r2
 8022f82:	3350      	adds	r3, #80	; 0x50
 8022f84:	4a2f      	ldr	r2, [pc, #188]	; (8023044 <keyboard_init+0x264>)
 8022f86:	fb82 1203 	smull	r1, r2, r2, r3
 8022f8a:	1192      	asrs	r2, r2, #6
 8022f8c:	17db      	asrs	r3, r3, #31
 8022f8e:	1ad3      	subs	r3, r2, r3
 8022f90:	b21b      	sxth	r3, r3
 8022f92:	e000      	b.n	8022f96 <keyboard_init+0x1b6>
 8022f94:	2301      	movs	r3, #1
 8022f96:	461a      	mov	r2, r3
 8022f98:	2100      	movs	r1, #0
 8022f9a:	4620      	mov	r0, r4
 8022f9c:	f7fb fd34 	bl	801ea08 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
 8022fa0:	4b27      	ldr	r3, [pc, #156]	; (8023040 <keyboard_init+0x260>)
 8022fa2:	681b      	ldr	r3, [r3, #0]
 8022fa4:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8022fa8:	2000      	movs	r0, #0
 8022faa:	f7f7 fa31 	bl	801a410 <lv_disp_get_dpi>
 8022fae:	4603      	mov	r3, r0
 8022fb0:	461a      	mov	r2, r3
 8022fb2:	4613      	mov	r3, r2
 8022fb4:	009b      	lsls	r3, r3, #2
 8022fb6:	4413      	add	r3, r2
 8022fb8:	3350      	adds	r3, #80	; 0x50
 8022fba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8022fbe:	db10      	blt.n	8022fe2 <keyboard_init+0x202>
 8022fc0:	2000      	movs	r0, #0
 8022fc2:	f7f7 fa25 	bl	801a410 <lv_disp_get_dpi>
 8022fc6:	4603      	mov	r3, r0
 8022fc8:	461a      	mov	r2, r3
 8022fca:	4613      	mov	r3, r2
 8022fcc:	009b      	lsls	r3, r3, #2
 8022fce:	4413      	add	r3, r2
 8022fd0:	3350      	adds	r3, #80	; 0x50
 8022fd2:	4a1c      	ldr	r2, [pc, #112]	; (8023044 <keyboard_init+0x264>)
 8022fd4:	fb82 1203 	smull	r1, r2, r2, r3
 8022fd8:	1192      	asrs	r2, r2, #6
 8022fda:	17db      	asrs	r3, r3, #31
 8022fdc:	1ad3      	subs	r3, r2, r3
 8022fde:	b21b      	sxth	r3, r3
 8022fe0:	e000      	b.n	8022fe4 <keyboard_init+0x204>
 8022fe2:	2301      	movs	r3, #1
 8022fe4:	461a      	mov	r2, r3
 8022fe6:	2100      	movs	r1, #0
 8022fe8:	4620      	mov	r0, r4
 8022fea:	f7fb fd26 	bl	801ea3a <lv_style_set_pad_bottom>
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
 8022fee:	4b14      	ldr	r3, [pc, #80]	; (8023040 <keyboard_init+0x260>)
 8022ff0:	681b      	ldr	r3, [r3, #0]
 8022ff2:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8022ff6:	2000      	movs	r0, #0
 8022ff8:	f7f7 fa0a 	bl	801a410 <lv_disp_get_dpi>
 8022ffc:	4603      	mov	r3, r0
 8022ffe:	461a      	mov	r2, r3
 8023000:	4613      	mov	r3, r2
 8023002:	005b      	lsls	r3, r3, #1
 8023004:	4413      	add	r3, r2
 8023006:	3350      	adds	r3, #80	; 0x50
 8023008:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802300c:	db10      	blt.n	8023030 <keyboard_init+0x250>
 802300e:	2000      	movs	r0, #0
 8023010:	f7f7 f9fe 	bl	801a410 <lv_disp_get_dpi>
 8023014:	4603      	mov	r3, r0
 8023016:	461a      	mov	r2, r3
 8023018:	4613      	mov	r3, r2
 802301a:	005b      	lsls	r3, r3, #1
 802301c:	4413      	add	r3, r2
 802301e:	3350      	adds	r3, #80	; 0x50
 8023020:	4a08      	ldr	r2, [pc, #32]	; (8023044 <keyboard_init+0x264>)
 8023022:	fb82 1203 	smull	r1, r2, r2, r3
 8023026:	1192      	asrs	r2, r2, #6
 8023028:	17db      	asrs	r3, r3, #31
 802302a:	1ad3      	subs	r3, r2, r3
 802302c:	b21b      	sxth	r3, r3
 802302e:	e000      	b.n	8023032 <keyboard_init+0x252>
 8023030:	2301      	movs	r3, #1
 8023032:	461a      	mov	r2, r3
 8023034:	2100      	movs	r1, #0
 8023036:	4620      	mov	r0, r4
 8023038:	f7fb fd4a 	bl	801ead0 <lv_style_set_pad_inner>
#endif
}
 802303c:	bf00      	nop
 802303e:	bdb0      	pop	{r4, r5, r7, pc}
 8023040:	20021498 	.word	0x20021498
 8023044:	66666667 	.word	0x66666667
 8023048:	2002146c 	.word	0x2002146c
 802304c:	003b3e42 	.word	0x003b3e42

08023050 <msgbox_init>:

static void msgbox_init(void)
{
 8023050:	b5b0      	push	{r4, r5, r7, lr}
 8023052:	af00      	add	r7, sp, #0
#if LV_USE_MSGBOX
    style_init_reset(&styles->mbox_bg);
 8023054:	4b29      	ldr	r3, [pc, #164]	; (80230fc <msgbox_init+0xac>)
 8023056:	681b      	ldr	r3, [r3, #0]
 8023058:	3380      	adds	r3, #128	; 0x80
 802305a:	4618      	mov	r0, r3
 802305c:	f002 f9e8 	bl	8025430 <style_init_reset>
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
 8023060:	4b26      	ldr	r3, [pc, #152]	; (80230fc <msgbox_init+0xac>)
 8023062:	681b      	ldr	r3, [r3, #0]
 8023064:	f103 0580 	add.w	r5, r3, #128	; 0x80
 8023068:	2000      	movs	r0, #0
 802306a:	f7f7 f9d1 	bl	801a410 <lv_disp_get_dpi>
 802306e:	4603      	mov	r3, r0
 8023070:	461a      	mov	r2, r3
 8023072:	2332      	movs	r3, #50	; 0x32
 8023074:	fb03 f302 	mul.w	r3, r3, r2
 8023078:	3350      	adds	r3, #80	; 0x50
 802307a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802307e:	db10      	blt.n	80230a2 <msgbox_init+0x52>
 8023080:	2000      	movs	r0, #0
 8023082:	f7f7 f9c5 	bl	801a410 <lv_disp_get_dpi>
 8023086:	4603      	mov	r3, r0
 8023088:	461a      	mov	r2, r3
 802308a:	2332      	movs	r3, #50	; 0x32
 802308c:	fb03 f302 	mul.w	r3, r3, r2
 8023090:	3350      	adds	r3, #80	; 0x50
 8023092:	4a1b      	ldr	r2, [pc, #108]	; (8023100 <msgbox_init+0xb0>)
 8023094:	fb82 1203 	smull	r1, r2, r2, r3
 8023098:	1192      	asrs	r2, r2, #6
 802309a:	17db      	asrs	r3, r3, #31
 802309c:	1ad3      	subs	r3, r2, r3
 802309e:	b21b      	sxth	r3, r3
 80230a0:	e000      	b.n	80230a4 <msgbox_init+0x54>
 80230a2:	2301      	movs	r3, #1
 80230a4:	461a      	mov	r2, r3
 80230a6:	2100      	movs	r1, #0
 80230a8:	4628      	mov	r0, r5
 80230aa:	f7fb fe98 	bl	801edde <lv_style_set_shadow_width>
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
 80230ae:	4b13      	ldr	r3, [pc, #76]	; (80230fc <msgbox_init+0xac>)
 80230b0:	681b      	ldr	r3, [r3, #0]
 80230b2:	f103 0580 	add.w	r5, r3, #128	; 0x80
 80230b6:	4b13      	ldr	r3, [pc, #76]	; (8023104 <msgbox_init+0xb4>)
 80230b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80230ba:	f003 0302 	and.w	r3, r3, #2
 80230be:	2b00      	cmp	r3, #0
 80230c0:	d00f      	beq.n	80230e2 <msgbox_init+0x92>
 80230c2:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 80230c6:	f363 0407 	bfi	r4, r3, #0, #8
 80230ca:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 80230ce:	f363 240f 	bfi	r4, r3, #8, #8
 80230d2:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 80230d6:	f363 4417 	bfi	r4, r3, #16, #8
 80230da:	4623      	mov	r3, r4
 80230dc:	f043 447f 	orr.w	r4, r3, #4278190080	; 0xff000000
 80230e0:	e004      	b.n	80230ec <msgbox_init+0x9c>
 80230e2:	f640 1099 	movw	r0, #2457	; 0x999
 80230e6:	f7fb fbf9 	bl	801e8dc <lv_color_hex3>
 80230ea:	4604      	mov	r4, r0
 80230ec:	4622      	mov	r2, r4
 80230ee:	2100      	movs	r1, #0
 80230f0:	4628      	mov	r0, r5
 80230f2:	f7fb fea6 	bl	801ee42 <lv_style_set_shadow_color>

#endif
}
 80230f6:	bf00      	nop
 80230f8:	bdb0      	pop	{r4, r5, r7, pc}
 80230fa:	bf00      	nop
 80230fc:	20021498 	.word	0x20021498
 8023100:	66666667 	.word	0x66666667
 8023104:	2002146c 	.word	0x2002146c

08023108 <page_init>:

static void page_init(void)
{
 8023108:	b598      	push	{r3, r4, r7, lr}
 802310a:	af00      	add	r7, sp, #0
#if LV_USE_PAGE
    style_init_reset(&styles->sb);
 802310c:	4b60      	ldr	r3, [pc, #384]	; (8023290 <page_init+0x188>)
 802310e:	681b      	ldr	r3, [r3, #0]
 8023110:	3384      	adds	r3, #132	; 0x84
 8023112:	4618      	mov	r0, r3
 8023114:	f002 f98c 	bl	8025430 <style_init_reset>
    lv_style_set_bg_opa(&styles->sb, LV_STATE_DEFAULT, LV_OPA_COVER);
 8023118:	4b5d      	ldr	r3, [pc, #372]	; (8023290 <page_init+0x188>)
 802311a:	681b      	ldr	r3, [r3, #0]
 802311c:	3384      	adds	r3, #132	; 0x84
 802311e:	22ff      	movs	r2, #255	; 0xff
 8023120:	2100      	movs	r1, #0
 8023122:	4618      	mov	r0, r3
 8023124:	f7fb fd68 	bl	801ebf8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->sb, LV_STATE_DEFAULT, (IS_LIGHT ? lv_color_hex(0xcccfd1) : lv_color_hex(0x777f85)));
 8023128:	4b59      	ldr	r3, [pc, #356]	; (8023290 <page_init+0x188>)
 802312a:	681b      	ldr	r3, [r3, #0]
 802312c:	f103 0484 	add.w	r4, r3, #132	; 0x84
 8023130:	4b58      	ldr	r3, [pc, #352]	; (8023294 <page_init+0x18c>)
 8023132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023134:	f003 0302 	and.w	r3, r3, #2
 8023138:	2b00      	cmp	r3, #0
 802313a:	d004      	beq.n	8023146 <page_init+0x3e>
 802313c:	4856      	ldr	r0, [pc, #344]	; (8023298 <page_init+0x190>)
 802313e:	f7fb fbb9 	bl	801e8b4 <lv_color_hex>
 8023142:	4603      	mov	r3, r0
 8023144:	e003      	b.n	802314e <page_init+0x46>
 8023146:	4855      	ldr	r0, [pc, #340]	; (802329c <page_init+0x194>)
 8023148:	f7fb fbb4 	bl	801e8b4 <lv_color_hex>
 802314c:	4603      	mov	r3, r0
 802314e:	461a      	mov	r2, r3
 8023150:	2100      	movs	r1, #0
 8023152:	4620      	mov	r0, r4
 8023154:	f7fb fd39 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_radius(&styles->sb, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8023158:	4b4d      	ldr	r3, [pc, #308]	; (8023290 <page_init+0x188>)
 802315a:	681b      	ldr	r3, [r3, #0]
 802315c:	3384      	adds	r3, #132	; 0x84
 802315e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8023162:	2100      	movs	r1, #0
 8023164:	4618      	mov	r0, r3
 8023166:	f7fb fbeb 	bl	801e940 <lv_style_set_radius>
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
 802316a:	4b49      	ldr	r3, [pc, #292]	; (8023290 <page_init+0x188>)
 802316c:	681b      	ldr	r3, [r3, #0]
 802316e:	f103 0484 	add.w	r4, r3, #132	; 0x84
 8023172:	2000      	movs	r0, #0
 8023174:	f7f7 f94c 	bl	801a410 <lv_disp_get_dpi>
 8023178:	4603      	mov	r3, r0
 802317a:	461a      	mov	r2, r3
 802317c:	4613      	mov	r3, r2
 802317e:	00db      	lsls	r3, r3, #3
 8023180:	1a9b      	subs	r3, r3, r2
 8023182:	3350      	adds	r3, #80	; 0x50
 8023184:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023188:	db10      	blt.n	80231ac <page_init+0xa4>
 802318a:	2000      	movs	r0, #0
 802318c:	f7f7 f940 	bl	801a410 <lv_disp_get_dpi>
 8023190:	4603      	mov	r3, r0
 8023192:	461a      	mov	r2, r3
 8023194:	4613      	mov	r3, r2
 8023196:	00db      	lsls	r3, r3, #3
 8023198:	1a9b      	subs	r3, r3, r2
 802319a:	3350      	adds	r3, #80	; 0x50
 802319c:	4a40      	ldr	r2, [pc, #256]	; (80232a0 <page_init+0x198>)
 802319e:	fb82 1203 	smull	r1, r2, r2, r3
 80231a2:	1192      	asrs	r2, r2, #6
 80231a4:	17db      	asrs	r3, r3, #31
 80231a6:	1ad3      	subs	r3, r2, r3
 80231a8:	b21b      	sxth	r3, r3
 80231aa:	e000      	b.n	80231ae <page_init+0xa6>
 80231ac:	2301      	movs	r3, #1
 80231ae:	461a      	mov	r2, r3
 80231b0:	2100      	movs	r1, #0
 80231b2:	4620      	mov	r0, r4
 80231b4:	f7fb fbf6 	bl	801e9a4 <lv_style_set_size>
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
 80231b8:	4b35      	ldr	r3, [pc, #212]	; (8023290 <page_init+0x188>)
 80231ba:	681b      	ldr	r3, [r3, #0]
 80231bc:	f103 0484 	add.w	r4, r3, #132	; 0x84
 80231c0:	2000      	movs	r0, #0
 80231c2:	f7f7 f925 	bl	801a410 <lv_disp_get_dpi>
 80231c6:	4603      	mov	r3, r0
 80231c8:	461a      	mov	r2, r3
 80231ca:	4613      	mov	r3, r2
 80231cc:	00db      	lsls	r3, r3, #3
 80231ce:	1a9b      	subs	r3, r3, r2
 80231d0:	3350      	adds	r3, #80	; 0x50
 80231d2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80231d6:	db10      	blt.n	80231fa <page_init+0xf2>
 80231d8:	2000      	movs	r0, #0
 80231da:	f7f7 f919 	bl	801a410 <lv_disp_get_dpi>
 80231de:	4603      	mov	r3, r0
 80231e0:	461a      	mov	r2, r3
 80231e2:	4613      	mov	r3, r2
 80231e4:	00db      	lsls	r3, r3, #3
 80231e6:	1a9b      	subs	r3, r3, r2
 80231e8:	3350      	adds	r3, #80	; 0x50
 80231ea:	4a2d      	ldr	r2, [pc, #180]	; (80232a0 <page_init+0x198>)
 80231ec:	fb82 1203 	smull	r1, r2, r2, r3
 80231f0:	1192      	asrs	r2, r2, #6
 80231f2:	17db      	asrs	r3, r3, #31
 80231f4:	1ad3      	subs	r3, r2, r3
 80231f6:	b21b      	sxth	r3, r3
 80231f8:	e000      	b.n	80231fc <page_init+0xf4>
 80231fa:	2301      	movs	r3, #1
 80231fc:	461a      	mov	r2, r3
 80231fe:	2100      	movs	r1, #0
 8023200:	4620      	mov	r0, r4
 8023202:	f7fb fc4c 	bl	801ea9e <lv_style_set_pad_right>
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
 8023206:	4b22      	ldr	r3, [pc, #136]	; (8023290 <page_init+0x188>)
 8023208:	681b      	ldr	r3, [r3, #0]
 802320a:	f103 0484 	add.w	r4, r3, #132	; 0x84
 802320e:	2000      	movs	r0, #0
 8023210:	f7f7 f8fe 	bl	801a410 <lv_disp_get_dpi>
 8023214:	4603      	mov	r3, r0
 8023216:	461a      	mov	r2, r3
 8023218:	4613      	mov	r3, r2
 802321a:	00db      	lsls	r3, r3, #3
 802321c:	1a9b      	subs	r3, r3, r2
 802321e:	3350      	adds	r3, #80	; 0x50
 8023220:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023224:	db10      	blt.n	8023248 <page_init+0x140>
 8023226:	2000      	movs	r0, #0
 8023228:	f7f7 f8f2 	bl	801a410 <lv_disp_get_dpi>
 802322c:	4603      	mov	r3, r0
 802322e:	461a      	mov	r2, r3
 8023230:	4613      	mov	r3, r2
 8023232:	00db      	lsls	r3, r3, #3
 8023234:	1a9b      	subs	r3, r3, r2
 8023236:	3350      	adds	r3, #80	; 0x50
 8023238:	4a19      	ldr	r2, [pc, #100]	; (80232a0 <page_init+0x198>)
 802323a:	fb82 1203 	smull	r1, r2, r2, r3
 802323e:	1192      	asrs	r2, r2, #6
 8023240:	17db      	asrs	r3, r3, #31
 8023242:	1ad3      	subs	r3, r2, r3
 8023244:	b21b      	sxth	r3, r3
 8023246:	e000      	b.n	802324a <page_init+0x142>
 8023248:	2301      	movs	r3, #1
 802324a:	461a      	mov	r2, r3
 802324c:	2100      	movs	r1, #0
 802324e:	4620      	mov	r0, r4
 8023250:	f7fb fbf3 	bl	801ea3a <lv_style_set_pad_bottom>

#if LV_USE_ANIMATION
    style_init_reset(&styles->edge_flash);
 8023254:	4b0e      	ldr	r3, [pc, #56]	; (8023290 <page_init+0x188>)
 8023256:	681b      	ldr	r3, [r3, #0]
 8023258:	3388      	adds	r3, #136	; 0x88
 802325a:	4618      	mov	r0, r3
 802325c:	f002 f8e8 	bl	8025430 <style_init_reset>
    lv_style_set_bg_opa(&styles->edge_flash, LV_STATE_DEFAULT, LV_OPA_COVER);
 8023260:	4b0b      	ldr	r3, [pc, #44]	; (8023290 <page_init+0x188>)
 8023262:	681b      	ldr	r3, [r3, #0]
 8023264:	3388      	adds	r3, #136	; 0x88
 8023266:	22ff      	movs	r2, #255	; 0xff
 8023268:	2100      	movs	r1, #0
 802326a:	4618      	mov	r0, r3
 802326c:	f7fb fcc4 	bl	801ebf8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->edge_flash, LV_STATE_DEFAULT,  lv_color_hex3(0x888));
 8023270:	4b07      	ldr	r3, [pc, #28]	; (8023290 <page_init+0x188>)
 8023272:	681b      	ldr	r3, [r3, #0]
 8023274:	f103 0488 	add.w	r4, r3, #136	; 0x88
 8023278:	f640 0088 	movw	r0, #2184	; 0x888
 802327c:	f7fb fb2e 	bl	801e8dc <lv_color_hex3>
 8023280:	4603      	mov	r3, r0
 8023282:	461a      	mov	r2, r3
 8023284:	2100      	movs	r1, #0
 8023286:	4620      	mov	r0, r4
 8023288:	f7fb fc9f 	bl	801ebca <lv_style_set_bg_color>
#endif
#endif
}
 802328c:	bf00      	nop
 802328e:	bd98      	pop	{r3, r4, r7, pc}
 8023290:	20021498 	.word	0x20021498
 8023294:	2002146c 	.word	0x2002146c
 8023298:	00cccfd1 	.word	0x00cccfd1
 802329c:	00777f85 	.word	0x00777f85
 80232a0:	66666667 	.word	0x66666667

080232a4 <textarea_init>:

static void textarea_init(void)
{
 80232a4:	b598      	push	{r3, r4, r7, lr}
 80232a6:	af00      	add	r7, sp, #0
#if LV_USE_TEXTAREA
    style_init_reset(&styles->ta_cursor);
 80232a8:	4b49      	ldr	r3, [pc, #292]	; (80233d0 <textarea_init+0x12c>)
 80232aa:	681b      	ldr	r3, [r3, #0]
 80232ac:	33b8      	adds	r3, #184	; 0xb8
 80232ae:	4618      	mov	r0, r3
 80232b0:	f002 f8be 	bl	8025430 <style_init_reset>
    lv_style_set_border_color(&styles->ta_cursor, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
 80232b4:	4b46      	ldr	r3, [pc, #280]	; (80233d0 <textarea_init+0x12c>)
 80232b6:	681b      	ldr	r3, [r3, #0]
 80232b8:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80232bc:	4b45      	ldr	r3, [pc, #276]	; (80233d4 <textarea_init+0x130>)
 80232be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80232c0:	f003 0302 	and.w	r3, r3, #2
 80232c4:	2b00      	cmp	r3, #0
 80232c6:	d004      	beq.n	80232d2 <textarea_init+0x2e>
 80232c8:	4843      	ldr	r0, [pc, #268]	; (80233d8 <textarea_init+0x134>)
 80232ca:	f7fb faf3 	bl	801e8b4 <lv_color_hex>
 80232ce:	4603      	mov	r3, r0
 80232d0:	e003      	b.n	80232da <textarea_init+0x36>
 80232d2:	4842      	ldr	r0, [pc, #264]	; (80233dc <textarea_init+0x138>)
 80232d4:	f7fb faee 	bl	801e8b4 <lv_color_hex>
 80232d8:	4603      	mov	r3, r0
 80232da:	461a      	mov	r2, r3
 80232dc:	2100      	movs	r1, #0
 80232de:	4620      	mov	r0, r4
 80232e0:	f7fb fced 	bl	801ecbe <lv_style_set_border_color>
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
 80232e4:	4b3a      	ldr	r3, [pc, #232]	; (80233d0 <textarea_init+0x12c>)
 80232e6:	681b      	ldr	r3, [r3, #0]
 80232e8:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80232ec:	2000      	movs	r0, #0
 80232ee:	f7f7 f88f 	bl	801a410 <lv_disp_get_dpi>
 80232f2:	4603      	mov	r3, r0
 80232f4:	3328      	adds	r3, #40	; 0x28
 80232f6:	005b      	lsls	r3, r3, #1
 80232f8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80232fc:	db0d      	blt.n	802331a <textarea_init+0x76>
 80232fe:	2000      	movs	r0, #0
 8023300:	f7f7 f886 	bl	801a410 <lv_disp_get_dpi>
 8023304:	4603      	mov	r3, r0
 8023306:	3328      	adds	r3, #40	; 0x28
 8023308:	005b      	lsls	r3, r3, #1
 802330a:	4a35      	ldr	r2, [pc, #212]	; (80233e0 <textarea_init+0x13c>)
 802330c:	fb82 1203 	smull	r1, r2, r2, r3
 8023310:	1192      	asrs	r2, r2, #6
 8023312:	17db      	asrs	r3, r3, #31
 8023314:	1ad3      	subs	r3, r2, r3
 8023316:	b21b      	sxth	r3, r3
 8023318:	e000      	b.n	802331c <textarea_init+0x78>
 802331a:	2301      	movs	r3, #1
 802331c:	461a      	mov	r2, r3
 802331e:	2100      	movs	r1, #0
 8023320:	4620      	mov	r0, r4
 8023322:	f7fb fc81 	bl	801ec28 <lv_style_set_border_width>
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
 8023326:	4b2a      	ldr	r3, [pc, #168]	; (80233d0 <textarea_init+0x12c>)
 8023328:	681b      	ldr	r3, [r3, #0]
 802332a:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 802332e:	2000      	movs	r0, #0
 8023330:	f7f7 f86e 	bl	801a410 <lv_disp_get_dpi>
 8023334:	4603      	mov	r3, r0
 8023336:	3350      	adds	r3, #80	; 0x50
 8023338:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802333c:	db0c      	blt.n	8023358 <textarea_init+0xb4>
 802333e:	2000      	movs	r0, #0
 8023340:	f7f7 f866 	bl	801a410 <lv_disp_get_dpi>
 8023344:	4603      	mov	r3, r0
 8023346:	3350      	adds	r3, #80	; 0x50
 8023348:	4a25      	ldr	r2, [pc, #148]	; (80233e0 <textarea_init+0x13c>)
 802334a:	fb82 1203 	smull	r1, r2, r2, r3
 802334e:	1192      	asrs	r2, r2, #6
 8023350:	17db      	asrs	r3, r3, #31
 8023352:	1ad3      	subs	r3, r2, r3
 8023354:	b21b      	sxth	r3, r3
 8023356:	e000      	b.n	802335a <textarea_init+0xb6>
 8023358:	2301      	movs	r3, #1
 802335a:	461a      	mov	r2, r3
 802335c:	2100      	movs	r1, #0
 802335e:	4620      	mov	r0, r4
 8023360:	f7fb fb84 	bl	801ea6c <lv_style_set_pad_left>
    lv_style_set_border_side(&styles->ta_cursor, LV_STATE_DEFAULT, LV_BORDER_SIDE_LEFT);
 8023364:	4b1a      	ldr	r3, [pc, #104]	; (80233d0 <textarea_init+0x12c>)
 8023366:	681b      	ldr	r3, [r3, #0]
 8023368:	33b8      	adds	r3, #184	; 0xb8
 802336a:	2204      	movs	r2, #4
 802336c:	2100      	movs	r1, #0
 802336e:	4618      	mov	r0, r3
 8023370:	f7fb fc73 	bl	801ec5a <lv_style_set_border_side>

    style_init_reset(&styles->ta_placeholder);
 8023374:	4b16      	ldr	r3, [pc, #88]	; (80233d0 <textarea_init+0x12c>)
 8023376:	681b      	ldr	r3, [r3, #0]
 8023378:	33bc      	adds	r3, #188	; 0xbc
 802337a:	4618      	mov	r0, r3
 802337c:	f002 f858 	bl	8025430 <style_init_reset>
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
 8023380:	4b13      	ldr	r3, [pc, #76]	; (80233d0 <textarea_init+0x12c>)
 8023382:	681b      	ldr	r3, [r3, #0]
 8023384:	f103 04bc 	add.w	r4, r3, #188	; 0xbc
                            IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
 8023388:	4b12      	ldr	r3, [pc, #72]	; (80233d4 <textarea_init+0x130>)
 802338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802338c:	f003 0302 	and.w	r3, r3, #2
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
 8023390:	2b00      	cmp	r3, #0
 8023392:	d011      	beq.n	80233b8 <textarea_init+0x114>
                            IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
 8023394:	4b0f      	ldr	r3, [pc, #60]	; (80233d4 <textarea_init+0x130>)
 8023396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023398:	f003 0302 	and.w	r3, r3, #2
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
 802339c:	2b00      	cmp	r3, #0
 802339e:	d005      	beq.n	80233ac <textarea_init+0x108>
 80233a0:	f640 20aa 	movw	r0, #2730	; 0xaaa
 80233a4:	f7fb fa9a 	bl	801e8dc <lv_color_hex3>
 80233a8:	4603      	mov	r3, r0
 80233aa:	e009      	b.n	80233c0 <textarea_init+0x11c>
 80233ac:	f640 1099 	movw	r0, #2457	; 0x999
 80233b0:	f7fb fa94 	bl	801e8dc <lv_color_hex3>
 80233b4:	4603      	mov	r3, r0
 80233b6:	e003      	b.n	80233c0 <textarea_init+0x11c>
 80233b8:	480a      	ldr	r0, [pc, #40]	; (80233e4 <textarea_init+0x140>)
 80233ba:	f7fb fa7b 	bl	801e8b4 <lv_color_hex>
 80233be:	4603      	mov	r3, r0
 80233c0:	461a      	mov	r2, r3
 80233c2:	2100      	movs	r1, #0
 80233c4:	4620      	mov	r0, r4
 80233c6:	f7fb fde3 	bl	801ef90 <lv_style_set_text_color>
#endif
}
 80233ca:	bf00      	nop
 80233cc:	bd98      	pop	{r3, r4, r7, pc}
 80233ce:	bf00      	nop
 80233d0:	20021498 	.word	0x20021498
 80233d4:	2002146c 	.word	0x2002146c
 80233d8:	0031404f 	.word	0x0031404f
 80233dc:	00a5a8ad 	.word	0x00a5a8ad
 80233e0:	66666667 	.word	0x66666667
 80233e4:	00a1adbd 	.word	0x00a1adbd

080233e8 <spinbox_init>:

static void spinbox_init(void)
{
 80233e8:	b598      	push	{r3, r4, r7, lr}
 80233ea:	af00      	add	r7, sp, #0
#if LV_USE_SPINBOX

    style_init_reset(&styles->spinbox_cursor);
 80233ec:	4b3d      	ldr	r3, [pc, #244]	; (80234e4 <spinbox_init+0xfc>)
 80233ee:	681b      	ldr	r3, [r3, #0]
 80233f0:	339c      	adds	r3, #156	; 0x9c
 80233f2:	4618      	mov	r0, r3
 80233f4:	f002 f81c 	bl	8025430 <style_init_reset>
    lv_style_set_bg_opa(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_OPA_COVER);
 80233f8:	4b3a      	ldr	r3, [pc, #232]	; (80234e4 <spinbox_init+0xfc>)
 80233fa:	681b      	ldr	r3, [r3, #0]
 80233fc:	339c      	adds	r3, #156	; 0x9c
 80233fe:	22ff      	movs	r2, #255	; 0xff
 8023400:	2100      	movs	r1, #0
 8023402:	4618      	mov	r0, r3
 8023404:	f7fb fbf8 	bl	801ebf8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, theme.color_primary);
 8023408:	4b36      	ldr	r3, [pc, #216]	; (80234e4 <spinbox_init+0xfc>)
 802340a:	681b      	ldr	r3, [r3, #0]
 802340c:	f103 009c 	add.w	r0, r3, #156	; 0x9c
 8023410:	4b35      	ldr	r3, [pc, #212]	; (80234e8 <spinbox_init+0x100>)
 8023412:	68da      	ldr	r2, [r3, #12]
 8023414:	2100      	movs	r1, #0
 8023416:	f7fb fbd8 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_COLOR_WHITE);
 802341a:	4b32      	ldr	r3, [pc, #200]	; (80234e4 <spinbox_init+0xfc>)
 802341c:	681b      	ldr	r3, [r3, #0]
 802341e:	339c      	adds	r3, #156	; 0x9c
 8023420:	4622      	mov	r2, r4
 8023422:	f042 04ff 	orr.w	r4, r2, #255	; 0xff
 8023426:	4622      	mov	r2, r4
 8023428:	f442 447f 	orr.w	r4, r2, #65280	; 0xff00
 802342c:	4622      	mov	r2, r4
 802342e:	f442 047f 	orr.w	r4, r2, #16711680	; 0xff0000
 8023432:	4622      	mov	r2, r4
 8023434:	f042 447f 	orr.w	r4, r2, #4278190080	; 0xff000000
 8023438:	4622      	mov	r2, r4
 802343a:	2100      	movs	r1, #0
 802343c:	4618      	mov	r0, r3
 802343e:	f7fb fda7 	bl	801ef90 <lv_style_set_text_color>
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
 8023442:	4b28      	ldr	r3, [pc, #160]	; (80234e4 <spinbox_init+0xfc>)
 8023444:	681b      	ldr	r3, [r3, #0]
 8023446:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 802344a:	2000      	movs	r0, #0
 802344c:	f7f6 ffe0 	bl	801a410 <lv_disp_get_dpi>
 8023450:	4603      	mov	r3, r0
 8023452:	461a      	mov	r2, r3
 8023454:	2364      	movs	r3, #100	; 0x64
 8023456:	fb03 f302 	mul.w	r3, r3, r2
 802345a:	3350      	adds	r3, #80	; 0x50
 802345c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023460:	db10      	blt.n	8023484 <spinbox_init+0x9c>
 8023462:	2000      	movs	r0, #0
 8023464:	f7f6 ffd4 	bl	801a410 <lv_disp_get_dpi>
 8023468:	4603      	mov	r3, r0
 802346a:	461a      	mov	r2, r3
 802346c:	2364      	movs	r3, #100	; 0x64
 802346e:	fb03 f302 	mul.w	r3, r3, r2
 8023472:	3350      	adds	r3, #80	; 0x50
 8023474:	4a1d      	ldr	r2, [pc, #116]	; (80234ec <spinbox_init+0x104>)
 8023476:	fb82 1203 	smull	r1, r2, r2, r3
 802347a:	1192      	asrs	r2, r2, #6
 802347c:	17db      	asrs	r3, r3, #31
 802347e:	1ad3      	subs	r3, r2, r3
 8023480:	b21b      	sxth	r3, r3
 8023482:	e000      	b.n	8023486 <spinbox_init+0x9e>
 8023484:	2301      	movs	r3, #1
 8023486:	461a      	mov	r2, r3
 8023488:	2100      	movs	r1, #0
 802348a:	4620      	mov	r0, r4
 802348c:	f7fb fabc 	bl	801ea08 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
 8023490:	4b14      	ldr	r3, [pc, #80]	; (80234e4 <spinbox_init+0xfc>)
 8023492:	681b      	ldr	r3, [r3, #0]
 8023494:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8023498:	2000      	movs	r0, #0
 802349a:	f7f6 ffb9 	bl	801a410 <lv_disp_get_dpi>
 802349e:	4603      	mov	r3, r0
 80234a0:	461a      	mov	r2, r3
 80234a2:	2364      	movs	r3, #100	; 0x64
 80234a4:	fb03 f302 	mul.w	r3, r3, r2
 80234a8:	3350      	adds	r3, #80	; 0x50
 80234aa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80234ae:	db10      	blt.n	80234d2 <spinbox_init+0xea>
 80234b0:	2000      	movs	r0, #0
 80234b2:	f7f6 ffad 	bl	801a410 <lv_disp_get_dpi>
 80234b6:	4603      	mov	r3, r0
 80234b8:	461a      	mov	r2, r3
 80234ba:	2364      	movs	r3, #100	; 0x64
 80234bc:	fb03 f302 	mul.w	r3, r3, r2
 80234c0:	3350      	adds	r3, #80	; 0x50
 80234c2:	4a0a      	ldr	r2, [pc, #40]	; (80234ec <spinbox_init+0x104>)
 80234c4:	fb82 1203 	smull	r1, r2, r2, r3
 80234c8:	1192      	asrs	r2, r2, #6
 80234ca:	17db      	asrs	r3, r3, #31
 80234cc:	1ad3      	subs	r3, r2, r3
 80234ce:	b21b      	sxth	r3, r3
 80234d0:	e000      	b.n	80234d4 <spinbox_init+0xec>
 80234d2:	2301      	movs	r3, #1
 80234d4:	461a      	mov	r2, r3
 80234d6:	2100      	movs	r1, #0
 80234d8:	4620      	mov	r0, r4
 80234da:	f7fb faae 	bl	801ea3a <lv_style_set_pad_bottom>

#endif
}
 80234de:	bf00      	nop
 80234e0:	bd98      	pop	{r3, r4, r7, pc}
 80234e2:	bf00      	nop
 80234e4:	20021498 	.word	0x20021498
 80234e8:	2002146c 	.word	0x2002146c
 80234ec:	66666667 	.word	0x66666667

080234f0 <list_init>:

static void list_init(void)
{
 80234f0:	b598      	push	{r3, r4, r7, lr}
 80234f2:	af00      	add	r7, sp, #0
#if LV_USE_LIST != 0
    style_init_reset(&styles->list_bg);
 80234f4:	4bab      	ldr	r3, [pc, #684]	; (80237a4 <list_init+0x2b4>)
 80234f6:	681b      	ldr	r3, [r3, #0]
 80234f8:	3378      	adds	r3, #120	; 0x78
 80234fa:	4618      	mov	r0, r3
 80234fc:	f001 ff98 	bl	8025430 <style_init_reset>
    lv_style_set_clip_corner(&styles->list_bg, LV_STATE_DEFAULT, true);
 8023500:	4ba8      	ldr	r3, [pc, #672]	; (80237a4 <list_init+0x2b4>)
 8023502:	681b      	ldr	r3, [r3, #0]
 8023504:	3378      	adds	r3, #120	; 0x78
 8023506:	2201      	movs	r2, #1
 8023508:	2100      	movs	r1, #0
 802350a:	4618      	mov	r0, r3
 802350c:	f7fb fa31 	bl	801e972 <lv_style_set_clip_corner>
    lv_style_set_pad_left(&styles->list_bg, LV_STATE_DEFAULT, 0);
 8023510:	4ba4      	ldr	r3, [pc, #656]	; (80237a4 <list_init+0x2b4>)
 8023512:	681b      	ldr	r3, [r3, #0]
 8023514:	3378      	adds	r3, #120	; 0x78
 8023516:	2200      	movs	r2, #0
 8023518:	2100      	movs	r1, #0
 802351a:	4618      	mov	r0, r3
 802351c:	f7fb faa6 	bl	801ea6c <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->list_bg, LV_STATE_DEFAULT, 0);
 8023520:	4ba0      	ldr	r3, [pc, #640]	; (80237a4 <list_init+0x2b4>)
 8023522:	681b      	ldr	r3, [r3, #0]
 8023524:	3378      	adds	r3, #120	; 0x78
 8023526:	2200      	movs	r2, #0
 8023528:	2100      	movs	r1, #0
 802352a:	4618      	mov	r0, r3
 802352c:	f7fb fab7 	bl	801ea9e <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->list_bg, LV_STATE_DEFAULT, 0);
 8023530:	4b9c      	ldr	r3, [pc, #624]	; (80237a4 <list_init+0x2b4>)
 8023532:	681b      	ldr	r3, [r3, #0]
 8023534:	3378      	adds	r3, #120	; 0x78
 8023536:	2200      	movs	r2, #0
 8023538:	2100      	movs	r1, #0
 802353a:	4618      	mov	r0, r3
 802353c:	f7fb fa64 	bl	801ea08 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->list_bg, LV_STATE_DEFAULT, 0);
 8023540:	4b98      	ldr	r3, [pc, #608]	; (80237a4 <list_init+0x2b4>)
 8023542:	681b      	ldr	r3, [r3, #0]
 8023544:	3378      	adds	r3, #120	; 0x78
 8023546:	2200      	movs	r2, #0
 8023548:	2100      	movs	r1, #0
 802354a:	4618      	mov	r0, r3
 802354c:	f7fb fa75 	bl	801ea3a <lv_style_set_pad_bottom>
    lv_style_set_pad_inner(&styles->list_bg, LV_STATE_DEFAULT, 0);
 8023550:	4b94      	ldr	r3, [pc, #592]	; (80237a4 <list_init+0x2b4>)
 8023552:	681b      	ldr	r3, [r3, #0]
 8023554:	3378      	adds	r3, #120	; 0x78
 8023556:	2200      	movs	r2, #0
 8023558:	2100      	movs	r1, #0
 802355a:	4618      	mov	r0, r3
 802355c:	f7fb fab8 	bl	801ead0 <lv_style_set_pad_inner>

    style_init_reset(&styles->list_btn);
 8023560:	4b90      	ldr	r3, [pc, #576]	; (80237a4 <list_init+0x2b4>)
 8023562:	681b      	ldr	r3, [r3, #0]
 8023564:	337c      	adds	r3, #124	; 0x7c
 8023566:	4618      	mov	r0, r3
 8023568:	f001 ff62 	bl	8025430 <style_init_reset>
    lv_style_set_bg_opa(&styles->list_btn, LV_STATE_DEFAULT, LV_OPA_COVER);
 802356c:	4b8d      	ldr	r3, [pc, #564]	; (80237a4 <list_init+0x2b4>)
 802356e:	681b      	ldr	r3, [r3, #0]
 8023570:	337c      	adds	r3, #124	; 0x7c
 8023572:	22ff      	movs	r2, #255	; 0xff
 8023574:	2100      	movs	r1, #0
 8023576:	4618      	mov	r0, r3
 8023578:	f7fb fb3e 	bl	801ebf8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG);
 802357c:	4b89      	ldr	r3, [pc, #548]	; (80237a4 <list_init+0x2b4>)
 802357e:	681b      	ldr	r3, [r3, #0]
 8023580:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023584:	4b88      	ldr	r3, [pc, #544]	; (80237a8 <list_init+0x2b8>)
 8023586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023588:	f003 0302 	and.w	r3, r3, #2
 802358c:	2b00      	cmp	r3, #0
 802358e:	d005      	beq.n	802359c <list_init+0xac>
 8023590:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023594:	f7fb f98e 	bl	801e8b4 <lv_color_hex>
 8023598:	4603      	mov	r3, r0
 802359a:	e003      	b.n	80235a4 <list_init+0xb4>
 802359c:	4883      	ldr	r0, [pc, #524]	; (80237ac <list_init+0x2bc>)
 802359e:	f7fb f989 	bl	801e8b4 <lv_color_hex>
 80235a2:	4603      	mov	r3, r0
 80235a4:	461a      	mov	r2, r3
 80235a6:	2100      	movs	r1, #0
 80235a8:	4620      	mov	r0, r4
 80235aa:	f7fb fb0e 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_PRESSED, COLOR_BG_PR);
 80235ae:	4b7d      	ldr	r3, [pc, #500]	; (80237a4 <list_init+0x2b4>)
 80235b0:	681b      	ldr	r3, [r3, #0]
 80235b2:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80235b6:	4b7c      	ldr	r3, [pc, #496]	; (80237a8 <list_init+0x2b8>)
 80235b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80235ba:	f003 0302 	and.w	r3, r3, #2
 80235be:	2b00      	cmp	r3, #0
 80235c0:	d004      	beq.n	80235cc <list_init+0xdc>
 80235c2:	487b      	ldr	r0, [pc, #492]	; (80237b0 <list_init+0x2c0>)
 80235c4:	f7fb f976 	bl	801e8b4 <lv_color_hex>
 80235c8:	4603      	mov	r3, r0
 80235ca:	e003      	b.n	80235d4 <list_init+0xe4>
 80235cc:	4879      	ldr	r0, [pc, #484]	; (80237b4 <list_init+0x2c4>)
 80235ce:	f7fb f971 	bl	801e8b4 <lv_color_hex>
 80235d2:	4603      	mov	r3, r0
 80235d4:	461a      	mov	r2, r3
 80235d6:	2110      	movs	r1, #16
 80235d8:	4620      	mov	r0, r4
 80235da:	f7fb faf6 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_DIS);
 80235de:	4b71      	ldr	r3, [pc, #452]	; (80237a4 <list_init+0x2b4>)
 80235e0:	681b      	ldr	r3, [r3, #0]
 80235e2:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80235e6:	4b70      	ldr	r3, [pc, #448]	; (80237a8 <list_init+0x2b8>)
 80235e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80235ea:	f003 0302 	and.w	r3, r3, #2
 80235ee:	2b00      	cmp	r3, #0
 80235f0:	d005      	beq.n	80235fe <list_init+0x10e>
 80235f2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80235f6:	f7fb f95d 	bl	801e8b4 <lv_color_hex>
 80235fa:	4603      	mov	r3, r0
 80235fc:	e003      	b.n	8023606 <list_init+0x116>
 80235fe:	486b      	ldr	r0, [pc, #428]	; (80237ac <list_init+0x2bc>)
 8023600:	f7fb f958 	bl	801e8b4 <lv_color_hex>
 8023604:	4603      	mov	r3, r0
 8023606:	461a      	mov	r2, r3
 8023608:	2120      	movs	r1, #32
 802360a:	4620      	mov	r0, r4
 802360c:	f7fb fadd 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_CHK);
 8023610:	4b64      	ldr	r3, [pc, #400]	; (80237a4 <list_init+0x2b4>)
 8023612:	681b      	ldr	r3, [r3, #0]
 8023614:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8023618:	4b63      	ldr	r3, [pc, #396]	; (80237a8 <list_init+0x2b8>)
 802361a:	68da      	ldr	r2, [r3, #12]
 802361c:	2101      	movs	r1, #1
 802361e:	f7fb fad4 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BG_PR_CHK);
 8023622:	4b60      	ldr	r3, [pc, #384]	; (80237a4 <list_init+0x2b4>)
 8023624:	681b      	ldr	r3, [r3, #0]
 8023626:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 802362a:	4b5f      	ldr	r3, [pc, #380]	; (80237a8 <list_init+0x2b8>)
 802362c:	2133      	movs	r1, #51	; 0x33
 802362e:	68d8      	ldr	r0, [r3, #12]
 8023630:	f7f8 fa6c 	bl	801bb0c <lv_color_darken>
 8023634:	4603      	mov	r3, r0
 8023636:	461a      	mov	r2, r3
 8023638:	2111      	movs	r1, #17
 802363a:	4620      	mov	r0, r4
 802363c:	f7fb fac5 	bl	801ebca <lv_style_set_bg_color>

    lv_style_set_text_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 8023640:	4b58      	ldr	r3, [pc, #352]	; (80237a4 <list_init+0x2b4>)
 8023642:	681b      	ldr	r3, [r3, #0]
 8023644:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023648:	4b57      	ldr	r3, [pc, #348]	; (80237a8 <list_init+0x2b8>)
 802364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802364c:	f003 0302 	and.w	r3, r3, #2
 8023650:	2b00      	cmp	r3, #0
 8023652:	d004      	beq.n	802365e <list_init+0x16e>
 8023654:	4858      	ldr	r0, [pc, #352]	; (80237b8 <list_init+0x2c8>)
 8023656:	f7fb f92d 	bl	801e8b4 <lv_color_hex>
 802365a:	4603      	mov	r3, r0
 802365c:	e004      	b.n	8023668 <list_init+0x178>
 802365e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023662:	f7fb f927 	bl	801e8b4 <lv_color_hex>
 8023666:	4603      	mov	r3, r0
 8023668:	461a      	mov	r2, r3
 802366a:	2100      	movs	r1, #0
 802366c:	4620      	mov	r0, r4
 802366e:	f7fb fc8f 	bl	801ef90 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
 8023672:	4b4c      	ldr	r3, [pc, #304]	; (80237a4 <list_init+0x2b4>)
 8023674:	681b      	ldr	r3, [r3, #0]
 8023676:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 802367a:	4b4b      	ldr	r3, [pc, #300]	; (80237a8 <list_init+0x2b8>)
 802367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802367e:	f003 0302 	and.w	r3, r3, #2
 8023682:	2b00      	cmp	r3, #0
 8023684:	d005      	beq.n	8023692 <list_init+0x1a2>
 8023686:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 802368a:	f7fb f913 	bl	801e8b4 <lv_color_hex>
 802368e:	4603      	mov	r3, r0
 8023690:	e004      	b.n	802369c <list_init+0x1ac>
 8023692:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023696:	f7fb f90d 	bl	801e8b4 <lv_color_hex>
 802369a:	4603      	mov	r3, r0
 802369c:	461a      	mov	r2, r3
 802369e:	2101      	movs	r1, #1
 80236a0:	4620      	mov	r0, r4
 80236a2:	f7fb fc75 	bl	801ef90 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 80236a6:	4b3f      	ldr	r3, [pc, #252]	; (80237a4 <list_init+0x2b4>)
 80236a8:	681b      	ldr	r3, [r3, #0]
 80236aa:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80236ae:	4b3e      	ldr	r3, [pc, #248]	; (80237a8 <list_init+0x2b8>)
 80236b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80236b2:	f003 0302 	and.w	r3, r3, #2
 80236b6:	2b00      	cmp	r3, #0
 80236b8:	d005      	beq.n	80236c6 <list_init+0x1d6>
 80236ba:	f640 20aa 	movw	r0, #2730	; 0xaaa
 80236be:	f7fb f90d 	bl	801e8dc <lv_color_hex3>
 80236c2:	4603      	mov	r3, r0
 80236c4:	e004      	b.n	80236d0 <list_init+0x1e0>
 80236c6:	f640 1099 	movw	r0, #2457	; 0x999
 80236ca:	f7fb f907 	bl	801e8dc <lv_color_hex3>
 80236ce:	4603      	mov	r3, r0
 80236d0:	461a      	mov	r2, r3
 80236d2:	2120      	movs	r1, #32
 80236d4:	4620      	mov	r0, r4
 80236d6:	f7fb fc5b 	bl	801ef90 <lv_style_set_text_color>

    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
 80236da:	4b32      	ldr	r3, [pc, #200]	; (80237a4 <list_init+0x2b4>)
 80236dc:	681b      	ldr	r3, [r3, #0]
 80236de:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80236e2:	4b31      	ldr	r3, [pc, #196]	; (80237a8 <list_init+0x2b8>)
 80236e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80236e6:	f003 0302 	and.w	r3, r3, #2
 80236ea:	2b00      	cmp	r3, #0
 80236ec:	d004      	beq.n	80236f8 <list_init+0x208>
 80236ee:	4832      	ldr	r0, [pc, #200]	; (80237b8 <list_init+0x2c8>)
 80236f0:	f7fb f8e0 	bl	801e8b4 <lv_color_hex>
 80236f4:	4603      	mov	r3, r0
 80236f6:	e004      	b.n	8023702 <list_init+0x212>
 80236f8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80236fc:	f7fb f8da 	bl	801e8b4 <lv_color_hex>
 8023700:	4603      	mov	r3, r0
 8023702:	461a      	mov	r2, r3
 8023704:	2100      	movs	r1, #0
 8023706:	4620      	mov	r0, r4
 8023708:	f7fb fd26 	bl	801f158 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
 802370c:	4b25      	ldr	r3, [pc, #148]	; (80237a4 <list_init+0x2b4>)
 802370e:	681b      	ldr	r3, [r3, #0]
 8023710:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023714:	4b24      	ldr	r3, [pc, #144]	; (80237a8 <list_init+0x2b8>)
 8023716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023718:	f003 0302 	and.w	r3, r3, #2
 802371c:	2b00      	cmp	r3, #0
 802371e:	d005      	beq.n	802372c <list_init+0x23c>
 8023720:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023724:	f7fb f8c6 	bl	801e8b4 <lv_color_hex>
 8023728:	4603      	mov	r3, r0
 802372a:	e004      	b.n	8023736 <list_init+0x246>
 802372c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023730:	f7fb f8c0 	bl	801e8b4 <lv_color_hex>
 8023734:	4603      	mov	r3, r0
 8023736:	461a      	mov	r2, r3
 8023738:	2101      	movs	r1, #1
 802373a:	4620      	mov	r0, r4
 802373c:	f7fb fd0c 	bl	801f158 <lv_style_set_image_recolor>
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
 8023740:	4b18      	ldr	r3, [pc, #96]	; (80237a4 <list_init+0x2b4>)
 8023742:	681b      	ldr	r3, [r3, #0]
 8023744:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023748:	4b17      	ldr	r3, [pc, #92]	; (80237a8 <list_init+0x2b8>)
 802374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802374c:	f003 0302 	and.w	r3, r3, #2
 8023750:	2b00      	cmp	r3, #0
 8023752:	d005      	beq.n	8023760 <list_init+0x270>
 8023754:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8023758:	f7fb f8c0 	bl	801e8dc <lv_color_hex3>
 802375c:	4603      	mov	r3, r0
 802375e:	e004      	b.n	802376a <list_init+0x27a>
 8023760:	f640 1099 	movw	r0, #2457	; 0x999
 8023764:	f7fb f8ba 	bl	801e8dc <lv_color_hex3>
 8023768:	4603      	mov	r3, r0
 802376a:	461a      	mov	r2, r3
 802376c:	2120      	movs	r1, #32
 802376e:	4620      	mov	r0, r4
 8023770:	f7fb fcf2 	bl	801f158 <lv_style_set_image_recolor>

    lv_style_set_border_side(&styles->list_btn, LV_STATE_DEFAULT, LV_BORDER_SIDE_BOTTOM);
 8023774:	4b0b      	ldr	r3, [pc, #44]	; (80237a4 <list_init+0x2b4>)
 8023776:	681b      	ldr	r3, [r3, #0]
 8023778:	337c      	adds	r3, #124	; 0x7c
 802377a:	2201      	movs	r2, #1
 802377c:	2100      	movs	r1, #0
 802377e:	4618      	mov	r0, r3
 8023780:	f7fb fa6b 	bl	801ec5a <lv_style_set_border_side>
    lv_style_set_border_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 8023784:	4b07      	ldr	r3, [pc, #28]	; (80237a4 <list_init+0x2b4>)
 8023786:	681b      	ldr	r3, [r3, #0]
 8023788:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 802378c:	4b06      	ldr	r3, [pc, #24]	; (80237a8 <list_init+0x2b8>)
 802378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023790:	f003 0302 	and.w	r3, r3, #2
 8023794:	2b00      	cmp	r3, #0
 8023796:	d013      	beq.n	80237c0 <list_init+0x2d0>
 8023798:	4808      	ldr	r0, [pc, #32]	; (80237bc <list_init+0x2cc>)
 802379a:	f7fb f88b 	bl	801e8b4 <lv_color_hex>
 802379e:	4603      	mov	r3, r0
 80237a0:	e012      	b.n	80237c8 <list_init+0x2d8>
 80237a2:	bf00      	nop
 80237a4:	20021498 	.word	0x20021498
 80237a8:	2002146c 	.word	0x2002146c
 80237ac:	00586273 	.word	0x00586273
 80237b0:	00eeeeee 	.word	0x00eeeeee
 80237b4:	00494f57 	.word	0x00494f57
 80237b8:	003b3e42 	.word	0x003b3e42
 80237bc:	00d6dde3 	.word	0x00d6dde3
 80237c0:	48cf      	ldr	r0, [pc, #828]	; (8023b00 <list_init+0x610>)
 80237c2:	f7fb f877 	bl	801e8b4 <lv_color_hex>
 80237c6:	4603      	mov	r3, r0
 80237c8:	461a      	mov	r2, r3
 80237ca:	2100      	movs	r1, #0
 80237cc:	4620      	mov	r0, r4
 80237ce:	f7fb fa76 	bl	801ecbe <lv_style_set_border_color>
    lv_style_set_border_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_primary);
 80237d2:	4bcc      	ldr	r3, [pc, #816]	; (8023b04 <list_init+0x614>)
 80237d4:	681b      	ldr	r3, [r3, #0]
 80237d6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80237da:	4bcb      	ldr	r3, [pc, #812]	; (8023b08 <list_init+0x618>)
 80237dc:	68da      	ldr	r2, [r3, #12]
 80237de:	2102      	movs	r1, #2
 80237e0:	f7fb fa6d 	bl	801ecbe <lv_style_set_border_color>
    lv_style_set_border_width(&styles->list_btn, LV_STATE_DEFAULT, 1);
 80237e4:	4bc7      	ldr	r3, [pc, #796]	; (8023b04 <list_init+0x614>)
 80237e6:	681b      	ldr	r3, [r3, #0]
 80237e8:	337c      	adds	r3, #124	; 0x7c
 80237ea:	2201      	movs	r2, #1
 80237ec:	2100      	movs	r1, #0
 80237ee:	4618      	mov	r0, r3
 80237f0:	f7fb fa1a 	bl	801ec28 <lv_style_set_border_width>

    lv_style_set_outline_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_secondary);
 80237f4:	4bc3      	ldr	r3, [pc, #780]	; (8023b04 <list_init+0x614>)
 80237f6:	681b      	ldr	r3, [r3, #0]
 80237f8:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80237fc:	4bc2      	ldr	r3, [pc, #776]	; (8023b08 <list_init+0x618>)
 80237fe:	691a      	ldr	r2, [r3, #16]
 8023800:	2102      	movs	r1, #2
 8023802:	f7fb fabd 	bl	801ed80 <lv_style_set_outline_color>
    lv_style_set_outline_width(&styles->list_btn, LV_STATE_FOCUSED, OUTLINE_WIDTH);
 8023806:	4bbf      	ldr	r3, [pc, #764]	; (8023b04 <list_init+0x614>)
 8023808:	681b      	ldr	r3, [r3, #0]
 802380a:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 802380e:	4bbe      	ldr	r3, [pc, #760]	; (8023b08 <list_init+0x618>)
 8023810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023812:	f003 0320 	and.w	r3, r3, #32
 8023816:	2b00      	cmp	r3, #0
 8023818:	d118      	bne.n	802384c <list_init+0x35c>
 802381a:	2000      	movs	r0, #0
 802381c:	f7f6 fdf8 	bl	801a410 <lv_disp_get_dpi>
 8023820:	4603      	mov	r3, r0
 8023822:	3328      	adds	r3, #40	; 0x28
 8023824:	005b      	lsls	r3, r3, #1
 8023826:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802382a:	db0d      	blt.n	8023848 <list_init+0x358>
 802382c:	2000      	movs	r0, #0
 802382e:	f7f6 fdef 	bl	801a410 <lv_disp_get_dpi>
 8023832:	4603      	mov	r3, r0
 8023834:	3328      	adds	r3, #40	; 0x28
 8023836:	005b      	lsls	r3, r3, #1
 8023838:	4ab4      	ldr	r2, [pc, #720]	; (8023b0c <list_init+0x61c>)
 802383a:	fb82 1203 	smull	r1, r2, r2, r3
 802383e:	1192      	asrs	r2, r2, #6
 8023840:	17db      	asrs	r3, r3, #31
 8023842:	1ad3      	subs	r3, r2, r3
 8023844:	b21b      	sxth	r3, r3
 8023846:	e002      	b.n	802384e <list_init+0x35e>
 8023848:	2301      	movs	r3, #1
 802384a:	e000      	b.n	802384e <list_init+0x35e>
 802384c:	2300      	movs	r3, #0
 802384e:	461a      	mov	r2, r3
 8023850:	2102      	movs	r1, #2
 8023852:	4620      	mov	r0, r4
 8023854:	f7fb fa62 	bl	801ed1c <lv_style_set_outline_width>
    lv_style_set_outline_pad(&styles->list_btn, LV_STATE_FOCUSED, -BORDER_WIDTH);
 8023858:	4baa      	ldr	r3, [pc, #680]	; (8023b04 <list_init+0x614>)
 802385a:	681b      	ldr	r3, [r3, #0]
 802385c:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023860:	2000      	movs	r0, #0
 8023862:	f7f6 fdd5 	bl	801a410 <lv_disp_get_dpi>
 8023866:	4603      	mov	r3, r0
 8023868:	3328      	adds	r3, #40	; 0x28
 802386a:	005b      	lsls	r3, r3, #1
 802386c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023870:	db0d      	blt.n	802388e <list_init+0x39e>
 8023872:	2000      	movs	r0, #0
 8023874:	f7f6 fdcc 	bl	801a410 <lv_disp_get_dpi>
 8023878:	4603      	mov	r3, r0
 802387a:	3328      	adds	r3, #40	; 0x28
 802387c:	005b      	lsls	r3, r3, #1
 802387e:	4aa3      	ldr	r2, [pc, #652]	; (8023b0c <list_init+0x61c>)
 8023880:	fb82 1203 	smull	r1, r2, r2, r3
 8023884:	1192      	asrs	r2, r2, #6
 8023886:	17db      	asrs	r3, r3, #31
 8023888:	1a9b      	subs	r3, r3, r2
 802388a:	b21b      	sxth	r3, r3
 802388c:	e001      	b.n	8023892 <list_init+0x3a2>
 802388e:	f04f 33ff 	mov.w	r3, #4294967295
 8023892:	461a      	mov	r2, r3
 8023894:	2102      	movs	r1, #2
 8023896:	4620      	mov	r0, r4
 8023898:	f7fb fa59 	bl	801ed4e <lv_style_set_outline_pad>

    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 802389c:	4b99      	ldr	r3, [pc, #612]	; (8023b04 <list_init+0x614>)
 802389e:	681b      	ldr	r3, [r3, #0]
 80238a0:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80238a4:	2000      	movs	r0, #0
 80238a6:	f7f6 fdcc 	bl	801a442 <lv_disp_get_size_category>
 80238aa:	4603      	mov	r3, r0
 80238ac:	2b01      	cmp	r3, #1
 80238ae:	d81e      	bhi.n	80238ee <list_init+0x3fe>
 80238b0:	2000      	movs	r0, #0
 80238b2:	f7f6 fdad 	bl	801a410 <lv_disp_get_dpi>
 80238b6:	4603      	mov	r3, r0
 80238b8:	461a      	mov	r2, r3
 80238ba:	4613      	mov	r3, r2
 80238bc:	011b      	lsls	r3, r3, #4
 80238be:	1a9b      	subs	r3, r3, r2
 80238c0:	3350      	adds	r3, #80	; 0x50
 80238c2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80238c6:	db10      	blt.n	80238ea <list_init+0x3fa>
 80238c8:	2000      	movs	r0, #0
 80238ca:	f7f6 fda1 	bl	801a410 <lv_disp_get_dpi>
 80238ce:	4603      	mov	r3, r0
 80238d0:	461a      	mov	r2, r3
 80238d2:	4613      	mov	r3, r2
 80238d4:	011b      	lsls	r3, r3, #4
 80238d6:	1a9b      	subs	r3, r3, r2
 80238d8:	3350      	adds	r3, #80	; 0x50
 80238da:	4a8c      	ldr	r2, [pc, #560]	; (8023b0c <list_init+0x61c>)
 80238dc:	fb82 1203 	smull	r1, r2, r2, r3
 80238e0:	1192      	asrs	r2, r2, #6
 80238e2:	17db      	asrs	r3, r3, #31
 80238e4:	1ad3      	subs	r3, r2, r3
 80238e6:	b21b      	sxth	r3, r3
 80238e8:	e021      	b.n	802392e <list_init+0x43e>
 80238ea:	2301      	movs	r3, #1
 80238ec:	e01f      	b.n	802392e <list_init+0x43e>
 80238ee:	2000      	movs	r0, #0
 80238f0:	f7f6 fd8e 	bl	801a410 <lv_disp_get_dpi>
 80238f4:	4603      	mov	r3, r0
 80238f6:	461a      	mov	r2, r3
 80238f8:	4613      	mov	r3, r2
 80238fa:	011b      	lsls	r3, r3, #4
 80238fc:	1a9b      	subs	r3, r3, r2
 80238fe:	005b      	lsls	r3, r3, #1
 8023900:	3350      	adds	r3, #80	; 0x50
 8023902:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023906:	db11      	blt.n	802392c <list_init+0x43c>
 8023908:	2000      	movs	r0, #0
 802390a:	f7f6 fd81 	bl	801a410 <lv_disp_get_dpi>
 802390e:	4603      	mov	r3, r0
 8023910:	461a      	mov	r2, r3
 8023912:	4613      	mov	r3, r2
 8023914:	011b      	lsls	r3, r3, #4
 8023916:	1a9b      	subs	r3, r3, r2
 8023918:	005b      	lsls	r3, r3, #1
 802391a:	3350      	adds	r3, #80	; 0x50
 802391c:	4a7b      	ldr	r2, [pc, #492]	; (8023b0c <list_init+0x61c>)
 802391e:	fb82 1203 	smull	r1, r2, r2, r3
 8023922:	1192      	asrs	r2, r2, #6
 8023924:	17db      	asrs	r3, r3, #31
 8023926:	1ad3      	subs	r3, r2, r3
 8023928:	b21b      	sxth	r3, r3
 802392a:	e000      	b.n	802392e <list_init+0x43e>
 802392c:	2301      	movs	r3, #1
 802392e:	461a      	mov	r2, r3
 8023930:	2100      	movs	r1, #0
 8023932:	4620      	mov	r0, r4
 8023934:	f7fb f89a 	bl	801ea6c <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 8023938:	4b72      	ldr	r3, [pc, #456]	; (8023b04 <list_init+0x614>)
 802393a:	681b      	ldr	r3, [r3, #0]
 802393c:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023940:	2000      	movs	r0, #0
 8023942:	f7f6 fd7e 	bl	801a442 <lv_disp_get_size_category>
 8023946:	4603      	mov	r3, r0
 8023948:	2b01      	cmp	r3, #1
 802394a:	d81e      	bhi.n	802398a <list_init+0x49a>
 802394c:	2000      	movs	r0, #0
 802394e:	f7f6 fd5f 	bl	801a410 <lv_disp_get_dpi>
 8023952:	4603      	mov	r3, r0
 8023954:	461a      	mov	r2, r3
 8023956:	4613      	mov	r3, r2
 8023958:	011b      	lsls	r3, r3, #4
 802395a:	1a9b      	subs	r3, r3, r2
 802395c:	3350      	adds	r3, #80	; 0x50
 802395e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023962:	db10      	blt.n	8023986 <list_init+0x496>
 8023964:	2000      	movs	r0, #0
 8023966:	f7f6 fd53 	bl	801a410 <lv_disp_get_dpi>
 802396a:	4603      	mov	r3, r0
 802396c:	461a      	mov	r2, r3
 802396e:	4613      	mov	r3, r2
 8023970:	011b      	lsls	r3, r3, #4
 8023972:	1a9b      	subs	r3, r3, r2
 8023974:	3350      	adds	r3, #80	; 0x50
 8023976:	4a65      	ldr	r2, [pc, #404]	; (8023b0c <list_init+0x61c>)
 8023978:	fb82 1203 	smull	r1, r2, r2, r3
 802397c:	1192      	asrs	r2, r2, #6
 802397e:	17db      	asrs	r3, r3, #31
 8023980:	1ad3      	subs	r3, r2, r3
 8023982:	b21b      	sxth	r3, r3
 8023984:	e021      	b.n	80239ca <list_init+0x4da>
 8023986:	2301      	movs	r3, #1
 8023988:	e01f      	b.n	80239ca <list_init+0x4da>
 802398a:	2000      	movs	r0, #0
 802398c:	f7f6 fd40 	bl	801a410 <lv_disp_get_dpi>
 8023990:	4603      	mov	r3, r0
 8023992:	461a      	mov	r2, r3
 8023994:	4613      	mov	r3, r2
 8023996:	011b      	lsls	r3, r3, #4
 8023998:	1a9b      	subs	r3, r3, r2
 802399a:	005b      	lsls	r3, r3, #1
 802399c:	3350      	adds	r3, #80	; 0x50
 802399e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80239a2:	db11      	blt.n	80239c8 <list_init+0x4d8>
 80239a4:	2000      	movs	r0, #0
 80239a6:	f7f6 fd33 	bl	801a410 <lv_disp_get_dpi>
 80239aa:	4603      	mov	r3, r0
 80239ac:	461a      	mov	r2, r3
 80239ae:	4613      	mov	r3, r2
 80239b0:	011b      	lsls	r3, r3, #4
 80239b2:	1a9b      	subs	r3, r3, r2
 80239b4:	005b      	lsls	r3, r3, #1
 80239b6:	3350      	adds	r3, #80	; 0x50
 80239b8:	4a54      	ldr	r2, [pc, #336]	; (8023b0c <list_init+0x61c>)
 80239ba:	fb82 1203 	smull	r1, r2, r2, r3
 80239be:	1192      	asrs	r2, r2, #6
 80239c0:	17db      	asrs	r3, r3, #31
 80239c2:	1ad3      	subs	r3, r2, r3
 80239c4:	b21b      	sxth	r3, r3
 80239c6:	e000      	b.n	80239ca <list_init+0x4da>
 80239c8:	2301      	movs	r3, #1
 80239ca:	461a      	mov	r2, r3
 80239cc:	2100      	movs	r1, #0
 80239ce:	4620      	mov	r0, r4
 80239d0:	f7fb f865 	bl	801ea9e <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 80239d4:	4b4b      	ldr	r3, [pc, #300]	; (8023b04 <list_init+0x614>)
 80239d6:	681b      	ldr	r3, [r3, #0]
 80239d8:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80239dc:	2000      	movs	r0, #0
 80239de:	f7f6 fd30 	bl	801a442 <lv_disp_get_size_category>
 80239e2:	4603      	mov	r3, r0
 80239e4:	2b01      	cmp	r3, #1
 80239e6:	d81e      	bhi.n	8023a26 <list_init+0x536>
 80239e8:	2000      	movs	r0, #0
 80239ea:	f7f6 fd11 	bl	801a410 <lv_disp_get_dpi>
 80239ee:	4603      	mov	r3, r0
 80239f0:	461a      	mov	r2, r3
 80239f2:	4613      	mov	r3, r2
 80239f4:	011b      	lsls	r3, r3, #4
 80239f6:	1a9b      	subs	r3, r3, r2
 80239f8:	3350      	adds	r3, #80	; 0x50
 80239fa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80239fe:	db10      	blt.n	8023a22 <list_init+0x532>
 8023a00:	2000      	movs	r0, #0
 8023a02:	f7f6 fd05 	bl	801a410 <lv_disp_get_dpi>
 8023a06:	4603      	mov	r3, r0
 8023a08:	461a      	mov	r2, r3
 8023a0a:	4613      	mov	r3, r2
 8023a0c:	011b      	lsls	r3, r3, #4
 8023a0e:	1a9b      	subs	r3, r3, r2
 8023a10:	3350      	adds	r3, #80	; 0x50
 8023a12:	4a3e      	ldr	r2, [pc, #248]	; (8023b0c <list_init+0x61c>)
 8023a14:	fb82 1203 	smull	r1, r2, r2, r3
 8023a18:	1192      	asrs	r2, r2, #6
 8023a1a:	17db      	asrs	r3, r3, #31
 8023a1c:	1ad3      	subs	r3, r2, r3
 8023a1e:	b21b      	sxth	r3, r3
 8023a20:	e021      	b.n	8023a66 <list_init+0x576>
 8023a22:	2301      	movs	r3, #1
 8023a24:	e01f      	b.n	8023a66 <list_init+0x576>
 8023a26:	2000      	movs	r0, #0
 8023a28:	f7f6 fcf2 	bl	801a410 <lv_disp_get_dpi>
 8023a2c:	4603      	mov	r3, r0
 8023a2e:	461a      	mov	r2, r3
 8023a30:	4613      	mov	r3, r2
 8023a32:	011b      	lsls	r3, r3, #4
 8023a34:	1a9b      	subs	r3, r3, r2
 8023a36:	005b      	lsls	r3, r3, #1
 8023a38:	3350      	adds	r3, #80	; 0x50
 8023a3a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023a3e:	db11      	blt.n	8023a64 <list_init+0x574>
 8023a40:	2000      	movs	r0, #0
 8023a42:	f7f6 fce5 	bl	801a410 <lv_disp_get_dpi>
 8023a46:	4603      	mov	r3, r0
 8023a48:	461a      	mov	r2, r3
 8023a4a:	4613      	mov	r3, r2
 8023a4c:	011b      	lsls	r3, r3, #4
 8023a4e:	1a9b      	subs	r3, r3, r2
 8023a50:	005b      	lsls	r3, r3, #1
 8023a52:	3350      	adds	r3, #80	; 0x50
 8023a54:	4a2d      	ldr	r2, [pc, #180]	; (8023b0c <list_init+0x61c>)
 8023a56:	fb82 1203 	smull	r1, r2, r2, r3
 8023a5a:	1192      	asrs	r2, r2, #6
 8023a5c:	17db      	asrs	r3, r3, #31
 8023a5e:	1ad3      	subs	r3, r2, r3
 8023a60:	b21b      	sxth	r3, r3
 8023a62:	e000      	b.n	8023a66 <list_init+0x576>
 8023a64:	2301      	movs	r3, #1
 8023a66:	461a      	mov	r2, r3
 8023a68:	2100      	movs	r1, #0
 8023a6a:	4620      	mov	r0, r4
 8023a6c:	f7fa ffcc 	bl	801ea08 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 8023a70:	4b24      	ldr	r3, [pc, #144]	; (8023b04 <list_init+0x614>)
 8023a72:	681b      	ldr	r3, [r3, #0]
 8023a74:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023a78:	2000      	movs	r0, #0
 8023a7a:	f7f6 fce2 	bl	801a442 <lv_disp_get_size_category>
 8023a7e:	4603      	mov	r3, r0
 8023a80:	2b01      	cmp	r3, #1
 8023a82:	d81e      	bhi.n	8023ac2 <list_init+0x5d2>
 8023a84:	2000      	movs	r0, #0
 8023a86:	f7f6 fcc3 	bl	801a410 <lv_disp_get_dpi>
 8023a8a:	4603      	mov	r3, r0
 8023a8c:	461a      	mov	r2, r3
 8023a8e:	4613      	mov	r3, r2
 8023a90:	011b      	lsls	r3, r3, #4
 8023a92:	1a9b      	subs	r3, r3, r2
 8023a94:	3350      	adds	r3, #80	; 0x50
 8023a96:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023a9a:	db10      	blt.n	8023abe <list_init+0x5ce>
 8023a9c:	2000      	movs	r0, #0
 8023a9e:	f7f6 fcb7 	bl	801a410 <lv_disp_get_dpi>
 8023aa2:	4603      	mov	r3, r0
 8023aa4:	461a      	mov	r2, r3
 8023aa6:	4613      	mov	r3, r2
 8023aa8:	011b      	lsls	r3, r3, #4
 8023aaa:	1a9b      	subs	r3, r3, r2
 8023aac:	3350      	adds	r3, #80	; 0x50
 8023aae:	4a17      	ldr	r2, [pc, #92]	; (8023b0c <list_init+0x61c>)
 8023ab0:	fb82 1203 	smull	r1, r2, r2, r3
 8023ab4:	1192      	asrs	r2, r2, #6
 8023ab6:	17db      	asrs	r3, r3, #31
 8023ab8:	1ad3      	subs	r3, r2, r3
 8023aba:	b21b      	sxth	r3, r3
 8023abc:	e029      	b.n	8023b12 <list_init+0x622>
 8023abe:	2301      	movs	r3, #1
 8023ac0:	e027      	b.n	8023b12 <list_init+0x622>
 8023ac2:	2000      	movs	r0, #0
 8023ac4:	f7f6 fca4 	bl	801a410 <lv_disp_get_dpi>
 8023ac8:	4603      	mov	r3, r0
 8023aca:	461a      	mov	r2, r3
 8023acc:	4613      	mov	r3, r2
 8023ace:	011b      	lsls	r3, r3, #4
 8023ad0:	1a9b      	subs	r3, r3, r2
 8023ad2:	005b      	lsls	r3, r3, #1
 8023ad4:	3350      	adds	r3, #80	; 0x50
 8023ad6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023ada:	db19      	blt.n	8023b10 <list_init+0x620>
 8023adc:	2000      	movs	r0, #0
 8023ade:	f7f6 fc97 	bl	801a410 <lv_disp_get_dpi>
 8023ae2:	4603      	mov	r3, r0
 8023ae4:	461a      	mov	r2, r3
 8023ae6:	4613      	mov	r3, r2
 8023ae8:	011b      	lsls	r3, r3, #4
 8023aea:	1a9b      	subs	r3, r3, r2
 8023aec:	005b      	lsls	r3, r3, #1
 8023aee:	3350      	adds	r3, #80	; 0x50
 8023af0:	4a06      	ldr	r2, [pc, #24]	; (8023b0c <list_init+0x61c>)
 8023af2:	fb82 1203 	smull	r1, r2, r2, r3
 8023af6:	1192      	asrs	r2, r2, #6
 8023af8:	17db      	asrs	r3, r3, #31
 8023afa:	1ad3      	subs	r3, r2, r3
 8023afc:	b21b      	sxth	r3, r3
 8023afe:	e008      	b.n	8023b12 <list_init+0x622>
 8023b00:	00808a97 	.word	0x00808a97
 8023b04:	20021498 	.word	0x20021498
 8023b08:	2002146c 	.word	0x2002146c
 8023b0c:	66666667 	.word	0x66666667
 8023b10:	2301      	movs	r3, #1
 8023b12:	461a      	mov	r2, r3
 8023b14:	2100      	movs	r1, #0
 8023b16:	4620      	mov	r0, r4
 8023b18:	f7fa ff8f 	bl	801ea3a <lv_style_set_pad_bottom>
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
 8023b1c:	4b9f      	ldr	r3, [pc, #636]	; (8023d9c <list_init+0x8ac>)
 8023b1e:	681b      	ldr	r3, [r3, #0]
 8023b20:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023b24:	2000      	movs	r0, #0
 8023b26:	f7f6 fc8c 	bl	801a442 <lv_disp_get_size_category>
 8023b2a:	4603      	mov	r3, r0
 8023b2c:	2b01      	cmp	r3, #1
 8023b2e:	d81e      	bhi.n	8023b6e <list_init+0x67e>
 8023b30:	2000      	movs	r0, #0
 8023b32:	f7f6 fc6d 	bl	801a410 <lv_disp_get_dpi>
 8023b36:	4603      	mov	r3, r0
 8023b38:	461a      	mov	r2, r3
 8023b3a:	4613      	mov	r3, r2
 8023b3c:	011b      	lsls	r3, r3, #4
 8023b3e:	1a9b      	subs	r3, r3, r2
 8023b40:	3350      	adds	r3, #80	; 0x50
 8023b42:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023b46:	db10      	blt.n	8023b6a <list_init+0x67a>
 8023b48:	2000      	movs	r0, #0
 8023b4a:	f7f6 fc61 	bl	801a410 <lv_disp_get_dpi>
 8023b4e:	4603      	mov	r3, r0
 8023b50:	461a      	mov	r2, r3
 8023b52:	4613      	mov	r3, r2
 8023b54:	011b      	lsls	r3, r3, #4
 8023b56:	1a9b      	subs	r3, r3, r2
 8023b58:	3350      	adds	r3, #80	; 0x50
 8023b5a:	4a91      	ldr	r2, [pc, #580]	; (8023da0 <list_init+0x8b0>)
 8023b5c:	fb82 1203 	smull	r1, r2, r2, r3
 8023b60:	1192      	asrs	r2, r2, #6
 8023b62:	17db      	asrs	r3, r3, #31
 8023b64:	1ad3      	subs	r3, r2, r3
 8023b66:	b21b      	sxth	r3, r3
 8023b68:	e021      	b.n	8023bae <list_init+0x6be>
 8023b6a:	2301      	movs	r3, #1
 8023b6c:	e01f      	b.n	8023bae <list_init+0x6be>
 8023b6e:	2000      	movs	r0, #0
 8023b70:	f7f6 fc4e 	bl	801a410 <lv_disp_get_dpi>
 8023b74:	4603      	mov	r3, r0
 8023b76:	461a      	mov	r2, r3
 8023b78:	4613      	mov	r3, r2
 8023b7a:	011b      	lsls	r3, r3, #4
 8023b7c:	1a9b      	subs	r3, r3, r2
 8023b7e:	005b      	lsls	r3, r3, #1
 8023b80:	3350      	adds	r3, #80	; 0x50
 8023b82:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023b86:	db11      	blt.n	8023bac <list_init+0x6bc>
 8023b88:	2000      	movs	r0, #0
 8023b8a:	f7f6 fc41 	bl	801a410 <lv_disp_get_dpi>
 8023b8e:	4603      	mov	r3, r0
 8023b90:	461a      	mov	r2, r3
 8023b92:	4613      	mov	r3, r2
 8023b94:	011b      	lsls	r3, r3, #4
 8023b96:	1a9b      	subs	r3, r3, r2
 8023b98:	005b      	lsls	r3, r3, #1
 8023b9a:	3350      	adds	r3, #80	; 0x50
 8023b9c:	4a80      	ldr	r2, [pc, #512]	; (8023da0 <list_init+0x8b0>)
 8023b9e:	fb82 1203 	smull	r1, r2, r2, r3
 8023ba2:	1192      	asrs	r2, r2, #6
 8023ba4:	17db      	asrs	r3, r3, #31
 8023ba6:	1ad3      	subs	r3, r2, r3
 8023ba8:	b21b      	sxth	r3, r3
 8023baa:	e000      	b.n	8023bae <list_init+0x6be>
 8023bac:	2301      	movs	r3, #1
 8023bae:	461a      	mov	r2, r3
 8023bb0:	2100      	movs	r1, #0
 8023bb2:	4620      	mov	r0, r4
 8023bb4:	f7fa ff8c 	bl	801ead0 <lv_style_set_pad_inner>

    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
 8023bb8:	4b78      	ldr	r3, [pc, #480]	; (8023d9c <list_init+0x8ac>)
 8023bba:	681b      	ldr	r3, [r3, #0]
 8023bbc:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023bc0:	2000      	movs	r0, #0
 8023bc2:	f7f6 fc3e 	bl	801a442 <lv_disp_get_size_category>
 8023bc6:	4603      	mov	r3, r0
 8023bc8:	2b01      	cmp	r3, #1
 8023bca:	d81f      	bhi.n	8023c0c <list_init+0x71c>
 8023bcc:	2000      	movs	r0, #0
 8023bce:	f7f6 fc1f 	bl	801a410 <lv_disp_get_dpi>
 8023bd2:	4603      	mov	r3, r0
 8023bd4:	461a      	mov	r2, r3
 8023bd6:	4613      	mov	r3, r2
 8023bd8:	011b      	lsls	r3, r3, #4
 8023bda:	1a9b      	subs	r3, r3, r2
 8023bdc:	3350      	adds	r3, #80	; 0x50
 8023bde:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023be2:	db10      	blt.n	8023c06 <list_init+0x716>
 8023be4:	2000      	movs	r0, #0
 8023be6:	f7f6 fc13 	bl	801a410 <lv_disp_get_dpi>
 8023bea:	4603      	mov	r3, r0
 8023bec:	461a      	mov	r2, r3
 8023bee:	4613      	mov	r3, r2
 8023bf0:	011b      	lsls	r3, r3, #4
 8023bf2:	1a9b      	subs	r3, r3, r2
 8023bf4:	3350      	adds	r3, #80	; 0x50
 8023bf6:	4a6a      	ldr	r2, [pc, #424]	; (8023da0 <list_init+0x8b0>)
 8023bf8:	fb82 1203 	smull	r1, r2, r2, r3
 8023bfc:	1192      	asrs	r2, r2, #6
 8023bfe:	17db      	asrs	r3, r3, #31
 8023c00:	1a9b      	subs	r3, r3, r2
 8023c02:	b21b      	sxth	r3, r3
 8023c04:	e023      	b.n	8023c4e <list_init+0x75e>
 8023c06:	f04f 33ff 	mov.w	r3, #4294967295
 8023c0a:	e020      	b.n	8023c4e <list_init+0x75e>
 8023c0c:	2000      	movs	r0, #0
 8023c0e:	f7f6 fbff 	bl	801a410 <lv_disp_get_dpi>
 8023c12:	4603      	mov	r3, r0
 8023c14:	461a      	mov	r2, r3
 8023c16:	4613      	mov	r3, r2
 8023c18:	011b      	lsls	r3, r3, #4
 8023c1a:	1a9b      	subs	r3, r3, r2
 8023c1c:	005b      	lsls	r3, r3, #1
 8023c1e:	3350      	adds	r3, #80	; 0x50
 8023c20:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023c24:	db11      	blt.n	8023c4a <list_init+0x75a>
 8023c26:	2000      	movs	r0, #0
 8023c28:	f7f6 fbf2 	bl	801a410 <lv_disp_get_dpi>
 8023c2c:	4603      	mov	r3, r0
 8023c2e:	461a      	mov	r2, r3
 8023c30:	4613      	mov	r3, r2
 8023c32:	011b      	lsls	r3, r3, #4
 8023c34:	1a9b      	subs	r3, r3, r2
 8023c36:	005b      	lsls	r3, r3, #1
 8023c38:	3350      	adds	r3, #80	; 0x50
 8023c3a:	4a59      	ldr	r2, [pc, #356]	; (8023da0 <list_init+0x8b0>)
 8023c3c:	fb82 1203 	smull	r1, r2, r2, r3
 8023c40:	1192      	asrs	r2, r2, #6
 8023c42:	17db      	asrs	r3, r3, #31
 8023c44:	1a9b      	subs	r3, r3, r2
 8023c46:	b21b      	sxth	r3, r3
 8023c48:	e001      	b.n	8023c4e <list_init+0x75e>
 8023c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8023c4e:	461a      	mov	r2, r3
 8023c50:	2100      	movs	r1, #0
 8023c52:	4620      	mov	r0, r4
 8023c54:	f7fa febf 	bl	801e9d6 <lv_style_set_transform_width>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, -BORDER_WIDTH);
 8023c58:	4b50      	ldr	r3, [pc, #320]	; (8023d9c <list_init+0x8ac>)
 8023c5a:	681b      	ldr	r3, [r3, #0]
 8023c5c:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023c60:	2000      	movs	r0, #0
 8023c62:	f7f6 fbd5 	bl	801a410 <lv_disp_get_dpi>
 8023c66:	4603      	mov	r3, r0
 8023c68:	3328      	adds	r3, #40	; 0x28
 8023c6a:	005b      	lsls	r3, r3, #1
 8023c6c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023c70:	db0d      	blt.n	8023c8e <list_init+0x79e>
 8023c72:	2000      	movs	r0, #0
 8023c74:	f7f6 fbcc 	bl	801a410 <lv_disp_get_dpi>
 8023c78:	4603      	mov	r3, r0
 8023c7a:	3328      	adds	r3, #40	; 0x28
 8023c7c:	005b      	lsls	r3, r3, #1
 8023c7e:	4a48      	ldr	r2, [pc, #288]	; (8023da0 <list_init+0x8b0>)
 8023c80:	fb82 1203 	smull	r1, r2, r2, r3
 8023c84:	1192      	asrs	r2, r2, #6
 8023c86:	17db      	asrs	r3, r3, #31
 8023c88:	1a9b      	subs	r3, r3, r2
 8023c8a:	b21b      	sxth	r3, r3
 8023c8c:	e001      	b.n	8023c92 <list_init+0x7a2>
 8023c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8023c92:	461a      	mov	r2, r3
 8023c94:	2110      	movs	r1, #16
 8023c96:	4620      	mov	r0, r4
 8023c98:	f7fa fe9d 	bl	801e9d6 <lv_style_set_transform_width>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, -BORDER_WIDTH);
 8023c9c:	4b3f      	ldr	r3, [pc, #252]	; (8023d9c <list_init+0x8ac>)
 8023c9e:	681b      	ldr	r3, [r3, #0]
 8023ca0:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023ca4:	2000      	movs	r0, #0
 8023ca6:	f7f6 fbb3 	bl	801a410 <lv_disp_get_dpi>
 8023caa:	4603      	mov	r3, r0
 8023cac:	3328      	adds	r3, #40	; 0x28
 8023cae:	005b      	lsls	r3, r3, #1
 8023cb0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023cb4:	db0d      	blt.n	8023cd2 <list_init+0x7e2>
 8023cb6:	2000      	movs	r0, #0
 8023cb8:	f7f6 fbaa 	bl	801a410 <lv_disp_get_dpi>
 8023cbc:	4603      	mov	r3, r0
 8023cbe:	3328      	adds	r3, #40	; 0x28
 8023cc0:	005b      	lsls	r3, r3, #1
 8023cc2:	4a37      	ldr	r2, [pc, #220]	; (8023da0 <list_init+0x8b0>)
 8023cc4:	fb82 1203 	smull	r1, r2, r2, r3
 8023cc8:	1192      	asrs	r2, r2, #6
 8023cca:	17db      	asrs	r3, r3, #31
 8023ccc:	1a9b      	subs	r3, r3, r2
 8023cce:	b21b      	sxth	r3, r3
 8023cd0:	e001      	b.n	8023cd6 <list_init+0x7e6>
 8023cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8023cd6:	461a      	mov	r2, r3
 8023cd8:	2101      	movs	r1, #1
 8023cda:	4620      	mov	r0, r4
 8023cdc:	f7fa fe7b 	bl	801e9d6 <lv_style_set_transform_width>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, -BORDER_WIDTH);
 8023ce0:	4b2e      	ldr	r3, [pc, #184]	; (8023d9c <list_init+0x8ac>)
 8023ce2:	681b      	ldr	r3, [r3, #0]
 8023ce4:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023ce8:	2000      	movs	r0, #0
 8023cea:	f7f6 fb91 	bl	801a410 <lv_disp_get_dpi>
 8023cee:	4603      	mov	r3, r0
 8023cf0:	3328      	adds	r3, #40	; 0x28
 8023cf2:	005b      	lsls	r3, r3, #1
 8023cf4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023cf8:	db0d      	blt.n	8023d16 <list_init+0x826>
 8023cfa:	2000      	movs	r0, #0
 8023cfc:	f7f6 fb88 	bl	801a410 <lv_disp_get_dpi>
 8023d00:	4603      	mov	r3, r0
 8023d02:	3328      	adds	r3, #40	; 0x28
 8023d04:	005b      	lsls	r3, r3, #1
 8023d06:	4a26      	ldr	r2, [pc, #152]	; (8023da0 <list_init+0x8b0>)
 8023d08:	fb82 1203 	smull	r1, r2, r2, r3
 8023d0c:	1192      	asrs	r2, r2, #6
 8023d0e:	17db      	asrs	r3, r3, #31
 8023d10:	1a9b      	subs	r3, r3, r2
 8023d12:	b21b      	sxth	r3, r3
 8023d14:	e001      	b.n	8023d1a <list_init+0x82a>
 8023d16:	f04f 33ff 	mov.w	r3, #4294967295
 8023d1a:	461a      	mov	r2, r3
 8023d1c:	2120      	movs	r1, #32
 8023d1e:	4620      	mov	r0, r4
 8023d20:	f7fa fe59 	bl	801e9d6 <lv_style_set_transform_width>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_FOCUSED, - BORDER_WIDTH);
 8023d24:	4b1d      	ldr	r3, [pc, #116]	; (8023d9c <list_init+0x8ac>)
 8023d26:	681b      	ldr	r3, [r3, #0]
 8023d28:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8023d2c:	2000      	movs	r0, #0
 8023d2e:	f7f6 fb6f 	bl	801a410 <lv_disp_get_dpi>
 8023d32:	4603      	mov	r3, r0
 8023d34:	3328      	adds	r3, #40	; 0x28
 8023d36:	005b      	lsls	r3, r3, #1
 8023d38:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023d3c:	db0d      	blt.n	8023d5a <list_init+0x86a>
 8023d3e:	2000      	movs	r0, #0
 8023d40:	f7f6 fb66 	bl	801a410 <lv_disp_get_dpi>
 8023d44:	4603      	mov	r3, r0
 8023d46:	3328      	adds	r3, #40	; 0x28
 8023d48:	005b      	lsls	r3, r3, #1
 8023d4a:	4a15      	ldr	r2, [pc, #84]	; (8023da0 <list_init+0x8b0>)
 8023d4c:	fb82 1203 	smull	r1, r2, r2, r3
 8023d50:	1192      	asrs	r2, r2, #6
 8023d52:	17db      	asrs	r3, r3, #31
 8023d54:	1a9b      	subs	r3, r3, r2
 8023d56:	b21b      	sxth	r3, r3
 8023d58:	e001      	b.n	8023d5e <list_init+0x86e>
 8023d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8023d5e:	461a      	mov	r2, r3
 8023d60:	2102      	movs	r1, #2
 8023d62:	4620      	mov	r0, r4
 8023d64:	f7fa fe37 	bl	801e9d6 <lv_style_set_transform_width>

    lv_style_set_transition_time(&styles->list_btn, LV_STATE_DEFAULT, TRANSITION_TIME);
 8023d68:	4b0c      	ldr	r3, [pc, #48]	; (8023d9c <list_init+0x8ac>)
 8023d6a:	681b      	ldr	r3, [r3, #0]
 8023d6c:	337c      	adds	r3, #124	; 0x7c
 8023d6e:	2200      	movs	r2, #0
 8023d70:	2100      	movs	r1, #0
 8023d72:	4618      	mov	r0, r3
 8023d74:	f7fb fa0a 	bl	801f18c <lv_style_set_transition_time>
    lv_style_set_transition_prop_6(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
 8023d78:	4b08      	ldr	r3, [pc, #32]	; (8023d9c <list_init+0x8ac>)
 8023d7a:	681b      	ldr	r3, [r3, #0]
 8023d7c:	337c      	adds	r3, #124	; 0x7c
 8023d7e:	2229      	movs	r2, #41	; 0x29
 8023d80:	2100      	movs	r1, #0
 8023d82:	4618      	mov	r0, r3
 8023d84:	f7fb fa7f 	bl	801f286 <lv_style_set_transition_prop_6>
    lv_style_set_transition_prop_5(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_TRANSFORM_WIDTH);
 8023d88:	4b04      	ldr	r3, [pc, #16]	; (8023d9c <list_init+0x8ac>)
 8023d8a:	681b      	ldr	r3, [r3, #0]
 8023d8c:	337c      	adds	r3, #124	; 0x7c
 8023d8e:	2204      	movs	r2, #4
 8023d90:	2100      	movs	r1, #0
 8023d92:	4618      	mov	r0, r3
 8023d94:	f7fb fa5e 	bl	801f254 <lv_style_set_transition_prop_5>
#endif
}
 8023d98:	bf00      	nop
 8023d9a:	bd98      	pop	{r3, r4, r7, pc}
 8023d9c:	20021498 	.word	0x20021498
 8023da0:	66666667 	.word	0x66666667

08023da4 <ddlist_init>:

static void ddlist_init(void)
{
 8023da4:	b598      	push	{r3, r4, r7, lr}
 8023da6:	af00      	add	r7, sp, #0
#if LV_USE_DROPDOWN != 0

    style_init_reset(&styles->ddlist_page);
 8023da8:	4b4d      	ldr	r3, [pc, #308]	; (8023ee0 <ddlist_init+0x13c>)
 8023daa:	681b      	ldr	r3, [r3, #0]
 8023dac:	3358      	adds	r3, #88	; 0x58
 8023dae:	4618      	mov	r0, r3
 8023db0:	f001 fb3e 	bl	8025430 <style_init_reset>
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
 8023db4:	4b4a      	ldr	r3, [pc, #296]	; (8023ee0 <ddlist_init+0x13c>)
 8023db6:	681b      	ldr	r3, [r3, #0]
 8023db8:	f103 0458 	add.w	r4, r3, #88	; 0x58
 8023dbc:	2000      	movs	r0, #0
 8023dbe:	f7f6 fb27 	bl	801a410 <lv_disp_get_dpi>
 8023dc2:	4603      	mov	r3, r0
 8023dc4:	461a      	mov	r2, r3
 8023dc6:	4613      	mov	r3, r2
 8023dc8:	009b      	lsls	r3, r3, #2
 8023dca:	4413      	add	r3, r2
 8023dcc:	009b      	lsls	r3, r3, #2
 8023dce:	3350      	adds	r3, #80	; 0x50
 8023dd0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023dd4:	db11      	blt.n	8023dfa <ddlist_init+0x56>
 8023dd6:	2000      	movs	r0, #0
 8023dd8:	f7f6 fb1a 	bl	801a410 <lv_disp_get_dpi>
 8023ddc:	4603      	mov	r3, r0
 8023dde:	461a      	mov	r2, r3
 8023de0:	4613      	mov	r3, r2
 8023de2:	009b      	lsls	r3, r3, #2
 8023de4:	4413      	add	r3, r2
 8023de6:	009b      	lsls	r3, r3, #2
 8023de8:	3350      	adds	r3, #80	; 0x50
 8023dea:	4a3e      	ldr	r2, [pc, #248]	; (8023ee4 <ddlist_init+0x140>)
 8023dec:	fb82 1203 	smull	r1, r2, r2, r3
 8023df0:	1192      	asrs	r2, r2, #6
 8023df2:	17db      	asrs	r3, r3, #31
 8023df4:	1ad3      	subs	r3, r2, r3
 8023df6:	b21b      	sxth	r3, r3
 8023df8:	e000      	b.n	8023dfc <ddlist_init+0x58>
 8023dfa:	2301      	movs	r3, #1
 8023dfc:	461a      	mov	r2, r3
 8023dfe:	2100      	movs	r1, #0
 8023e00:	4620      	mov	r0, r4
 8023e02:	f7fb f8a9 	bl	801ef58 <lv_style_set_text_line_space>
    lv_style_set_clip_corner(&styles->ddlist_page, LV_STATE_DEFAULT, true);
 8023e06:	4b36      	ldr	r3, [pc, #216]	; (8023ee0 <ddlist_init+0x13c>)
 8023e08:	681b      	ldr	r3, [r3, #0]
 8023e0a:	3358      	adds	r3, #88	; 0x58
 8023e0c:	2201      	movs	r2, #1
 8023e0e:	2100      	movs	r1, #0
 8023e10:	4618      	mov	r0, r3
 8023e12:	f7fa fdae 	bl	801e972 <lv_style_set_clip_corner>

    style_init_reset(&styles->ddlist_sel);
 8023e16:	4b32      	ldr	r3, [pc, #200]	; (8023ee0 <ddlist_init+0x13c>)
 8023e18:	681b      	ldr	r3, [r3, #0]
 8023e1a:	335c      	adds	r3, #92	; 0x5c
 8023e1c:	4618      	mov	r0, r3
 8023e1e:	f001 fb07 	bl	8025430 <style_init_reset>
    lv_style_set_bg_opa(&styles->ddlist_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
 8023e22:	4b2f      	ldr	r3, [pc, #188]	; (8023ee0 <ddlist_init+0x13c>)
 8023e24:	681b      	ldr	r3, [r3, #0]
 8023e26:	335c      	adds	r3, #92	; 0x5c
 8023e28:	22ff      	movs	r2, #255	; 0xff
 8023e2a:	2100      	movs	r1, #0
 8023e2c:	4618      	mov	r0, r3
 8023e2e:	f7fa fee3 	bl	801ebf8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_DEFAULT, theme.color_primary);
 8023e32:	4b2b      	ldr	r3, [pc, #172]	; (8023ee0 <ddlist_init+0x13c>)
 8023e34:	681b      	ldr	r3, [r3, #0]
 8023e36:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8023e3a:	4b2b      	ldr	r3, [pc, #172]	; (8023ee8 <ddlist_init+0x144>)
 8023e3c:	68da      	ldr	r2, [r3, #12]
 8023e3e:	2100      	movs	r1, #0
 8023e40:	f7fa fec3 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex3(0xfff) : lv_color_hex3(0xfff));
 8023e44:	4b26      	ldr	r3, [pc, #152]	; (8023ee0 <ddlist_init+0x13c>)
 8023e46:	681b      	ldr	r3, [r3, #0]
 8023e48:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8023e4c:	4b26      	ldr	r3, [pc, #152]	; (8023ee8 <ddlist_init+0x144>)
 8023e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023e50:	f003 0302 	and.w	r3, r3, #2
 8023e54:	2b00      	cmp	r3, #0
 8023e56:	d005      	beq.n	8023e64 <ddlist_init+0xc0>
 8023e58:	f640 70ff 	movw	r0, #4095	; 0xfff
 8023e5c:	f7fa fd3e 	bl	801e8dc <lv_color_hex3>
 8023e60:	4603      	mov	r3, r0
 8023e62:	e004      	b.n	8023e6e <ddlist_init+0xca>
 8023e64:	f640 70ff 	movw	r0, #4095	; 0xfff
 8023e68:	f7fa fd38 	bl	801e8dc <lv_color_hex3>
 8023e6c:	4603      	mov	r3, r0
 8023e6e:	461a      	mov	r2, r3
 8023e70:	2100      	movs	r1, #0
 8023e72:	4620      	mov	r0, r4
 8023e74:	f7fb f88c 	bl	801ef90 <lv_style_set_text_color>
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
 8023e78:	4b19      	ldr	r3, [pc, #100]	; (8023ee0 <ddlist_init+0x13c>)
 8023e7a:	681b      	ldr	r3, [r3, #0]
 8023e7c:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8023e80:	4b19      	ldr	r3, [pc, #100]	; (8023ee8 <ddlist_init+0x144>)
 8023e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023e84:	f003 0302 	and.w	r3, r3, #2
 8023e88:	2b00      	cmp	r3, #0
 8023e8a:	d004      	beq.n	8023e96 <ddlist_init+0xf2>
 8023e8c:	4817      	ldr	r0, [pc, #92]	; (8023eec <ddlist_init+0x148>)
 8023e8e:	f7fa fd11 	bl	801e8b4 <lv_color_hex>
 8023e92:	4603      	mov	r3, r0
 8023e94:	e003      	b.n	8023e9e <ddlist_init+0xfa>
 8023e96:	4816      	ldr	r0, [pc, #88]	; (8023ef0 <ddlist_init+0x14c>)
 8023e98:	f7fa fd0c 	bl	801e8b4 <lv_color_hex>
 8023e9c:	4603      	mov	r3, r0
 8023e9e:	461a      	mov	r2, r3
 8023ea0:	2110      	movs	r1, #16
 8023ea2:	4620      	mov	r0, r4
 8023ea4:	f7fa fe91 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
 8023ea8:	4b0d      	ldr	r3, [pc, #52]	; (8023ee0 <ddlist_init+0x13c>)
 8023eaa:	681b      	ldr	r3, [r3, #0]
 8023eac:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8023eb0:	4b0d      	ldr	r3, [pc, #52]	; (8023ee8 <ddlist_init+0x144>)
 8023eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023eb4:	f003 0302 	and.w	r3, r3, #2
 8023eb8:	2b00      	cmp	r3, #0
 8023eba:	d004      	beq.n	8023ec6 <ddlist_init+0x122>
 8023ebc:	480d      	ldr	r0, [pc, #52]	; (8023ef4 <ddlist_init+0x150>)
 8023ebe:	f7fa fcf9 	bl	801e8b4 <lv_color_hex>
 8023ec2:	4603      	mov	r3, r0
 8023ec4:	e004      	b.n	8023ed0 <ddlist_init+0x12c>
 8023ec6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8023eca:	f7fa fcf3 	bl	801e8b4 <lv_color_hex>
 8023ece:	4603      	mov	r3, r0
 8023ed0:	461a      	mov	r2, r3
 8023ed2:	2110      	movs	r1, #16
 8023ed4:	4620      	mov	r0, r4
 8023ed6:	f7fb f85b 	bl	801ef90 <lv_style_set_text_color>
#endif
}
 8023eda:	bf00      	nop
 8023edc:	bd98      	pop	{r3, r4, r7, pc}
 8023ede:	bf00      	nop
 8023ee0:	20021498 	.word	0x20021498
 8023ee4:	66666667 	.word	0x66666667
 8023ee8:	2002146c 	.word	0x2002146c
 8023eec:	00eeeeee 	.word	0x00eeeeee
 8023ef0:	00494f57 	.word	0x00494f57
 8023ef4:	003b3e42 	.word	0x003b3e42

08023ef8 <roller_init>:

static void roller_init(void)
{
 8023ef8:	b5b0      	push	{r4, r5, r7, lr}
 8023efa:	af00      	add	r7, sp, #0
#if LV_USE_ROLLER != 0
    style_init_reset(&styles->roller_bg);
 8023efc:	4b2e      	ldr	r3, [pc, #184]	; (8023fb8 <roller_init+0xc0>)
 8023efe:	681b      	ldr	r3, [r3, #0]
 8023f00:	338c      	adds	r3, #140	; 0x8c
 8023f02:	4618      	mov	r0, r3
 8023f04:	f001 fa94 	bl	8025430 <style_init_reset>
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
 8023f08:	4b2b      	ldr	r3, [pc, #172]	; (8023fb8 <roller_init+0xc0>)
 8023f0a:	681b      	ldr	r3, [r3, #0]
 8023f0c:	f103 058c 	add.w	r5, r3, #140	; 0x8c
 8023f10:	2000      	movs	r0, #0
 8023f12:	f7f6 fa7d 	bl	801a410 <lv_disp_get_dpi>
 8023f16:	4603      	mov	r3, r0
 8023f18:	461a      	mov	r2, r3
 8023f1a:	4613      	mov	r3, r2
 8023f1c:	009b      	lsls	r3, r3, #2
 8023f1e:	4413      	add	r3, r2
 8023f20:	009a      	lsls	r2, r3, #2
 8023f22:	4413      	add	r3, r2
 8023f24:	3350      	adds	r3, #80	; 0x50
 8023f26:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8023f2a:	db12      	blt.n	8023f52 <roller_init+0x5a>
 8023f2c:	2000      	movs	r0, #0
 8023f2e:	f7f6 fa6f 	bl	801a410 <lv_disp_get_dpi>
 8023f32:	4603      	mov	r3, r0
 8023f34:	461a      	mov	r2, r3
 8023f36:	4613      	mov	r3, r2
 8023f38:	009b      	lsls	r3, r3, #2
 8023f3a:	4413      	add	r3, r2
 8023f3c:	009a      	lsls	r2, r3, #2
 8023f3e:	4413      	add	r3, r2
 8023f40:	3350      	adds	r3, #80	; 0x50
 8023f42:	4a1e      	ldr	r2, [pc, #120]	; (8023fbc <roller_init+0xc4>)
 8023f44:	fb82 1203 	smull	r1, r2, r2, r3
 8023f48:	1192      	asrs	r2, r2, #6
 8023f4a:	17db      	asrs	r3, r3, #31
 8023f4c:	1ad3      	subs	r3, r2, r3
 8023f4e:	b21b      	sxth	r3, r3
 8023f50:	e000      	b.n	8023f54 <roller_init+0x5c>
 8023f52:	2301      	movs	r3, #1
 8023f54:	461a      	mov	r2, r3
 8023f56:	2100      	movs	r1, #0
 8023f58:	4628      	mov	r0, r5
 8023f5a:	f7fa fffd 	bl	801ef58 <lv_style_set_text_line_space>

    style_init_reset(&styles->roller_sel);
 8023f5e:	4b16      	ldr	r3, [pc, #88]	; (8023fb8 <roller_init+0xc0>)
 8023f60:	681b      	ldr	r3, [r3, #0]
 8023f62:	3390      	adds	r3, #144	; 0x90
 8023f64:	4618      	mov	r0, r3
 8023f66:	f001 fa63 	bl	8025430 <style_init_reset>
    lv_style_set_bg_opa(&styles->roller_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
 8023f6a:	4b13      	ldr	r3, [pc, #76]	; (8023fb8 <roller_init+0xc0>)
 8023f6c:	681b      	ldr	r3, [r3, #0]
 8023f6e:	3390      	adds	r3, #144	; 0x90
 8023f70:	22ff      	movs	r2, #255	; 0xff
 8023f72:	2100      	movs	r1, #0
 8023f74:	4618      	mov	r0, r3
 8023f76:	f7fa fe3f 	bl	801ebf8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->roller_sel, LV_STATE_DEFAULT, theme.color_primary);
 8023f7a:	4b0f      	ldr	r3, [pc, #60]	; (8023fb8 <roller_init+0xc0>)
 8023f7c:	681b      	ldr	r3, [r3, #0]
 8023f7e:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8023f82:	4b0f      	ldr	r3, [pc, #60]	; (8023fc0 <roller_init+0xc8>)
 8023f84:	68da      	ldr	r2, [r3, #12]
 8023f86:	2100      	movs	r1, #0
 8023f88:	f7fa fe1f 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->roller_sel, LV_STATE_DEFAULT, LV_COLOR_WHITE);
 8023f8c:	4b0a      	ldr	r3, [pc, #40]	; (8023fb8 <roller_init+0xc0>)
 8023f8e:	681b      	ldr	r3, [r3, #0]
 8023f90:	3390      	adds	r3, #144	; 0x90
 8023f92:	4622      	mov	r2, r4
 8023f94:	f042 04ff 	orr.w	r4, r2, #255	; 0xff
 8023f98:	4622      	mov	r2, r4
 8023f9a:	f442 447f 	orr.w	r4, r2, #65280	; 0xff00
 8023f9e:	4622      	mov	r2, r4
 8023fa0:	f442 047f 	orr.w	r4, r2, #16711680	; 0xff0000
 8023fa4:	4622      	mov	r2, r4
 8023fa6:	f042 447f 	orr.w	r4, r2, #4278190080	; 0xff000000
 8023faa:	4622      	mov	r2, r4
 8023fac:	2100      	movs	r1, #0
 8023fae:	4618      	mov	r0, r3
 8023fb0:	f7fa ffee 	bl	801ef90 <lv_style_set_text_color>
#endif
}
 8023fb4:	bf00      	nop
 8023fb6:	bdb0      	pop	{r4, r5, r7, pc}
 8023fb8:	20021498 	.word	0x20021498
 8023fbc:	66666667 	.word	0x66666667
 8023fc0:	2002146c 	.word	0x2002146c

08023fc4 <tabview_init>:

static void tabview_init(void)
{
 8023fc4:	b480      	push	{r7}
 8023fc6:	af00      	add	r7, sp, #0
#if LV_USE_TABVIEW != 0
#endif
}
 8023fc8:	bf00      	nop
 8023fca:	46bd      	mov	sp, r7
 8023fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fd0:	4770      	bx	lr

08023fd2 <tileview_init>:

static void tileview_init(void)
{
 8023fd2:	b480      	push	{r7}
 8023fd4:	af00      	add	r7, sp, #0
#if LV_USE_TILEVIEW != 0
#endif
}
 8023fd6:	bf00      	nop
 8023fd8:	46bd      	mov	sp, r7
 8023fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fde:	4770      	bx	lr

08023fe0 <table_init>:

static void table_init(void)
{
 8023fe0:	b598      	push	{r3, r4, r7, lr}
 8023fe2:	af00      	add	r7, sp, #0
#if LV_USE_TABLE != 0
    style_init_reset(&styles->table_cell);
 8023fe4:	4bb3      	ldr	r3, [pc, #716]	; (80242b4 <table_init+0x2d4>)
 8023fe6:	681b      	ldr	r3, [r3, #0]
 8023fe8:	33a4      	adds	r3, #164	; 0xa4
 8023fea:	4618      	mov	r0, r3
 8023fec:	f001 fa20 	bl	8025430 <style_init_reset>
    lv_style_set_border_color(&styles->table_cell, LV_STATE_DEFAULT, COLOR_BG_BORDER);
 8023ff0:	4bb0      	ldr	r3, [pc, #704]	; (80242b4 <table_init+0x2d4>)
 8023ff2:	681b      	ldr	r3, [r3, #0]
 8023ff4:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8023ff8:	4baf      	ldr	r3, [pc, #700]	; (80242b8 <table_init+0x2d8>)
 8023ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023ffc:	f003 0302 	and.w	r3, r3, #2
 8024000:	2b00      	cmp	r3, #0
 8024002:	d004      	beq.n	802400e <table_init+0x2e>
 8024004:	48ad      	ldr	r0, [pc, #692]	; (80242bc <table_init+0x2dc>)
 8024006:	f7fa fc55 	bl	801e8b4 <lv_color_hex>
 802400a:	4603      	mov	r3, r0
 802400c:	e003      	b.n	8024016 <table_init+0x36>
 802400e:	48ac      	ldr	r0, [pc, #688]	; (80242c0 <table_init+0x2e0>)
 8024010:	f7fa fc50 	bl	801e8b4 <lv_color_hex>
 8024014:	4603      	mov	r3, r0
 8024016:	461a      	mov	r2, r3
 8024018:	2100      	movs	r1, #0
 802401a:	4620      	mov	r0, r4
 802401c:	f7fa fe4f 	bl	801ecbe <lv_style_set_border_color>
    lv_style_set_border_width(&styles->table_cell, LV_STATE_DEFAULT, 1);
 8024020:	4ba4      	ldr	r3, [pc, #656]	; (80242b4 <table_init+0x2d4>)
 8024022:	681b      	ldr	r3, [r3, #0]
 8024024:	33a4      	adds	r3, #164	; 0xa4
 8024026:	2201      	movs	r2, #1
 8024028:	2100      	movs	r1, #0
 802402a:	4618      	mov	r0, r3
 802402c:	f7fa fdfc 	bl	801ec28 <lv_style_set_border_width>
    lv_style_set_border_side(&styles->table_cell, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM);
 8024030:	4ba0      	ldr	r3, [pc, #640]	; (80242b4 <table_init+0x2d4>)
 8024032:	681b      	ldr	r3, [r3, #0]
 8024034:	33a4      	adds	r3, #164	; 0xa4
 8024036:	2203      	movs	r2, #3
 8024038:	2100      	movs	r1, #0
 802403a:	4618      	mov	r0, r3
 802403c:	f7fa fe0d 	bl	801ec5a <lv_style_set_border_side>
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 8024040:	4b9c      	ldr	r3, [pc, #624]	; (80242b4 <table_init+0x2d4>)
 8024042:	681b      	ldr	r3, [r3, #0]
 8024044:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8024048:	2000      	movs	r0, #0
 802404a:	f7f6 f9fa 	bl	801a442 <lv_disp_get_size_category>
 802404e:	4603      	mov	r3, r0
 8024050:	2b01      	cmp	r3, #1
 8024052:	d81e      	bhi.n	8024092 <table_init+0xb2>
 8024054:	2000      	movs	r0, #0
 8024056:	f7f6 f9db 	bl	801a410 <lv_disp_get_dpi>
 802405a:	4603      	mov	r3, r0
 802405c:	461a      	mov	r2, r3
 802405e:	4613      	mov	r3, r2
 8024060:	011b      	lsls	r3, r3, #4
 8024062:	1a9b      	subs	r3, r3, r2
 8024064:	3350      	adds	r3, #80	; 0x50
 8024066:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802406a:	db10      	blt.n	802408e <table_init+0xae>
 802406c:	2000      	movs	r0, #0
 802406e:	f7f6 f9cf 	bl	801a410 <lv_disp_get_dpi>
 8024072:	4603      	mov	r3, r0
 8024074:	461a      	mov	r2, r3
 8024076:	4613      	mov	r3, r2
 8024078:	011b      	lsls	r3, r3, #4
 802407a:	1a9b      	subs	r3, r3, r2
 802407c:	3350      	adds	r3, #80	; 0x50
 802407e:	4a91      	ldr	r2, [pc, #580]	; (80242c4 <table_init+0x2e4>)
 8024080:	fb82 1203 	smull	r1, r2, r2, r3
 8024084:	1192      	asrs	r2, r2, #6
 8024086:	17db      	asrs	r3, r3, #31
 8024088:	1ad3      	subs	r3, r2, r3
 802408a:	b21b      	sxth	r3, r3
 802408c:	e021      	b.n	80240d2 <table_init+0xf2>
 802408e:	2301      	movs	r3, #1
 8024090:	e01f      	b.n	80240d2 <table_init+0xf2>
 8024092:	2000      	movs	r0, #0
 8024094:	f7f6 f9bc 	bl	801a410 <lv_disp_get_dpi>
 8024098:	4603      	mov	r3, r0
 802409a:	461a      	mov	r2, r3
 802409c:	4613      	mov	r3, r2
 802409e:	011b      	lsls	r3, r3, #4
 80240a0:	1a9b      	subs	r3, r3, r2
 80240a2:	005b      	lsls	r3, r3, #1
 80240a4:	3350      	adds	r3, #80	; 0x50
 80240a6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80240aa:	db11      	blt.n	80240d0 <table_init+0xf0>
 80240ac:	2000      	movs	r0, #0
 80240ae:	f7f6 f9af 	bl	801a410 <lv_disp_get_dpi>
 80240b2:	4603      	mov	r3, r0
 80240b4:	461a      	mov	r2, r3
 80240b6:	4613      	mov	r3, r2
 80240b8:	011b      	lsls	r3, r3, #4
 80240ba:	1a9b      	subs	r3, r3, r2
 80240bc:	005b      	lsls	r3, r3, #1
 80240be:	3350      	adds	r3, #80	; 0x50
 80240c0:	4a80      	ldr	r2, [pc, #512]	; (80242c4 <table_init+0x2e4>)
 80240c2:	fb82 1203 	smull	r1, r2, r2, r3
 80240c6:	1192      	asrs	r2, r2, #6
 80240c8:	17db      	asrs	r3, r3, #31
 80240ca:	1ad3      	subs	r3, r2, r3
 80240cc:	b21b      	sxth	r3, r3
 80240ce:	e000      	b.n	80240d2 <table_init+0xf2>
 80240d0:	2301      	movs	r3, #1
 80240d2:	461a      	mov	r2, r3
 80240d4:	2100      	movs	r1, #0
 80240d6:	4620      	mov	r0, r4
 80240d8:	f7fa fcc8 	bl	801ea6c <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 80240dc:	4b75      	ldr	r3, [pc, #468]	; (80242b4 <table_init+0x2d4>)
 80240de:	681b      	ldr	r3, [r3, #0]
 80240e0:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80240e4:	2000      	movs	r0, #0
 80240e6:	f7f6 f9ac 	bl	801a442 <lv_disp_get_size_category>
 80240ea:	4603      	mov	r3, r0
 80240ec:	2b01      	cmp	r3, #1
 80240ee:	d81e      	bhi.n	802412e <table_init+0x14e>
 80240f0:	2000      	movs	r0, #0
 80240f2:	f7f6 f98d 	bl	801a410 <lv_disp_get_dpi>
 80240f6:	4603      	mov	r3, r0
 80240f8:	461a      	mov	r2, r3
 80240fa:	4613      	mov	r3, r2
 80240fc:	011b      	lsls	r3, r3, #4
 80240fe:	1a9b      	subs	r3, r3, r2
 8024100:	3350      	adds	r3, #80	; 0x50
 8024102:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024106:	db10      	blt.n	802412a <table_init+0x14a>
 8024108:	2000      	movs	r0, #0
 802410a:	f7f6 f981 	bl	801a410 <lv_disp_get_dpi>
 802410e:	4603      	mov	r3, r0
 8024110:	461a      	mov	r2, r3
 8024112:	4613      	mov	r3, r2
 8024114:	011b      	lsls	r3, r3, #4
 8024116:	1a9b      	subs	r3, r3, r2
 8024118:	3350      	adds	r3, #80	; 0x50
 802411a:	4a6a      	ldr	r2, [pc, #424]	; (80242c4 <table_init+0x2e4>)
 802411c:	fb82 1203 	smull	r1, r2, r2, r3
 8024120:	1192      	asrs	r2, r2, #6
 8024122:	17db      	asrs	r3, r3, #31
 8024124:	1ad3      	subs	r3, r2, r3
 8024126:	b21b      	sxth	r3, r3
 8024128:	e021      	b.n	802416e <table_init+0x18e>
 802412a:	2301      	movs	r3, #1
 802412c:	e01f      	b.n	802416e <table_init+0x18e>
 802412e:	2000      	movs	r0, #0
 8024130:	f7f6 f96e 	bl	801a410 <lv_disp_get_dpi>
 8024134:	4603      	mov	r3, r0
 8024136:	461a      	mov	r2, r3
 8024138:	4613      	mov	r3, r2
 802413a:	011b      	lsls	r3, r3, #4
 802413c:	1a9b      	subs	r3, r3, r2
 802413e:	005b      	lsls	r3, r3, #1
 8024140:	3350      	adds	r3, #80	; 0x50
 8024142:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024146:	db11      	blt.n	802416c <table_init+0x18c>
 8024148:	2000      	movs	r0, #0
 802414a:	f7f6 f961 	bl	801a410 <lv_disp_get_dpi>
 802414e:	4603      	mov	r3, r0
 8024150:	461a      	mov	r2, r3
 8024152:	4613      	mov	r3, r2
 8024154:	011b      	lsls	r3, r3, #4
 8024156:	1a9b      	subs	r3, r3, r2
 8024158:	005b      	lsls	r3, r3, #1
 802415a:	3350      	adds	r3, #80	; 0x50
 802415c:	4a59      	ldr	r2, [pc, #356]	; (80242c4 <table_init+0x2e4>)
 802415e:	fb82 1203 	smull	r1, r2, r2, r3
 8024162:	1192      	asrs	r2, r2, #6
 8024164:	17db      	asrs	r3, r3, #31
 8024166:	1ad3      	subs	r3, r2, r3
 8024168:	b21b      	sxth	r3, r3
 802416a:	e000      	b.n	802416e <table_init+0x18e>
 802416c:	2301      	movs	r3, #1
 802416e:	461a      	mov	r2, r3
 8024170:	2100      	movs	r1, #0
 8024172:	4620      	mov	r0, r4
 8024174:	f7fa fc93 	bl	801ea9e <lv_style_set_pad_right>
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 8024178:	4b4e      	ldr	r3, [pc, #312]	; (80242b4 <table_init+0x2d4>)
 802417a:	681b      	ldr	r3, [r3, #0]
 802417c:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8024180:	2000      	movs	r0, #0
 8024182:	f7f6 f95e 	bl	801a442 <lv_disp_get_size_category>
 8024186:	4603      	mov	r3, r0
 8024188:	2b01      	cmp	r3, #1
 802418a:	d81e      	bhi.n	80241ca <table_init+0x1ea>
 802418c:	2000      	movs	r0, #0
 802418e:	f7f6 f93f 	bl	801a410 <lv_disp_get_dpi>
 8024192:	4603      	mov	r3, r0
 8024194:	461a      	mov	r2, r3
 8024196:	4613      	mov	r3, r2
 8024198:	011b      	lsls	r3, r3, #4
 802419a:	1a9b      	subs	r3, r3, r2
 802419c:	3350      	adds	r3, #80	; 0x50
 802419e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80241a2:	db10      	blt.n	80241c6 <table_init+0x1e6>
 80241a4:	2000      	movs	r0, #0
 80241a6:	f7f6 f933 	bl	801a410 <lv_disp_get_dpi>
 80241aa:	4603      	mov	r3, r0
 80241ac:	461a      	mov	r2, r3
 80241ae:	4613      	mov	r3, r2
 80241b0:	011b      	lsls	r3, r3, #4
 80241b2:	1a9b      	subs	r3, r3, r2
 80241b4:	3350      	adds	r3, #80	; 0x50
 80241b6:	4a43      	ldr	r2, [pc, #268]	; (80242c4 <table_init+0x2e4>)
 80241b8:	fb82 1203 	smull	r1, r2, r2, r3
 80241bc:	1192      	asrs	r2, r2, #6
 80241be:	17db      	asrs	r3, r3, #31
 80241c0:	1ad3      	subs	r3, r2, r3
 80241c2:	b21b      	sxth	r3, r3
 80241c4:	e021      	b.n	802420a <table_init+0x22a>
 80241c6:	2301      	movs	r3, #1
 80241c8:	e01f      	b.n	802420a <table_init+0x22a>
 80241ca:	2000      	movs	r0, #0
 80241cc:	f7f6 f920 	bl	801a410 <lv_disp_get_dpi>
 80241d0:	4603      	mov	r3, r0
 80241d2:	461a      	mov	r2, r3
 80241d4:	4613      	mov	r3, r2
 80241d6:	011b      	lsls	r3, r3, #4
 80241d8:	1a9b      	subs	r3, r3, r2
 80241da:	005b      	lsls	r3, r3, #1
 80241dc:	3350      	adds	r3, #80	; 0x50
 80241de:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80241e2:	db11      	blt.n	8024208 <table_init+0x228>
 80241e4:	2000      	movs	r0, #0
 80241e6:	f7f6 f913 	bl	801a410 <lv_disp_get_dpi>
 80241ea:	4603      	mov	r3, r0
 80241ec:	461a      	mov	r2, r3
 80241ee:	4613      	mov	r3, r2
 80241f0:	011b      	lsls	r3, r3, #4
 80241f2:	1a9b      	subs	r3, r3, r2
 80241f4:	005b      	lsls	r3, r3, #1
 80241f6:	3350      	adds	r3, #80	; 0x50
 80241f8:	4a32      	ldr	r2, [pc, #200]	; (80242c4 <table_init+0x2e4>)
 80241fa:	fb82 1203 	smull	r1, r2, r2, r3
 80241fe:	1192      	asrs	r2, r2, #6
 8024200:	17db      	asrs	r3, r3, #31
 8024202:	1ad3      	subs	r3, r2, r3
 8024204:	b21b      	sxth	r3, r3
 8024206:	e000      	b.n	802420a <table_init+0x22a>
 8024208:	2301      	movs	r3, #1
 802420a:	461a      	mov	r2, r3
 802420c:	2100      	movs	r1, #0
 802420e:	4620      	mov	r0, r4
 8024210:	f7fa fbfa 	bl	801ea08 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
 8024214:	4b27      	ldr	r3, [pc, #156]	; (80242b4 <table_init+0x2d4>)
 8024216:	681b      	ldr	r3, [r3, #0]
 8024218:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 802421c:	2000      	movs	r0, #0
 802421e:	f7f6 f910 	bl	801a442 <lv_disp_get_size_category>
 8024222:	4603      	mov	r3, r0
 8024224:	2b01      	cmp	r3, #1
 8024226:	d81e      	bhi.n	8024266 <table_init+0x286>
 8024228:	2000      	movs	r0, #0
 802422a:	f7f6 f8f1 	bl	801a410 <lv_disp_get_dpi>
 802422e:	4603      	mov	r3, r0
 8024230:	461a      	mov	r2, r3
 8024232:	4613      	mov	r3, r2
 8024234:	011b      	lsls	r3, r3, #4
 8024236:	1a9b      	subs	r3, r3, r2
 8024238:	3350      	adds	r3, #80	; 0x50
 802423a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802423e:	db10      	blt.n	8024262 <table_init+0x282>
 8024240:	2000      	movs	r0, #0
 8024242:	f7f6 f8e5 	bl	801a410 <lv_disp_get_dpi>
 8024246:	4603      	mov	r3, r0
 8024248:	461a      	mov	r2, r3
 802424a:	4613      	mov	r3, r2
 802424c:	011b      	lsls	r3, r3, #4
 802424e:	1a9b      	subs	r3, r3, r2
 8024250:	3350      	adds	r3, #80	; 0x50
 8024252:	4a1c      	ldr	r2, [pc, #112]	; (80242c4 <table_init+0x2e4>)
 8024254:	fb82 1203 	smull	r1, r2, r2, r3
 8024258:	1192      	asrs	r2, r2, #6
 802425a:	17db      	asrs	r3, r3, #31
 802425c:	1ad3      	subs	r3, r2, r3
 802425e:	b21b      	sxth	r3, r3
 8024260:	e021      	b.n	80242a6 <table_init+0x2c6>
 8024262:	2301      	movs	r3, #1
 8024264:	e01f      	b.n	80242a6 <table_init+0x2c6>
 8024266:	2000      	movs	r0, #0
 8024268:	f7f6 f8d2 	bl	801a410 <lv_disp_get_dpi>
 802426c:	4603      	mov	r3, r0
 802426e:	461a      	mov	r2, r3
 8024270:	4613      	mov	r3, r2
 8024272:	011b      	lsls	r3, r3, #4
 8024274:	1a9b      	subs	r3, r3, r2
 8024276:	005b      	lsls	r3, r3, #1
 8024278:	3350      	adds	r3, #80	; 0x50
 802427a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802427e:	db11      	blt.n	80242a4 <table_init+0x2c4>
 8024280:	2000      	movs	r0, #0
 8024282:	f7f6 f8c5 	bl	801a410 <lv_disp_get_dpi>
 8024286:	4603      	mov	r3, r0
 8024288:	461a      	mov	r2, r3
 802428a:	4613      	mov	r3, r2
 802428c:	011b      	lsls	r3, r3, #4
 802428e:	1a9b      	subs	r3, r3, r2
 8024290:	005b      	lsls	r3, r3, #1
 8024292:	3350      	adds	r3, #80	; 0x50
 8024294:	4a0b      	ldr	r2, [pc, #44]	; (80242c4 <table_init+0x2e4>)
 8024296:	fb82 1203 	smull	r1, r2, r2, r3
 802429a:	1192      	asrs	r2, r2, #6
 802429c:	17db      	asrs	r3, r3, #31
 802429e:	1ad3      	subs	r3, r2, r3
 80242a0:	b21b      	sxth	r3, r3
 80242a2:	e000      	b.n	80242a6 <table_init+0x2c6>
 80242a4:	2301      	movs	r3, #1
 80242a6:	461a      	mov	r2, r3
 80242a8:	2100      	movs	r1, #0
 80242aa:	4620      	mov	r0, r4
 80242ac:	f7fa fbc5 	bl	801ea3a <lv_style_set_pad_bottom>

#endif
}
 80242b0:	bf00      	nop
 80242b2:	bd98      	pop	{r3, r4, r7, pc}
 80242b4:	20021498 	.word	0x20021498
 80242b8:	2002146c 	.word	0x2002146c
 80242bc:	00d6dde3 	.word	0x00d6dde3
 80242c0:	00808a97 	.word	0x00808a97
 80242c4:	66666667 	.word	0x66666667

080242c8 <win_init>:

static void win_init(void)
{
 80242c8:	b480      	push	{r7}
 80242ca:	af00      	add	r7, sp, #0
#if LV_USE_WIN != 0
#endif
}
 80242cc:	bf00      	nop
 80242ce:	46bd      	mov	sp, r7
 80242d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242d4:	4770      	bx	lr
	...

080242d8 <tabview_win_shared_init>:

static void tabview_win_shared_init(void)
{
 80242d8:	b598      	push	{r3, r4, r7, lr}
 80242da:	af00      	add	r7, sp, #0
#if LV_USE_TABVIEW || LV_USE_WIN
    style_init_reset(&styles->tabview_btns_bg);
 80242dc:	4bcc      	ldr	r3, [pc, #816]	; (8024610 <tabview_win_shared_init+0x338>)
 80242de:	681b      	ldr	r3, [r3, #0]
 80242e0:	33ac      	adds	r3, #172	; 0xac
 80242e2:	4618      	mov	r0, r3
 80242e4:	f001 f8a4 	bl	8025430 <style_init_reset>
    lv_style_set_bg_opa(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
 80242e8:	4bc9      	ldr	r3, [pc, #804]	; (8024610 <tabview_win_shared_init+0x338>)
 80242ea:	681b      	ldr	r3, [r3, #0]
 80242ec:	33ac      	adds	r3, #172	; 0xac
 80242ee:	22ff      	movs	r2, #255	; 0xff
 80242f0:	2100      	movs	r1, #0
 80242f2:	4618      	mov	r0, r3
 80242f4:	f7fa fc80 	bl	801ebf8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
 80242f8:	4bc5      	ldr	r3, [pc, #788]	; (8024610 <tabview_win_shared_init+0x338>)
 80242fa:	681b      	ldr	r3, [r3, #0]
 80242fc:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8024300:	4bc4      	ldr	r3, [pc, #784]	; (8024614 <tabview_win_shared_init+0x33c>)
 8024302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024304:	f003 0302 	and.w	r3, r3, #2
 8024308:	2b00      	cmp	r3, #0
 802430a:	d005      	beq.n	8024318 <tabview_win_shared_init+0x40>
 802430c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8024310:	f7fa fad0 	bl	801e8b4 <lv_color_hex>
 8024314:	4603      	mov	r3, r0
 8024316:	e003      	b.n	8024320 <tabview_win_shared_init+0x48>
 8024318:	48bf      	ldr	r0, [pc, #764]	; (8024618 <tabview_win_shared_init+0x340>)
 802431a:	f7fa facb 	bl	801e8b4 <lv_color_hex>
 802431e:	4603      	mov	r3, r0
 8024320:	461a      	mov	r2, r3
 8024322:	2100      	movs	r1, #0
 8024324:	4620      	mov	r0, r4
 8024326:	f7fa fc50 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
 802432a:	4bb9      	ldr	r3, [pc, #740]	; (8024610 <tabview_win_shared_init+0x338>)
 802432c:	681b      	ldr	r3, [r3, #0]
 802432e:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8024332:	4bb8      	ldr	r3, [pc, #736]	; (8024614 <tabview_win_shared_init+0x33c>)
 8024334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024336:	f003 0302 	and.w	r3, r3, #2
 802433a:	2b00      	cmp	r3, #0
 802433c:	d004      	beq.n	8024348 <tabview_win_shared_init+0x70>
 802433e:	48b7      	ldr	r0, [pc, #732]	; (802461c <tabview_win_shared_init+0x344>)
 8024340:	f7fa fab8 	bl	801e8b4 <lv_color_hex>
 8024344:	4603      	mov	r3, r0
 8024346:	e003      	b.n	8024350 <tabview_win_shared_init+0x78>
 8024348:	48b5      	ldr	r0, [pc, #724]	; (8024620 <tabview_win_shared_init+0x348>)
 802434a:	f7fa fab3 	bl	801e8b4 <lv_color_hex>
 802434e:	4603      	mov	r3, r0
 8024350:	461a      	mov	r2, r3
 8024352:	2100      	movs	r1, #0
 8024354:	4620      	mov	r0, r4
 8024356:	f7fa fe1b 	bl	801ef90 <lv_style_set_text_color>
    lv_style_set_image_recolor(&styles->tabview_btns_bg, LV_STATE_DEFAULT, lv_color_hex(0x979a9f));
 802435a:	4bad      	ldr	r3, [pc, #692]	; (8024610 <tabview_win_shared_init+0x338>)
 802435c:	681b      	ldr	r3, [r3, #0]
 802435e:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8024362:	48b0      	ldr	r0, [pc, #704]	; (8024624 <tabview_win_shared_init+0x34c>)
 8024364:	f7fa faa6 	bl	801e8b4 <lv_color_hex>
 8024368:	4603      	mov	r3, r0
 802436a:	461a      	mov	r2, r3
 802436c:	2100      	movs	r1, #0
 802436e:	4620      	mov	r0, r4
 8024370:	f7fa fef2 	bl	801f158 <lv_style_set_image_recolor>
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
 8024374:	4ba6      	ldr	r3, [pc, #664]	; (8024610 <tabview_win_shared_init+0x338>)
 8024376:	681b      	ldr	r3, [r3, #0]
 8024378:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 802437c:	2000      	movs	r0, #0
 802437e:	f7f6 f847 	bl	801a410 <lv_disp_get_dpi>
 8024382:	4603      	mov	r3, r0
 8024384:	461a      	mov	r2, r3
 8024386:	4613      	mov	r3, r2
 8024388:	00db      	lsls	r3, r3, #3
 802438a:	1a9b      	subs	r3, r3, r2
 802438c:	3350      	adds	r3, #80	; 0x50
 802438e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024392:	db10      	blt.n	80243b6 <tabview_win_shared_init+0xde>
 8024394:	2000      	movs	r0, #0
 8024396:	f7f6 f83b 	bl	801a410 <lv_disp_get_dpi>
 802439a:	4603      	mov	r3, r0
 802439c:	461a      	mov	r2, r3
 802439e:	4613      	mov	r3, r2
 80243a0:	00db      	lsls	r3, r3, #3
 80243a2:	1a9b      	subs	r3, r3, r2
 80243a4:	3350      	adds	r3, #80	; 0x50
 80243a6:	4aa0      	ldr	r2, [pc, #640]	; (8024628 <tabview_win_shared_init+0x350>)
 80243a8:	fb82 1203 	smull	r1, r2, r2, r3
 80243ac:	1192      	asrs	r2, r2, #6
 80243ae:	17db      	asrs	r3, r3, #31
 80243b0:	1ad3      	subs	r3, r2, r3
 80243b2:	b21b      	sxth	r3, r3
 80243b4:	e000      	b.n	80243b8 <tabview_win_shared_init+0xe0>
 80243b6:	2301      	movs	r3, #1
 80243b8:	461a      	mov	r2, r3
 80243ba:	2100      	movs	r1, #0
 80243bc:	4620      	mov	r0, r4
 80243be:	f7fa fb23 	bl	801ea08 <lv_style_set_pad_top>
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
 80243c2:	4b93      	ldr	r3, [pc, #588]	; (8024610 <tabview_win_shared_init+0x338>)
 80243c4:	681b      	ldr	r3, [r3, #0]
 80243c6:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 80243ca:	2000      	movs	r0, #0
 80243cc:	f7f6 f820 	bl	801a410 <lv_disp_get_dpi>
 80243d0:	4603      	mov	r3, r0
 80243d2:	461a      	mov	r2, r3
 80243d4:	4613      	mov	r3, r2
 80243d6:	00db      	lsls	r3, r3, #3
 80243d8:	1a9b      	subs	r3, r3, r2
 80243da:	3350      	adds	r3, #80	; 0x50
 80243dc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80243e0:	db10      	blt.n	8024404 <tabview_win_shared_init+0x12c>
 80243e2:	2000      	movs	r0, #0
 80243e4:	f7f6 f814 	bl	801a410 <lv_disp_get_dpi>
 80243e8:	4603      	mov	r3, r0
 80243ea:	461a      	mov	r2, r3
 80243ec:	4613      	mov	r3, r2
 80243ee:	00db      	lsls	r3, r3, #3
 80243f0:	1a9b      	subs	r3, r3, r2
 80243f2:	3350      	adds	r3, #80	; 0x50
 80243f4:	4a8c      	ldr	r2, [pc, #560]	; (8024628 <tabview_win_shared_init+0x350>)
 80243f6:	fb82 1203 	smull	r1, r2, r2, r3
 80243fa:	1192      	asrs	r2, r2, #6
 80243fc:	17db      	asrs	r3, r3, #31
 80243fe:	1ad3      	subs	r3, r2, r3
 8024400:	b21b      	sxth	r3, r3
 8024402:	e000      	b.n	8024406 <tabview_win_shared_init+0x12e>
 8024404:	2301      	movs	r3, #1
 8024406:	461a      	mov	r2, r3
 8024408:	2100      	movs	r1, #0
 802440a:	4620      	mov	r0, r4
 802440c:	f7fa fb2e 	bl	801ea6c <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
 8024410:	4b7f      	ldr	r3, [pc, #508]	; (8024610 <tabview_win_shared_init+0x338>)
 8024412:	681b      	ldr	r3, [r3, #0]
 8024414:	f103 04ac 	add.w	r4, r3, #172	; 0xac
 8024418:	2000      	movs	r0, #0
 802441a:	f7f5 fff9 	bl	801a410 <lv_disp_get_dpi>
 802441e:	4603      	mov	r3, r0
 8024420:	461a      	mov	r2, r3
 8024422:	4613      	mov	r3, r2
 8024424:	00db      	lsls	r3, r3, #3
 8024426:	1a9b      	subs	r3, r3, r2
 8024428:	3350      	adds	r3, #80	; 0x50
 802442a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802442e:	db10      	blt.n	8024452 <tabview_win_shared_init+0x17a>
 8024430:	2000      	movs	r0, #0
 8024432:	f7f5 ffed 	bl	801a410 <lv_disp_get_dpi>
 8024436:	4603      	mov	r3, r0
 8024438:	461a      	mov	r2, r3
 802443a:	4613      	mov	r3, r2
 802443c:	00db      	lsls	r3, r3, #3
 802443e:	1a9b      	subs	r3, r3, r2
 8024440:	3350      	adds	r3, #80	; 0x50
 8024442:	4a79      	ldr	r2, [pc, #484]	; (8024628 <tabview_win_shared_init+0x350>)
 8024444:	fb82 1203 	smull	r1, r2, r2, r3
 8024448:	1192      	asrs	r2, r2, #6
 802444a:	17db      	asrs	r3, r3, #31
 802444c:	1ad3      	subs	r3, r2, r3
 802444e:	b21b      	sxth	r3, r3
 8024450:	e000      	b.n	8024454 <tabview_win_shared_init+0x17c>
 8024452:	2301      	movs	r3, #1
 8024454:	461a      	mov	r2, r3
 8024456:	2100      	movs	r1, #0
 8024458:	4620      	mov	r0, r4
 802445a:	f7fa fb20 	bl	801ea9e <lv_style_set_pad_right>

    style_init_reset(&styles->tabview_btns);
 802445e:	4b6c      	ldr	r3, [pc, #432]	; (8024610 <tabview_win_shared_init+0x338>)
 8024460:	681b      	ldr	r3, [r3, #0]
 8024462:	33a8      	adds	r3, #168	; 0xa8
 8024464:	4618      	mov	r0, r3
 8024466:	f000 ffe3 	bl	8025430 <style_init_reset>
    lv_style_set_bg_opa(&styles->tabview_btns, LV_STATE_PRESSED, LV_OPA_50);
 802446a:	4b69      	ldr	r3, [pc, #420]	; (8024610 <tabview_win_shared_init+0x338>)
 802446c:	681b      	ldr	r3, [r3, #0]
 802446e:	33a8      	adds	r3, #168	; 0xa8
 8024470:	227f      	movs	r2, #127	; 0x7f
 8024472:	2110      	movs	r1, #16
 8024474:	4618      	mov	r0, r3
 8024476:	f7fa fbbf 	bl	801ebf8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->tabview_btns, LV_STATE_PRESSED, lv_color_hex3(0x888));
 802447a:	4b65      	ldr	r3, [pc, #404]	; (8024610 <tabview_win_shared_init+0x338>)
 802447c:	681b      	ldr	r3, [r3, #0]
 802447e:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8024482:	f640 0088 	movw	r0, #2184	; 0x888
 8024486:	f7fa fa29 	bl	801e8dc <lv_color_hex3>
 802448a:	4603      	mov	r3, r0
 802448c:	461a      	mov	r2, r3
 802448e:	2110      	movs	r1, #16
 8024490:	4620      	mov	r0, r4
 8024492:	f7fa fb9a 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_CHECKED, COLOR_SCR_TEXT);
 8024496:	4b5e      	ldr	r3, [pc, #376]	; (8024610 <tabview_win_shared_init+0x338>)
 8024498:	681b      	ldr	r3, [r3, #0]
 802449a:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 802449e:	4b5d      	ldr	r3, [pc, #372]	; (8024614 <tabview_win_shared_init+0x33c>)
 80244a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80244a2:	f003 0302 	and.w	r3, r3, #2
 80244a6:	2b00      	cmp	r3, #0
 80244a8:	d004      	beq.n	80244b4 <tabview_win_shared_init+0x1dc>
 80244aa:	485c      	ldr	r0, [pc, #368]	; (802461c <tabview_win_shared_init+0x344>)
 80244ac:	f7fa fa02 	bl	801e8b4 <lv_color_hex>
 80244b0:	4603      	mov	r3, r0
 80244b2:	e003      	b.n	80244bc <tabview_win_shared_init+0x1e4>
 80244b4:	485a      	ldr	r0, [pc, #360]	; (8024620 <tabview_win_shared_init+0x348>)
 80244b6:	f7fa f9fd 	bl	801e8b4 <lv_color_hex>
 80244ba:	4603      	mov	r3, r0
 80244bc:	461a      	mov	r2, r3
 80244be:	2101      	movs	r1, #1
 80244c0:	4620      	mov	r0, r4
 80244c2:	f7fa fd65 	bl	801ef90 <lv_style_set_text_color>
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
 80244c6:	4b52      	ldr	r3, [pc, #328]	; (8024610 <tabview_win_shared_init+0x338>)
 80244c8:	681b      	ldr	r3, [r3, #0]
 80244ca:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 80244ce:	2000      	movs	r0, #0
 80244d0:	f7f5 ff9e 	bl	801a410 <lv_disp_get_dpi>
 80244d4:	4603      	mov	r3, r0
 80244d6:	461a      	mov	r2, r3
 80244d8:	4613      	mov	r3, r2
 80244da:	009b      	lsls	r3, r3, #2
 80244dc:	4413      	add	r3, r2
 80244de:	009b      	lsls	r3, r3, #2
 80244e0:	3350      	adds	r3, #80	; 0x50
 80244e2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80244e6:	db11      	blt.n	802450c <tabview_win_shared_init+0x234>
 80244e8:	2000      	movs	r0, #0
 80244ea:	f7f5 ff91 	bl	801a410 <lv_disp_get_dpi>
 80244ee:	4603      	mov	r3, r0
 80244f0:	461a      	mov	r2, r3
 80244f2:	4613      	mov	r3, r2
 80244f4:	009b      	lsls	r3, r3, #2
 80244f6:	4413      	add	r3, r2
 80244f8:	009b      	lsls	r3, r3, #2
 80244fa:	3350      	adds	r3, #80	; 0x50
 80244fc:	4a4a      	ldr	r2, [pc, #296]	; (8024628 <tabview_win_shared_init+0x350>)
 80244fe:	fb82 1203 	smull	r1, r2, r2, r3
 8024502:	1192      	asrs	r2, r2, #6
 8024504:	17db      	asrs	r3, r3, #31
 8024506:	1ad3      	subs	r3, r2, r3
 8024508:	b21b      	sxth	r3, r3
 802450a:	e000      	b.n	802450e <tabview_win_shared_init+0x236>
 802450c:	2301      	movs	r3, #1
 802450e:	461a      	mov	r2, r3
 8024510:	2100      	movs	r1, #0
 8024512:	4620      	mov	r0, r4
 8024514:	f7fa fa78 	bl	801ea08 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
 8024518:	4b3d      	ldr	r3, [pc, #244]	; (8024610 <tabview_win_shared_init+0x338>)
 802451a:	681b      	ldr	r3, [r3, #0]
 802451c:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8024520:	2000      	movs	r0, #0
 8024522:	f7f5 ff75 	bl	801a410 <lv_disp_get_dpi>
 8024526:	4603      	mov	r3, r0
 8024528:	461a      	mov	r2, r3
 802452a:	4613      	mov	r3, r2
 802452c:	009b      	lsls	r3, r3, #2
 802452e:	4413      	add	r3, r2
 8024530:	009b      	lsls	r3, r3, #2
 8024532:	3350      	adds	r3, #80	; 0x50
 8024534:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024538:	db11      	blt.n	802455e <tabview_win_shared_init+0x286>
 802453a:	2000      	movs	r0, #0
 802453c:	f7f5 ff68 	bl	801a410 <lv_disp_get_dpi>
 8024540:	4603      	mov	r3, r0
 8024542:	461a      	mov	r2, r3
 8024544:	4613      	mov	r3, r2
 8024546:	009b      	lsls	r3, r3, #2
 8024548:	4413      	add	r3, r2
 802454a:	009b      	lsls	r3, r3, #2
 802454c:	3350      	adds	r3, #80	; 0x50
 802454e:	4a36      	ldr	r2, [pc, #216]	; (8024628 <tabview_win_shared_init+0x350>)
 8024550:	fb82 1203 	smull	r1, r2, r2, r3
 8024554:	1192      	asrs	r2, r2, #6
 8024556:	17db      	asrs	r3, r3, #31
 8024558:	1ad3      	subs	r3, r2, r3
 802455a:	b21b      	sxth	r3, r3
 802455c:	e000      	b.n	8024560 <tabview_win_shared_init+0x288>
 802455e:	2301      	movs	r3, #1
 8024560:	461a      	mov	r2, r3
 8024562:	2100      	movs	r1, #0
 8024564:	4620      	mov	r0, r4
 8024566:	f7fa fa68 	bl	801ea3a <lv_style_set_pad_bottom>
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_FOCUSED, theme.color_primary);
 802456a:	4b29      	ldr	r3, [pc, #164]	; (8024610 <tabview_win_shared_init+0x338>)
 802456c:	681b      	ldr	r3, [r3, #0]
 802456e:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
 8024572:	4b28      	ldr	r3, [pc, #160]	; (8024614 <tabview_win_shared_init+0x33c>)
 8024574:	68da      	ldr	r2, [r3, #12]
 8024576:	2102      	movs	r1, #2
 8024578:	f7fa fd0a 	bl	801ef90 <lv_style_set_text_color>
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_EDITED, theme.color_secondary);
 802457c:	4b24      	ldr	r3, [pc, #144]	; (8024610 <tabview_win_shared_init+0x338>)
 802457e:	681b      	ldr	r3, [r3, #0]
 8024580:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
 8024584:	4b23      	ldr	r3, [pc, #140]	; (8024614 <tabview_win_shared_init+0x33c>)
 8024586:	691a      	ldr	r2, [r3, #16]
 8024588:	2104      	movs	r1, #4
 802458a:	f7fa fd01 	bl	801ef90 <lv_style_set_text_color>

    style_init_reset(&styles->tabview_indic);
 802458e:	4b20      	ldr	r3, [pc, #128]	; (8024610 <tabview_win_shared_init+0x338>)
 8024590:	681b      	ldr	r3, [r3, #0]
 8024592:	33b0      	adds	r3, #176	; 0xb0
 8024594:	4618      	mov	r0, r3
 8024596:	f000 ff4b 	bl	8025430 <style_init_reset>
    lv_style_set_bg_opa(&styles->tabview_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
 802459a:	4b1d      	ldr	r3, [pc, #116]	; (8024610 <tabview_win_shared_init+0x338>)
 802459c:	681b      	ldr	r3, [r3, #0]
 802459e:	33b0      	adds	r3, #176	; 0xb0
 80245a0:	22ff      	movs	r2, #255	; 0xff
 80245a2:	2100      	movs	r1, #0
 80245a4:	4618      	mov	r0, r3
 80245a6:	f7fa fb27 	bl	801ebf8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_DEFAULT, theme.color_primary);
 80245aa:	4b19      	ldr	r3, [pc, #100]	; (8024610 <tabview_win_shared_init+0x338>)
 80245ac:	681b      	ldr	r3, [r3, #0]
 80245ae:	f103 00b0 	add.w	r0, r3, #176	; 0xb0
 80245b2:	4b18      	ldr	r3, [pc, #96]	; (8024614 <tabview_win_shared_init+0x33c>)
 80245b4:	68da      	ldr	r2, [r3, #12]
 80245b6:	2100      	movs	r1, #0
 80245b8:	f7fa fb07 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_EDITED, theme.color_secondary);
 80245bc:	4b14      	ldr	r3, [pc, #80]	; (8024610 <tabview_win_shared_init+0x338>)
 80245be:	681b      	ldr	r3, [r3, #0]
 80245c0:	f103 00b0 	add.w	r0, r3, #176	; 0xb0
 80245c4:	4b13      	ldr	r3, [pc, #76]	; (8024614 <tabview_win_shared_init+0x33c>)
 80245c6:	691a      	ldr	r2, [r3, #16]
 80245c8:	2104      	movs	r1, #4
 80245ca:	f7fa fafe 	bl	801ebca <lv_style_set_bg_color>
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
 80245ce:	4b10      	ldr	r3, [pc, #64]	; (8024610 <tabview_win_shared_init+0x338>)
 80245d0:	681b      	ldr	r3, [r3, #0]
 80245d2:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 80245d6:	2000      	movs	r0, #0
 80245d8:	f7f5 ff1a 	bl	801a410 <lv_disp_get_dpi>
 80245dc:	4603      	mov	r3, r0
 80245de:	461a      	mov	r2, r3
 80245e0:	4613      	mov	r3, r2
 80245e2:	009b      	lsls	r3, r3, #2
 80245e4:	4413      	add	r3, r2
 80245e6:	3350      	adds	r3, #80	; 0x50
 80245e8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80245ec:	db1e      	blt.n	802462c <tabview_win_shared_init+0x354>
 80245ee:	2000      	movs	r0, #0
 80245f0:	f7f5 ff0e 	bl	801a410 <lv_disp_get_dpi>
 80245f4:	4603      	mov	r3, r0
 80245f6:	461a      	mov	r2, r3
 80245f8:	4613      	mov	r3, r2
 80245fa:	009b      	lsls	r3, r3, #2
 80245fc:	4413      	add	r3, r2
 80245fe:	3350      	adds	r3, #80	; 0x50
 8024600:	4a09      	ldr	r2, [pc, #36]	; (8024628 <tabview_win_shared_init+0x350>)
 8024602:	fb82 1203 	smull	r1, r2, r2, r3
 8024606:	1192      	asrs	r2, r2, #6
 8024608:	17db      	asrs	r3, r3, #31
 802460a:	1ad3      	subs	r3, r2, r3
 802460c:	b21b      	sxth	r3, r3
 802460e:	e00e      	b.n	802462e <tabview_win_shared_init+0x356>
 8024610:	20021498 	.word	0x20021498
 8024614:	2002146c 	.word	0x2002146c
 8024618:	00586273 	.word	0x00586273
 802461c:	003b3e42 	.word	0x003b3e42
 8024620:	00e7e9ec 	.word	0x00e7e9ec
 8024624:	00979a9f 	.word	0x00979a9f
 8024628:	66666667 	.word	0x66666667
 802462c:	2301      	movs	r3, #1
 802462e:	461a      	mov	r2, r3
 8024630:	2100      	movs	r1, #0
 8024632:	4620      	mov	r0, r4
 8024634:	f7fa f9b6 	bl	801e9a4 <lv_style_set_size>
    lv_style_set_radius(&styles->tabview_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
 8024638:	4bcb      	ldr	r3, [pc, #812]	; (8024968 <tabview_win_shared_init+0x690>)
 802463a:	681b      	ldr	r3, [r3, #0]
 802463c:	33b0      	adds	r3, #176	; 0xb0
 802463e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8024642:	2100      	movs	r1, #0
 8024644:	4618      	mov	r0, r3
 8024646:	f7fa f97b 	bl	801e940 <lv_style_set_radius>

    style_init_reset(&styles->tabview_page_scrl);
 802464a:	4bc7      	ldr	r3, [pc, #796]	; (8024968 <tabview_win_shared_init+0x690>)
 802464c:	681b      	ldr	r3, [r3, #0]
 802464e:	33b4      	adds	r3, #180	; 0xb4
 8024650:	4618      	mov	r0, r3
 8024652:	f000 feed 	bl	8025430 <style_init_reset>
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 8024656:	4bc4      	ldr	r3, [pc, #784]	; (8024968 <tabview_win_shared_init+0x690>)
 8024658:	681b      	ldr	r3, [r3, #0]
 802465a:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 802465e:	2000      	movs	r0, #0
 8024660:	f7f5 feef 	bl	801a442 <lv_disp_get_size_category>
 8024664:	4603      	mov	r3, r0
 8024666:	2b01      	cmp	r3, #1
 8024668:	d81e      	bhi.n	80246a8 <tabview_win_shared_init+0x3d0>
 802466a:	2000      	movs	r0, #0
 802466c:	f7f5 fed0 	bl	801a410 <lv_disp_get_dpi>
 8024670:	4603      	mov	r3, r0
 8024672:	461a      	mov	r2, r3
 8024674:	4613      	mov	r3, r2
 8024676:	011b      	lsls	r3, r3, #4
 8024678:	1a9b      	subs	r3, r3, r2
 802467a:	3350      	adds	r3, #80	; 0x50
 802467c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024680:	db10      	blt.n	80246a4 <tabview_win_shared_init+0x3cc>
 8024682:	2000      	movs	r0, #0
 8024684:	f7f5 fec4 	bl	801a410 <lv_disp_get_dpi>
 8024688:	4603      	mov	r3, r0
 802468a:	461a      	mov	r2, r3
 802468c:	4613      	mov	r3, r2
 802468e:	011b      	lsls	r3, r3, #4
 8024690:	1a9b      	subs	r3, r3, r2
 8024692:	3350      	adds	r3, #80	; 0x50
 8024694:	4ab5      	ldr	r2, [pc, #724]	; (802496c <tabview_win_shared_init+0x694>)
 8024696:	fb82 1203 	smull	r1, r2, r2, r3
 802469a:	1192      	asrs	r2, r2, #6
 802469c:	17db      	asrs	r3, r3, #31
 802469e:	1ad3      	subs	r3, r2, r3
 80246a0:	b21b      	sxth	r3, r3
 80246a2:	e021      	b.n	80246e8 <tabview_win_shared_init+0x410>
 80246a4:	2301      	movs	r3, #1
 80246a6:	e01f      	b.n	80246e8 <tabview_win_shared_init+0x410>
 80246a8:	2000      	movs	r0, #0
 80246aa:	f7f5 feb1 	bl	801a410 <lv_disp_get_dpi>
 80246ae:	4603      	mov	r3, r0
 80246b0:	461a      	mov	r2, r3
 80246b2:	4613      	mov	r3, r2
 80246b4:	011b      	lsls	r3, r3, #4
 80246b6:	1a9b      	subs	r3, r3, r2
 80246b8:	005b      	lsls	r3, r3, #1
 80246ba:	3350      	adds	r3, #80	; 0x50
 80246bc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80246c0:	db11      	blt.n	80246e6 <tabview_win_shared_init+0x40e>
 80246c2:	2000      	movs	r0, #0
 80246c4:	f7f5 fea4 	bl	801a410 <lv_disp_get_dpi>
 80246c8:	4603      	mov	r3, r0
 80246ca:	461a      	mov	r2, r3
 80246cc:	4613      	mov	r3, r2
 80246ce:	011b      	lsls	r3, r3, #4
 80246d0:	1a9b      	subs	r3, r3, r2
 80246d2:	005b      	lsls	r3, r3, #1
 80246d4:	3350      	adds	r3, #80	; 0x50
 80246d6:	4aa5      	ldr	r2, [pc, #660]	; (802496c <tabview_win_shared_init+0x694>)
 80246d8:	fb82 1203 	smull	r1, r2, r2, r3
 80246dc:	1192      	asrs	r2, r2, #6
 80246de:	17db      	asrs	r3, r3, #31
 80246e0:	1ad3      	subs	r3, r2, r3
 80246e2:	b21b      	sxth	r3, r3
 80246e4:	e000      	b.n	80246e8 <tabview_win_shared_init+0x410>
 80246e6:	2301      	movs	r3, #1
 80246e8:	461a      	mov	r2, r3
 80246ea:	2100      	movs	r1, #0
 80246ec:	4620      	mov	r0, r4
 80246ee:	f7fa f98b 	bl	801ea08 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 80246f2:	4b9d      	ldr	r3, [pc, #628]	; (8024968 <tabview_win_shared_init+0x690>)
 80246f4:	681b      	ldr	r3, [r3, #0]
 80246f6:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 80246fa:	2000      	movs	r0, #0
 80246fc:	f7f5 fea1 	bl	801a442 <lv_disp_get_size_category>
 8024700:	4603      	mov	r3, r0
 8024702:	2b01      	cmp	r3, #1
 8024704:	d81e      	bhi.n	8024744 <tabview_win_shared_init+0x46c>
 8024706:	2000      	movs	r0, #0
 8024708:	f7f5 fe82 	bl	801a410 <lv_disp_get_dpi>
 802470c:	4603      	mov	r3, r0
 802470e:	461a      	mov	r2, r3
 8024710:	4613      	mov	r3, r2
 8024712:	011b      	lsls	r3, r3, #4
 8024714:	1a9b      	subs	r3, r3, r2
 8024716:	3350      	adds	r3, #80	; 0x50
 8024718:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802471c:	db10      	blt.n	8024740 <tabview_win_shared_init+0x468>
 802471e:	2000      	movs	r0, #0
 8024720:	f7f5 fe76 	bl	801a410 <lv_disp_get_dpi>
 8024724:	4603      	mov	r3, r0
 8024726:	461a      	mov	r2, r3
 8024728:	4613      	mov	r3, r2
 802472a:	011b      	lsls	r3, r3, #4
 802472c:	1a9b      	subs	r3, r3, r2
 802472e:	3350      	adds	r3, #80	; 0x50
 8024730:	4a8e      	ldr	r2, [pc, #568]	; (802496c <tabview_win_shared_init+0x694>)
 8024732:	fb82 1203 	smull	r1, r2, r2, r3
 8024736:	1192      	asrs	r2, r2, #6
 8024738:	17db      	asrs	r3, r3, #31
 802473a:	1ad3      	subs	r3, r2, r3
 802473c:	b21b      	sxth	r3, r3
 802473e:	e021      	b.n	8024784 <tabview_win_shared_init+0x4ac>
 8024740:	2301      	movs	r3, #1
 8024742:	e01f      	b.n	8024784 <tabview_win_shared_init+0x4ac>
 8024744:	2000      	movs	r0, #0
 8024746:	f7f5 fe63 	bl	801a410 <lv_disp_get_dpi>
 802474a:	4603      	mov	r3, r0
 802474c:	461a      	mov	r2, r3
 802474e:	4613      	mov	r3, r2
 8024750:	011b      	lsls	r3, r3, #4
 8024752:	1a9b      	subs	r3, r3, r2
 8024754:	005b      	lsls	r3, r3, #1
 8024756:	3350      	adds	r3, #80	; 0x50
 8024758:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 802475c:	db11      	blt.n	8024782 <tabview_win_shared_init+0x4aa>
 802475e:	2000      	movs	r0, #0
 8024760:	f7f5 fe56 	bl	801a410 <lv_disp_get_dpi>
 8024764:	4603      	mov	r3, r0
 8024766:	461a      	mov	r2, r3
 8024768:	4613      	mov	r3, r2
 802476a:	011b      	lsls	r3, r3, #4
 802476c:	1a9b      	subs	r3, r3, r2
 802476e:	005b      	lsls	r3, r3, #1
 8024770:	3350      	adds	r3, #80	; 0x50
 8024772:	4a7e      	ldr	r2, [pc, #504]	; (802496c <tabview_win_shared_init+0x694>)
 8024774:	fb82 1203 	smull	r1, r2, r2, r3
 8024778:	1192      	asrs	r2, r2, #6
 802477a:	17db      	asrs	r3, r3, #31
 802477c:	1ad3      	subs	r3, r2, r3
 802477e:	b21b      	sxth	r3, r3
 8024780:	e000      	b.n	8024784 <tabview_win_shared_init+0x4ac>
 8024782:	2301      	movs	r3, #1
 8024784:	461a      	mov	r2, r3
 8024786:	2100      	movs	r1, #0
 8024788:	4620      	mov	r0, r4
 802478a:	f7fa f956 	bl	801ea3a <lv_style_set_pad_bottom>
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 802478e:	4b76      	ldr	r3, [pc, #472]	; (8024968 <tabview_win_shared_init+0x690>)
 8024790:	681b      	ldr	r3, [r3, #0]
 8024792:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8024796:	2000      	movs	r0, #0
 8024798:	f7f5 fe53 	bl	801a442 <lv_disp_get_size_category>
 802479c:	4603      	mov	r3, r0
 802479e:	2b01      	cmp	r3, #1
 80247a0:	d81e      	bhi.n	80247e0 <tabview_win_shared_init+0x508>
 80247a2:	2000      	movs	r0, #0
 80247a4:	f7f5 fe34 	bl	801a410 <lv_disp_get_dpi>
 80247a8:	4603      	mov	r3, r0
 80247aa:	461a      	mov	r2, r3
 80247ac:	4613      	mov	r3, r2
 80247ae:	011b      	lsls	r3, r3, #4
 80247b0:	1a9b      	subs	r3, r3, r2
 80247b2:	3350      	adds	r3, #80	; 0x50
 80247b4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80247b8:	db10      	blt.n	80247dc <tabview_win_shared_init+0x504>
 80247ba:	2000      	movs	r0, #0
 80247bc:	f7f5 fe28 	bl	801a410 <lv_disp_get_dpi>
 80247c0:	4603      	mov	r3, r0
 80247c2:	461a      	mov	r2, r3
 80247c4:	4613      	mov	r3, r2
 80247c6:	011b      	lsls	r3, r3, #4
 80247c8:	1a9b      	subs	r3, r3, r2
 80247ca:	3350      	adds	r3, #80	; 0x50
 80247cc:	4a67      	ldr	r2, [pc, #412]	; (802496c <tabview_win_shared_init+0x694>)
 80247ce:	fb82 1203 	smull	r1, r2, r2, r3
 80247d2:	1192      	asrs	r2, r2, #6
 80247d4:	17db      	asrs	r3, r3, #31
 80247d6:	1ad3      	subs	r3, r2, r3
 80247d8:	b21b      	sxth	r3, r3
 80247da:	e021      	b.n	8024820 <tabview_win_shared_init+0x548>
 80247dc:	2301      	movs	r3, #1
 80247de:	e01f      	b.n	8024820 <tabview_win_shared_init+0x548>
 80247e0:	2000      	movs	r0, #0
 80247e2:	f7f5 fe15 	bl	801a410 <lv_disp_get_dpi>
 80247e6:	4603      	mov	r3, r0
 80247e8:	461a      	mov	r2, r3
 80247ea:	4613      	mov	r3, r2
 80247ec:	011b      	lsls	r3, r3, #4
 80247ee:	1a9b      	subs	r3, r3, r2
 80247f0:	005b      	lsls	r3, r3, #1
 80247f2:	3350      	adds	r3, #80	; 0x50
 80247f4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80247f8:	db11      	blt.n	802481e <tabview_win_shared_init+0x546>
 80247fa:	2000      	movs	r0, #0
 80247fc:	f7f5 fe08 	bl	801a410 <lv_disp_get_dpi>
 8024800:	4603      	mov	r3, r0
 8024802:	461a      	mov	r2, r3
 8024804:	4613      	mov	r3, r2
 8024806:	011b      	lsls	r3, r3, #4
 8024808:	1a9b      	subs	r3, r3, r2
 802480a:	005b      	lsls	r3, r3, #1
 802480c:	3350      	adds	r3, #80	; 0x50
 802480e:	4a57      	ldr	r2, [pc, #348]	; (802496c <tabview_win_shared_init+0x694>)
 8024810:	fb82 1203 	smull	r1, r2, r2, r3
 8024814:	1192      	asrs	r2, r2, #6
 8024816:	17db      	asrs	r3, r3, #31
 8024818:	1ad3      	subs	r3, r2, r3
 802481a:	b21b      	sxth	r3, r3
 802481c:	e000      	b.n	8024820 <tabview_win_shared_init+0x548>
 802481e:	2301      	movs	r3, #1
 8024820:	461a      	mov	r2, r3
 8024822:	2100      	movs	r1, #0
 8024824:	4620      	mov	r0, r4
 8024826:	f7fa f921 	bl	801ea6c <lv_style_set_pad_left>
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 802482a:	4b4f      	ldr	r3, [pc, #316]	; (8024968 <tabview_win_shared_init+0x690>)
 802482c:	681b      	ldr	r3, [r3, #0]
 802482e:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8024832:	2000      	movs	r0, #0
 8024834:	f7f5 fe05 	bl	801a442 <lv_disp_get_size_category>
 8024838:	4603      	mov	r3, r0
 802483a:	2b01      	cmp	r3, #1
 802483c:	d81e      	bhi.n	802487c <tabview_win_shared_init+0x5a4>
 802483e:	2000      	movs	r0, #0
 8024840:	f7f5 fde6 	bl	801a410 <lv_disp_get_dpi>
 8024844:	4603      	mov	r3, r0
 8024846:	461a      	mov	r2, r3
 8024848:	4613      	mov	r3, r2
 802484a:	011b      	lsls	r3, r3, #4
 802484c:	1a9b      	subs	r3, r3, r2
 802484e:	3350      	adds	r3, #80	; 0x50
 8024850:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024854:	db10      	blt.n	8024878 <tabview_win_shared_init+0x5a0>
 8024856:	2000      	movs	r0, #0
 8024858:	f7f5 fdda 	bl	801a410 <lv_disp_get_dpi>
 802485c:	4603      	mov	r3, r0
 802485e:	461a      	mov	r2, r3
 8024860:	4613      	mov	r3, r2
 8024862:	011b      	lsls	r3, r3, #4
 8024864:	1a9b      	subs	r3, r3, r2
 8024866:	3350      	adds	r3, #80	; 0x50
 8024868:	4a40      	ldr	r2, [pc, #256]	; (802496c <tabview_win_shared_init+0x694>)
 802486a:	fb82 1203 	smull	r1, r2, r2, r3
 802486e:	1192      	asrs	r2, r2, #6
 8024870:	17db      	asrs	r3, r3, #31
 8024872:	1ad3      	subs	r3, r2, r3
 8024874:	b21b      	sxth	r3, r3
 8024876:	e021      	b.n	80248bc <tabview_win_shared_init+0x5e4>
 8024878:	2301      	movs	r3, #1
 802487a:	e01f      	b.n	80248bc <tabview_win_shared_init+0x5e4>
 802487c:	2000      	movs	r0, #0
 802487e:	f7f5 fdc7 	bl	801a410 <lv_disp_get_dpi>
 8024882:	4603      	mov	r3, r0
 8024884:	461a      	mov	r2, r3
 8024886:	4613      	mov	r3, r2
 8024888:	011b      	lsls	r3, r3, #4
 802488a:	1a9b      	subs	r3, r3, r2
 802488c:	005b      	lsls	r3, r3, #1
 802488e:	3350      	adds	r3, #80	; 0x50
 8024890:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024894:	db11      	blt.n	80248ba <tabview_win_shared_init+0x5e2>
 8024896:	2000      	movs	r0, #0
 8024898:	f7f5 fdba 	bl	801a410 <lv_disp_get_dpi>
 802489c:	4603      	mov	r3, r0
 802489e:	461a      	mov	r2, r3
 80248a0:	4613      	mov	r3, r2
 80248a2:	011b      	lsls	r3, r3, #4
 80248a4:	1a9b      	subs	r3, r3, r2
 80248a6:	005b      	lsls	r3, r3, #1
 80248a8:	3350      	adds	r3, #80	; 0x50
 80248aa:	4a30      	ldr	r2, [pc, #192]	; (802496c <tabview_win_shared_init+0x694>)
 80248ac:	fb82 1203 	smull	r1, r2, r2, r3
 80248b0:	1192      	asrs	r2, r2, #6
 80248b2:	17db      	asrs	r3, r3, #31
 80248b4:	1ad3      	subs	r3, r2, r3
 80248b6:	b21b      	sxth	r3, r3
 80248b8:	e000      	b.n	80248bc <tabview_win_shared_init+0x5e4>
 80248ba:	2301      	movs	r3, #1
 80248bc:	461a      	mov	r2, r3
 80248be:	2100      	movs	r1, #0
 80248c0:	4620      	mov	r0, r4
 80248c2:	f7fa f8ec 	bl	801ea9e <lv_style_set_pad_right>
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
 80248c6:	4b28      	ldr	r3, [pc, #160]	; (8024968 <tabview_win_shared_init+0x690>)
 80248c8:	681b      	ldr	r3, [r3, #0]
 80248ca:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 80248ce:	2000      	movs	r0, #0
 80248d0:	f7f5 fdb7 	bl	801a442 <lv_disp_get_size_category>
 80248d4:	4603      	mov	r3, r0
 80248d6:	2b01      	cmp	r3, #1
 80248d8:	d81e      	bhi.n	8024918 <tabview_win_shared_init+0x640>
 80248da:	2000      	movs	r0, #0
 80248dc:	f7f5 fd98 	bl	801a410 <lv_disp_get_dpi>
 80248e0:	4603      	mov	r3, r0
 80248e2:	461a      	mov	r2, r3
 80248e4:	4613      	mov	r3, r2
 80248e6:	011b      	lsls	r3, r3, #4
 80248e8:	1a9b      	subs	r3, r3, r2
 80248ea:	3350      	adds	r3, #80	; 0x50
 80248ec:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80248f0:	db10      	blt.n	8024914 <tabview_win_shared_init+0x63c>
 80248f2:	2000      	movs	r0, #0
 80248f4:	f7f5 fd8c 	bl	801a410 <lv_disp_get_dpi>
 80248f8:	4603      	mov	r3, r0
 80248fa:	461a      	mov	r2, r3
 80248fc:	4613      	mov	r3, r2
 80248fe:	011b      	lsls	r3, r3, #4
 8024900:	1a9b      	subs	r3, r3, r2
 8024902:	3350      	adds	r3, #80	; 0x50
 8024904:	4a19      	ldr	r2, [pc, #100]	; (802496c <tabview_win_shared_init+0x694>)
 8024906:	fb82 1203 	smull	r1, r2, r2, r3
 802490a:	1192      	asrs	r2, r2, #6
 802490c:	17db      	asrs	r3, r3, #31
 802490e:	1ad3      	subs	r3, r2, r3
 8024910:	b21b      	sxth	r3, r3
 8024912:	e021      	b.n	8024958 <tabview_win_shared_init+0x680>
 8024914:	2301      	movs	r3, #1
 8024916:	e01f      	b.n	8024958 <tabview_win_shared_init+0x680>
 8024918:	2000      	movs	r0, #0
 802491a:	f7f5 fd79 	bl	801a410 <lv_disp_get_dpi>
 802491e:	4603      	mov	r3, r0
 8024920:	461a      	mov	r2, r3
 8024922:	4613      	mov	r3, r2
 8024924:	011b      	lsls	r3, r3, #4
 8024926:	1a9b      	subs	r3, r3, r2
 8024928:	005b      	lsls	r3, r3, #1
 802492a:	3350      	adds	r3, #80	; 0x50
 802492c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8024930:	db11      	blt.n	8024956 <tabview_win_shared_init+0x67e>
 8024932:	2000      	movs	r0, #0
 8024934:	f7f5 fd6c 	bl	801a410 <lv_disp_get_dpi>
 8024938:	4603      	mov	r3, r0
 802493a:	461a      	mov	r2, r3
 802493c:	4613      	mov	r3, r2
 802493e:	011b      	lsls	r3, r3, #4
 8024940:	1a9b      	subs	r3, r3, r2
 8024942:	005b      	lsls	r3, r3, #1
 8024944:	3350      	adds	r3, #80	; 0x50
 8024946:	4a09      	ldr	r2, [pc, #36]	; (802496c <tabview_win_shared_init+0x694>)
 8024948:	fb82 1203 	smull	r1, r2, r2, r3
 802494c:	1192      	asrs	r2, r2, #6
 802494e:	17db      	asrs	r3, r3, #31
 8024950:	1ad3      	subs	r3, r2, r3
 8024952:	b21b      	sxth	r3, r3
 8024954:	e000      	b.n	8024958 <tabview_win_shared_init+0x680>
 8024956:	2301      	movs	r3, #1
 8024958:	461a      	mov	r2, r3
 802495a:	2100      	movs	r1, #0
 802495c:	4620      	mov	r0, r4
 802495e:	f7fa f8b7 	bl	801ead0 <lv_style_set_pad_inner>
#endif
}
 8024962:	bf00      	nop
 8024964:	bd98      	pop	{r3, r4, r7, pc}
 8024966:	bf00      	nop
 8024968:	20021498 	.word	0x20021498
 802496c:	66666667 	.word	0x66666667

08024970 <lv_theme_material_init>:
 * @return a pointer to reference this theme later
 */
lv_theme_t * lv_theme_material_init(lv_color_t color_primary, lv_color_t color_secondary, uint32_t flags,
                                    const lv_font_t * font_small, const lv_font_t * font_normal, const lv_font_t * font_subtitle,
                                    const lv_font_t * font_title)
{
 8024970:	b580      	push	{r7, lr}
 8024972:	b084      	sub	sp, #16
 8024974:	af00      	add	r7, sp, #0
 8024976:	60f8      	str	r0, [r7, #12]
 8024978:	60b9      	str	r1, [r7, #8]
 802497a:	607a      	str	r2, [r7, #4]
 802497c:	603b      	str	r3, [r7, #0]

    /* This trick is required only to avoid the garbage collection of
     * styles' data if LVGL is used in a binding (e.g. Micropython)
     * In a general case styles could be simple `static lv_style_t my style` variables*/
    if(!inited) {
 802497e:	4b3b      	ldr	r3, [pc, #236]	; (8024a6c <lv_theme_material_init+0xfc>)
 8024980:	781b      	ldrb	r3, [r3, #0]
 8024982:	f083 0301 	eor.w	r3, r3, #1
 8024986:	b2db      	uxtb	r3, r3
 8024988:	2b00      	cmp	r3, #0
 802498a:	d009      	beq.n	80249a0 <lv_theme_material_init+0x30>
        LV_GC_ROOT(_lv_theme_material_styles) = lv_mem_alloc(sizeof(theme_styles_t));
 802498c:	20c0      	movs	r0, #192	; 0xc0
 802498e:	f7f7 fe61 	bl	801c654 <lv_mem_alloc>
 8024992:	4602      	mov	r2, r0
 8024994:	4b36      	ldr	r3, [pc, #216]	; (8024a70 <lv_theme_material_init+0x100>)
 8024996:	601a      	str	r2, [r3, #0]
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_material_styles);
 8024998:	4b35      	ldr	r3, [pc, #212]	; (8024a70 <lv_theme_material_init+0x100>)
 802499a:	681b      	ldr	r3, [r3, #0]
 802499c:	4a35      	ldr	r2, [pc, #212]	; (8024a74 <lv_theme_material_init+0x104>)
 802499e:	6013      	str	r3, [r2, #0]
    }

    theme.color_primary = color_primary;
 80249a0:	4a35      	ldr	r2, [pc, #212]	; (8024a78 <lv_theme_material_init+0x108>)
 80249a2:	68fb      	ldr	r3, [r7, #12]
 80249a4:	60d3      	str	r3, [r2, #12]
    theme.color_secondary = color_secondary;
 80249a6:	4a34      	ldr	r2, [pc, #208]	; (8024a78 <lv_theme_material_init+0x108>)
 80249a8:	68bb      	ldr	r3, [r7, #8]
 80249aa:	6113      	str	r3, [r2, #16]
    theme.font_small = font_small;
 80249ac:	4a32      	ldr	r2, [pc, #200]	; (8024a78 <lv_theme_material_init+0x108>)
 80249ae:	683b      	ldr	r3, [r7, #0]
 80249b0:	6153      	str	r3, [r2, #20]
    theme.font_normal = font_normal;
 80249b2:	4a31      	ldr	r2, [pc, #196]	; (8024a78 <lv_theme_material_init+0x108>)
 80249b4:	69bb      	ldr	r3, [r7, #24]
 80249b6:	6193      	str	r3, [r2, #24]
    theme.font_subtitle = font_subtitle;
 80249b8:	4a2f      	ldr	r2, [pc, #188]	; (8024a78 <lv_theme_material_init+0x108>)
 80249ba:	69fb      	ldr	r3, [r7, #28]
 80249bc:	61d3      	str	r3, [r2, #28]
    theme.font_title = font_title;
 80249be:	4a2e      	ldr	r2, [pc, #184]	; (8024a78 <lv_theme_material_init+0x108>)
 80249c0:	6a3b      	ldr	r3, [r7, #32]
 80249c2:	6213      	str	r3, [r2, #32]
    theme.flags = flags;
 80249c4:	4a2c      	ldr	r2, [pc, #176]	; (8024a78 <lv_theme_material_init+0x108>)
 80249c6:	687b      	ldr	r3, [r7, #4]
 80249c8:	6253      	str	r3, [r2, #36]	; 0x24

    basic_init();
 80249ca:	f7fa fcef 	bl	801f3ac <basic_init>
    cont_init();
 80249ce:	f7fb ff65 	bl	802089c <cont_init>
    btn_init();
 80249d2:	f7fb ff6a 	bl	80208aa <btn_init>
    label_init();
 80249d6:	f7fb ff6f 	bl	80208b8 <label_init>
    bar_init();
 80249da:	f7fb ff75 	bl	80208c8 <bar_init>
    img_init();
 80249de:	f7fc f87d 	bl	8020adc <img_init>
    line_init();
 80249e2:	f7fc f882 	bl	8020aea <line_init>
    led_init();
 80249e6:	f7fc f887 	bl	8020af8 <led_init>
    slider_init();
 80249ea:	f7fc f925 	bl	8020c38 <slider_init>
    switch_init();
 80249ee:	f7fc fac9 	bl	8020f84 <switch_init>
    linemeter_init();
 80249f2:	f7fc fb83 	bl	80210fc <linemeter_init>
    gauge_init();
 80249f6:	f7fc fcd9 	bl	80213ac <gauge_init>
    arc_init();
 80249fa:	f7fc ffb3 	bl	8021964 <arc_init>
    spinner_init();
 80249fe:	f7fd f881 	bl	8021b04 <spinner_init>
    chart_init();
 8024a02:	f7fd f887 	bl	8021b14 <chart_init>
    calendar_init();
 8024a06:	f7fd f9dd 	bl	8021dc4 <calendar_init>
    cpicker_init();
 8024a0a:	f7fd fe63 	bl	80226d4 <cpicker_init>
    checkbox_init();
 8024a0e:	f7fd fff9 	bl	8022a04 <checkbox_init>
    btnmatrix_init();
 8024a12:	f7fe f9dd 	bl	8022dd0 <btnmatrix_init>
    keyboard_init();
 8024a16:	f7fe f9e3 	bl	8022de0 <keyboard_init>
    msgbox_init();
 8024a1a:	f7fe fb19 	bl	8023050 <msgbox_init>
    page_init();
 8024a1e:	f7fe fb73 	bl	8023108 <page_init>
    textarea_init();
 8024a22:	f7fe fc3f 	bl	80232a4 <textarea_init>
    spinbox_init();
 8024a26:	f7fe fcdf 	bl	80233e8 <spinbox_init>
    list_init();
 8024a2a:	f7fe fd61 	bl	80234f0 <list_init>
    ddlist_init();
 8024a2e:	f7ff f9b9 	bl	8023da4 <ddlist_init>
    roller_init();
 8024a32:	f7ff fa61 	bl	8023ef8 <roller_init>
    tabview_init();
 8024a36:	f7ff fac5 	bl	8023fc4 <tabview_init>
    tileview_init();
 8024a3a:	f7ff faca 	bl	8023fd2 <tileview_init>
    table_init();
 8024a3e:	f7ff facf 	bl	8023fe0 <table_init>
    win_init();
 8024a42:	f7ff fc41 	bl	80242c8 <win_init>
    tabview_win_shared_init();
 8024a46:	f7ff fc47 	bl	80242d8 <tabview_win_shared_init>

    theme.apply_xcb = NULL;
 8024a4a:	4b0b      	ldr	r3, [pc, #44]	; (8024a78 <lv_theme_material_init+0x108>)
 8024a4c:	2200      	movs	r2, #0
 8024a4e:	605a      	str	r2, [r3, #4]
    theme.apply_cb = theme_apply;
 8024a50:	4b09      	ldr	r3, [pc, #36]	; (8024a78 <lv_theme_material_init+0x108>)
 8024a52:	4a0a      	ldr	r2, [pc, #40]	; (8024a7c <lv_theme_material_init+0x10c>)
 8024a54:	601a      	str	r2, [r3, #0]

    inited = true;
 8024a56:	4b05      	ldr	r3, [pc, #20]	; (8024a6c <lv_theme_material_init+0xfc>)
 8024a58:	2201      	movs	r2, #1
 8024a5a:	701a      	strb	r2, [r3, #0]

    lv_obj_report_style_mod(NULL);
 8024a5c:	2000      	movs	r0, #0
 8024a5e:	f7e1 fadf 	bl	8006020 <lv_obj_report_style_mod>

    return &theme;
 8024a62:	4b05      	ldr	r3, [pc, #20]	; (8024a78 <lv_theme_material_init+0x108>)
}
 8024a64:	4618      	mov	r0, r3
 8024a66:	3710      	adds	r7, #16
 8024a68:	46bd      	mov	sp, r7
 8024a6a:	bd80      	pop	{r7, pc}
 8024a6c:	2002149c 	.word	0x2002149c
 8024a70:	2002184c 	.word	0x2002184c
 8024a74:	20021498 	.word	0x20021498
 8024a78:	2002146c 	.word	0x2002146c
 8024a7c:	08024a81 	.word	0x08024a81

08024a80 <theme_apply>:

static void theme_apply(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
 8024a80:	b580      	push	{r7, lr}
 8024a82:	b086      	sub	sp, #24
 8024a84:	af00      	add	r7, sp, #0
 8024a86:	60f8      	str	r0, [r7, #12]
 8024a88:	60b9      	str	r1, [r7, #8]
 8024a8a:	4613      	mov	r3, r2
 8024a8c:	80fb      	strh	r3, [r7, #6]
    LV_UNUSED(th);

    lv_style_list_t * list;

    switch(name) {
 8024a8e:	88fb      	ldrh	r3, [r7, #6]
 8024a90:	2b28      	cmp	r3, #40	; 0x28
 8024a92:	f200 84c1 	bhi.w	8025418 <theme_apply+0x998>
 8024a96:	a201      	add	r2, pc, #4	; (adr r2, 8024a9c <theme_apply+0x1c>)
 8024a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024a9c:	08025419 	.word	0x08025419
 8024aa0:	08024b41 	.word	0x08024b41
 8024aa4:	08024b5b 	.word	0x08024b5b
 8024aa8:	08024cc7 	.word	0x08024cc7
 8024aac:	08024c4b 	.word	0x08024c4b
 8024ab0:	08024b93 	.word	0x08024b93
 8024ab4:	08024baf 	.word	0x08024baf
 8024ab8:	080252ff 	.word	0x080252ff
 8024abc:	08025419 	.word	0x08025419
 8024ac0:	08024dc5 	.word	0x08024dc5
 8024ac4:	080250d9 	.word	0x080250d9
 8024ac8:	08024b77 	.word	0x08024b77
 8024acc:	08025361 	.word	0x08025361
 8024ad0:	08025047 	.word	0x08025047
 8024ad4:	080253c1 	.word	0x080253c1
 8024ad8:	08025419 	.word	0x08025419
 8024adc:	08025419 	.word	0x08025419
 8024ae0:	08024bff 	.word	0x08024bff
 8024ae4:	08025419 	.word	0x08025419
 8024ae8:	08024e63 	.word	0x08024e63
 8024aec:	08025419 	.word	0x08025419
 8024af0:	08024fed 	.word	0x08024fed
 8024af4:	0802502d 	.word	0x0802502d
 8024af8:	08025399 	.word	0x08025399
 8024afc:	08024e09 	.word	0x08024e09
 8024b00:	08024e31 	.word	0x08024e31
 8024b04:	08024fe1 	.word	0x08024fe1
 8024b08:	08024e7d 	.word	0x08024e7d
 8024b0c:	08024fa1 	.word	0x08024fa1
 8024b10:	08024d6d 	.word	0x08024d6d
 8024b14:	08025297 	.word	0x08025297
 8024b18:	080252d7 	.word	0x080252d7
 8024b1c:	08024d3b 	.word	0x08024d3b
 8024b20:	08024c7d 	.word	0x08024c7d
 8024b24:	08025165 	.word	0x08025165
 8024b28:	08024edf 	.word	0x08024edf
 8024b2c:	08024f3f 	.word	0x08024f3f
 8024b30:	08025227 	.word	0x08025227
 8024b34:	08024f59 	.word	0x08024f59
 8024b38:	080251ad 	.word	0x080251ad
 8024b3c:	0802520d 	.word	0x0802520d
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
 8024b40:	2100      	movs	r1, #0
 8024b42:	68b8      	ldr	r0, [r7, #8]
 8024b44:	f7e1 ffc0 	bl	8006ac8 <lv_obj_get_style_list>
 8024b48:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->scr);
 8024b4a:	4bae      	ldr	r3, [pc, #696]	; (8024e04 <theme_apply+0x384>)
 8024b4c:	681b      	ldr	r3, [r3, #0]
 8024b4e:	4619      	mov	r1, r3
 8024b50:	6938      	ldr	r0, [r7, #16]
 8024b52:	f7e6 fc15 	bl	800b380 <_lv_style_list_add_style>
            break;
 8024b56:	f000 bc60 	b.w	802541a <theme_apply+0x99a>
        case LV_THEME_OBJ:
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
 8024b5a:	2100      	movs	r1, #0
 8024b5c:	68b8      	ldr	r0, [r7, #8]
 8024b5e:	f7e1 ffb3 	bl	8006ac8 <lv_obj_get_style_list>
 8024b62:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024b64:	4ba7      	ldr	r3, [pc, #668]	; (8024e04 <theme_apply+0x384>)
 8024b66:	681b      	ldr	r3, [r3, #0]
 8024b68:	3304      	adds	r3, #4
 8024b6a:	4619      	mov	r1, r3
 8024b6c:	6938      	ldr	r0, [r7, #16]
 8024b6e:	f7e6 fc07 	bl	800b380 <_lv_style_list_add_style>
            break;
 8024b72:	f000 bc52 	b.w	802541a <theme_apply+0x99a>
#if LV_USE_CONT
        case LV_THEME_CONT:
            list = lv_obj_get_style_list(obj, LV_CONT_PART_MAIN);
 8024b76:	2100      	movs	r1, #0
 8024b78:	68b8      	ldr	r0, [r7, #8]
 8024b7a:	f7e1 ffa5 	bl	8006ac8 <lv_obj_get_style_list>
 8024b7e:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024b80:	4ba0      	ldr	r3, [pc, #640]	; (8024e04 <theme_apply+0x384>)
 8024b82:	681b      	ldr	r3, [r3, #0]
 8024b84:	3304      	adds	r3, #4
 8024b86:	4619      	mov	r1, r3
 8024b88:	6938      	ldr	r0, [r7, #16]
 8024b8a:	f7e6 fbf9 	bl	800b380 <_lv_style_list_add_style>
            break;
 8024b8e:	f000 bc44 	b.w	802541a <theme_apply+0x99a>
#endif

#if LV_USE_BTN
        case LV_THEME_BTN:
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 8024b92:	2100      	movs	r1, #0
 8024b94:	68b8      	ldr	r0, [r7, #8]
 8024b96:	f7e1 ff97 	bl	8006ac8 <lv_obj_get_style_list>
 8024b9a:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->btn);
 8024b9c:	4b99      	ldr	r3, [pc, #612]	; (8024e04 <theme_apply+0x384>)
 8024b9e:	681b      	ldr	r3, [r3, #0]
 8024ba0:	3310      	adds	r3, #16
 8024ba2:	4619      	mov	r1, r3
 8024ba4:	6938      	ldr	r0, [r7, #16]
 8024ba6:	f7e6 fbeb 	bl	800b380 <_lv_style_list_add_style>
            break;
 8024baa:	f000 bc36 	b.w	802541a <theme_apply+0x99a>
#endif

#if LV_USE_BTNMATRIX
        case LV_THEME_BTNMATRIX:
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BG);
 8024bae:	2100      	movs	r1, #0
 8024bb0:	68b8      	ldr	r0, [r7, #8]
 8024bb2:	f7e1 ff89 	bl	8006ac8 <lv_obj_get_style_list>
 8024bb6:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024bb8:	4b92      	ldr	r3, [pc, #584]	; (8024e04 <theme_apply+0x384>)
 8024bba:	681b      	ldr	r3, [r3, #0]
 8024bbc:	3304      	adds	r3, #4
 8024bbe:	4619      	mov	r1, r3
 8024bc0:	6938      	ldr	r0, [r7, #16]
 8024bc2:	f7e6 fbdd 	bl	800b380 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 8024bc6:	4b8f      	ldr	r3, [pc, #572]	; (8024e04 <theme_apply+0x384>)
 8024bc8:	681b      	ldr	r3, [r3, #0]
 8024bca:	3318      	adds	r3, #24
 8024bcc:	4619      	mov	r1, r3
 8024bce:	6938      	ldr	r0, [r7, #16]
 8024bd0:	f7e6 fbd6 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BTN);
 8024bd4:	2101      	movs	r1, #1
 8024bd6:	68b8      	ldr	r0, [r7, #8]
 8024bd8:	f7e1 ff76 	bl	8006ac8 <lv_obj_get_style_list>
 8024bdc:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024bde:	4b89      	ldr	r3, [pc, #548]	; (8024e04 <theme_apply+0x384>)
 8024be0:	681b      	ldr	r3, [r3, #0]
 8024be2:	3304      	adds	r3, #4
 8024be4:	4619      	mov	r1, r3
 8024be6:	6938      	ldr	r0, [r7, #16]
 8024be8:	f7e6 fbca 	bl	800b380 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 8024bec:	4b85      	ldr	r3, [pc, #532]	; (8024e04 <theme_apply+0x384>)
 8024bee:	681b      	ldr	r3, [r3, #0]
 8024bf0:	3308      	adds	r3, #8
 8024bf2:	4619      	mov	r1, r3
 8024bf4:	6938      	ldr	r0, [r7, #16]
 8024bf6:	f7e6 fbc3 	bl	800b380 <_lv_style_list_add_style>
            break;
 8024bfa:	f000 bc0e 	b.w	802541a <theme_apply+0x99a>
#endif

#if LV_USE_KEYBOARD
        case LV_THEME_KEYBOARD:
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BG);
 8024bfe:	2100      	movs	r1, #0
 8024c00:	68b8      	ldr	r0, [r7, #8]
 8024c02:	f7e1 ff61 	bl	8006ac8 <lv_obj_get_style_list>
 8024c06:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->scr);
 8024c08:	4b7e      	ldr	r3, [pc, #504]	; (8024e04 <theme_apply+0x384>)
 8024c0a:	681b      	ldr	r3, [r3, #0]
 8024c0c:	4619      	mov	r1, r3
 8024c0e:	6938      	ldr	r0, [r7, #16]
 8024c10:	f7e6 fbb6 	bl	800b380 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->kb_bg);
 8024c14:	4b7b      	ldr	r3, [pc, #492]	; (8024e04 <theme_apply+0x384>)
 8024c16:	681b      	ldr	r3, [r3, #0]
 8024c18:	336c      	adds	r3, #108	; 0x6c
 8024c1a:	4619      	mov	r1, r3
 8024c1c:	6938      	ldr	r0, [r7, #16]
 8024c1e:	f7e6 fbaf 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BTN);
 8024c22:	2101      	movs	r1, #1
 8024c24:	68b8      	ldr	r0, [r7, #8]
 8024c26:	f7e1 ff4f 	bl	8006ac8 <lv_obj_get_style_list>
 8024c2a:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024c2c:	4b75      	ldr	r3, [pc, #468]	; (8024e04 <theme_apply+0x384>)
 8024c2e:	681b      	ldr	r3, [r3, #0]
 8024c30:	3304      	adds	r3, #4
 8024c32:	4619      	mov	r1, r3
 8024c34:	6938      	ldr	r0, [r7, #16]
 8024c36:	f7e6 fba3 	bl	800b380 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 8024c3a:	4b72      	ldr	r3, [pc, #456]	; (8024e04 <theme_apply+0x384>)
 8024c3c:	681b      	ldr	r3, [r3, #0]
 8024c3e:	3308      	adds	r3, #8
 8024c40:	4619      	mov	r1, r3
 8024c42:	6938      	ldr	r0, [r7, #16]
 8024c44:	f7e6 fb9c 	bl	800b380 <_lv_style_list_add_style>
            break;
 8024c48:	e3e7      	b.n	802541a <theme_apply+0x99a>
#endif

#if LV_USE_BAR
        case LV_THEME_BAR:
            list = lv_obj_get_style_list(obj, LV_BAR_PART_BG);
 8024c4a:	2100      	movs	r1, #0
 8024c4c:	68b8      	ldr	r0, [r7, #8]
 8024c4e:	f7e1 ff3b 	bl	8006ac8 <lv_obj_get_style_list>
 8024c52:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bar_bg);
 8024c54:	4b6b      	ldr	r3, [pc, #428]	; (8024e04 <theme_apply+0x384>)
 8024c56:	681b      	ldr	r3, [r3, #0]
 8024c58:	3328      	adds	r3, #40	; 0x28
 8024c5a:	4619      	mov	r1, r3
 8024c5c:	6938      	ldr	r0, [r7, #16]
 8024c5e:	f7e6 fb8f 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_BAR_PART_INDIC);
 8024c62:	2101      	movs	r1, #1
 8024c64:	68b8      	ldr	r0, [r7, #8]
 8024c66:	f7e1 ff2f 	bl	8006ac8 <lv_obj_get_style_list>
 8024c6a:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bar_indic);
 8024c6c:	4b65      	ldr	r3, [pc, #404]	; (8024e04 <theme_apply+0x384>)
 8024c6e:	681b      	ldr	r3, [r3, #0]
 8024c70:	332c      	adds	r3, #44	; 0x2c
 8024c72:	4619      	mov	r1, r3
 8024c74:	6938      	ldr	r0, [r7, #16]
 8024c76:	f7e6 fb83 	bl	800b380 <_lv_style_list_add_style>
            break;
 8024c7a:	e3ce      	b.n	802541a <theme_apply+0x99a>
#endif

#if LV_USE_SWITCH
        case LV_THEME_SWITCH:
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_BG);
 8024c7c:	2100      	movs	r1, #0
 8024c7e:	68b8      	ldr	r0, [r7, #8]
 8024c80:	f7e1 ff22 	bl	8006ac8 <lv_obj_get_style_list>
 8024c84:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bar_bg);
 8024c86:	4b5f      	ldr	r3, [pc, #380]	; (8024e04 <theme_apply+0x384>)
 8024c88:	681b      	ldr	r3, [r3, #0]
 8024c8a:	3328      	adds	r3, #40	; 0x28
 8024c8c:	4619      	mov	r1, r3
 8024c8e:	6938      	ldr	r0, [r7, #16]
 8024c90:	f7e6 fb76 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_INDIC);
 8024c94:	2101      	movs	r1, #1
 8024c96:	68b8      	ldr	r0, [r7, #8]
 8024c98:	f7e1 ff16 	bl	8006ac8 <lv_obj_get_style_list>
 8024c9c:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bar_indic);
 8024c9e:	4b59      	ldr	r3, [pc, #356]	; (8024e04 <theme_apply+0x384>)
 8024ca0:	681b      	ldr	r3, [r3, #0]
 8024ca2:	332c      	adds	r3, #44	; 0x2c
 8024ca4:	4619      	mov	r1, r3
 8024ca6:	6938      	ldr	r0, [r7, #16]
 8024ca8:	f7e6 fb6a 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_KNOB);
 8024cac:	2102      	movs	r1, #2
 8024cae:	68b8      	ldr	r0, [r7, #8]
 8024cb0:	f7e1 ff0a 	bl	8006ac8 <lv_obj_get_style_list>
 8024cb4:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->sw_knob);
 8024cb6:	4b53      	ldr	r3, [pc, #332]	; (8024e04 <theme_apply+0x384>)
 8024cb8:	681b      	ldr	r3, [r3, #0]
 8024cba:	33a0      	adds	r3, #160	; 0xa0
 8024cbc:	4619      	mov	r1, r3
 8024cbe:	6938      	ldr	r0, [r7, #16]
 8024cc0:	f7e6 fb5e 	bl	800b380 <_lv_style_list_add_style>
            break;
 8024cc4:	e3a9      	b.n	802541a <theme_apply+0x99a>
            break;
#endif

#if LV_USE_ARC
        case LV_THEME_ARC:
            list = lv_obj_get_style_list(obj, LV_ARC_PART_BG);
 8024cc6:	2100      	movs	r1, #0
 8024cc8:	68b8      	ldr	r0, [r7, #8]
 8024cca:	f7e1 fefd 	bl	8006ac8 <lv_obj_get_style_list>
 8024cce:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024cd0:	4b4c      	ldr	r3, [pc, #304]	; (8024e04 <theme_apply+0x384>)
 8024cd2:	681b      	ldr	r3, [r3, #0]
 8024cd4:	3304      	adds	r3, #4
 8024cd6:	4619      	mov	r1, r3
 8024cd8:	6938      	ldr	r0, [r7, #16]
 8024cda:	f7e6 fb51 	bl	800b380 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->arc_bg);
 8024cde:	4b49      	ldr	r3, [pc, #292]	; (8024e04 <theme_apply+0x384>)
 8024ce0:	681b      	ldr	r3, [r3, #0]
 8024ce2:	3320      	adds	r3, #32
 8024ce4:	4619      	mov	r1, r3
 8024ce6:	6938      	ldr	r0, [r7, #16]
 8024ce8:	f7e6 fb4a 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_ARC_PART_INDIC);
 8024cec:	2101      	movs	r1, #1
 8024cee:	68b8      	ldr	r0, [r7, #8]
 8024cf0:	f7e1 feea 	bl	8006ac8 <lv_obj_get_style_list>
 8024cf4:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->arc_indic);
 8024cf6:	4b43      	ldr	r3, [pc, #268]	; (8024e04 <theme_apply+0x384>)
 8024cf8:	681b      	ldr	r3, [r3, #0]
 8024cfa:	331c      	adds	r3, #28
 8024cfc:	4619      	mov	r1, r3
 8024cfe:	6938      	ldr	r0, [r7, #16]
 8024d00:	f7e6 fb3e 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_ARC_PART_KNOB);
 8024d04:	2102      	movs	r1, #2
 8024d06:	68b8      	ldr	r0, [r7, #8]
 8024d08:	f7e1 fede 	bl	8006ac8 <lv_obj_get_style_list>
 8024d0c:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024d0e:	4b3d      	ldr	r3, [pc, #244]	; (8024e04 <theme_apply+0x384>)
 8024d10:	681b      	ldr	r3, [r3, #0]
 8024d12:	3304      	adds	r3, #4
 8024d14:	4619      	mov	r1, r3
 8024d16:	6938      	ldr	r0, [r7, #16]
 8024d18:	f7e6 fb32 	bl	800b380 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 8024d1c:	4b39      	ldr	r3, [pc, #228]	; (8024e04 <theme_apply+0x384>)
 8024d1e:	681b      	ldr	r3, [r3, #0]
 8024d20:	3308      	adds	r3, #8
 8024d22:	4619      	mov	r1, r3
 8024d24:	6938      	ldr	r0, [r7, #16]
 8024d26:	f7e6 fb2b 	bl	800b380 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->arc_knob);
 8024d2a:	4b36      	ldr	r3, [pc, #216]	; (8024e04 <theme_apply+0x384>)
 8024d2c:	681b      	ldr	r3, [r3, #0]
 8024d2e:	3324      	adds	r3, #36	; 0x24
 8024d30:	4619      	mov	r1, r3
 8024d32:	6938      	ldr	r0, [r7, #16]
 8024d34:	f7e6 fb24 	bl	800b380 <_lv_style_list_add_style>
            break;
 8024d38:	e36f      	b.n	802541a <theme_apply+0x99a>
#endif

#if LV_USE_SPINNER
        case LV_THEME_SPINNER:
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_BG);
 8024d3a:	2100      	movs	r1, #0
 8024d3c:	68b8      	ldr	r0, [r7, #8]
 8024d3e:	f7e1 fec3 	bl	8006ac8 <lv_obj_get_style_list>
 8024d42:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->arc_bg);
 8024d44:	4b2f      	ldr	r3, [pc, #188]	; (8024e04 <theme_apply+0x384>)
 8024d46:	681b      	ldr	r3, [r3, #0]
 8024d48:	3320      	adds	r3, #32
 8024d4a:	4619      	mov	r1, r3
 8024d4c:	6938      	ldr	r0, [r7, #16]
 8024d4e:	f7e6 fb17 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_INDIC);
 8024d52:	2101      	movs	r1, #1
 8024d54:	68b8      	ldr	r0, [r7, #8]
 8024d56:	f7e1 feb7 	bl	8006ac8 <lv_obj_get_style_list>
 8024d5a:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->arc_indic);
 8024d5c:	4b29      	ldr	r3, [pc, #164]	; (8024e04 <theme_apply+0x384>)
 8024d5e:	681b      	ldr	r3, [r3, #0]
 8024d60:	331c      	adds	r3, #28
 8024d62:	4619      	mov	r1, r3
 8024d64:	6938      	ldr	r0, [r7, #16]
 8024d66:	f7e6 fb0b 	bl	800b380 <_lv_style_list_add_style>
            break;
 8024d6a:	e356      	b.n	802541a <theme_apply+0x99a>
#endif

#if LV_USE_SLIDER
        case LV_THEME_SLIDER:
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_BG);
 8024d6c:	2100      	movs	r1, #0
 8024d6e:	68b8      	ldr	r0, [r7, #8]
 8024d70:	f7e1 feaa 	bl	8006ac8 <lv_obj_get_style_list>
 8024d74:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bar_bg);
 8024d76:	4b23      	ldr	r3, [pc, #140]	; (8024e04 <theme_apply+0x384>)
 8024d78:	681b      	ldr	r3, [r3, #0]
 8024d7a:	3328      	adds	r3, #40	; 0x28
 8024d7c:	4619      	mov	r1, r3
 8024d7e:	6938      	ldr	r0, [r7, #16]
 8024d80:	f7e6 fafe 	bl	800b380 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->slider_bg);
 8024d84:	4b1f      	ldr	r3, [pc, #124]	; (8024e04 <theme_apply+0x384>)
 8024d86:	681b      	ldr	r3, [r3, #0]
 8024d88:	3398      	adds	r3, #152	; 0x98
 8024d8a:	4619      	mov	r1, r3
 8024d8c:	6938      	ldr	r0, [r7, #16]
 8024d8e:	f7e6 faf7 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_INDIC);
 8024d92:	2101      	movs	r1, #1
 8024d94:	68b8      	ldr	r0, [r7, #8]
 8024d96:	f7e1 fe97 	bl	8006ac8 <lv_obj_get_style_list>
 8024d9a:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bar_indic);
 8024d9c:	4b19      	ldr	r3, [pc, #100]	; (8024e04 <theme_apply+0x384>)
 8024d9e:	681b      	ldr	r3, [r3, #0]
 8024da0:	332c      	adds	r3, #44	; 0x2c
 8024da2:	4619      	mov	r1, r3
 8024da4:	6938      	ldr	r0, [r7, #16]
 8024da6:	f7e6 faeb 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_KNOB);
 8024daa:	2102      	movs	r1, #2
 8024dac:	68b8      	ldr	r0, [r7, #8]
 8024dae:	f7e1 fe8b 	bl	8006ac8 <lv_obj_get_style_list>
 8024db2:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->slider_knob);
 8024db4:	4b13      	ldr	r3, [pc, #76]	; (8024e04 <theme_apply+0x384>)
 8024db6:	681b      	ldr	r3, [r3, #0]
 8024db8:	3394      	adds	r3, #148	; 0x94
 8024dba:	4619      	mov	r1, r3
 8024dbc:	6938      	ldr	r0, [r7, #16]
 8024dbe:	f7e6 fadf 	bl	800b380 <_lv_style_list_add_style>
            break;
 8024dc2:	e32a      	b.n	802541a <theme_apply+0x99a>
#endif

#if LV_USE_CHECKBOX
        case LV_THEME_CHECKBOX:
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BG);
 8024dc4:	2100      	movs	r1, #0
 8024dc6:	68b8      	ldr	r0, [r7, #8]
 8024dc8:	f7e1 fe7e 	bl	8006ac8 <lv_obj_get_style_list>
 8024dcc:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->cb_bg);
 8024dce:	4b0d      	ldr	r3, [pc, #52]	; (8024e04 <theme_apply+0x384>)
 8024dd0:	681b      	ldr	r3, [r3, #0]
 8024dd2:	3350      	adds	r3, #80	; 0x50
 8024dd4:	4619      	mov	r1, r3
 8024dd6:	6938      	ldr	r0, [r7, #16]
 8024dd8:	f7e6 fad2 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BULLET);
 8024ddc:	2140      	movs	r1, #64	; 0x40
 8024dde:	68b8      	ldr	r0, [r7, #8]
 8024de0:	f7e1 fe72 	bl	8006ac8 <lv_obj_get_style_list>
 8024de4:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->btn);
 8024de6:	4b07      	ldr	r3, [pc, #28]	; (8024e04 <theme_apply+0x384>)
 8024de8:	681b      	ldr	r3, [r3, #0]
 8024dea:	3310      	adds	r3, #16
 8024dec:	4619      	mov	r1, r3
 8024dee:	6938      	ldr	r0, [r7, #16]
 8024df0:	f7e6 fac6 	bl	800b380 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->cb_bullet);
 8024df4:	4b03      	ldr	r3, [pc, #12]	; (8024e04 <theme_apply+0x384>)
 8024df6:	681b      	ldr	r3, [r3, #0]
 8024df8:	3354      	adds	r3, #84	; 0x54
 8024dfa:	4619      	mov	r1, r3
 8024dfc:	6938      	ldr	r0, [r7, #16]
 8024dfe:	f7e6 fabf 	bl	800b380 <_lv_style_list_add_style>
            break;
 8024e02:	e30a      	b.n	802541a <theme_apply+0x99a>
 8024e04:	20021498 	.word	0x20021498
#endif

#if LV_USE_MSGBOX
        case LV_THEME_MSGBOX:
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BG);
 8024e08:	2100      	movs	r1, #0
 8024e0a:	68b8      	ldr	r0, [r7, #8]
 8024e0c:	f7e1 fe5c 	bl	8006ac8 <lv_obj_get_style_list>
 8024e10:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024e12:	4bb0      	ldr	r3, [pc, #704]	; (80250d4 <theme_apply+0x654>)
 8024e14:	681b      	ldr	r3, [r3, #0]
 8024e16:	3304      	adds	r3, #4
 8024e18:	4619      	mov	r1, r3
 8024e1a:	6938      	ldr	r0, [r7, #16]
 8024e1c:	f7e6 fab0 	bl	800b380 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->mbox_bg);
 8024e20:	4bac      	ldr	r3, [pc, #688]	; (80250d4 <theme_apply+0x654>)
 8024e22:	681b      	ldr	r3, [r3, #0]
 8024e24:	3380      	adds	r3, #128	; 0x80
 8024e26:	4619      	mov	r1, r3
 8024e28:	6938      	ldr	r0, [r7, #16]
 8024e2a:	f7e6 faa9 	bl	800b380 <_lv_style_list_add_style>
            break;
 8024e2e:	e2f4      	b.n	802541a <theme_apply+0x99a>

        case LV_THEME_MSGBOX_BTNS:
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN_BG);
 8024e30:	2140      	movs	r1, #64	; 0x40
 8024e32:	68b8      	ldr	r0, [r7, #8]
 8024e34:	f7e1 fe48 	bl	8006ac8 <lv_obj_get_style_list>
 8024e38:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->pad_small);
 8024e3a:	4ba6      	ldr	r3, [pc, #664]	; (80250d4 <theme_apply+0x654>)
 8024e3c:	681b      	ldr	r3, [r3, #0]
 8024e3e:	3318      	adds	r3, #24
 8024e40:	4619      	mov	r1, r3
 8024e42:	6938      	ldr	r0, [r7, #16]
 8024e44:	f7e6 fa9c 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN);
 8024e48:	2141      	movs	r1, #65	; 0x41
 8024e4a:	68b8      	ldr	r0, [r7, #8]
 8024e4c:	f7e1 fe3c 	bl	8006ac8 <lv_obj_get_style_list>
 8024e50:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->btn);
 8024e52:	4ba0      	ldr	r3, [pc, #640]	; (80250d4 <theme_apply+0x654>)
 8024e54:	681b      	ldr	r3, [r3, #0]
 8024e56:	3310      	adds	r3, #16
 8024e58:	4619      	mov	r1, r3
 8024e5a:	6938      	ldr	r0, [r7, #16]
 8024e5c:	f7e6 fa90 	bl	800b380 <_lv_style_list_add_style>
            break;
 8024e60:	e2db      	b.n	802541a <theme_apply+0x99a>

#endif
#if LV_USE_LED
        case LV_THEME_LED:
            list = lv_obj_get_style_list(obj, LV_LED_PART_MAIN);
 8024e62:	2100      	movs	r1, #0
 8024e64:	68b8      	ldr	r0, [r7, #8]
 8024e66:	f7e1 fe2f 	bl	8006ac8 <lv_obj_get_style_list>
 8024e6a:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->led);
 8024e6c:	4b99      	ldr	r3, [pc, #612]	; (80250d4 <theme_apply+0x654>)
 8024e6e:	681b      	ldr	r3, [r3, #0]
 8024e70:	3370      	adds	r3, #112	; 0x70
 8024e72:	4619      	mov	r1, r3
 8024e74:	6938      	ldr	r0, [r7, #16]
 8024e76:	f7e6 fa83 	bl	800b380 <_lv_style_list_add_style>
            break;
 8024e7a:	e2ce      	b.n	802541a <theme_apply+0x99a>
#endif
#if LV_USE_PAGE
        case LV_THEME_PAGE:
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_BG);
 8024e7c:	2100      	movs	r1, #0
 8024e7e:	68b8      	ldr	r0, [r7, #8]
 8024e80:	f7e1 fe22 	bl	8006ac8 <lv_obj_get_style_list>
 8024e84:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024e86:	4b93      	ldr	r3, [pc, #588]	; (80250d4 <theme_apply+0x654>)
 8024e88:	681b      	ldr	r3, [r3, #0]
 8024e8a:	3304      	adds	r3, #4
 8024e8c:	4619      	mov	r1, r3
 8024e8e:	6938      	ldr	r0, [r7, #16]
 8024e90:	f7e6 fa76 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
 8024e94:	2140      	movs	r1, #64	; 0x40
 8024e96:	68b8      	ldr	r0, [r7, #8]
 8024e98:	f7e1 fe16 	bl	8006ac8 <lv_obj_get_style_list>
 8024e9c:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->pad_inner);
 8024e9e:	4b8d      	ldr	r3, [pc, #564]	; (80250d4 <theme_apply+0x654>)
 8024ea0:	681b      	ldr	r3, [r3, #0]
 8024ea2:	3314      	adds	r3, #20
 8024ea4:	4619      	mov	r1, r3
 8024ea6:	6938      	ldr	r0, [r7, #16]
 8024ea8:	f7e6 fa6a 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLBAR);
 8024eac:	2101      	movs	r1, #1
 8024eae:	68b8      	ldr	r0, [r7, #8]
 8024eb0:	f7e1 fe0a 	bl	8006ac8 <lv_obj_get_style_list>
 8024eb4:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->sb);
 8024eb6:	4b87      	ldr	r3, [pc, #540]	; (80250d4 <theme_apply+0x654>)
 8024eb8:	681b      	ldr	r3, [r3, #0]
 8024eba:	3384      	adds	r3, #132	; 0x84
 8024ebc:	4619      	mov	r1, r3
 8024ebe:	6938      	ldr	r0, [r7, #16]
 8024ec0:	f7e6 fa5e 	bl	800b380 <_lv_style_list_add_style>

#if LV_USE_ANIMATION
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_EDGE_FLASH);
 8024ec4:	2102      	movs	r1, #2
 8024ec6:	68b8      	ldr	r0, [r7, #8]
 8024ec8:	f7e1 fdfe 	bl	8006ac8 <lv_obj_get_style_list>
 8024ecc:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->edge_flash);
 8024ece:	4b81      	ldr	r3, [pc, #516]	; (80250d4 <theme_apply+0x654>)
 8024ed0:	681b      	ldr	r3, [r3, #0]
 8024ed2:	3388      	adds	r3, #136	; 0x88
 8024ed4:	4619      	mov	r1, r3
 8024ed6:	6938      	ldr	r0, [r7, #16]
 8024ed8:	f7e6 fa52 	bl	800b380 <_lv_style_list_add_style>
#endif
            break;
 8024edc:	e29d      	b.n	802541a <theme_apply+0x99a>
#endif
#if LV_USE_TABVIEW
        case LV_THEME_TABVIEW:
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_BG);
 8024ede:	2100      	movs	r1, #0
 8024ee0:	68b8      	ldr	r0, [r7, #8]
 8024ee2:	f7e1 fdf1 	bl	8006ac8 <lv_obj_get_style_list>
 8024ee6:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->scr);
 8024ee8:	4b7a      	ldr	r3, [pc, #488]	; (80250d4 <theme_apply+0x654>)
 8024eea:	681b      	ldr	r3, [r3, #0]
 8024eec:	4619      	mov	r1, r3
 8024eee:	6938      	ldr	r0, [r7, #16]
 8024ef0:	f7e6 fa46 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BG);
 8024ef4:	2141      	movs	r1, #65	; 0x41
 8024ef6:	68b8      	ldr	r0, [r7, #8]
 8024ef8:	f7e1 fde6 	bl	8006ac8 <lv_obj_get_style_list>
 8024efc:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
 8024efe:	4b75      	ldr	r3, [pc, #468]	; (80250d4 <theme_apply+0x654>)
 8024f00:	681b      	ldr	r3, [r3, #0]
 8024f02:	33ac      	adds	r3, #172	; 0xac
 8024f04:	4619      	mov	r1, r3
 8024f06:	6938      	ldr	r0, [r7, #16]
 8024f08:	f7e6 fa3a 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_INDIC);
 8024f0c:	2143      	movs	r1, #67	; 0x43
 8024f0e:	68b8      	ldr	r0, [r7, #8]
 8024f10:	f7e1 fdda 	bl	8006ac8 <lv_obj_get_style_list>
 8024f14:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->tabview_indic);
 8024f16:	4b6f      	ldr	r3, [pc, #444]	; (80250d4 <theme_apply+0x654>)
 8024f18:	681b      	ldr	r3, [r3, #0]
 8024f1a:	33b0      	adds	r3, #176	; 0xb0
 8024f1c:	4619      	mov	r1, r3
 8024f1e:	6938      	ldr	r0, [r7, #16]
 8024f20:	f7e6 fa2e 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
 8024f24:	2142      	movs	r1, #66	; 0x42
 8024f26:	68b8      	ldr	r0, [r7, #8]
 8024f28:	f7e1 fdce 	bl	8006ac8 <lv_obj_get_style_list>
 8024f2c:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->tabview_btns);
 8024f2e:	4b69      	ldr	r3, [pc, #420]	; (80250d4 <theme_apply+0x654>)
 8024f30:	681b      	ldr	r3, [r3, #0]
 8024f32:	33a8      	adds	r3, #168	; 0xa8
 8024f34:	4619      	mov	r1, r3
 8024f36:	6938      	ldr	r0, [r7, #16]
 8024f38:	f7e6 fa22 	bl	800b380 <_lv_style_list_add_style>
            break;
 8024f3c:	e26d      	b.n	802541a <theme_apply+0x99a>

        case LV_THEME_TABVIEW_PAGE:
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
 8024f3e:	2140      	movs	r1, #64	; 0x40
 8024f40:	68b8      	ldr	r0, [r7, #8]
 8024f42:	f7e1 fdc1 	bl	8006ac8 <lv_obj_get_style_list>
 8024f46:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
 8024f48:	4b62      	ldr	r3, [pc, #392]	; (80250d4 <theme_apply+0x654>)
 8024f4a:	681b      	ldr	r3, [r3, #0]
 8024f4c:	33b4      	adds	r3, #180	; 0xb4
 8024f4e:	4619      	mov	r1, r3
 8024f50:	6938      	ldr	r0, [r7, #16]
 8024f52:	f7e6 fa15 	bl	800b380 <_lv_style_list_add_style>

            break;
 8024f56:	e260      	b.n	802541a <theme_apply+0x99a>
#endif

#if LV_USE_TILEVIEW
        case LV_THEME_TILEVIEW:
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_BG);
 8024f58:	2100      	movs	r1, #0
 8024f5a:	68b8      	ldr	r0, [r7, #8]
 8024f5c:	f7e1 fdb4 	bl	8006ac8 <lv_obj_get_style_list>
 8024f60:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->scr);
 8024f62:	4b5c      	ldr	r3, [pc, #368]	; (80250d4 <theme_apply+0x654>)
 8024f64:	681b      	ldr	r3, [r3, #0]
 8024f66:	4619      	mov	r1, r3
 8024f68:	6938      	ldr	r0, [r7, #16]
 8024f6a:	f7e6 fa09 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
 8024f6e:	2101      	movs	r1, #1
 8024f70:	68b8      	ldr	r0, [r7, #8]
 8024f72:	f7e1 fda9 	bl	8006ac8 <lv_obj_get_style_list>
 8024f76:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->sb);
 8024f78:	4b56      	ldr	r3, [pc, #344]	; (80250d4 <theme_apply+0x654>)
 8024f7a:	681b      	ldr	r3, [r3, #0]
 8024f7c:	3384      	adds	r3, #132	; 0x84
 8024f7e:	4619      	mov	r1, r3
 8024f80:	6938      	ldr	r0, [r7, #16]
 8024f82:	f7e6 f9fd 	bl	800b380 <_lv_style_list_add_style>

#if LV_USE_ANIMATION
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
 8024f86:	2102      	movs	r1, #2
 8024f88:	68b8      	ldr	r0, [r7, #8]
 8024f8a:	f7e1 fd9d 	bl	8006ac8 <lv_obj_get_style_list>
 8024f8e:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->edge_flash);
 8024f90:	4b50      	ldr	r3, [pc, #320]	; (80250d4 <theme_apply+0x654>)
 8024f92:	681b      	ldr	r3, [r3, #0]
 8024f94:	3388      	adds	r3, #136	; 0x88
 8024f96:	4619      	mov	r1, r3
 8024f98:	6938      	ldr	r0, [r7, #16]
 8024f9a:	f7e6 f9f1 	bl	800b380 <_lv_style_list_add_style>
#endif
            break;
 8024f9e:	e23c      	b.n	802541a <theme_apply+0x99a>
#endif

#if LV_USE_ROLLER
        case LV_THEME_ROLLER:
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_BG);
 8024fa0:	2100      	movs	r1, #0
 8024fa2:	68b8      	ldr	r0, [r7, #8]
 8024fa4:	f7e1 fd90 	bl	8006ac8 <lv_obj_get_style_list>
 8024fa8:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024faa:	4b4a      	ldr	r3, [pc, #296]	; (80250d4 <theme_apply+0x654>)
 8024fac:	681b      	ldr	r3, [r3, #0]
 8024fae:	3304      	adds	r3, #4
 8024fb0:	4619      	mov	r1, r3
 8024fb2:	6938      	ldr	r0, [r7, #16]
 8024fb4:	f7e6 f9e4 	bl	800b380 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->roller_bg);
 8024fb8:	4b46      	ldr	r3, [pc, #280]	; (80250d4 <theme_apply+0x654>)
 8024fba:	681b      	ldr	r3, [r3, #0]
 8024fbc:	338c      	adds	r3, #140	; 0x8c
 8024fbe:	4619      	mov	r1, r3
 8024fc0:	6938      	ldr	r0, [r7, #16]
 8024fc2:	f7e6 f9dd 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_SELECTED);
 8024fc6:	2103      	movs	r1, #3
 8024fc8:	68b8      	ldr	r0, [r7, #8]
 8024fca:	f7e1 fd7d 	bl	8006ac8 <lv_obj_get_style_list>
 8024fce:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->roller_sel);
 8024fd0:	4b40      	ldr	r3, [pc, #256]	; (80250d4 <theme_apply+0x654>)
 8024fd2:	681b      	ldr	r3, [r3, #0]
 8024fd4:	3390      	adds	r3, #144	; 0x90
 8024fd6:	4619      	mov	r1, r3
 8024fd8:	6938      	ldr	r0, [r7, #16]
 8024fda:	f7e6 f9d1 	bl	800b380 <_lv_style_list_add_style>
            break;
 8024fde:	e21c      	b.n	802541a <theme_apply+0x99a>
#endif

#if LV_USE_OBJMASK
        case LV_THEME_OBJMASK:
            list = lv_obj_get_style_list(obj, LV_OBJMASK_PART_MAIN);
 8024fe0:	2100      	movs	r1, #0
 8024fe2:	68b8      	ldr	r0, [r7, #8]
 8024fe4:	f7e1 fd70 	bl	8006ac8 <lv_obj_get_style_list>
 8024fe8:	6138      	str	r0, [r7, #16]
            break;
 8024fea:	e216      	b.n	802541a <theme_apply+0x99a>
#endif

#if LV_USE_LIST
        case LV_THEME_LIST:
            list = lv_obj_get_style_list(obj, LV_LIST_PART_BG);
 8024fec:	2100      	movs	r1, #0
 8024fee:	68b8      	ldr	r0, [r7, #8]
 8024ff0:	f7e1 fd6a 	bl	8006ac8 <lv_obj_get_style_list>
 8024ff4:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8024ff6:	4b37      	ldr	r3, [pc, #220]	; (80250d4 <theme_apply+0x654>)
 8024ff8:	681b      	ldr	r3, [r3, #0]
 8024ffa:	3304      	adds	r3, #4
 8024ffc:	4619      	mov	r1, r3
 8024ffe:	6938      	ldr	r0, [r7, #16]
 8025000:	f7e6 f9be 	bl	800b380 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->list_bg);
 8025004:	4b33      	ldr	r3, [pc, #204]	; (80250d4 <theme_apply+0x654>)
 8025006:	681b      	ldr	r3, [r3, #0]
 8025008:	3378      	adds	r3, #120	; 0x78
 802500a:	4619      	mov	r1, r3
 802500c:	6938      	ldr	r0, [r7, #16]
 802500e:	f7e6 f9b7 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_LIST_PART_SCROLLBAR);
 8025012:	2101      	movs	r1, #1
 8025014:	68b8      	ldr	r0, [r7, #8]
 8025016:	f7e1 fd57 	bl	8006ac8 <lv_obj_get_style_list>
 802501a:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->sb);
 802501c:	4b2d      	ldr	r3, [pc, #180]	; (80250d4 <theme_apply+0x654>)
 802501e:	681b      	ldr	r3, [r3, #0]
 8025020:	3384      	adds	r3, #132	; 0x84
 8025022:	4619      	mov	r1, r3
 8025024:	6938      	ldr	r0, [r7, #16]
 8025026:	f7e6 f9ab 	bl	800b380 <_lv_style_list_add_style>
            break;
 802502a:	e1f6      	b.n	802541a <theme_apply+0x99a>

        case LV_THEME_LIST_BTN:
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 802502c:	2100      	movs	r1, #0
 802502e:	68b8      	ldr	r0, [r7, #8]
 8025030:	f7e1 fd4a 	bl	8006ac8 <lv_obj_get_style_list>
 8025034:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->list_btn);
 8025036:	4b27      	ldr	r3, [pc, #156]	; (80250d4 <theme_apply+0x654>)
 8025038:	681b      	ldr	r3, [r3, #0]
 802503a:	337c      	adds	r3, #124	; 0x7c
 802503c:	4619      	mov	r1, r3
 802503e:	6938      	ldr	r0, [r7, #16]
 8025040:	f7e6 f99e 	bl	800b380 <_lv_style_list_add_style>
            break;
 8025044:	e1e9      	b.n	802541a <theme_apply+0x99a>
#endif

#if LV_USE_DROPDOWN
        case LV_THEME_DROPDOWN:
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_MAIN);
 8025046:	2100      	movs	r1, #0
 8025048:	68b8      	ldr	r0, [r7, #8]
 802504a:	f7e1 fd3d 	bl	8006ac8 <lv_obj_get_style_list>
 802504e:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8025050:	4b20      	ldr	r3, [pc, #128]	; (80250d4 <theme_apply+0x654>)
 8025052:	681b      	ldr	r3, [r3, #0]
 8025054:	3304      	adds	r3, #4
 8025056:	4619      	mov	r1, r3
 8025058:	6938      	ldr	r0, [r7, #16]
 802505a:	f7e6 f991 	bl	800b380 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 802505e:	4b1d      	ldr	r3, [pc, #116]	; (80250d4 <theme_apply+0x654>)
 8025060:	681b      	ldr	r3, [r3, #0]
 8025062:	3308      	adds	r3, #8
 8025064:	4619      	mov	r1, r3
 8025066:	6938      	ldr	r0, [r7, #16]
 8025068:	f7e6 f98a 	bl	800b380 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 802506c:	4b19      	ldr	r3, [pc, #100]	; (80250d4 <theme_apply+0x654>)
 802506e:	681b      	ldr	r3, [r3, #0]
 8025070:	3318      	adds	r3, #24
 8025072:	4619      	mov	r1, r3
 8025074:	6938      	ldr	r0, [r7, #16]
 8025076:	f7e6 f983 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_LIST);
 802507a:	2140      	movs	r1, #64	; 0x40
 802507c:	68b8      	ldr	r0, [r7, #8]
 802507e:	f7e1 fd23 	bl	8006ac8 <lv_obj_get_style_list>
 8025082:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8025084:	4b13      	ldr	r3, [pc, #76]	; (80250d4 <theme_apply+0x654>)
 8025086:	681b      	ldr	r3, [r3, #0]
 8025088:	3304      	adds	r3, #4
 802508a:	4619      	mov	r1, r3
 802508c:	6938      	ldr	r0, [r7, #16]
 802508e:	f7e6 f977 	bl	800b380 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->ddlist_page);
 8025092:	4b10      	ldr	r3, [pc, #64]	; (80250d4 <theme_apply+0x654>)
 8025094:	681b      	ldr	r3, [r3, #0]
 8025096:	3358      	adds	r3, #88	; 0x58
 8025098:	4619      	mov	r1, r3
 802509a:	6938      	ldr	r0, [r7, #16]
 802509c:	f7e6 f970 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
 80250a0:	2141      	movs	r1, #65	; 0x41
 80250a2:	68b8      	ldr	r0, [r7, #8]
 80250a4:	f7e1 fd10 	bl	8006ac8 <lv_obj_get_style_list>
 80250a8:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->sb);
 80250aa:	4b0a      	ldr	r3, [pc, #40]	; (80250d4 <theme_apply+0x654>)
 80250ac:	681b      	ldr	r3, [r3, #0]
 80250ae:	3384      	adds	r3, #132	; 0x84
 80250b0:	4619      	mov	r1, r3
 80250b2:	6938      	ldr	r0, [r7, #16]
 80250b4:	f7e6 f964 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SELECTED);
 80250b8:	2142      	movs	r1, #66	; 0x42
 80250ba:	68b8      	ldr	r0, [r7, #8]
 80250bc:	f7e1 fd04 	bl	8006ac8 <lv_obj_get_style_list>
 80250c0:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->ddlist_sel);
 80250c2:	4b04      	ldr	r3, [pc, #16]	; (80250d4 <theme_apply+0x654>)
 80250c4:	681b      	ldr	r3, [r3, #0]
 80250c6:	335c      	adds	r3, #92	; 0x5c
 80250c8:	4619      	mov	r1, r3
 80250ca:	6938      	ldr	r0, [r7, #16]
 80250cc:	f7e6 f958 	bl	800b380 <_lv_style_list_add_style>
            break;
 80250d0:	e1a3      	b.n	802541a <theme_apply+0x99a>
 80250d2:	bf00      	nop
 80250d4:	20021498 	.word	0x20021498
#endif

#if LV_USE_CHART
        case LV_THEME_CHART:
            list = lv_obj_get_style_list(obj, LV_CHART_PART_BG);
 80250d8:	2100      	movs	r1, #0
 80250da:	68b8      	ldr	r0, [r7, #8]
 80250dc:	f7e1 fcf4 	bl	8006ac8 <lv_obj_get_style_list>
 80250e0:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 80250e2:	4bac      	ldr	r3, [pc, #688]	; (8025394 <theme_apply+0x914>)
 80250e4:	681b      	ldr	r3, [r3, #0]
 80250e6:	3304      	adds	r3, #4
 80250e8:	4619      	mov	r1, r3
 80250ea:	6938      	ldr	r0, [r7, #16]
 80250ec:	f7e6 f948 	bl	800b380 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->chart_bg);
 80250f0:	4ba8      	ldr	r3, [pc, #672]	; (8025394 <theme_apply+0x914>)
 80250f2:	681b      	ldr	r3, [r3, #0]
 80250f4:	3344      	adds	r3, #68	; 0x44
 80250f6:	4619      	mov	r1, r3
 80250f8:	6938      	ldr	r0, [r7, #16]
 80250fa:	f7e6 f941 	bl	800b380 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 80250fe:	4ba5      	ldr	r3, [pc, #660]	; (8025394 <theme_apply+0x914>)
 8025100:	681b      	ldr	r3, [r3, #0]
 8025102:	3318      	adds	r3, #24
 8025104:	4619      	mov	r1, r3
 8025106:	6938      	ldr	r0, [r7, #16]
 8025108:	f7e6 f93a 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES_BG);
 802510c:	2101      	movs	r1, #1
 802510e:	68b8      	ldr	r0, [r7, #8]
 8025110:	f7e1 fcda 	bl	8006ac8 <lv_obj_get_style_list>
 8025114:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->pad_small);
 8025116:	4b9f      	ldr	r3, [pc, #636]	; (8025394 <theme_apply+0x914>)
 8025118:	681b      	ldr	r3, [r3, #0]
 802511a:	3318      	adds	r3, #24
 802511c:	4619      	mov	r1, r3
 802511e:	6938      	ldr	r0, [r7, #16]
 8025120:	f7e6 f92e 	bl	800b380 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->chart_series_bg);
 8025124:	4b9b      	ldr	r3, [pc, #620]	; (8025394 <theme_apply+0x914>)
 8025126:	681b      	ldr	r3, [r3, #0]
 8025128:	3348      	adds	r3, #72	; 0x48
 802512a:	4619      	mov	r1, r3
 802512c:	6938      	ldr	r0, [r7, #16]
 802512e:	f7e6 f927 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_CHART_PART_CURSOR);
 8025132:	2103      	movs	r1, #3
 8025134:	68b8      	ldr	r0, [r7, #8]
 8025136:	f7e1 fcc7 	bl	8006ac8 <lv_obj_get_style_list>
 802513a:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->chart_series_bg);
 802513c:	4b95      	ldr	r3, [pc, #596]	; (8025394 <theme_apply+0x914>)
 802513e:	681b      	ldr	r3, [r3, #0]
 8025140:	3348      	adds	r3, #72	; 0x48
 8025142:	4619      	mov	r1, r3
 8025144:	6938      	ldr	r0, [r7, #16]
 8025146:	f7e6 f91b 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES);
 802514a:	2102      	movs	r1, #2
 802514c:	68b8      	ldr	r0, [r7, #8]
 802514e:	f7e1 fcbb 	bl	8006ac8 <lv_obj_get_style_list>
 8025152:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->chart_series);
 8025154:	4b8f      	ldr	r3, [pc, #572]	; (8025394 <theme_apply+0x914>)
 8025156:	681b      	ldr	r3, [r3, #0]
 8025158:	334c      	adds	r3, #76	; 0x4c
 802515a:	4619      	mov	r1, r3
 802515c:	6938      	ldr	r0, [r7, #16]
 802515e:	f7e6 f90f 	bl	800b380 <_lv_style_list_add_style>
            break;
 8025162:	e15a      	b.n	802541a <theme_apply+0x99a>
#endif
#if LV_USE_TABLE
        case LV_THEME_TABLE: {
                list = lv_obj_get_style_list(obj, LV_TABLE_PART_BG);
 8025164:	2100      	movs	r1, #0
 8025166:	68b8      	ldr	r0, [r7, #8]
 8025168:	f7e1 fcae 	bl	8006ac8 <lv_obj_get_style_list>
 802516c:	6138      	str	r0, [r7, #16]
                _lv_style_list_add_style(list, &styles->bg);
 802516e:	4b89      	ldr	r3, [pc, #548]	; (8025394 <theme_apply+0x914>)
 8025170:	681b      	ldr	r3, [r3, #0]
 8025172:	3304      	adds	r3, #4
 8025174:	4619      	mov	r1, r3
 8025176:	6938      	ldr	r0, [r7, #16]
 8025178:	f7e6 f902 	bl	800b380 <_lv_style_list_add_style>

                int idx = 1; /* start value should be 1, not zero, since cell styles
 802517c:	2301      	movs	r3, #1
 802517e:	617b      	str	r3, [r7, #20]
                            start at 1 due to presence of LV_TABLE_PART_BG=0
                            in the enum (lv_table.h) */
                /* declaring idx outside loop to work with older compilers */
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
 8025180:	e010      	b.n	80251a4 <theme_apply+0x724>
                    list = lv_obj_get_style_list(obj, idx);
 8025182:	697b      	ldr	r3, [r7, #20]
 8025184:	b2db      	uxtb	r3, r3
 8025186:	4619      	mov	r1, r3
 8025188:	68b8      	ldr	r0, [r7, #8]
 802518a:	f7e1 fc9d 	bl	8006ac8 <lv_obj_get_style_list>
 802518e:	6138      	str	r0, [r7, #16]
                    _lv_style_list_add_style(list, &styles->table_cell);
 8025190:	4b80      	ldr	r3, [pc, #512]	; (8025394 <theme_apply+0x914>)
 8025192:	681b      	ldr	r3, [r3, #0]
 8025194:	33a4      	adds	r3, #164	; 0xa4
 8025196:	4619      	mov	r1, r3
 8025198:	6938      	ldr	r0, [r7, #16]
 802519a:	f7e6 f8f1 	bl	800b380 <_lv_style_list_add_style>
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
 802519e:	697b      	ldr	r3, [r7, #20]
 80251a0:	3301      	adds	r3, #1
 80251a2:	617b      	str	r3, [r7, #20]
 80251a4:	697b      	ldr	r3, [r7, #20]
 80251a6:	2b04      	cmp	r3, #4
 80251a8:	ddeb      	ble.n	8025182 <theme_apply+0x702>
                }
                break;
 80251aa:	e136      	b.n	802541a <theme_apply+0x99a>
            }
#endif

#if LV_USE_WIN
        case LV_THEME_WIN:
            list = lv_obj_get_style_list(obj, LV_WIN_PART_BG);
 80251ac:	2100      	movs	r1, #0
 80251ae:	68b8      	ldr	r0, [r7, #8]
 80251b0:	f7e1 fc8a 	bl	8006ac8 <lv_obj_get_style_list>
 80251b4:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->scr);
 80251b6:	4b77      	ldr	r3, [pc, #476]	; (8025394 <theme_apply+0x914>)
 80251b8:	681b      	ldr	r3, [r3, #0]
 80251ba:	4619      	mov	r1, r3
 80251bc:	6938      	ldr	r0, [r7, #16]
 80251be:	f7e6 f8df 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_WIN_PART_SCROLLBAR);
 80251c2:	2142      	movs	r1, #66	; 0x42
 80251c4:	68b8      	ldr	r0, [r7, #8]
 80251c6:	f7e1 fc7f 	bl	8006ac8 <lv_obj_get_style_list>
 80251ca:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->sb);
 80251cc:	4b71      	ldr	r3, [pc, #452]	; (8025394 <theme_apply+0x914>)
 80251ce:	681b      	ldr	r3, [r3, #0]
 80251d0:	3384      	adds	r3, #132	; 0x84
 80251d2:	4619      	mov	r1, r3
 80251d4:	6938      	ldr	r0, [r7, #16]
 80251d6:	f7e6 f8d3 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
 80251da:	2141      	movs	r1, #65	; 0x41
 80251dc:	68b8      	ldr	r0, [r7, #8]
 80251de:	f7e1 fc73 	bl	8006ac8 <lv_obj_get_style_list>
 80251e2:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
 80251e4:	4b6b      	ldr	r3, [pc, #428]	; (8025394 <theme_apply+0x914>)
 80251e6:	681b      	ldr	r3, [r3, #0]
 80251e8:	33b4      	adds	r3, #180	; 0xb4
 80251ea:	4619      	mov	r1, r3
 80251ec:	6938      	ldr	r0, [r7, #16]
 80251ee:	f7e6 f8c7 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_WIN_PART_HEADER);
 80251f2:	2140      	movs	r1, #64	; 0x40
 80251f4:	68b8      	ldr	r0, [r7, #8]
 80251f6:	f7e1 fc67 	bl	8006ac8 <lv_obj_get_style_list>
 80251fa:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
 80251fc:	4b65      	ldr	r3, [pc, #404]	; (8025394 <theme_apply+0x914>)
 80251fe:	681b      	ldr	r3, [r3, #0]
 8025200:	33ac      	adds	r3, #172	; 0xac
 8025202:	4619      	mov	r1, r3
 8025204:	6938      	ldr	r0, [r7, #16]
 8025206:	f7e6 f8bb 	bl	800b380 <_lv_style_list_add_style>
            break;
 802520a:	e106      	b.n	802541a <theme_apply+0x99a>

        case LV_THEME_WIN_BTN:
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 802520c:	2100      	movs	r1, #0
 802520e:	68b8      	ldr	r0, [r7, #8]
 8025210:	f7e1 fc5a 	bl	8006ac8 <lv_obj_get_style_list>
 8025214:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->tabview_btns);
 8025216:	4b5f      	ldr	r3, [pc, #380]	; (8025394 <theme_apply+0x914>)
 8025218:	681b      	ldr	r3, [r3, #0]
 802521a:	33a8      	adds	r3, #168	; 0xa8
 802521c:	4619      	mov	r1, r3
 802521e:	6938      	ldr	r0, [r7, #16]
 8025220:	f7e6 f8ae 	bl	800b380 <_lv_style_list_add_style>
            break;
 8025224:	e0f9      	b.n	802541a <theme_apply+0x99a>
#endif

#if LV_USE_TEXTAREA
        case LV_THEME_TEXTAREA:
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_BG);
 8025226:	2100      	movs	r1, #0
 8025228:	68b8      	ldr	r0, [r7, #8]
 802522a:	f7e1 fc4d 	bl	8006ac8 <lv_obj_get_style_list>
 802522e:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8025230:	4b58      	ldr	r3, [pc, #352]	; (8025394 <theme_apply+0x914>)
 8025232:	681b      	ldr	r3, [r3, #0]
 8025234:	3304      	adds	r3, #4
 8025236:	4619      	mov	r1, r3
 8025238:	6938      	ldr	r0, [r7, #16]
 802523a:	f7e6 f8a1 	bl	800b380 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 802523e:	4b55      	ldr	r3, [pc, #340]	; (8025394 <theme_apply+0x914>)
 8025240:	681b      	ldr	r3, [r3, #0]
 8025242:	3318      	adds	r3, #24
 8025244:	4619      	mov	r1, r3
 8025246:	6938      	ldr	r0, [r7, #16]
 8025248:	f7e6 f89a 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
 802524c:	2104      	movs	r1, #4
 802524e:	68b8      	ldr	r0, [r7, #8]
 8025250:	f7e1 fc3a 	bl	8006ac8 <lv_obj_get_style_list>
 8025254:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->ta_placeholder);
 8025256:	4b4f      	ldr	r3, [pc, #316]	; (8025394 <theme_apply+0x914>)
 8025258:	681b      	ldr	r3, [r3, #0]
 802525a:	33bc      	adds	r3, #188	; 0xbc
 802525c:	4619      	mov	r1, r3
 802525e:	6938      	ldr	r0, [r7, #16]
 8025260:	f7e6 f88e 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_CURSOR);
 8025264:	2103      	movs	r1, #3
 8025266:	68b8      	ldr	r0, [r7, #8]
 8025268:	f7e1 fc2e 	bl	8006ac8 <lv_obj_get_style_list>
 802526c:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->ta_cursor);
 802526e:	4b49      	ldr	r3, [pc, #292]	; (8025394 <theme_apply+0x914>)
 8025270:	681b      	ldr	r3, [r3, #0]
 8025272:	33b8      	adds	r3, #184	; 0xb8
 8025274:	4619      	mov	r1, r3
 8025276:	6938      	ldr	r0, [r7, #16]
 8025278:	f7e6 f882 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
 802527c:	2101      	movs	r1, #1
 802527e:	68b8      	ldr	r0, [r7, #8]
 8025280:	f7e1 fc22 	bl	8006ac8 <lv_obj_get_style_list>
 8025284:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->sb);
 8025286:	4b43      	ldr	r3, [pc, #268]	; (8025394 <theme_apply+0x914>)
 8025288:	681b      	ldr	r3, [r3, #0]
 802528a:	3384      	adds	r3, #132	; 0x84
 802528c:	4619      	mov	r1, r3
 802528e:	6938      	ldr	r0, [r7, #16]
 8025290:	f7e6 f876 	bl	800b380 <_lv_style_list_add_style>
            break;
 8025294:	e0c1      	b.n	802541a <theme_apply+0x99a>

#endif

#if LV_USE_SPINBOX
        case LV_THEME_SPINBOX:
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_BG);
 8025296:	2100      	movs	r1, #0
 8025298:	68b8      	ldr	r0, [r7, #8]
 802529a:	f7e1 fc15 	bl	8006ac8 <lv_obj_get_style_list>
 802529e:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 80252a0:	4b3c      	ldr	r3, [pc, #240]	; (8025394 <theme_apply+0x914>)
 80252a2:	681b      	ldr	r3, [r3, #0]
 80252a4:	3304      	adds	r3, #4
 80252a6:	4619      	mov	r1, r3
 80252a8:	6938      	ldr	r0, [r7, #16]
 80252aa:	f7e6 f869 	bl	800b380 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->pad_small);
 80252ae:	4b39      	ldr	r3, [pc, #228]	; (8025394 <theme_apply+0x914>)
 80252b0:	681b      	ldr	r3, [r3, #0]
 80252b2:	3318      	adds	r3, #24
 80252b4:	4619      	mov	r1, r3
 80252b6:	6938      	ldr	r0, [r7, #16]
 80252b8:	f7e6 f862 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_CURSOR);
 80252bc:	2103      	movs	r1, #3
 80252be:	68b8      	ldr	r0, [r7, #8]
 80252c0:	f7e1 fc02 	bl	8006ac8 <lv_obj_get_style_list>
 80252c4:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->spinbox_cursor);
 80252c6:	4b33      	ldr	r3, [pc, #204]	; (8025394 <theme_apply+0x914>)
 80252c8:	681b      	ldr	r3, [r3, #0]
 80252ca:	339c      	adds	r3, #156	; 0x9c
 80252cc:	4619      	mov	r1, r3
 80252ce:	6938      	ldr	r0, [r7, #16]
 80252d0:	f7e6 f856 	bl	800b380 <_lv_style_list_add_style>
            break;
 80252d4:	e0a1      	b.n	802541a <theme_apply+0x99a>

        case LV_THEME_SPINBOX_BTN:
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
 80252d6:	2100      	movs	r1, #0
 80252d8:	68b8      	ldr	r0, [r7, #8]
 80252da:	f7e1 fbf5 	bl	8006ac8 <lv_obj_get_style_list>
 80252de:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 80252e0:	4b2c      	ldr	r3, [pc, #176]	; (8025394 <theme_apply+0x914>)
 80252e2:	681b      	ldr	r3, [r3, #0]
 80252e4:	3304      	adds	r3, #4
 80252e6:	4619      	mov	r1, r3
 80252e8:	6938      	ldr	r0, [r7, #16]
 80252ea:	f7e6 f849 	bl	800b380 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->bg_click);
 80252ee:	4b29      	ldr	r3, [pc, #164]	; (8025394 <theme_apply+0x914>)
 80252f0:	681b      	ldr	r3, [r3, #0]
 80252f2:	3308      	adds	r3, #8
 80252f4:	4619      	mov	r1, r3
 80252f6:	6938      	ldr	r0, [r7, #16]
 80252f8:	f7e6 f842 	bl	800b380 <_lv_style_list_add_style>
            break;
 80252fc:	e08d      	b.n	802541a <theme_apply+0x99a>
#endif

#if LV_USE_CALENDAR
        case LV_THEME_CALENDAR:
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_BG);
 80252fe:	2100      	movs	r1, #0
 8025300:	68b8      	ldr	r0, [r7, #8]
 8025302:	f7e1 fbe1 	bl	8006ac8 <lv_obj_get_style_list>
 8025306:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 8025308:	4b22      	ldr	r3, [pc, #136]	; (8025394 <theme_apply+0x914>)
 802530a:	681b      	ldr	r3, [r3, #0]
 802530c:	3304      	adds	r3, #4
 802530e:	4619      	mov	r1, r3
 8025310:	6938      	ldr	r0, [r7, #16]
 8025312:	f7e6 f835 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DATE);
 8025316:	2103      	movs	r1, #3
 8025318:	68b8      	ldr	r0, [r7, #8]
 802531a:	f7e1 fbd5 	bl	8006ac8 <lv_obj_get_style_list>
 802531e:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->calendar_date_nums);
 8025320:	4b1c      	ldr	r3, [pc, #112]	; (8025394 <theme_apply+0x914>)
 8025322:	681b      	ldr	r3, [r3, #0]
 8025324:	3330      	adds	r3, #48	; 0x30
 8025326:	4619      	mov	r1, r3
 8025328:	6938      	ldr	r0, [r7, #16]
 802532a:	f7e6 f829 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_HEADER);
 802532e:	2101      	movs	r1, #1
 8025330:	68b8      	ldr	r0, [r7, #8]
 8025332:	f7e1 fbc9 	bl	8006ac8 <lv_obj_get_style_list>
 8025336:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->calendar_header);
 8025338:	4b16      	ldr	r3, [pc, #88]	; (8025394 <theme_apply+0x914>)
 802533a:	681b      	ldr	r3, [r3, #0]
 802533c:	3334      	adds	r3, #52	; 0x34
 802533e:	4619      	mov	r1, r3
 8025340:	6938      	ldr	r0, [r7, #16]
 8025342:	f7e6 f81d 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
 8025346:	2102      	movs	r1, #2
 8025348:	68b8      	ldr	r0, [r7, #8]
 802534a:	f7e1 fbbd 	bl	8006ac8 <lv_obj_get_style_list>
 802534e:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->calendar_daynames);
 8025350:	4b10      	ldr	r3, [pc, #64]	; (8025394 <theme_apply+0x914>)
 8025352:	681b      	ldr	r3, [r3, #0]
 8025354:	3338      	adds	r3, #56	; 0x38
 8025356:	4619      	mov	r1, r3
 8025358:	6938      	ldr	r0, [r7, #16]
 802535a:	f7e6 f811 	bl	800b380 <_lv_style_list_add_style>
            break;
 802535e:	e05c      	b.n	802541a <theme_apply+0x99a>
#endif
#if LV_USE_CPICKER
        case LV_THEME_CPICKER:
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_MAIN);
 8025360:	2100      	movs	r1, #0
 8025362:	68b8      	ldr	r0, [r7, #8]
 8025364:	f7e1 fbb0 	bl	8006ac8 <lv_obj_get_style_list>
 8025368:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->cpicker_bg);
 802536a:	4b0a      	ldr	r3, [pc, #40]	; (8025394 <theme_apply+0x914>)
 802536c:	681b      	ldr	r3, [r3, #0]
 802536e:	333c      	adds	r3, #60	; 0x3c
 8025370:	4619      	mov	r1, r3
 8025372:	6938      	ldr	r0, [r7, #16]
 8025374:	f7e6 f804 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_KNOB);
 8025378:	2101      	movs	r1, #1
 802537a:	68b8      	ldr	r0, [r7, #8]
 802537c:	f7e1 fba4 	bl	8006ac8 <lv_obj_get_style_list>
 8025380:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->cpicker_indic);
 8025382:	4b04      	ldr	r3, [pc, #16]	; (8025394 <theme_apply+0x914>)
 8025384:	681b      	ldr	r3, [r3, #0]
 8025386:	3340      	adds	r3, #64	; 0x40
 8025388:	4619      	mov	r1, r3
 802538a:	6938      	ldr	r0, [r7, #16]
 802538c:	f7e5 fff8 	bl	800b380 <_lv_style_list_add_style>
            break;
 8025390:	e043      	b.n	802541a <theme_apply+0x99a>
 8025392:	bf00      	nop
 8025394:	20021498 	.word	0x20021498
#endif

#if LV_USE_LINEMETER
        case LV_THEME_LINEMETER:
            list = lv_obj_get_style_list(obj, LV_LINEMETER_PART_MAIN);
 8025398:	2100      	movs	r1, #0
 802539a:	68b8      	ldr	r0, [r7, #8]
 802539c:	f7e1 fb94 	bl	8006ac8 <lv_obj_get_style_list>
 80253a0:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 80253a2:	4b22      	ldr	r3, [pc, #136]	; (802542c <theme_apply+0x9ac>)
 80253a4:	681b      	ldr	r3, [r3, #0]
 80253a6:	3304      	adds	r3, #4
 80253a8:	4619      	mov	r1, r3
 80253aa:	6938      	ldr	r0, [r7, #16]
 80253ac:	f7e5 ffe8 	bl	800b380 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->lmeter);
 80253b0:	4b1e      	ldr	r3, [pc, #120]	; (802542c <theme_apply+0x9ac>)
 80253b2:	681b      	ldr	r3, [r3, #0]
 80253b4:	3374      	adds	r3, #116	; 0x74
 80253b6:	4619      	mov	r1, r3
 80253b8:	6938      	ldr	r0, [r7, #16]
 80253ba:	f7e5 ffe1 	bl	800b380 <_lv_style_list_add_style>
            break;
 80253be:	e02c      	b.n	802541a <theme_apply+0x99a>
#endif
#if LV_USE_GAUGE
        case LV_THEME_GAUGE:
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAIN);
 80253c0:	2100      	movs	r1, #0
 80253c2:	68b8      	ldr	r0, [r7, #8]
 80253c4:	f7e1 fb80 	bl	8006ac8 <lv_obj_get_style_list>
 80253c8:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->bg);
 80253ca:	4b18      	ldr	r3, [pc, #96]	; (802542c <theme_apply+0x9ac>)
 80253cc:	681b      	ldr	r3, [r3, #0]
 80253ce:	3304      	adds	r3, #4
 80253d0:	4619      	mov	r1, r3
 80253d2:	6938      	ldr	r0, [r7, #16]
 80253d4:	f7e5 ffd4 	bl	800b380 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->gauge_main);
 80253d8:	4b14      	ldr	r3, [pc, #80]	; (802542c <theme_apply+0x9ac>)
 80253da:	681b      	ldr	r3, [r3, #0]
 80253dc:	3360      	adds	r3, #96	; 0x60
 80253de:	4619      	mov	r1, r3
 80253e0:	6938      	ldr	r0, [r7, #16]
 80253e2:	f7e5 ffcd 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAJOR);
 80253e6:	2101      	movs	r1, #1
 80253e8:	68b8      	ldr	r0, [r7, #8]
 80253ea:	f7e1 fb6d 	bl	8006ac8 <lv_obj_get_style_list>
 80253ee:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->gauge_strong);
 80253f0:	4b0e      	ldr	r3, [pc, #56]	; (802542c <theme_apply+0x9ac>)
 80253f2:	681b      	ldr	r3, [r3, #0]
 80253f4:	3364      	adds	r3, #100	; 0x64
 80253f6:	4619      	mov	r1, r3
 80253f8:	6938      	ldr	r0, [r7, #16]
 80253fa:	f7e5 ffc1 	bl	800b380 <_lv_style_list_add_style>

            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_NEEDLE);
 80253fe:	2102      	movs	r1, #2
 8025400:	68b8      	ldr	r0, [r7, #8]
 8025402:	f7e1 fb61 	bl	8006ac8 <lv_obj_get_style_list>
 8025406:	6138      	str	r0, [r7, #16]
            _lv_style_list_add_style(list, &styles->gauge_needle);
 8025408:	4b08      	ldr	r3, [pc, #32]	; (802542c <theme_apply+0x9ac>)
 802540a:	681b      	ldr	r3, [r3, #0]
 802540c:	3368      	adds	r3, #104	; 0x68
 802540e:	4619      	mov	r1, r3
 8025410:	6938      	ldr	r0, [r7, #16]
 8025412:	f7e5 ffb5 	bl	800b380 <_lv_style_list_add_style>
            break;
 8025416:	e000      	b.n	802541a <theme_apply+0x99a>
#endif
        default:
            break;
 8025418:	bf00      	nop
    }

    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
 802541a:	22ff      	movs	r2, #255	; 0xff
 802541c:	21ff      	movs	r1, #255	; 0xff
 802541e:	68b8      	ldr	r0, [r7, #8]
 8025420:	f7e0 fd68 	bl	8005ef4 <lv_obj_refresh_style>
}
 8025424:	bf00      	nop
 8025426:	3718      	adds	r7, #24
 8025428:	46bd      	mov	sp, r7
 802542a:	bd80      	pop	{r7, pc}
 802542c:	20021498 	.word	0x20021498

08025430 <style_init_reset>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
 8025430:	b580      	push	{r7, lr}
 8025432:	b082      	sub	sp, #8
 8025434:	af00      	add	r7, sp, #0
 8025436:	6078      	str	r0, [r7, #4]
    if(inited) lv_style_reset(style);
 8025438:	4b07      	ldr	r3, [pc, #28]	; (8025458 <style_init_reset+0x28>)
 802543a:	781b      	ldrb	r3, [r3, #0]
 802543c:	2b00      	cmp	r3, #0
 802543e:	d003      	beq.n	8025448 <style_init_reset+0x18>
 8025440:	6878      	ldr	r0, [r7, #4]
 8025442:	f7e6 f936 	bl	800b6b2 <lv_style_reset>
    else lv_style_init(style);
}
 8025446:	e002      	b.n	802544e <style_init_reset+0x1e>
    else lv_style_init(style);
 8025448:	6878      	ldr	r0, [r7, #4]
 802544a:	f7e5 fe26 	bl	800b09a <lv_style_init>
}
 802544e:	bf00      	nop
 8025450:	3708      	adds	r7, #8
 8025452:	46bd      	mov	sp, r7
 8025454:	bd80      	pop	{r7, pc}
 8025456:	bf00      	nop
 8025458:	2002149c 	.word	0x2002149c

0802545c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802545c:	b580      	push	{r7, lr}
 802545e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8025460:	2003      	movs	r0, #3
 8025462:	f000 f8f8 	bl	8025656 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8025466:	2000      	movs	r0, #0
 8025468:	f7dc f8a6 	bl	80015b8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 802546c:	f7dc f880 	bl	8001570 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8025470:	2300      	movs	r3, #0
}
 8025472:	4618      	mov	r0, r3
 8025474:	bd80      	pop	{r7, pc}
	...

08025478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8025478:	b480      	push	{r7}
 802547a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 802547c:	4b06      	ldr	r3, [pc, #24]	; (8025498 <HAL_IncTick+0x20>)
 802547e:	781b      	ldrb	r3, [r3, #0]
 8025480:	461a      	mov	r2, r3
 8025482:	4b06      	ldr	r3, [pc, #24]	; (802549c <HAL_IncTick+0x24>)
 8025484:	681b      	ldr	r3, [r3, #0]
 8025486:	4413      	add	r3, r2
 8025488:	4a04      	ldr	r2, [pc, #16]	; (802549c <HAL_IncTick+0x24>)
 802548a:	6013      	str	r3, [r2, #0]
}
 802548c:	bf00      	nop
 802548e:	46bd      	mov	sp, r7
 8025490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025494:	4770      	bx	lr
 8025496:	bf00      	nop
 8025498:	20001418 	.word	0x20001418
 802549c:	20021908 	.word	0x20021908

080254a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80254a0:	b480      	push	{r7}
 80254a2:	af00      	add	r7, sp, #0
  return uwTick;
 80254a4:	4b03      	ldr	r3, [pc, #12]	; (80254b4 <HAL_GetTick+0x14>)
 80254a6:	681b      	ldr	r3, [r3, #0]
}
 80254a8:	4618      	mov	r0, r3
 80254aa:	46bd      	mov	sp, r7
 80254ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254b0:	4770      	bx	lr
 80254b2:	bf00      	nop
 80254b4:	20021908 	.word	0x20021908

080254b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80254b8:	b580      	push	{r7, lr}
 80254ba:	b084      	sub	sp, #16
 80254bc:	af00      	add	r7, sp, #0
 80254be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80254c0:	f7ff ffee 	bl	80254a0 <HAL_GetTick>
 80254c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80254c6:	687b      	ldr	r3, [r7, #4]
 80254c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80254ca:	68fb      	ldr	r3, [r7, #12]
 80254cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80254d0:	d005      	beq.n	80254de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80254d2:	4b09      	ldr	r3, [pc, #36]	; (80254f8 <HAL_Delay+0x40>)
 80254d4:	781b      	ldrb	r3, [r3, #0]
 80254d6:	461a      	mov	r2, r3
 80254d8:	68fb      	ldr	r3, [r7, #12]
 80254da:	4413      	add	r3, r2
 80254dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80254de:	bf00      	nop
 80254e0:	f7ff ffde 	bl	80254a0 <HAL_GetTick>
 80254e4:	4602      	mov	r2, r0
 80254e6:	68bb      	ldr	r3, [r7, #8]
 80254e8:	1ad3      	subs	r3, r2, r3
 80254ea:	68fa      	ldr	r2, [r7, #12]
 80254ec:	429a      	cmp	r2, r3
 80254ee:	d8f7      	bhi.n	80254e0 <HAL_Delay+0x28>
  {
  }
}
 80254f0:	bf00      	nop
 80254f2:	3710      	adds	r7, #16
 80254f4:	46bd      	mov	sp, r7
 80254f6:	bd80      	pop	{r7, pc}
 80254f8:	20001418 	.word	0x20001418

080254fc <__NVIC_SetPriorityGrouping>:
{
 80254fc:	b480      	push	{r7}
 80254fe:	b085      	sub	sp, #20
 8025500:	af00      	add	r7, sp, #0
 8025502:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8025504:	687b      	ldr	r3, [r7, #4]
 8025506:	f003 0307 	and.w	r3, r3, #7
 802550a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802550c:	4b0b      	ldr	r3, [pc, #44]	; (802553c <__NVIC_SetPriorityGrouping+0x40>)
 802550e:	68db      	ldr	r3, [r3, #12]
 8025510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8025512:	68ba      	ldr	r2, [r7, #8]
 8025514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8025518:	4013      	ands	r3, r2
 802551a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802551c:	68fb      	ldr	r3, [r7, #12]
 802551e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8025520:	68bb      	ldr	r3, [r7, #8]
 8025522:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8025524:	4b06      	ldr	r3, [pc, #24]	; (8025540 <__NVIC_SetPriorityGrouping+0x44>)
 8025526:	4313      	orrs	r3, r2
 8025528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802552a:	4a04      	ldr	r2, [pc, #16]	; (802553c <__NVIC_SetPriorityGrouping+0x40>)
 802552c:	68bb      	ldr	r3, [r7, #8]
 802552e:	60d3      	str	r3, [r2, #12]
}
 8025530:	bf00      	nop
 8025532:	3714      	adds	r7, #20
 8025534:	46bd      	mov	sp, r7
 8025536:	f85d 7b04 	ldr.w	r7, [sp], #4
 802553a:	4770      	bx	lr
 802553c:	e000ed00 	.word	0xe000ed00
 8025540:	05fa0000 	.word	0x05fa0000

08025544 <__NVIC_GetPriorityGrouping>:
{
 8025544:	b480      	push	{r7}
 8025546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8025548:	4b04      	ldr	r3, [pc, #16]	; (802555c <__NVIC_GetPriorityGrouping+0x18>)
 802554a:	68db      	ldr	r3, [r3, #12]
 802554c:	0a1b      	lsrs	r3, r3, #8
 802554e:	f003 0307 	and.w	r3, r3, #7
}
 8025552:	4618      	mov	r0, r3
 8025554:	46bd      	mov	sp, r7
 8025556:	f85d 7b04 	ldr.w	r7, [sp], #4
 802555a:	4770      	bx	lr
 802555c:	e000ed00 	.word	0xe000ed00

08025560 <__NVIC_EnableIRQ>:
{
 8025560:	b480      	push	{r7}
 8025562:	b083      	sub	sp, #12
 8025564:	af00      	add	r7, sp, #0
 8025566:	4603      	mov	r3, r0
 8025568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802556a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802556e:	2b00      	cmp	r3, #0
 8025570:	db0b      	blt.n	802558a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8025572:	79fb      	ldrb	r3, [r7, #7]
 8025574:	f003 021f 	and.w	r2, r3, #31
 8025578:	4907      	ldr	r1, [pc, #28]	; (8025598 <__NVIC_EnableIRQ+0x38>)
 802557a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802557e:	095b      	lsrs	r3, r3, #5
 8025580:	2001      	movs	r0, #1
 8025582:	fa00 f202 	lsl.w	r2, r0, r2
 8025586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 802558a:	bf00      	nop
 802558c:	370c      	adds	r7, #12
 802558e:	46bd      	mov	sp, r7
 8025590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025594:	4770      	bx	lr
 8025596:	bf00      	nop
 8025598:	e000e100 	.word	0xe000e100

0802559c <__NVIC_SetPriority>:
{
 802559c:	b480      	push	{r7}
 802559e:	b083      	sub	sp, #12
 80255a0:	af00      	add	r7, sp, #0
 80255a2:	4603      	mov	r3, r0
 80255a4:	6039      	str	r1, [r7, #0]
 80255a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80255a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80255ac:	2b00      	cmp	r3, #0
 80255ae:	db0a      	blt.n	80255c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80255b0:	683b      	ldr	r3, [r7, #0]
 80255b2:	b2da      	uxtb	r2, r3
 80255b4:	490c      	ldr	r1, [pc, #48]	; (80255e8 <__NVIC_SetPriority+0x4c>)
 80255b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80255ba:	0112      	lsls	r2, r2, #4
 80255bc:	b2d2      	uxtb	r2, r2
 80255be:	440b      	add	r3, r1
 80255c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80255c4:	e00a      	b.n	80255dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80255c6:	683b      	ldr	r3, [r7, #0]
 80255c8:	b2da      	uxtb	r2, r3
 80255ca:	4908      	ldr	r1, [pc, #32]	; (80255ec <__NVIC_SetPriority+0x50>)
 80255cc:	79fb      	ldrb	r3, [r7, #7]
 80255ce:	f003 030f 	and.w	r3, r3, #15
 80255d2:	3b04      	subs	r3, #4
 80255d4:	0112      	lsls	r2, r2, #4
 80255d6:	b2d2      	uxtb	r2, r2
 80255d8:	440b      	add	r3, r1
 80255da:	761a      	strb	r2, [r3, #24]
}
 80255dc:	bf00      	nop
 80255de:	370c      	adds	r7, #12
 80255e0:	46bd      	mov	sp, r7
 80255e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255e6:	4770      	bx	lr
 80255e8:	e000e100 	.word	0xe000e100
 80255ec:	e000ed00 	.word	0xe000ed00

080255f0 <NVIC_EncodePriority>:
{
 80255f0:	b480      	push	{r7}
 80255f2:	b089      	sub	sp, #36	; 0x24
 80255f4:	af00      	add	r7, sp, #0
 80255f6:	60f8      	str	r0, [r7, #12]
 80255f8:	60b9      	str	r1, [r7, #8]
 80255fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80255fc:	68fb      	ldr	r3, [r7, #12]
 80255fe:	f003 0307 	and.w	r3, r3, #7
 8025602:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8025604:	69fb      	ldr	r3, [r7, #28]
 8025606:	f1c3 0307 	rsb	r3, r3, #7
 802560a:	2b04      	cmp	r3, #4
 802560c:	bf28      	it	cs
 802560e:	2304      	movcs	r3, #4
 8025610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8025612:	69fb      	ldr	r3, [r7, #28]
 8025614:	3304      	adds	r3, #4
 8025616:	2b06      	cmp	r3, #6
 8025618:	d902      	bls.n	8025620 <NVIC_EncodePriority+0x30>
 802561a:	69fb      	ldr	r3, [r7, #28]
 802561c:	3b03      	subs	r3, #3
 802561e:	e000      	b.n	8025622 <NVIC_EncodePriority+0x32>
 8025620:	2300      	movs	r3, #0
 8025622:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8025624:	f04f 32ff 	mov.w	r2, #4294967295
 8025628:	69bb      	ldr	r3, [r7, #24]
 802562a:	fa02 f303 	lsl.w	r3, r2, r3
 802562e:	43da      	mvns	r2, r3
 8025630:	68bb      	ldr	r3, [r7, #8]
 8025632:	401a      	ands	r2, r3
 8025634:	697b      	ldr	r3, [r7, #20]
 8025636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8025638:	f04f 31ff 	mov.w	r1, #4294967295
 802563c:	697b      	ldr	r3, [r7, #20]
 802563e:	fa01 f303 	lsl.w	r3, r1, r3
 8025642:	43d9      	mvns	r1, r3
 8025644:	687b      	ldr	r3, [r7, #4]
 8025646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8025648:	4313      	orrs	r3, r2
}
 802564a:	4618      	mov	r0, r3
 802564c:	3724      	adds	r7, #36	; 0x24
 802564e:	46bd      	mov	sp, r7
 8025650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025654:	4770      	bx	lr

08025656 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8025656:	b580      	push	{r7, lr}
 8025658:	b082      	sub	sp, #8
 802565a:	af00      	add	r7, sp, #0
 802565c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802565e:	6878      	ldr	r0, [r7, #4]
 8025660:	f7ff ff4c 	bl	80254fc <__NVIC_SetPriorityGrouping>
}
 8025664:	bf00      	nop
 8025666:	3708      	adds	r7, #8
 8025668:	46bd      	mov	sp, r7
 802566a:	bd80      	pop	{r7, pc}

0802566c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 802566c:	b580      	push	{r7, lr}
 802566e:	b086      	sub	sp, #24
 8025670:	af00      	add	r7, sp, #0
 8025672:	4603      	mov	r3, r0
 8025674:	60b9      	str	r1, [r7, #8]
 8025676:	607a      	str	r2, [r7, #4]
 8025678:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 802567a:	2300      	movs	r3, #0
 802567c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 802567e:	f7ff ff61 	bl	8025544 <__NVIC_GetPriorityGrouping>
 8025682:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8025684:	687a      	ldr	r2, [r7, #4]
 8025686:	68b9      	ldr	r1, [r7, #8]
 8025688:	6978      	ldr	r0, [r7, #20]
 802568a:	f7ff ffb1 	bl	80255f0 <NVIC_EncodePriority>
 802568e:	4602      	mov	r2, r0
 8025690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8025694:	4611      	mov	r1, r2
 8025696:	4618      	mov	r0, r3
 8025698:	f7ff ff80 	bl	802559c <__NVIC_SetPriority>
}
 802569c:	bf00      	nop
 802569e:	3718      	adds	r7, #24
 80256a0:	46bd      	mov	sp, r7
 80256a2:	bd80      	pop	{r7, pc}

080256a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80256a4:	b580      	push	{r7, lr}
 80256a6:	b082      	sub	sp, #8
 80256a8:	af00      	add	r7, sp, #0
 80256aa:	4603      	mov	r3, r0
 80256ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80256ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80256b2:	4618      	mov	r0, r3
 80256b4:	f7ff ff54 	bl	8025560 <__NVIC_EnableIRQ>
}
 80256b8:	bf00      	nop
 80256ba:	3708      	adds	r7, #8
 80256bc:	46bd      	mov	sp, r7
 80256be:	bd80      	pop	{r7, pc}

080256c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80256c0:	b580      	push	{r7, lr}
 80256c2:	b086      	sub	sp, #24
 80256c4:	af00      	add	r7, sp, #0
 80256c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80256c8:	2300      	movs	r3, #0
 80256ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80256cc:	f7ff fee8 	bl	80254a0 <HAL_GetTick>
 80256d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80256d2:	687b      	ldr	r3, [r7, #4]
 80256d4:	2b00      	cmp	r3, #0
 80256d6:	d101      	bne.n	80256dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80256d8:	2301      	movs	r3, #1
 80256da:	e099      	b.n	8025810 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80256dc:	687b      	ldr	r3, [r7, #4]
 80256de:	2200      	movs	r2, #0
 80256e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80256e4:	687b      	ldr	r3, [r7, #4]
 80256e6:	2202      	movs	r2, #2
 80256e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80256ec:	687b      	ldr	r3, [r7, #4]
 80256ee:	681b      	ldr	r3, [r3, #0]
 80256f0:	681a      	ldr	r2, [r3, #0]
 80256f2:	687b      	ldr	r3, [r7, #4]
 80256f4:	681b      	ldr	r3, [r3, #0]
 80256f6:	f022 0201 	bic.w	r2, r2, #1
 80256fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80256fc:	e00f      	b.n	802571e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80256fe:	f7ff fecf 	bl	80254a0 <HAL_GetTick>
 8025702:	4602      	mov	r2, r0
 8025704:	693b      	ldr	r3, [r7, #16]
 8025706:	1ad3      	subs	r3, r2, r3
 8025708:	2b05      	cmp	r3, #5
 802570a:	d908      	bls.n	802571e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802570c:	687b      	ldr	r3, [r7, #4]
 802570e:	2220      	movs	r2, #32
 8025710:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8025712:	687b      	ldr	r3, [r7, #4]
 8025714:	2203      	movs	r2, #3
 8025716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 802571a:	2303      	movs	r3, #3
 802571c:	e078      	b.n	8025810 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802571e:	687b      	ldr	r3, [r7, #4]
 8025720:	681b      	ldr	r3, [r3, #0]
 8025722:	681b      	ldr	r3, [r3, #0]
 8025724:	f003 0301 	and.w	r3, r3, #1
 8025728:	2b00      	cmp	r3, #0
 802572a:	d1e8      	bne.n	80256fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 802572c:	687b      	ldr	r3, [r7, #4]
 802572e:	681b      	ldr	r3, [r3, #0]
 8025730:	681b      	ldr	r3, [r3, #0]
 8025732:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8025734:	697a      	ldr	r2, [r7, #20]
 8025736:	4b38      	ldr	r3, [pc, #224]	; (8025818 <HAL_DMA_Init+0x158>)
 8025738:	4013      	ands	r3, r2
 802573a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802573c:	687b      	ldr	r3, [r7, #4]
 802573e:	685a      	ldr	r2, [r3, #4]
 8025740:	687b      	ldr	r3, [r7, #4]
 8025742:	689b      	ldr	r3, [r3, #8]
 8025744:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8025746:	687b      	ldr	r3, [r7, #4]
 8025748:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802574a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802574c:	687b      	ldr	r3, [r7, #4]
 802574e:	691b      	ldr	r3, [r3, #16]
 8025750:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8025752:	687b      	ldr	r3, [r7, #4]
 8025754:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8025756:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8025758:	687b      	ldr	r3, [r7, #4]
 802575a:	699b      	ldr	r3, [r3, #24]
 802575c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 802575e:	687b      	ldr	r3, [r7, #4]
 8025760:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8025762:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8025764:	687b      	ldr	r3, [r7, #4]
 8025766:	6a1b      	ldr	r3, [r3, #32]
 8025768:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802576a:	697a      	ldr	r2, [r7, #20]
 802576c:	4313      	orrs	r3, r2
 802576e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8025770:	687b      	ldr	r3, [r7, #4]
 8025772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025774:	2b04      	cmp	r3, #4
 8025776:	d107      	bne.n	8025788 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8025778:	687b      	ldr	r3, [r7, #4]
 802577a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802577c:	687b      	ldr	r3, [r7, #4]
 802577e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025780:	4313      	orrs	r3, r2
 8025782:	697a      	ldr	r2, [r7, #20]
 8025784:	4313      	orrs	r3, r2
 8025786:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8025788:	687b      	ldr	r3, [r7, #4]
 802578a:	681b      	ldr	r3, [r3, #0]
 802578c:	697a      	ldr	r2, [r7, #20]
 802578e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8025790:	687b      	ldr	r3, [r7, #4]
 8025792:	681b      	ldr	r3, [r3, #0]
 8025794:	695b      	ldr	r3, [r3, #20]
 8025796:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8025798:	697b      	ldr	r3, [r7, #20]
 802579a:	f023 0307 	bic.w	r3, r3, #7
 802579e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80257a0:	687b      	ldr	r3, [r7, #4]
 80257a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80257a4:	697a      	ldr	r2, [r7, #20]
 80257a6:	4313      	orrs	r3, r2
 80257a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80257aa:	687b      	ldr	r3, [r7, #4]
 80257ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80257ae:	2b04      	cmp	r3, #4
 80257b0:	d117      	bne.n	80257e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80257b2:	687b      	ldr	r3, [r7, #4]
 80257b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80257b6:	697a      	ldr	r2, [r7, #20]
 80257b8:	4313      	orrs	r3, r2
 80257ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80257bc:	687b      	ldr	r3, [r7, #4]
 80257be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80257c0:	2b00      	cmp	r3, #0
 80257c2:	d00e      	beq.n	80257e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80257c4:	6878      	ldr	r0, [r7, #4]
 80257c6:	f000 f9e9 	bl	8025b9c <DMA_CheckFifoParam>
 80257ca:	4603      	mov	r3, r0
 80257cc:	2b00      	cmp	r3, #0
 80257ce:	d008      	beq.n	80257e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80257d0:	687b      	ldr	r3, [r7, #4]
 80257d2:	2240      	movs	r2, #64	; 0x40
 80257d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80257d6:	687b      	ldr	r3, [r7, #4]
 80257d8:	2201      	movs	r2, #1
 80257da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80257de:	2301      	movs	r3, #1
 80257e0:	e016      	b.n	8025810 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80257e2:	687b      	ldr	r3, [r7, #4]
 80257e4:	681b      	ldr	r3, [r3, #0]
 80257e6:	697a      	ldr	r2, [r7, #20]
 80257e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80257ea:	6878      	ldr	r0, [r7, #4]
 80257ec:	f000 f9a0 	bl	8025b30 <DMA_CalcBaseAndBitshift>
 80257f0:	4603      	mov	r3, r0
 80257f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80257f4:	687b      	ldr	r3, [r7, #4]
 80257f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80257f8:	223f      	movs	r2, #63	; 0x3f
 80257fa:	409a      	lsls	r2, r3
 80257fc:	68fb      	ldr	r3, [r7, #12]
 80257fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8025800:	687b      	ldr	r3, [r7, #4]
 8025802:	2200      	movs	r2, #0
 8025804:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8025806:	687b      	ldr	r3, [r7, #4]
 8025808:	2201      	movs	r2, #1
 802580a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 802580e:	2300      	movs	r3, #0
}
 8025810:	4618      	mov	r0, r3
 8025812:	3718      	adds	r7, #24
 8025814:	46bd      	mov	sp, r7
 8025816:	bd80      	pop	{r7, pc}
 8025818:	f010803f 	.word	0xf010803f

0802581c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 802581c:	b580      	push	{r7, lr}
 802581e:	b086      	sub	sp, #24
 8025820:	af00      	add	r7, sp, #0
 8025822:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8025824:	2300      	movs	r3, #0
 8025826:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8025828:	4b92      	ldr	r3, [pc, #584]	; (8025a74 <HAL_DMA_IRQHandler+0x258>)
 802582a:	681b      	ldr	r3, [r3, #0]
 802582c:	4a92      	ldr	r2, [pc, #584]	; (8025a78 <HAL_DMA_IRQHandler+0x25c>)
 802582e:	fba2 2303 	umull	r2, r3, r2, r3
 8025832:	0a9b      	lsrs	r3, r3, #10
 8025834:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8025836:	687b      	ldr	r3, [r7, #4]
 8025838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802583a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 802583c:	693b      	ldr	r3, [r7, #16]
 802583e:	681b      	ldr	r3, [r3, #0]
 8025840:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8025842:	687b      	ldr	r3, [r7, #4]
 8025844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8025846:	2208      	movs	r2, #8
 8025848:	409a      	lsls	r2, r3
 802584a:	68fb      	ldr	r3, [r7, #12]
 802584c:	4013      	ands	r3, r2
 802584e:	2b00      	cmp	r3, #0
 8025850:	d01a      	beq.n	8025888 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8025852:	687b      	ldr	r3, [r7, #4]
 8025854:	681b      	ldr	r3, [r3, #0]
 8025856:	681b      	ldr	r3, [r3, #0]
 8025858:	f003 0304 	and.w	r3, r3, #4
 802585c:	2b00      	cmp	r3, #0
 802585e:	d013      	beq.n	8025888 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8025860:	687b      	ldr	r3, [r7, #4]
 8025862:	681b      	ldr	r3, [r3, #0]
 8025864:	681a      	ldr	r2, [r3, #0]
 8025866:	687b      	ldr	r3, [r7, #4]
 8025868:	681b      	ldr	r3, [r3, #0]
 802586a:	f022 0204 	bic.w	r2, r2, #4
 802586e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8025870:	687b      	ldr	r3, [r7, #4]
 8025872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8025874:	2208      	movs	r2, #8
 8025876:	409a      	lsls	r2, r3
 8025878:	693b      	ldr	r3, [r7, #16]
 802587a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 802587c:	687b      	ldr	r3, [r7, #4]
 802587e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8025880:	f043 0201 	orr.w	r2, r3, #1
 8025884:	687b      	ldr	r3, [r7, #4]
 8025886:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8025888:	687b      	ldr	r3, [r7, #4]
 802588a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802588c:	2201      	movs	r2, #1
 802588e:	409a      	lsls	r2, r3
 8025890:	68fb      	ldr	r3, [r7, #12]
 8025892:	4013      	ands	r3, r2
 8025894:	2b00      	cmp	r3, #0
 8025896:	d012      	beq.n	80258be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8025898:	687b      	ldr	r3, [r7, #4]
 802589a:	681b      	ldr	r3, [r3, #0]
 802589c:	695b      	ldr	r3, [r3, #20]
 802589e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80258a2:	2b00      	cmp	r3, #0
 80258a4:	d00b      	beq.n	80258be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80258a6:	687b      	ldr	r3, [r7, #4]
 80258a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80258aa:	2201      	movs	r2, #1
 80258ac:	409a      	lsls	r2, r3
 80258ae:	693b      	ldr	r3, [r7, #16]
 80258b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80258b2:	687b      	ldr	r3, [r7, #4]
 80258b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80258b6:	f043 0202 	orr.w	r2, r3, #2
 80258ba:	687b      	ldr	r3, [r7, #4]
 80258bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80258be:	687b      	ldr	r3, [r7, #4]
 80258c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80258c2:	2204      	movs	r2, #4
 80258c4:	409a      	lsls	r2, r3
 80258c6:	68fb      	ldr	r3, [r7, #12]
 80258c8:	4013      	ands	r3, r2
 80258ca:	2b00      	cmp	r3, #0
 80258cc:	d012      	beq.n	80258f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80258ce:	687b      	ldr	r3, [r7, #4]
 80258d0:	681b      	ldr	r3, [r3, #0]
 80258d2:	681b      	ldr	r3, [r3, #0]
 80258d4:	f003 0302 	and.w	r3, r3, #2
 80258d8:	2b00      	cmp	r3, #0
 80258da:	d00b      	beq.n	80258f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80258dc:	687b      	ldr	r3, [r7, #4]
 80258de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80258e0:	2204      	movs	r2, #4
 80258e2:	409a      	lsls	r2, r3
 80258e4:	693b      	ldr	r3, [r7, #16]
 80258e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80258e8:	687b      	ldr	r3, [r7, #4]
 80258ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80258ec:	f043 0204 	orr.w	r2, r3, #4
 80258f0:	687b      	ldr	r3, [r7, #4]
 80258f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80258f4:	687b      	ldr	r3, [r7, #4]
 80258f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80258f8:	2210      	movs	r2, #16
 80258fa:	409a      	lsls	r2, r3
 80258fc:	68fb      	ldr	r3, [r7, #12]
 80258fe:	4013      	ands	r3, r2
 8025900:	2b00      	cmp	r3, #0
 8025902:	d043      	beq.n	802598c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8025904:	687b      	ldr	r3, [r7, #4]
 8025906:	681b      	ldr	r3, [r3, #0]
 8025908:	681b      	ldr	r3, [r3, #0]
 802590a:	f003 0308 	and.w	r3, r3, #8
 802590e:	2b00      	cmp	r3, #0
 8025910:	d03c      	beq.n	802598c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8025912:	687b      	ldr	r3, [r7, #4]
 8025914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8025916:	2210      	movs	r2, #16
 8025918:	409a      	lsls	r2, r3
 802591a:	693b      	ldr	r3, [r7, #16]
 802591c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 802591e:	687b      	ldr	r3, [r7, #4]
 8025920:	681b      	ldr	r3, [r3, #0]
 8025922:	681b      	ldr	r3, [r3, #0]
 8025924:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8025928:	2b00      	cmp	r3, #0
 802592a:	d018      	beq.n	802595e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 802592c:	687b      	ldr	r3, [r7, #4]
 802592e:	681b      	ldr	r3, [r3, #0]
 8025930:	681b      	ldr	r3, [r3, #0]
 8025932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8025936:	2b00      	cmp	r3, #0
 8025938:	d108      	bne.n	802594c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 802593a:	687b      	ldr	r3, [r7, #4]
 802593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802593e:	2b00      	cmp	r3, #0
 8025940:	d024      	beq.n	802598c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8025942:	687b      	ldr	r3, [r7, #4]
 8025944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025946:	6878      	ldr	r0, [r7, #4]
 8025948:	4798      	blx	r3
 802594a:	e01f      	b.n	802598c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 802594c:	687b      	ldr	r3, [r7, #4]
 802594e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8025950:	2b00      	cmp	r3, #0
 8025952:	d01b      	beq.n	802598c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8025954:	687b      	ldr	r3, [r7, #4]
 8025956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8025958:	6878      	ldr	r0, [r7, #4]
 802595a:	4798      	blx	r3
 802595c:	e016      	b.n	802598c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 802595e:	687b      	ldr	r3, [r7, #4]
 8025960:	681b      	ldr	r3, [r3, #0]
 8025962:	681b      	ldr	r3, [r3, #0]
 8025964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025968:	2b00      	cmp	r3, #0
 802596a:	d107      	bne.n	802597c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 802596c:	687b      	ldr	r3, [r7, #4]
 802596e:	681b      	ldr	r3, [r3, #0]
 8025970:	681a      	ldr	r2, [r3, #0]
 8025972:	687b      	ldr	r3, [r7, #4]
 8025974:	681b      	ldr	r3, [r3, #0]
 8025976:	f022 0208 	bic.w	r2, r2, #8
 802597a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 802597c:	687b      	ldr	r3, [r7, #4]
 802597e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025980:	2b00      	cmp	r3, #0
 8025982:	d003      	beq.n	802598c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8025984:	687b      	ldr	r3, [r7, #4]
 8025986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025988:	6878      	ldr	r0, [r7, #4]
 802598a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 802598c:	687b      	ldr	r3, [r7, #4]
 802598e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8025990:	2220      	movs	r2, #32
 8025992:	409a      	lsls	r2, r3
 8025994:	68fb      	ldr	r3, [r7, #12]
 8025996:	4013      	ands	r3, r2
 8025998:	2b00      	cmp	r3, #0
 802599a:	f000 808e 	beq.w	8025aba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 802599e:	687b      	ldr	r3, [r7, #4]
 80259a0:	681b      	ldr	r3, [r3, #0]
 80259a2:	681b      	ldr	r3, [r3, #0]
 80259a4:	f003 0310 	and.w	r3, r3, #16
 80259a8:	2b00      	cmp	r3, #0
 80259aa:	f000 8086 	beq.w	8025aba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80259ae:	687b      	ldr	r3, [r7, #4]
 80259b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80259b2:	2220      	movs	r2, #32
 80259b4:	409a      	lsls	r2, r3
 80259b6:	693b      	ldr	r3, [r7, #16]
 80259b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80259ba:	687b      	ldr	r3, [r7, #4]
 80259bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80259c0:	b2db      	uxtb	r3, r3
 80259c2:	2b05      	cmp	r3, #5
 80259c4:	d136      	bne.n	8025a34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80259c6:	687b      	ldr	r3, [r7, #4]
 80259c8:	681b      	ldr	r3, [r3, #0]
 80259ca:	681a      	ldr	r2, [r3, #0]
 80259cc:	687b      	ldr	r3, [r7, #4]
 80259ce:	681b      	ldr	r3, [r3, #0]
 80259d0:	f022 0216 	bic.w	r2, r2, #22
 80259d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80259d6:	687b      	ldr	r3, [r7, #4]
 80259d8:	681b      	ldr	r3, [r3, #0]
 80259da:	695a      	ldr	r2, [r3, #20]
 80259dc:	687b      	ldr	r3, [r7, #4]
 80259de:	681b      	ldr	r3, [r3, #0]
 80259e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80259e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80259e6:	687b      	ldr	r3, [r7, #4]
 80259e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80259ea:	2b00      	cmp	r3, #0
 80259ec:	d103      	bne.n	80259f6 <HAL_DMA_IRQHandler+0x1da>
 80259ee:	687b      	ldr	r3, [r7, #4]
 80259f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80259f2:	2b00      	cmp	r3, #0
 80259f4:	d007      	beq.n	8025a06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80259f6:	687b      	ldr	r3, [r7, #4]
 80259f8:	681b      	ldr	r3, [r3, #0]
 80259fa:	681a      	ldr	r2, [r3, #0]
 80259fc:	687b      	ldr	r3, [r7, #4]
 80259fe:	681b      	ldr	r3, [r3, #0]
 8025a00:	f022 0208 	bic.w	r2, r2, #8
 8025a04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8025a06:	687b      	ldr	r3, [r7, #4]
 8025a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8025a0a:	223f      	movs	r2, #63	; 0x3f
 8025a0c:	409a      	lsls	r2, r3
 8025a0e:	693b      	ldr	r3, [r7, #16]
 8025a10:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8025a12:	687b      	ldr	r3, [r7, #4]
 8025a14:	2200      	movs	r2, #0
 8025a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8025a1a:	687b      	ldr	r3, [r7, #4]
 8025a1c:	2201      	movs	r2, #1
 8025a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8025a22:	687b      	ldr	r3, [r7, #4]
 8025a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8025a26:	2b00      	cmp	r3, #0
 8025a28:	d07d      	beq.n	8025b26 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8025a2a:	687b      	ldr	r3, [r7, #4]
 8025a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8025a2e:	6878      	ldr	r0, [r7, #4]
 8025a30:	4798      	blx	r3
        }
        return;
 8025a32:	e078      	b.n	8025b26 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8025a34:	687b      	ldr	r3, [r7, #4]
 8025a36:	681b      	ldr	r3, [r3, #0]
 8025a38:	681b      	ldr	r3, [r3, #0]
 8025a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8025a3e:	2b00      	cmp	r3, #0
 8025a40:	d01c      	beq.n	8025a7c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8025a42:	687b      	ldr	r3, [r7, #4]
 8025a44:	681b      	ldr	r3, [r3, #0]
 8025a46:	681b      	ldr	r3, [r3, #0]
 8025a48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8025a4c:	2b00      	cmp	r3, #0
 8025a4e:	d108      	bne.n	8025a62 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8025a50:	687b      	ldr	r3, [r7, #4]
 8025a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025a54:	2b00      	cmp	r3, #0
 8025a56:	d030      	beq.n	8025aba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8025a58:	687b      	ldr	r3, [r7, #4]
 8025a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025a5c:	6878      	ldr	r0, [r7, #4]
 8025a5e:	4798      	blx	r3
 8025a60:	e02b      	b.n	8025aba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8025a62:	687b      	ldr	r3, [r7, #4]
 8025a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025a66:	2b00      	cmp	r3, #0
 8025a68:	d027      	beq.n	8025aba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8025a6a:	687b      	ldr	r3, [r7, #4]
 8025a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025a6e:	6878      	ldr	r0, [r7, #4]
 8025a70:	4798      	blx	r3
 8025a72:	e022      	b.n	8025aba <HAL_DMA_IRQHandler+0x29e>
 8025a74:	200013c8 	.word	0x200013c8
 8025a78:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8025a7c:	687b      	ldr	r3, [r7, #4]
 8025a7e:	681b      	ldr	r3, [r3, #0]
 8025a80:	681b      	ldr	r3, [r3, #0]
 8025a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025a86:	2b00      	cmp	r3, #0
 8025a88:	d10f      	bne.n	8025aaa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8025a8a:	687b      	ldr	r3, [r7, #4]
 8025a8c:	681b      	ldr	r3, [r3, #0]
 8025a8e:	681a      	ldr	r2, [r3, #0]
 8025a90:	687b      	ldr	r3, [r7, #4]
 8025a92:	681b      	ldr	r3, [r3, #0]
 8025a94:	f022 0210 	bic.w	r2, r2, #16
 8025a98:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8025a9a:	687b      	ldr	r3, [r7, #4]
 8025a9c:	2200      	movs	r2, #0
 8025a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8025aa2:	687b      	ldr	r3, [r7, #4]
 8025aa4:	2201      	movs	r2, #1
 8025aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8025aaa:	687b      	ldr	r3, [r7, #4]
 8025aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025aae:	2b00      	cmp	r3, #0
 8025ab0:	d003      	beq.n	8025aba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8025ab2:	687b      	ldr	r3, [r7, #4]
 8025ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025ab6:	6878      	ldr	r0, [r7, #4]
 8025ab8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8025aba:	687b      	ldr	r3, [r7, #4]
 8025abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8025abe:	2b00      	cmp	r3, #0
 8025ac0:	d032      	beq.n	8025b28 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8025ac2:	687b      	ldr	r3, [r7, #4]
 8025ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8025ac6:	f003 0301 	and.w	r3, r3, #1
 8025aca:	2b00      	cmp	r3, #0
 8025acc:	d022      	beq.n	8025b14 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8025ace:	687b      	ldr	r3, [r7, #4]
 8025ad0:	2205      	movs	r2, #5
 8025ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8025ad6:	687b      	ldr	r3, [r7, #4]
 8025ad8:	681b      	ldr	r3, [r3, #0]
 8025ada:	681a      	ldr	r2, [r3, #0]
 8025adc:	687b      	ldr	r3, [r7, #4]
 8025ade:	681b      	ldr	r3, [r3, #0]
 8025ae0:	f022 0201 	bic.w	r2, r2, #1
 8025ae4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8025ae6:	68bb      	ldr	r3, [r7, #8]
 8025ae8:	3301      	adds	r3, #1
 8025aea:	60bb      	str	r3, [r7, #8]
 8025aec:	697a      	ldr	r2, [r7, #20]
 8025aee:	429a      	cmp	r2, r3
 8025af0:	d307      	bcc.n	8025b02 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8025af2:	687b      	ldr	r3, [r7, #4]
 8025af4:	681b      	ldr	r3, [r3, #0]
 8025af6:	681b      	ldr	r3, [r3, #0]
 8025af8:	f003 0301 	and.w	r3, r3, #1
 8025afc:	2b00      	cmp	r3, #0
 8025afe:	d1f2      	bne.n	8025ae6 <HAL_DMA_IRQHandler+0x2ca>
 8025b00:	e000      	b.n	8025b04 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8025b02:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8025b04:	687b      	ldr	r3, [r7, #4]
 8025b06:	2200      	movs	r2, #0
 8025b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8025b0c:	687b      	ldr	r3, [r7, #4]
 8025b0e:	2201      	movs	r2, #1
 8025b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8025b14:	687b      	ldr	r3, [r7, #4]
 8025b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8025b18:	2b00      	cmp	r3, #0
 8025b1a:	d005      	beq.n	8025b28 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8025b1c:	687b      	ldr	r3, [r7, #4]
 8025b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8025b20:	6878      	ldr	r0, [r7, #4]
 8025b22:	4798      	blx	r3
 8025b24:	e000      	b.n	8025b28 <HAL_DMA_IRQHandler+0x30c>
        return;
 8025b26:	bf00      	nop
    }
  }
}
 8025b28:	3718      	adds	r7, #24
 8025b2a:	46bd      	mov	sp, r7
 8025b2c:	bd80      	pop	{r7, pc}
 8025b2e:	bf00      	nop

08025b30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8025b30:	b480      	push	{r7}
 8025b32:	b085      	sub	sp, #20
 8025b34:	af00      	add	r7, sp, #0
 8025b36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8025b38:	687b      	ldr	r3, [r7, #4]
 8025b3a:	681b      	ldr	r3, [r3, #0]
 8025b3c:	b2db      	uxtb	r3, r3
 8025b3e:	3b10      	subs	r3, #16
 8025b40:	4a13      	ldr	r2, [pc, #76]	; (8025b90 <DMA_CalcBaseAndBitshift+0x60>)
 8025b42:	fba2 2303 	umull	r2, r3, r2, r3
 8025b46:	091b      	lsrs	r3, r3, #4
 8025b48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8025b4a:	4a12      	ldr	r2, [pc, #72]	; (8025b94 <DMA_CalcBaseAndBitshift+0x64>)
 8025b4c:	68fb      	ldr	r3, [r7, #12]
 8025b4e:	4413      	add	r3, r2
 8025b50:	781b      	ldrb	r3, [r3, #0]
 8025b52:	461a      	mov	r2, r3
 8025b54:	687b      	ldr	r3, [r7, #4]
 8025b56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8025b58:	68fb      	ldr	r3, [r7, #12]
 8025b5a:	2b03      	cmp	r3, #3
 8025b5c:	d908      	bls.n	8025b70 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8025b5e:	687b      	ldr	r3, [r7, #4]
 8025b60:	681b      	ldr	r3, [r3, #0]
 8025b62:	461a      	mov	r2, r3
 8025b64:	4b0c      	ldr	r3, [pc, #48]	; (8025b98 <DMA_CalcBaseAndBitshift+0x68>)
 8025b66:	4013      	ands	r3, r2
 8025b68:	1d1a      	adds	r2, r3, #4
 8025b6a:	687b      	ldr	r3, [r7, #4]
 8025b6c:	659a      	str	r2, [r3, #88]	; 0x58
 8025b6e:	e006      	b.n	8025b7e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8025b70:	687b      	ldr	r3, [r7, #4]
 8025b72:	681b      	ldr	r3, [r3, #0]
 8025b74:	461a      	mov	r2, r3
 8025b76:	4b08      	ldr	r3, [pc, #32]	; (8025b98 <DMA_CalcBaseAndBitshift+0x68>)
 8025b78:	4013      	ands	r3, r2
 8025b7a:	687a      	ldr	r2, [r7, #4]
 8025b7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8025b7e:	687b      	ldr	r3, [r7, #4]
 8025b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8025b82:	4618      	mov	r0, r3
 8025b84:	3714      	adds	r7, #20
 8025b86:	46bd      	mov	sp, r7
 8025b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b8c:	4770      	bx	lr
 8025b8e:	bf00      	nop
 8025b90:	aaaaaaab 	.word	0xaaaaaaab
 8025b94:	08030fb8 	.word	0x08030fb8
 8025b98:	fffffc00 	.word	0xfffffc00

08025b9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8025b9c:	b480      	push	{r7}
 8025b9e:	b085      	sub	sp, #20
 8025ba0:	af00      	add	r7, sp, #0
 8025ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8025ba4:	2300      	movs	r3, #0
 8025ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8025ba8:	687b      	ldr	r3, [r7, #4]
 8025baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025bac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8025bae:	687b      	ldr	r3, [r7, #4]
 8025bb0:	699b      	ldr	r3, [r3, #24]
 8025bb2:	2b00      	cmp	r3, #0
 8025bb4:	d11f      	bne.n	8025bf6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8025bb6:	68bb      	ldr	r3, [r7, #8]
 8025bb8:	2b03      	cmp	r3, #3
 8025bba:	d855      	bhi.n	8025c68 <DMA_CheckFifoParam+0xcc>
 8025bbc:	a201      	add	r2, pc, #4	; (adr r2, 8025bc4 <DMA_CheckFifoParam+0x28>)
 8025bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025bc2:	bf00      	nop
 8025bc4:	08025bd5 	.word	0x08025bd5
 8025bc8:	08025be7 	.word	0x08025be7
 8025bcc:	08025bd5 	.word	0x08025bd5
 8025bd0:	08025c69 	.word	0x08025c69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8025bd4:	687b      	ldr	r3, [r7, #4]
 8025bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025bd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8025bdc:	2b00      	cmp	r3, #0
 8025bde:	d045      	beq.n	8025c6c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8025be0:	2301      	movs	r3, #1
 8025be2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8025be4:	e042      	b.n	8025c6c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8025be6:	687b      	ldr	r3, [r7, #4]
 8025be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025bea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8025bee:	d13f      	bne.n	8025c70 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8025bf0:	2301      	movs	r3, #1
 8025bf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8025bf4:	e03c      	b.n	8025c70 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8025bf6:	687b      	ldr	r3, [r7, #4]
 8025bf8:	699b      	ldr	r3, [r3, #24]
 8025bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8025bfe:	d121      	bne.n	8025c44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8025c00:	68bb      	ldr	r3, [r7, #8]
 8025c02:	2b03      	cmp	r3, #3
 8025c04:	d836      	bhi.n	8025c74 <DMA_CheckFifoParam+0xd8>
 8025c06:	a201      	add	r2, pc, #4	; (adr r2, 8025c0c <DMA_CheckFifoParam+0x70>)
 8025c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025c0c:	08025c1d 	.word	0x08025c1d
 8025c10:	08025c23 	.word	0x08025c23
 8025c14:	08025c1d 	.word	0x08025c1d
 8025c18:	08025c35 	.word	0x08025c35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8025c1c:	2301      	movs	r3, #1
 8025c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8025c20:	e02f      	b.n	8025c82 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8025c22:	687b      	ldr	r3, [r7, #4]
 8025c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025c26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8025c2a:	2b00      	cmp	r3, #0
 8025c2c:	d024      	beq.n	8025c78 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8025c2e:	2301      	movs	r3, #1
 8025c30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8025c32:	e021      	b.n	8025c78 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8025c34:	687b      	ldr	r3, [r7, #4]
 8025c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025c38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8025c3c:	d11e      	bne.n	8025c7c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8025c3e:	2301      	movs	r3, #1
 8025c40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8025c42:	e01b      	b.n	8025c7c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8025c44:	68bb      	ldr	r3, [r7, #8]
 8025c46:	2b02      	cmp	r3, #2
 8025c48:	d902      	bls.n	8025c50 <DMA_CheckFifoParam+0xb4>
 8025c4a:	2b03      	cmp	r3, #3
 8025c4c:	d003      	beq.n	8025c56 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8025c4e:	e018      	b.n	8025c82 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8025c50:	2301      	movs	r3, #1
 8025c52:	73fb      	strb	r3, [r7, #15]
      break;
 8025c54:	e015      	b.n	8025c82 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8025c56:	687b      	ldr	r3, [r7, #4]
 8025c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025c5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8025c5e:	2b00      	cmp	r3, #0
 8025c60:	d00e      	beq.n	8025c80 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8025c62:	2301      	movs	r3, #1
 8025c64:	73fb      	strb	r3, [r7, #15]
      break;
 8025c66:	e00b      	b.n	8025c80 <DMA_CheckFifoParam+0xe4>
      break;
 8025c68:	bf00      	nop
 8025c6a:	e00a      	b.n	8025c82 <DMA_CheckFifoParam+0xe6>
      break;
 8025c6c:	bf00      	nop
 8025c6e:	e008      	b.n	8025c82 <DMA_CheckFifoParam+0xe6>
      break;
 8025c70:	bf00      	nop
 8025c72:	e006      	b.n	8025c82 <DMA_CheckFifoParam+0xe6>
      break;
 8025c74:	bf00      	nop
 8025c76:	e004      	b.n	8025c82 <DMA_CheckFifoParam+0xe6>
      break;
 8025c78:	bf00      	nop
 8025c7a:	e002      	b.n	8025c82 <DMA_CheckFifoParam+0xe6>
      break;   
 8025c7c:	bf00      	nop
 8025c7e:	e000      	b.n	8025c82 <DMA_CheckFifoParam+0xe6>
      break;
 8025c80:	bf00      	nop
    }
  } 
  
  return status; 
 8025c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8025c84:	4618      	mov	r0, r3
 8025c86:	3714      	adds	r7, #20
 8025c88:	46bd      	mov	sp, r7
 8025c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c8e:	4770      	bx	lr

08025c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8025c90:	b480      	push	{r7}
 8025c92:	b089      	sub	sp, #36	; 0x24
 8025c94:	af00      	add	r7, sp, #0
 8025c96:	6078      	str	r0, [r7, #4]
 8025c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8025c9a:	2300      	movs	r3, #0
 8025c9c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8025c9e:	2300      	movs	r3, #0
 8025ca0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8025ca2:	2300      	movs	r3, #0
 8025ca4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8025ca6:	2300      	movs	r3, #0
 8025ca8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8025caa:	2300      	movs	r3, #0
 8025cac:	61fb      	str	r3, [r7, #28]
 8025cae:	e175      	b.n	8025f9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8025cb0:	2201      	movs	r2, #1
 8025cb2:	69fb      	ldr	r3, [r7, #28]
 8025cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8025cb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8025cba:	683b      	ldr	r3, [r7, #0]
 8025cbc:	681b      	ldr	r3, [r3, #0]
 8025cbe:	697a      	ldr	r2, [r7, #20]
 8025cc0:	4013      	ands	r3, r2
 8025cc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8025cc4:	693a      	ldr	r2, [r7, #16]
 8025cc6:	697b      	ldr	r3, [r7, #20]
 8025cc8:	429a      	cmp	r2, r3
 8025cca:	f040 8164 	bne.w	8025f96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8025cce:	683b      	ldr	r3, [r7, #0]
 8025cd0:	685b      	ldr	r3, [r3, #4]
 8025cd2:	2b01      	cmp	r3, #1
 8025cd4:	d00b      	beq.n	8025cee <HAL_GPIO_Init+0x5e>
 8025cd6:	683b      	ldr	r3, [r7, #0]
 8025cd8:	685b      	ldr	r3, [r3, #4]
 8025cda:	2b02      	cmp	r3, #2
 8025cdc:	d007      	beq.n	8025cee <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8025cde:	683b      	ldr	r3, [r7, #0]
 8025ce0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8025ce2:	2b11      	cmp	r3, #17
 8025ce4:	d003      	beq.n	8025cee <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8025ce6:	683b      	ldr	r3, [r7, #0]
 8025ce8:	685b      	ldr	r3, [r3, #4]
 8025cea:	2b12      	cmp	r3, #18
 8025cec:	d130      	bne.n	8025d50 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8025cee:	687b      	ldr	r3, [r7, #4]
 8025cf0:	689b      	ldr	r3, [r3, #8]
 8025cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8025cf4:	69fb      	ldr	r3, [r7, #28]
 8025cf6:	005b      	lsls	r3, r3, #1
 8025cf8:	2203      	movs	r2, #3
 8025cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8025cfe:	43db      	mvns	r3, r3
 8025d00:	69ba      	ldr	r2, [r7, #24]
 8025d02:	4013      	ands	r3, r2
 8025d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8025d06:	683b      	ldr	r3, [r7, #0]
 8025d08:	68da      	ldr	r2, [r3, #12]
 8025d0a:	69fb      	ldr	r3, [r7, #28]
 8025d0c:	005b      	lsls	r3, r3, #1
 8025d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8025d12:	69ba      	ldr	r2, [r7, #24]
 8025d14:	4313      	orrs	r3, r2
 8025d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8025d18:	687b      	ldr	r3, [r7, #4]
 8025d1a:	69ba      	ldr	r2, [r7, #24]
 8025d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8025d1e:	687b      	ldr	r3, [r7, #4]
 8025d20:	685b      	ldr	r3, [r3, #4]
 8025d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8025d24:	2201      	movs	r2, #1
 8025d26:	69fb      	ldr	r3, [r7, #28]
 8025d28:	fa02 f303 	lsl.w	r3, r2, r3
 8025d2c:	43db      	mvns	r3, r3
 8025d2e:	69ba      	ldr	r2, [r7, #24]
 8025d30:	4013      	ands	r3, r2
 8025d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8025d34:	683b      	ldr	r3, [r7, #0]
 8025d36:	685b      	ldr	r3, [r3, #4]
 8025d38:	091b      	lsrs	r3, r3, #4
 8025d3a:	f003 0201 	and.w	r2, r3, #1
 8025d3e:	69fb      	ldr	r3, [r7, #28]
 8025d40:	fa02 f303 	lsl.w	r3, r2, r3
 8025d44:	69ba      	ldr	r2, [r7, #24]
 8025d46:	4313      	orrs	r3, r2
 8025d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8025d4a:	687b      	ldr	r3, [r7, #4]
 8025d4c:	69ba      	ldr	r2, [r7, #24]
 8025d4e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8025d50:	687b      	ldr	r3, [r7, #4]
 8025d52:	68db      	ldr	r3, [r3, #12]
 8025d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8025d56:	69fb      	ldr	r3, [r7, #28]
 8025d58:	005b      	lsls	r3, r3, #1
 8025d5a:	2203      	movs	r2, #3
 8025d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8025d60:	43db      	mvns	r3, r3
 8025d62:	69ba      	ldr	r2, [r7, #24]
 8025d64:	4013      	ands	r3, r2
 8025d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8025d68:	683b      	ldr	r3, [r7, #0]
 8025d6a:	689a      	ldr	r2, [r3, #8]
 8025d6c:	69fb      	ldr	r3, [r7, #28]
 8025d6e:	005b      	lsls	r3, r3, #1
 8025d70:	fa02 f303 	lsl.w	r3, r2, r3
 8025d74:	69ba      	ldr	r2, [r7, #24]
 8025d76:	4313      	orrs	r3, r2
 8025d78:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8025d7a:	687b      	ldr	r3, [r7, #4]
 8025d7c:	69ba      	ldr	r2, [r7, #24]
 8025d7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8025d80:	683b      	ldr	r3, [r7, #0]
 8025d82:	685b      	ldr	r3, [r3, #4]
 8025d84:	2b02      	cmp	r3, #2
 8025d86:	d003      	beq.n	8025d90 <HAL_GPIO_Init+0x100>
 8025d88:	683b      	ldr	r3, [r7, #0]
 8025d8a:	685b      	ldr	r3, [r3, #4]
 8025d8c:	2b12      	cmp	r3, #18
 8025d8e:	d123      	bne.n	8025dd8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8025d90:	69fb      	ldr	r3, [r7, #28]
 8025d92:	08da      	lsrs	r2, r3, #3
 8025d94:	687b      	ldr	r3, [r7, #4]
 8025d96:	3208      	adds	r2, #8
 8025d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8025d9e:	69fb      	ldr	r3, [r7, #28]
 8025da0:	f003 0307 	and.w	r3, r3, #7
 8025da4:	009b      	lsls	r3, r3, #2
 8025da6:	220f      	movs	r2, #15
 8025da8:	fa02 f303 	lsl.w	r3, r2, r3
 8025dac:	43db      	mvns	r3, r3
 8025dae:	69ba      	ldr	r2, [r7, #24]
 8025db0:	4013      	ands	r3, r2
 8025db2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8025db4:	683b      	ldr	r3, [r7, #0]
 8025db6:	691a      	ldr	r2, [r3, #16]
 8025db8:	69fb      	ldr	r3, [r7, #28]
 8025dba:	f003 0307 	and.w	r3, r3, #7
 8025dbe:	009b      	lsls	r3, r3, #2
 8025dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8025dc4:	69ba      	ldr	r2, [r7, #24]
 8025dc6:	4313      	orrs	r3, r2
 8025dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8025dca:	69fb      	ldr	r3, [r7, #28]
 8025dcc:	08da      	lsrs	r2, r3, #3
 8025dce:	687b      	ldr	r3, [r7, #4]
 8025dd0:	3208      	adds	r2, #8
 8025dd2:	69b9      	ldr	r1, [r7, #24]
 8025dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8025dd8:	687b      	ldr	r3, [r7, #4]
 8025dda:	681b      	ldr	r3, [r3, #0]
 8025ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8025dde:	69fb      	ldr	r3, [r7, #28]
 8025de0:	005b      	lsls	r3, r3, #1
 8025de2:	2203      	movs	r2, #3
 8025de4:	fa02 f303 	lsl.w	r3, r2, r3
 8025de8:	43db      	mvns	r3, r3
 8025dea:	69ba      	ldr	r2, [r7, #24]
 8025dec:	4013      	ands	r3, r2
 8025dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8025df0:	683b      	ldr	r3, [r7, #0]
 8025df2:	685b      	ldr	r3, [r3, #4]
 8025df4:	f003 0203 	and.w	r2, r3, #3
 8025df8:	69fb      	ldr	r3, [r7, #28]
 8025dfa:	005b      	lsls	r3, r3, #1
 8025dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8025e00:	69ba      	ldr	r2, [r7, #24]
 8025e02:	4313      	orrs	r3, r2
 8025e04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8025e06:	687b      	ldr	r3, [r7, #4]
 8025e08:	69ba      	ldr	r2, [r7, #24]
 8025e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8025e0c:	683b      	ldr	r3, [r7, #0]
 8025e0e:	685b      	ldr	r3, [r3, #4]
 8025e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8025e14:	2b00      	cmp	r3, #0
 8025e16:	f000 80be 	beq.w	8025f96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8025e1a:	4b65      	ldr	r3, [pc, #404]	; (8025fb0 <HAL_GPIO_Init+0x320>)
 8025e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025e1e:	4a64      	ldr	r2, [pc, #400]	; (8025fb0 <HAL_GPIO_Init+0x320>)
 8025e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8025e24:	6453      	str	r3, [r2, #68]	; 0x44
 8025e26:	4b62      	ldr	r3, [pc, #392]	; (8025fb0 <HAL_GPIO_Init+0x320>)
 8025e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8025e2e:	60fb      	str	r3, [r7, #12]
 8025e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8025e32:	4a60      	ldr	r2, [pc, #384]	; (8025fb4 <HAL_GPIO_Init+0x324>)
 8025e34:	69fb      	ldr	r3, [r7, #28]
 8025e36:	089b      	lsrs	r3, r3, #2
 8025e38:	3302      	adds	r3, #2
 8025e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8025e40:	69fb      	ldr	r3, [r7, #28]
 8025e42:	f003 0303 	and.w	r3, r3, #3
 8025e46:	009b      	lsls	r3, r3, #2
 8025e48:	220f      	movs	r2, #15
 8025e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8025e4e:	43db      	mvns	r3, r3
 8025e50:	69ba      	ldr	r2, [r7, #24]
 8025e52:	4013      	ands	r3, r2
 8025e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8025e56:	687b      	ldr	r3, [r7, #4]
 8025e58:	4a57      	ldr	r2, [pc, #348]	; (8025fb8 <HAL_GPIO_Init+0x328>)
 8025e5a:	4293      	cmp	r3, r2
 8025e5c:	d037      	beq.n	8025ece <HAL_GPIO_Init+0x23e>
 8025e5e:	687b      	ldr	r3, [r7, #4]
 8025e60:	4a56      	ldr	r2, [pc, #344]	; (8025fbc <HAL_GPIO_Init+0x32c>)
 8025e62:	4293      	cmp	r3, r2
 8025e64:	d031      	beq.n	8025eca <HAL_GPIO_Init+0x23a>
 8025e66:	687b      	ldr	r3, [r7, #4]
 8025e68:	4a55      	ldr	r2, [pc, #340]	; (8025fc0 <HAL_GPIO_Init+0x330>)
 8025e6a:	4293      	cmp	r3, r2
 8025e6c:	d02b      	beq.n	8025ec6 <HAL_GPIO_Init+0x236>
 8025e6e:	687b      	ldr	r3, [r7, #4]
 8025e70:	4a54      	ldr	r2, [pc, #336]	; (8025fc4 <HAL_GPIO_Init+0x334>)
 8025e72:	4293      	cmp	r3, r2
 8025e74:	d025      	beq.n	8025ec2 <HAL_GPIO_Init+0x232>
 8025e76:	687b      	ldr	r3, [r7, #4]
 8025e78:	4a53      	ldr	r2, [pc, #332]	; (8025fc8 <HAL_GPIO_Init+0x338>)
 8025e7a:	4293      	cmp	r3, r2
 8025e7c:	d01f      	beq.n	8025ebe <HAL_GPIO_Init+0x22e>
 8025e7e:	687b      	ldr	r3, [r7, #4]
 8025e80:	4a52      	ldr	r2, [pc, #328]	; (8025fcc <HAL_GPIO_Init+0x33c>)
 8025e82:	4293      	cmp	r3, r2
 8025e84:	d019      	beq.n	8025eba <HAL_GPIO_Init+0x22a>
 8025e86:	687b      	ldr	r3, [r7, #4]
 8025e88:	4a51      	ldr	r2, [pc, #324]	; (8025fd0 <HAL_GPIO_Init+0x340>)
 8025e8a:	4293      	cmp	r3, r2
 8025e8c:	d013      	beq.n	8025eb6 <HAL_GPIO_Init+0x226>
 8025e8e:	687b      	ldr	r3, [r7, #4]
 8025e90:	4a50      	ldr	r2, [pc, #320]	; (8025fd4 <HAL_GPIO_Init+0x344>)
 8025e92:	4293      	cmp	r3, r2
 8025e94:	d00d      	beq.n	8025eb2 <HAL_GPIO_Init+0x222>
 8025e96:	687b      	ldr	r3, [r7, #4]
 8025e98:	4a4f      	ldr	r2, [pc, #316]	; (8025fd8 <HAL_GPIO_Init+0x348>)
 8025e9a:	4293      	cmp	r3, r2
 8025e9c:	d007      	beq.n	8025eae <HAL_GPIO_Init+0x21e>
 8025e9e:	687b      	ldr	r3, [r7, #4]
 8025ea0:	4a4e      	ldr	r2, [pc, #312]	; (8025fdc <HAL_GPIO_Init+0x34c>)
 8025ea2:	4293      	cmp	r3, r2
 8025ea4:	d101      	bne.n	8025eaa <HAL_GPIO_Init+0x21a>
 8025ea6:	2309      	movs	r3, #9
 8025ea8:	e012      	b.n	8025ed0 <HAL_GPIO_Init+0x240>
 8025eaa:	230a      	movs	r3, #10
 8025eac:	e010      	b.n	8025ed0 <HAL_GPIO_Init+0x240>
 8025eae:	2308      	movs	r3, #8
 8025eb0:	e00e      	b.n	8025ed0 <HAL_GPIO_Init+0x240>
 8025eb2:	2307      	movs	r3, #7
 8025eb4:	e00c      	b.n	8025ed0 <HAL_GPIO_Init+0x240>
 8025eb6:	2306      	movs	r3, #6
 8025eb8:	e00a      	b.n	8025ed0 <HAL_GPIO_Init+0x240>
 8025eba:	2305      	movs	r3, #5
 8025ebc:	e008      	b.n	8025ed0 <HAL_GPIO_Init+0x240>
 8025ebe:	2304      	movs	r3, #4
 8025ec0:	e006      	b.n	8025ed0 <HAL_GPIO_Init+0x240>
 8025ec2:	2303      	movs	r3, #3
 8025ec4:	e004      	b.n	8025ed0 <HAL_GPIO_Init+0x240>
 8025ec6:	2302      	movs	r3, #2
 8025ec8:	e002      	b.n	8025ed0 <HAL_GPIO_Init+0x240>
 8025eca:	2301      	movs	r3, #1
 8025ecc:	e000      	b.n	8025ed0 <HAL_GPIO_Init+0x240>
 8025ece:	2300      	movs	r3, #0
 8025ed0:	69fa      	ldr	r2, [r7, #28]
 8025ed2:	f002 0203 	and.w	r2, r2, #3
 8025ed6:	0092      	lsls	r2, r2, #2
 8025ed8:	4093      	lsls	r3, r2
 8025eda:	69ba      	ldr	r2, [r7, #24]
 8025edc:	4313      	orrs	r3, r2
 8025ede:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8025ee0:	4934      	ldr	r1, [pc, #208]	; (8025fb4 <HAL_GPIO_Init+0x324>)
 8025ee2:	69fb      	ldr	r3, [r7, #28]
 8025ee4:	089b      	lsrs	r3, r3, #2
 8025ee6:	3302      	adds	r3, #2
 8025ee8:	69ba      	ldr	r2, [r7, #24]
 8025eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8025eee:	4b3c      	ldr	r3, [pc, #240]	; (8025fe0 <HAL_GPIO_Init+0x350>)
 8025ef0:	681b      	ldr	r3, [r3, #0]
 8025ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8025ef4:	693b      	ldr	r3, [r7, #16]
 8025ef6:	43db      	mvns	r3, r3
 8025ef8:	69ba      	ldr	r2, [r7, #24]
 8025efa:	4013      	ands	r3, r2
 8025efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8025efe:	683b      	ldr	r3, [r7, #0]
 8025f00:	685b      	ldr	r3, [r3, #4]
 8025f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8025f06:	2b00      	cmp	r3, #0
 8025f08:	d003      	beq.n	8025f12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8025f0a:	69ba      	ldr	r2, [r7, #24]
 8025f0c:	693b      	ldr	r3, [r7, #16]
 8025f0e:	4313      	orrs	r3, r2
 8025f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8025f12:	4a33      	ldr	r2, [pc, #204]	; (8025fe0 <HAL_GPIO_Init+0x350>)
 8025f14:	69bb      	ldr	r3, [r7, #24]
 8025f16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8025f18:	4b31      	ldr	r3, [pc, #196]	; (8025fe0 <HAL_GPIO_Init+0x350>)
 8025f1a:	685b      	ldr	r3, [r3, #4]
 8025f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8025f1e:	693b      	ldr	r3, [r7, #16]
 8025f20:	43db      	mvns	r3, r3
 8025f22:	69ba      	ldr	r2, [r7, #24]
 8025f24:	4013      	ands	r3, r2
 8025f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8025f28:	683b      	ldr	r3, [r7, #0]
 8025f2a:	685b      	ldr	r3, [r3, #4]
 8025f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025f30:	2b00      	cmp	r3, #0
 8025f32:	d003      	beq.n	8025f3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8025f34:	69ba      	ldr	r2, [r7, #24]
 8025f36:	693b      	ldr	r3, [r7, #16]
 8025f38:	4313      	orrs	r3, r2
 8025f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8025f3c:	4a28      	ldr	r2, [pc, #160]	; (8025fe0 <HAL_GPIO_Init+0x350>)
 8025f3e:	69bb      	ldr	r3, [r7, #24]
 8025f40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8025f42:	4b27      	ldr	r3, [pc, #156]	; (8025fe0 <HAL_GPIO_Init+0x350>)
 8025f44:	689b      	ldr	r3, [r3, #8]
 8025f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8025f48:	693b      	ldr	r3, [r7, #16]
 8025f4a:	43db      	mvns	r3, r3
 8025f4c:	69ba      	ldr	r2, [r7, #24]
 8025f4e:	4013      	ands	r3, r2
 8025f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8025f52:	683b      	ldr	r3, [r7, #0]
 8025f54:	685b      	ldr	r3, [r3, #4]
 8025f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8025f5a:	2b00      	cmp	r3, #0
 8025f5c:	d003      	beq.n	8025f66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8025f5e:	69ba      	ldr	r2, [r7, #24]
 8025f60:	693b      	ldr	r3, [r7, #16]
 8025f62:	4313      	orrs	r3, r2
 8025f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8025f66:	4a1e      	ldr	r2, [pc, #120]	; (8025fe0 <HAL_GPIO_Init+0x350>)
 8025f68:	69bb      	ldr	r3, [r7, #24]
 8025f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8025f6c:	4b1c      	ldr	r3, [pc, #112]	; (8025fe0 <HAL_GPIO_Init+0x350>)
 8025f6e:	68db      	ldr	r3, [r3, #12]
 8025f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8025f72:	693b      	ldr	r3, [r7, #16]
 8025f74:	43db      	mvns	r3, r3
 8025f76:	69ba      	ldr	r2, [r7, #24]
 8025f78:	4013      	ands	r3, r2
 8025f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8025f7c:	683b      	ldr	r3, [r7, #0]
 8025f7e:	685b      	ldr	r3, [r3, #4]
 8025f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8025f84:	2b00      	cmp	r3, #0
 8025f86:	d003      	beq.n	8025f90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8025f88:	69ba      	ldr	r2, [r7, #24]
 8025f8a:	693b      	ldr	r3, [r7, #16]
 8025f8c:	4313      	orrs	r3, r2
 8025f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8025f90:	4a13      	ldr	r2, [pc, #76]	; (8025fe0 <HAL_GPIO_Init+0x350>)
 8025f92:	69bb      	ldr	r3, [r7, #24]
 8025f94:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8025f96:	69fb      	ldr	r3, [r7, #28]
 8025f98:	3301      	adds	r3, #1
 8025f9a:	61fb      	str	r3, [r7, #28]
 8025f9c:	69fb      	ldr	r3, [r7, #28]
 8025f9e:	2b0f      	cmp	r3, #15
 8025fa0:	f67f ae86 	bls.w	8025cb0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8025fa4:	bf00      	nop
 8025fa6:	3724      	adds	r7, #36	; 0x24
 8025fa8:	46bd      	mov	sp, r7
 8025faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fae:	4770      	bx	lr
 8025fb0:	40023800 	.word	0x40023800
 8025fb4:	40013800 	.word	0x40013800
 8025fb8:	40020000 	.word	0x40020000
 8025fbc:	40020400 	.word	0x40020400
 8025fc0:	40020800 	.word	0x40020800
 8025fc4:	40020c00 	.word	0x40020c00
 8025fc8:	40021000 	.word	0x40021000
 8025fcc:	40021400 	.word	0x40021400
 8025fd0:	40021800 	.word	0x40021800
 8025fd4:	40021c00 	.word	0x40021c00
 8025fd8:	40022000 	.word	0x40022000
 8025fdc:	40022400 	.word	0x40022400
 8025fe0:	40013c00 	.word	0x40013c00

08025fe4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8025fe4:	b480      	push	{r7}
 8025fe6:	b085      	sub	sp, #20
 8025fe8:	af00      	add	r7, sp, #0
 8025fea:	6078      	str	r0, [r7, #4]
 8025fec:	460b      	mov	r3, r1
 8025fee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8025ff0:	687b      	ldr	r3, [r7, #4]
 8025ff2:	691a      	ldr	r2, [r3, #16]
 8025ff4:	887b      	ldrh	r3, [r7, #2]
 8025ff6:	4013      	ands	r3, r2
 8025ff8:	2b00      	cmp	r3, #0
 8025ffa:	d002      	beq.n	8026002 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8025ffc:	2301      	movs	r3, #1
 8025ffe:	73fb      	strb	r3, [r7, #15]
 8026000:	e001      	b.n	8026006 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8026002:	2300      	movs	r3, #0
 8026004:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8026006:	7bfb      	ldrb	r3, [r7, #15]
}
 8026008:	4618      	mov	r0, r3
 802600a:	3714      	adds	r7, #20
 802600c:	46bd      	mov	sp, r7
 802600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026012:	4770      	bx	lr

08026014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8026014:	b480      	push	{r7}
 8026016:	b083      	sub	sp, #12
 8026018:	af00      	add	r7, sp, #0
 802601a:	6078      	str	r0, [r7, #4]
 802601c:	460b      	mov	r3, r1
 802601e:	807b      	strh	r3, [r7, #2]
 8026020:	4613      	mov	r3, r2
 8026022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8026024:	787b      	ldrb	r3, [r7, #1]
 8026026:	2b00      	cmp	r3, #0
 8026028:	d003      	beq.n	8026032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 802602a:	887a      	ldrh	r2, [r7, #2]
 802602c:	687b      	ldr	r3, [r7, #4]
 802602e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8026030:	e003      	b.n	802603a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8026032:	887b      	ldrh	r3, [r7, #2]
 8026034:	041a      	lsls	r2, r3, #16
 8026036:	687b      	ldr	r3, [r7, #4]
 8026038:	619a      	str	r2, [r3, #24]
}
 802603a:	bf00      	nop
 802603c:	370c      	adds	r7, #12
 802603e:	46bd      	mov	sp, r7
 8026040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026044:	4770      	bx	lr
	...

08026048 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8026048:	b580      	push	{r7, lr}
 802604a:	b082      	sub	sp, #8
 802604c:	af00      	add	r7, sp, #0
 802604e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8026050:	687b      	ldr	r3, [r7, #4]
 8026052:	2b00      	cmp	r3, #0
 8026054:	d101      	bne.n	802605a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8026056:	2301      	movs	r3, #1
 8026058:	e07f      	b.n	802615a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 802605a:	687b      	ldr	r3, [r7, #4]
 802605c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8026060:	b2db      	uxtb	r3, r3
 8026062:	2b00      	cmp	r3, #0
 8026064:	d106      	bne.n	8026074 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8026066:	687b      	ldr	r3, [r7, #4]
 8026068:	2200      	movs	r2, #0
 802606a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 802606e:	6878      	ldr	r0, [r7, #4]
 8026070:	f7da ff1a 	bl	8000ea8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8026074:	687b      	ldr	r3, [r7, #4]
 8026076:	2224      	movs	r2, #36	; 0x24
 8026078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 802607c:	687b      	ldr	r3, [r7, #4]
 802607e:	681b      	ldr	r3, [r3, #0]
 8026080:	681a      	ldr	r2, [r3, #0]
 8026082:	687b      	ldr	r3, [r7, #4]
 8026084:	681b      	ldr	r3, [r3, #0]
 8026086:	f022 0201 	bic.w	r2, r2, #1
 802608a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 802608c:	687b      	ldr	r3, [r7, #4]
 802608e:	685a      	ldr	r2, [r3, #4]
 8026090:	687b      	ldr	r3, [r7, #4]
 8026092:	681b      	ldr	r3, [r3, #0]
 8026094:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8026098:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 802609a:	687b      	ldr	r3, [r7, #4]
 802609c:	681b      	ldr	r3, [r3, #0]
 802609e:	689a      	ldr	r2, [r3, #8]
 80260a0:	687b      	ldr	r3, [r7, #4]
 80260a2:	681b      	ldr	r3, [r3, #0]
 80260a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80260a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80260aa:	687b      	ldr	r3, [r7, #4]
 80260ac:	68db      	ldr	r3, [r3, #12]
 80260ae:	2b01      	cmp	r3, #1
 80260b0:	d107      	bne.n	80260c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80260b2:	687b      	ldr	r3, [r7, #4]
 80260b4:	689a      	ldr	r2, [r3, #8]
 80260b6:	687b      	ldr	r3, [r7, #4]
 80260b8:	681b      	ldr	r3, [r3, #0]
 80260ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80260be:	609a      	str	r2, [r3, #8]
 80260c0:	e006      	b.n	80260d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80260c2:	687b      	ldr	r3, [r7, #4]
 80260c4:	689a      	ldr	r2, [r3, #8]
 80260c6:	687b      	ldr	r3, [r7, #4]
 80260c8:	681b      	ldr	r3, [r3, #0]
 80260ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80260ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80260d0:	687b      	ldr	r3, [r7, #4]
 80260d2:	68db      	ldr	r3, [r3, #12]
 80260d4:	2b02      	cmp	r3, #2
 80260d6:	d104      	bne.n	80260e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80260d8:	687b      	ldr	r3, [r7, #4]
 80260da:	681b      	ldr	r3, [r3, #0]
 80260dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80260e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80260e2:	687b      	ldr	r3, [r7, #4]
 80260e4:	681b      	ldr	r3, [r3, #0]
 80260e6:	6859      	ldr	r1, [r3, #4]
 80260e8:	687b      	ldr	r3, [r7, #4]
 80260ea:	681a      	ldr	r2, [r3, #0]
 80260ec:	4b1d      	ldr	r3, [pc, #116]	; (8026164 <HAL_I2C_Init+0x11c>)
 80260ee:	430b      	orrs	r3, r1
 80260f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80260f2:	687b      	ldr	r3, [r7, #4]
 80260f4:	681b      	ldr	r3, [r3, #0]
 80260f6:	68da      	ldr	r2, [r3, #12]
 80260f8:	687b      	ldr	r3, [r7, #4]
 80260fa:	681b      	ldr	r3, [r3, #0]
 80260fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8026100:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8026102:	687b      	ldr	r3, [r7, #4]
 8026104:	691a      	ldr	r2, [r3, #16]
 8026106:	687b      	ldr	r3, [r7, #4]
 8026108:	695b      	ldr	r3, [r3, #20]
 802610a:	ea42 0103 	orr.w	r1, r2, r3
 802610e:	687b      	ldr	r3, [r7, #4]
 8026110:	699b      	ldr	r3, [r3, #24]
 8026112:	021a      	lsls	r2, r3, #8
 8026114:	687b      	ldr	r3, [r7, #4]
 8026116:	681b      	ldr	r3, [r3, #0]
 8026118:	430a      	orrs	r2, r1
 802611a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 802611c:	687b      	ldr	r3, [r7, #4]
 802611e:	69d9      	ldr	r1, [r3, #28]
 8026120:	687b      	ldr	r3, [r7, #4]
 8026122:	6a1a      	ldr	r2, [r3, #32]
 8026124:	687b      	ldr	r3, [r7, #4]
 8026126:	681b      	ldr	r3, [r3, #0]
 8026128:	430a      	orrs	r2, r1
 802612a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 802612c:	687b      	ldr	r3, [r7, #4]
 802612e:	681b      	ldr	r3, [r3, #0]
 8026130:	681a      	ldr	r2, [r3, #0]
 8026132:	687b      	ldr	r3, [r7, #4]
 8026134:	681b      	ldr	r3, [r3, #0]
 8026136:	f042 0201 	orr.w	r2, r2, #1
 802613a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802613c:	687b      	ldr	r3, [r7, #4]
 802613e:	2200      	movs	r2, #0
 8026140:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8026142:	687b      	ldr	r3, [r7, #4]
 8026144:	2220      	movs	r2, #32
 8026146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 802614a:	687b      	ldr	r3, [r7, #4]
 802614c:	2200      	movs	r2, #0
 802614e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8026150:	687b      	ldr	r3, [r7, #4]
 8026152:	2200      	movs	r2, #0
 8026154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8026158:	2300      	movs	r3, #0
}
 802615a:	4618      	mov	r0, r3
 802615c:	3708      	adds	r7, #8
 802615e:	46bd      	mov	sp, r7
 8026160:	bd80      	pop	{r7, pc}
 8026162:	bf00      	nop
 8026164:	02008000 	.word	0x02008000

08026168 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8026168:	b580      	push	{r7, lr}
 802616a:	b088      	sub	sp, #32
 802616c:	af02      	add	r7, sp, #8
 802616e:	60f8      	str	r0, [r7, #12]
 8026170:	4608      	mov	r0, r1
 8026172:	4611      	mov	r1, r2
 8026174:	461a      	mov	r2, r3
 8026176:	4603      	mov	r3, r0
 8026178:	817b      	strh	r3, [r7, #10]
 802617a:	460b      	mov	r3, r1
 802617c:	813b      	strh	r3, [r7, #8]
 802617e:	4613      	mov	r3, r2
 8026180:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8026182:	68fb      	ldr	r3, [r7, #12]
 8026184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8026188:	b2db      	uxtb	r3, r3
 802618a:	2b20      	cmp	r3, #32
 802618c:	f040 80fd 	bne.w	802638a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8026190:	6a3b      	ldr	r3, [r7, #32]
 8026192:	2b00      	cmp	r3, #0
 8026194:	d002      	beq.n	802619c <HAL_I2C_Mem_Read+0x34>
 8026196:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8026198:	2b00      	cmp	r3, #0
 802619a:	d105      	bne.n	80261a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 802619c:	68fb      	ldr	r3, [r7, #12]
 802619e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80261a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80261a4:	2301      	movs	r3, #1
 80261a6:	e0f1      	b.n	802638c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80261a8:	68fb      	ldr	r3, [r7, #12]
 80261aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80261ae:	2b01      	cmp	r3, #1
 80261b0:	d101      	bne.n	80261b6 <HAL_I2C_Mem_Read+0x4e>
 80261b2:	2302      	movs	r3, #2
 80261b4:	e0ea      	b.n	802638c <HAL_I2C_Mem_Read+0x224>
 80261b6:	68fb      	ldr	r3, [r7, #12]
 80261b8:	2201      	movs	r2, #1
 80261ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80261be:	f7ff f96f 	bl	80254a0 <HAL_GetTick>
 80261c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80261c4:	697b      	ldr	r3, [r7, #20]
 80261c6:	9300      	str	r3, [sp, #0]
 80261c8:	2319      	movs	r3, #25
 80261ca:	2201      	movs	r2, #1
 80261cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80261d0:	68f8      	ldr	r0, [r7, #12]
 80261d2:	f000 f975 	bl	80264c0 <I2C_WaitOnFlagUntilTimeout>
 80261d6:	4603      	mov	r3, r0
 80261d8:	2b00      	cmp	r3, #0
 80261da:	d001      	beq.n	80261e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80261dc:	2301      	movs	r3, #1
 80261de:	e0d5      	b.n	802638c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80261e0:	68fb      	ldr	r3, [r7, #12]
 80261e2:	2222      	movs	r2, #34	; 0x22
 80261e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80261e8:	68fb      	ldr	r3, [r7, #12]
 80261ea:	2240      	movs	r2, #64	; 0x40
 80261ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80261f0:	68fb      	ldr	r3, [r7, #12]
 80261f2:	2200      	movs	r2, #0
 80261f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80261f6:	68fb      	ldr	r3, [r7, #12]
 80261f8:	6a3a      	ldr	r2, [r7, #32]
 80261fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80261fc:	68fb      	ldr	r3, [r7, #12]
 80261fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8026200:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8026202:	68fb      	ldr	r3, [r7, #12]
 8026204:	2200      	movs	r2, #0
 8026206:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8026208:	88f8      	ldrh	r0, [r7, #6]
 802620a:	893a      	ldrh	r2, [r7, #8]
 802620c:	8979      	ldrh	r1, [r7, #10]
 802620e:	697b      	ldr	r3, [r7, #20]
 8026210:	9301      	str	r3, [sp, #4]
 8026212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026214:	9300      	str	r3, [sp, #0]
 8026216:	4603      	mov	r3, r0
 8026218:	68f8      	ldr	r0, [r7, #12]
 802621a:	f000 f8d9 	bl	80263d0 <I2C_RequestMemoryRead>
 802621e:	4603      	mov	r3, r0
 8026220:	2b00      	cmp	r3, #0
 8026222:	d005      	beq.n	8026230 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8026224:	68fb      	ldr	r3, [r7, #12]
 8026226:	2200      	movs	r2, #0
 8026228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 802622c:	2301      	movs	r3, #1
 802622e:	e0ad      	b.n	802638c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8026230:	68fb      	ldr	r3, [r7, #12]
 8026232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8026234:	b29b      	uxth	r3, r3
 8026236:	2bff      	cmp	r3, #255	; 0xff
 8026238:	d90e      	bls.n	8026258 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 802623a:	68fb      	ldr	r3, [r7, #12]
 802623c:	22ff      	movs	r2, #255	; 0xff
 802623e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8026240:	68fb      	ldr	r3, [r7, #12]
 8026242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8026244:	b2da      	uxtb	r2, r3
 8026246:	8979      	ldrh	r1, [r7, #10]
 8026248:	4b52      	ldr	r3, [pc, #328]	; (8026394 <HAL_I2C_Mem_Read+0x22c>)
 802624a:	9300      	str	r3, [sp, #0]
 802624c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8026250:	68f8      	ldr	r0, [r7, #12]
 8026252:	f000 fa57 	bl	8026704 <I2C_TransferConfig>
 8026256:	e00f      	b.n	8026278 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8026258:	68fb      	ldr	r3, [r7, #12]
 802625a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802625c:	b29a      	uxth	r2, r3
 802625e:	68fb      	ldr	r3, [r7, #12]
 8026260:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8026262:	68fb      	ldr	r3, [r7, #12]
 8026264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8026266:	b2da      	uxtb	r2, r3
 8026268:	8979      	ldrh	r1, [r7, #10]
 802626a:	4b4a      	ldr	r3, [pc, #296]	; (8026394 <HAL_I2C_Mem_Read+0x22c>)
 802626c:	9300      	str	r3, [sp, #0]
 802626e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8026272:	68f8      	ldr	r0, [r7, #12]
 8026274:	f000 fa46 	bl	8026704 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8026278:	697b      	ldr	r3, [r7, #20]
 802627a:	9300      	str	r3, [sp, #0]
 802627c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802627e:	2200      	movs	r2, #0
 8026280:	2104      	movs	r1, #4
 8026282:	68f8      	ldr	r0, [r7, #12]
 8026284:	f000 f91c 	bl	80264c0 <I2C_WaitOnFlagUntilTimeout>
 8026288:	4603      	mov	r3, r0
 802628a:	2b00      	cmp	r3, #0
 802628c:	d001      	beq.n	8026292 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 802628e:	2301      	movs	r3, #1
 8026290:	e07c      	b.n	802638c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8026292:	68fb      	ldr	r3, [r7, #12]
 8026294:	681b      	ldr	r3, [r3, #0]
 8026296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8026298:	68fb      	ldr	r3, [r7, #12]
 802629a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802629c:	b2d2      	uxtb	r2, r2
 802629e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80262a0:	68fb      	ldr	r3, [r7, #12]
 80262a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80262a4:	1c5a      	adds	r2, r3, #1
 80262a6:	68fb      	ldr	r3, [r7, #12]
 80262a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80262aa:	68fb      	ldr	r3, [r7, #12]
 80262ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80262ae:	3b01      	subs	r3, #1
 80262b0:	b29a      	uxth	r2, r3
 80262b2:	68fb      	ldr	r3, [r7, #12]
 80262b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80262b6:	68fb      	ldr	r3, [r7, #12]
 80262b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80262ba:	b29b      	uxth	r3, r3
 80262bc:	3b01      	subs	r3, #1
 80262be:	b29a      	uxth	r2, r3
 80262c0:	68fb      	ldr	r3, [r7, #12]
 80262c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80262c4:	68fb      	ldr	r3, [r7, #12]
 80262c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80262c8:	b29b      	uxth	r3, r3
 80262ca:	2b00      	cmp	r3, #0
 80262cc:	d034      	beq.n	8026338 <HAL_I2C_Mem_Read+0x1d0>
 80262ce:	68fb      	ldr	r3, [r7, #12]
 80262d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80262d2:	2b00      	cmp	r3, #0
 80262d4:	d130      	bne.n	8026338 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80262d6:	697b      	ldr	r3, [r7, #20]
 80262d8:	9300      	str	r3, [sp, #0]
 80262da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80262dc:	2200      	movs	r2, #0
 80262de:	2180      	movs	r1, #128	; 0x80
 80262e0:	68f8      	ldr	r0, [r7, #12]
 80262e2:	f000 f8ed 	bl	80264c0 <I2C_WaitOnFlagUntilTimeout>
 80262e6:	4603      	mov	r3, r0
 80262e8:	2b00      	cmp	r3, #0
 80262ea:	d001      	beq.n	80262f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80262ec:	2301      	movs	r3, #1
 80262ee:	e04d      	b.n	802638c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80262f0:	68fb      	ldr	r3, [r7, #12]
 80262f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80262f4:	b29b      	uxth	r3, r3
 80262f6:	2bff      	cmp	r3, #255	; 0xff
 80262f8:	d90e      	bls.n	8026318 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80262fa:	68fb      	ldr	r3, [r7, #12]
 80262fc:	22ff      	movs	r2, #255	; 0xff
 80262fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8026300:	68fb      	ldr	r3, [r7, #12]
 8026302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8026304:	b2da      	uxtb	r2, r3
 8026306:	8979      	ldrh	r1, [r7, #10]
 8026308:	2300      	movs	r3, #0
 802630a:	9300      	str	r3, [sp, #0]
 802630c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8026310:	68f8      	ldr	r0, [r7, #12]
 8026312:	f000 f9f7 	bl	8026704 <I2C_TransferConfig>
 8026316:	e00f      	b.n	8026338 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8026318:	68fb      	ldr	r3, [r7, #12]
 802631a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802631c:	b29a      	uxth	r2, r3
 802631e:	68fb      	ldr	r3, [r7, #12]
 8026320:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8026322:	68fb      	ldr	r3, [r7, #12]
 8026324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8026326:	b2da      	uxtb	r2, r3
 8026328:	8979      	ldrh	r1, [r7, #10]
 802632a:	2300      	movs	r3, #0
 802632c:	9300      	str	r3, [sp, #0]
 802632e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8026332:	68f8      	ldr	r0, [r7, #12]
 8026334:	f000 f9e6 	bl	8026704 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8026338:	68fb      	ldr	r3, [r7, #12]
 802633a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802633c:	b29b      	uxth	r3, r3
 802633e:	2b00      	cmp	r3, #0
 8026340:	d19a      	bne.n	8026278 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8026342:	697a      	ldr	r2, [r7, #20]
 8026344:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8026346:	68f8      	ldr	r0, [r7, #12]
 8026348:	f000 f93a 	bl	80265c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 802634c:	4603      	mov	r3, r0
 802634e:	2b00      	cmp	r3, #0
 8026350:	d001      	beq.n	8026356 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8026352:	2301      	movs	r3, #1
 8026354:	e01a      	b.n	802638c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8026356:	68fb      	ldr	r3, [r7, #12]
 8026358:	681b      	ldr	r3, [r3, #0]
 802635a:	2220      	movs	r2, #32
 802635c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 802635e:	68fb      	ldr	r3, [r7, #12]
 8026360:	681b      	ldr	r3, [r3, #0]
 8026362:	6859      	ldr	r1, [r3, #4]
 8026364:	68fb      	ldr	r3, [r7, #12]
 8026366:	681a      	ldr	r2, [r3, #0]
 8026368:	4b0b      	ldr	r3, [pc, #44]	; (8026398 <HAL_I2C_Mem_Read+0x230>)
 802636a:	400b      	ands	r3, r1
 802636c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 802636e:	68fb      	ldr	r3, [r7, #12]
 8026370:	2220      	movs	r2, #32
 8026372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8026376:	68fb      	ldr	r3, [r7, #12]
 8026378:	2200      	movs	r2, #0
 802637a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802637e:	68fb      	ldr	r3, [r7, #12]
 8026380:	2200      	movs	r2, #0
 8026382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8026386:	2300      	movs	r3, #0
 8026388:	e000      	b.n	802638c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 802638a:	2302      	movs	r3, #2
  }
}
 802638c:	4618      	mov	r0, r3
 802638e:	3718      	adds	r7, #24
 8026390:	46bd      	mov	sp, r7
 8026392:	bd80      	pop	{r7, pc}
 8026394:	80002400 	.word	0x80002400
 8026398:	fe00e800 	.word	0xfe00e800

0802639c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 802639c:	b580      	push	{r7, lr}
 802639e:	b084      	sub	sp, #16
 80263a0:	af00      	add	r7, sp, #0
 80263a2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80263a4:	687b      	ldr	r3, [r7, #4]
 80263a6:	681b      	ldr	r3, [r3, #0]
 80263a8:	699b      	ldr	r3, [r3, #24]
 80263aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80263ac:	687b      	ldr	r3, [r7, #4]
 80263ae:	681b      	ldr	r3, [r3, #0]
 80263b0:	681b      	ldr	r3, [r3, #0]
 80263b2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80263b4:	687b      	ldr	r3, [r7, #4]
 80263b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80263b8:	2b00      	cmp	r3, #0
 80263ba:	d005      	beq.n	80263c8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80263bc:	687b      	ldr	r3, [r7, #4]
 80263be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80263c0:	68ba      	ldr	r2, [r7, #8]
 80263c2:	68f9      	ldr	r1, [r7, #12]
 80263c4:	6878      	ldr	r0, [r7, #4]
 80263c6:	4798      	blx	r3
  }
}
 80263c8:	bf00      	nop
 80263ca:	3710      	adds	r7, #16
 80263cc:	46bd      	mov	sp, r7
 80263ce:	bd80      	pop	{r7, pc}

080263d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80263d0:	b580      	push	{r7, lr}
 80263d2:	b086      	sub	sp, #24
 80263d4:	af02      	add	r7, sp, #8
 80263d6:	60f8      	str	r0, [r7, #12]
 80263d8:	4608      	mov	r0, r1
 80263da:	4611      	mov	r1, r2
 80263dc:	461a      	mov	r2, r3
 80263de:	4603      	mov	r3, r0
 80263e0:	817b      	strh	r3, [r7, #10]
 80263e2:	460b      	mov	r3, r1
 80263e4:	813b      	strh	r3, [r7, #8]
 80263e6:	4613      	mov	r3, r2
 80263e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80263ea:	88fb      	ldrh	r3, [r7, #6]
 80263ec:	b2da      	uxtb	r2, r3
 80263ee:	8979      	ldrh	r1, [r7, #10]
 80263f0:	4b20      	ldr	r3, [pc, #128]	; (8026474 <I2C_RequestMemoryRead+0xa4>)
 80263f2:	9300      	str	r3, [sp, #0]
 80263f4:	2300      	movs	r3, #0
 80263f6:	68f8      	ldr	r0, [r7, #12]
 80263f8:	f000 f984 	bl	8026704 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80263fc:	69fa      	ldr	r2, [r7, #28]
 80263fe:	69b9      	ldr	r1, [r7, #24]
 8026400:	68f8      	ldr	r0, [r7, #12]
 8026402:	f000 f89d 	bl	8026540 <I2C_WaitOnTXISFlagUntilTimeout>
 8026406:	4603      	mov	r3, r0
 8026408:	2b00      	cmp	r3, #0
 802640a:	d001      	beq.n	8026410 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 802640c:	2301      	movs	r3, #1
 802640e:	e02c      	b.n	802646a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8026410:	88fb      	ldrh	r3, [r7, #6]
 8026412:	2b01      	cmp	r3, #1
 8026414:	d105      	bne.n	8026422 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8026416:	893b      	ldrh	r3, [r7, #8]
 8026418:	b2da      	uxtb	r2, r3
 802641a:	68fb      	ldr	r3, [r7, #12]
 802641c:	681b      	ldr	r3, [r3, #0]
 802641e:	629a      	str	r2, [r3, #40]	; 0x28
 8026420:	e015      	b.n	802644e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8026422:	893b      	ldrh	r3, [r7, #8]
 8026424:	0a1b      	lsrs	r3, r3, #8
 8026426:	b29b      	uxth	r3, r3
 8026428:	b2da      	uxtb	r2, r3
 802642a:	68fb      	ldr	r3, [r7, #12]
 802642c:	681b      	ldr	r3, [r3, #0]
 802642e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8026430:	69fa      	ldr	r2, [r7, #28]
 8026432:	69b9      	ldr	r1, [r7, #24]
 8026434:	68f8      	ldr	r0, [r7, #12]
 8026436:	f000 f883 	bl	8026540 <I2C_WaitOnTXISFlagUntilTimeout>
 802643a:	4603      	mov	r3, r0
 802643c:	2b00      	cmp	r3, #0
 802643e:	d001      	beq.n	8026444 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8026440:	2301      	movs	r3, #1
 8026442:	e012      	b.n	802646a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8026444:	893b      	ldrh	r3, [r7, #8]
 8026446:	b2da      	uxtb	r2, r3
 8026448:	68fb      	ldr	r3, [r7, #12]
 802644a:	681b      	ldr	r3, [r3, #0]
 802644c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 802644e:	69fb      	ldr	r3, [r7, #28]
 8026450:	9300      	str	r3, [sp, #0]
 8026452:	69bb      	ldr	r3, [r7, #24]
 8026454:	2200      	movs	r2, #0
 8026456:	2140      	movs	r1, #64	; 0x40
 8026458:	68f8      	ldr	r0, [r7, #12]
 802645a:	f000 f831 	bl	80264c0 <I2C_WaitOnFlagUntilTimeout>
 802645e:	4603      	mov	r3, r0
 8026460:	2b00      	cmp	r3, #0
 8026462:	d001      	beq.n	8026468 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8026464:	2301      	movs	r3, #1
 8026466:	e000      	b.n	802646a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8026468:	2300      	movs	r3, #0
}
 802646a:	4618      	mov	r0, r3
 802646c:	3710      	adds	r7, #16
 802646e:	46bd      	mov	sp, r7
 8026470:	bd80      	pop	{r7, pc}
 8026472:	bf00      	nop
 8026474:	80002000 	.word	0x80002000

08026478 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8026478:	b480      	push	{r7}
 802647a:	b083      	sub	sp, #12
 802647c:	af00      	add	r7, sp, #0
 802647e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8026480:	687b      	ldr	r3, [r7, #4]
 8026482:	681b      	ldr	r3, [r3, #0]
 8026484:	699b      	ldr	r3, [r3, #24]
 8026486:	f003 0302 	and.w	r3, r3, #2
 802648a:	2b02      	cmp	r3, #2
 802648c:	d103      	bne.n	8026496 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 802648e:	687b      	ldr	r3, [r7, #4]
 8026490:	681b      	ldr	r3, [r3, #0]
 8026492:	2200      	movs	r2, #0
 8026494:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8026496:	687b      	ldr	r3, [r7, #4]
 8026498:	681b      	ldr	r3, [r3, #0]
 802649a:	699b      	ldr	r3, [r3, #24]
 802649c:	f003 0301 	and.w	r3, r3, #1
 80264a0:	2b01      	cmp	r3, #1
 80264a2:	d007      	beq.n	80264b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80264a4:	687b      	ldr	r3, [r7, #4]
 80264a6:	681b      	ldr	r3, [r3, #0]
 80264a8:	699a      	ldr	r2, [r3, #24]
 80264aa:	687b      	ldr	r3, [r7, #4]
 80264ac:	681b      	ldr	r3, [r3, #0]
 80264ae:	f042 0201 	orr.w	r2, r2, #1
 80264b2:	619a      	str	r2, [r3, #24]
  }
}
 80264b4:	bf00      	nop
 80264b6:	370c      	adds	r7, #12
 80264b8:	46bd      	mov	sp, r7
 80264ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80264be:	4770      	bx	lr

080264c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80264c0:	b580      	push	{r7, lr}
 80264c2:	b084      	sub	sp, #16
 80264c4:	af00      	add	r7, sp, #0
 80264c6:	60f8      	str	r0, [r7, #12]
 80264c8:	60b9      	str	r1, [r7, #8]
 80264ca:	603b      	str	r3, [r7, #0]
 80264cc:	4613      	mov	r3, r2
 80264ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80264d0:	e022      	b.n	8026518 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80264d2:	683b      	ldr	r3, [r7, #0]
 80264d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80264d8:	d01e      	beq.n	8026518 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80264da:	f7fe ffe1 	bl	80254a0 <HAL_GetTick>
 80264de:	4602      	mov	r2, r0
 80264e0:	69bb      	ldr	r3, [r7, #24]
 80264e2:	1ad3      	subs	r3, r2, r3
 80264e4:	683a      	ldr	r2, [r7, #0]
 80264e6:	429a      	cmp	r2, r3
 80264e8:	d302      	bcc.n	80264f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80264ea:	683b      	ldr	r3, [r7, #0]
 80264ec:	2b00      	cmp	r3, #0
 80264ee:	d113      	bne.n	8026518 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80264f0:	68fb      	ldr	r3, [r7, #12]
 80264f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80264f4:	f043 0220 	orr.w	r2, r3, #32
 80264f8:	68fb      	ldr	r3, [r7, #12]
 80264fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80264fc:	68fb      	ldr	r3, [r7, #12]
 80264fe:	2220      	movs	r2, #32
 8026500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8026504:	68fb      	ldr	r3, [r7, #12]
 8026506:	2200      	movs	r2, #0
 8026508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 802650c:	68fb      	ldr	r3, [r7, #12]
 802650e:	2200      	movs	r2, #0
 8026510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8026514:	2301      	movs	r3, #1
 8026516:	e00f      	b.n	8026538 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8026518:	68fb      	ldr	r3, [r7, #12]
 802651a:	681b      	ldr	r3, [r3, #0]
 802651c:	699a      	ldr	r2, [r3, #24]
 802651e:	68bb      	ldr	r3, [r7, #8]
 8026520:	4013      	ands	r3, r2
 8026522:	68ba      	ldr	r2, [r7, #8]
 8026524:	429a      	cmp	r2, r3
 8026526:	bf0c      	ite	eq
 8026528:	2301      	moveq	r3, #1
 802652a:	2300      	movne	r3, #0
 802652c:	b2db      	uxtb	r3, r3
 802652e:	461a      	mov	r2, r3
 8026530:	79fb      	ldrb	r3, [r7, #7]
 8026532:	429a      	cmp	r2, r3
 8026534:	d0cd      	beq.n	80264d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8026536:	2300      	movs	r3, #0
}
 8026538:	4618      	mov	r0, r3
 802653a:	3710      	adds	r7, #16
 802653c:	46bd      	mov	sp, r7
 802653e:	bd80      	pop	{r7, pc}

08026540 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8026540:	b580      	push	{r7, lr}
 8026542:	b084      	sub	sp, #16
 8026544:	af00      	add	r7, sp, #0
 8026546:	60f8      	str	r0, [r7, #12]
 8026548:	60b9      	str	r1, [r7, #8]
 802654a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 802654c:	e02c      	b.n	80265a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 802654e:	687a      	ldr	r2, [r7, #4]
 8026550:	68b9      	ldr	r1, [r7, #8]
 8026552:	68f8      	ldr	r0, [r7, #12]
 8026554:	f000 f870 	bl	8026638 <I2C_IsAcknowledgeFailed>
 8026558:	4603      	mov	r3, r0
 802655a:	2b00      	cmp	r3, #0
 802655c:	d001      	beq.n	8026562 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 802655e:	2301      	movs	r3, #1
 8026560:	e02a      	b.n	80265b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8026562:	68bb      	ldr	r3, [r7, #8]
 8026564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026568:	d01e      	beq.n	80265a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802656a:	f7fe ff99 	bl	80254a0 <HAL_GetTick>
 802656e:	4602      	mov	r2, r0
 8026570:	687b      	ldr	r3, [r7, #4]
 8026572:	1ad3      	subs	r3, r2, r3
 8026574:	68ba      	ldr	r2, [r7, #8]
 8026576:	429a      	cmp	r2, r3
 8026578:	d302      	bcc.n	8026580 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 802657a:	68bb      	ldr	r3, [r7, #8]
 802657c:	2b00      	cmp	r3, #0
 802657e:	d113      	bne.n	80265a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8026580:	68fb      	ldr	r3, [r7, #12]
 8026582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026584:	f043 0220 	orr.w	r2, r3, #32
 8026588:	68fb      	ldr	r3, [r7, #12]
 802658a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 802658c:	68fb      	ldr	r3, [r7, #12]
 802658e:	2220      	movs	r2, #32
 8026590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8026594:	68fb      	ldr	r3, [r7, #12]
 8026596:	2200      	movs	r2, #0
 8026598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 802659c:	68fb      	ldr	r3, [r7, #12]
 802659e:	2200      	movs	r2, #0
 80265a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80265a4:	2301      	movs	r3, #1
 80265a6:	e007      	b.n	80265b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80265a8:	68fb      	ldr	r3, [r7, #12]
 80265aa:	681b      	ldr	r3, [r3, #0]
 80265ac:	699b      	ldr	r3, [r3, #24]
 80265ae:	f003 0302 	and.w	r3, r3, #2
 80265b2:	2b02      	cmp	r3, #2
 80265b4:	d1cb      	bne.n	802654e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80265b6:	2300      	movs	r3, #0
}
 80265b8:	4618      	mov	r0, r3
 80265ba:	3710      	adds	r7, #16
 80265bc:	46bd      	mov	sp, r7
 80265be:	bd80      	pop	{r7, pc}

080265c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80265c0:	b580      	push	{r7, lr}
 80265c2:	b084      	sub	sp, #16
 80265c4:	af00      	add	r7, sp, #0
 80265c6:	60f8      	str	r0, [r7, #12]
 80265c8:	60b9      	str	r1, [r7, #8]
 80265ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80265cc:	e028      	b.n	8026620 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80265ce:	687a      	ldr	r2, [r7, #4]
 80265d0:	68b9      	ldr	r1, [r7, #8]
 80265d2:	68f8      	ldr	r0, [r7, #12]
 80265d4:	f000 f830 	bl	8026638 <I2C_IsAcknowledgeFailed>
 80265d8:	4603      	mov	r3, r0
 80265da:	2b00      	cmp	r3, #0
 80265dc:	d001      	beq.n	80265e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80265de:	2301      	movs	r3, #1
 80265e0:	e026      	b.n	8026630 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80265e2:	f7fe ff5d 	bl	80254a0 <HAL_GetTick>
 80265e6:	4602      	mov	r2, r0
 80265e8:	687b      	ldr	r3, [r7, #4]
 80265ea:	1ad3      	subs	r3, r2, r3
 80265ec:	68ba      	ldr	r2, [r7, #8]
 80265ee:	429a      	cmp	r2, r3
 80265f0:	d302      	bcc.n	80265f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80265f2:	68bb      	ldr	r3, [r7, #8]
 80265f4:	2b00      	cmp	r3, #0
 80265f6:	d113      	bne.n	8026620 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80265f8:	68fb      	ldr	r3, [r7, #12]
 80265fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80265fc:	f043 0220 	orr.w	r2, r3, #32
 8026600:	68fb      	ldr	r3, [r7, #12]
 8026602:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8026604:	68fb      	ldr	r3, [r7, #12]
 8026606:	2220      	movs	r2, #32
 8026608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 802660c:	68fb      	ldr	r3, [r7, #12]
 802660e:	2200      	movs	r2, #0
 8026610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8026614:	68fb      	ldr	r3, [r7, #12]
 8026616:	2200      	movs	r2, #0
 8026618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 802661c:	2301      	movs	r3, #1
 802661e:	e007      	b.n	8026630 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8026620:	68fb      	ldr	r3, [r7, #12]
 8026622:	681b      	ldr	r3, [r3, #0]
 8026624:	699b      	ldr	r3, [r3, #24]
 8026626:	f003 0320 	and.w	r3, r3, #32
 802662a:	2b20      	cmp	r3, #32
 802662c:	d1cf      	bne.n	80265ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 802662e:	2300      	movs	r3, #0
}
 8026630:	4618      	mov	r0, r3
 8026632:	3710      	adds	r7, #16
 8026634:	46bd      	mov	sp, r7
 8026636:	bd80      	pop	{r7, pc}

08026638 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8026638:	b580      	push	{r7, lr}
 802663a:	b084      	sub	sp, #16
 802663c:	af00      	add	r7, sp, #0
 802663e:	60f8      	str	r0, [r7, #12]
 8026640:	60b9      	str	r1, [r7, #8]
 8026642:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8026644:	68fb      	ldr	r3, [r7, #12]
 8026646:	681b      	ldr	r3, [r3, #0]
 8026648:	699b      	ldr	r3, [r3, #24]
 802664a:	f003 0310 	and.w	r3, r3, #16
 802664e:	2b10      	cmp	r3, #16
 8026650:	d151      	bne.n	80266f6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8026652:	e022      	b.n	802669a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8026654:	68bb      	ldr	r3, [r7, #8]
 8026656:	f1b3 3fff 	cmp.w	r3, #4294967295
 802665a:	d01e      	beq.n	802669a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802665c:	f7fe ff20 	bl	80254a0 <HAL_GetTick>
 8026660:	4602      	mov	r2, r0
 8026662:	687b      	ldr	r3, [r7, #4]
 8026664:	1ad3      	subs	r3, r2, r3
 8026666:	68ba      	ldr	r2, [r7, #8]
 8026668:	429a      	cmp	r2, r3
 802666a:	d302      	bcc.n	8026672 <I2C_IsAcknowledgeFailed+0x3a>
 802666c:	68bb      	ldr	r3, [r7, #8]
 802666e:	2b00      	cmp	r3, #0
 8026670:	d113      	bne.n	802669a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8026672:	68fb      	ldr	r3, [r7, #12]
 8026674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026676:	f043 0220 	orr.w	r2, r3, #32
 802667a:	68fb      	ldr	r3, [r7, #12]
 802667c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 802667e:	68fb      	ldr	r3, [r7, #12]
 8026680:	2220      	movs	r2, #32
 8026682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8026686:	68fb      	ldr	r3, [r7, #12]
 8026688:	2200      	movs	r2, #0
 802668a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 802668e:	68fb      	ldr	r3, [r7, #12]
 8026690:	2200      	movs	r2, #0
 8026692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8026696:	2301      	movs	r3, #1
 8026698:	e02e      	b.n	80266f8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 802669a:	68fb      	ldr	r3, [r7, #12]
 802669c:	681b      	ldr	r3, [r3, #0]
 802669e:	699b      	ldr	r3, [r3, #24]
 80266a0:	f003 0320 	and.w	r3, r3, #32
 80266a4:	2b20      	cmp	r3, #32
 80266a6:	d1d5      	bne.n	8026654 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80266a8:	68fb      	ldr	r3, [r7, #12]
 80266aa:	681b      	ldr	r3, [r3, #0]
 80266ac:	2210      	movs	r2, #16
 80266ae:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80266b0:	68fb      	ldr	r3, [r7, #12]
 80266b2:	681b      	ldr	r3, [r3, #0]
 80266b4:	2220      	movs	r2, #32
 80266b6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80266b8:	68f8      	ldr	r0, [r7, #12]
 80266ba:	f7ff fedd 	bl	8026478 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80266be:	68fb      	ldr	r3, [r7, #12]
 80266c0:	681b      	ldr	r3, [r3, #0]
 80266c2:	6859      	ldr	r1, [r3, #4]
 80266c4:	68fb      	ldr	r3, [r7, #12]
 80266c6:	681a      	ldr	r2, [r3, #0]
 80266c8:	4b0d      	ldr	r3, [pc, #52]	; (8026700 <I2C_IsAcknowledgeFailed+0xc8>)
 80266ca:	400b      	ands	r3, r1
 80266cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80266ce:	68fb      	ldr	r3, [r7, #12]
 80266d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80266d2:	f043 0204 	orr.w	r2, r3, #4
 80266d6:	68fb      	ldr	r3, [r7, #12]
 80266d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80266da:	68fb      	ldr	r3, [r7, #12]
 80266dc:	2220      	movs	r2, #32
 80266de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80266e2:	68fb      	ldr	r3, [r7, #12]
 80266e4:	2200      	movs	r2, #0
 80266e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80266ea:	68fb      	ldr	r3, [r7, #12]
 80266ec:	2200      	movs	r2, #0
 80266ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80266f2:	2301      	movs	r3, #1
 80266f4:	e000      	b.n	80266f8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80266f6:	2300      	movs	r3, #0
}
 80266f8:	4618      	mov	r0, r3
 80266fa:	3710      	adds	r7, #16
 80266fc:	46bd      	mov	sp, r7
 80266fe:	bd80      	pop	{r7, pc}
 8026700:	fe00e800 	.word	0xfe00e800

08026704 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8026704:	b480      	push	{r7}
 8026706:	b085      	sub	sp, #20
 8026708:	af00      	add	r7, sp, #0
 802670a:	60f8      	str	r0, [r7, #12]
 802670c:	607b      	str	r3, [r7, #4]
 802670e:	460b      	mov	r3, r1
 8026710:	817b      	strh	r3, [r7, #10]
 8026712:	4613      	mov	r3, r2
 8026714:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8026716:	68fb      	ldr	r3, [r7, #12]
 8026718:	681b      	ldr	r3, [r3, #0]
 802671a:	685a      	ldr	r2, [r3, #4]
 802671c:	69bb      	ldr	r3, [r7, #24]
 802671e:	0d5b      	lsrs	r3, r3, #21
 8026720:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8026724:	4b0d      	ldr	r3, [pc, #52]	; (802675c <I2C_TransferConfig+0x58>)
 8026726:	430b      	orrs	r3, r1
 8026728:	43db      	mvns	r3, r3
 802672a:	ea02 0103 	and.w	r1, r2, r3
 802672e:	897b      	ldrh	r3, [r7, #10]
 8026730:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8026734:	7a7b      	ldrb	r3, [r7, #9]
 8026736:	041b      	lsls	r3, r3, #16
 8026738:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802673c:	431a      	orrs	r2, r3
 802673e:	687b      	ldr	r3, [r7, #4]
 8026740:	431a      	orrs	r2, r3
 8026742:	69bb      	ldr	r3, [r7, #24]
 8026744:	431a      	orrs	r2, r3
 8026746:	68fb      	ldr	r3, [r7, #12]
 8026748:	681b      	ldr	r3, [r3, #0]
 802674a:	430a      	orrs	r2, r1
 802674c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 802674e:	bf00      	nop
 8026750:	3714      	adds	r7, #20
 8026752:	46bd      	mov	sp, r7
 8026754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026758:	4770      	bx	lr
 802675a:	bf00      	nop
 802675c:	03ff63ff 	.word	0x03ff63ff

08026760 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8026760:	b480      	push	{r7}
 8026762:	b083      	sub	sp, #12
 8026764:	af00      	add	r7, sp, #0
 8026766:	6078      	str	r0, [r7, #4]
 8026768:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 802676a:	687b      	ldr	r3, [r7, #4]
 802676c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8026770:	b2db      	uxtb	r3, r3
 8026772:	2b20      	cmp	r3, #32
 8026774:	d138      	bne.n	80267e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8026776:	687b      	ldr	r3, [r7, #4]
 8026778:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802677c:	2b01      	cmp	r3, #1
 802677e:	d101      	bne.n	8026784 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8026780:	2302      	movs	r3, #2
 8026782:	e032      	b.n	80267ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8026784:	687b      	ldr	r3, [r7, #4]
 8026786:	2201      	movs	r2, #1
 8026788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 802678c:	687b      	ldr	r3, [r7, #4]
 802678e:	2224      	movs	r2, #36	; 0x24
 8026790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8026794:	687b      	ldr	r3, [r7, #4]
 8026796:	681b      	ldr	r3, [r3, #0]
 8026798:	681a      	ldr	r2, [r3, #0]
 802679a:	687b      	ldr	r3, [r7, #4]
 802679c:	681b      	ldr	r3, [r3, #0]
 802679e:	f022 0201 	bic.w	r2, r2, #1
 80267a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80267a4:	687b      	ldr	r3, [r7, #4]
 80267a6:	681b      	ldr	r3, [r3, #0]
 80267a8:	681a      	ldr	r2, [r3, #0]
 80267aa:	687b      	ldr	r3, [r7, #4]
 80267ac:	681b      	ldr	r3, [r3, #0]
 80267ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80267b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80267b4:	687b      	ldr	r3, [r7, #4]
 80267b6:	681b      	ldr	r3, [r3, #0]
 80267b8:	6819      	ldr	r1, [r3, #0]
 80267ba:	687b      	ldr	r3, [r7, #4]
 80267bc:	681b      	ldr	r3, [r3, #0]
 80267be:	683a      	ldr	r2, [r7, #0]
 80267c0:	430a      	orrs	r2, r1
 80267c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80267c4:	687b      	ldr	r3, [r7, #4]
 80267c6:	681b      	ldr	r3, [r3, #0]
 80267c8:	681a      	ldr	r2, [r3, #0]
 80267ca:	687b      	ldr	r3, [r7, #4]
 80267cc:	681b      	ldr	r3, [r3, #0]
 80267ce:	f042 0201 	orr.w	r2, r2, #1
 80267d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80267d4:	687b      	ldr	r3, [r7, #4]
 80267d6:	2220      	movs	r2, #32
 80267d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80267dc:	687b      	ldr	r3, [r7, #4]
 80267de:	2200      	movs	r2, #0
 80267e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80267e4:	2300      	movs	r3, #0
 80267e6:	e000      	b.n	80267ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80267e8:	2302      	movs	r3, #2
  }
}
 80267ea:	4618      	mov	r0, r3
 80267ec:	370c      	adds	r7, #12
 80267ee:	46bd      	mov	sp, r7
 80267f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80267f4:	4770      	bx	lr

080267f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80267f6:	b480      	push	{r7}
 80267f8:	b085      	sub	sp, #20
 80267fa:	af00      	add	r7, sp, #0
 80267fc:	6078      	str	r0, [r7, #4]
 80267fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8026800:	687b      	ldr	r3, [r7, #4]
 8026802:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8026806:	b2db      	uxtb	r3, r3
 8026808:	2b20      	cmp	r3, #32
 802680a:	d139      	bne.n	8026880 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 802680c:	687b      	ldr	r3, [r7, #4]
 802680e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8026812:	2b01      	cmp	r3, #1
 8026814:	d101      	bne.n	802681a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8026816:	2302      	movs	r3, #2
 8026818:	e033      	b.n	8026882 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 802681a:	687b      	ldr	r3, [r7, #4]
 802681c:	2201      	movs	r2, #1
 802681e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8026822:	687b      	ldr	r3, [r7, #4]
 8026824:	2224      	movs	r2, #36	; 0x24
 8026826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 802682a:	687b      	ldr	r3, [r7, #4]
 802682c:	681b      	ldr	r3, [r3, #0]
 802682e:	681a      	ldr	r2, [r3, #0]
 8026830:	687b      	ldr	r3, [r7, #4]
 8026832:	681b      	ldr	r3, [r3, #0]
 8026834:	f022 0201 	bic.w	r2, r2, #1
 8026838:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 802683a:	687b      	ldr	r3, [r7, #4]
 802683c:	681b      	ldr	r3, [r3, #0]
 802683e:	681b      	ldr	r3, [r3, #0]
 8026840:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8026842:	68fb      	ldr	r3, [r7, #12]
 8026844:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8026848:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 802684a:	683b      	ldr	r3, [r7, #0]
 802684c:	021b      	lsls	r3, r3, #8
 802684e:	68fa      	ldr	r2, [r7, #12]
 8026850:	4313      	orrs	r3, r2
 8026852:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8026854:	687b      	ldr	r3, [r7, #4]
 8026856:	681b      	ldr	r3, [r3, #0]
 8026858:	68fa      	ldr	r2, [r7, #12]
 802685a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 802685c:	687b      	ldr	r3, [r7, #4]
 802685e:	681b      	ldr	r3, [r3, #0]
 8026860:	681a      	ldr	r2, [r3, #0]
 8026862:	687b      	ldr	r3, [r7, #4]
 8026864:	681b      	ldr	r3, [r3, #0]
 8026866:	f042 0201 	orr.w	r2, r2, #1
 802686a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 802686c:	687b      	ldr	r3, [r7, #4]
 802686e:	2220      	movs	r2, #32
 8026870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8026874:	687b      	ldr	r3, [r7, #4]
 8026876:	2200      	movs	r2, #0
 8026878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 802687c:	2300      	movs	r3, #0
 802687e:	e000      	b.n	8026882 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8026880:	2302      	movs	r3, #2
  }
}
 8026882:	4618      	mov	r0, r3
 8026884:	3714      	adds	r7, #20
 8026886:	46bd      	mov	sp, r7
 8026888:	f85d 7b04 	ldr.w	r7, [sp], #4
 802688c:	4770      	bx	lr
	...

08026890 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8026890:	b580      	push	{r7, lr}
 8026892:	b084      	sub	sp, #16
 8026894:	af00      	add	r7, sp, #0
 8026896:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8026898:	687b      	ldr	r3, [r7, #4]
 802689a:	2b00      	cmp	r3, #0
 802689c:	d101      	bne.n	80268a2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 802689e:	2301      	movs	r3, #1
 80268a0:	e0bf      	b.n	8026a22 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80268a2:	687b      	ldr	r3, [r7, #4]
 80268a4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80268a8:	b2db      	uxtb	r3, r3
 80268aa:	2b00      	cmp	r3, #0
 80268ac:	d106      	bne.n	80268bc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80268ae:	687b      	ldr	r3, [r7, #4]
 80268b0:	2200      	movs	r2, #0
 80268b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80268b6:	6878      	ldr	r0, [r7, #4]
 80268b8:	f7da fb42 	bl	8000f40 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80268bc:	687b      	ldr	r3, [r7, #4]
 80268be:	2202      	movs	r2, #2
 80268c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80268c4:	687b      	ldr	r3, [r7, #4]
 80268c6:	681b      	ldr	r3, [r3, #0]
 80268c8:	699a      	ldr	r2, [r3, #24]
 80268ca:	687b      	ldr	r3, [r7, #4]
 80268cc:	681b      	ldr	r3, [r3, #0]
 80268ce:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80268d2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80268d4:	687b      	ldr	r3, [r7, #4]
 80268d6:	681b      	ldr	r3, [r3, #0]
 80268d8:	6999      	ldr	r1, [r3, #24]
 80268da:	687b      	ldr	r3, [r7, #4]
 80268dc:	685a      	ldr	r2, [r3, #4]
 80268de:	687b      	ldr	r3, [r7, #4]
 80268e0:	689b      	ldr	r3, [r3, #8]
 80268e2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80268e4:	687b      	ldr	r3, [r7, #4]
 80268e6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80268e8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80268ea:	687b      	ldr	r3, [r7, #4]
 80268ec:	691b      	ldr	r3, [r3, #16]
 80268ee:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80268f0:	687b      	ldr	r3, [r7, #4]
 80268f2:	681b      	ldr	r3, [r3, #0]
 80268f4:	430a      	orrs	r2, r1
 80268f6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80268f8:	687b      	ldr	r3, [r7, #4]
 80268fa:	681b      	ldr	r3, [r3, #0]
 80268fc:	6899      	ldr	r1, [r3, #8]
 80268fe:	687b      	ldr	r3, [r7, #4]
 8026900:	681a      	ldr	r2, [r3, #0]
 8026902:	4b4a      	ldr	r3, [pc, #296]	; (8026a2c <HAL_LTDC_Init+0x19c>)
 8026904:	400b      	ands	r3, r1
 8026906:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8026908:	687b      	ldr	r3, [r7, #4]
 802690a:	695b      	ldr	r3, [r3, #20]
 802690c:	041b      	lsls	r3, r3, #16
 802690e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8026910:	687b      	ldr	r3, [r7, #4]
 8026912:	681b      	ldr	r3, [r3, #0]
 8026914:	6899      	ldr	r1, [r3, #8]
 8026916:	687b      	ldr	r3, [r7, #4]
 8026918:	699a      	ldr	r2, [r3, #24]
 802691a:	68fb      	ldr	r3, [r7, #12]
 802691c:	431a      	orrs	r2, r3
 802691e:	687b      	ldr	r3, [r7, #4]
 8026920:	681b      	ldr	r3, [r3, #0]
 8026922:	430a      	orrs	r2, r1
 8026924:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8026926:	687b      	ldr	r3, [r7, #4]
 8026928:	681b      	ldr	r3, [r3, #0]
 802692a:	68d9      	ldr	r1, [r3, #12]
 802692c:	687b      	ldr	r3, [r7, #4]
 802692e:	681a      	ldr	r2, [r3, #0]
 8026930:	4b3e      	ldr	r3, [pc, #248]	; (8026a2c <HAL_LTDC_Init+0x19c>)
 8026932:	400b      	ands	r3, r1
 8026934:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8026936:	687b      	ldr	r3, [r7, #4]
 8026938:	69db      	ldr	r3, [r3, #28]
 802693a:	041b      	lsls	r3, r3, #16
 802693c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 802693e:	687b      	ldr	r3, [r7, #4]
 8026940:	681b      	ldr	r3, [r3, #0]
 8026942:	68d9      	ldr	r1, [r3, #12]
 8026944:	687b      	ldr	r3, [r7, #4]
 8026946:	6a1a      	ldr	r2, [r3, #32]
 8026948:	68fb      	ldr	r3, [r7, #12]
 802694a:	431a      	orrs	r2, r3
 802694c:	687b      	ldr	r3, [r7, #4]
 802694e:	681b      	ldr	r3, [r3, #0]
 8026950:	430a      	orrs	r2, r1
 8026952:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8026954:	687b      	ldr	r3, [r7, #4]
 8026956:	681b      	ldr	r3, [r3, #0]
 8026958:	6919      	ldr	r1, [r3, #16]
 802695a:	687b      	ldr	r3, [r7, #4]
 802695c:	681a      	ldr	r2, [r3, #0]
 802695e:	4b33      	ldr	r3, [pc, #204]	; (8026a2c <HAL_LTDC_Init+0x19c>)
 8026960:	400b      	ands	r3, r1
 8026962:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8026964:	687b      	ldr	r3, [r7, #4]
 8026966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026968:	041b      	lsls	r3, r3, #16
 802696a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 802696c:	687b      	ldr	r3, [r7, #4]
 802696e:	681b      	ldr	r3, [r3, #0]
 8026970:	6919      	ldr	r1, [r3, #16]
 8026972:	687b      	ldr	r3, [r7, #4]
 8026974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8026976:	68fb      	ldr	r3, [r7, #12]
 8026978:	431a      	orrs	r2, r3
 802697a:	687b      	ldr	r3, [r7, #4]
 802697c:	681b      	ldr	r3, [r3, #0]
 802697e:	430a      	orrs	r2, r1
 8026980:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8026982:	687b      	ldr	r3, [r7, #4]
 8026984:	681b      	ldr	r3, [r3, #0]
 8026986:	6959      	ldr	r1, [r3, #20]
 8026988:	687b      	ldr	r3, [r7, #4]
 802698a:	681a      	ldr	r2, [r3, #0]
 802698c:	4b27      	ldr	r3, [pc, #156]	; (8026a2c <HAL_LTDC_Init+0x19c>)
 802698e:	400b      	ands	r3, r1
 8026990:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8026992:	687b      	ldr	r3, [r7, #4]
 8026994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026996:	041b      	lsls	r3, r3, #16
 8026998:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 802699a:	687b      	ldr	r3, [r7, #4]
 802699c:	681b      	ldr	r3, [r3, #0]
 802699e:	6959      	ldr	r1, [r3, #20]
 80269a0:	687b      	ldr	r3, [r7, #4]
 80269a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80269a4:	68fb      	ldr	r3, [r7, #12]
 80269a6:	431a      	orrs	r2, r3
 80269a8:	687b      	ldr	r3, [r7, #4]
 80269aa:	681b      	ldr	r3, [r3, #0]
 80269ac:	430a      	orrs	r2, r1
 80269ae:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80269b0:	687b      	ldr	r3, [r7, #4]
 80269b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80269b6:	021b      	lsls	r3, r3, #8
 80269b8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80269ba:	687b      	ldr	r3, [r7, #4]
 80269bc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80269c0:	041b      	lsls	r3, r3, #16
 80269c2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80269c4:	687b      	ldr	r3, [r7, #4]
 80269c6:	681b      	ldr	r3, [r3, #0]
 80269c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80269ca:	687b      	ldr	r3, [r7, #4]
 80269cc:	681b      	ldr	r3, [r3, #0]
 80269ce:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80269d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80269d4:	687b      	ldr	r3, [r7, #4]
 80269d6:	681b      	ldr	r3, [r3, #0]
 80269d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80269da:	68ba      	ldr	r2, [r7, #8]
 80269dc:	68fb      	ldr	r3, [r7, #12]
 80269de:	4313      	orrs	r3, r2
 80269e0:	687a      	ldr	r2, [r7, #4]
 80269e2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80269e6:	431a      	orrs	r2, r3
 80269e8:	687b      	ldr	r3, [r7, #4]
 80269ea:	681b      	ldr	r3, [r3, #0]
 80269ec:	430a      	orrs	r2, r1
 80269ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80269f0:	687b      	ldr	r3, [r7, #4]
 80269f2:	681b      	ldr	r3, [r3, #0]
 80269f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80269f6:	687b      	ldr	r3, [r7, #4]
 80269f8:	681b      	ldr	r3, [r3, #0]
 80269fa:	f042 0206 	orr.w	r2, r2, #6
 80269fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8026a00:	687b      	ldr	r3, [r7, #4]
 8026a02:	681b      	ldr	r3, [r3, #0]
 8026a04:	699a      	ldr	r2, [r3, #24]
 8026a06:	687b      	ldr	r3, [r7, #4]
 8026a08:	681b      	ldr	r3, [r3, #0]
 8026a0a:	f042 0201 	orr.w	r2, r2, #1
 8026a0e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8026a10:	687b      	ldr	r3, [r7, #4]
 8026a12:	2200      	movs	r2, #0
 8026a14:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8026a18:	687b      	ldr	r3, [r7, #4]
 8026a1a:	2201      	movs	r2, #1
 8026a1c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8026a20:	2300      	movs	r3, #0
}
 8026a22:	4618      	mov	r0, r3
 8026a24:	3710      	adds	r7, #16
 8026a26:	46bd      	mov	sp, r7
 8026a28:	bd80      	pop	{r7, pc}
 8026a2a:	bf00      	nop
 8026a2c:	f000f800 	.word	0xf000f800

08026a30 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8026a30:	b5b0      	push	{r4, r5, r7, lr}
 8026a32:	b084      	sub	sp, #16
 8026a34:	af00      	add	r7, sp, #0
 8026a36:	60f8      	str	r0, [r7, #12]
 8026a38:	60b9      	str	r1, [r7, #8]
 8026a3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8026a3c:	68fb      	ldr	r3, [r7, #12]
 8026a3e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8026a42:	2b01      	cmp	r3, #1
 8026a44:	d101      	bne.n	8026a4a <HAL_LTDC_ConfigLayer+0x1a>
 8026a46:	2302      	movs	r3, #2
 8026a48:	e02c      	b.n	8026aa4 <HAL_LTDC_ConfigLayer+0x74>
 8026a4a:	68fb      	ldr	r3, [r7, #12]
 8026a4c:	2201      	movs	r2, #1
 8026a4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8026a52:	68fb      	ldr	r3, [r7, #12]
 8026a54:	2202      	movs	r2, #2
 8026a56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8026a5a:	68fa      	ldr	r2, [r7, #12]
 8026a5c:	687b      	ldr	r3, [r7, #4]
 8026a5e:	2134      	movs	r1, #52	; 0x34
 8026a60:	fb01 f303 	mul.w	r3, r1, r3
 8026a64:	4413      	add	r3, r2
 8026a66:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8026a6a:	68bb      	ldr	r3, [r7, #8]
 8026a6c:	4614      	mov	r4, r2
 8026a6e:	461d      	mov	r5, r3
 8026a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026a7c:	682b      	ldr	r3, [r5, #0]
 8026a7e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8026a80:	687a      	ldr	r2, [r7, #4]
 8026a82:	68b9      	ldr	r1, [r7, #8]
 8026a84:	68f8      	ldr	r0, [r7, #12]
 8026a86:	f000 f83b 	bl	8026b00 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8026a8a:	68fb      	ldr	r3, [r7, #12]
 8026a8c:	681b      	ldr	r3, [r3, #0]
 8026a8e:	2201      	movs	r2, #1
 8026a90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8026a92:	68fb      	ldr	r3, [r7, #12]
 8026a94:	2201      	movs	r2, #1
 8026a96:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8026a9a:	68fb      	ldr	r3, [r7, #12]
 8026a9c:	2200      	movs	r2, #0
 8026a9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8026aa2:	2300      	movs	r3, #0
}
 8026aa4:	4618      	mov	r0, r3
 8026aa6:	3710      	adds	r7, #16
 8026aa8:	46bd      	mov	sp, r7
 8026aaa:	bdb0      	pop	{r4, r5, r7, pc}

08026aac <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8026aac:	b480      	push	{r7}
 8026aae:	b083      	sub	sp, #12
 8026ab0:	af00      	add	r7, sp, #0
 8026ab2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8026ab4:	687b      	ldr	r3, [r7, #4]
 8026ab6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8026aba:	2b01      	cmp	r3, #1
 8026abc:	d101      	bne.n	8026ac2 <HAL_LTDC_EnableDither+0x16>
 8026abe:	2302      	movs	r3, #2
 8026ac0:	e016      	b.n	8026af0 <HAL_LTDC_EnableDither+0x44>
 8026ac2:	687b      	ldr	r3, [r7, #4]
 8026ac4:	2201      	movs	r2, #1
 8026ac6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8026aca:	687b      	ldr	r3, [r7, #4]
 8026acc:	2202      	movs	r2, #2
 8026ace:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8026ad2:	4b0a      	ldr	r3, [pc, #40]	; (8026afc <HAL_LTDC_EnableDither+0x50>)
 8026ad4:	699b      	ldr	r3, [r3, #24]
 8026ad6:	4a09      	ldr	r2, [pc, #36]	; (8026afc <HAL_LTDC_EnableDither+0x50>)
 8026ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026adc:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8026ade:	687b      	ldr	r3, [r7, #4]
 8026ae0:	2201      	movs	r2, #1
 8026ae2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8026ae6:	687b      	ldr	r3, [r7, #4]
 8026ae8:	2200      	movs	r2, #0
 8026aea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8026aee:	2300      	movs	r3, #0
}
 8026af0:	4618      	mov	r0, r3
 8026af2:	370c      	adds	r7, #12
 8026af4:	46bd      	mov	sp, r7
 8026af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026afa:	4770      	bx	lr
 8026afc:	40016800 	.word	0x40016800

08026b00 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8026b00:	b480      	push	{r7}
 8026b02:	b089      	sub	sp, #36	; 0x24
 8026b04:	af00      	add	r7, sp, #0
 8026b06:	60f8      	str	r0, [r7, #12]
 8026b08:	60b9      	str	r1, [r7, #8]
 8026b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8026b0c:	68bb      	ldr	r3, [r7, #8]
 8026b0e:	685a      	ldr	r2, [r3, #4]
 8026b10:	68fb      	ldr	r3, [r7, #12]
 8026b12:	681b      	ldr	r3, [r3, #0]
 8026b14:	68db      	ldr	r3, [r3, #12]
 8026b16:	0c1b      	lsrs	r3, r3, #16
 8026b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026b1c:	4413      	add	r3, r2
 8026b1e:	041b      	lsls	r3, r3, #16
 8026b20:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8026b22:	68fb      	ldr	r3, [r7, #12]
 8026b24:	681b      	ldr	r3, [r3, #0]
 8026b26:	461a      	mov	r2, r3
 8026b28:	687b      	ldr	r3, [r7, #4]
 8026b2a:	01db      	lsls	r3, r3, #7
 8026b2c:	4413      	add	r3, r2
 8026b2e:	3384      	adds	r3, #132	; 0x84
 8026b30:	685b      	ldr	r3, [r3, #4]
 8026b32:	68fa      	ldr	r2, [r7, #12]
 8026b34:	6812      	ldr	r2, [r2, #0]
 8026b36:	4611      	mov	r1, r2
 8026b38:	687a      	ldr	r2, [r7, #4]
 8026b3a:	01d2      	lsls	r2, r2, #7
 8026b3c:	440a      	add	r2, r1
 8026b3e:	3284      	adds	r2, #132	; 0x84
 8026b40:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8026b44:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8026b46:	68bb      	ldr	r3, [r7, #8]
 8026b48:	681a      	ldr	r2, [r3, #0]
 8026b4a:	68fb      	ldr	r3, [r7, #12]
 8026b4c:	681b      	ldr	r3, [r3, #0]
 8026b4e:	68db      	ldr	r3, [r3, #12]
 8026b50:	0c1b      	lsrs	r3, r3, #16
 8026b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026b56:	4413      	add	r3, r2
 8026b58:	1c5a      	adds	r2, r3, #1
 8026b5a:	68fb      	ldr	r3, [r7, #12]
 8026b5c:	681b      	ldr	r3, [r3, #0]
 8026b5e:	4619      	mov	r1, r3
 8026b60:	687b      	ldr	r3, [r7, #4]
 8026b62:	01db      	lsls	r3, r3, #7
 8026b64:	440b      	add	r3, r1
 8026b66:	3384      	adds	r3, #132	; 0x84
 8026b68:	4619      	mov	r1, r3
 8026b6a:	69fb      	ldr	r3, [r7, #28]
 8026b6c:	4313      	orrs	r3, r2
 8026b6e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8026b70:	68bb      	ldr	r3, [r7, #8]
 8026b72:	68da      	ldr	r2, [r3, #12]
 8026b74:	68fb      	ldr	r3, [r7, #12]
 8026b76:	681b      	ldr	r3, [r3, #0]
 8026b78:	68db      	ldr	r3, [r3, #12]
 8026b7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8026b7e:	4413      	add	r3, r2
 8026b80:	041b      	lsls	r3, r3, #16
 8026b82:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8026b84:	68fb      	ldr	r3, [r7, #12]
 8026b86:	681b      	ldr	r3, [r3, #0]
 8026b88:	461a      	mov	r2, r3
 8026b8a:	687b      	ldr	r3, [r7, #4]
 8026b8c:	01db      	lsls	r3, r3, #7
 8026b8e:	4413      	add	r3, r2
 8026b90:	3384      	adds	r3, #132	; 0x84
 8026b92:	689b      	ldr	r3, [r3, #8]
 8026b94:	68fa      	ldr	r2, [r7, #12]
 8026b96:	6812      	ldr	r2, [r2, #0]
 8026b98:	4611      	mov	r1, r2
 8026b9a:	687a      	ldr	r2, [r7, #4]
 8026b9c:	01d2      	lsls	r2, r2, #7
 8026b9e:	440a      	add	r2, r1
 8026ba0:	3284      	adds	r2, #132	; 0x84
 8026ba2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8026ba6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8026ba8:	68bb      	ldr	r3, [r7, #8]
 8026baa:	689a      	ldr	r2, [r3, #8]
 8026bac:	68fb      	ldr	r3, [r7, #12]
 8026bae:	681b      	ldr	r3, [r3, #0]
 8026bb0:	68db      	ldr	r3, [r3, #12]
 8026bb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8026bb6:	4413      	add	r3, r2
 8026bb8:	1c5a      	adds	r2, r3, #1
 8026bba:	68fb      	ldr	r3, [r7, #12]
 8026bbc:	681b      	ldr	r3, [r3, #0]
 8026bbe:	4619      	mov	r1, r3
 8026bc0:	687b      	ldr	r3, [r7, #4]
 8026bc2:	01db      	lsls	r3, r3, #7
 8026bc4:	440b      	add	r3, r1
 8026bc6:	3384      	adds	r3, #132	; 0x84
 8026bc8:	4619      	mov	r1, r3
 8026bca:	69fb      	ldr	r3, [r7, #28]
 8026bcc:	4313      	orrs	r3, r2
 8026bce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8026bd0:	68fb      	ldr	r3, [r7, #12]
 8026bd2:	681b      	ldr	r3, [r3, #0]
 8026bd4:	461a      	mov	r2, r3
 8026bd6:	687b      	ldr	r3, [r7, #4]
 8026bd8:	01db      	lsls	r3, r3, #7
 8026bda:	4413      	add	r3, r2
 8026bdc:	3384      	adds	r3, #132	; 0x84
 8026bde:	691b      	ldr	r3, [r3, #16]
 8026be0:	68fa      	ldr	r2, [r7, #12]
 8026be2:	6812      	ldr	r2, [r2, #0]
 8026be4:	4611      	mov	r1, r2
 8026be6:	687a      	ldr	r2, [r7, #4]
 8026be8:	01d2      	lsls	r2, r2, #7
 8026bea:	440a      	add	r2, r1
 8026bec:	3284      	adds	r2, #132	; 0x84
 8026bee:	f023 0307 	bic.w	r3, r3, #7
 8026bf2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8026bf4:	68fb      	ldr	r3, [r7, #12]
 8026bf6:	681b      	ldr	r3, [r3, #0]
 8026bf8:	461a      	mov	r2, r3
 8026bfa:	687b      	ldr	r3, [r7, #4]
 8026bfc:	01db      	lsls	r3, r3, #7
 8026bfe:	4413      	add	r3, r2
 8026c00:	3384      	adds	r3, #132	; 0x84
 8026c02:	461a      	mov	r2, r3
 8026c04:	68bb      	ldr	r3, [r7, #8]
 8026c06:	691b      	ldr	r3, [r3, #16]
 8026c08:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8026c0a:	68bb      	ldr	r3, [r7, #8]
 8026c0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8026c10:	021b      	lsls	r3, r3, #8
 8026c12:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8026c14:	68bb      	ldr	r3, [r7, #8]
 8026c16:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8026c1a:	041b      	lsls	r3, r3, #16
 8026c1c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8026c1e:	68bb      	ldr	r3, [r7, #8]
 8026c20:	699b      	ldr	r3, [r3, #24]
 8026c22:	061b      	lsls	r3, r3, #24
 8026c24:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8026c26:	68fb      	ldr	r3, [r7, #12]
 8026c28:	681b      	ldr	r3, [r3, #0]
 8026c2a:	461a      	mov	r2, r3
 8026c2c:	687b      	ldr	r3, [r7, #4]
 8026c2e:	01db      	lsls	r3, r3, #7
 8026c30:	4413      	add	r3, r2
 8026c32:	3384      	adds	r3, #132	; 0x84
 8026c34:	699b      	ldr	r3, [r3, #24]
 8026c36:	68fb      	ldr	r3, [r7, #12]
 8026c38:	681b      	ldr	r3, [r3, #0]
 8026c3a:	461a      	mov	r2, r3
 8026c3c:	687b      	ldr	r3, [r7, #4]
 8026c3e:	01db      	lsls	r3, r3, #7
 8026c40:	4413      	add	r3, r2
 8026c42:	3384      	adds	r3, #132	; 0x84
 8026c44:	461a      	mov	r2, r3
 8026c46:	2300      	movs	r3, #0
 8026c48:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8026c4a:	68bb      	ldr	r3, [r7, #8]
 8026c4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8026c50:	461a      	mov	r2, r3
 8026c52:	69fb      	ldr	r3, [r7, #28]
 8026c54:	431a      	orrs	r2, r3
 8026c56:	69bb      	ldr	r3, [r7, #24]
 8026c58:	431a      	orrs	r2, r3
 8026c5a:	68fb      	ldr	r3, [r7, #12]
 8026c5c:	681b      	ldr	r3, [r3, #0]
 8026c5e:	4619      	mov	r1, r3
 8026c60:	687b      	ldr	r3, [r7, #4]
 8026c62:	01db      	lsls	r3, r3, #7
 8026c64:	440b      	add	r3, r1
 8026c66:	3384      	adds	r3, #132	; 0x84
 8026c68:	4619      	mov	r1, r3
 8026c6a:	697b      	ldr	r3, [r7, #20]
 8026c6c:	4313      	orrs	r3, r2
 8026c6e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8026c70:	68fb      	ldr	r3, [r7, #12]
 8026c72:	681b      	ldr	r3, [r3, #0]
 8026c74:	461a      	mov	r2, r3
 8026c76:	687b      	ldr	r3, [r7, #4]
 8026c78:	01db      	lsls	r3, r3, #7
 8026c7a:	4413      	add	r3, r2
 8026c7c:	3384      	adds	r3, #132	; 0x84
 8026c7e:	695b      	ldr	r3, [r3, #20]
 8026c80:	68fa      	ldr	r2, [r7, #12]
 8026c82:	6812      	ldr	r2, [r2, #0]
 8026c84:	4611      	mov	r1, r2
 8026c86:	687a      	ldr	r2, [r7, #4]
 8026c88:	01d2      	lsls	r2, r2, #7
 8026c8a:	440a      	add	r2, r1
 8026c8c:	3284      	adds	r2, #132	; 0x84
 8026c8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8026c92:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8026c94:	68fb      	ldr	r3, [r7, #12]
 8026c96:	681b      	ldr	r3, [r3, #0]
 8026c98:	461a      	mov	r2, r3
 8026c9a:	687b      	ldr	r3, [r7, #4]
 8026c9c:	01db      	lsls	r3, r3, #7
 8026c9e:	4413      	add	r3, r2
 8026ca0:	3384      	adds	r3, #132	; 0x84
 8026ca2:	461a      	mov	r2, r3
 8026ca4:	68bb      	ldr	r3, [r7, #8]
 8026ca6:	695b      	ldr	r3, [r3, #20]
 8026ca8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8026caa:	68fb      	ldr	r3, [r7, #12]
 8026cac:	681b      	ldr	r3, [r3, #0]
 8026cae:	461a      	mov	r2, r3
 8026cb0:	687b      	ldr	r3, [r7, #4]
 8026cb2:	01db      	lsls	r3, r3, #7
 8026cb4:	4413      	add	r3, r2
 8026cb6:	3384      	adds	r3, #132	; 0x84
 8026cb8:	69da      	ldr	r2, [r3, #28]
 8026cba:	68fb      	ldr	r3, [r7, #12]
 8026cbc:	681b      	ldr	r3, [r3, #0]
 8026cbe:	4619      	mov	r1, r3
 8026cc0:	687b      	ldr	r3, [r7, #4]
 8026cc2:	01db      	lsls	r3, r3, #7
 8026cc4:	440b      	add	r3, r1
 8026cc6:	3384      	adds	r3, #132	; 0x84
 8026cc8:	4619      	mov	r1, r3
 8026cca:	4b58      	ldr	r3, [pc, #352]	; (8026e2c <LTDC_SetConfig+0x32c>)
 8026ccc:	4013      	ands	r3, r2
 8026cce:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8026cd0:	68bb      	ldr	r3, [r7, #8]
 8026cd2:	69da      	ldr	r2, [r3, #28]
 8026cd4:	68bb      	ldr	r3, [r7, #8]
 8026cd6:	6a1b      	ldr	r3, [r3, #32]
 8026cd8:	68f9      	ldr	r1, [r7, #12]
 8026cda:	6809      	ldr	r1, [r1, #0]
 8026cdc:	4608      	mov	r0, r1
 8026cde:	6879      	ldr	r1, [r7, #4]
 8026ce0:	01c9      	lsls	r1, r1, #7
 8026ce2:	4401      	add	r1, r0
 8026ce4:	3184      	adds	r1, #132	; 0x84
 8026ce6:	4313      	orrs	r3, r2
 8026ce8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8026cea:	68fb      	ldr	r3, [r7, #12]
 8026cec:	681b      	ldr	r3, [r3, #0]
 8026cee:	461a      	mov	r2, r3
 8026cf0:	687b      	ldr	r3, [r7, #4]
 8026cf2:	01db      	lsls	r3, r3, #7
 8026cf4:	4413      	add	r3, r2
 8026cf6:	3384      	adds	r3, #132	; 0x84
 8026cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026cfa:	68fb      	ldr	r3, [r7, #12]
 8026cfc:	681b      	ldr	r3, [r3, #0]
 8026cfe:	461a      	mov	r2, r3
 8026d00:	687b      	ldr	r3, [r7, #4]
 8026d02:	01db      	lsls	r3, r3, #7
 8026d04:	4413      	add	r3, r2
 8026d06:	3384      	adds	r3, #132	; 0x84
 8026d08:	461a      	mov	r2, r3
 8026d0a:	2300      	movs	r3, #0
 8026d0c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8026d0e:	68fb      	ldr	r3, [r7, #12]
 8026d10:	681b      	ldr	r3, [r3, #0]
 8026d12:	461a      	mov	r2, r3
 8026d14:	687b      	ldr	r3, [r7, #4]
 8026d16:	01db      	lsls	r3, r3, #7
 8026d18:	4413      	add	r3, r2
 8026d1a:	3384      	adds	r3, #132	; 0x84
 8026d1c:	461a      	mov	r2, r3
 8026d1e:	68bb      	ldr	r3, [r7, #8]
 8026d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026d22:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8026d24:	68bb      	ldr	r3, [r7, #8]
 8026d26:	691b      	ldr	r3, [r3, #16]
 8026d28:	2b00      	cmp	r3, #0
 8026d2a:	d102      	bne.n	8026d32 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8026d2c:	2304      	movs	r3, #4
 8026d2e:	61fb      	str	r3, [r7, #28]
 8026d30:	e01b      	b.n	8026d6a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8026d32:	68bb      	ldr	r3, [r7, #8]
 8026d34:	691b      	ldr	r3, [r3, #16]
 8026d36:	2b01      	cmp	r3, #1
 8026d38:	d102      	bne.n	8026d40 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8026d3a:	2303      	movs	r3, #3
 8026d3c:	61fb      	str	r3, [r7, #28]
 8026d3e:	e014      	b.n	8026d6a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8026d40:	68bb      	ldr	r3, [r7, #8]
 8026d42:	691b      	ldr	r3, [r3, #16]
 8026d44:	2b04      	cmp	r3, #4
 8026d46:	d00b      	beq.n	8026d60 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8026d48:	68bb      	ldr	r3, [r7, #8]
 8026d4a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8026d4c:	2b02      	cmp	r3, #2
 8026d4e:	d007      	beq.n	8026d60 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8026d50:	68bb      	ldr	r3, [r7, #8]
 8026d52:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8026d54:	2b03      	cmp	r3, #3
 8026d56:	d003      	beq.n	8026d60 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8026d58:	68bb      	ldr	r3, [r7, #8]
 8026d5a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8026d5c:	2b07      	cmp	r3, #7
 8026d5e:	d102      	bne.n	8026d66 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8026d60:	2302      	movs	r3, #2
 8026d62:	61fb      	str	r3, [r7, #28]
 8026d64:	e001      	b.n	8026d6a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8026d66:	2301      	movs	r3, #1
 8026d68:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8026d6a:	68fb      	ldr	r3, [r7, #12]
 8026d6c:	681b      	ldr	r3, [r3, #0]
 8026d6e:	461a      	mov	r2, r3
 8026d70:	687b      	ldr	r3, [r7, #4]
 8026d72:	01db      	lsls	r3, r3, #7
 8026d74:	4413      	add	r3, r2
 8026d76:	3384      	adds	r3, #132	; 0x84
 8026d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026d7a:	68fa      	ldr	r2, [r7, #12]
 8026d7c:	6812      	ldr	r2, [r2, #0]
 8026d7e:	4611      	mov	r1, r2
 8026d80:	687a      	ldr	r2, [r7, #4]
 8026d82:	01d2      	lsls	r2, r2, #7
 8026d84:	440a      	add	r2, r1
 8026d86:	3284      	adds	r2, #132	; 0x84
 8026d88:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8026d8c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8026d8e:	68bb      	ldr	r3, [r7, #8]
 8026d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026d92:	69fa      	ldr	r2, [r7, #28]
 8026d94:	fb02 f303 	mul.w	r3, r2, r3
 8026d98:	041a      	lsls	r2, r3, #16
 8026d9a:	68bb      	ldr	r3, [r7, #8]
 8026d9c:	6859      	ldr	r1, [r3, #4]
 8026d9e:	68bb      	ldr	r3, [r7, #8]
 8026da0:	681b      	ldr	r3, [r3, #0]
 8026da2:	1acb      	subs	r3, r1, r3
 8026da4:	69f9      	ldr	r1, [r7, #28]
 8026da6:	fb01 f303 	mul.w	r3, r1, r3
 8026daa:	3303      	adds	r3, #3
 8026dac:	68f9      	ldr	r1, [r7, #12]
 8026dae:	6809      	ldr	r1, [r1, #0]
 8026db0:	4608      	mov	r0, r1
 8026db2:	6879      	ldr	r1, [r7, #4]
 8026db4:	01c9      	lsls	r1, r1, #7
 8026db6:	4401      	add	r1, r0
 8026db8:	3184      	adds	r1, #132	; 0x84
 8026dba:	4313      	orrs	r3, r2
 8026dbc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8026dbe:	68fb      	ldr	r3, [r7, #12]
 8026dc0:	681b      	ldr	r3, [r3, #0]
 8026dc2:	461a      	mov	r2, r3
 8026dc4:	687b      	ldr	r3, [r7, #4]
 8026dc6:	01db      	lsls	r3, r3, #7
 8026dc8:	4413      	add	r3, r2
 8026dca:	3384      	adds	r3, #132	; 0x84
 8026dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8026dce:	68fb      	ldr	r3, [r7, #12]
 8026dd0:	681b      	ldr	r3, [r3, #0]
 8026dd2:	4619      	mov	r1, r3
 8026dd4:	687b      	ldr	r3, [r7, #4]
 8026dd6:	01db      	lsls	r3, r3, #7
 8026dd8:	440b      	add	r3, r1
 8026dda:	3384      	adds	r3, #132	; 0x84
 8026ddc:	4619      	mov	r1, r3
 8026dde:	4b14      	ldr	r3, [pc, #80]	; (8026e30 <LTDC_SetConfig+0x330>)
 8026de0:	4013      	ands	r3, r2
 8026de2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8026de4:	68fb      	ldr	r3, [r7, #12]
 8026de6:	681b      	ldr	r3, [r3, #0]
 8026de8:	461a      	mov	r2, r3
 8026dea:	687b      	ldr	r3, [r7, #4]
 8026dec:	01db      	lsls	r3, r3, #7
 8026dee:	4413      	add	r3, r2
 8026df0:	3384      	adds	r3, #132	; 0x84
 8026df2:	461a      	mov	r2, r3
 8026df4:	68bb      	ldr	r3, [r7, #8]
 8026df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026df8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8026dfa:	68fb      	ldr	r3, [r7, #12]
 8026dfc:	681b      	ldr	r3, [r3, #0]
 8026dfe:	461a      	mov	r2, r3
 8026e00:	687b      	ldr	r3, [r7, #4]
 8026e02:	01db      	lsls	r3, r3, #7
 8026e04:	4413      	add	r3, r2
 8026e06:	3384      	adds	r3, #132	; 0x84
 8026e08:	681b      	ldr	r3, [r3, #0]
 8026e0a:	68fa      	ldr	r2, [r7, #12]
 8026e0c:	6812      	ldr	r2, [r2, #0]
 8026e0e:	4611      	mov	r1, r2
 8026e10:	687a      	ldr	r2, [r7, #4]
 8026e12:	01d2      	lsls	r2, r2, #7
 8026e14:	440a      	add	r2, r1
 8026e16:	3284      	adds	r2, #132	; 0x84
 8026e18:	f043 0301 	orr.w	r3, r3, #1
 8026e1c:	6013      	str	r3, [r2, #0]
}
 8026e1e:	bf00      	nop
 8026e20:	3724      	adds	r7, #36	; 0x24
 8026e22:	46bd      	mov	sp, r7
 8026e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e28:	4770      	bx	lr
 8026e2a:	bf00      	nop
 8026e2c:	fffff8f8 	.word	0xfffff8f8
 8026e30:	fffff800 	.word	0xfffff800

08026e34 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8026e34:	b580      	push	{r7, lr}
 8026e36:	b082      	sub	sp, #8
 8026e38:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8026e3a:	2300      	movs	r3, #0
 8026e3c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8026e3e:	4b23      	ldr	r3, [pc, #140]	; (8026ecc <HAL_PWREx_EnableOverDrive+0x98>)
 8026e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026e42:	4a22      	ldr	r2, [pc, #136]	; (8026ecc <HAL_PWREx_EnableOverDrive+0x98>)
 8026e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8026e48:	6413      	str	r3, [r2, #64]	; 0x40
 8026e4a:	4b20      	ldr	r3, [pc, #128]	; (8026ecc <HAL_PWREx_EnableOverDrive+0x98>)
 8026e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8026e52:	603b      	str	r3, [r7, #0]
 8026e54:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8026e56:	4b1e      	ldr	r3, [pc, #120]	; (8026ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8026e58:	681b      	ldr	r3, [r3, #0]
 8026e5a:	4a1d      	ldr	r2, [pc, #116]	; (8026ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8026e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026e60:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8026e62:	f7fe fb1d 	bl	80254a0 <HAL_GetTick>
 8026e66:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8026e68:	e009      	b.n	8026e7e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8026e6a:	f7fe fb19 	bl	80254a0 <HAL_GetTick>
 8026e6e:	4602      	mov	r2, r0
 8026e70:	687b      	ldr	r3, [r7, #4]
 8026e72:	1ad3      	subs	r3, r2, r3
 8026e74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8026e78:	d901      	bls.n	8026e7e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8026e7a:	2303      	movs	r3, #3
 8026e7c:	e022      	b.n	8026ec4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8026e7e:	4b14      	ldr	r3, [pc, #80]	; (8026ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8026e80:	685b      	ldr	r3, [r3, #4]
 8026e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8026e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8026e8a:	d1ee      	bne.n	8026e6a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8026e8c:	4b10      	ldr	r3, [pc, #64]	; (8026ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8026e8e:	681b      	ldr	r3, [r3, #0]
 8026e90:	4a0f      	ldr	r2, [pc, #60]	; (8026ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8026e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8026e96:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8026e98:	f7fe fb02 	bl	80254a0 <HAL_GetTick>
 8026e9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8026e9e:	e009      	b.n	8026eb4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8026ea0:	f7fe fafe 	bl	80254a0 <HAL_GetTick>
 8026ea4:	4602      	mov	r2, r0
 8026ea6:	687b      	ldr	r3, [r7, #4]
 8026ea8:	1ad3      	subs	r3, r2, r3
 8026eaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8026eae:	d901      	bls.n	8026eb4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8026eb0:	2303      	movs	r3, #3
 8026eb2:	e007      	b.n	8026ec4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8026eb4:	4b06      	ldr	r3, [pc, #24]	; (8026ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8026eb6:	685b      	ldr	r3, [r3, #4]
 8026eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026ebc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8026ec0:	d1ee      	bne.n	8026ea0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8026ec2:	2300      	movs	r3, #0
}
 8026ec4:	4618      	mov	r0, r3
 8026ec6:	3708      	adds	r7, #8
 8026ec8:	46bd      	mov	sp, r7
 8026eca:	bd80      	pop	{r7, pc}
 8026ecc:	40023800 	.word	0x40023800
 8026ed0:	40007000 	.word	0x40007000

08026ed4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8026ed4:	b580      	push	{r7, lr}
 8026ed6:	b086      	sub	sp, #24
 8026ed8:	af00      	add	r7, sp, #0
 8026eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8026edc:	2300      	movs	r3, #0
 8026ede:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8026ee0:	687b      	ldr	r3, [r7, #4]
 8026ee2:	2b00      	cmp	r3, #0
 8026ee4:	d101      	bne.n	8026eea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8026ee6:	2301      	movs	r3, #1
 8026ee8:	e291      	b.n	802740e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8026eea:	687b      	ldr	r3, [r7, #4]
 8026eec:	681b      	ldr	r3, [r3, #0]
 8026eee:	f003 0301 	and.w	r3, r3, #1
 8026ef2:	2b00      	cmp	r3, #0
 8026ef4:	f000 8087 	beq.w	8027006 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8026ef8:	4b96      	ldr	r3, [pc, #600]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8026efa:	689b      	ldr	r3, [r3, #8]
 8026efc:	f003 030c 	and.w	r3, r3, #12
 8026f00:	2b04      	cmp	r3, #4
 8026f02:	d00c      	beq.n	8026f1e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8026f04:	4b93      	ldr	r3, [pc, #588]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8026f06:	689b      	ldr	r3, [r3, #8]
 8026f08:	f003 030c 	and.w	r3, r3, #12
 8026f0c:	2b08      	cmp	r3, #8
 8026f0e:	d112      	bne.n	8026f36 <HAL_RCC_OscConfig+0x62>
 8026f10:	4b90      	ldr	r3, [pc, #576]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8026f12:	685b      	ldr	r3, [r3, #4]
 8026f14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8026f18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8026f1c:	d10b      	bne.n	8026f36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8026f1e:	4b8d      	ldr	r3, [pc, #564]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8026f20:	681b      	ldr	r3, [r3, #0]
 8026f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026f26:	2b00      	cmp	r3, #0
 8026f28:	d06c      	beq.n	8027004 <HAL_RCC_OscConfig+0x130>
 8026f2a:	687b      	ldr	r3, [r7, #4]
 8026f2c:	685b      	ldr	r3, [r3, #4]
 8026f2e:	2b00      	cmp	r3, #0
 8026f30:	d168      	bne.n	8027004 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8026f32:	2301      	movs	r3, #1
 8026f34:	e26b      	b.n	802740e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8026f36:	687b      	ldr	r3, [r7, #4]
 8026f38:	685b      	ldr	r3, [r3, #4]
 8026f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8026f3e:	d106      	bne.n	8026f4e <HAL_RCC_OscConfig+0x7a>
 8026f40:	4b84      	ldr	r3, [pc, #528]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8026f42:	681b      	ldr	r3, [r3, #0]
 8026f44:	4a83      	ldr	r2, [pc, #524]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8026f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026f4a:	6013      	str	r3, [r2, #0]
 8026f4c:	e02e      	b.n	8026fac <HAL_RCC_OscConfig+0xd8>
 8026f4e:	687b      	ldr	r3, [r7, #4]
 8026f50:	685b      	ldr	r3, [r3, #4]
 8026f52:	2b00      	cmp	r3, #0
 8026f54:	d10c      	bne.n	8026f70 <HAL_RCC_OscConfig+0x9c>
 8026f56:	4b7f      	ldr	r3, [pc, #508]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8026f58:	681b      	ldr	r3, [r3, #0]
 8026f5a:	4a7e      	ldr	r2, [pc, #504]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8026f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8026f60:	6013      	str	r3, [r2, #0]
 8026f62:	4b7c      	ldr	r3, [pc, #496]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8026f64:	681b      	ldr	r3, [r3, #0]
 8026f66:	4a7b      	ldr	r2, [pc, #492]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8026f68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8026f6c:	6013      	str	r3, [r2, #0]
 8026f6e:	e01d      	b.n	8026fac <HAL_RCC_OscConfig+0xd8>
 8026f70:	687b      	ldr	r3, [r7, #4]
 8026f72:	685b      	ldr	r3, [r3, #4]
 8026f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8026f78:	d10c      	bne.n	8026f94 <HAL_RCC_OscConfig+0xc0>
 8026f7a:	4b76      	ldr	r3, [pc, #472]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8026f7c:	681b      	ldr	r3, [r3, #0]
 8026f7e:	4a75      	ldr	r2, [pc, #468]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8026f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8026f84:	6013      	str	r3, [r2, #0]
 8026f86:	4b73      	ldr	r3, [pc, #460]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8026f88:	681b      	ldr	r3, [r3, #0]
 8026f8a:	4a72      	ldr	r2, [pc, #456]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8026f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026f90:	6013      	str	r3, [r2, #0]
 8026f92:	e00b      	b.n	8026fac <HAL_RCC_OscConfig+0xd8>
 8026f94:	4b6f      	ldr	r3, [pc, #444]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8026f96:	681b      	ldr	r3, [r3, #0]
 8026f98:	4a6e      	ldr	r2, [pc, #440]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8026f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8026f9e:	6013      	str	r3, [r2, #0]
 8026fa0:	4b6c      	ldr	r3, [pc, #432]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8026fa2:	681b      	ldr	r3, [r3, #0]
 8026fa4:	4a6b      	ldr	r2, [pc, #428]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8026fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8026faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8026fac:	687b      	ldr	r3, [r7, #4]
 8026fae:	685b      	ldr	r3, [r3, #4]
 8026fb0:	2b00      	cmp	r3, #0
 8026fb2:	d013      	beq.n	8026fdc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026fb4:	f7fe fa74 	bl	80254a0 <HAL_GetTick>
 8026fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026fba:	e008      	b.n	8026fce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8026fbc:	f7fe fa70 	bl	80254a0 <HAL_GetTick>
 8026fc0:	4602      	mov	r2, r0
 8026fc2:	693b      	ldr	r3, [r7, #16]
 8026fc4:	1ad3      	subs	r3, r2, r3
 8026fc6:	2b64      	cmp	r3, #100	; 0x64
 8026fc8:	d901      	bls.n	8026fce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8026fca:	2303      	movs	r3, #3
 8026fcc:	e21f      	b.n	802740e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026fce:	4b61      	ldr	r3, [pc, #388]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8026fd0:	681b      	ldr	r3, [r3, #0]
 8026fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026fd6:	2b00      	cmp	r3, #0
 8026fd8:	d0f0      	beq.n	8026fbc <HAL_RCC_OscConfig+0xe8>
 8026fda:	e014      	b.n	8027006 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026fdc:	f7fe fa60 	bl	80254a0 <HAL_GetTick>
 8026fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8026fe2:	e008      	b.n	8026ff6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8026fe4:	f7fe fa5c 	bl	80254a0 <HAL_GetTick>
 8026fe8:	4602      	mov	r2, r0
 8026fea:	693b      	ldr	r3, [r7, #16]
 8026fec:	1ad3      	subs	r3, r2, r3
 8026fee:	2b64      	cmp	r3, #100	; 0x64
 8026ff0:	d901      	bls.n	8026ff6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8026ff2:	2303      	movs	r3, #3
 8026ff4:	e20b      	b.n	802740e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8026ff6:	4b57      	ldr	r3, [pc, #348]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8026ff8:	681b      	ldr	r3, [r3, #0]
 8026ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026ffe:	2b00      	cmp	r3, #0
 8027000:	d1f0      	bne.n	8026fe4 <HAL_RCC_OscConfig+0x110>
 8027002:	e000      	b.n	8027006 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8027004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8027006:	687b      	ldr	r3, [r7, #4]
 8027008:	681b      	ldr	r3, [r3, #0]
 802700a:	f003 0302 	and.w	r3, r3, #2
 802700e:	2b00      	cmp	r3, #0
 8027010:	d069      	beq.n	80270e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8027012:	4b50      	ldr	r3, [pc, #320]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8027014:	689b      	ldr	r3, [r3, #8]
 8027016:	f003 030c 	and.w	r3, r3, #12
 802701a:	2b00      	cmp	r3, #0
 802701c:	d00b      	beq.n	8027036 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802701e:	4b4d      	ldr	r3, [pc, #308]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8027020:	689b      	ldr	r3, [r3, #8]
 8027022:	f003 030c 	and.w	r3, r3, #12
 8027026:	2b08      	cmp	r3, #8
 8027028:	d11c      	bne.n	8027064 <HAL_RCC_OscConfig+0x190>
 802702a:	4b4a      	ldr	r3, [pc, #296]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 802702c:	685b      	ldr	r3, [r3, #4]
 802702e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8027032:	2b00      	cmp	r3, #0
 8027034:	d116      	bne.n	8027064 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8027036:	4b47      	ldr	r3, [pc, #284]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8027038:	681b      	ldr	r3, [r3, #0]
 802703a:	f003 0302 	and.w	r3, r3, #2
 802703e:	2b00      	cmp	r3, #0
 8027040:	d005      	beq.n	802704e <HAL_RCC_OscConfig+0x17a>
 8027042:	687b      	ldr	r3, [r7, #4]
 8027044:	68db      	ldr	r3, [r3, #12]
 8027046:	2b01      	cmp	r3, #1
 8027048:	d001      	beq.n	802704e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 802704a:	2301      	movs	r3, #1
 802704c:	e1df      	b.n	802740e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802704e:	4b41      	ldr	r3, [pc, #260]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8027050:	681b      	ldr	r3, [r3, #0]
 8027052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8027056:	687b      	ldr	r3, [r7, #4]
 8027058:	691b      	ldr	r3, [r3, #16]
 802705a:	00db      	lsls	r3, r3, #3
 802705c:	493d      	ldr	r1, [pc, #244]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 802705e:	4313      	orrs	r3, r2
 8027060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8027062:	e040      	b.n	80270e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8027064:	687b      	ldr	r3, [r7, #4]
 8027066:	68db      	ldr	r3, [r3, #12]
 8027068:	2b00      	cmp	r3, #0
 802706a:	d023      	beq.n	80270b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 802706c:	4b39      	ldr	r3, [pc, #228]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 802706e:	681b      	ldr	r3, [r3, #0]
 8027070:	4a38      	ldr	r2, [pc, #224]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8027072:	f043 0301 	orr.w	r3, r3, #1
 8027076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8027078:	f7fe fa12 	bl	80254a0 <HAL_GetTick>
 802707c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802707e:	e008      	b.n	8027092 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8027080:	f7fe fa0e 	bl	80254a0 <HAL_GetTick>
 8027084:	4602      	mov	r2, r0
 8027086:	693b      	ldr	r3, [r7, #16]
 8027088:	1ad3      	subs	r3, r2, r3
 802708a:	2b02      	cmp	r3, #2
 802708c:	d901      	bls.n	8027092 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 802708e:	2303      	movs	r3, #3
 8027090:	e1bd      	b.n	802740e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8027092:	4b30      	ldr	r3, [pc, #192]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8027094:	681b      	ldr	r3, [r3, #0]
 8027096:	f003 0302 	and.w	r3, r3, #2
 802709a:	2b00      	cmp	r3, #0
 802709c:	d0f0      	beq.n	8027080 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802709e:	4b2d      	ldr	r3, [pc, #180]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 80270a0:	681b      	ldr	r3, [r3, #0]
 80270a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80270a6:	687b      	ldr	r3, [r7, #4]
 80270a8:	691b      	ldr	r3, [r3, #16]
 80270aa:	00db      	lsls	r3, r3, #3
 80270ac:	4929      	ldr	r1, [pc, #164]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 80270ae:	4313      	orrs	r3, r2
 80270b0:	600b      	str	r3, [r1, #0]
 80270b2:	e018      	b.n	80270e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80270b4:	4b27      	ldr	r3, [pc, #156]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 80270b6:	681b      	ldr	r3, [r3, #0]
 80270b8:	4a26      	ldr	r2, [pc, #152]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 80270ba:	f023 0301 	bic.w	r3, r3, #1
 80270be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80270c0:	f7fe f9ee 	bl	80254a0 <HAL_GetTick>
 80270c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80270c6:	e008      	b.n	80270da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80270c8:	f7fe f9ea 	bl	80254a0 <HAL_GetTick>
 80270cc:	4602      	mov	r2, r0
 80270ce:	693b      	ldr	r3, [r7, #16]
 80270d0:	1ad3      	subs	r3, r2, r3
 80270d2:	2b02      	cmp	r3, #2
 80270d4:	d901      	bls.n	80270da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80270d6:	2303      	movs	r3, #3
 80270d8:	e199      	b.n	802740e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80270da:	4b1e      	ldr	r3, [pc, #120]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 80270dc:	681b      	ldr	r3, [r3, #0]
 80270de:	f003 0302 	and.w	r3, r3, #2
 80270e2:	2b00      	cmp	r3, #0
 80270e4:	d1f0      	bne.n	80270c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80270e6:	687b      	ldr	r3, [r7, #4]
 80270e8:	681b      	ldr	r3, [r3, #0]
 80270ea:	f003 0308 	and.w	r3, r3, #8
 80270ee:	2b00      	cmp	r3, #0
 80270f0:	d038      	beq.n	8027164 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80270f2:	687b      	ldr	r3, [r7, #4]
 80270f4:	695b      	ldr	r3, [r3, #20]
 80270f6:	2b00      	cmp	r3, #0
 80270f8:	d019      	beq.n	802712e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80270fa:	4b16      	ldr	r3, [pc, #88]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 80270fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80270fe:	4a15      	ldr	r2, [pc, #84]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8027100:	f043 0301 	orr.w	r3, r3, #1
 8027104:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8027106:	f7fe f9cb 	bl	80254a0 <HAL_GetTick>
 802710a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802710c:	e008      	b.n	8027120 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802710e:	f7fe f9c7 	bl	80254a0 <HAL_GetTick>
 8027112:	4602      	mov	r2, r0
 8027114:	693b      	ldr	r3, [r7, #16]
 8027116:	1ad3      	subs	r3, r2, r3
 8027118:	2b02      	cmp	r3, #2
 802711a:	d901      	bls.n	8027120 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 802711c:	2303      	movs	r3, #3
 802711e:	e176      	b.n	802740e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8027120:	4b0c      	ldr	r3, [pc, #48]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8027122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8027124:	f003 0302 	and.w	r3, r3, #2
 8027128:	2b00      	cmp	r3, #0
 802712a:	d0f0      	beq.n	802710e <HAL_RCC_OscConfig+0x23a>
 802712c:	e01a      	b.n	8027164 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802712e:	4b09      	ldr	r3, [pc, #36]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8027130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8027132:	4a08      	ldr	r2, [pc, #32]	; (8027154 <HAL_RCC_OscConfig+0x280>)
 8027134:	f023 0301 	bic.w	r3, r3, #1
 8027138:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802713a:	f7fe f9b1 	bl	80254a0 <HAL_GetTick>
 802713e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8027140:	e00a      	b.n	8027158 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8027142:	f7fe f9ad 	bl	80254a0 <HAL_GetTick>
 8027146:	4602      	mov	r2, r0
 8027148:	693b      	ldr	r3, [r7, #16]
 802714a:	1ad3      	subs	r3, r2, r3
 802714c:	2b02      	cmp	r3, #2
 802714e:	d903      	bls.n	8027158 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8027150:	2303      	movs	r3, #3
 8027152:	e15c      	b.n	802740e <HAL_RCC_OscConfig+0x53a>
 8027154:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8027158:	4b91      	ldr	r3, [pc, #580]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 802715a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802715c:	f003 0302 	and.w	r3, r3, #2
 8027160:	2b00      	cmp	r3, #0
 8027162:	d1ee      	bne.n	8027142 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8027164:	687b      	ldr	r3, [r7, #4]
 8027166:	681b      	ldr	r3, [r3, #0]
 8027168:	f003 0304 	and.w	r3, r3, #4
 802716c:	2b00      	cmp	r3, #0
 802716e:	f000 80a4 	beq.w	80272ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8027172:	4b8b      	ldr	r3, [pc, #556]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 8027174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802717a:	2b00      	cmp	r3, #0
 802717c:	d10d      	bne.n	802719a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 802717e:	4b88      	ldr	r3, [pc, #544]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 8027180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027182:	4a87      	ldr	r2, [pc, #540]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 8027184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8027188:	6413      	str	r3, [r2, #64]	; 0x40
 802718a:	4b85      	ldr	r3, [pc, #532]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 802718c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802718e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027192:	60bb      	str	r3, [r7, #8]
 8027194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8027196:	2301      	movs	r3, #1
 8027198:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 802719a:	4b82      	ldr	r3, [pc, #520]	; (80273a4 <HAL_RCC_OscConfig+0x4d0>)
 802719c:	681b      	ldr	r3, [r3, #0]
 802719e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80271a2:	2b00      	cmp	r3, #0
 80271a4:	d118      	bne.n	80271d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80271a6:	4b7f      	ldr	r3, [pc, #508]	; (80273a4 <HAL_RCC_OscConfig+0x4d0>)
 80271a8:	681b      	ldr	r3, [r3, #0]
 80271aa:	4a7e      	ldr	r2, [pc, #504]	; (80273a4 <HAL_RCC_OscConfig+0x4d0>)
 80271ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80271b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80271b2:	f7fe f975 	bl	80254a0 <HAL_GetTick>
 80271b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80271b8:	e008      	b.n	80271cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80271ba:	f7fe f971 	bl	80254a0 <HAL_GetTick>
 80271be:	4602      	mov	r2, r0
 80271c0:	693b      	ldr	r3, [r7, #16]
 80271c2:	1ad3      	subs	r3, r2, r3
 80271c4:	2b64      	cmp	r3, #100	; 0x64
 80271c6:	d901      	bls.n	80271cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80271c8:	2303      	movs	r3, #3
 80271ca:	e120      	b.n	802740e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80271cc:	4b75      	ldr	r3, [pc, #468]	; (80273a4 <HAL_RCC_OscConfig+0x4d0>)
 80271ce:	681b      	ldr	r3, [r3, #0]
 80271d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80271d4:	2b00      	cmp	r3, #0
 80271d6:	d0f0      	beq.n	80271ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80271d8:	687b      	ldr	r3, [r7, #4]
 80271da:	689b      	ldr	r3, [r3, #8]
 80271dc:	2b01      	cmp	r3, #1
 80271de:	d106      	bne.n	80271ee <HAL_RCC_OscConfig+0x31a>
 80271e0:	4b6f      	ldr	r3, [pc, #444]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 80271e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80271e4:	4a6e      	ldr	r2, [pc, #440]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 80271e6:	f043 0301 	orr.w	r3, r3, #1
 80271ea:	6713      	str	r3, [r2, #112]	; 0x70
 80271ec:	e02d      	b.n	802724a <HAL_RCC_OscConfig+0x376>
 80271ee:	687b      	ldr	r3, [r7, #4]
 80271f0:	689b      	ldr	r3, [r3, #8]
 80271f2:	2b00      	cmp	r3, #0
 80271f4:	d10c      	bne.n	8027210 <HAL_RCC_OscConfig+0x33c>
 80271f6:	4b6a      	ldr	r3, [pc, #424]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 80271f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80271fa:	4a69      	ldr	r2, [pc, #420]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 80271fc:	f023 0301 	bic.w	r3, r3, #1
 8027200:	6713      	str	r3, [r2, #112]	; 0x70
 8027202:	4b67      	ldr	r3, [pc, #412]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 8027204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027206:	4a66      	ldr	r2, [pc, #408]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 8027208:	f023 0304 	bic.w	r3, r3, #4
 802720c:	6713      	str	r3, [r2, #112]	; 0x70
 802720e:	e01c      	b.n	802724a <HAL_RCC_OscConfig+0x376>
 8027210:	687b      	ldr	r3, [r7, #4]
 8027212:	689b      	ldr	r3, [r3, #8]
 8027214:	2b05      	cmp	r3, #5
 8027216:	d10c      	bne.n	8027232 <HAL_RCC_OscConfig+0x35e>
 8027218:	4b61      	ldr	r3, [pc, #388]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 802721a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802721c:	4a60      	ldr	r2, [pc, #384]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 802721e:	f043 0304 	orr.w	r3, r3, #4
 8027222:	6713      	str	r3, [r2, #112]	; 0x70
 8027224:	4b5e      	ldr	r3, [pc, #376]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 8027226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027228:	4a5d      	ldr	r2, [pc, #372]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 802722a:	f043 0301 	orr.w	r3, r3, #1
 802722e:	6713      	str	r3, [r2, #112]	; 0x70
 8027230:	e00b      	b.n	802724a <HAL_RCC_OscConfig+0x376>
 8027232:	4b5b      	ldr	r3, [pc, #364]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 8027234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027236:	4a5a      	ldr	r2, [pc, #360]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 8027238:	f023 0301 	bic.w	r3, r3, #1
 802723c:	6713      	str	r3, [r2, #112]	; 0x70
 802723e:	4b58      	ldr	r3, [pc, #352]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 8027240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027242:	4a57      	ldr	r2, [pc, #348]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 8027244:	f023 0304 	bic.w	r3, r3, #4
 8027248:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 802724a:	687b      	ldr	r3, [r7, #4]
 802724c:	689b      	ldr	r3, [r3, #8]
 802724e:	2b00      	cmp	r3, #0
 8027250:	d015      	beq.n	802727e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8027252:	f7fe f925 	bl	80254a0 <HAL_GetTick>
 8027256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8027258:	e00a      	b.n	8027270 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802725a:	f7fe f921 	bl	80254a0 <HAL_GetTick>
 802725e:	4602      	mov	r2, r0
 8027260:	693b      	ldr	r3, [r7, #16]
 8027262:	1ad3      	subs	r3, r2, r3
 8027264:	f241 3288 	movw	r2, #5000	; 0x1388
 8027268:	4293      	cmp	r3, r2
 802726a:	d901      	bls.n	8027270 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 802726c:	2303      	movs	r3, #3
 802726e:	e0ce      	b.n	802740e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8027270:	4b4b      	ldr	r3, [pc, #300]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 8027272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027274:	f003 0302 	and.w	r3, r3, #2
 8027278:	2b00      	cmp	r3, #0
 802727a:	d0ee      	beq.n	802725a <HAL_RCC_OscConfig+0x386>
 802727c:	e014      	b.n	80272a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802727e:	f7fe f90f 	bl	80254a0 <HAL_GetTick>
 8027282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8027284:	e00a      	b.n	802729c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8027286:	f7fe f90b 	bl	80254a0 <HAL_GetTick>
 802728a:	4602      	mov	r2, r0
 802728c:	693b      	ldr	r3, [r7, #16]
 802728e:	1ad3      	subs	r3, r2, r3
 8027290:	f241 3288 	movw	r2, #5000	; 0x1388
 8027294:	4293      	cmp	r3, r2
 8027296:	d901      	bls.n	802729c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8027298:	2303      	movs	r3, #3
 802729a:	e0b8      	b.n	802740e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802729c:	4b40      	ldr	r3, [pc, #256]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 802729e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80272a0:	f003 0302 	and.w	r3, r3, #2
 80272a4:	2b00      	cmp	r3, #0
 80272a6:	d1ee      	bne.n	8027286 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80272a8:	7dfb      	ldrb	r3, [r7, #23]
 80272aa:	2b01      	cmp	r3, #1
 80272ac:	d105      	bne.n	80272ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80272ae:	4b3c      	ldr	r3, [pc, #240]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 80272b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80272b2:	4a3b      	ldr	r2, [pc, #236]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 80272b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80272b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80272ba:	687b      	ldr	r3, [r7, #4]
 80272bc:	699b      	ldr	r3, [r3, #24]
 80272be:	2b00      	cmp	r3, #0
 80272c0:	f000 80a4 	beq.w	802740c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80272c4:	4b36      	ldr	r3, [pc, #216]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 80272c6:	689b      	ldr	r3, [r3, #8]
 80272c8:	f003 030c 	and.w	r3, r3, #12
 80272cc:	2b08      	cmp	r3, #8
 80272ce:	d06b      	beq.n	80273a8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80272d0:	687b      	ldr	r3, [r7, #4]
 80272d2:	699b      	ldr	r3, [r3, #24]
 80272d4:	2b02      	cmp	r3, #2
 80272d6:	d149      	bne.n	802736c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80272d8:	4b31      	ldr	r3, [pc, #196]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 80272da:	681b      	ldr	r3, [r3, #0]
 80272dc:	4a30      	ldr	r2, [pc, #192]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 80272de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80272e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80272e4:	f7fe f8dc 	bl	80254a0 <HAL_GetTick>
 80272e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80272ea:	e008      	b.n	80272fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80272ec:	f7fe f8d8 	bl	80254a0 <HAL_GetTick>
 80272f0:	4602      	mov	r2, r0
 80272f2:	693b      	ldr	r3, [r7, #16]
 80272f4:	1ad3      	subs	r3, r2, r3
 80272f6:	2b02      	cmp	r3, #2
 80272f8:	d901      	bls.n	80272fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80272fa:	2303      	movs	r3, #3
 80272fc:	e087      	b.n	802740e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80272fe:	4b28      	ldr	r3, [pc, #160]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 8027300:	681b      	ldr	r3, [r3, #0]
 8027302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027306:	2b00      	cmp	r3, #0
 8027308:	d1f0      	bne.n	80272ec <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 802730a:	687b      	ldr	r3, [r7, #4]
 802730c:	69da      	ldr	r2, [r3, #28]
 802730e:	687b      	ldr	r3, [r7, #4]
 8027310:	6a1b      	ldr	r3, [r3, #32]
 8027312:	431a      	orrs	r2, r3
 8027314:	687b      	ldr	r3, [r7, #4]
 8027316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027318:	019b      	lsls	r3, r3, #6
 802731a:	431a      	orrs	r2, r3
 802731c:	687b      	ldr	r3, [r7, #4]
 802731e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027320:	085b      	lsrs	r3, r3, #1
 8027322:	3b01      	subs	r3, #1
 8027324:	041b      	lsls	r3, r3, #16
 8027326:	431a      	orrs	r2, r3
 8027328:	687b      	ldr	r3, [r7, #4]
 802732a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802732c:	061b      	lsls	r3, r3, #24
 802732e:	4313      	orrs	r3, r2
 8027330:	4a1b      	ldr	r2, [pc, #108]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 8027332:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027336:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8027338:	4b19      	ldr	r3, [pc, #100]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 802733a:	681b      	ldr	r3, [r3, #0]
 802733c:	4a18      	ldr	r2, [pc, #96]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 802733e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8027342:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8027344:	f7fe f8ac 	bl	80254a0 <HAL_GetTick>
 8027348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802734a:	e008      	b.n	802735e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802734c:	f7fe f8a8 	bl	80254a0 <HAL_GetTick>
 8027350:	4602      	mov	r2, r0
 8027352:	693b      	ldr	r3, [r7, #16]
 8027354:	1ad3      	subs	r3, r2, r3
 8027356:	2b02      	cmp	r3, #2
 8027358:	d901      	bls.n	802735e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 802735a:	2303      	movs	r3, #3
 802735c:	e057      	b.n	802740e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802735e:	4b10      	ldr	r3, [pc, #64]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 8027360:	681b      	ldr	r3, [r3, #0]
 8027362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027366:	2b00      	cmp	r3, #0
 8027368:	d0f0      	beq.n	802734c <HAL_RCC_OscConfig+0x478>
 802736a:	e04f      	b.n	802740c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802736c:	4b0c      	ldr	r3, [pc, #48]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 802736e:	681b      	ldr	r3, [r3, #0]
 8027370:	4a0b      	ldr	r2, [pc, #44]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 8027372:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8027376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8027378:	f7fe f892 	bl	80254a0 <HAL_GetTick>
 802737c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802737e:	e008      	b.n	8027392 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8027380:	f7fe f88e 	bl	80254a0 <HAL_GetTick>
 8027384:	4602      	mov	r2, r0
 8027386:	693b      	ldr	r3, [r7, #16]
 8027388:	1ad3      	subs	r3, r2, r3
 802738a:	2b02      	cmp	r3, #2
 802738c:	d901      	bls.n	8027392 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 802738e:	2303      	movs	r3, #3
 8027390:	e03d      	b.n	802740e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8027392:	4b03      	ldr	r3, [pc, #12]	; (80273a0 <HAL_RCC_OscConfig+0x4cc>)
 8027394:	681b      	ldr	r3, [r3, #0]
 8027396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802739a:	2b00      	cmp	r3, #0
 802739c:	d1f0      	bne.n	8027380 <HAL_RCC_OscConfig+0x4ac>
 802739e:	e035      	b.n	802740c <HAL_RCC_OscConfig+0x538>
 80273a0:	40023800 	.word	0x40023800
 80273a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80273a8:	4b1b      	ldr	r3, [pc, #108]	; (8027418 <HAL_RCC_OscConfig+0x544>)
 80273aa:	685b      	ldr	r3, [r3, #4]
 80273ac:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80273ae:	687b      	ldr	r3, [r7, #4]
 80273b0:	699b      	ldr	r3, [r3, #24]
 80273b2:	2b01      	cmp	r3, #1
 80273b4:	d028      	beq.n	8027408 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80273b6:	68fb      	ldr	r3, [r7, #12]
 80273b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80273bc:	687b      	ldr	r3, [r7, #4]
 80273be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80273c0:	429a      	cmp	r2, r3
 80273c2:	d121      	bne.n	8027408 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80273c4:	68fb      	ldr	r3, [r7, #12]
 80273c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80273ca:	687b      	ldr	r3, [r7, #4]
 80273cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80273ce:	429a      	cmp	r2, r3
 80273d0:	d11a      	bne.n	8027408 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80273d2:	68fa      	ldr	r2, [r7, #12]
 80273d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80273d8:	4013      	ands	r3, r2
 80273da:	687a      	ldr	r2, [r7, #4]
 80273dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80273de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80273e0:	4293      	cmp	r3, r2
 80273e2:	d111      	bne.n	8027408 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80273e4:	68fb      	ldr	r3, [r7, #12]
 80273e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80273ea:	687b      	ldr	r3, [r7, #4]
 80273ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80273ee:	085b      	lsrs	r3, r3, #1
 80273f0:	3b01      	subs	r3, #1
 80273f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80273f4:	429a      	cmp	r2, r3
 80273f6:	d107      	bne.n	8027408 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80273f8:	68fb      	ldr	r3, [r7, #12]
 80273fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80273fe:	687b      	ldr	r3, [r7, #4]
 8027400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027402:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8027404:	429a      	cmp	r2, r3
 8027406:	d001      	beq.n	802740c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8027408:	2301      	movs	r3, #1
 802740a:	e000      	b.n	802740e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 802740c:	2300      	movs	r3, #0
}
 802740e:	4618      	mov	r0, r3
 8027410:	3718      	adds	r7, #24
 8027412:	46bd      	mov	sp, r7
 8027414:	bd80      	pop	{r7, pc}
 8027416:	bf00      	nop
 8027418:	40023800 	.word	0x40023800

0802741c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 802741c:	b580      	push	{r7, lr}
 802741e:	b084      	sub	sp, #16
 8027420:	af00      	add	r7, sp, #0
 8027422:	6078      	str	r0, [r7, #4]
 8027424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8027426:	2300      	movs	r3, #0
 8027428:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 802742a:	687b      	ldr	r3, [r7, #4]
 802742c:	2b00      	cmp	r3, #0
 802742e:	d101      	bne.n	8027434 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8027430:	2301      	movs	r3, #1
 8027432:	e0d0      	b.n	80275d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8027434:	4b6a      	ldr	r3, [pc, #424]	; (80275e0 <HAL_RCC_ClockConfig+0x1c4>)
 8027436:	681b      	ldr	r3, [r3, #0]
 8027438:	f003 030f 	and.w	r3, r3, #15
 802743c:	683a      	ldr	r2, [r7, #0]
 802743e:	429a      	cmp	r2, r3
 8027440:	d910      	bls.n	8027464 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8027442:	4b67      	ldr	r3, [pc, #412]	; (80275e0 <HAL_RCC_ClockConfig+0x1c4>)
 8027444:	681b      	ldr	r3, [r3, #0]
 8027446:	f023 020f 	bic.w	r2, r3, #15
 802744a:	4965      	ldr	r1, [pc, #404]	; (80275e0 <HAL_RCC_ClockConfig+0x1c4>)
 802744c:	683b      	ldr	r3, [r7, #0]
 802744e:	4313      	orrs	r3, r2
 8027450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8027452:	4b63      	ldr	r3, [pc, #396]	; (80275e0 <HAL_RCC_ClockConfig+0x1c4>)
 8027454:	681b      	ldr	r3, [r3, #0]
 8027456:	f003 030f 	and.w	r3, r3, #15
 802745a:	683a      	ldr	r2, [r7, #0]
 802745c:	429a      	cmp	r2, r3
 802745e:	d001      	beq.n	8027464 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8027460:	2301      	movs	r3, #1
 8027462:	e0b8      	b.n	80275d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8027464:	687b      	ldr	r3, [r7, #4]
 8027466:	681b      	ldr	r3, [r3, #0]
 8027468:	f003 0302 	and.w	r3, r3, #2
 802746c:	2b00      	cmp	r3, #0
 802746e:	d020      	beq.n	80274b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8027470:	687b      	ldr	r3, [r7, #4]
 8027472:	681b      	ldr	r3, [r3, #0]
 8027474:	f003 0304 	and.w	r3, r3, #4
 8027478:	2b00      	cmp	r3, #0
 802747a:	d005      	beq.n	8027488 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 802747c:	4b59      	ldr	r3, [pc, #356]	; (80275e4 <HAL_RCC_ClockConfig+0x1c8>)
 802747e:	689b      	ldr	r3, [r3, #8]
 8027480:	4a58      	ldr	r2, [pc, #352]	; (80275e4 <HAL_RCC_ClockConfig+0x1c8>)
 8027482:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8027486:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8027488:	687b      	ldr	r3, [r7, #4]
 802748a:	681b      	ldr	r3, [r3, #0]
 802748c:	f003 0308 	and.w	r3, r3, #8
 8027490:	2b00      	cmp	r3, #0
 8027492:	d005      	beq.n	80274a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8027494:	4b53      	ldr	r3, [pc, #332]	; (80275e4 <HAL_RCC_ClockConfig+0x1c8>)
 8027496:	689b      	ldr	r3, [r3, #8]
 8027498:	4a52      	ldr	r2, [pc, #328]	; (80275e4 <HAL_RCC_ClockConfig+0x1c8>)
 802749a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802749e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80274a0:	4b50      	ldr	r3, [pc, #320]	; (80275e4 <HAL_RCC_ClockConfig+0x1c8>)
 80274a2:	689b      	ldr	r3, [r3, #8]
 80274a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80274a8:	687b      	ldr	r3, [r7, #4]
 80274aa:	689b      	ldr	r3, [r3, #8]
 80274ac:	494d      	ldr	r1, [pc, #308]	; (80275e4 <HAL_RCC_ClockConfig+0x1c8>)
 80274ae:	4313      	orrs	r3, r2
 80274b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80274b2:	687b      	ldr	r3, [r7, #4]
 80274b4:	681b      	ldr	r3, [r3, #0]
 80274b6:	f003 0301 	and.w	r3, r3, #1
 80274ba:	2b00      	cmp	r3, #0
 80274bc:	d040      	beq.n	8027540 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80274be:	687b      	ldr	r3, [r7, #4]
 80274c0:	685b      	ldr	r3, [r3, #4]
 80274c2:	2b01      	cmp	r3, #1
 80274c4:	d107      	bne.n	80274d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80274c6:	4b47      	ldr	r3, [pc, #284]	; (80275e4 <HAL_RCC_ClockConfig+0x1c8>)
 80274c8:	681b      	ldr	r3, [r3, #0]
 80274ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80274ce:	2b00      	cmp	r3, #0
 80274d0:	d115      	bne.n	80274fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80274d2:	2301      	movs	r3, #1
 80274d4:	e07f      	b.n	80275d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80274d6:	687b      	ldr	r3, [r7, #4]
 80274d8:	685b      	ldr	r3, [r3, #4]
 80274da:	2b02      	cmp	r3, #2
 80274dc:	d107      	bne.n	80274ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80274de:	4b41      	ldr	r3, [pc, #260]	; (80275e4 <HAL_RCC_ClockConfig+0x1c8>)
 80274e0:	681b      	ldr	r3, [r3, #0]
 80274e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80274e6:	2b00      	cmp	r3, #0
 80274e8:	d109      	bne.n	80274fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80274ea:	2301      	movs	r3, #1
 80274ec:	e073      	b.n	80275d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80274ee:	4b3d      	ldr	r3, [pc, #244]	; (80275e4 <HAL_RCC_ClockConfig+0x1c8>)
 80274f0:	681b      	ldr	r3, [r3, #0]
 80274f2:	f003 0302 	and.w	r3, r3, #2
 80274f6:	2b00      	cmp	r3, #0
 80274f8:	d101      	bne.n	80274fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80274fa:	2301      	movs	r3, #1
 80274fc:	e06b      	b.n	80275d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80274fe:	4b39      	ldr	r3, [pc, #228]	; (80275e4 <HAL_RCC_ClockConfig+0x1c8>)
 8027500:	689b      	ldr	r3, [r3, #8]
 8027502:	f023 0203 	bic.w	r2, r3, #3
 8027506:	687b      	ldr	r3, [r7, #4]
 8027508:	685b      	ldr	r3, [r3, #4]
 802750a:	4936      	ldr	r1, [pc, #216]	; (80275e4 <HAL_RCC_ClockConfig+0x1c8>)
 802750c:	4313      	orrs	r3, r2
 802750e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8027510:	f7fd ffc6 	bl	80254a0 <HAL_GetTick>
 8027514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8027516:	e00a      	b.n	802752e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8027518:	f7fd ffc2 	bl	80254a0 <HAL_GetTick>
 802751c:	4602      	mov	r2, r0
 802751e:	68fb      	ldr	r3, [r7, #12]
 8027520:	1ad3      	subs	r3, r2, r3
 8027522:	f241 3288 	movw	r2, #5000	; 0x1388
 8027526:	4293      	cmp	r3, r2
 8027528:	d901      	bls.n	802752e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 802752a:	2303      	movs	r3, #3
 802752c:	e053      	b.n	80275d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802752e:	4b2d      	ldr	r3, [pc, #180]	; (80275e4 <HAL_RCC_ClockConfig+0x1c8>)
 8027530:	689b      	ldr	r3, [r3, #8]
 8027532:	f003 020c 	and.w	r2, r3, #12
 8027536:	687b      	ldr	r3, [r7, #4]
 8027538:	685b      	ldr	r3, [r3, #4]
 802753a:	009b      	lsls	r3, r3, #2
 802753c:	429a      	cmp	r2, r3
 802753e:	d1eb      	bne.n	8027518 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8027540:	4b27      	ldr	r3, [pc, #156]	; (80275e0 <HAL_RCC_ClockConfig+0x1c4>)
 8027542:	681b      	ldr	r3, [r3, #0]
 8027544:	f003 030f 	and.w	r3, r3, #15
 8027548:	683a      	ldr	r2, [r7, #0]
 802754a:	429a      	cmp	r2, r3
 802754c:	d210      	bcs.n	8027570 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802754e:	4b24      	ldr	r3, [pc, #144]	; (80275e0 <HAL_RCC_ClockConfig+0x1c4>)
 8027550:	681b      	ldr	r3, [r3, #0]
 8027552:	f023 020f 	bic.w	r2, r3, #15
 8027556:	4922      	ldr	r1, [pc, #136]	; (80275e0 <HAL_RCC_ClockConfig+0x1c4>)
 8027558:	683b      	ldr	r3, [r7, #0]
 802755a:	4313      	orrs	r3, r2
 802755c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 802755e:	4b20      	ldr	r3, [pc, #128]	; (80275e0 <HAL_RCC_ClockConfig+0x1c4>)
 8027560:	681b      	ldr	r3, [r3, #0]
 8027562:	f003 030f 	and.w	r3, r3, #15
 8027566:	683a      	ldr	r2, [r7, #0]
 8027568:	429a      	cmp	r2, r3
 802756a:	d001      	beq.n	8027570 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 802756c:	2301      	movs	r3, #1
 802756e:	e032      	b.n	80275d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8027570:	687b      	ldr	r3, [r7, #4]
 8027572:	681b      	ldr	r3, [r3, #0]
 8027574:	f003 0304 	and.w	r3, r3, #4
 8027578:	2b00      	cmp	r3, #0
 802757a:	d008      	beq.n	802758e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802757c:	4b19      	ldr	r3, [pc, #100]	; (80275e4 <HAL_RCC_ClockConfig+0x1c8>)
 802757e:	689b      	ldr	r3, [r3, #8]
 8027580:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8027584:	687b      	ldr	r3, [r7, #4]
 8027586:	68db      	ldr	r3, [r3, #12]
 8027588:	4916      	ldr	r1, [pc, #88]	; (80275e4 <HAL_RCC_ClockConfig+0x1c8>)
 802758a:	4313      	orrs	r3, r2
 802758c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802758e:	687b      	ldr	r3, [r7, #4]
 8027590:	681b      	ldr	r3, [r3, #0]
 8027592:	f003 0308 	and.w	r3, r3, #8
 8027596:	2b00      	cmp	r3, #0
 8027598:	d009      	beq.n	80275ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 802759a:	4b12      	ldr	r3, [pc, #72]	; (80275e4 <HAL_RCC_ClockConfig+0x1c8>)
 802759c:	689b      	ldr	r3, [r3, #8]
 802759e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80275a2:	687b      	ldr	r3, [r7, #4]
 80275a4:	691b      	ldr	r3, [r3, #16]
 80275a6:	00db      	lsls	r3, r3, #3
 80275a8:	490e      	ldr	r1, [pc, #56]	; (80275e4 <HAL_RCC_ClockConfig+0x1c8>)
 80275aa:	4313      	orrs	r3, r2
 80275ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80275ae:	f000 f831 	bl	8027614 <HAL_RCC_GetSysClockFreq>
 80275b2:	4601      	mov	r1, r0
 80275b4:	4b0b      	ldr	r3, [pc, #44]	; (80275e4 <HAL_RCC_ClockConfig+0x1c8>)
 80275b6:	689b      	ldr	r3, [r3, #8]
 80275b8:	091b      	lsrs	r3, r3, #4
 80275ba:	f003 030f 	and.w	r3, r3, #15
 80275be:	4a0a      	ldr	r2, [pc, #40]	; (80275e8 <HAL_RCC_ClockConfig+0x1cc>)
 80275c0:	5cd3      	ldrb	r3, [r2, r3]
 80275c2:	fa21 f303 	lsr.w	r3, r1, r3
 80275c6:	4a09      	ldr	r2, [pc, #36]	; (80275ec <HAL_RCC_ClockConfig+0x1d0>)
 80275c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80275ca:	4b09      	ldr	r3, [pc, #36]	; (80275f0 <HAL_RCC_ClockConfig+0x1d4>)
 80275cc:	681b      	ldr	r3, [r3, #0]
 80275ce:	4618      	mov	r0, r3
 80275d0:	f7d9 fff2 	bl	80015b8 <HAL_InitTick>

  return HAL_OK;
 80275d4:	2300      	movs	r3, #0
}
 80275d6:	4618      	mov	r0, r3
 80275d8:	3710      	adds	r7, #16
 80275da:	46bd      	mov	sp, r7
 80275dc:	bd80      	pop	{r7, pc}
 80275de:	bf00      	nop
 80275e0:	40023c00 	.word	0x40023c00
 80275e4:	40023800 	.word	0x40023800
 80275e8:	0802d984 	.word	0x0802d984
 80275ec:	200013c8 	.word	0x200013c8
 80275f0:	20001414 	.word	0x20001414

080275f4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80275f4:	b480      	push	{r7}
 80275f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 80275f8:	4b05      	ldr	r3, [pc, #20]	; (8027610 <HAL_RCC_EnableCSS+0x1c>)
 80275fa:	681b      	ldr	r3, [r3, #0]
 80275fc:	4a04      	ldr	r2, [pc, #16]	; (8027610 <HAL_RCC_EnableCSS+0x1c>)
 80275fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8027602:	6013      	str	r3, [r2, #0]
}
 8027604:	bf00      	nop
 8027606:	46bd      	mov	sp, r7
 8027608:	f85d 7b04 	ldr.w	r7, [sp], #4
 802760c:	4770      	bx	lr
 802760e:	bf00      	nop
 8027610:	40023800 	.word	0x40023800

08027614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8027614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027616:	b085      	sub	sp, #20
 8027618:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 802761a:	2300      	movs	r3, #0
 802761c:	607b      	str	r3, [r7, #4]
 802761e:	2300      	movs	r3, #0
 8027620:	60fb      	str	r3, [r7, #12]
 8027622:	2300      	movs	r3, #0
 8027624:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8027626:	2300      	movs	r3, #0
 8027628:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 802762a:	4b50      	ldr	r3, [pc, #320]	; (802776c <HAL_RCC_GetSysClockFreq+0x158>)
 802762c:	689b      	ldr	r3, [r3, #8]
 802762e:	f003 030c 	and.w	r3, r3, #12
 8027632:	2b04      	cmp	r3, #4
 8027634:	d007      	beq.n	8027646 <HAL_RCC_GetSysClockFreq+0x32>
 8027636:	2b08      	cmp	r3, #8
 8027638:	d008      	beq.n	802764c <HAL_RCC_GetSysClockFreq+0x38>
 802763a:	2b00      	cmp	r3, #0
 802763c:	f040 808d 	bne.w	802775a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8027640:	4b4b      	ldr	r3, [pc, #300]	; (8027770 <HAL_RCC_GetSysClockFreq+0x15c>)
 8027642:	60bb      	str	r3, [r7, #8]
      break;
 8027644:	e08c      	b.n	8027760 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8027646:	4b4b      	ldr	r3, [pc, #300]	; (8027774 <HAL_RCC_GetSysClockFreq+0x160>)
 8027648:	60bb      	str	r3, [r7, #8]
      break;
 802764a:	e089      	b.n	8027760 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 802764c:	4b47      	ldr	r3, [pc, #284]	; (802776c <HAL_RCC_GetSysClockFreq+0x158>)
 802764e:	685b      	ldr	r3, [r3, #4]
 8027650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8027654:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8027656:	4b45      	ldr	r3, [pc, #276]	; (802776c <HAL_RCC_GetSysClockFreq+0x158>)
 8027658:	685b      	ldr	r3, [r3, #4]
 802765a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802765e:	2b00      	cmp	r3, #0
 8027660:	d023      	beq.n	80276aa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8027662:	4b42      	ldr	r3, [pc, #264]	; (802776c <HAL_RCC_GetSysClockFreq+0x158>)
 8027664:	685b      	ldr	r3, [r3, #4]
 8027666:	099b      	lsrs	r3, r3, #6
 8027668:	f04f 0400 	mov.w	r4, #0
 802766c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8027670:	f04f 0200 	mov.w	r2, #0
 8027674:	ea03 0501 	and.w	r5, r3, r1
 8027678:	ea04 0602 	and.w	r6, r4, r2
 802767c:	4a3d      	ldr	r2, [pc, #244]	; (8027774 <HAL_RCC_GetSysClockFreq+0x160>)
 802767e:	fb02 f106 	mul.w	r1, r2, r6
 8027682:	2200      	movs	r2, #0
 8027684:	fb02 f205 	mul.w	r2, r2, r5
 8027688:	440a      	add	r2, r1
 802768a:	493a      	ldr	r1, [pc, #232]	; (8027774 <HAL_RCC_GetSysClockFreq+0x160>)
 802768c:	fba5 0101 	umull	r0, r1, r5, r1
 8027690:	1853      	adds	r3, r2, r1
 8027692:	4619      	mov	r1, r3
 8027694:	687b      	ldr	r3, [r7, #4]
 8027696:	f04f 0400 	mov.w	r4, #0
 802769a:	461a      	mov	r2, r3
 802769c:	4623      	mov	r3, r4
 802769e:	f7d8 fdc5 	bl	800022c <__aeabi_uldivmod>
 80276a2:	4603      	mov	r3, r0
 80276a4:	460c      	mov	r4, r1
 80276a6:	60fb      	str	r3, [r7, #12]
 80276a8:	e049      	b.n	802773e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80276aa:	4b30      	ldr	r3, [pc, #192]	; (802776c <HAL_RCC_GetSysClockFreq+0x158>)
 80276ac:	685b      	ldr	r3, [r3, #4]
 80276ae:	099b      	lsrs	r3, r3, #6
 80276b0:	f04f 0400 	mov.w	r4, #0
 80276b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80276b8:	f04f 0200 	mov.w	r2, #0
 80276bc:	ea03 0501 	and.w	r5, r3, r1
 80276c0:	ea04 0602 	and.w	r6, r4, r2
 80276c4:	4629      	mov	r1, r5
 80276c6:	4632      	mov	r2, r6
 80276c8:	f04f 0300 	mov.w	r3, #0
 80276cc:	f04f 0400 	mov.w	r4, #0
 80276d0:	0154      	lsls	r4, r2, #5
 80276d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80276d6:	014b      	lsls	r3, r1, #5
 80276d8:	4619      	mov	r1, r3
 80276da:	4622      	mov	r2, r4
 80276dc:	1b49      	subs	r1, r1, r5
 80276de:	eb62 0206 	sbc.w	r2, r2, r6
 80276e2:	f04f 0300 	mov.w	r3, #0
 80276e6:	f04f 0400 	mov.w	r4, #0
 80276ea:	0194      	lsls	r4, r2, #6
 80276ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80276f0:	018b      	lsls	r3, r1, #6
 80276f2:	1a5b      	subs	r3, r3, r1
 80276f4:	eb64 0402 	sbc.w	r4, r4, r2
 80276f8:	f04f 0100 	mov.w	r1, #0
 80276fc:	f04f 0200 	mov.w	r2, #0
 8027700:	00e2      	lsls	r2, r4, #3
 8027702:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8027706:	00d9      	lsls	r1, r3, #3
 8027708:	460b      	mov	r3, r1
 802770a:	4614      	mov	r4, r2
 802770c:	195b      	adds	r3, r3, r5
 802770e:	eb44 0406 	adc.w	r4, r4, r6
 8027712:	f04f 0100 	mov.w	r1, #0
 8027716:	f04f 0200 	mov.w	r2, #0
 802771a:	02a2      	lsls	r2, r4, #10
 802771c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8027720:	0299      	lsls	r1, r3, #10
 8027722:	460b      	mov	r3, r1
 8027724:	4614      	mov	r4, r2
 8027726:	4618      	mov	r0, r3
 8027728:	4621      	mov	r1, r4
 802772a:	687b      	ldr	r3, [r7, #4]
 802772c:	f04f 0400 	mov.w	r4, #0
 8027730:	461a      	mov	r2, r3
 8027732:	4623      	mov	r3, r4
 8027734:	f7d8 fd7a 	bl	800022c <__aeabi_uldivmod>
 8027738:	4603      	mov	r3, r0
 802773a:	460c      	mov	r4, r1
 802773c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 802773e:	4b0b      	ldr	r3, [pc, #44]	; (802776c <HAL_RCC_GetSysClockFreq+0x158>)
 8027740:	685b      	ldr	r3, [r3, #4]
 8027742:	0c1b      	lsrs	r3, r3, #16
 8027744:	f003 0303 	and.w	r3, r3, #3
 8027748:	3301      	adds	r3, #1
 802774a:	005b      	lsls	r3, r3, #1
 802774c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 802774e:	68fa      	ldr	r2, [r7, #12]
 8027750:	683b      	ldr	r3, [r7, #0]
 8027752:	fbb2 f3f3 	udiv	r3, r2, r3
 8027756:	60bb      	str	r3, [r7, #8]
      break;
 8027758:	e002      	b.n	8027760 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 802775a:	4b05      	ldr	r3, [pc, #20]	; (8027770 <HAL_RCC_GetSysClockFreq+0x15c>)
 802775c:	60bb      	str	r3, [r7, #8]
      break;
 802775e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8027760:	68bb      	ldr	r3, [r7, #8]
}
 8027762:	4618      	mov	r0, r3
 8027764:	3714      	adds	r7, #20
 8027766:	46bd      	mov	sp, r7
 8027768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802776a:	bf00      	nop
 802776c:	40023800 	.word	0x40023800
 8027770:	00f42400 	.word	0x00f42400
 8027774:	017d7840 	.word	0x017d7840

08027778 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8027778:	b480      	push	{r7}
 802777a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 802777c:	4b03      	ldr	r3, [pc, #12]	; (802778c <HAL_RCC_GetHCLKFreq+0x14>)
 802777e:	681b      	ldr	r3, [r3, #0]
}
 8027780:	4618      	mov	r0, r3
 8027782:	46bd      	mov	sp, r7
 8027784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027788:	4770      	bx	lr
 802778a:	bf00      	nop
 802778c:	200013c8 	.word	0x200013c8

08027790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8027790:	b580      	push	{r7, lr}
 8027792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8027794:	f7ff fff0 	bl	8027778 <HAL_RCC_GetHCLKFreq>
 8027798:	4601      	mov	r1, r0
 802779a:	4b05      	ldr	r3, [pc, #20]	; (80277b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 802779c:	689b      	ldr	r3, [r3, #8]
 802779e:	0b5b      	lsrs	r3, r3, #13
 80277a0:	f003 0307 	and.w	r3, r3, #7
 80277a4:	4a03      	ldr	r2, [pc, #12]	; (80277b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80277a6:	5cd3      	ldrb	r3, [r2, r3]
 80277a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80277ac:	4618      	mov	r0, r3
 80277ae:	bd80      	pop	{r7, pc}
 80277b0:	40023800 	.word	0x40023800
 80277b4:	0802d994 	.word	0x0802d994

080277b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80277b8:	b480      	push	{r7}
 80277ba:	b083      	sub	sp, #12
 80277bc:	af00      	add	r7, sp, #0
 80277be:	6078      	str	r0, [r7, #4]
 80277c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80277c2:	687b      	ldr	r3, [r7, #4]
 80277c4:	220f      	movs	r2, #15
 80277c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80277c8:	4b12      	ldr	r3, [pc, #72]	; (8027814 <HAL_RCC_GetClockConfig+0x5c>)
 80277ca:	689b      	ldr	r3, [r3, #8]
 80277cc:	f003 0203 	and.w	r2, r3, #3
 80277d0:	687b      	ldr	r3, [r7, #4]
 80277d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80277d4:	4b0f      	ldr	r3, [pc, #60]	; (8027814 <HAL_RCC_GetClockConfig+0x5c>)
 80277d6:	689b      	ldr	r3, [r3, #8]
 80277d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80277dc:	687b      	ldr	r3, [r7, #4]
 80277de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80277e0:	4b0c      	ldr	r3, [pc, #48]	; (8027814 <HAL_RCC_GetClockConfig+0x5c>)
 80277e2:	689b      	ldr	r3, [r3, #8]
 80277e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80277e8:	687b      	ldr	r3, [r7, #4]
 80277ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80277ec:	4b09      	ldr	r3, [pc, #36]	; (8027814 <HAL_RCC_GetClockConfig+0x5c>)
 80277ee:	689b      	ldr	r3, [r3, #8]
 80277f0:	08db      	lsrs	r3, r3, #3
 80277f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80277f6:	687b      	ldr	r3, [r7, #4]
 80277f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80277fa:	4b07      	ldr	r3, [pc, #28]	; (8027818 <HAL_RCC_GetClockConfig+0x60>)
 80277fc:	681b      	ldr	r3, [r3, #0]
 80277fe:	f003 020f 	and.w	r2, r3, #15
 8027802:	683b      	ldr	r3, [r7, #0]
 8027804:	601a      	str	r2, [r3, #0]
}
 8027806:	bf00      	nop
 8027808:	370c      	adds	r7, #12
 802780a:	46bd      	mov	sp, r7
 802780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027810:	4770      	bx	lr
 8027812:	bf00      	nop
 8027814:	40023800 	.word	0x40023800
 8027818:	40023c00 	.word	0x40023c00

0802781c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 802781c:	b580      	push	{r7, lr}
 802781e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8027820:	4b06      	ldr	r3, [pc, #24]	; (802783c <HAL_RCC_NMI_IRQHandler+0x20>)
 8027822:	68db      	ldr	r3, [r3, #12]
 8027824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027828:	2b80      	cmp	r3, #128	; 0x80
 802782a:	d104      	bne.n	8027836 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 802782c:	f000 f80a 	bl	8027844 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8027830:	4b03      	ldr	r3, [pc, #12]	; (8027840 <HAL_RCC_NMI_IRQHandler+0x24>)
 8027832:	2280      	movs	r2, #128	; 0x80
 8027834:	701a      	strb	r2, [r3, #0]
  }
}
 8027836:	bf00      	nop
 8027838:	bd80      	pop	{r7, pc}
 802783a:	bf00      	nop
 802783c:	40023800 	.word	0x40023800
 8027840:	4002380e 	.word	0x4002380e

08027844 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8027844:	b480      	push	{r7}
 8027846:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8027848:	bf00      	nop
 802784a:	46bd      	mov	sp, r7
 802784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027850:	4770      	bx	lr
	...

08027854 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8027854:	b580      	push	{r7, lr}
 8027856:	b088      	sub	sp, #32
 8027858:	af00      	add	r7, sp, #0
 802785a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 802785c:	2300      	movs	r3, #0
 802785e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8027860:	2300      	movs	r3, #0
 8027862:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8027864:	2300      	movs	r3, #0
 8027866:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8027868:	2300      	movs	r3, #0
 802786a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 802786c:	2300      	movs	r3, #0
 802786e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8027870:	687b      	ldr	r3, [r7, #4]
 8027872:	681b      	ldr	r3, [r3, #0]
 8027874:	f003 0301 	and.w	r3, r3, #1
 8027878:	2b00      	cmp	r3, #0
 802787a:	d012      	beq.n	80278a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 802787c:	4b69      	ldr	r3, [pc, #420]	; (8027a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802787e:	689b      	ldr	r3, [r3, #8]
 8027880:	4a68      	ldr	r2, [pc, #416]	; (8027a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8027882:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8027886:	6093      	str	r3, [r2, #8]
 8027888:	4b66      	ldr	r3, [pc, #408]	; (8027a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802788a:	689a      	ldr	r2, [r3, #8]
 802788c:	687b      	ldr	r3, [r7, #4]
 802788e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8027890:	4964      	ldr	r1, [pc, #400]	; (8027a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8027892:	4313      	orrs	r3, r2
 8027894:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8027896:	687b      	ldr	r3, [r7, #4]
 8027898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802789a:	2b00      	cmp	r3, #0
 802789c:	d101      	bne.n	80278a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 802789e:	2301      	movs	r3, #1
 80278a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80278a2:	687b      	ldr	r3, [r7, #4]
 80278a4:	681b      	ldr	r3, [r3, #0]
 80278a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80278aa:	2b00      	cmp	r3, #0
 80278ac:	d017      	beq.n	80278de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80278ae:	4b5d      	ldr	r3, [pc, #372]	; (8027a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80278b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80278b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80278b8:	687b      	ldr	r3, [r7, #4]
 80278ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80278bc:	4959      	ldr	r1, [pc, #356]	; (8027a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80278be:	4313      	orrs	r3, r2
 80278c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80278c4:	687b      	ldr	r3, [r7, #4]
 80278c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80278c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80278cc:	d101      	bne.n	80278d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80278ce:	2301      	movs	r3, #1
 80278d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80278d2:	687b      	ldr	r3, [r7, #4]
 80278d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80278d6:	2b00      	cmp	r3, #0
 80278d8:	d101      	bne.n	80278de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80278da:	2301      	movs	r3, #1
 80278dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80278de:	687b      	ldr	r3, [r7, #4]
 80278e0:	681b      	ldr	r3, [r3, #0]
 80278e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80278e6:	2b00      	cmp	r3, #0
 80278e8:	d017      	beq.n	802791a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80278ea:	4b4e      	ldr	r3, [pc, #312]	; (8027a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80278ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80278f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80278f4:	687b      	ldr	r3, [r7, #4]
 80278f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80278f8:	494a      	ldr	r1, [pc, #296]	; (8027a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80278fa:	4313      	orrs	r3, r2
 80278fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8027900:	687b      	ldr	r3, [r7, #4]
 8027902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027904:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8027908:	d101      	bne.n	802790e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 802790a:	2301      	movs	r3, #1
 802790c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 802790e:	687b      	ldr	r3, [r7, #4]
 8027910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027912:	2b00      	cmp	r3, #0
 8027914:	d101      	bne.n	802791a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8027916:	2301      	movs	r3, #1
 8027918:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 802791a:	687b      	ldr	r3, [r7, #4]
 802791c:	681b      	ldr	r3, [r3, #0]
 802791e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8027922:	2b00      	cmp	r3, #0
 8027924:	d001      	beq.n	802792a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8027926:	2301      	movs	r3, #1
 8027928:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 802792a:	687b      	ldr	r3, [r7, #4]
 802792c:	681b      	ldr	r3, [r3, #0]
 802792e:	f003 0320 	and.w	r3, r3, #32
 8027932:	2b00      	cmp	r3, #0
 8027934:	f000 808b 	beq.w	8027a4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8027938:	4b3a      	ldr	r3, [pc, #232]	; (8027a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802793a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802793c:	4a39      	ldr	r2, [pc, #228]	; (8027a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802793e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8027942:	6413      	str	r3, [r2, #64]	; 0x40
 8027944:	4b37      	ldr	r3, [pc, #220]	; (8027a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8027946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802794c:	60bb      	str	r3, [r7, #8]
 802794e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8027950:	4b35      	ldr	r3, [pc, #212]	; (8027a28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8027952:	681b      	ldr	r3, [r3, #0]
 8027954:	4a34      	ldr	r2, [pc, #208]	; (8027a28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8027956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802795a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802795c:	f7fd fda0 	bl	80254a0 <HAL_GetTick>
 8027960:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8027962:	e008      	b.n	8027976 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8027964:	f7fd fd9c 	bl	80254a0 <HAL_GetTick>
 8027968:	4602      	mov	r2, r0
 802796a:	697b      	ldr	r3, [r7, #20]
 802796c:	1ad3      	subs	r3, r2, r3
 802796e:	2b64      	cmp	r3, #100	; 0x64
 8027970:	d901      	bls.n	8027976 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8027972:	2303      	movs	r3, #3
 8027974:	e355      	b.n	8028022 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8027976:	4b2c      	ldr	r3, [pc, #176]	; (8027a28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8027978:	681b      	ldr	r3, [r3, #0]
 802797a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802797e:	2b00      	cmp	r3, #0
 8027980:	d0f0      	beq.n	8027964 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8027982:	4b28      	ldr	r3, [pc, #160]	; (8027a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8027984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802798a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 802798c:	693b      	ldr	r3, [r7, #16]
 802798e:	2b00      	cmp	r3, #0
 8027990:	d035      	beq.n	80279fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8027992:	687b      	ldr	r3, [r7, #4]
 8027994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802799a:	693a      	ldr	r2, [r7, #16]
 802799c:	429a      	cmp	r2, r3
 802799e:	d02e      	beq.n	80279fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80279a0:	4b20      	ldr	r3, [pc, #128]	; (8027a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80279a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80279a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80279a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80279aa:	4b1e      	ldr	r3, [pc, #120]	; (8027a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80279ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80279ae:	4a1d      	ldr	r2, [pc, #116]	; (8027a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80279b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80279b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80279b6:	4b1b      	ldr	r3, [pc, #108]	; (8027a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80279b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80279ba:	4a1a      	ldr	r2, [pc, #104]	; (8027a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80279bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80279c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80279c2:	4a18      	ldr	r2, [pc, #96]	; (8027a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80279c4:	693b      	ldr	r3, [r7, #16]
 80279c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80279c8:	4b16      	ldr	r3, [pc, #88]	; (8027a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80279ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80279cc:	f003 0301 	and.w	r3, r3, #1
 80279d0:	2b01      	cmp	r3, #1
 80279d2:	d114      	bne.n	80279fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80279d4:	f7fd fd64 	bl	80254a0 <HAL_GetTick>
 80279d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80279da:	e00a      	b.n	80279f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80279dc:	f7fd fd60 	bl	80254a0 <HAL_GetTick>
 80279e0:	4602      	mov	r2, r0
 80279e2:	697b      	ldr	r3, [r7, #20]
 80279e4:	1ad3      	subs	r3, r2, r3
 80279e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80279ea:	4293      	cmp	r3, r2
 80279ec:	d901      	bls.n	80279f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80279ee:	2303      	movs	r3, #3
 80279f0:	e317      	b.n	8028022 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80279f2:	4b0c      	ldr	r3, [pc, #48]	; (8027a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80279f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80279f6:	f003 0302 	and.w	r3, r3, #2
 80279fa:	2b00      	cmp	r3, #0
 80279fc:	d0ee      	beq.n	80279dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80279fe:	687b      	ldr	r3, [r7, #4]
 8027a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8027a0a:	d111      	bne.n	8027a30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8027a0c:	4b05      	ldr	r3, [pc, #20]	; (8027a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8027a0e:	689b      	ldr	r3, [r3, #8]
 8027a10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8027a14:	687b      	ldr	r3, [r7, #4]
 8027a16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8027a18:	4b04      	ldr	r3, [pc, #16]	; (8027a2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8027a1a:	400b      	ands	r3, r1
 8027a1c:	4901      	ldr	r1, [pc, #4]	; (8027a24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8027a1e:	4313      	orrs	r3, r2
 8027a20:	608b      	str	r3, [r1, #8]
 8027a22:	e00b      	b.n	8027a3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8027a24:	40023800 	.word	0x40023800
 8027a28:	40007000 	.word	0x40007000
 8027a2c:	0ffffcff 	.word	0x0ffffcff
 8027a30:	4bb0      	ldr	r3, [pc, #704]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027a32:	689b      	ldr	r3, [r3, #8]
 8027a34:	4aaf      	ldr	r2, [pc, #700]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027a36:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8027a3a:	6093      	str	r3, [r2, #8]
 8027a3c:	4bad      	ldr	r3, [pc, #692]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027a3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8027a40:	687b      	ldr	r3, [r7, #4]
 8027a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027a48:	49aa      	ldr	r1, [pc, #680]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027a4a:	4313      	orrs	r3, r2
 8027a4c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8027a4e:	687b      	ldr	r3, [r7, #4]
 8027a50:	681b      	ldr	r3, [r3, #0]
 8027a52:	f003 0310 	and.w	r3, r3, #16
 8027a56:	2b00      	cmp	r3, #0
 8027a58:	d010      	beq.n	8027a7c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8027a5a:	4ba6      	ldr	r3, [pc, #664]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027a60:	4aa4      	ldr	r2, [pc, #656]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027a62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8027a66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8027a6a:	4ba2      	ldr	r3, [pc, #648]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027a6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8027a70:	687b      	ldr	r3, [r7, #4]
 8027a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027a74:	499f      	ldr	r1, [pc, #636]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027a76:	4313      	orrs	r3, r2
 8027a78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8027a7c:	687b      	ldr	r3, [r7, #4]
 8027a7e:	681b      	ldr	r3, [r3, #0]
 8027a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8027a84:	2b00      	cmp	r3, #0
 8027a86:	d00a      	beq.n	8027a9e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8027a88:	4b9a      	ldr	r3, [pc, #616]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027a8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8027a92:	687b      	ldr	r3, [r7, #4]
 8027a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8027a96:	4997      	ldr	r1, [pc, #604]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027a98:	4313      	orrs	r3, r2
 8027a9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8027a9e:	687b      	ldr	r3, [r7, #4]
 8027aa0:	681b      	ldr	r3, [r3, #0]
 8027aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8027aa6:	2b00      	cmp	r3, #0
 8027aa8:	d00a      	beq.n	8027ac0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8027aaa:	4b92      	ldr	r3, [pc, #584]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027ab0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8027ab4:	687b      	ldr	r3, [r7, #4]
 8027ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8027ab8:	498e      	ldr	r1, [pc, #568]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027aba:	4313      	orrs	r3, r2
 8027abc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8027ac0:	687b      	ldr	r3, [r7, #4]
 8027ac2:	681b      	ldr	r3, [r3, #0]
 8027ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8027ac8:	2b00      	cmp	r3, #0
 8027aca:	d00a      	beq.n	8027ae2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8027acc:	4b89      	ldr	r3, [pc, #548]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027ad2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8027ad6:	687b      	ldr	r3, [r7, #4]
 8027ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8027ada:	4986      	ldr	r1, [pc, #536]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027adc:	4313      	orrs	r3, r2
 8027ade:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8027ae2:	687b      	ldr	r3, [r7, #4]
 8027ae4:	681b      	ldr	r3, [r3, #0]
 8027ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027aea:	2b00      	cmp	r3, #0
 8027aec:	d00a      	beq.n	8027b04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8027aee:	4b81      	ldr	r3, [pc, #516]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027af4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8027af8:	687b      	ldr	r3, [r7, #4]
 8027afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027afc:	497d      	ldr	r1, [pc, #500]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027afe:	4313      	orrs	r3, r2
 8027b00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8027b04:	687b      	ldr	r3, [r7, #4]
 8027b06:	681b      	ldr	r3, [r3, #0]
 8027b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027b0c:	2b00      	cmp	r3, #0
 8027b0e:	d00a      	beq.n	8027b26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8027b10:	4b78      	ldr	r3, [pc, #480]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027b16:	f023 0203 	bic.w	r2, r3, #3
 8027b1a:	687b      	ldr	r3, [r7, #4]
 8027b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027b1e:	4975      	ldr	r1, [pc, #468]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027b20:	4313      	orrs	r3, r2
 8027b22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8027b26:	687b      	ldr	r3, [r7, #4]
 8027b28:	681b      	ldr	r3, [r3, #0]
 8027b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027b2e:	2b00      	cmp	r3, #0
 8027b30:	d00a      	beq.n	8027b48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8027b32:	4b70      	ldr	r3, [pc, #448]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027b38:	f023 020c 	bic.w	r2, r3, #12
 8027b3c:	687b      	ldr	r3, [r7, #4]
 8027b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027b40:	496c      	ldr	r1, [pc, #432]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027b42:	4313      	orrs	r3, r2
 8027b44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8027b48:	687b      	ldr	r3, [r7, #4]
 8027b4a:	681b      	ldr	r3, [r3, #0]
 8027b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027b50:	2b00      	cmp	r3, #0
 8027b52:	d00a      	beq.n	8027b6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8027b54:	4b67      	ldr	r3, [pc, #412]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027b5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8027b5e:	687b      	ldr	r3, [r7, #4]
 8027b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8027b62:	4964      	ldr	r1, [pc, #400]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027b64:	4313      	orrs	r3, r2
 8027b66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8027b6a:	687b      	ldr	r3, [r7, #4]
 8027b6c:	681b      	ldr	r3, [r3, #0]
 8027b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8027b72:	2b00      	cmp	r3, #0
 8027b74:	d00a      	beq.n	8027b8c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8027b76:	4b5f      	ldr	r3, [pc, #380]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027b7c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8027b80:	687b      	ldr	r3, [r7, #4]
 8027b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027b84:	495b      	ldr	r1, [pc, #364]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027b86:	4313      	orrs	r3, r2
 8027b88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8027b8c:	687b      	ldr	r3, [r7, #4]
 8027b8e:	681b      	ldr	r3, [r3, #0]
 8027b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027b94:	2b00      	cmp	r3, #0
 8027b96:	d00a      	beq.n	8027bae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8027b98:	4b56      	ldr	r3, [pc, #344]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027b9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8027ba2:	687b      	ldr	r3, [r7, #4]
 8027ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027ba6:	4953      	ldr	r1, [pc, #332]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027ba8:	4313      	orrs	r3, r2
 8027baa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8027bae:	687b      	ldr	r3, [r7, #4]
 8027bb0:	681b      	ldr	r3, [r3, #0]
 8027bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8027bb6:	2b00      	cmp	r3, #0
 8027bb8:	d00a      	beq.n	8027bd0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8027bba:	4b4e      	ldr	r3, [pc, #312]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027bc0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8027bc4:	687b      	ldr	r3, [r7, #4]
 8027bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027bc8:	494a      	ldr	r1, [pc, #296]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027bca:	4313      	orrs	r3, r2
 8027bcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8027bd0:	687b      	ldr	r3, [r7, #4]
 8027bd2:	681b      	ldr	r3, [r3, #0]
 8027bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8027bd8:	2b00      	cmp	r3, #0
 8027bda:	d00a      	beq.n	8027bf2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8027bdc:	4b45      	ldr	r3, [pc, #276]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027be2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8027be6:	687b      	ldr	r3, [r7, #4]
 8027be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027bea:	4942      	ldr	r1, [pc, #264]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027bec:	4313      	orrs	r3, r2
 8027bee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8027bf2:	687b      	ldr	r3, [r7, #4]
 8027bf4:	681b      	ldr	r3, [r3, #0]
 8027bf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8027bfa:	2b00      	cmp	r3, #0
 8027bfc:	d00a      	beq.n	8027c14 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8027bfe:	4b3d      	ldr	r3, [pc, #244]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027c04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8027c08:	687b      	ldr	r3, [r7, #4]
 8027c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8027c0c:	4939      	ldr	r1, [pc, #228]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027c0e:	4313      	orrs	r3, r2
 8027c10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8027c14:	687b      	ldr	r3, [r7, #4]
 8027c16:	681b      	ldr	r3, [r3, #0]
 8027c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8027c1c:	2b00      	cmp	r3, #0
 8027c1e:	d00a      	beq.n	8027c36 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8027c20:	4b34      	ldr	r3, [pc, #208]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027c26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8027c2a:	687b      	ldr	r3, [r7, #4]
 8027c2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8027c2e:	4931      	ldr	r1, [pc, #196]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027c30:	4313      	orrs	r3, r2
 8027c32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8027c36:	687b      	ldr	r3, [r7, #4]
 8027c38:	681b      	ldr	r3, [r3, #0]
 8027c3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8027c3e:	2b00      	cmp	r3, #0
 8027c40:	d011      	beq.n	8027c66 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8027c42:	4b2c      	ldr	r3, [pc, #176]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027c48:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8027c4c:	687b      	ldr	r3, [r7, #4]
 8027c4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8027c50:	4928      	ldr	r1, [pc, #160]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027c52:	4313      	orrs	r3, r2
 8027c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8027c58:	687b      	ldr	r3, [r7, #4]
 8027c5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8027c5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8027c60:	d101      	bne.n	8027c66 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8027c62:	2301      	movs	r3, #1
 8027c64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8027c66:	687b      	ldr	r3, [r7, #4]
 8027c68:	681b      	ldr	r3, [r3, #0]
 8027c6a:	f003 0308 	and.w	r3, r3, #8
 8027c6e:	2b00      	cmp	r3, #0
 8027c70:	d001      	beq.n	8027c76 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8027c72:	2301      	movs	r3, #1
 8027c74:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8027c76:	687b      	ldr	r3, [r7, #4]
 8027c78:	681b      	ldr	r3, [r3, #0]
 8027c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8027c7e:	2b00      	cmp	r3, #0
 8027c80:	d00a      	beq.n	8027c98 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8027c82:	4b1c      	ldr	r3, [pc, #112]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027c88:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8027c8c:	687b      	ldr	r3, [r7, #4]
 8027c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8027c90:	4918      	ldr	r1, [pc, #96]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027c92:	4313      	orrs	r3, r2
 8027c94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8027c98:	687b      	ldr	r3, [r7, #4]
 8027c9a:	681b      	ldr	r3, [r3, #0]
 8027c9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8027ca0:	2b00      	cmp	r3, #0
 8027ca2:	d00b      	beq.n	8027cbc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8027ca4:	4b13      	ldr	r3, [pc, #76]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8027caa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8027cae:	687b      	ldr	r3, [r7, #4]
 8027cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8027cb4:	490f      	ldr	r1, [pc, #60]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027cb6:	4313      	orrs	r3, r2
 8027cb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8027cbc:	69fb      	ldr	r3, [r7, #28]
 8027cbe:	2b01      	cmp	r3, #1
 8027cc0:	d005      	beq.n	8027cce <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8027cc2:	687b      	ldr	r3, [r7, #4]
 8027cc4:	681b      	ldr	r3, [r3, #0]
 8027cc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8027cca:	f040 80d8 	bne.w	8027e7e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8027cce:	4b09      	ldr	r3, [pc, #36]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027cd0:	681b      	ldr	r3, [r3, #0]
 8027cd2:	4a08      	ldr	r2, [pc, #32]	; (8027cf4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8027cd4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8027cd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8027cda:	f7fd fbe1 	bl	80254a0 <HAL_GetTick>
 8027cde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8027ce0:	e00a      	b.n	8027cf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8027ce2:	f7fd fbdd 	bl	80254a0 <HAL_GetTick>
 8027ce6:	4602      	mov	r2, r0
 8027ce8:	697b      	ldr	r3, [r7, #20]
 8027cea:	1ad3      	subs	r3, r2, r3
 8027cec:	2b64      	cmp	r3, #100	; 0x64
 8027cee:	d903      	bls.n	8027cf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027cf0:	2303      	movs	r3, #3
 8027cf2:	e196      	b.n	8028022 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8027cf4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8027cf8:	4b6c      	ldr	r3, [pc, #432]	; (8027eac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027cfa:	681b      	ldr	r3, [r3, #0]
 8027cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8027d00:	2b00      	cmp	r3, #0
 8027d02:	d1ee      	bne.n	8027ce2 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8027d04:	687b      	ldr	r3, [r7, #4]
 8027d06:	681b      	ldr	r3, [r3, #0]
 8027d08:	f003 0301 	and.w	r3, r3, #1
 8027d0c:	2b00      	cmp	r3, #0
 8027d0e:	d021      	beq.n	8027d54 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8027d10:	687b      	ldr	r3, [r7, #4]
 8027d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8027d14:	2b00      	cmp	r3, #0
 8027d16:	d11d      	bne.n	8027d54 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8027d18:	4b64      	ldr	r3, [pc, #400]	; (8027eac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8027d1e:	0c1b      	lsrs	r3, r3, #16
 8027d20:	f003 0303 	and.w	r3, r3, #3
 8027d24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8027d26:	4b61      	ldr	r3, [pc, #388]	; (8027eac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8027d2c:	0e1b      	lsrs	r3, r3, #24
 8027d2e:	f003 030f 	and.w	r3, r3, #15
 8027d32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8027d34:	687b      	ldr	r3, [r7, #4]
 8027d36:	685b      	ldr	r3, [r3, #4]
 8027d38:	019a      	lsls	r2, r3, #6
 8027d3a:	693b      	ldr	r3, [r7, #16]
 8027d3c:	041b      	lsls	r3, r3, #16
 8027d3e:	431a      	orrs	r2, r3
 8027d40:	68fb      	ldr	r3, [r7, #12]
 8027d42:	061b      	lsls	r3, r3, #24
 8027d44:	431a      	orrs	r2, r3
 8027d46:	687b      	ldr	r3, [r7, #4]
 8027d48:	689b      	ldr	r3, [r3, #8]
 8027d4a:	071b      	lsls	r3, r3, #28
 8027d4c:	4957      	ldr	r1, [pc, #348]	; (8027eac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027d4e:	4313      	orrs	r3, r2
 8027d50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8027d54:	687b      	ldr	r3, [r7, #4]
 8027d56:	681b      	ldr	r3, [r3, #0]
 8027d58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8027d5c:	2b00      	cmp	r3, #0
 8027d5e:	d004      	beq.n	8027d6a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8027d60:	687b      	ldr	r3, [r7, #4]
 8027d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027d64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8027d68:	d00a      	beq.n	8027d80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8027d6a:	687b      	ldr	r3, [r7, #4]
 8027d6c:	681b      	ldr	r3, [r3, #0]
 8027d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8027d72:	2b00      	cmp	r3, #0
 8027d74:	d02e      	beq.n	8027dd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8027d76:	687b      	ldr	r3, [r7, #4]
 8027d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027d7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8027d7e:	d129      	bne.n	8027dd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8027d80:	4b4a      	ldr	r3, [pc, #296]	; (8027eac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8027d86:	0c1b      	lsrs	r3, r3, #16
 8027d88:	f003 0303 	and.w	r3, r3, #3
 8027d8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8027d8e:	4b47      	ldr	r3, [pc, #284]	; (8027eac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8027d94:	0f1b      	lsrs	r3, r3, #28
 8027d96:	f003 0307 	and.w	r3, r3, #7
 8027d9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8027d9c:	687b      	ldr	r3, [r7, #4]
 8027d9e:	685b      	ldr	r3, [r3, #4]
 8027da0:	019a      	lsls	r2, r3, #6
 8027da2:	693b      	ldr	r3, [r7, #16]
 8027da4:	041b      	lsls	r3, r3, #16
 8027da6:	431a      	orrs	r2, r3
 8027da8:	687b      	ldr	r3, [r7, #4]
 8027daa:	68db      	ldr	r3, [r3, #12]
 8027dac:	061b      	lsls	r3, r3, #24
 8027dae:	431a      	orrs	r2, r3
 8027db0:	68fb      	ldr	r3, [r7, #12]
 8027db2:	071b      	lsls	r3, r3, #28
 8027db4:	493d      	ldr	r1, [pc, #244]	; (8027eac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027db6:	4313      	orrs	r3, r2
 8027db8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8027dbc:	4b3b      	ldr	r3, [pc, #236]	; (8027eac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027dc2:	f023 021f 	bic.w	r2, r3, #31
 8027dc6:	687b      	ldr	r3, [r7, #4]
 8027dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027dca:	3b01      	subs	r3, #1
 8027dcc:	4937      	ldr	r1, [pc, #220]	; (8027eac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027dce:	4313      	orrs	r3, r2
 8027dd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8027dd4:	687b      	ldr	r3, [r7, #4]
 8027dd6:	681b      	ldr	r3, [r3, #0]
 8027dd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8027ddc:	2b00      	cmp	r3, #0
 8027dde:	d01d      	beq.n	8027e1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8027de0:	4b32      	ldr	r3, [pc, #200]	; (8027eac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8027de6:	0e1b      	lsrs	r3, r3, #24
 8027de8:	f003 030f 	and.w	r3, r3, #15
 8027dec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8027dee:	4b2f      	ldr	r3, [pc, #188]	; (8027eac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8027df4:	0f1b      	lsrs	r3, r3, #28
 8027df6:	f003 0307 	and.w	r3, r3, #7
 8027dfa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8027dfc:	687b      	ldr	r3, [r7, #4]
 8027dfe:	685b      	ldr	r3, [r3, #4]
 8027e00:	019a      	lsls	r2, r3, #6
 8027e02:	687b      	ldr	r3, [r7, #4]
 8027e04:	691b      	ldr	r3, [r3, #16]
 8027e06:	041b      	lsls	r3, r3, #16
 8027e08:	431a      	orrs	r2, r3
 8027e0a:	693b      	ldr	r3, [r7, #16]
 8027e0c:	061b      	lsls	r3, r3, #24
 8027e0e:	431a      	orrs	r2, r3
 8027e10:	68fb      	ldr	r3, [r7, #12]
 8027e12:	071b      	lsls	r3, r3, #28
 8027e14:	4925      	ldr	r1, [pc, #148]	; (8027eac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027e16:	4313      	orrs	r3, r2
 8027e18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8027e1c:	687b      	ldr	r3, [r7, #4]
 8027e1e:	681b      	ldr	r3, [r3, #0]
 8027e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027e24:	2b00      	cmp	r3, #0
 8027e26:	d011      	beq.n	8027e4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8027e28:	687b      	ldr	r3, [r7, #4]
 8027e2a:	685b      	ldr	r3, [r3, #4]
 8027e2c:	019a      	lsls	r2, r3, #6
 8027e2e:	687b      	ldr	r3, [r7, #4]
 8027e30:	691b      	ldr	r3, [r3, #16]
 8027e32:	041b      	lsls	r3, r3, #16
 8027e34:	431a      	orrs	r2, r3
 8027e36:	687b      	ldr	r3, [r7, #4]
 8027e38:	68db      	ldr	r3, [r3, #12]
 8027e3a:	061b      	lsls	r3, r3, #24
 8027e3c:	431a      	orrs	r2, r3
 8027e3e:	687b      	ldr	r3, [r7, #4]
 8027e40:	689b      	ldr	r3, [r3, #8]
 8027e42:	071b      	lsls	r3, r3, #28
 8027e44:	4919      	ldr	r1, [pc, #100]	; (8027eac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027e46:	4313      	orrs	r3, r2
 8027e48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8027e4c:	4b17      	ldr	r3, [pc, #92]	; (8027eac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027e4e:	681b      	ldr	r3, [r3, #0]
 8027e50:	4a16      	ldr	r2, [pc, #88]	; (8027eac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027e52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8027e56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8027e58:	f7fd fb22 	bl	80254a0 <HAL_GetTick>
 8027e5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8027e5e:	e008      	b.n	8027e72 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8027e60:	f7fd fb1e 	bl	80254a0 <HAL_GetTick>
 8027e64:	4602      	mov	r2, r0
 8027e66:	697b      	ldr	r3, [r7, #20]
 8027e68:	1ad3      	subs	r3, r2, r3
 8027e6a:	2b64      	cmp	r3, #100	; 0x64
 8027e6c:	d901      	bls.n	8027e72 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027e6e:	2303      	movs	r3, #3
 8027e70:	e0d7      	b.n	8028022 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8027e72:	4b0e      	ldr	r3, [pc, #56]	; (8027eac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027e74:	681b      	ldr	r3, [r3, #0]
 8027e76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8027e7a:	2b00      	cmp	r3, #0
 8027e7c:	d0f0      	beq.n	8027e60 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8027e7e:	69bb      	ldr	r3, [r7, #24]
 8027e80:	2b01      	cmp	r3, #1
 8027e82:	f040 80cd 	bne.w	8028020 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8027e86:	4b09      	ldr	r3, [pc, #36]	; (8027eac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027e88:	681b      	ldr	r3, [r3, #0]
 8027e8a:	4a08      	ldr	r2, [pc, #32]	; (8027eac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8027e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8027e90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8027e92:	f7fd fb05 	bl	80254a0 <HAL_GetTick>
 8027e96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8027e98:	e00a      	b.n	8027eb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8027e9a:	f7fd fb01 	bl	80254a0 <HAL_GetTick>
 8027e9e:	4602      	mov	r2, r0
 8027ea0:	697b      	ldr	r3, [r7, #20]
 8027ea2:	1ad3      	subs	r3, r2, r3
 8027ea4:	2b64      	cmp	r3, #100	; 0x64
 8027ea6:	d903      	bls.n	8027eb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027ea8:	2303      	movs	r3, #3
 8027eaa:	e0ba      	b.n	8028022 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8027eac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8027eb0:	4b5e      	ldr	r3, [pc, #376]	; (802802c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027eb2:	681b      	ldr	r3, [r3, #0]
 8027eb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8027eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8027ebc:	d0ed      	beq.n	8027e9a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8027ebe:	687b      	ldr	r3, [r7, #4]
 8027ec0:	681b      	ldr	r3, [r3, #0]
 8027ec2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8027ec6:	2b00      	cmp	r3, #0
 8027ec8:	d003      	beq.n	8027ed2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8027eca:	687b      	ldr	r3, [r7, #4]
 8027ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027ece:	2b00      	cmp	r3, #0
 8027ed0:	d009      	beq.n	8027ee6 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8027ed2:	687b      	ldr	r3, [r7, #4]
 8027ed4:	681b      	ldr	r3, [r3, #0]
 8027ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8027eda:	2b00      	cmp	r3, #0
 8027edc:	d02e      	beq.n	8027f3c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8027ede:	687b      	ldr	r3, [r7, #4]
 8027ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027ee2:	2b00      	cmp	r3, #0
 8027ee4:	d12a      	bne.n	8027f3c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8027ee6:	4b51      	ldr	r3, [pc, #324]	; (802802c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027eec:	0c1b      	lsrs	r3, r3, #16
 8027eee:	f003 0303 	and.w	r3, r3, #3
 8027ef2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8027ef4:	4b4d      	ldr	r3, [pc, #308]	; (802802c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027efa:	0f1b      	lsrs	r3, r3, #28
 8027efc:	f003 0307 	and.w	r3, r3, #7
 8027f00:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8027f02:	687b      	ldr	r3, [r7, #4]
 8027f04:	695b      	ldr	r3, [r3, #20]
 8027f06:	019a      	lsls	r2, r3, #6
 8027f08:	693b      	ldr	r3, [r7, #16]
 8027f0a:	041b      	lsls	r3, r3, #16
 8027f0c:	431a      	orrs	r2, r3
 8027f0e:	687b      	ldr	r3, [r7, #4]
 8027f10:	699b      	ldr	r3, [r3, #24]
 8027f12:	061b      	lsls	r3, r3, #24
 8027f14:	431a      	orrs	r2, r3
 8027f16:	68fb      	ldr	r3, [r7, #12]
 8027f18:	071b      	lsls	r3, r3, #28
 8027f1a:	4944      	ldr	r1, [pc, #272]	; (802802c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027f1c:	4313      	orrs	r3, r2
 8027f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8027f22:	4b42      	ldr	r3, [pc, #264]	; (802802c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027f28:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8027f2c:	687b      	ldr	r3, [r7, #4]
 8027f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027f30:	3b01      	subs	r3, #1
 8027f32:	021b      	lsls	r3, r3, #8
 8027f34:	493d      	ldr	r1, [pc, #244]	; (802802c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027f36:	4313      	orrs	r3, r2
 8027f38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8027f3c:	687b      	ldr	r3, [r7, #4]
 8027f3e:	681b      	ldr	r3, [r3, #0]
 8027f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8027f44:	2b00      	cmp	r3, #0
 8027f46:	d022      	beq.n	8027f8e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8027f48:	687b      	ldr	r3, [r7, #4]
 8027f4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8027f4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8027f50:	d11d      	bne.n	8027f8e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8027f52:	4b36      	ldr	r3, [pc, #216]	; (802802c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027f58:	0e1b      	lsrs	r3, r3, #24
 8027f5a:	f003 030f 	and.w	r3, r3, #15
 8027f5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8027f60:	4b32      	ldr	r3, [pc, #200]	; (802802c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027f66:	0f1b      	lsrs	r3, r3, #28
 8027f68:	f003 0307 	and.w	r3, r3, #7
 8027f6c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8027f6e:	687b      	ldr	r3, [r7, #4]
 8027f70:	695b      	ldr	r3, [r3, #20]
 8027f72:	019a      	lsls	r2, r3, #6
 8027f74:	687b      	ldr	r3, [r7, #4]
 8027f76:	6a1b      	ldr	r3, [r3, #32]
 8027f78:	041b      	lsls	r3, r3, #16
 8027f7a:	431a      	orrs	r2, r3
 8027f7c:	693b      	ldr	r3, [r7, #16]
 8027f7e:	061b      	lsls	r3, r3, #24
 8027f80:	431a      	orrs	r2, r3
 8027f82:	68fb      	ldr	r3, [r7, #12]
 8027f84:	071b      	lsls	r3, r3, #28
 8027f86:	4929      	ldr	r1, [pc, #164]	; (802802c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027f88:	4313      	orrs	r3, r2
 8027f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8027f8e:	687b      	ldr	r3, [r7, #4]
 8027f90:	681b      	ldr	r3, [r3, #0]
 8027f92:	f003 0308 	and.w	r3, r3, #8
 8027f96:	2b00      	cmp	r3, #0
 8027f98:	d028      	beq.n	8027fec <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8027f9a:	4b24      	ldr	r3, [pc, #144]	; (802802c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027fa0:	0e1b      	lsrs	r3, r3, #24
 8027fa2:	f003 030f 	and.w	r3, r3, #15
 8027fa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8027fa8:	4b20      	ldr	r3, [pc, #128]	; (802802c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027fae:	0c1b      	lsrs	r3, r3, #16
 8027fb0:	f003 0303 	and.w	r3, r3, #3
 8027fb4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8027fb6:	687b      	ldr	r3, [r7, #4]
 8027fb8:	695b      	ldr	r3, [r3, #20]
 8027fba:	019a      	lsls	r2, r3, #6
 8027fbc:	68fb      	ldr	r3, [r7, #12]
 8027fbe:	041b      	lsls	r3, r3, #16
 8027fc0:	431a      	orrs	r2, r3
 8027fc2:	693b      	ldr	r3, [r7, #16]
 8027fc4:	061b      	lsls	r3, r3, #24
 8027fc6:	431a      	orrs	r2, r3
 8027fc8:	687b      	ldr	r3, [r7, #4]
 8027fca:	69db      	ldr	r3, [r3, #28]
 8027fcc:	071b      	lsls	r3, r3, #28
 8027fce:	4917      	ldr	r1, [pc, #92]	; (802802c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027fd0:	4313      	orrs	r3, r2
 8027fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8027fd6:	4b15      	ldr	r3, [pc, #84]	; (802802c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027fdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8027fe0:	687b      	ldr	r3, [r7, #4]
 8027fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027fe4:	4911      	ldr	r1, [pc, #68]	; (802802c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027fe6:	4313      	orrs	r3, r2
 8027fe8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8027fec:	4b0f      	ldr	r3, [pc, #60]	; (802802c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027fee:	681b      	ldr	r3, [r3, #0]
 8027ff0:	4a0e      	ldr	r2, [pc, #56]	; (802802c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8027ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8027ff6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8027ff8:	f7fd fa52 	bl	80254a0 <HAL_GetTick>
 8027ffc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8027ffe:	e008      	b.n	8028012 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8028000:	f7fd fa4e 	bl	80254a0 <HAL_GetTick>
 8028004:	4602      	mov	r2, r0
 8028006:	697b      	ldr	r3, [r7, #20]
 8028008:	1ad3      	subs	r3, r2, r3
 802800a:	2b64      	cmp	r3, #100	; 0x64
 802800c:	d901      	bls.n	8028012 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 802800e:	2303      	movs	r3, #3
 8028010:	e007      	b.n	8028022 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8028012:	4b06      	ldr	r3, [pc, #24]	; (802802c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8028014:	681b      	ldr	r3, [r3, #0]
 8028016:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802801a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802801e:	d1ef      	bne.n	8028000 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8028020:	2300      	movs	r3, #0
}
 8028022:	4618      	mov	r0, r3
 8028024:	3720      	adds	r7, #32
 8028026:	46bd      	mov	sp, r7
 8028028:	bd80      	pop	{r7, pc}
 802802a:	bf00      	nop
 802802c:	40023800 	.word	0x40023800

08028030 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8028030:	b580      	push	{r7, lr}
 8028032:	b082      	sub	sp, #8
 8028034:	af00      	add	r7, sp, #0
 8028036:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8028038:	687b      	ldr	r3, [r7, #4]
 802803a:	2b00      	cmp	r3, #0
 802803c:	d101      	bne.n	8028042 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 802803e:	2301      	movs	r3, #1
 8028040:	e022      	b.n	8028088 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8028042:	687b      	ldr	r3, [r7, #4]
 8028044:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8028048:	b2db      	uxtb	r3, r3
 802804a:	2b00      	cmp	r3, #0
 802804c:	d105      	bne.n	802805a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 802804e:	687b      	ldr	r3, [r7, #4]
 8028050:	2200      	movs	r2, #0
 8028052:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8028054:	6878      	ldr	r0, [r7, #4]
 8028056:	f7d9 f999 	bl	800138c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 802805a:	687b      	ldr	r3, [r7, #4]
 802805c:	2203      	movs	r2, #3
 802805e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8028062:	6878      	ldr	r0, [r7, #4]
 8028064:	f000 f814 	bl	8028090 <HAL_SD_InitCard>
 8028068:	4603      	mov	r3, r0
 802806a:	2b00      	cmp	r3, #0
 802806c:	d001      	beq.n	8028072 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 802806e:	2301      	movs	r3, #1
 8028070:	e00a      	b.n	8028088 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8028072:	687b      	ldr	r3, [r7, #4]
 8028074:	2200      	movs	r2, #0
 8028076:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8028078:	687b      	ldr	r3, [r7, #4]
 802807a:	2200      	movs	r2, #0
 802807c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 802807e:	687b      	ldr	r3, [r7, #4]
 8028080:	2201      	movs	r2, #1
 8028082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8028086:	2300      	movs	r3, #0
}
 8028088:	4618      	mov	r0, r3
 802808a:	3708      	adds	r7, #8
 802808c:	46bd      	mov	sp, r7
 802808e:	bd80      	pop	{r7, pc}

08028090 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8028090:	b5b0      	push	{r4, r5, r7, lr}
 8028092:	b08e      	sub	sp, #56	; 0x38
 8028094:	af04      	add	r7, sp, #16
 8028096:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8028098:	2300      	movs	r3, #0
 802809a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 802809c:	2300      	movs	r3, #0
 802809e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80280a0:	2300      	movs	r3, #0
 80280a2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80280a4:	2300      	movs	r3, #0
 80280a6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80280a8:	2300      	movs	r3, #0
 80280aa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80280ac:	2376      	movs	r3, #118	; 0x76
 80280ae:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80280b0:	687b      	ldr	r3, [r7, #4]
 80280b2:	681d      	ldr	r5, [r3, #0]
 80280b4:	466c      	mov	r4, sp
 80280b6:	f107 0314 	add.w	r3, r7, #20
 80280ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80280be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80280c2:	f107 0308 	add.w	r3, r7, #8
 80280c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80280c8:	4628      	mov	r0, r5
 80280ca:	f001 fd3b 	bl	8029b44 <SDMMC_Init>
 80280ce:	4603      	mov	r3, r0
 80280d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80280d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80280d8:	2b00      	cmp	r3, #0
 80280da:	d001      	beq.n	80280e0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80280dc:	2301      	movs	r3, #1
 80280de:	e03b      	b.n	8028158 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80280e0:	687b      	ldr	r3, [r7, #4]
 80280e2:	681b      	ldr	r3, [r3, #0]
 80280e4:	685a      	ldr	r2, [r3, #4]
 80280e6:	687b      	ldr	r3, [r7, #4]
 80280e8:	681b      	ldr	r3, [r3, #0]
 80280ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80280ee:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80280f0:	687b      	ldr	r3, [r7, #4]
 80280f2:	681b      	ldr	r3, [r3, #0]
 80280f4:	4618      	mov	r0, r3
 80280f6:	f001 fd6f 	bl	8029bd8 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80280fa:	687b      	ldr	r3, [r7, #4]
 80280fc:	681b      	ldr	r3, [r3, #0]
 80280fe:	685a      	ldr	r2, [r3, #4]
 8028100:	687b      	ldr	r3, [r7, #4]
 8028102:	681b      	ldr	r3, [r3, #0]
 8028104:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8028108:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 802810a:	6878      	ldr	r0, [r7, #4]
 802810c:	f000 fefa 	bl	8028f04 <SD_PowerON>
 8028110:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8028112:	6a3b      	ldr	r3, [r7, #32]
 8028114:	2b00      	cmp	r3, #0
 8028116:	d00b      	beq.n	8028130 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8028118:	687b      	ldr	r3, [r7, #4]
 802811a:	2201      	movs	r2, #1
 802811c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8028120:	687b      	ldr	r3, [r7, #4]
 8028122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028124:	6a3b      	ldr	r3, [r7, #32]
 8028126:	431a      	orrs	r2, r3
 8028128:	687b      	ldr	r3, [r7, #4]
 802812a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 802812c:	2301      	movs	r3, #1
 802812e:	e013      	b.n	8028158 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8028130:	6878      	ldr	r0, [r7, #4]
 8028132:	f000 fe19 	bl	8028d68 <SD_InitCard>
 8028136:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8028138:	6a3b      	ldr	r3, [r7, #32]
 802813a:	2b00      	cmp	r3, #0
 802813c:	d00b      	beq.n	8028156 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 802813e:	687b      	ldr	r3, [r7, #4]
 8028140:	2201      	movs	r2, #1
 8028142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8028146:	687b      	ldr	r3, [r7, #4]
 8028148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802814a:	6a3b      	ldr	r3, [r7, #32]
 802814c:	431a      	orrs	r2, r3
 802814e:	687b      	ldr	r3, [r7, #4]
 8028150:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8028152:	2301      	movs	r3, #1
 8028154:	e000      	b.n	8028158 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8028156:	2300      	movs	r3, #0
}
 8028158:	4618      	mov	r0, r3
 802815a:	3728      	adds	r7, #40	; 0x28
 802815c:	46bd      	mov	sp, r7
 802815e:	bdb0      	pop	{r4, r5, r7, pc}

08028160 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8028160:	b580      	push	{r7, lr}
 8028162:	b092      	sub	sp, #72	; 0x48
 8028164:	af00      	add	r7, sp, #0
 8028166:	60f8      	str	r0, [r7, #12]
 8028168:	60b9      	str	r1, [r7, #8]
 802816a:	607a      	str	r2, [r7, #4]
 802816c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 802816e:	f7fd f997 	bl	80254a0 <HAL_GetTick>
 8028172:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8028174:	687b      	ldr	r3, [r7, #4]
 8028176:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8028178:	68bb      	ldr	r3, [r7, #8]
 802817a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 802817c:	68bb      	ldr	r3, [r7, #8]
 802817e:	2b00      	cmp	r3, #0
 8028180:	d107      	bne.n	8028192 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8028182:	68fb      	ldr	r3, [r7, #12]
 8028184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028186:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 802818a:	68fb      	ldr	r3, [r7, #12]
 802818c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 802818e:	2301      	movs	r3, #1
 8028190:	e1d7      	b.n	8028542 <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8028192:	68fb      	ldr	r3, [r7, #12]
 8028194:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8028198:	b2db      	uxtb	r3, r3
 802819a:	2b01      	cmp	r3, #1
 802819c:	f040 81ca 	bne.w	8028534 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80281a0:	68fb      	ldr	r3, [r7, #12]
 80281a2:	2200      	movs	r2, #0
 80281a4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80281a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80281a8:	683b      	ldr	r3, [r7, #0]
 80281aa:	441a      	add	r2, r3
 80281ac:	68fb      	ldr	r3, [r7, #12]
 80281ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80281b0:	429a      	cmp	r2, r3
 80281b2:	d907      	bls.n	80281c4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80281b4:	68fb      	ldr	r3, [r7, #12]
 80281b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80281b8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80281bc:	68fb      	ldr	r3, [r7, #12]
 80281be:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80281c0:	2301      	movs	r3, #1
 80281c2:	e1be      	b.n	8028542 <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80281c4:	68fb      	ldr	r3, [r7, #12]
 80281c6:	2203      	movs	r2, #3
 80281c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80281cc:	68fb      	ldr	r3, [r7, #12]
 80281ce:	681b      	ldr	r3, [r3, #0]
 80281d0:	2200      	movs	r2, #0
 80281d2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80281d4:	68fb      	ldr	r3, [r7, #12]
 80281d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80281d8:	2b01      	cmp	r3, #1
 80281da:	d002      	beq.n	80281e2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80281dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80281de:	025b      	lsls	r3, r3, #9
 80281e0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80281e2:	68fb      	ldr	r3, [r7, #12]
 80281e4:	681b      	ldr	r3, [r3, #0]
 80281e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80281ea:	4618      	mov	r0, r3
 80281ec:	f001 fd88 	bl	8029d00 <SDMMC_CmdBlockLength>
 80281f0:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80281f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80281f4:	2b00      	cmp	r3, #0
 80281f6:	d00f      	beq.n	8028218 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80281f8:	68fb      	ldr	r3, [r7, #12]
 80281fa:	681b      	ldr	r3, [r3, #0]
 80281fc:	4a9a      	ldr	r2, [pc, #616]	; (8028468 <HAL_SD_ReadBlocks+0x308>)
 80281fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8028200:	68fb      	ldr	r3, [r7, #12]
 8028202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028206:	431a      	orrs	r2, r3
 8028208:	68fb      	ldr	r3, [r7, #12]
 802820a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 802820c:	68fb      	ldr	r3, [r7, #12]
 802820e:	2201      	movs	r2, #1
 8028210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8028214:	2301      	movs	r3, #1
 8028216:	e194      	b.n	8028542 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8028218:	f04f 33ff 	mov.w	r3, #4294967295
 802821c:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 802821e:	683b      	ldr	r3, [r7, #0]
 8028220:	025b      	lsls	r3, r3, #9
 8028222:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8028224:	2390      	movs	r3, #144	; 0x90
 8028226:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8028228:	2302      	movs	r3, #2
 802822a:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 802822c:	2300      	movs	r3, #0
 802822e:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8028230:	2301      	movs	r3, #1
 8028232:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8028234:	68fb      	ldr	r3, [r7, #12]
 8028236:	681b      	ldr	r3, [r3, #0]
 8028238:	f107 0214 	add.w	r2, r7, #20
 802823c:	4611      	mov	r1, r2
 802823e:	4618      	mov	r0, r3
 8028240:	f001 fd32 	bl	8029ca8 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8028244:	683b      	ldr	r3, [r7, #0]
 8028246:	2b01      	cmp	r3, #1
 8028248:	d90a      	bls.n	8028260 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 802824a:	68fb      	ldr	r3, [r7, #12]
 802824c:	2202      	movs	r2, #2
 802824e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8028250:	68fb      	ldr	r3, [r7, #12]
 8028252:	681b      	ldr	r3, [r3, #0]
 8028254:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8028256:	4618      	mov	r0, r3
 8028258:	f001 fd96 	bl	8029d88 <SDMMC_CmdReadMultiBlock>
 802825c:	6478      	str	r0, [r7, #68]	; 0x44
 802825e:	e009      	b.n	8028274 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8028260:	68fb      	ldr	r3, [r7, #12]
 8028262:	2201      	movs	r2, #1
 8028264:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8028266:	68fb      	ldr	r3, [r7, #12]
 8028268:	681b      	ldr	r3, [r3, #0]
 802826a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 802826c:	4618      	mov	r0, r3
 802826e:	f001 fd69 	bl	8029d44 <SDMMC_CmdReadSingleBlock>
 8028272:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8028274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028276:	2b00      	cmp	r3, #0
 8028278:	d012      	beq.n	80282a0 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 802827a:	68fb      	ldr	r3, [r7, #12]
 802827c:	681b      	ldr	r3, [r3, #0]
 802827e:	4a7a      	ldr	r2, [pc, #488]	; (8028468 <HAL_SD_ReadBlocks+0x308>)
 8028280:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8028282:	68fb      	ldr	r3, [r7, #12]
 8028284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028288:	431a      	orrs	r2, r3
 802828a:	68fb      	ldr	r3, [r7, #12]
 802828c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 802828e:	68fb      	ldr	r3, [r7, #12]
 8028290:	2201      	movs	r2, #1
 8028292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8028296:	68fb      	ldr	r3, [r7, #12]
 8028298:	2200      	movs	r2, #0
 802829a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 802829c:	2301      	movs	r3, #1
 802829e:	e150      	b.n	8028542 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80282a0:	69bb      	ldr	r3, [r7, #24]
 80282a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80282a4:	e061      	b.n	802836a <HAL_SD_ReadBlocks+0x20a>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80282a6:	68fb      	ldr	r3, [r7, #12]
 80282a8:	681b      	ldr	r3, [r3, #0]
 80282aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80282ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80282b0:	2b00      	cmp	r3, #0
 80282b2:	d03c      	beq.n	802832e <HAL_SD_ReadBlocks+0x1ce>
 80282b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80282b6:	2b00      	cmp	r3, #0
 80282b8:	d039      	beq.n	802832e <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80282ba:	2300      	movs	r3, #0
 80282bc:	643b      	str	r3, [r7, #64]	; 0x40
 80282be:	e033      	b.n	8028328 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80282c0:	68fb      	ldr	r3, [r7, #12]
 80282c2:	681b      	ldr	r3, [r3, #0]
 80282c4:	4618      	mov	r0, r3
 80282c6:	f001 fc69 	bl	8029b9c <SDMMC_ReadFIFO>
 80282ca:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80282cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80282ce:	b2da      	uxtb	r2, r3
 80282d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80282d2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80282d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80282d6:	3301      	adds	r3, #1
 80282d8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80282da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80282dc:	3b01      	subs	r3, #1
 80282de:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80282e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80282e2:	0a1b      	lsrs	r3, r3, #8
 80282e4:	b2da      	uxtb	r2, r3
 80282e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80282e8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80282ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80282ec:	3301      	adds	r3, #1
 80282ee:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80282f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80282f2:	3b01      	subs	r3, #1
 80282f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80282f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80282f8:	0c1b      	lsrs	r3, r3, #16
 80282fa:	b2da      	uxtb	r2, r3
 80282fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80282fe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8028300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028302:	3301      	adds	r3, #1
 8028304:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8028306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028308:	3b01      	subs	r3, #1
 802830a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 802830c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802830e:	0e1b      	lsrs	r3, r3, #24
 8028310:	b2da      	uxtb	r2, r3
 8028312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028314:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8028316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028318:	3301      	adds	r3, #1
 802831a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 802831c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802831e:	3b01      	subs	r3, #1
 8028320:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8028322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8028324:	3301      	adds	r3, #1
 8028326:	643b      	str	r3, [r7, #64]	; 0x40
 8028328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802832a:	2b07      	cmp	r3, #7
 802832c:	d9c8      	bls.n	80282c0 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 802832e:	f7fd f8b7 	bl	80254a0 <HAL_GetTick>
 8028332:	4602      	mov	r2, r0
 8028334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028336:	1ad3      	subs	r3, r2, r3
 8028338:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802833a:	429a      	cmp	r2, r3
 802833c:	d902      	bls.n	8028344 <HAL_SD_ReadBlocks+0x1e4>
 802833e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8028340:	2b00      	cmp	r3, #0
 8028342:	d112      	bne.n	802836a <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8028344:	68fb      	ldr	r3, [r7, #12]
 8028346:	681b      	ldr	r3, [r3, #0]
 8028348:	4a47      	ldr	r2, [pc, #284]	; (8028468 <HAL_SD_ReadBlocks+0x308>)
 802834a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 802834c:	68fb      	ldr	r3, [r7, #12]
 802834e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028350:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8028354:	68fb      	ldr	r3, [r7, #12]
 8028356:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8028358:	68fb      	ldr	r3, [r7, #12]
 802835a:	2201      	movs	r2, #1
 802835c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8028360:	68fb      	ldr	r3, [r7, #12]
 8028362:	2200      	movs	r2, #0
 8028364:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8028366:	2303      	movs	r3, #3
 8028368:	e0eb      	b.n	8028542 <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 802836a:	68fb      	ldr	r3, [r7, #12]
 802836c:	681b      	ldr	r3, [r3, #0]
 802836e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028370:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8028374:	2b00      	cmp	r3, #0
 8028376:	d096      	beq.n	80282a6 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8028378:	68fb      	ldr	r3, [r7, #12]
 802837a:	681b      	ldr	r3, [r3, #0]
 802837c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802837e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028382:	2b00      	cmp	r3, #0
 8028384:	d022      	beq.n	80283cc <HAL_SD_ReadBlocks+0x26c>
 8028386:	683b      	ldr	r3, [r7, #0]
 8028388:	2b01      	cmp	r3, #1
 802838a:	d91f      	bls.n	80283cc <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 802838c:	68fb      	ldr	r3, [r7, #12]
 802838e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028390:	2b03      	cmp	r3, #3
 8028392:	d01b      	beq.n	80283cc <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8028394:	68fb      	ldr	r3, [r7, #12]
 8028396:	681b      	ldr	r3, [r3, #0]
 8028398:	4618      	mov	r0, r3
 802839a:	f001 fd5b 	bl	8029e54 <SDMMC_CmdStopTransfer>
 802839e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80283a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80283a2:	2b00      	cmp	r3, #0
 80283a4:	d012      	beq.n	80283cc <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80283a6:	68fb      	ldr	r3, [r7, #12]
 80283a8:	681b      	ldr	r3, [r3, #0]
 80283aa:	4a2f      	ldr	r2, [pc, #188]	; (8028468 <HAL_SD_ReadBlocks+0x308>)
 80283ac:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80283ae:	68fb      	ldr	r3, [r7, #12]
 80283b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80283b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80283b4:	431a      	orrs	r2, r3
 80283b6:	68fb      	ldr	r3, [r7, #12]
 80283b8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80283ba:	68fb      	ldr	r3, [r7, #12]
 80283bc:	2201      	movs	r2, #1
 80283be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80283c2:	68fb      	ldr	r3, [r7, #12]
 80283c4:	2200      	movs	r2, #0
 80283c6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80283c8:	2301      	movs	r3, #1
 80283ca:	e0ba      	b.n	8028542 <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80283cc:	68fb      	ldr	r3, [r7, #12]
 80283ce:	681b      	ldr	r3, [r3, #0]
 80283d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80283d2:	f003 0308 	and.w	r3, r3, #8
 80283d6:	2b00      	cmp	r3, #0
 80283d8:	d012      	beq.n	8028400 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80283da:	68fb      	ldr	r3, [r7, #12]
 80283dc:	681b      	ldr	r3, [r3, #0]
 80283de:	4a22      	ldr	r2, [pc, #136]	; (8028468 <HAL_SD_ReadBlocks+0x308>)
 80283e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80283e2:	68fb      	ldr	r3, [r7, #12]
 80283e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80283e6:	f043 0208 	orr.w	r2, r3, #8
 80283ea:	68fb      	ldr	r3, [r7, #12]
 80283ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80283ee:	68fb      	ldr	r3, [r7, #12]
 80283f0:	2201      	movs	r2, #1
 80283f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80283f6:	68fb      	ldr	r3, [r7, #12]
 80283f8:	2200      	movs	r2, #0
 80283fa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80283fc:	2301      	movs	r3, #1
 80283fe:	e0a0      	b.n	8028542 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8028400:	68fb      	ldr	r3, [r7, #12]
 8028402:	681b      	ldr	r3, [r3, #0]
 8028404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028406:	f003 0302 	and.w	r3, r3, #2
 802840a:	2b00      	cmp	r3, #0
 802840c:	d012      	beq.n	8028434 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 802840e:	68fb      	ldr	r3, [r7, #12]
 8028410:	681b      	ldr	r3, [r3, #0]
 8028412:	4a15      	ldr	r2, [pc, #84]	; (8028468 <HAL_SD_ReadBlocks+0x308>)
 8028414:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8028416:	68fb      	ldr	r3, [r7, #12]
 8028418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802841a:	f043 0202 	orr.w	r2, r3, #2
 802841e:	68fb      	ldr	r3, [r7, #12]
 8028420:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8028422:	68fb      	ldr	r3, [r7, #12]
 8028424:	2201      	movs	r2, #1
 8028426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 802842a:	68fb      	ldr	r3, [r7, #12]
 802842c:	2200      	movs	r2, #0
 802842e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8028430:	2301      	movs	r3, #1
 8028432:	e086      	b.n	8028542 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8028434:	68fb      	ldr	r3, [r7, #12]
 8028436:	681b      	ldr	r3, [r3, #0]
 8028438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802843a:	f003 0320 	and.w	r3, r3, #32
 802843e:	2b00      	cmp	r3, #0
 8028440:	d063      	beq.n	802850a <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8028442:	68fb      	ldr	r3, [r7, #12]
 8028444:	681b      	ldr	r3, [r3, #0]
 8028446:	4a08      	ldr	r2, [pc, #32]	; (8028468 <HAL_SD_ReadBlocks+0x308>)
 8028448:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 802844a:	68fb      	ldr	r3, [r7, #12]
 802844c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802844e:	f043 0220 	orr.w	r2, r3, #32
 8028452:	68fb      	ldr	r3, [r7, #12]
 8028454:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8028456:	68fb      	ldr	r3, [r7, #12]
 8028458:	2201      	movs	r2, #1
 802845a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 802845e:	68fb      	ldr	r3, [r7, #12]
 8028460:	2200      	movs	r2, #0
 8028462:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8028464:	2301      	movs	r3, #1
 8028466:	e06c      	b.n	8028542 <HAL_SD_ReadBlocks+0x3e2>
 8028468:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 802846c:	68fb      	ldr	r3, [r7, #12]
 802846e:	681b      	ldr	r3, [r3, #0]
 8028470:	4618      	mov	r0, r3
 8028472:	f001 fb93 	bl	8029b9c <SDMMC_ReadFIFO>
 8028476:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8028478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802847a:	b2da      	uxtb	r2, r3
 802847c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802847e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8028480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028482:	3301      	adds	r3, #1
 8028484:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8028486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028488:	3b01      	subs	r3, #1
 802848a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 802848c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802848e:	0a1b      	lsrs	r3, r3, #8
 8028490:	b2da      	uxtb	r2, r3
 8028492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028494:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8028496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028498:	3301      	adds	r3, #1
 802849a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 802849c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802849e:	3b01      	subs	r3, #1
 80284a0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80284a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80284a4:	0c1b      	lsrs	r3, r3, #16
 80284a6:	b2da      	uxtb	r2, r3
 80284a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80284aa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80284ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80284ae:	3301      	adds	r3, #1
 80284b0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80284b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80284b4:	3b01      	subs	r3, #1
 80284b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80284b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80284ba:	0e1b      	lsrs	r3, r3, #24
 80284bc:	b2da      	uxtb	r2, r3
 80284be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80284c0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80284c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80284c4:	3301      	adds	r3, #1
 80284c6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80284c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80284ca:	3b01      	subs	r3, #1
 80284cc:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80284ce:	f7fc ffe7 	bl	80254a0 <HAL_GetTick>
 80284d2:	4602      	mov	r2, r0
 80284d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80284d6:	1ad3      	subs	r3, r2, r3
 80284d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80284da:	429a      	cmp	r2, r3
 80284dc:	d902      	bls.n	80284e4 <HAL_SD_ReadBlocks+0x384>
 80284de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80284e0:	2b00      	cmp	r3, #0
 80284e2:	d112      	bne.n	802850a <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80284e4:	68fb      	ldr	r3, [r7, #12]
 80284e6:	681b      	ldr	r3, [r3, #0]
 80284e8:	4a18      	ldr	r2, [pc, #96]	; (802854c <HAL_SD_ReadBlocks+0x3ec>)
 80284ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80284ec:	68fb      	ldr	r3, [r7, #12]
 80284ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80284f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80284f4:	68fb      	ldr	r3, [r7, #12]
 80284f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80284f8:	68fb      	ldr	r3, [r7, #12]
 80284fa:	2201      	movs	r2, #1
 80284fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8028500:	68fb      	ldr	r3, [r7, #12]
 8028502:	2200      	movs	r2, #0
 8028504:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8028506:	2301      	movs	r3, #1
 8028508:	e01b      	b.n	8028542 <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 802850a:	68fb      	ldr	r3, [r7, #12]
 802850c:	681b      	ldr	r3, [r3, #0]
 802850e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8028514:	2b00      	cmp	r3, #0
 8028516:	d002      	beq.n	802851e <HAL_SD_ReadBlocks+0x3be>
 8028518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802851a:	2b00      	cmp	r3, #0
 802851c:	d1a6      	bne.n	802846c <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 802851e:	68fb      	ldr	r3, [r7, #12]
 8028520:	681b      	ldr	r3, [r3, #0]
 8028522:	f240 523a 	movw	r2, #1338	; 0x53a
 8028526:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8028528:	68fb      	ldr	r3, [r7, #12]
 802852a:	2201      	movs	r2, #1
 802852c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8028530:	2300      	movs	r3, #0
 8028532:	e006      	b.n	8028542 <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8028534:	68fb      	ldr	r3, [r7, #12]
 8028536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028538:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 802853c:	68fb      	ldr	r3, [r7, #12]
 802853e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8028540:	2301      	movs	r3, #1
  }
}
 8028542:	4618      	mov	r0, r3
 8028544:	3748      	adds	r7, #72	; 0x48
 8028546:	46bd      	mov	sp, r7
 8028548:	bd80      	pop	{r7, pc}
 802854a:	bf00      	nop
 802854c:	004005ff 	.word	0x004005ff

08028550 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8028550:	b580      	push	{r7, lr}
 8028552:	b092      	sub	sp, #72	; 0x48
 8028554:	af00      	add	r7, sp, #0
 8028556:	60f8      	str	r0, [r7, #12]
 8028558:	60b9      	str	r1, [r7, #8]
 802855a:	607a      	str	r2, [r7, #4]
 802855c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 802855e:	f7fc ff9f 	bl	80254a0 <HAL_GetTick>
 8028562:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8028564:	687b      	ldr	r3, [r7, #4]
 8028566:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8028568:	68bb      	ldr	r3, [r7, #8]
 802856a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 802856c:	68bb      	ldr	r3, [r7, #8]
 802856e:	2b00      	cmp	r3, #0
 8028570:	d107      	bne.n	8028582 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8028572:	68fb      	ldr	r3, [r7, #12]
 8028574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028576:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 802857a:	68fb      	ldr	r3, [r7, #12]
 802857c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 802857e:	2301      	movs	r3, #1
 8028580:	e182      	b.n	8028888 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8028582:	68fb      	ldr	r3, [r7, #12]
 8028584:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8028588:	b2db      	uxtb	r3, r3
 802858a:	2b01      	cmp	r3, #1
 802858c:	f040 8175 	bne.w	802887a <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8028590:	68fb      	ldr	r3, [r7, #12]
 8028592:	2200      	movs	r2, #0
 8028594:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8028596:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8028598:	683b      	ldr	r3, [r7, #0]
 802859a:	441a      	add	r2, r3
 802859c:	68fb      	ldr	r3, [r7, #12]
 802859e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80285a0:	429a      	cmp	r2, r3
 80285a2:	d907      	bls.n	80285b4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80285a4:	68fb      	ldr	r3, [r7, #12]
 80285a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80285a8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80285ac:	68fb      	ldr	r3, [r7, #12]
 80285ae:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80285b0:	2301      	movs	r3, #1
 80285b2:	e169      	b.n	8028888 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80285b4:	68fb      	ldr	r3, [r7, #12]
 80285b6:	2203      	movs	r2, #3
 80285b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80285bc:	68fb      	ldr	r3, [r7, #12]
 80285be:	681b      	ldr	r3, [r3, #0]
 80285c0:	2200      	movs	r2, #0
 80285c2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80285c4:	68fb      	ldr	r3, [r7, #12]
 80285c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80285c8:	2b01      	cmp	r3, #1
 80285ca:	d002      	beq.n	80285d2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80285cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80285ce:	025b      	lsls	r3, r3, #9
 80285d0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80285d2:	68fb      	ldr	r3, [r7, #12]
 80285d4:	681b      	ldr	r3, [r3, #0]
 80285d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80285da:	4618      	mov	r0, r3
 80285dc:	f001 fb90 	bl	8029d00 <SDMMC_CmdBlockLength>
 80285e0:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80285e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80285e4:	2b00      	cmp	r3, #0
 80285e6:	d00f      	beq.n	8028608 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80285e8:	68fb      	ldr	r3, [r7, #12]
 80285ea:	681b      	ldr	r3, [r3, #0]
 80285ec:	4a9c      	ldr	r2, [pc, #624]	; (8028860 <HAL_SD_WriteBlocks+0x310>)
 80285ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80285f0:	68fb      	ldr	r3, [r7, #12]
 80285f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80285f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80285f6:	431a      	orrs	r2, r3
 80285f8:	68fb      	ldr	r3, [r7, #12]
 80285fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80285fc:	68fb      	ldr	r3, [r7, #12]
 80285fe:	2201      	movs	r2, #1
 8028600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8028604:	2301      	movs	r3, #1
 8028606:	e13f      	b.n	8028888 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8028608:	f04f 33ff 	mov.w	r3, #4294967295
 802860c:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 802860e:	683b      	ldr	r3, [r7, #0]
 8028610:	025b      	lsls	r3, r3, #9
 8028612:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8028614:	2390      	movs	r3, #144	; 0x90
 8028616:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8028618:	2300      	movs	r3, #0
 802861a:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 802861c:	2300      	movs	r3, #0
 802861e:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8028620:	2301      	movs	r3, #1
 8028622:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8028624:	68fb      	ldr	r3, [r7, #12]
 8028626:	681b      	ldr	r3, [r3, #0]
 8028628:	f107 0218 	add.w	r2, r7, #24
 802862c:	4611      	mov	r1, r2
 802862e:	4618      	mov	r0, r3
 8028630:	f001 fb3a 	bl	8029ca8 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8028634:	683b      	ldr	r3, [r7, #0]
 8028636:	2b01      	cmp	r3, #1
 8028638:	d90a      	bls.n	8028650 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 802863a:	68fb      	ldr	r3, [r7, #12]
 802863c:	2220      	movs	r2, #32
 802863e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8028640:	68fb      	ldr	r3, [r7, #12]
 8028642:	681b      	ldr	r3, [r3, #0]
 8028644:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8028646:	4618      	mov	r0, r3
 8028648:	f001 fbe2 	bl	8029e10 <SDMMC_CmdWriteMultiBlock>
 802864c:	6478      	str	r0, [r7, #68]	; 0x44
 802864e:	e009      	b.n	8028664 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8028650:	68fb      	ldr	r3, [r7, #12]
 8028652:	2210      	movs	r2, #16
 8028654:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8028656:	68fb      	ldr	r3, [r7, #12]
 8028658:	681b      	ldr	r3, [r3, #0]
 802865a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 802865c:	4618      	mov	r0, r3
 802865e:	f001 fbb5 	bl	8029dcc <SDMMC_CmdWriteSingleBlock>
 8028662:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8028664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028666:	2b00      	cmp	r3, #0
 8028668:	d012      	beq.n	8028690 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 802866a:	68fb      	ldr	r3, [r7, #12]
 802866c:	681b      	ldr	r3, [r3, #0]
 802866e:	4a7c      	ldr	r2, [pc, #496]	; (8028860 <HAL_SD_WriteBlocks+0x310>)
 8028670:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8028672:	68fb      	ldr	r3, [r7, #12]
 8028674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028678:	431a      	orrs	r2, r3
 802867a:	68fb      	ldr	r3, [r7, #12]
 802867c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 802867e:	68fb      	ldr	r3, [r7, #12]
 8028680:	2201      	movs	r2, #1
 8028682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8028686:	68fb      	ldr	r3, [r7, #12]
 8028688:	2200      	movs	r2, #0
 802868a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 802868c:	2301      	movs	r3, #1
 802868e:	e0fb      	b.n	8028888 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8028690:	69fb      	ldr	r3, [r7, #28]
 8028692:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8028694:	e065      	b.n	8028762 <HAL_SD_WriteBlocks+0x212>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8028696:	68fb      	ldr	r3, [r7, #12]
 8028698:	681b      	ldr	r3, [r3, #0]
 802869a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802869c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80286a0:	2b00      	cmp	r3, #0
 80286a2:	d040      	beq.n	8028726 <HAL_SD_WriteBlocks+0x1d6>
 80286a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80286a6:	2b00      	cmp	r3, #0
 80286a8:	d03d      	beq.n	8028726 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80286aa:	2300      	movs	r3, #0
 80286ac:	643b      	str	r3, [r7, #64]	; 0x40
 80286ae:	e037      	b.n	8028720 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 80286b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80286b2:	781b      	ldrb	r3, [r3, #0]
 80286b4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80286b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80286b8:	3301      	adds	r3, #1
 80286ba:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80286bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80286be:	3b01      	subs	r3, #1
 80286c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80286c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80286c4:	781b      	ldrb	r3, [r3, #0]
 80286c6:	021a      	lsls	r2, r3, #8
 80286c8:	697b      	ldr	r3, [r7, #20]
 80286ca:	4313      	orrs	r3, r2
 80286cc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80286ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80286d0:	3301      	adds	r3, #1
 80286d2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80286d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80286d6:	3b01      	subs	r3, #1
 80286d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80286da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80286dc:	781b      	ldrb	r3, [r3, #0]
 80286de:	041a      	lsls	r2, r3, #16
 80286e0:	697b      	ldr	r3, [r7, #20]
 80286e2:	4313      	orrs	r3, r2
 80286e4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80286e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80286e8:	3301      	adds	r3, #1
 80286ea:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80286ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80286ee:	3b01      	subs	r3, #1
 80286f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80286f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80286f4:	781b      	ldrb	r3, [r3, #0]
 80286f6:	061a      	lsls	r2, r3, #24
 80286f8:	697b      	ldr	r3, [r7, #20]
 80286fa:	4313      	orrs	r3, r2
 80286fc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80286fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028700:	3301      	adds	r3, #1
 8028702:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8028704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028706:	3b01      	subs	r3, #1
 8028708:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 802870a:	68fb      	ldr	r3, [r7, #12]
 802870c:	681b      	ldr	r3, [r3, #0]
 802870e:	f107 0214 	add.w	r2, r7, #20
 8028712:	4611      	mov	r1, r2
 8028714:	4618      	mov	r0, r3
 8028716:	f001 fa4e 	bl	8029bb6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 802871a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802871c:	3301      	adds	r3, #1
 802871e:	643b      	str	r3, [r7, #64]	; 0x40
 8028720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8028722:	2b07      	cmp	r3, #7
 8028724:	d9c4      	bls.n	80286b0 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8028726:	f7fc febb 	bl	80254a0 <HAL_GetTick>
 802872a:	4602      	mov	r2, r0
 802872c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802872e:	1ad3      	subs	r3, r2, r3
 8028730:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8028732:	429a      	cmp	r2, r3
 8028734:	d902      	bls.n	802873c <HAL_SD_WriteBlocks+0x1ec>
 8028736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8028738:	2b00      	cmp	r3, #0
 802873a:	d112      	bne.n	8028762 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 802873c:	68fb      	ldr	r3, [r7, #12]
 802873e:	681b      	ldr	r3, [r3, #0]
 8028740:	4a47      	ldr	r2, [pc, #284]	; (8028860 <HAL_SD_WriteBlocks+0x310>)
 8028742:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8028744:	68fb      	ldr	r3, [r7, #12]
 8028746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802874a:	431a      	orrs	r2, r3
 802874c:	68fb      	ldr	r3, [r7, #12]
 802874e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8028750:	68fb      	ldr	r3, [r7, #12]
 8028752:	2201      	movs	r2, #1
 8028754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8028758:	68fb      	ldr	r3, [r7, #12]
 802875a:	2200      	movs	r2, #0
 802875c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 802875e:	2303      	movs	r3, #3
 8028760:	e092      	b.n	8028888 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8028762:	68fb      	ldr	r3, [r7, #12]
 8028764:	681b      	ldr	r3, [r3, #0]
 8028766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028768:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 802876c:	2b00      	cmp	r3, #0
 802876e:	d092      	beq.n	8028696 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8028770:	68fb      	ldr	r3, [r7, #12]
 8028772:	681b      	ldr	r3, [r3, #0]
 8028774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802877a:	2b00      	cmp	r3, #0
 802877c:	d022      	beq.n	80287c4 <HAL_SD_WriteBlocks+0x274>
 802877e:	683b      	ldr	r3, [r7, #0]
 8028780:	2b01      	cmp	r3, #1
 8028782:	d91f      	bls.n	80287c4 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8028784:	68fb      	ldr	r3, [r7, #12]
 8028786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028788:	2b03      	cmp	r3, #3
 802878a:	d01b      	beq.n	80287c4 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 802878c:	68fb      	ldr	r3, [r7, #12]
 802878e:	681b      	ldr	r3, [r3, #0]
 8028790:	4618      	mov	r0, r3
 8028792:	f001 fb5f 	bl	8029e54 <SDMMC_CmdStopTransfer>
 8028796:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8028798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802879a:	2b00      	cmp	r3, #0
 802879c:	d012      	beq.n	80287c4 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 802879e:	68fb      	ldr	r3, [r7, #12]
 80287a0:	681b      	ldr	r3, [r3, #0]
 80287a2:	4a2f      	ldr	r2, [pc, #188]	; (8028860 <HAL_SD_WriteBlocks+0x310>)
 80287a4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80287a6:	68fb      	ldr	r3, [r7, #12]
 80287a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80287aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80287ac:	431a      	orrs	r2, r3
 80287ae:	68fb      	ldr	r3, [r7, #12]
 80287b0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80287b2:	68fb      	ldr	r3, [r7, #12]
 80287b4:	2201      	movs	r2, #1
 80287b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80287ba:	68fb      	ldr	r3, [r7, #12]
 80287bc:	2200      	movs	r2, #0
 80287be:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80287c0:	2301      	movs	r3, #1
 80287c2:	e061      	b.n	8028888 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80287c4:	68fb      	ldr	r3, [r7, #12]
 80287c6:	681b      	ldr	r3, [r3, #0]
 80287c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80287ca:	f003 0308 	and.w	r3, r3, #8
 80287ce:	2b00      	cmp	r3, #0
 80287d0:	d012      	beq.n	80287f8 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80287d2:	68fb      	ldr	r3, [r7, #12]
 80287d4:	681b      	ldr	r3, [r3, #0]
 80287d6:	4a22      	ldr	r2, [pc, #136]	; (8028860 <HAL_SD_WriteBlocks+0x310>)
 80287d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80287da:	68fb      	ldr	r3, [r7, #12]
 80287dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80287de:	f043 0208 	orr.w	r2, r3, #8
 80287e2:	68fb      	ldr	r3, [r7, #12]
 80287e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80287e6:	68fb      	ldr	r3, [r7, #12]
 80287e8:	2201      	movs	r2, #1
 80287ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80287ee:	68fb      	ldr	r3, [r7, #12]
 80287f0:	2200      	movs	r2, #0
 80287f2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80287f4:	2301      	movs	r3, #1
 80287f6:	e047      	b.n	8028888 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80287f8:	68fb      	ldr	r3, [r7, #12]
 80287fa:	681b      	ldr	r3, [r3, #0]
 80287fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80287fe:	f003 0302 	and.w	r3, r3, #2
 8028802:	2b00      	cmp	r3, #0
 8028804:	d012      	beq.n	802882c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8028806:	68fb      	ldr	r3, [r7, #12]
 8028808:	681b      	ldr	r3, [r3, #0]
 802880a:	4a15      	ldr	r2, [pc, #84]	; (8028860 <HAL_SD_WriteBlocks+0x310>)
 802880c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 802880e:	68fb      	ldr	r3, [r7, #12]
 8028810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028812:	f043 0202 	orr.w	r2, r3, #2
 8028816:	68fb      	ldr	r3, [r7, #12]
 8028818:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 802881a:	68fb      	ldr	r3, [r7, #12]
 802881c:	2201      	movs	r2, #1
 802881e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8028822:	68fb      	ldr	r3, [r7, #12]
 8028824:	2200      	movs	r2, #0
 8028826:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8028828:	2301      	movs	r3, #1
 802882a:	e02d      	b.n	8028888 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 802882c:	68fb      	ldr	r3, [r7, #12]
 802882e:	681b      	ldr	r3, [r3, #0]
 8028830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028832:	f003 0310 	and.w	r3, r3, #16
 8028836:	2b00      	cmp	r3, #0
 8028838:	d014      	beq.n	8028864 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 802883a:	68fb      	ldr	r3, [r7, #12]
 802883c:	681b      	ldr	r3, [r3, #0]
 802883e:	4a08      	ldr	r2, [pc, #32]	; (8028860 <HAL_SD_WriteBlocks+0x310>)
 8028840:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8028842:	68fb      	ldr	r3, [r7, #12]
 8028844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028846:	f043 0210 	orr.w	r2, r3, #16
 802884a:	68fb      	ldr	r3, [r7, #12]
 802884c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 802884e:	68fb      	ldr	r3, [r7, #12]
 8028850:	2201      	movs	r2, #1
 8028852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8028856:	68fb      	ldr	r3, [r7, #12]
 8028858:	2200      	movs	r2, #0
 802885a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 802885c:	2301      	movs	r3, #1
 802885e:	e013      	b.n	8028888 <HAL_SD_WriteBlocks+0x338>
 8028860:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8028864:	68fb      	ldr	r3, [r7, #12]
 8028866:	681b      	ldr	r3, [r3, #0]
 8028868:	f240 523a 	movw	r2, #1338	; 0x53a
 802886c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 802886e:	68fb      	ldr	r3, [r7, #12]
 8028870:	2201      	movs	r2, #1
 8028872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8028876:	2300      	movs	r3, #0
 8028878:	e006      	b.n	8028888 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 802887a:	68fb      	ldr	r3, [r7, #12]
 802887c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802887e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8028882:	68fb      	ldr	r3, [r7, #12]
 8028884:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8028886:	2301      	movs	r3, #1
  }
}
 8028888:	4618      	mov	r0, r3
 802888a:	3748      	adds	r7, #72	; 0x48
 802888c:	46bd      	mov	sp, r7
 802888e:	bd80      	pop	{r7, pc}

08028890 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8028890:	b480      	push	{r7}
 8028892:	b083      	sub	sp, #12
 8028894:	af00      	add	r7, sp, #0
 8028896:	6078      	str	r0, [r7, #4]
 8028898:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 802889a:	687b      	ldr	r3, [r7, #4]
 802889c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802889e:	0f9b      	lsrs	r3, r3, #30
 80288a0:	b2da      	uxtb	r2, r3
 80288a2:	683b      	ldr	r3, [r7, #0]
 80288a4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80288a6:	687b      	ldr	r3, [r7, #4]
 80288a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80288aa:	0e9b      	lsrs	r3, r3, #26
 80288ac:	b2db      	uxtb	r3, r3
 80288ae:	f003 030f 	and.w	r3, r3, #15
 80288b2:	b2da      	uxtb	r2, r3
 80288b4:	683b      	ldr	r3, [r7, #0]
 80288b6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80288b8:	687b      	ldr	r3, [r7, #4]
 80288ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80288bc:	0e1b      	lsrs	r3, r3, #24
 80288be:	b2db      	uxtb	r3, r3
 80288c0:	f003 0303 	and.w	r3, r3, #3
 80288c4:	b2da      	uxtb	r2, r3
 80288c6:	683b      	ldr	r3, [r7, #0]
 80288c8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80288ca:	687b      	ldr	r3, [r7, #4]
 80288cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80288ce:	0c1b      	lsrs	r3, r3, #16
 80288d0:	b2da      	uxtb	r2, r3
 80288d2:	683b      	ldr	r3, [r7, #0]
 80288d4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80288d6:	687b      	ldr	r3, [r7, #4]
 80288d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80288da:	0a1b      	lsrs	r3, r3, #8
 80288dc:	b2da      	uxtb	r2, r3
 80288de:	683b      	ldr	r3, [r7, #0]
 80288e0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80288e2:	687b      	ldr	r3, [r7, #4]
 80288e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80288e6:	b2da      	uxtb	r2, r3
 80288e8:	683b      	ldr	r3, [r7, #0]
 80288ea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80288ec:	687b      	ldr	r3, [r7, #4]
 80288ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80288f0:	0d1b      	lsrs	r3, r3, #20
 80288f2:	b29a      	uxth	r2, r3
 80288f4:	683b      	ldr	r3, [r7, #0]
 80288f6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80288f8:	687b      	ldr	r3, [r7, #4]
 80288fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80288fc:	0c1b      	lsrs	r3, r3, #16
 80288fe:	b2db      	uxtb	r3, r3
 8028900:	f003 030f 	and.w	r3, r3, #15
 8028904:	b2da      	uxtb	r2, r3
 8028906:	683b      	ldr	r3, [r7, #0]
 8028908:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 802890a:	687b      	ldr	r3, [r7, #4]
 802890c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802890e:	0bdb      	lsrs	r3, r3, #15
 8028910:	b2db      	uxtb	r3, r3
 8028912:	f003 0301 	and.w	r3, r3, #1
 8028916:	b2da      	uxtb	r2, r3
 8028918:	683b      	ldr	r3, [r7, #0]
 802891a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 802891c:	687b      	ldr	r3, [r7, #4]
 802891e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028920:	0b9b      	lsrs	r3, r3, #14
 8028922:	b2db      	uxtb	r3, r3
 8028924:	f003 0301 	and.w	r3, r3, #1
 8028928:	b2da      	uxtb	r2, r3
 802892a:	683b      	ldr	r3, [r7, #0]
 802892c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 802892e:	687b      	ldr	r3, [r7, #4]
 8028930:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028932:	0b5b      	lsrs	r3, r3, #13
 8028934:	b2db      	uxtb	r3, r3
 8028936:	f003 0301 	and.w	r3, r3, #1
 802893a:	b2da      	uxtb	r2, r3
 802893c:	683b      	ldr	r3, [r7, #0]
 802893e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8028940:	687b      	ldr	r3, [r7, #4]
 8028942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028944:	0b1b      	lsrs	r3, r3, #12
 8028946:	b2db      	uxtb	r3, r3
 8028948:	f003 0301 	and.w	r3, r3, #1
 802894c:	b2da      	uxtb	r2, r3
 802894e:	683b      	ldr	r3, [r7, #0]
 8028950:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8028952:	683b      	ldr	r3, [r7, #0]
 8028954:	2200      	movs	r2, #0
 8028956:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8028958:	687b      	ldr	r3, [r7, #4]
 802895a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802895c:	2b00      	cmp	r3, #0
 802895e:	d163      	bne.n	8028a28 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8028960:	687b      	ldr	r3, [r7, #4]
 8028962:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028964:	009a      	lsls	r2, r3, #2
 8028966:	f640 73fc 	movw	r3, #4092	; 0xffc
 802896a:	4013      	ands	r3, r2
 802896c:	687a      	ldr	r2, [r7, #4]
 802896e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8028970:	0f92      	lsrs	r2, r2, #30
 8028972:	431a      	orrs	r2, r3
 8028974:	683b      	ldr	r3, [r7, #0]
 8028976:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8028978:	687b      	ldr	r3, [r7, #4]
 802897a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802897c:	0edb      	lsrs	r3, r3, #27
 802897e:	b2db      	uxtb	r3, r3
 8028980:	f003 0307 	and.w	r3, r3, #7
 8028984:	b2da      	uxtb	r2, r3
 8028986:	683b      	ldr	r3, [r7, #0]
 8028988:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 802898a:	687b      	ldr	r3, [r7, #4]
 802898c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802898e:	0e1b      	lsrs	r3, r3, #24
 8028990:	b2db      	uxtb	r3, r3
 8028992:	f003 0307 	and.w	r3, r3, #7
 8028996:	b2da      	uxtb	r2, r3
 8028998:	683b      	ldr	r3, [r7, #0]
 802899a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 802899c:	687b      	ldr	r3, [r7, #4]
 802899e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80289a0:	0d5b      	lsrs	r3, r3, #21
 80289a2:	b2db      	uxtb	r3, r3
 80289a4:	f003 0307 	and.w	r3, r3, #7
 80289a8:	b2da      	uxtb	r2, r3
 80289aa:	683b      	ldr	r3, [r7, #0]
 80289ac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80289ae:	687b      	ldr	r3, [r7, #4]
 80289b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80289b2:	0c9b      	lsrs	r3, r3, #18
 80289b4:	b2db      	uxtb	r3, r3
 80289b6:	f003 0307 	and.w	r3, r3, #7
 80289ba:	b2da      	uxtb	r2, r3
 80289bc:	683b      	ldr	r3, [r7, #0]
 80289be:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80289c0:	687b      	ldr	r3, [r7, #4]
 80289c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80289c4:	0bdb      	lsrs	r3, r3, #15
 80289c6:	b2db      	uxtb	r3, r3
 80289c8:	f003 0307 	and.w	r3, r3, #7
 80289cc:	b2da      	uxtb	r2, r3
 80289ce:	683b      	ldr	r3, [r7, #0]
 80289d0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80289d2:	683b      	ldr	r3, [r7, #0]
 80289d4:	691b      	ldr	r3, [r3, #16]
 80289d6:	1c5a      	adds	r2, r3, #1
 80289d8:	687b      	ldr	r3, [r7, #4]
 80289da:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80289dc:	683b      	ldr	r3, [r7, #0]
 80289de:	7e1b      	ldrb	r3, [r3, #24]
 80289e0:	b2db      	uxtb	r3, r3
 80289e2:	f003 0307 	and.w	r3, r3, #7
 80289e6:	3302      	adds	r3, #2
 80289e8:	2201      	movs	r2, #1
 80289ea:	fa02 f303 	lsl.w	r3, r2, r3
 80289ee:	687a      	ldr	r2, [r7, #4]
 80289f0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80289f2:	fb02 f203 	mul.w	r2, r2, r3
 80289f6:	687b      	ldr	r3, [r7, #4]
 80289f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80289fa:	683b      	ldr	r3, [r7, #0]
 80289fc:	7a1b      	ldrb	r3, [r3, #8]
 80289fe:	b2db      	uxtb	r3, r3
 8028a00:	f003 030f 	and.w	r3, r3, #15
 8028a04:	2201      	movs	r2, #1
 8028a06:	409a      	lsls	r2, r3
 8028a08:	687b      	ldr	r3, [r7, #4]
 8028a0a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8028a0c:	687b      	ldr	r3, [r7, #4]
 8028a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028a10:	687a      	ldr	r2, [r7, #4]
 8028a12:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8028a14:	0a52      	lsrs	r2, r2, #9
 8028a16:	fb02 f203 	mul.w	r2, r2, r3
 8028a1a:	687b      	ldr	r3, [r7, #4]
 8028a1c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8028a1e:	687b      	ldr	r3, [r7, #4]
 8028a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8028a24:	661a      	str	r2, [r3, #96]	; 0x60
 8028a26:	e031      	b.n	8028a8c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8028a28:	687b      	ldr	r3, [r7, #4]
 8028a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028a2c:	2b01      	cmp	r3, #1
 8028a2e:	d11d      	bne.n	8028a6c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8028a30:	687b      	ldr	r3, [r7, #4]
 8028a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028a34:	041b      	lsls	r3, r3, #16
 8028a36:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8028a3a:	687b      	ldr	r3, [r7, #4]
 8028a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8028a3e:	0c1b      	lsrs	r3, r3, #16
 8028a40:	431a      	orrs	r2, r3
 8028a42:	683b      	ldr	r3, [r7, #0]
 8028a44:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8028a46:	683b      	ldr	r3, [r7, #0]
 8028a48:	691b      	ldr	r3, [r3, #16]
 8028a4a:	3301      	adds	r3, #1
 8028a4c:	029a      	lsls	r2, r3, #10
 8028a4e:	687b      	ldr	r3, [r7, #4]
 8028a50:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8028a52:	687b      	ldr	r3, [r7, #4]
 8028a54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8028a56:	687b      	ldr	r3, [r7, #4]
 8028a58:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8028a5a:	687b      	ldr	r3, [r7, #4]
 8028a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8028a60:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8028a62:	687b      	ldr	r3, [r7, #4]
 8028a64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8028a66:	687b      	ldr	r3, [r7, #4]
 8028a68:	661a      	str	r2, [r3, #96]	; 0x60
 8028a6a:	e00f      	b.n	8028a8c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8028a6c:	687b      	ldr	r3, [r7, #4]
 8028a6e:	681b      	ldr	r3, [r3, #0]
 8028a70:	4a58      	ldr	r2, [pc, #352]	; (8028bd4 <HAL_SD_GetCardCSD+0x344>)
 8028a72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8028a74:	687b      	ldr	r3, [r7, #4]
 8028a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028a78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8028a7c:	687b      	ldr	r3, [r7, #4]
 8028a7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8028a80:	687b      	ldr	r3, [r7, #4]
 8028a82:	2201      	movs	r2, #1
 8028a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8028a88:	2301      	movs	r3, #1
 8028a8a:	e09d      	b.n	8028bc8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8028a8c:	687b      	ldr	r3, [r7, #4]
 8028a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8028a90:	0b9b      	lsrs	r3, r3, #14
 8028a92:	b2db      	uxtb	r3, r3
 8028a94:	f003 0301 	and.w	r3, r3, #1
 8028a98:	b2da      	uxtb	r2, r3
 8028a9a:	683b      	ldr	r3, [r7, #0]
 8028a9c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8028a9e:	687b      	ldr	r3, [r7, #4]
 8028aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8028aa2:	09db      	lsrs	r3, r3, #7
 8028aa4:	b2db      	uxtb	r3, r3
 8028aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028aaa:	b2da      	uxtb	r2, r3
 8028aac:	683b      	ldr	r3, [r7, #0]
 8028aae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8028ab0:	687b      	ldr	r3, [r7, #4]
 8028ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8028ab4:	b2db      	uxtb	r3, r3
 8028ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028aba:	b2da      	uxtb	r2, r3
 8028abc:	683b      	ldr	r3, [r7, #0]
 8028abe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8028ac0:	687b      	ldr	r3, [r7, #4]
 8028ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028ac4:	0fdb      	lsrs	r3, r3, #31
 8028ac6:	b2da      	uxtb	r2, r3
 8028ac8:	683b      	ldr	r3, [r7, #0]
 8028aca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8028acc:	687b      	ldr	r3, [r7, #4]
 8028ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028ad0:	0f5b      	lsrs	r3, r3, #29
 8028ad2:	b2db      	uxtb	r3, r3
 8028ad4:	f003 0303 	and.w	r3, r3, #3
 8028ad8:	b2da      	uxtb	r2, r3
 8028ada:	683b      	ldr	r3, [r7, #0]
 8028adc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8028ade:	687b      	ldr	r3, [r7, #4]
 8028ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028ae2:	0e9b      	lsrs	r3, r3, #26
 8028ae4:	b2db      	uxtb	r3, r3
 8028ae6:	f003 0307 	and.w	r3, r3, #7
 8028aea:	b2da      	uxtb	r2, r3
 8028aec:	683b      	ldr	r3, [r7, #0]
 8028aee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8028af0:	687b      	ldr	r3, [r7, #4]
 8028af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028af4:	0d9b      	lsrs	r3, r3, #22
 8028af6:	b2db      	uxtb	r3, r3
 8028af8:	f003 030f 	and.w	r3, r3, #15
 8028afc:	b2da      	uxtb	r2, r3
 8028afe:	683b      	ldr	r3, [r7, #0]
 8028b00:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8028b02:	687b      	ldr	r3, [r7, #4]
 8028b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028b06:	0d5b      	lsrs	r3, r3, #21
 8028b08:	b2db      	uxtb	r3, r3
 8028b0a:	f003 0301 	and.w	r3, r3, #1
 8028b0e:	b2da      	uxtb	r2, r3
 8028b10:	683b      	ldr	r3, [r7, #0]
 8028b12:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8028b16:	683b      	ldr	r3, [r7, #0]
 8028b18:	2200      	movs	r2, #0
 8028b1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8028b1e:	687b      	ldr	r3, [r7, #4]
 8028b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028b22:	0c1b      	lsrs	r3, r3, #16
 8028b24:	b2db      	uxtb	r3, r3
 8028b26:	f003 0301 	and.w	r3, r3, #1
 8028b2a:	b2da      	uxtb	r2, r3
 8028b2c:	683b      	ldr	r3, [r7, #0]
 8028b2e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8028b32:	687b      	ldr	r3, [r7, #4]
 8028b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028b36:	0bdb      	lsrs	r3, r3, #15
 8028b38:	b2db      	uxtb	r3, r3
 8028b3a:	f003 0301 	and.w	r3, r3, #1
 8028b3e:	b2da      	uxtb	r2, r3
 8028b40:	683b      	ldr	r3, [r7, #0]
 8028b42:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8028b46:	687b      	ldr	r3, [r7, #4]
 8028b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028b4a:	0b9b      	lsrs	r3, r3, #14
 8028b4c:	b2db      	uxtb	r3, r3
 8028b4e:	f003 0301 	and.w	r3, r3, #1
 8028b52:	b2da      	uxtb	r2, r3
 8028b54:	683b      	ldr	r3, [r7, #0]
 8028b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8028b5a:	687b      	ldr	r3, [r7, #4]
 8028b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028b5e:	0b5b      	lsrs	r3, r3, #13
 8028b60:	b2db      	uxtb	r3, r3
 8028b62:	f003 0301 	and.w	r3, r3, #1
 8028b66:	b2da      	uxtb	r2, r3
 8028b68:	683b      	ldr	r3, [r7, #0]
 8028b6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8028b6e:	687b      	ldr	r3, [r7, #4]
 8028b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028b72:	0b1b      	lsrs	r3, r3, #12
 8028b74:	b2db      	uxtb	r3, r3
 8028b76:	f003 0301 	and.w	r3, r3, #1
 8028b7a:	b2da      	uxtb	r2, r3
 8028b7c:	683b      	ldr	r3, [r7, #0]
 8028b7e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8028b82:	687b      	ldr	r3, [r7, #4]
 8028b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028b86:	0a9b      	lsrs	r3, r3, #10
 8028b88:	b2db      	uxtb	r3, r3
 8028b8a:	f003 0303 	and.w	r3, r3, #3
 8028b8e:	b2da      	uxtb	r2, r3
 8028b90:	683b      	ldr	r3, [r7, #0]
 8028b92:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8028b96:	687b      	ldr	r3, [r7, #4]
 8028b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028b9a:	0a1b      	lsrs	r3, r3, #8
 8028b9c:	b2db      	uxtb	r3, r3
 8028b9e:	f003 0303 	and.w	r3, r3, #3
 8028ba2:	b2da      	uxtb	r2, r3
 8028ba4:	683b      	ldr	r3, [r7, #0]
 8028ba6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8028baa:	687b      	ldr	r3, [r7, #4]
 8028bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028bae:	085b      	lsrs	r3, r3, #1
 8028bb0:	b2db      	uxtb	r3, r3
 8028bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028bb6:	b2da      	uxtb	r2, r3
 8028bb8:	683b      	ldr	r3, [r7, #0]
 8028bba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8028bbe:	683b      	ldr	r3, [r7, #0]
 8028bc0:	2201      	movs	r2, #1
 8028bc2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8028bc6:	2300      	movs	r3, #0
}
 8028bc8:	4618      	mov	r0, r3
 8028bca:	370c      	adds	r7, #12
 8028bcc:	46bd      	mov	sp, r7
 8028bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028bd2:	4770      	bx	lr
 8028bd4:	004005ff 	.word	0x004005ff

08028bd8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8028bd8:	b480      	push	{r7}
 8028bda:	b083      	sub	sp, #12
 8028bdc:	af00      	add	r7, sp, #0
 8028bde:	6078      	str	r0, [r7, #4]
 8028be0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8028be2:	687b      	ldr	r3, [r7, #4]
 8028be4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8028be6:	683b      	ldr	r3, [r7, #0]
 8028be8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8028bea:	687b      	ldr	r3, [r7, #4]
 8028bec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8028bee:	683b      	ldr	r3, [r7, #0]
 8028bf0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8028bf2:	687b      	ldr	r3, [r7, #4]
 8028bf4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8028bf6:	683b      	ldr	r3, [r7, #0]
 8028bf8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8028bfa:	687b      	ldr	r3, [r7, #4]
 8028bfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8028bfe:	683b      	ldr	r3, [r7, #0]
 8028c00:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8028c02:	687b      	ldr	r3, [r7, #4]
 8028c04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8028c06:	683b      	ldr	r3, [r7, #0]
 8028c08:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8028c0a:	687b      	ldr	r3, [r7, #4]
 8028c0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8028c0e:	683b      	ldr	r3, [r7, #0]
 8028c10:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8028c12:	687b      	ldr	r3, [r7, #4]
 8028c14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8028c16:	683b      	ldr	r3, [r7, #0]
 8028c18:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8028c1a:	687b      	ldr	r3, [r7, #4]
 8028c1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8028c1e:	683b      	ldr	r3, [r7, #0]
 8028c20:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8028c22:	2300      	movs	r3, #0
}
 8028c24:	4618      	mov	r0, r3
 8028c26:	370c      	adds	r7, #12
 8028c28:	46bd      	mov	sp, r7
 8028c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028c2e:	4770      	bx	lr

08028c30 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8028c30:	b5b0      	push	{r4, r5, r7, lr}
 8028c32:	b08e      	sub	sp, #56	; 0x38
 8028c34:	af04      	add	r7, sp, #16
 8028c36:	6078      	str	r0, [r7, #4]
 8028c38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8028c3a:	687b      	ldr	r3, [r7, #4]
 8028c3c:	2203      	movs	r2, #3
 8028c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8028c42:	687b      	ldr	r3, [r7, #4]
 8028c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028c46:	2b03      	cmp	r3, #3
 8028c48:	d02e      	beq.n	8028ca8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8028c4a:	683b      	ldr	r3, [r7, #0]
 8028c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8028c50:	d106      	bne.n	8028c60 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8028c52:	687b      	ldr	r3, [r7, #4]
 8028c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028c56:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8028c5a:	687b      	ldr	r3, [r7, #4]
 8028c5c:	639a      	str	r2, [r3, #56]	; 0x38
 8028c5e:	e029      	b.n	8028cb4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8028c60:	683b      	ldr	r3, [r7, #0]
 8028c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8028c66:	d10a      	bne.n	8028c7e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8028c68:	6878      	ldr	r0, [r7, #4]
 8028c6a:	f000 fa01 	bl	8029070 <SD_WideBus_Enable>
 8028c6e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8028c70:	687b      	ldr	r3, [r7, #4]
 8028c72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028c76:	431a      	orrs	r2, r3
 8028c78:	687b      	ldr	r3, [r7, #4]
 8028c7a:	639a      	str	r2, [r3, #56]	; 0x38
 8028c7c:	e01a      	b.n	8028cb4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8028c7e:	683b      	ldr	r3, [r7, #0]
 8028c80:	2b00      	cmp	r3, #0
 8028c82:	d10a      	bne.n	8028c9a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8028c84:	6878      	ldr	r0, [r7, #4]
 8028c86:	f000 fa3e 	bl	8029106 <SD_WideBus_Disable>
 8028c8a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8028c8c:	687b      	ldr	r3, [r7, #4]
 8028c8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028c92:	431a      	orrs	r2, r3
 8028c94:	687b      	ldr	r3, [r7, #4]
 8028c96:	639a      	str	r2, [r3, #56]	; 0x38
 8028c98:	e00c      	b.n	8028cb4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8028c9a:	687b      	ldr	r3, [r7, #4]
 8028c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028c9e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8028ca2:	687b      	ldr	r3, [r7, #4]
 8028ca4:	639a      	str	r2, [r3, #56]	; 0x38
 8028ca6:	e005      	b.n	8028cb4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8028ca8:	687b      	ldr	r3, [r7, #4]
 8028caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028cac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8028cb0:	687b      	ldr	r3, [r7, #4]
 8028cb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8028cb4:	687b      	ldr	r3, [r7, #4]
 8028cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028cb8:	2b00      	cmp	r3, #0
 8028cba:	d009      	beq.n	8028cd0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8028cbc:	687b      	ldr	r3, [r7, #4]
 8028cbe:	681b      	ldr	r3, [r3, #0]
 8028cc0:	4a18      	ldr	r2, [pc, #96]	; (8028d24 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8028cc2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8028cc4:	687b      	ldr	r3, [r7, #4]
 8028cc6:	2201      	movs	r2, #1
 8028cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8028ccc:	2301      	movs	r3, #1
 8028cce:	e024      	b.n	8028d1a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8028cd0:	687b      	ldr	r3, [r7, #4]
 8028cd2:	685b      	ldr	r3, [r3, #4]
 8028cd4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8028cd6:	687b      	ldr	r3, [r7, #4]
 8028cd8:	689b      	ldr	r3, [r3, #8]
 8028cda:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8028cdc:	687b      	ldr	r3, [r7, #4]
 8028cde:	68db      	ldr	r3, [r3, #12]
 8028ce0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8028ce2:	683b      	ldr	r3, [r7, #0]
 8028ce4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8028ce6:	687b      	ldr	r3, [r7, #4]
 8028ce8:	695b      	ldr	r3, [r3, #20]
 8028cea:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8028cec:	687b      	ldr	r3, [r7, #4]
 8028cee:	699b      	ldr	r3, [r3, #24]
 8028cf0:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8028cf2:	687b      	ldr	r3, [r7, #4]
 8028cf4:	681d      	ldr	r5, [r3, #0]
 8028cf6:	466c      	mov	r4, sp
 8028cf8:	f107 0318 	add.w	r3, r7, #24
 8028cfc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8028d00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8028d04:	f107 030c 	add.w	r3, r7, #12
 8028d08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8028d0a:	4628      	mov	r0, r5
 8028d0c:	f000 ff1a 	bl	8029b44 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8028d10:	687b      	ldr	r3, [r7, #4]
 8028d12:	2201      	movs	r2, #1
 8028d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8028d18:	2300      	movs	r3, #0
}
 8028d1a:	4618      	mov	r0, r3
 8028d1c:	3728      	adds	r7, #40	; 0x28
 8028d1e:	46bd      	mov	sp, r7
 8028d20:	bdb0      	pop	{r4, r5, r7, pc}
 8028d22:	bf00      	nop
 8028d24:	004005ff 	.word	0x004005ff

08028d28 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8028d28:	b580      	push	{r7, lr}
 8028d2a:	b086      	sub	sp, #24
 8028d2c:	af00      	add	r7, sp, #0
 8028d2e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8028d30:	2300      	movs	r3, #0
 8028d32:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8028d34:	f107 030c 	add.w	r3, r7, #12
 8028d38:	4619      	mov	r1, r3
 8028d3a:	6878      	ldr	r0, [r7, #4]
 8028d3c:	f000 f970 	bl	8029020 <SD_SendStatus>
 8028d40:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8028d42:	697b      	ldr	r3, [r7, #20]
 8028d44:	2b00      	cmp	r3, #0
 8028d46:	d005      	beq.n	8028d54 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8028d48:	687b      	ldr	r3, [r7, #4]
 8028d4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028d4c:	697b      	ldr	r3, [r7, #20]
 8028d4e:	431a      	orrs	r2, r3
 8028d50:	687b      	ldr	r3, [r7, #4]
 8028d52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8028d54:	68fb      	ldr	r3, [r7, #12]
 8028d56:	0a5b      	lsrs	r3, r3, #9
 8028d58:	f003 030f 	and.w	r3, r3, #15
 8028d5c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8028d5e:	693b      	ldr	r3, [r7, #16]
}
 8028d60:	4618      	mov	r0, r3
 8028d62:	3718      	adds	r7, #24
 8028d64:	46bd      	mov	sp, r7
 8028d66:	bd80      	pop	{r7, pc}

08028d68 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8028d68:	b5b0      	push	{r4, r5, r7, lr}
 8028d6a:	b094      	sub	sp, #80	; 0x50
 8028d6c:	af04      	add	r7, sp, #16
 8028d6e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8028d70:	2301      	movs	r3, #1
 8028d72:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8028d74:	687b      	ldr	r3, [r7, #4]
 8028d76:	681b      	ldr	r3, [r3, #0]
 8028d78:	4618      	mov	r0, r3
 8028d7a:	f000 ff3c 	bl	8029bf6 <SDMMC_GetPowerState>
 8028d7e:	4603      	mov	r3, r0
 8028d80:	2b00      	cmp	r3, #0
 8028d82:	d102      	bne.n	8028d8a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8028d84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8028d88:	e0b7      	b.n	8028efa <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8028d8a:	687b      	ldr	r3, [r7, #4]
 8028d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028d8e:	2b03      	cmp	r3, #3
 8028d90:	d02f      	beq.n	8028df2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8028d92:	687b      	ldr	r3, [r7, #4]
 8028d94:	681b      	ldr	r3, [r3, #0]
 8028d96:	4618      	mov	r0, r3
 8028d98:	f001 f967 	bl	802a06a <SDMMC_CmdSendCID>
 8028d9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8028d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028da0:	2b00      	cmp	r3, #0
 8028da2:	d001      	beq.n	8028da8 <SD_InitCard+0x40>
    {
      return errorstate;
 8028da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028da6:	e0a8      	b.n	8028efa <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8028da8:	687b      	ldr	r3, [r7, #4]
 8028daa:	681b      	ldr	r3, [r3, #0]
 8028dac:	2100      	movs	r1, #0
 8028dae:	4618      	mov	r0, r3
 8028db0:	f000 ff67 	bl	8029c82 <SDMMC_GetResponse>
 8028db4:	4602      	mov	r2, r0
 8028db6:	687b      	ldr	r3, [r7, #4]
 8028db8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8028dba:	687b      	ldr	r3, [r7, #4]
 8028dbc:	681b      	ldr	r3, [r3, #0]
 8028dbe:	2104      	movs	r1, #4
 8028dc0:	4618      	mov	r0, r3
 8028dc2:	f000 ff5e 	bl	8029c82 <SDMMC_GetResponse>
 8028dc6:	4602      	mov	r2, r0
 8028dc8:	687b      	ldr	r3, [r7, #4]
 8028dca:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8028dcc:	687b      	ldr	r3, [r7, #4]
 8028dce:	681b      	ldr	r3, [r3, #0]
 8028dd0:	2108      	movs	r1, #8
 8028dd2:	4618      	mov	r0, r3
 8028dd4:	f000 ff55 	bl	8029c82 <SDMMC_GetResponse>
 8028dd8:	4602      	mov	r2, r0
 8028dda:	687b      	ldr	r3, [r7, #4]
 8028ddc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8028dde:	687b      	ldr	r3, [r7, #4]
 8028de0:	681b      	ldr	r3, [r3, #0]
 8028de2:	210c      	movs	r1, #12
 8028de4:	4618      	mov	r0, r3
 8028de6:	f000 ff4c 	bl	8029c82 <SDMMC_GetResponse>
 8028dea:	4602      	mov	r2, r0
 8028dec:	687b      	ldr	r3, [r7, #4]
 8028dee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8028df2:	687b      	ldr	r3, [r7, #4]
 8028df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028df6:	2b03      	cmp	r3, #3
 8028df8:	d00d      	beq.n	8028e16 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8028dfa:	687b      	ldr	r3, [r7, #4]
 8028dfc:	681b      	ldr	r3, [r3, #0]
 8028dfe:	f107 020e 	add.w	r2, r7, #14
 8028e02:	4611      	mov	r1, r2
 8028e04:	4618      	mov	r0, r3
 8028e06:	f001 f96d 	bl	802a0e4 <SDMMC_CmdSetRelAdd>
 8028e0a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8028e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028e0e:	2b00      	cmp	r3, #0
 8028e10:	d001      	beq.n	8028e16 <SD_InitCard+0xae>
    {
      return errorstate;
 8028e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028e14:	e071      	b.n	8028efa <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8028e16:	687b      	ldr	r3, [r7, #4]
 8028e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028e1a:	2b03      	cmp	r3, #3
 8028e1c:	d036      	beq.n	8028e8c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8028e1e:	89fb      	ldrh	r3, [r7, #14]
 8028e20:	461a      	mov	r2, r3
 8028e22:	687b      	ldr	r3, [r7, #4]
 8028e24:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8028e26:	687b      	ldr	r3, [r7, #4]
 8028e28:	681a      	ldr	r2, [r3, #0]
 8028e2a:	687b      	ldr	r3, [r7, #4]
 8028e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028e2e:	041b      	lsls	r3, r3, #16
 8028e30:	4619      	mov	r1, r3
 8028e32:	4610      	mov	r0, r2
 8028e34:	f001 f937 	bl	802a0a6 <SDMMC_CmdSendCSD>
 8028e38:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8028e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028e3c:	2b00      	cmp	r3, #0
 8028e3e:	d001      	beq.n	8028e44 <SD_InitCard+0xdc>
    {
      return errorstate;
 8028e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028e42:	e05a      	b.n	8028efa <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8028e44:	687b      	ldr	r3, [r7, #4]
 8028e46:	681b      	ldr	r3, [r3, #0]
 8028e48:	2100      	movs	r1, #0
 8028e4a:	4618      	mov	r0, r3
 8028e4c:	f000 ff19 	bl	8029c82 <SDMMC_GetResponse>
 8028e50:	4602      	mov	r2, r0
 8028e52:	687b      	ldr	r3, [r7, #4]
 8028e54:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8028e56:	687b      	ldr	r3, [r7, #4]
 8028e58:	681b      	ldr	r3, [r3, #0]
 8028e5a:	2104      	movs	r1, #4
 8028e5c:	4618      	mov	r0, r3
 8028e5e:	f000 ff10 	bl	8029c82 <SDMMC_GetResponse>
 8028e62:	4602      	mov	r2, r0
 8028e64:	687b      	ldr	r3, [r7, #4]
 8028e66:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8028e68:	687b      	ldr	r3, [r7, #4]
 8028e6a:	681b      	ldr	r3, [r3, #0]
 8028e6c:	2108      	movs	r1, #8
 8028e6e:	4618      	mov	r0, r3
 8028e70:	f000 ff07 	bl	8029c82 <SDMMC_GetResponse>
 8028e74:	4602      	mov	r2, r0
 8028e76:	687b      	ldr	r3, [r7, #4]
 8028e78:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8028e7a:	687b      	ldr	r3, [r7, #4]
 8028e7c:	681b      	ldr	r3, [r3, #0]
 8028e7e:	210c      	movs	r1, #12
 8028e80:	4618      	mov	r0, r3
 8028e82:	f000 fefe 	bl	8029c82 <SDMMC_GetResponse>
 8028e86:	4602      	mov	r2, r0
 8028e88:	687b      	ldr	r3, [r7, #4]
 8028e8a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8028e8c:	687b      	ldr	r3, [r7, #4]
 8028e8e:	681b      	ldr	r3, [r3, #0]
 8028e90:	2104      	movs	r1, #4
 8028e92:	4618      	mov	r0, r3
 8028e94:	f000 fef5 	bl	8029c82 <SDMMC_GetResponse>
 8028e98:	4603      	mov	r3, r0
 8028e9a:	0d1a      	lsrs	r2, r3, #20
 8028e9c:	687b      	ldr	r3, [r7, #4]
 8028e9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8028ea0:	f107 0310 	add.w	r3, r7, #16
 8028ea4:	4619      	mov	r1, r3
 8028ea6:	6878      	ldr	r0, [r7, #4]
 8028ea8:	f7ff fcf2 	bl	8028890 <HAL_SD_GetCardCSD>
 8028eac:	4603      	mov	r3, r0
 8028eae:	2b00      	cmp	r3, #0
 8028eb0:	d002      	beq.n	8028eb8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8028eb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8028eb6:	e020      	b.n	8028efa <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8028eb8:	687b      	ldr	r3, [r7, #4]
 8028eba:	6819      	ldr	r1, [r3, #0]
 8028ebc:	687b      	ldr	r3, [r7, #4]
 8028ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028ec0:	041b      	lsls	r3, r3, #16
 8028ec2:	f04f 0400 	mov.w	r4, #0
 8028ec6:	461a      	mov	r2, r3
 8028ec8:	4623      	mov	r3, r4
 8028eca:	4608      	mov	r0, r1
 8028ecc:	f000 ffe4 	bl	8029e98 <SDMMC_CmdSelDesel>
 8028ed0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8028ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028ed4:	2b00      	cmp	r3, #0
 8028ed6:	d001      	beq.n	8028edc <SD_InitCard+0x174>
  {
    return errorstate;
 8028ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028eda:	e00e      	b.n	8028efa <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8028edc:	687b      	ldr	r3, [r7, #4]
 8028ede:	681d      	ldr	r5, [r3, #0]
 8028ee0:	687b      	ldr	r3, [r7, #4]
 8028ee2:	466c      	mov	r4, sp
 8028ee4:	f103 0210 	add.w	r2, r3, #16
 8028ee8:	ca07      	ldmia	r2, {r0, r1, r2}
 8028eea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8028eee:	3304      	adds	r3, #4
 8028ef0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8028ef2:	4628      	mov	r0, r5
 8028ef4:	f000 fe26 	bl	8029b44 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8028ef8:	2300      	movs	r3, #0
}
 8028efa:	4618      	mov	r0, r3
 8028efc:	3740      	adds	r7, #64	; 0x40
 8028efe:	46bd      	mov	sp, r7
 8028f00:	bdb0      	pop	{r4, r5, r7, pc}
	...

08028f04 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8028f04:	b580      	push	{r7, lr}
 8028f06:	b086      	sub	sp, #24
 8028f08:	af00      	add	r7, sp, #0
 8028f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8028f0c:	2300      	movs	r3, #0
 8028f0e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8028f10:	2300      	movs	r3, #0
 8028f12:	617b      	str	r3, [r7, #20]
 8028f14:	2300      	movs	r3, #0
 8028f16:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8028f18:	687b      	ldr	r3, [r7, #4]
 8028f1a:	681b      	ldr	r3, [r3, #0]
 8028f1c:	4618      	mov	r0, r3
 8028f1e:	f000 ffde 	bl	8029ede <SDMMC_CmdGoIdleState>
 8028f22:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8028f24:	68fb      	ldr	r3, [r7, #12]
 8028f26:	2b00      	cmp	r3, #0
 8028f28:	d001      	beq.n	8028f2e <SD_PowerON+0x2a>
  {
    return errorstate;
 8028f2a:	68fb      	ldr	r3, [r7, #12]
 8028f2c:	e072      	b.n	8029014 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8028f2e:	687b      	ldr	r3, [r7, #4]
 8028f30:	681b      	ldr	r3, [r3, #0]
 8028f32:	4618      	mov	r0, r3
 8028f34:	f000 fff1 	bl	8029f1a <SDMMC_CmdOperCond>
 8028f38:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8028f3a:	68fb      	ldr	r3, [r7, #12]
 8028f3c:	2b00      	cmp	r3, #0
 8028f3e:	d00d      	beq.n	8028f5c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8028f40:	687b      	ldr	r3, [r7, #4]
 8028f42:	2200      	movs	r2, #0
 8028f44:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8028f46:	687b      	ldr	r3, [r7, #4]
 8028f48:	681b      	ldr	r3, [r3, #0]
 8028f4a:	4618      	mov	r0, r3
 8028f4c:	f000 ffc7 	bl	8029ede <SDMMC_CmdGoIdleState>
 8028f50:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8028f52:	68fb      	ldr	r3, [r7, #12]
 8028f54:	2b00      	cmp	r3, #0
 8028f56:	d004      	beq.n	8028f62 <SD_PowerON+0x5e>
    {
      return errorstate;
 8028f58:	68fb      	ldr	r3, [r7, #12]
 8028f5a:	e05b      	b.n	8029014 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8028f5c:	687b      	ldr	r3, [r7, #4]
 8028f5e:	2201      	movs	r2, #1
 8028f60:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8028f62:	687b      	ldr	r3, [r7, #4]
 8028f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8028f66:	2b01      	cmp	r3, #1
 8028f68:	d137      	bne.n	8028fda <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8028f6a:	687b      	ldr	r3, [r7, #4]
 8028f6c:	681b      	ldr	r3, [r3, #0]
 8028f6e:	2100      	movs	r1, #0
 8028f70:	4618      	mov	r0, r3
 8028f72:	f000 fff1 	bl	8029f58 <SDMMC_CmdAppCommand>
 8028f76:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8028f78:	68fb      	ldr	r3, [r7, #12]
 8028f7a:	2b00      	cmp	r3, #0
 8028f7c:	d02d      	beq.n	8028fda <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8028f7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8028f82:	e047      	b.n	8029014 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8028f84:	687b      	ldr	r3, [r7, #4]
 8028f86:	681b      	ldr	r3, [r3, #0]
 8028f88:	2100      	movs	r1, #0
 8028f8a:	4618      	mov	r0, r3
 8028f8c:	f000 ffe4 	bl	8029f58 <SDMMC_CmdAppCommand>
 8028f90:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8028f92:	68fb      	ldr	r3, [r7, #12]
 8028f94:	2b00      	cmp	r3, #0
 8028f96:	d001      	beq.n	8028f9c <SD_PowerON+0x98>
    {
      return errorstate;
 8028f98:	68fb      	ldr	r3, [r7, #12]
 8028f9a:	e03b      	b.n	8029014 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8028f9c:	687b      	ldr	r3, [r7, #4]
 8028f9e:	681b      	ldr	r3, [r3, #0]
 8028fa0:	491e      	ldr	r1, [pc, #120]	; (802901c <SD_PowerON+0x118>)
 8028fa2:	4618      	mov	r0, r3
 8028fa4:	f000 fffa 	bl	8029f9c <SDMMC_CmdAppOperCommand>
 8028fa8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8028faa:	68fb      	ldr	r3, [r7, #12]
 8028fac:	2b00      	cmp	r3, #0
 8028fae:	d002      	beq.n	8028fb6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8028fb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8028fb4:	e02e      	b.n	8029014 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8028fb6:	687b      	ldr	r3, [r7, #4]
 8028fb8:	681b      	ldr	r3, [r3, #0]
 8028fba:	2100      	movs	r1, #0
 8028fbc:	4618      	mov	r0, r3
 8028fbe:	f000 fe60 	bl	8029c82 <SDMMC_GetResponse>
 8028fc2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8028fc4:	697b      	ldr	r3, [r7, #20]
 8028fc6:	0fdb      	lsrs	r3, r3, #31
 8028fc8:	2b01      	cmp	r3, #1
 8028fca:	d101      	bne.n	8028fd0 <SD_PowerON+0xcc>
 8028fcc:	2301      	movs	r3, #1
 8028fce:	e000      	b.n	8028fd2 <SD_PowerON+0xce>
 8028fd0:	2300      	movs	r3, #0
 8028fd2:	613b      	str	r3, [r7, #16]

    count++;
 8028fd4:	68bb      	ldr	r3, [r7, #8]
 8028fd6:	3301      	adds	r3, #1
 8028fd8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8028fda:	68bb      	ldr	r3, [r7, #8]
 8028fdc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8028fe0:	4293      	cmp	r3, r2
 8028fe2:	d802      	bhi.n	8028fea <SD_PowerON+0xe6>
 8028fe4:	693b      	ldr	r3, [r7, #16]
 8028fe6:	2b00      	cmp	r3, #0
 8028fe8:	d0cc      	beq.n	8028f84 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8028fea:	68bb      	ldr	r3, [r7, #8]
 8028fec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8028ff0:	4293      	cmp	r3, r2
 8028ff2:	d902      	bls.n	8028ffa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8028ff4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8028ff8:	e00c      	b.n	8029014 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8028ffa:	697b      	ldr	r3, [r7, #20]
 8028ffc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8029000:	2b00      	cmp	r3, #0
 8029002:	d003      	beq.n	802900c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8029004:	687b      	ldr	r3, [r7, #4]
 8029006:	2201      	movs	r2, #1
 8029008:	645a      	str	r2, [r3, #68]	; 0x44
 802900a:	e002      	b.n	8029012 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 802900c:	687b      	ldr	r3, [r7, #4]
 802900e:	2200      	movs	r2, #0
 8029010:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8029012:	2300      	movs	r3, #0
}
 8029014:	4618      	mov	r0, r3
 8029016:	3718      	adds	r7, #24
 8029018:	46bd      	mov	sp, r7
 802901a:	bd80      	pop	{r7, pc}
 802901c:	c1100000 	.word	0xc1100000

08029020 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8029020:	b580      	push	{r7, lr}
 8029022:	b084      	sub	sp, #16
 8029024:	af00      	add	r7, sp, #0
 8029026:	6078      	str	r0, [r7, #4]
 8029028:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 802902a:	683b      	ldr	r3, [r7, #0]
 802902c:	2b00      	cmp	r3, #0
 802902e:	d102      	bne.n	8029036 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8029030:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8029034:	e018      	b.n	8029068 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8029036:	687b      	ldr	r3, [r7, #4]
 8029038:	681a      	ldr	r2, [r3, #0]
 802903a:	687b      	ldr	r3, [r7, #4]
 802903c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802903e:	041b      	lsls	r3, r3, #16
 8029040:	4619      	mov	r1, r3
 8029042:	4610      	mov	r0, r2
 8029044:	f001 f86f 	bl	802a126 <SDMMC_CmdSendStatus>
 8029048:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 802904a:	68fb      	ldr	r3, [r7, #12]
 802904c:	2b00      	cmp	r3, #0
 802904e:	d001      	beq.n	8029054 <SD_SendStatus+0x34>
  {
    return errorstate;
 8029050:	68fb      	ldr	r3, [r7, #12]
 8029052:	e009      	b.n	8029068 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8029054:	687b      	ldr	r3, [r7, #4]
 8029056:	681b      	ldr	r3, [r3, #0]
 8029058:	2100      	movs	r1, #0
 802905a:	4618      	mov	r0, r3
 802905c:	f000 fe11 	bl	8029c82 <SDMMC_GetResponse>
 8029060:	4602      	mov	r2, r0
 8029062:	683b      	ldr	r3, [r7, #0]
 8029064:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8029066:	2300      	movs	r3, #0
}
 8029068:	4618      	mov	r0, r3
 802906a:	3710      	adds	r7, #16
 802906c:	46bd      	mov	sp, r7
 802906e:	bd80      	pop	{r7, pc}

08029070 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8029070:	b580      	push	{r7, lr}
 8029072:	b086      	sub	sp, #24
 8029074:	af00      	add	r7, sp, #0
 8029076:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8029078:	2300      	movs	r3, #0
 802907a:	60fb      	str	r3, [r7, #12]
 802907c:	2300      	movs	r3, #0
 802907e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8029080:	687b      	ldr	r3, [r7, #4]
 8029082:	681b      	ldr	r3, [r3, #0]
 8029084:	2100      	movs	r1, #0
 8029086:	4618      	mov	r0, r3
 8029088:	f000 fdfb 	bl	8029c82 <SDMMC_GetResponse>
 802908c:	4603      	mov	r3, r0
 802908e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8029092:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8029096:	d102      	bne.n	802909e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8029098:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802909c:	e02f      	b.n	80290fe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 802909e:	f107 030c 	add.w	r3, r7, #12
 80290a2:	4619      	mov	r1, r3
 80290a4:	6878      	ldr	r0, [r7, #4]
 80290a6:	f000 f879 	bl	802919c <SD_FindSCR>
 80290aa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80290ac:	697b      	ldr	r3, [r7, #20]
 80290ae:	2b00      	cmp	r3, #0
 80290b0:	d001      	beq.n	80290b6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80290b2:	697b      	ldr	r3, [r7, #20]
 80290b4:	e023      	b.n	80290fe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80290b6:	693b      	ldr	r3, [r7, #16]
 80290b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80290bc:	2b00      	cmp	r3, #0
 80290be:	d01c      	beq.n	80290fa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80290c0:	687b      	ldr	r3, [r7, #4]
 80290c2:	681a      	ldr	r2, [r3, #0]
 80290c4:	687b      	ldr	r3, [r7, #4]
 80290c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80290c8:	041b      	lsls	r3, r3, #16
 80290ca:	4619      	mov	r1, r3
 80290cc:	4610      	mov	r0, r2
 80290ce:	f000 ff43 	bl	8029f58 <SDMMC_CmdAppCommand>
 80290d2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80290d4:	697b      	ldr	r3, [r7, #20]
 80290d6:	2b00      	cmp	r3, #0
 80290d8:	d001      	beq.n	80290de <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80290da:	697b      	ldr	r3, [r7, #20]
 80290dc:	e00f      	b.n	80290fe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80290de:	687b      	ldr	r3, [r7, #4]
 80290e0:	681b      	ldr	r3, [r3, #0]
 80290e2:	2102      	movs	r1, #2
 80290e4:	4618      	mov	r0, r3
 80290e6:	f000 ff7d 	bl	8029fe4 <SDMMC_CmdBusWidth>
 80290ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80290ec:	697b      	ldr	r3, [r7, #20]
 80290ee:	2b00      	cmp	r3, #0
 80290f0:	d001      	beq.n	80290f6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80290f2:	697b      	ldr	r3, [r7, #20]
 80290f4:	e003      	b.n	80290fe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80290f6:	2300      	movs	r3, #0
 80290f8:	e001      	b.n	80290fe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80290fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80290fe:	4618      	mov	r0, r3
 8029100:	3718      	adds	r7, #24
 8029102:	46bd      	mov	sp, r7
 8029104:	bd80      	pop	{r7, pc}

08029106 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8029106:	b580      	push	{r7, lr}
 8029108:	b086      	sub	sp, #24
 802910a:	af00      	add	r7, sp, #0
 802910c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 802910e:	2300      	movs	r3, #0
 8029110:	60fb      	str	r3, [r7, #12]
 8029112:	2300      	movs	r3, #0
 8029114:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8029116:	687b      	ldr	r3, [r7, #4]
 8029118:	681b      	ldr	r3, [r3, #0]
 802911a:	2100      	movs	r1, #0
 802911c:	4618      	mov	r0, r3
 802911e:	f000 fdb0 	bl	8029c82 <SDMMC_GetResponse>
 8029122:	4603      	mov	r3, r0
 8029124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8029128:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 802912c:	d102      	bne.n	8029134 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 802912e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8029132:	e02f      	b.n	8029194 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8029134:	f107 030c 	add.w	r3, r7, #12
 8029138:	4619      	mov	r1, r3
 802913a:	6878      	ldr	r0, [r7, #4]
 802913c:	f000 f82e 	bl	802919c <SD_FindSCR>
 8029140:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8029142:	697b      	ldr	r3, [r7, #20]
 8029144:	2b00      	cmp	r3, #0
 8029146:	d001      	beq.n	802914c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8029148:	697b      	ldr	r3, [r7, #20]
 802914a:	e023      	b.n	8029194 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 802914c:	693b      	ldr	r3, [r7, #16]
 802914e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8029152:	2b00      	cmp	r3, #0
 8029154:	d01c      	beq.n	8029190 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8029156:	687b      	ldr	r3, [r7, #4]
 8029158:	681a      	ldr	r2, [r3, #0]
 802915a:	687b      	ldr	r3, [r7, #4]
 802915c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802915e:	041b      	lsls	r3, r3, #16
 8029160:	4619      	mov	r1, r3
 8029162:	4610      	mov	r0, r2
 8029164:	f000 fef8 	bl	8029f58 <SDMMC_CmdAppCommand>
 8029168:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 802916a:	697b      	ldr	r3, [r7, #20]
 802916c:	2b00      	cmp	r3, #0
 802916e:	d001      	beq.n	8029174 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8029170:	697b      	ldr	r3, [r7, #20]
 8029172:	e00f      	b.n	8029194 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8029174:	687b      	ldr	r3, [r7, #4]
 8029176:	681b      	ldr	r3, [r3, #0]
 8029178:	2100      	movs	r1, #0
 802917a:	4618      	mov	r0, r3
 802917c:	f000 ff32 	bl	8029fe4 <SDMMC_CmdBusWidth>
 8029180:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8029182:	697b      	ldr	r3, [r7, #20]
 8029184:	2b00      	cmp	r3, #0
 8029186:	d001      	beq.n	802918c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8029188:	697b      	ldr	r3, [r7, #20]
 802918a:	e003      	b.n	8029194 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 802918c:	2300      	movs	r3, #0
 802918e:	e001      	b.n	8029194 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8029190:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8029194:	4618      	mov	r0, r3
 8029196:	3718      	adds	r7, #24
 8029198:	46bd      	mov	sp, r7
 802919a:	bd80      	pop	{r7, pc}

0802919c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 802919c:	b590      	push	{r4, r7, lr}
 802919e:	b08f      	sub	sp, #60	; 0x3c
 80291a0:	af00      	add	r7, sp, #0
 80291a2:	6078      	str	r0, [r7, #4]
 80291a4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80291a6:	f7fc f97b 	bl	80254a0 <HAL_GetTick>
 80291aa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80291ac:	2300      	movs	r3, #0
 80291ae:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80291b0:	2300      	movs	r3, #0
 80291b2:	60bb      	str	r3, [r7, #8]
 80291b4:	2300      	movs	r3, #0
 80291b6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80291b8:	683b      	ldr	r3, [r7, #0]
 80291ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80291bc:	687b      	ldr	r3, [r7, #4]
 80291be:	681b      	ldr	r3, [r3, #0]
 80291c0:	2108      	movs	r1, #8
 80291c2:	4618      	mov	r0, r3
 80291c4:	f000 fd9c 	bl	8029d00 <SDMMC_CmdBlockLength>
 80291c8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80291ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80291cc:	2b00      	cmp	r3, #0
 80291ce:	d001      	beq.n	80291d4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80291d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80291d2:	e0a9      	b.n	8029328 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80291d4:	687b      	ldr	r3, [r7, #4]
 80291d6:	681a      	ldr	r2, [r3, #0]
 80291d8:	687b      	ldr	r3, [r7, #4]
 80291da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80291dc:	041b      	lsls	r3, r3, #16
 80291de:	4619      	mov	r1, r3
 80291e0:	4610      	mov	r0, r2
 80291e2:	f000 feb9 	bl	8029f58 <SDMMC_CmdAppCommand>
 80291e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80291e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80291ea:	2b00      	cmp	r3, #0
 80291ec:	d001      	beq.n	80291f2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80291ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80291f0:	e09a      	b.n	8029328 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80291f2:	f04f 33ff 	mov.w	r3, #4294967295
 80291f6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80291f8:	2308      	movs	r3, #8
 80291fa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80291fc:	2330      	movs	r3, #48	; 0x30
 80291fe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8029200:	2302      	movs	r3, #2
 8029202:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8029204:	2300      	movs	r3, #0
 8029206:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8029208:	2301      	movs	r3, #1
 802920a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 802920c:	687b      	ldr	r3, [r7, #4]
 802920e:	681b      	ldr	r3, [r3, #0]
 8029210:	f107 0210 	add.w	r2, r7, #16
 8029214:	4611      	mov	r1, r2
 8029216:	4618      	mov	r0, r3
 8029218:	f000 fd46 	bl	8029ca8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 802921c:	687b      	ldr	r3, [r7, #4]
 802921e:	681b      	ldr	r3, [r3, #0]
 8029220:	4618      	mov	r0, r3
 8029222:	f000 ff01 	bl	802a028 <SDMMC_CmdSendSCR>
 8029226:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8029228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802922a:	2b00      	cmp	r3, #0
 802922c:	d022      	beq.n	8029274 <SD_FindSCR+0xd8>
  {
    return errorstate;
 802922e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029230:	e07a      	b.n	8029328 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8029232:	687b      	ldr	r3, [r7, #4]
 8029234:	681b      	ldr	r3, [r3, #0]
 8029236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802923c:	2b00      	cmp	r3, #0
 802923e:	d00e      	beq.n	802925e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8029240:	687b      	ldr	r3, [r7, #4]
 8029242:	6819      	ldr	r1, [r3, #0]
 8029244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029246:	009b      	lsls	r3, r3, #2
 8029248:	f107 0208 	add.w	r2, r7, #8
 802924c:	18d4      	adds	r4, r2, r3
 802924e:	4608      	mov	r0, r1
 8029250:	f000 fca4 	bl	8029b9c <SDMMC_ReadFIFO>
 8029254:	4603      	mov	r3, r0
 8029256:	6023      	str	r3, [r4, #0]
      index++;
 8029258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802925a:	3301      	adds	r3, #1
 802925c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 802925e:	f7fc f91f 	bl	80254a0 <HAL_GetTick>
 8029262:	4602      	mov	r2, r0
 8029264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029266:	1ad3      	subs	r3, r2, r3
 8029268:	f1b3 3fff 	cmp.w	r3, #4294967295
 802926c:	d102      	bne.n	8029274 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 802926e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8029272:	e059      	b.n	8029328 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8029274:	687b      	ldr	r3, [r7, #4]
 8029276:	681b      	ldr	r3, [r3, #0]
 8029278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802927a:	f240 432a 	movw	r3, #1066	; 0x42a
 802927e:	4013      	ands	r3, r2
 8029280:	2b00      	cmp	r3, #0
 8029282:	d0d6      	beq.n	8029232 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8029284:	687b      	ldr	r3, [r7, #4]
 8029286:	681b      	ldr	r3, [r3, #0]
 8029288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802928a:	f003 0308 	and.w	r3, r3, #8
 802928e:	2b00      	cmp	r3, #0
 8029290:	d005      	beq.n	802929e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8029292:	687b      	ldr	r3, [r7, #4]
 8029294:	681b      	ldr	r3, [r3, #0]
 8029296:	2208      	movs	r2, #8
 8029298:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 802929a:	2308      	movs	r3, #8
 802929c:	e044      	b.n	8029328 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 802929e:	687b      	ldr	r3, [r7, #4]
 80292a0:	681b      	ldr	r3, [r3, #0]
 80292a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80292a4:	f003 0302 	and.w	r3, r3, #2
 80292a8:	2b00      	cmp	r3, #0
 80292aa:	d005      	beq.n	80292b8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80292ac:	687b      	ldr	r3, [r7, #4]
 80292ae:	681b      	ldr	r3, [r3, #0]
 80292b0:	2202      	movs	r2, #2
 80292b2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80292b4:	2302      	movs	r3, #2
 80292b6:	e037      	b.n	8029328 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80292b8:	687b      	ldr	r3, [r7, #4]
 80292ba:	681b      	ldr	r3, [r3, #0]
 80292bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80292be:	f003 0320 	and.w	r3, r3, #32
 80292c2:	2b00      	cmp	r3, #0
 80292c4:	d005      	beq.n	80292d2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80292c6:	687b      	ldr	r3, [r7, #4]
 80292c8:	681b      	ldr	r3, [r3, #0]
 80292ca:	2220      	movs	r2, #32
 80292cc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80292ce:	2320      	movs	r3, #32
 80292d0:	e02a      	b.n	8029328 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80292d2:	687b      	ldr	r3, [r7, #4]
 80292d4:	681b      	ldr	r3, [r3, #0]
 80292d6:	f240 523a 	movw	r2, #1338	; 0x53a
 80292da:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80292dc:	68fb      	ldr	r3, [r7, #12]
 80292de:	061a      	lsls	r2, r3, #24
 80292e0:	68fb      	ldr	r3, [r7, #12]
 80292e2:	021b      	lsls	r3, r3, #8
 80292e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80292e8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80292ea:	68fb      	ldr	r3, [r7, #12]
 80292ec:	0a1b      	lsrs	r3, r3, #8
 80292ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80292f2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80292f4:	68fb      	ldr	r3, [r7, #12]
 80292f6:	0e1b      	lsrs	r3, r3, #24
 80292f8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80292fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80292fc:	601a      	str	r2, [r3, #0]
    scr++;
 80292fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029300:	3304      	adds	r3, #4
 8029302:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8029304:	68bb      	ldr	r3, [r7, #8]
 8029306:	061a      	lsls	r2, r3, #24
 8029308:	68bb      	ldr	r3, [r7, #8]
 802930a:	021b      	lsls	r3, r3, #8
 802930c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8029310:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8029312:	68bb      	ldr	r3, [r7, #8]
 8029314:	0a1b      	lsrs	r3, r3, #8
 8029316:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 802931a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 802931c:	68bb      	ldr	r3, [r7, #8]
 802931e:	0e1b      	lsrs	r3, r3, #24
 8029320:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8029322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029324:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8029326:	2300      	movs	r3, #0
}
 8029328:	4618      	mov	r0, r3
 802932a:	373c      	adds	r7, #60	; 0x3c
 802932c:	46bd      	mov	sp, r7
 802932e:	bd90      	pop	{r4, r7, pc}

08029330 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8029330:	b580      	push	{r7, lr}
 8029332:	b082      	sub	sp, #8
 8029334:	af00      	add	r7, sp, #0
 8029336:	6078      	str	r0, [r7, #4]
 8029338:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 802933a:	687b      	ldr	r3, [r7, #4]
 802933c:	2b00      	cmp	r3, #0
 802933e:	d101      	bne.n	8029344 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8029340:	2301      	movs	r3, #1
 8029342:	e025      	b.n	8029390 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8029344:	687b      	ldr	r3, [r7, #4]
 8029346:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 802934a:	b2db      	uxtb	r3, r3
 802934c:	2b00      	cmp	r3, #0
 802934e:	d106      	bne.n	802935e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8029350:	687b      	ldr	r3, [r7, #4]
 8029352:	2200      	movs	r2, #0
 8029354:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8029358:	6878      	ldr	r0, [r7, #4]
 802935a:	f7d7 fc97 	bl	8000c8c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 802935e:	687b      	ldr	r3, [r7, #4]
 8029360:	2202      	movs	r2, #2
 8029362:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8029366:	687b      	ldr	r3, [r7, #4]
 8029368:	681a      	ldr	r2, [r3, #0]
 802936a:	687b      	ldr	r3, [r7, #4]
 802936c:	3304      	adds	r3, #4
 802936e:	4619      	mov	r1, r3
 8029370:	4610      	mov	r0, r2
 8029372:	f000 fac1 	bl	80298f8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8029376:	687b      	ldr	r3, [r7, #4]
 8029378:	6818      	ldr	r0, [r3, #0]
 802937a:	687b      	ldr	r3, [r7, #4]
 802937c:	685b      	ldr	r3, [r3, #4]
 802937e:	461a      	mov	r2, r3
 8029380:	6839      	ldr	r1, [r7, #0]
 8029382:	f000 fb2b 	bl	80299dc <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8029386:	687b      	ldr	r3, [r7, #4]
 8029388:	2201      	movs	r2, #1
 802938a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 802938e:	2300      	movs	r3, #0
}
 8029390:	4618      	mov	r0, r3
 8029392:	3708      	adds	r7, #8
 8029394:	46bd      	mov	sp, r7
 8029396:	bd80      	pop	{r7, pc}

08029398 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8029398:	b580      	push	{r7, lr}
 802939a:	b084      	sub	sp, #16
 802939c:	af00      	add	r7, sp, #0
 802939e:	60f8      	str	r0, [r7, #12]
 80293a0:	60b9      	str	r1, [r7, #8]
 80293a2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80293a4:	68fb      	ldr	r3, [r7, #12]
 80293a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80293aa:	b2db      	uxtb	r3, r3
 80293ac:	2b02      	cmp	r3, #2
 80293ae:	d101      	bne.n	80293b4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80293b0:	2302      	movs	r3, #2
 80293b2:	e018      	b.n	80293e6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80293b4:	68fb      	ldr	r3, [r7, #12]
 80293b6:	2202      	movs	r2, #2
 80293b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80293bc:	68fb      	ldr	r3, [r7, #12]
 80293be:	681b      	ldr	r3, [r3, #0]
 80293c0:	687a      	ldr	r2, [r7, #4]
 80293c2:	68b9      	ldr	r1, [r7, #8]
 80293c4:	4618      	mov	r0, r3
 80293c6:	f000 fb89 	bl	8029adc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80293ca:	68bb      	ldr	r3, [r7, #8]
 80293cc:	681b      	ldr	r3, [r3, #0]
 80293ce:	2b02      	cmp	r3, #2
 80293d0:	d104      	bne.n	80293dc <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80293d2:	68fb      	ldr	r3, [r7, #12]
 80293d4:	2205      	movs	r2, #5
 80293d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80293da:	e003      	b.n	80293e4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80293dc:	68fb      	ldr	r3, [r7, #12]
 80293de:	2201      	movs	r2, #1
 80293e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80293e4:	2300      	movs	r3, #0
}
 80293e6:	4618      	mov	r0, r3
 80293e8:	3710      	adds	r7, #16
 80293ea:	46bd      	mov	sp, r7
 80293ec:	bd80      	pop	{r7, pc}

080293ee <HAL_SDRAM_SetAutoRefreshNumber>:
  *                the configuration information for SDRAM module.  
  * @param  AutoRefreshNumber The SDRAM auto Refresh number       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SetAutoRefreshNumber(SDRAM_HandleTypeDef *hsdram, uint32_t AutoRefreshNumber)
{
 80293ee:	b580      	push	{r7, lr}
 80293f0:	b082      	sub	sp, #8
 80293f2:	af00      	add	r7, sp, #0
 80293f4:	6078      	str	r0, [r7, #4]
 80293f6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80293f8:	687b      	ldr	r3, [r7, #4]
 80293fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80293fe:	b2db      	uxtb	r3, r3
 8029400:	2b02      	cmp	r3, #2
 8029402:	d101      	bne.n	8029408 <HAL_SDRAM_SetAutoRefreshNumber+0x1a>
  {
    return HAL_BUSY;
 8029404:	2302      	movs	r3, #2
 8029406:	e00e      	b.n	8029426 <HAL_SDRAM_SetAutoRefreshNumber+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8029408:	687b      	ldr	r3, [r7, #4]
 802940a:	2202      	movs	r2, #2
 802940c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Set the Auto-Refresh number */
  FMC_SDRAM_SetAutoRefreshNumber(hsdram->Instance ,AutoRefreshNumber);
 8029410:	687b      	ldr	r3, [r7, #4]
 8029412:	681b      	ldr	r3, [r3, #0]
 8029414:	6839      	ldr	r1, [r7, #0]
 8029416:	4618      	mov	r0, r3
 8029418:	f000 fb81 	bl	8029b1e <FMC_SDRAM_SetAutoRefreshNumber>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 802941c:	687b      	ldr	r3, [r7, #4]
 802941e:	2201      	movs	r2, #1
 8029420:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8029424:	2300      	movs	r3, #0
}
 8029426:	4618      	mov	r0, r3
 8029428:	3708      	adds	r7, #8
 802942a:	46bd      	mov	sp, r7
 802942c:	bd80      	pop	{r7, pc}

0802942e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 802942e:	b580      	push	{r7, lr}
 8029430:	b082      	sub	sp, #8
 8029432:	af00      	add	r7, sp, #0
 8029434:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8029436:	687b      	ldr	r3, [r7, #4]
 8029438:	2b00      	cmp	r3, #0
 802943a:	d101      	bne.n	8029440 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 802943c:	2301      	movs	r3, #1
 802943e:	e01d      	b.n	802947c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8029440:	687b      	ldr	r3, [r7, #4]
 8029442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029446:	b2db      	uxtb	r3, r3
 8029448:	2b00      	cmp	r3, #0
 802944a:	d106      	bne.n	802945a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802944c:	687b      	ldr	r3, [r7, #4]
 802944e:	2200      	movs	r2, #0
 8029450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8029454:	6878      	ldr	r0, [r7, #4]
 8029456:	f000 f815 	bl	8029484 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802945a:	687b      	ldr	r3, [r7, #4]
 802945c:	2202      	movs	r2, #2
 802945e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8029462:	687b      	ldr	r3, [r7, #4]
 8029464:	681a      	ldr	r2, [r3, #0]
 8029466:	687b      	ldr	r3, [r7, #4]
 8029468:	3304      	adds	r3, #4
 802946a:	4619      	mov	r1, r3
 802946c:	4610      	mov	r0, r2
 802946e:	f000 f985 	bl	802977c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8029472:	687b      	ldr	r3, [r7, #4]
 8029474:	2201      	movs	r2, #1
 8029476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802947a:	2300      	movs	r3, #0
}
 802947c:	4618      	mov	r0, r3
 802947e:	3708      	adds	r7, #8
 8029480:	46bd      	mov	sp, r7
 8029482:	bd80      	pop	{r7, pc}

08029484 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8029484:	b480      	push	{r7}
 8029486:	b083      	sub	sp, #12
 8029488:	af00      	add	r7, sp, #0
 802948a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 802948c:	bf00      	nop
 802948e:	370c      	adds	r7, #12
 8029490:	46bd      	mov	sp, r7
 8029492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029496:	4770      	bx	lr

08029498 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8029498:	b480      	push	{r7}
 802949a:	b085      	sub	sp, #20
 802949c:	af00      	add	r7, sp, #0
 802949e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80294a0:	687b      	ldr	r3, [r7, #4]
 80294a2:	681b      	ldr	r3, [r3, #0]
 80294a4:	68da      	ldr	r2, [r3, #12]
 80294a6:	687b      	ldr	r3, [r7, #4]
 80294a8:	681b      	ldr	r3, [r3, #0]
 80294aa:	f042 0201 	orr.w	r2, r2, #1
 80294ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80294b0:	687b      	ldr	r3, [r7, #4]
 80294b2:	681b      	ldr	r3, [r3, #0]
 80294b4:	689a      	ldr	r2, [r3, #8]
 80294b6:	4b0c      	ldr	r3, [pc, #48]	; (80294e8 <HAL_TIM_Base_Start_IT+0x50>)
 80294b8:	4013      	ands	r3, r2
 80294ba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80294bc:	68fb      	ldr	r3, [r7, #12]
 80294be:	2b06      	cmp	r3, #6
 80294c0:	d00b      	beq.n	80294da <HAL_TIM_Base_Start_IT+0x42>
 80294c2:	68fb      	ldr	r3, [r7, #12]
 80294c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80294c8:	d007      	beq.n	80294da <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80294ca:	687b      	ldr	r3, [r7, #4]
 80294cc:	681b      	ldr	r3, [r3, #0]
 80294ce:	681a      	ldr	r2, [r3, #0]
 80294d0:	687b      	ldr	r3, [r7, #4]
 80294d2:	681b      	ldr	r3, [r3, #0]
 80294d4:	f042 0201 	orr.w	r2, r2, #1
 80294d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80294da:	2300      	movs	r3, #0
}
 80294dc:	4618      	mov	r0, r3
 80294de:	3714      	adds	r7, #20
 80294e0:	46bd      	mov	sp, r7
 80294e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294e6:	4770      	bx	lr
 80294e8:	00010007 	.word	0x00010007

080294ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80294ec:	b580      	push	{r7, lr}
 80294ee:	b082      	sub	sp, #8
 80294f0:	af00      	add	r7, sp, #0
 80294f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80294f4:	687b      	ldr	r3, [r7, #4]
 80294f6:	681b      	ldr	r3, [r3, #0]
 80294f8:	691b      	ldr	r3, [r3, #16]
 80294fa:	f003 0302 	and.w	r3, r3, #2
 80294fe:	2b02      	cmp	r3, #2
 8029500:	d122      	bne.n	8029548 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8029502:	687b      	ldr	r3, [r7, #4]
 8029504:	681b      	ldr	r3, [r3, #0]
 8029506:	68db      	ldr	r3, [r3, #12]
 8029508:	f003 0302 	and.w	r3, r3, #2
 802950c:	2b02      	cmp	r3, #2
 802950e:	d11b      	bne.n	8029548 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8029510:	687b      	ldr	r3, [r7, #4]
 8029512:	681b      	ldr	r3, [r3, #0]
 8029514:	f06f 0202 	mvn.w	r2, #2
 8029518:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802951a:	687b      	ldr	r3, [r7, #4]
 802951c:	2201      	movs	r2, #1
 802951e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8029520:	687b      	ldr	r3, [r7, #4]
 8029522:	681b      	ldr	r3, [r3, #0]
 8029524:	699b      	ldr	r3, [r3, #24]
 8029526:	f003 0303 	and.w	r3, r3, #3
 802952a:	2b00      	cmp	r3, #0
 802952c:	d003      	beq.n	8029536 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802952e:	6878      	ldr	r0, [r7, #4]
 8029530:	f000 f905 	bl	802973e <HAL_TIM_IC_CaptureCallback>
 8029534:	e005      	b.n	8029542 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8029536:	6878      	ldr	r0, [r7, #4]
 8029538:	f000 f8f7 	bl	802972a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 802953c:	6878      	ldr	r0, [r7, #4]
 802953e:	f000 f908 	bl	8029752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029542:	687b      	ldr	r3, [r7, #4]
 8029544:	2200      	movs	r2, #0
 8029546:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8029548:	687b      	ldr	r3, [r7, #4]
 802954a:	681b      	ldr	r3, [r3, #0]
 802954c:	691b      	ldr	r3, [r3, #16]
 802954e:	f003 0304 	and.w	r3, r3, #4
 8029552:	2b04      	cmp	r3, #4
 8029554:	d122      	bne.n	802959c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8029556:	687b      	ldr	r3, [r7, #4]
 8029558:	681b      	ldr	r3, [r3, #0]
 802955a:	68db      	ldr	r3, [r3, #12]
 802955c:	f003 0304 	and.w	r3, r3, #4
 8029560:	2b04      	cmp	r3, #4
 8029562:	d11b      	bne.n	802959c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8029564:	687b      	ldr	r3, [r7, #4]
 8029566:	681b      	ldr	r3, [r3, #0]
 8029568:	f06f 0204 	mvn.w	r2, #4
 802956c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 802956e:	687b      	ldr	r3, [r7, #4]
 8029570:	2202      	movs	r2, #2
 8029572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8029574:	687b      	ldr	r3, [r7, #4]
 8029576:	681b      	ldr	r3, [r3, #0]
 8029578:	699b      	ldr	r3, [r3, #24]
 802957a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802957e:	2b00      	cmp	r3, #0
 8029580:	d003      	beq.n	802958a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029582:	6878      	ldr	r0, [r7, #4]
 8029584:	f000 f8db 	bl	802973e <HAL_TIM_IC_CaptureCallback>
 8029588:	e005      	b.n	8029596 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802958a:	6878      	ldr	r0, [r7, #4]
 802958c:	f000 f8cd 	bl	802972a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029590:	6878      	ldr	r0, [r7, #4]
 8029592:	f000 f8de 	bl	8029752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029596:	687b      	ldr	r3, [r7, #4]
 8029598:	2200      	movs	r2, #0
 802959a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 802959c:	687b      	ldr	r3, [r7, #4]
 802959e:	681b      	ldr	r3, [r3, #0]
 80295a0:	691b      	ldr	r3, [r3, #16]
 80295a2:	f003 0308 	and.w	r3, r3, #8
 80295a6:	2b08      	cmp	r3, #8
 80295a8:	d122      	bne.n	80295f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80295aa:	687b      	ldr	r3, [r7, #4]
 80295ac:	681b      	ldr	r3, [r3, #0]
 80295ae:	68db      	ldr	r3, [r3, #12]
 80295b0:	f003 0308 	and.w	r3, r3, #8
 80295b4:	2b08      	cmp	r3, #8
 80295b6:	d11b      	bne.n	80295f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80295b8:	687b      	ldr	r3, [r7, #4]
 80295ba:	681b      	ldr	r3, [r3, #0]
 80295bc:	f06f 0208 	mvn.w	r2, #8
 80295c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80295c2:	687b      	ldr	r3, [r7, #4]
 80295c4:	2204      	movs	r2, #4
 80295c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80295c8:	687b      	ldr	r3, [r7, #4]
 80295ca:	681b      	ldr	r3, [r3, #0]
 80295cc:	69db      	ldr	r3, [r3, #28]
 80295ce:	f003 0303 	and.w	r3, r3, #3
 80295d2:	2b00      	cmp	r3, #0
 80295d4:	d003      	beq.n	80295de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80295d6:	6878      	ldr	r0, [r7, #4]
 80295d8:	f000 f8b1 	bl	802973e <HAL_TIM_IC_CaptureCallback>
 80295dc:	e005      	b.n	80295ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80295de:	6878      	ldr	r0, [r7, #4]
 80295e0:	f000 f8a3 	bl	802972a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80295e4:	6878      	ldr	r0, [r7, #4]
 80295e6:	f000 f8b4 	bl	8029752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80295ea:	687b      	ldr	r3, [r7, #4]
 80295ec:	2200      	movs	r2, #0
 80295ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80295f0:	687b      	ldr	r3, [r7, #4]
 80295f2:	681b      	ldr	r3, [r3, #0]
 80295f4:	691b      	ldr	r3, [r3, #16]
 80295f6:	f003 0310 	and.w	r3, r3, #16
 80295fa:	2b10      	cmp	r3, #16
 80295fc:	d122      	bne.n	8029644 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80295fe:	687b      	ldr	r3, [r7, #4]
 8029600:	681b      	ldr	r3, [r3, #0]
 8029602:	68db      	ldr	r3, [r3, #12]
 8029604:	f003 0310 	and.w	r3, r3, #16
 8029608:	2b10      	cmp	r3, #16
 802960a:	d11b      	bne.n	8029644 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 802960c:	687b      	ldr	r3, [r7, #4]
 802960e:	681b      	ldr	r3, [r3, #0]
 8029610:	f06f 0210 	mvn.w	r2, #16
 8029614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8029616:	687b      	ldr	r3, [r7, #4]
 8029618:	2208      	movs	r2, #8
 802961a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 802961c:	687b      	ldr	r3, [r7, #4]
 802961e:	681b      	ldr	r3, [r3, #0]
 8029620:	69db      	ldr	r3, [r3, #28]
 8029622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8029626:	2b00      	cmp	r3, #0
 8029628:	d003      	beq.n	8029632 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802962a:	6878      	ldr	r0, [r7, #4]
 802962c:	f000 f887 	bl	802973e <HAL_TIM_IC_CaptureCallback>
 8029630:	e005      	b.n	802963e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029632:	6878      	ldr	r0, [r7, #4]
 8029634:	f000 f879 	bl	802972a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029638:	6878      	ldr	r0, [r7, #4]
 802963a:	f000 f88a 	bl	8029752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802963e:	687b      	ldr	r3, [r7, #4]
 8029640:	2200      	movs	r2, #0
 8029642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8029644:	687b      	ldr	r3, [r7, #4]
 8029646:	681b      	ldr	r3, [r3, #0]
 8029648:	691b      	ldr	r3, [r3, #16]
 802964a:	f003 0301 	and.w	r3, r3, #1
 802964e:	2b01      	cmp	r3, #1
 8029650:	d10e      	bne.n	8029670 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8029652:	687b      	ldr	r3, [r7, #4]
 8029654:	681b      	ldr	r3, [r3, #0]
 8029656:	68db      	ldr	r3, [r3, #12]
 8029658:	f003 0301 	and.w	r3, r3, #1
 802965c:	2b01      	cmp	r3, #1
 802965e:	d107      	bne.n	8029670 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8029660:	687b      	ldr	r3, [r7, #4]
 8029662:	681b      	ldr	r3, [r3, #0]
 8029664:	f06f 0201 	mvn.w	r2, #1
 8029668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 802966a:	6878      	ldr	r0, [r7, #4]
 802966c:	f7d7 fe58 	bl	8001320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8029670:	687b      	ldr	r3, [r7, #4]
 8029672:	681b      	ldr	r3, [r3, #0]
 8029674:	691b      	ldr	r3, [r3, #16]
 8029676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802967a:	2b80      	cmp	r3, #128	; 0x80
 802967c:	d10e      	bne.n	802969c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802967e:	687b      	ldr	r3, [r7, #4]
 8029680:	681b      	ldr	r3, [r3, #0]
 8029682:	68db      	ldr	r3, [r3, #12]
 8029684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029688:	2b80      	cmp	r3, #128	; 0x80
 802968a:	d107      	bne.n	802969c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 802968c:	687b      	ldr	r3, [r7, #4]
 802968e:	681b      	ldr	r3, [r3, #0]
 8029690:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8029694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8029696:	6878      	ldr	r0, [r7, #4]
 8029698:	f000 f91a 	bl	80298d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 802969c:	687b      	ldr	r3, [r7, #4]
 802969e:	681b      	ldr	r3, [r3, #0]
 80296a0:	691b      	ldr	r3, [r3, #16]
 80296a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80296a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80296aa:	d10e      	bne.n	80296ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80296ac:	687b      	ldr	r3, [r7, #4]
 80296ae:	681b      	ldr	r3, [r3, #0]
 80296b0:	68db      	ldr	r3, [r3, #12]
 80296b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80296b6:	2b80      	cmp	r3, #128	; 0x80
 80296b8:	d107      	bne.n	80296ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80296ba:	687b      	ldr	r3, [r7, #4]
 80296bc:	681b      	ldr	r3, [r3, #0]
 80296be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80296c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80296c4:	6878      	ldr	r0, [r7, #4]
 80296c6:	f000 f90d 	bl	80298e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80296ca:	687b      	ldr	r3, [r7, #4]
 80296cc:	681b      	ldr	r3, [r3, #0]
 80296ce:	691b      	ldr	r3, [r3, #16]
 80296d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80296d4:	2b40      	cmp	r3, #64	; 0x40
 80296d6:	d10e      	bne.n	80296f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80296d8:	687b      	ldr	r3, [r7, #4]
 80296da:	681b      	ldr	r3, [r3, #0]
 80296dc:	68db      	ldr	r3, [r3, #12]
 80296de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80296e2:	2b40      	cmp	r3, #64	; 0x40
 80296e4:	d107      	bne.n	80296f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80296e6:	687b      	ldr	r3, [r7, #4]
 80296e8:	681b      	ldr	r3, [r3, #0]
 80296ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80296ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80296f0:	6878      	ldr	r0, [r7, #4]
 80296f2:	f000 f838 	bl	8029766 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80296f6:	687b      	ldr	r3, [r7, #4]
 80296f8:	681b      	ldr	r3, [r3, #0]
 80296fa:	691b      	ldr	r3, [r3, #16]
 80296fc:	f003 0320 	and.w	r3, r3, #32
 8029700:	2b20      	cmp	r3, #32
 8029702:	d10e      	bne.n	8029722 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8029704:	687b      	ldr	r3, [r7, #4]
 8029706:	681b      	ldr	r3, [r3, #0]
 8029708:	68db      	ldr	r3, [r3, #12]
 802970a:	f003 0320 	and.w	r3, r3, #32
 802970e:	2b20      	cmp	r3, #32
 8029710:	d107      	bne.n	8029722 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8029712:	687b      	ldr	r3, [r7, #4]
 8029714:	681b      	ldr	r3, [r3, #0]
 8029716:	f06f 0220 	mvn.w	r2, #32
 802971a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802971c:	6878      	ldr	r0, [r7, #4]
 802971e:	f000 f8cd 	bl	80298bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8029722:	bf00      	nop
 8029724:	3708      	adds	r7, #8
 8029726:	46bd      	mov	sp, r7
 8029728:	bd80      	pop	{r7, pc}

0802972a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 802972a:	b480      	push	{r7}
 802972c:	b083      	sub	sp, #12
 802972e:	af00      	add	r7, sp, #0
 8029730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8029732:	bf00      	nop
 8029734:	370c      	adds	r7, #12
 8029736:	46bd      	mov	sp, r7
 8029738:	f85d 7b04 	ldr.w	r7, [sp], #4
 802973c:	4770      	bx	lr

0802973e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 802973e:	b480      	push	{r7}
 8029740:	b083      	sub	sp, #12
 8029742:	af00      	add	r7, sp, #0
 8029744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8029746:	bf00      	nop
 8029748:	370c      	adds	r7, #12
 802974a:	46bd      	mov	sp, r7
 802974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029750:	4770      	bx	lr

08029752 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8029752:	b480      	push	{r7}
 8029754:	b083      	sub	sp, #12
 8029756:	af00      	add	r7, sp, #0
 8029758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 802975a:	bf00      	nop
 802975c:	370c      	adds	r7, #12
 802975e:	46bd      	mov	sp, r7
 8029760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029764:	4770      	bx	lr

08029766 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8029766:	b480      	push	{r7}
 8029768:	b083      	sub	sp, #12
 802976a:	af00      	add	r7, sp, #0
 802976c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802976e:	bf00      	nop
 8029770:	370c      	adds	r7, #12
 8029772:	46bd      	mov	sp, r7
 8029774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029778:	4770      	bx	lr
	...

0802977c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 802977c:	b480      	push	{r7}
 802977e:	b085      	sub	sp, #20
 8029780:	af00      	add	r7, sp, #0
 8029782:	6078      	str	r0, [r7, #4]
 8029784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8029786:	687b      	ldr	r3, [r7, #4]
 8029788:	681b      	ldr	r3, [r3, #0]
 802978a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 802978c:	687b      	ldr	r3, [r7, #4]
 802978e:	4a40      	ldr	r2, [pc, #256]	; (8029890 <TIM_Base_SetConfig+0x114>)
 8029790:	4293      	cmp	r3, r2
 8029792:	d013      	beq.n	80297bc <TIM_Base_SetConfig+0x40>
 8029794:	687b      	ldr	r3, [r7, #4]
 8029796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802979a:	d00f      	beq.n	80297bc <TIM_Base_SetConfig+0x40>
 802979c:	687b      	ldr	r3, [r7, #4]
 802979e:	4a3d      	ldr	r2, [pc, #244]	; (8029894 <TIM_Base_SetConfig+0x118>)
 80297a0:	4293      	cmp	r3, r2
 80297a2:	d00b      	beq.n	80297bc <TIM_Base_SetConfig+0x40>
 80297a4:	687b      	ldr	r3, [r7, #4]
 80297a6:	4a3c      	ldr	r2, [pc, #240]	; (8029898 <TIM_Base_SetConfig+0x11c>)
 80297a8:	4293      	cmp	r3, r2
 80297aa:	d007      	beq.n	80297bc <TIM_Base_SetConfig+0x40>
 80297ac:	687b      	ldr	r3, [r7, #4]
 80297ae:	4a3b      	ldr	r2, [pc, #236]	; (802989c <TIM_Base_SetConfig+0x120>)
 80297b0:	4293      	cmp	r3, r2
 80297b2:	d003      	beq.n	80297bc <TIM_Base_SetConfig+0x40>
 80297b4:	687b      	ldr	r3, [r7, #4]
 80297b6:	4a3a      	ldr	r2, [pc, #232]	; (80298a0 <TIM_Base_SetConfig+0x124>)
 80297b8:	4293      	cmp	r3, r2
 80297ba:	d108      	bne.n	80297ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80297bc:	68fb      	ldr	r3, [r7, #12]
 80297be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80297c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80297c4:	683b      	ldr	r3, [r7, #0]
 80297c6:	685b      	ldr	r3, [r3, #4]
 80297c8:	68fa      	ldr	r2, [r7, #12]
 80297ca:	4313      	orrs	r3, r2
 80297cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80297ce:	687b      	ldr	r3, [r7, #4]
 80297d0:	4a2f      	ldr	r2, [pc, #188]	; (8029890 <TIM_Base_SetConfig+0x114>)
 80297d2:	4293      	cmp	r3, r2
 80297d4:	d02b      	beq.n	802982e <TIM_Base_SetConfig+0xb2>
 80297d6:	687b      	ldr	r3, [r7, #4]
 80297d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80297dc:	d027      	beq.n	802982e <TIM_Base_SetConfig+0xb2>
 80297de:	687b      	ldr	r3, [r7, #4]
 80297e0:	4a2c      	ldr	r2, [pc, #176]	; (8029894 <TIM_Base_SetConfig+0x118>)
 80297e2:	4293      	cmp	r3, r2
 80297e4:	d023      	beq.n	802982e <TIM_Base_SetConfig+0xb2>
 80297e6:	687b      	ldr	r3, [r7, #4]
 80297e8:	4a2b      	ldr	r2, [pc, #172]	; (8029898 <TIM_Base_SetConfig+0x11c>)
 80297ea:	4293      	cmp	r3, r2
 80297ec:	d01f      	beq.n	802982e <TIM_Base_SetConfig+0xb2>
 80297ee:	687b      	ldr	r3, [r7, #4]
 80297f0:	4a2a      	ldr	r2, [pc, #168]	; (802989c <TIM_Base_SetConfig+0x120>)
 80297f2:	4293      	cmp	r3, r2
 80297f4:	d01b      	beq.n	802982e <TIM_Base_SetConfig+0xb2>
 80297f6:	687b      	ldr	r3, [r7, #4]
 80297f8:	4a29      	ldr	r2, [pc, #164]	; (80298a0 <TIM_Base_SetConfig+0x124>)
 80297fa:	4293      	cmp	r3, r2
 80297fc:	d017      	beq.n	802982e <TIM_Base_SetConfig+0xb2>
 80297fe:	687b      	ldr	r3, [r7, #4]
 8029800:	4a28      	ldr	r2, [pc, #160]	; (80298a4 <TIM_Base_SetConfig+0x128>)
 8029802:	4293      	cmp	r3, r2
 8029804:	d013      	beq.n	802982e <TIM_Base_SetConfig+0xb2>
 8029806:	687b      	ldr	r3, [r7, #4]
 8029808:	4a27      	ldr	r2, [pc, #156]	; (80298a8 <TIM_Base_SetConfig+0x12c>)
 802980a:	4293      	cmp	r3, r2
 802980c:	d00f      	beq.n	802982e <TIM_Base_SetConfig+0xb2>
 802980e:	687b      	ldr	r3, [r7, #4]
 8029810:	4a26      	ldr	r2, [pc, #152]	; (80298ac <TIM_Base_SetConfig+0x130>)
 8029812:	4293      	cmp	r3, r2
 8029814:	d00b      	beq.n	802982e <TIM_Base_SetConfig+0xb2>
 8029816:	687b      	ldr	r3, [r7, #4]
 8029818:	4a25      	ldr	r2, [pc, #148]	; (80298b0 <TIM_Base_SetConfig+0x134>)
 802981a:	4293      	cmp	r3, r2
 802981c:	d007      	beq.n	802982e <TIM_Base_SetConfig+0xb2>
 802981e:	687b      	ldr	r3, [r7, #4]
 8029820:	4a24      	ldr	r2, [pc, #144]	; (80298b4 <TIM_Base_SetConfig+0x138>)
 8029822:	4293      	cmp	r3, r2
 8029824:	d003      	beq.n	802982e <TIM_Base_SetConfig+0xb2>
 8029826:	687b      	ldr	r3, [r7, #4]
 8029828:	4a23      	ldr	r2, [pc, #140]	; (80298b8 <TIM_Base_SetConfig+0x13c>)
 802982a:	4293      	cmp	r3, r2
 802982c:	d108      	bne.n	8029840 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802982e:	68fb      	ldr	r3, [r7, #12]
 8029830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8029836:	683b      	ldr	r3, [r7, #0]
 8029838:	68db      	ldr	r3, [r3, #12]
 802983a:	68fa      	ldr	r2, [r7, #12]
 802983c:	4313      	orrs	r3, r2
 802983e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8029840:	68fb      	ldr	r3, [r7, #12]
 8029842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8029846:	683b      	ldr	r3, [r7, #0]
 8029848:	695b      	ldr	r3, [r3, #20]
 802984a:	4313      	orrs	r3, r2
 802984c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802984e:	687b      	ldr	r3, [r7, #4]
 8029850:	68fa      	ldr	r2, [r7, #12]
 8029852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8029854:	683b      	ldr	r3, [r7, #0]
 8029856:	689a      	ldr	r2, [r3, #8]
 8029858:	687b      	ldr	r3, [r7, #4]
 802985a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 802985c:	683b      	ldr	r3, [r7, #0]
 802985e:	681a      	ldr	r2, [r3, #0]
 8029860:	687b      	ldr	r3, [r7, #4]
 8029862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8029864:	687b      	ldr	r3, [r7, #4]
 8029866:	4a0a      	ldr	r2, [pc, #40]	; (8029890 <TIM_Base_SetConfig+0x114>)
 8029868:	4293      	cmp	r3, r2
 802986a:	d003      	beq.n	8029874 <TIM_Base_SetConfig+0xf8>
 802986c:	687b      	ldr	r3, [r7, #4]
 802986e:	4a0c      	ldr	r2, [pc, #48]	; (80298a0 <TIM_Base_SetConfig+0x124>)
 8029870:	4293      	cmp	r3, r2
 8029872:	d103      	bne.n	802987c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8029874:	683b      	ldr	r3, [r7, #0]
 8029876:	691a      	ldr	r2, [r3, #16]
 8029878:	687b      	ldr	r3, [r7, #4]
 802987a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 802987c:	687b      	ldr	r3, [r7, #4]
 802987e:	2201      	movs	r2, #1
 8029880:	615a      	str	r2, [r3, #20]
}
 8029882:	bf00      	nop
 8029884:	3714      	adds	r7, #20
 8029886:	46bd      	mov	sp, r7
 8029888:	f85d 7b04 	ldr.w	r7, [sp], #4
 802988c:	4770      	bx	lr
 802988e:	bf00      	nop
 8029890:	40010000 	.word	0x40010000
 8029894:	40000400 	.word	0x40000400
 8029898:	40000800 	.word	0x40000800
 802989c:	40000c00 	.word	0x40000c00
 80298a0:	40010400 	.word	0x40010400
 80298a4:	40014000 	.word	0x40014000
 80298a8:	40014400 	.word	0x40014400
 80298ac:	40014800 	.word	0x40014800
 80298b0:	40001800 	.word	0x40001800
 80298b4:	40001c00 	.word	0x40001c00
 80298b8:	40002000 	.word	0x40002000

080298bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80298bc:	b480      	push	{r7}
 80298be:	b083      	sub	sp, #12
 80298c0:	af00      	add	r7, sp, #0
 80298c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80298c4:	bf00      	nop
 80298c6:	370c      	adds	r7, #12
 80298c8:	46bd      	mov	sp, r7
 80298ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80298ce:	4770      	bx	lr

080298d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80298d0:	b480      	push	{r7}
 80298d2:	b083      	sub	sp, #12
 80298d4:	af00      	add	r7, sp, #0
 80298d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80298d8:	bf00      	nop
 80298da:	370c      	adds	r7, #12
 80298dc:	46bd      	mov	sp, r7
 80298de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80298e2:	4770      	bx	lr

080298e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80298e4:	b480      	push	{r7}
 80298e6:	b083      	sub	sp, #12
 80298e8:	af00      	add	r7, sp, #0
 80298ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80298ec:	bf00      	nop
 80298ee:	370c      	adds	r7, #12
 80298f0:	46bd      	mov	sp, r7
 80298f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80298f6:	4770      	bx	lr

080298f8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80298f8:	b480      	push	{r7}
 80298fa:	b085      	sub	sp, #20
 80298fc:	af00      	add	r7, sp, #0
 80298fe:	6078      	str	r0, [r7, #4]
 8029900:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8029902:	2300      	movs	r3, #0
 8029904:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8029906:	2300      	movs	r3, #0
 8029908:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 802990a:	683b      	ldr	r3, [r7, #0]
 802990c:	681b      	ldr	r3, [r3, #0]
 802990e:	2b01      	cmp	r3, #1
 8029910:	d027      	beq.n	8029962 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8029912:	687b      	ldr	r3, [r7, #4]
 8029914:	681b      	ldr	r3, [r3, #0]
 8029916:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8029918:	68fa      	ldr	r2, [r7, #12]
 802991a:	4b2f      	ldr	r3, [pc, #188]	; (80299d8 <FMC_SDRAM_Init+0xe0>)
 802991c:	4013      	ands	r3, r2
 802991e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8029920:	683b      	ldr	r3, [r7, #0]
 8029922:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8029924:	683b      	ldr	r3, [r7, #0]
 8029926:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8029928:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 802992a:	683b      	ldr	r3, [r7, #0]
 802992c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 802992e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8029930:	683b      	ldr	r3, [r7, #0]
 8029932:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8029934:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8029936:	683b      	ldr	r3, [r7, #0]
 8029938:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 802993a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 802993c:	683b      	ldr	r3, [r7, #0]
 802993e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8029940:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8029942:	683b      	ldr	r3, [r7, #0]
 8029944:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8029946:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8029948:	683b      	ldr	r3, [r7, #0]
 802994a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 802994c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 802994e:	683b      	ldr	r3, [r7, #0]
 8029950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8029952:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8029954:	68fa      	ldr	r2, [r7, #12]
 8029956:	4313      	orrs	r3, r2
 8029958:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 802995a:	687b      	ldr	r3, [r7, #4]
 802995c:	68fa      	ldr	r2, [r7, #12]
 802995e:	601a      	str	r2, [r3, #0]
 8029960:	e032      	b.n	80299c8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8029962:	687b      	ldr	r3, [r7, #4]
 8029964:	681b      	ldr	r3, [r3, #0]
 8029966:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8029968:	68fb      	ldr	r3, [r7, #12]
 802996a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 802996e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8029970:	683b      	ldr	r3, [r7, #0]
 8029972:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8029974:	683b      	ldr	r3, [r7, #0]
 8029976:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8029978:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 802997a:	683b      	ldr	r3, [r7, #0]
 802997c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 802997e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8029980:	68fa      	ldr	r2, [r7, #12]
 8029982:	4313      	orrs	r3, r2
 8029984:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8029986:	687b      	ldr	r3, [r7, #4]
 8029988:	685b      	ldr	r3, [r3, #4]
 802998a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 802998c:	68ba      	ldr	r2, [r7, #8]
 802998e:	4b12      	ldr	r3, [pc, #72]	; (80299d8 <FMC_SDRAM_Init+0xe0>)
 8029990:	4013      	ands	r3, r2
 8029992:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8029994:	683b      	ldr	r3, [r7, #0]
 8029996:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8029998:	683b      	ldr	r3, [r7, #0]
 802999a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 802999c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 802999e:	683b      	ldr	r3, [r7, #0]
 80299a0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80299a2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80299a4:	683b      	ldr	r3, [r7, #0]
 80299a6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80299a8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80299aa:	683b      	ldr	r3, [r7, #0]
 80299ac:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80299ae:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80299b0:	683b      	ldr	r3, [r7, #0]
 80299b2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80299b4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80299b6:	68ba      	ldr	r2, [r7, #8]
 80299b8:	4313      	orrs	r3, r2
 80299ba:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80299bc:	687b      	ldr	r3, [r7, #4]
 80299be:	68fa      	ldr	r2, [r7, #12]
 80299c0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80299c2:	687b      	ldr	r3, [r7, #4]
 80299c4:	68ba      	ldr	r2, [r7, #8]
 80299c6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80299c8:	2300      	movs	r3, #0
}
 80299ca:	4618      	mov	r0, r3
 80299cc:	3714      	adds	r7, #20
 80299ce:	46bd      	mov	sp, r7
 80299d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80299d4:	4770      	bx	lr
 80299d6:	bf00      	nop
 80299d8:	ffff8000 	.word	0xffff8000

080299dc <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80299dc:	b480      	push	{r7}
 80299de:	b087      	sub	sp, #28
 80299e0:	af00      	add	r7, sp, #0
 80299e2:	60f8      	str	r0, [r7, #12]
 80299e4:	60b9      	str	r1, [r7, #8]
 80299e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80299e8:	2300      	movs	r3, #0
 80299ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80299ec:	2300      	movs	r3, #0
 80299ee:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80299f0:	687b      	ldr	r3, [r7, #4]
 80299f2:	2b01      	cmp	r3, #1
 80299f4:	d02e      	beq.n	8029a54 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80299f6:	68fb      	ldr	r3, [r7, #12]
 80299f8:	689b      	ldr	r3, [r3, #8]
 80299fa:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80299fc:	697b      	ldr	r3, [r7, #20]
 80299fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8029a02:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8029a04:	68bb      	ldr	r3, [r7, #8]
 8029a06:	681b      	ldr	r3, [r3, #0]
 8029a08:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8029a0a:	68bb      	ldr	r3, [r7, #8]
 8029a0c:	685b      	ldr	r3, [r3, #4]
 8029a0e:	3b01      	subs	r3, #1
 8029a10:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8029a12:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8029a14:	68bb      	ldr	r3, [r7, #8]
 8029a16:	689b      	ldr	r3, [r3, #8]
 8029a18:	3b01      	subs	r3, #1
 8029a1a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8029a1c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8029a1e:	68bb      	ldr	r3, [r7, #8]
 8029a20:	68db      	ldr	r3, [r3, #12]
 8029a22:	3b01      	subs	r3, #1
 8029a24:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8029a26:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8029a28:	68bb      	ldr	r3, [r7, #8]
 8029a2a:	691b      	ldr	r3, [r3, #16]
 8029a2c:	3b01      	subs	r3, #1
 8029a2e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8029a30:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8029a32:	68bb      	ldr	r3, [r7, #8]
 8029a34:	695b      	ldr	r3, [r3, #20]
 8029a36:	3b01      	subs	r3, #1
 8029a38:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8029a3a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8029a3c:	68bb      	ldr	r3, [r7, #8]
 8029a3e:	699b      	ldr	r3, [r3, #24]
 8029a40:	3b01      	subs	r3, #1
 8029a42:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8029a44:	4313      	orrs	r3, r2
 8029a46:	697a      	ldr	r2, [r7, #20]
 8029a48:	4313      	orrs	r3, r2
 8029a4a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8029a4c:	68fb      	ldr	r3, [r7, #12]
 8029a4e:	697a      	ldr	r2, [r7, #20]
 8029a50:	609a      	str	r2, [r3, #8]
 8029a52:	e039      	b.n	8029ac8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8029a54:	68fb      	ldr	r3, [r7, #12]
 8029a56:	689b      	ldr	r3, [r3, #8]
 8029a58:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8029a5a:	697a      	ldr	r2, [r7, #20]
 8029a5c:	4b1e      	ldr	r3, [pc, #120]	; (8029ad8 <FMC_SDRAM_Timing_Init+0xfc>)
 8029a5e:	4013      	ands	r3, r2
 8029a60:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8029a62:	68bb      	ldr	r3, [r7, #8]
 8029a64:	68db      	ldr	r3, [r3, #12]
 8029a66:	3b01      	subs	r3, #1
 8029a68:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8029a6a:	68bb      	ldr	r3, [r7, #8]
 8029a6c:	695b      	ldr	r3, [r3, #20]
 8029a6e:	3b01      	subs	r3, #1
 8029a70:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8029a72:	4313      	orrs	r3, r2
 8029a74:	697a      	ldr	r2, [r7, #20]
 8029a76:	4313      	orrs	r3, r2
 8029a78:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8029a7a:	68fb      	ldr	r3, [r7, #12]
 8029a7c:	68db      	ldr	r3, [r3, #12]
 8029a7e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8029a80:	693b      	ldr	r3, [r7, #16]
 8029a82:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8029a86:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8029a88:	68bb      	ldr	r3, [r7, #8]
 8029a8a:	681b      	ldr	r3, [r3, #0]
 8029a8c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8029a8e:	68bb      	ldr	r3, [r7, #8]
 8029a90:	685b      	ldr	r3, [r3, #4]
 8029a92:	3b01      	subs	r3, #1
 8029a94:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8029a96:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8029a98:	68bb      	ldr	r3, [r7, #8]
 8029a9a:	689b      	ldr	r3, [r3, #8]
 8029a9c:	3b01      	subs	r3, #1
 8029a9e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8029aa0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8029aa2:	68bb      	ldr	r3, [r7, #8]
 8029aa4:	691b      	ldr	r3, [r3, #16]
 8029aa6:	3b01      	subs	r3, #1
 8029aa8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8029aaa:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8029aac:	68bb      	ldr	r3, [r7, #8]
 8029aae:	699b      	ldr	r3, [r3, #24]
 8029ab0:	3b01      	subs	r3, #1
 8029ab2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8029ab4:	4313      	orrs	r3, r2
 8029ab6:	693a      	ldr	r2, [r7, #16]
 8029ab8:	4313      	orrs	r3, r2
 8029aba:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8029abc:	68fb      	ldr	r3, [r7, #12]
 8029abe:	697a      	ldr	r2, [r7, #20]
 8029ac0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8029ac2:	68fb      	ldr	r3, [r7, #12]
 8029ac4:	693a      	ldr	r2, [r7, #16]
 8029ac6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8029ac8:	2300      	movs	r3, #0
}
 8029aca:	4618      	mov	r0, r3
 8029acc:	371c      	adds	r7, #28
 8029ace:	46bd      	mov	sp, r7
 8029ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ad4:	4770      	bx	lr
 8029ad6:	bf00      	nop
 8029ad8:	ff0f0fff 	.word	0xff0f0fff

08029adc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8029adc:	b480      	push	{r7}
 8029ade:	b087      	sub	sp, #28
 8029ae0:	af00      	add	r7, sp, #0
 8029ae2:	60f8      	str	r0, [r7, #12]
 8029ae4:	60b9      	str	r1, [r7, #8]
 8029ae6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8029ae8:	2300      	movs	r3, #0
 8029aea:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8029aec:	68bb      	ldr	r3, [r7, #8]
 8029aee:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8029af0:	68bb      	ldr	r3, [r7, #8]
 8029af2:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8029af4:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8029af6:	68bb      	ldr	r3, [r7, #8]
 8029af8:	689b      	ldr	r3, [r3, #8]
 8029afa:	3b01      	subs	r3, #1
 8029afc:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8029afe:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8029b00:	68bb      	ldr	r3, [r7, #8]
 8029b02:	68db      	ldr	r3, [r3, #12]
 8029b04:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8029b06:	4313      	orrs	r3, r2
 8029b08:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8029b0a:	697a      	ldr	r2, [r7, #20]
 8029b0c:	68fb      	ldr	r3, [r7, #12]
 8029b0e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8029b10:	2300      	movs	r3, #0
}
 8029b12:	4618      	mov	r0, r3
 8029b14:	371c      	adds	r7, #28
 8029b16:	46bd      	mov	sp, r7
 8029b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b1c:	4770      	bx	lr

08029b1e <FMC_SDRAM_SetAutoRefreshNumber>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  AutoRefreshNumber Specifies the auto Refresh number.       
  * @retval None
  */
HAL_StatusTypeDef FMC_SDRAM_SetAutoRefreshNumber(FMC_SDRAM_TypeDef *Device, uint32_t AutoRefreshNumber)
{
 8029b1e:	b480      	push	{r7}
 8029b20:	b083      	sub	sp, #12
 8029b22:	af00      	add	r7, sp, #0
 8029b24:	6078      	str	r0, [r7, #4]
 8029b26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(AutoRefreshNumber));
  
  /* Set the Auto-refresh number in command register */
  Device->SDCMR |= (AutoRefreshNumber << 5); 
 8029b28:	687b      	ldr	r3, [r7, #4]
 8029b2a:	691a      	ldr	r2, [r3, #16]
 8029b2c:	683b      	ldr	r3, [r7, #0]
 8029b2e:	015b      	lsls	r3, r3, #5
 8029b30:	431a      	orrs	r2, r3
 8029b32:	687b      	ldr	r3, [r7, #4]
 8029b34:	611a      	str	r2, [r3, #16]

  return HAL_OK;  
 8029b36:	2300      	movs	r3, #0
}
 8029b38:	4618      	mov	r0, r3
 8029b3a:	370c      	adds	r7, #12
 8029b3c:	46bd      	mov	sp, r7
 8029b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b42:	4770      	bx	lr

08029b44 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8029b44:	b084      	sub	sp, #16
 8029b46:	b480      	push	{r7}
 8029b48:	b085      	sub	sp, #20
 8029b4a:	af00      	add	r7, sp, #0
 8029b4c:	6078      	str	r0, [r7, #4]
 8029b4e:	f107 001c 	add.w	r0, r7, #28
 8029b52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8029b56:	2300      	movs	r3, #0
 8029b58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8029b5a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8029b5c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8029b5e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8029b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8029b62:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8029b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8029b66:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8029b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8029b6a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8029b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8029b6e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8029b70:	68fa      	ldr	r2, [r7, #12]
 8029b72:	4313      	orrs	r3, r2
 8029b74:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8029b76:	687b      	ldr	r3, [r7, #4]
 8029b78:	685a      	ldr	r2, [r3, #4]
 8029b7a:	4b07      	ldr	r3, [pc, #28]	; (8029b98 <SDMMC_Init+0x54>)
 8029b7c:	4013      	ands	r3, r2
 8029b7e:	68fa      	ldr	r2, [r7, #12]
 8029b80:	431a      	orrs	r2, r3
 8029b82:	687b      	ldr	r3, [r7, #4]
 8029b84:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8029b86:	2300      	movs	r3, #0
}
 8029b88:	4618      	mov	r0, r3
 8029b8a:	3714      	adds	r7, #20
 8029b8c:	46bd      	mov	sp, r7
 8029b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b92:	b004      	add	sp, #16
 8029b94:	4770      	bx	lr
 8029b96:	bf00      	nop
 8029b98:	ffff8100 	.word	0xffff8100

08029b9c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8029b9c:	b480      	push	{r7}
 8029b9e:	b083      	sub	sp, #12
 8029ba0:	af00      	add	r7, sp, #0
 8029ba2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8029ba4:	687b      	ldr	r3, [r7, #4]
 8029ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8029baa:	4618      	mov	r0, r3
 8029bac:	370c      	adds	r7, #12
 8029bae:	46bd      	mov	sp, r7
 8029bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029bb4:	4770      	bx	lr

08029bb6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8029bb6:	b480      	push	{r7}
 8029bb8:	b083      	sub	sp, #12
 8029bba:	af00      	add	r7, sp, #0
 8029bbc:	6078      	str	r0, [r7, #4]
 8029bbe:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8029bc0:	683b      	ldr	r3, [r7, #0]
 8029bc2:	681a      	ldr	r2, [r3, #0]
 8029bc4:	687b      	ldr	r3, [r7, #4]
 8029bc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8029bca:	2300      	movs	r3, #0
}
 8029bcc:	4618      	mov	r0, r3
 8029bce:	370c      	adds	r7, #12
 8029bd0:	46bd      	mov	sp, r7
 8029bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029bd6:	4770      	bx	lr

08029bd8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8029bd8:	b580      	push	{r7, lr}
 8029bda:	b082      	sub	sp, #8
 8029bdc:	af00      	add	r7, sp, #0
 8029bde:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8029be0:	687b      	ldr	r3, [r7, #4]
 8029be2:	2203      	movs	r2, #3
 8029be4:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8029be6:	2002      	movs	r0, #2
 8029be8:	f7fb fc66 	bl	80254b8 <HAL_Delay>
  
  return HAL_OK;
 8029bec:	2300      	movs	r3, #0
}
 8029bee:	4618      	mov	r0, r3
 8029bf0:	3708      	adds	r7, #8
 8029bf2:	46bd      	mov	sp, r7
 8029bf4:	bd80      	pop	{r7, pc}

08029bf6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8029bf6:	b480      	push	{r7}
 8029bf8:	b083      	sub	sp, #12
 8029bfa:	af00      	add	r7, sp, #0
 8029bfc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8029bfe:	687b      	ldr	r3, [r7, #4]
 8029c00:	681b      	ldr	r3, [r3, #0]
 8029c02:	f003 0303 	and.w	r3, r3, #3
}
 8029c06:	4618      	mov	r0, r3
 8029c08:	370c      	adds	r7, #12
 8029c0a:	46bd      	mov	sp, r7
 8029c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c10:	4770      	bx	lr
	...

08029c14 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8029c14:	b480      	push	{r7}
 8029c16:	b085      	sub	sp, #20
 8029c18:	af00      	add	r7, sp, #0
 8029c1a:	6078      	str	r0, [r7, #4]
 8029c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8029c1e:	2300      	movs	r3, #0
 8029c20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8029c22:	683b      	ldr	r3, [r7, #0]
 8029c24:	681a      	ldr	r2, [r3, #0]
 8029c26:	687b      	ldr	r3, [r7, #4]
 8029c28:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8029c2a:	683b      	ldr	r3, [r7, #0]
 8029c2c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8029c2e:	683b      	ldr	r3, [r7, #0]
 8029c30:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8029c32:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8029c34:	683b      	ldr	r3, [r7, #0]
 8029c36:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8029c38:	431a      	orrs	r2, r3
                       Command->CPSM);
 8029c3a:	683b      	ldr	r3, [r7, #0]
 8029c3c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8029c3e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8029c40:	68fa      	ldr	r2, [r7, #12]
 8029c42:	4313      	orrs	r3, r2
 8029c44:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8029c46:	687b      	ldr	r3, [r7, #4]
 8029c48:	68da      	ldr	r2, [r3, #12]
 8029c4a:	4b06      	ldr	r3, [pc, #24]	; (8029c64 <SDMMC_SendCommand+0x50>)
 8029c4c:	4013      	ands	r3, r2
 8029c4e:	68fa      	ldr	r2, [r7, #12]
 8029c50:	431a      	orrs	r2, r3
 8029c52:	687b      	ldr	r3, [r7, #4]
 8029c54:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8029c56:	2300      	movs	r3, #0
}
 8029c58:	4618      	mov	r0, r3
 8029c5a:	3714      	adds	r7, #20
 8029c5c:	46bd      	mov	sp, r7
 8029c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c62:	4770      	bx	lr
 8029c64:	fffff000 	.word	0xfffff000

08029c68 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8029c68:	b480      	push	{r7}
 8029c6a:	b083      	sub	sp, #12
 8029c6c:	af00      	add	r7, sp, #0
 8029c6e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8029c70:	687b      	ldr	r3, [r7, #4]
 8029c72:	691b      	ldr	r3, [r3, #16]
 8029c74:	b2db      	uxtb	r3, r3
}
 8029c76:	4618      	mov	r0, r3
 8029c78:	370c      	adds	r7, #12
 8029c7a:	46bd      	mov	sp, r7
 8029c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c80:	4770      	bx	lr

08029c82 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8029c82:	b480      	push	{r7}
 8029c84:	b085      	sub	sp, #20
 8029c86:	af00      	add	r7, sp, #0
 8029c88:	6078      	str	r0, [r7, #4]
 8029c8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8029c8c:	687b      	ldr	r3, [r7, #4]
 8029c8e:	3314      	adds	r3, #20
 8029c90:	461a      	mov	r2, r3
 8029c92:	683b      	ldr	r3, [r7, #0]
 8029c94:	4413      	add	r3, r2
 8029c96:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8029c98:	68fb      	ldr	r3, [r7, #12]
 8029c9a:	681b      	ldr	r3, [r3, #0]
}  
 8029c9c:	4618      	mov	r0, r3
 8029c9e:	3714      	adds	r7, #20
 8029ca0:	46bd      	mov	sp, r7
 8029ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ca6:	4770      	bx	lr

08029ca8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8029ca8:	b480      	push	{r7}
 8029caa:	b085      	sub	sp, #20
 8029cac:	af00      	add	r7, sp, #0
 8029cae:	6078      	str	r0, [r7, #4]
 8029cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8029cb2:	2300      	movs	r3, #0
 8029cb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8029cb6:	683b      	ldr	r3, [r7, #0]
 8029cb8:	681a      	ldr	r2, [r3, #0]
 8029cba:	687b      	ldr	r3, [r7, #4]
 8029cbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8029cbe:	683b      	ldr	r3, [r7, #0]
 8029cc0:	685a      	ldr	r2, [r3, #4]
 8029cc2:	687b      	ldr	r3, [r7, #4]
 8029cc4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8029cc6:	683b      	ldr	r3, [r7, #0]
 8029cc8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8029cca:	683b      	ldr	r3, [r7, #0]
 8029ccc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8029cce:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8029cd0:	683b      	ldr	r3, [r7, #0]
 8029cd2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8029cd4:	431a      	orrs	r2, r3
                       Data->DPSM);
 8029cd6:	683b      	ldr	r3, [r7, #0]
 8029cd8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8029cda:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8029cdc:	68fa      	ldr	r2, [r7, #12]
 8029cde:	4313      	orrs	r3, r2
 8029ce0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8029ce2:	687b      	ldr	r3, [r7, #4]
 8029ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029ce6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8029cea:	68fb      	ldr	r3, [r7, #12]
 8029cec:	431a      	orrs	r2, r3
 8029cee:	687b      	ldr	r3, [r7, #4]
 8029cf0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8029cf2:	2300      	movs	r3, #0

}
 8029cf4:	4618      	mov	r0, r3
 8029cf6:	3714      	adds	r7, #20
 8029cf8:	46bd      	mov	sp, r7
 8029cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029cfe:	4770      	bx	lr

08029d00 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8029d00:	b580      	push	{r7, lr}
 8029d02:	b088      	sub	sp, #32
 8029d04:	af00      	add	r7, sp, #0
 8029d06:	6078      	str	r0, [r7, #4]
 8029d08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8029d0a:	683b      	ldr	r3, [r7, #0]
 8029d0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8029d0e:	2310      	movs	r3, #16
 8029d10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8029d12:	2340      	movs	r3, #64	; 0x40
 8029d14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8029d16:	2300      	movs	r3, #0
 8029d18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8029d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029d1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8029d20:	f107 0308 	add.w	r3, r7, #8
 8029d24:	4619      	mov	r1, r3
 8029d26:	6878      	ldr	r0, [r7, #4]
 8029d28:	f7ff ff74 	bl	8029c14 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8029d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8029d30:	2110      	movs	r1, #16
 8029d32:	6878      	ldr	r0, [r7, #4]
 8029d34:	f000 fa42 	bl	802a1bc <SDMMC_GetCmdResp1>
 8029d38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8029d3a:	69fb      	ldr	r3, [r7, #28]
}
 8029d3c:	4618      	mov	r0, r3
 8029d3e:	3720      	adds	r7, #32
 8029d40:	46bd      	mov	sp, r7
 8029d42:	bd80      	pop	{r7, pc}

08029d44 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8029d44:	b580      	push	{r7, lr}
 8029d46:	b088      	sub	sp, #32
 8029d48:	af00      	add	r7, sp, #0
 8029d4a:	6078      	str	r0, [r7, #4]
 8029d4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8029d4e:	683b      	ldr	r3, [r7, #0]
 8029d50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8029d52:	2311      	movs	r3, #17
 8029d54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8029d56:	2340      	movs	r3, #64	; 0x40
 8029d58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8029d5a:	2300      	movs	r3, #0
 8029d5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8029d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029d62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8029d64:	f107 0308 	add.w	r3, r7, #8
 8029d68:	4619      	mov	r1, r3
 8029d6a:	6878      	ldr	r0, [r7, #4]
 8029d6c:	f7ff ff52 	bl	8029c14 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8029d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8029d74:	2111      	movs	r1, #17
 8029d76:	6878      	ldr	r0, [r7, #4]
 8029d78:	f000 fa20 	bl	802a1bc <SDMMC_GetCmdResp1>
 8029d7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8029d7e:	69fb      	ldr	r3, [r7, #28]
}
 8029d80:	4618      	mov	r0, r3
 8029d82:	3720      	adds	r7, #32
 8029d84:	46bd      	mov	sp, r7
 8029d86:	bd80      	pop	{r7, pc}

08029d88 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8029d88:	b580      	push	{r7, lr}
 8029d8a:	b088      	sub	sp, #32
 8029d8c:	af00      	add	r7, sp, #0
 8029d8e:	6078      	str	r0, [r7, #4]
 8029d90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8029d92:	683b      	ldr	r3, [r7, #0]
 8029d94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8029d96:	2312      	movs	r3, #18
 8029d98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8029d9a:	2340      	movs	r3, #64	; 0x40
 8029d9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8029d9e:	2300      	movs	r3, #0
 8029da0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8029da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029da6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8029da8:	f107 0308 	add.w	r3, r7, #8
 8029dac:	4619      	mov	r1, r3
 8029dae:	6878      	ldr	r0, [r7, #4]
 8029db0:	f7ff ff30 	bl	8029c14 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8029db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8029db8:	2112      	movs	r1, #18
 8029dba:	6878      	ldr	r0, [r7, #4]
 8029dbc:	f000 f9fe 	bl	802a1bc <SDMMC_GetCmdResp1>
 8029dc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8029dc2:	69fb      	ldr	r3, [r7, #28]
}
 8029dc4:	4618      	mov	r0, r3
 8029dc6:	3720      	adds	r7, #32
 8029dc8:	46bd      	mov	sp, r7
 8029dca:	bd80      	pop	{r7, pc}

08029dcc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8029dcc:	b580      	push	{r7, lr}
 8029dce:	b088      	sub	sp, #32
 8029dd0:	af00      	add	r7, sp, #0
 8029dd2:	6078      	str	r0, [r7, #4]
 8029dd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8029dd6:	683b      	ldr	r3, [r7, #0]
 8029dd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8029dda:	2318      	movs	r3, #24
 8029ddc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8029dde:	2340      	movs	r3, #64	; 0x40
 8029de0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8029de2:	2300      	movs	r3, #0
 8029de4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8029de6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029dea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8029dec:	f107 0308 	add.w	r3, r7, #8
 8029df0:	4619      	mov	r1, r3
 8029df2:	6878      	ldr	r0, [r7, #4]
 8029df4:	f7ff ff0e 	bl	8029c14 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8029df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8029dfc:	2118      	movs	r1, #24
 8029dfe:	6878      	ldr	r0, [r7, #4]
 8029e00:	f000 f9dc 	bl	802a1bc <SDMMC_GetCmdResp1>
 8029e04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8029e06:	69fb      	ldr	r3, [r7, #28]
}
 8029e08:	4618      	mov	r0, r3
 8029e0a:	3720      	adds	r7, #32
 8029e0c:	46bd      	mov	sp, r7
 8029e0e:	bd80      	pop	{r7, pc}

08029e10 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8029e10:	b580      	push	{r7, lr}
 8029e12:	b088      	sub	sp, #32
 8029e14:	af00      	add	r7, sp, #0
 8029e16:	6078      	str	r0, [r7, #4]
 8029e18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8029e1a:	683b      	ldr	r3, [r7, #0]
 8029e1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8029e1e:	2319      	movs	r3, #25
 8029e20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8029e22:	2340      	movs	r3, #64	; 0x40
 8029e24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8029e26:	2300      	movs	r3, #0
 8029e28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8029e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029e2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8029e30:	f107 0308 	add.w	r3, r7, #8
 8029e34:	4619      	mov	r1, r3
 8029e36:	6878      	ldr	r0, [r7, #4]
 8029e38:	f7ff feec 	bl	8029c14 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8029e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8029e40:	2119      	movs	r1, #25
 8029e42:	6878      	ldr	r0, [r7, #4]
 8029e44:	f000 f9ba 	bl	802a1bc <SDMMC_GetCmdResp1>
 8029e48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8029e4a:	69fb      	ldr	r3, [r7, #28]
}
 8029e4c:	4618      	mov	r0, r3
 8029e4e:	3720      	adds	r7, #32
 8029e50:	46bd      	mov	sp, r7
 8029e52:	bd80      	pop	{r7, pc}

08029e54 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8029e54:	b580      	push	{r7, lr}
 8029e56:	b088      	sub	sp, #32
 8029e58:	af00      	add	r7, sp, #0
 8029e5a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8029e5c:	2300      	movs	r3, #0
 8029e5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8029e60:	230c      	movs	r3, #12
 8029e62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8029e64:	2340      	movs	r3, #64	; 0x40
 8029e66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8029e68:	2300      	movs	r3, #0
 8029e6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8029e6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029e70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8029e72:	f107 0308 	add.w	r3, r7, #8
 8029e76:	4619      	mov	r1, r3
 8029e78:	6878      	ldr	r0, [r7, #4]
 8029e7a:	f7ff fecb 	bl	8029c14 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8029e7e:	4a05      	ldr	r2, [pc, #20]	; (8029e94 <SDMMC_CmdStopTransfer+0x40>)
 8029e80:	210c      	movs	r1, #12
 8029e82:	6878      	ldr	r0, [r7, #4]
 8029e84:	f000 f99a 	bl	802a1bc <SDMMC_GetCmdResp1>
 8029e88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8029e8a:	69fb      	ldr	r3, [r7, #28]
}
 8029e8c:	4618      	mov	r0, r3
 8029e8e:	3720      	adds	r7, #32
 8029e90:	46bd      	mov	sp, r7
 8029e92:	bd80      	pop	{r7, pc}
 8029e94:	05f5e100 	.word	0x05f5e100

08029e98 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8029e98:	b580      	push	{r7, lr}
 8029e9a:	b08a      	sub	sp, #40	; 0x28
 8029e9c:	af00      	add	r7, sp, #0
 8029e9e:	60f8      	str	r0, [r7, #12]
 8029ea0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8029ea4:	683b      	ldr	r3, [r7, #0]
 8029ea6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8029ea8:	2307      	movs	r3, #7
 8029eaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8029eac:	2340      	movs	r3, #64	; 0x40
 8029eae:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8029eb0:	2300      	movs	r3, #0
 8029eb2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8029eb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029eb8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8029eba:	f107 0310 	add.w	r3, r7, #16
 8029ebe:	4619      	mov	r1, r3
 8029ec0:	68f8      	ldr	r0, [r7, #12]
 8029ec2:	f7ff fea7 	bl	8029c14 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8029ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8029eca:	2107      	movs	r1, #7
 8029ecc:	68f8      	ldr	r0, [r7, #12]
 8029ece:	f000 f975 	bl	802a1bc <SDMMC_GetCmdResp1>
 8029ed2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8029ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8029ed6:	4618      	mov	r0, r3
 8029ed8:	3728      	adds	r7, #40	; 0x28
 8029eda:	46bd      	mov	sp, r7
 8029edc:	bd80      	pop	{r7, pc}

08029ede <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8029ede:	b580      	push	{r7, lr}
 8029ee0:	b088      	sub	sp, #32
 8029ee2:	af00      	add	r7, sp, #0
 8029ee4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8029ee6:	2300      	movs	r3, #0
 8029ee8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8029eea:	2300      	movs	r3, #0
 8029eec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8029eee:	2300      	movs	r3, #0
 8029ef0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8029ef2:	2300      	movs	r3, #0
 8029ef4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8029ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029efa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8029efc:	f107 0308 	add.w	r3, r7, #8
 8029f00:	4619      	mov	r1, r3
 8029f02:	6878      	ldr	r0, [r7, #4]
 8029f04:	f7ff fe86 	bl	8029c14 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8029f08:	6878      	ldr	r0, [r7, #4]
 8029f0a:	f000 f92f 	bl	802a16c <SDMMC_GetCmdError>
 8029f0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8029f10:	69fb      	ldr	r3, [r7, #28]
}
 8029f12:	4618      	mov	r0, r3
 8029f14:	3720      	adds	r7, #32
 8029f16:	46bd      	mov	sp, r7
 8029f18:	bd80      	pop	{r7, pc}

08029f1a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8029f1a:	b580      	push	{r7, lr}
 8029f1c:	b088      	sub	sp, #32
 8029f1e:	af00      	add	r7, sp, #0
 8029f20:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8029f22:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8029f26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8029f28:	2308      	movs	r3, #8
 8029f2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8029f2c:	2340      	movs	r3, #64	; 0x40
 8029f2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8029f30:	2300      	movs	r3, #0
 8029f32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8029f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029f38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8029f3a:	f107 0308 	add.w	r3, r7, #8
 8029f3e:	4619      	mov	r1, r3
 8029f40:	6878      	ldr	r0, [r7, #4]
 8029f42:	f7ff fe67 	bl	8029c14 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8029f46:	6878      	ldr	r0, [r7, #4]
 8029f48:	f000 fb18 	bl	802a57c <SDMMC_GetCmdResp7>
 8029f4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8029f4e:	69fb      	ldr	r3, [r7, #28]
}
 8029f50:	4618      	mov	r0, r3
 8029f52:	3720      	adds	r7, #32
 8029f54:	46bd      	mov	sp, r7
 8029f56:	bd80      	pop	{r7, pc}

08029f58 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8029f58:	b580      	push	{r7, lr}
 8029f5a:	b088      	sub	sp, #32
 8029f5c:	af00      	add	r7, sp, #0
 8029f5e:	6078      	str	r0, [r7, #4]
 8029f60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8029f62:	683b      	ldr	r3, [r7, #0]
 8029f64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8029f66:	2337      	movs	r3, #55	; 0x37
 8029f68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8029f6a:	2340      	movs	r3, #64	; 0x40
 8029f6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8029f6e:	2300      	movs	r3, #0
 8029f70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8029f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029f76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8029f78:	f107 0308 	add.w	r3, r7, #8
 8029f7c:	4619      	mov	r1, r3
 8029f7e:	6878      	ldr	r0, [r7, #4]
 8029f80:	f7ff fe48 	bl	8029c14 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8029f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8029f88:	2137      	movs	r1, #55	; 0x37
 8029f8a:	6878      	ldr	r0, [r7, #4]
 8029f8c:	f000 f916 	bl	802a1bc <SDMMC_GetCmdResp1>
 8029f90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8029f92:	69fb      	ldr	r3, [r7, #28]
}
 8029f94:	4618      	mov	r0, r3
 8029f96:	3720      	adds	r7, #32
 8029f98:	46bd      	mov	sp, r7
 8029f9a:	bd80      	pop	{r7, pc}

08029f9c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8029f9c:	b580      	push	{r7, lr}
 8029f9e:	b088      	sub	sp, #32
 8029fa0:	af00      	add	r7, sp, #0
 8029fa2:	6078      	str	r0, [r7, #4]
 8029fa4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8029fa6:	683a      	ldr	r2, [r7, #0]
 8029fa8:	4b0d      	ldr	r3, [pc, #52]	; (8029fe0 <SDMMC_CmdAppOperCommand+0x44>)
 8029faa:	4313      	orrs	r3, r2
 8029fac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8029fae:	2329      	movs	r3, #41	; 0x29
 8029fb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8029fb2:	2340      	movs	r3, #64	; 0x40
 8029fb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8029fb6:	2300      	movs	r3, #0
 8029fb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8029fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029fbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8029fc0:	f107 0308 	add.w	r3, r7, #8
 8029fc4:	4619      	mov	r1, r3
 8029fc6:	6878      	ldr	r0, [r7, #4]
 8029fc8:	f7ff fe24 	bl	8029c14 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8029fcc:	6878      	ldr	r0, [r7, #4]
 8029fce:	f000 fa27 	bl	802a420 <SDMMC_GetCmdResp3>
 8029fd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8029fd4:	69fb      	ldr	r3, [r7, #28]
}
 8029fd6:	4618      	mov	r0, r3
 8029fd8:	3720      	adds	r7, #32
 8029fda:	46bd      	mov	sp, r7
 8029fdc:	bd80      	pop	{r7, pc}
 8029fde:	bf00      	nop
 8029fe0:	80100000 	.word	0x80100000

08029fe4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8029fe4:	b580      	push	{r7, lr}
 8029fe6:	b088      	sub	sp, #32
 8029fe8:	af00      	add	r7, sp, #0
 8029fea:	6078      	str	r0, [r7, #4]
 8029fec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8029fee:	683b      	ldr	r3, [r7, #0]
 8029ff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8029ff2:	2306      	movs	r3, #6
 8029ff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8029ff6:	2340      	movs	r3, #64	; 0x40
 8029ff8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8029ffa:	2300      	movs	r3, #0
 8029ffc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8029ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a002:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802a004:	f107 0308 	add.w	r3, r7, #8
 802a008:	4619      	mov	r1, r3
 802a00a:	6878      	ldr	r0, [r7, #4]
 802a00c:	f7ff fe02 	bl	8029c14 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 802a010:	f241 3288 	movw	r2, #5000	; 0x1388
 802a014:	2106      	movs	r1, #6
 802a016:	6878      	ldr	r0, [r7, #4]
 802a018:	f000 f8d0 	bl	802a1bc <SDMMC_GetCmdResp1>
 802a01c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802a01e:	69fb      	ldr	r3, [r7, #28]
}
 802a020:	4618      	mov	r0, r3
 802a022:	3720      	adds	r7, #32
 802a024:	46bd      	mov	sp, r7
 802a026:	bd80      	pop	{r7, pc}

0802a028 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 802a028:	b580      	push	{r7, lr}
 802a02a:	b088      	sub	sp, #32
 802a02c:	af00      	add	r7, sp, #0
 802a02e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 802a030:	2300      	movs	r3, #0
 802a032:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 802a034:	2333      	movs	r3, #51	; 0x33
 802a036:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802a038:	2340      	movs	r3, #64	; 0x40
 802a03a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802a03c:	2300      	movs	r3, #0
 802a03e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802a040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a044:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802a046:	f107 0308 	add.w	r3, r7, #8
 802a04a:	4619      	mov	r1, r3
 802a04c:	6878      	ldr	r0, [r7, #4]
 802a04e:	f7ff fde1 	bl	8029c14 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 802a052:	f241 3288 	movw	r2, #5000	; 0x1388
 802a056:	2133      	movs	r1, #51	; 0x33
 802a058:	6878      	ldr	r0, [r7, #4]
 802a05a:	f000 f8af 	bl	802a1bc <SDMMC_GetCmdResp1>
 802a05e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802a060:	69fb      	ldr	r3, [r7, #28]
}
 802a062:	4618      	mov	r0, r3
 802a064:	3720      	adds	r7, #32
 802a066:	46bd      	mov	sp, r7
 802a068:	bd80      	pop	{r7, pc}

0802a06a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 802a06a:	b580      	push	{r7, lr}
 802a06c:	b088      	sub	sp, #32
 802a06e:	af00      	add	r7, sp, #0
 802a070:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 802a072:	2300      	movs	r3, #0
 802a074:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 802a076:	2302      	movs	r3, #2
 802a078:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 802a07a:	23c0      	movs	r3, #192	; 0xc0
 802a07c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802a07e:	2300      	movs	r3, #0
 802a080:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802a082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a086:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802a088:	f107 0308 	add.w	r3, r7, #8
 802a08c:	4619      	mov	r1, r3
 802a08e:	6878      	ldr	r0, [r7, #4]
 802a090:	f7ff fdc0 	bl	8029c14 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 802a094:	6878      	ldr	r0, [r7, #4]
 802a096:	f000 f97d 	bl	802a394 <SDMMC_GetCmdResp2>
 802a09a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802a09c:	69fb      	ldr	r3, [r7, #28]
}
 802a09e:	4618      	mov	r0, r3
 802a0a0:	3720      	adds	r7, #32
 802a0a2:	46bd      	mov	sp, r7
 802a0a4:	bd80      	pop	{r7, pc}

0802a0a6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 802a0a6:	b580      	push	{r7, lr}
 802a0a8:	b088      	sub	sp, #32
 802a0aa:	af00      	add	r7, sp, #0
 802a0ac:	6078      	str	r0, [r7, #4]
 802a0ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 802a0b0:	683b      	ldr	r3, [r7, #0]
 802a0b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 802a0b4:	2309      	movs	r3, #9
 802a0b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 802a0b8:	23c0      	movs	r3, #192	; 0xc0
 802a0ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802a0bc:	2300      	movs	r3, #0
 802a0be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802a0c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a0c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802a0c6:	f107 0308 	add.w	r3, r7, #8
 802a0ca:	4619      	mov	r1, r3
 802a0cc:	6878      	ldr	r0, [r7, #4]
 802a0ce:	f7ff fda1 	bl	8029c14 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 802a0d2:	6878      	ldr	r0, [r7, #4]
 802a0d4:	f000 f95e 	bl	802a394 <SDMMC_GetCmdResp2>
 802a0d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802a0da:	69fb      	ldr	r3, [r7, #28]
}
 802a0dc:	4618      	mov	r0, r3
 802a0de:	3720      	adds	r7, #32
 802a0e0:	46bd      	mov	sp, r7
 802a0e2:	bd80      	pop	{r7, pc}

0802a0e4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 802a0e4:	b580      	push	{r7, lr}
 802a0e6:	b088      	sub	sp, #32
 802a0e8:	af00      	add	r7, sp, #0
 802a0ea:	6078      	str	r0, [r7, #4]
 802a0ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 802a0ee:	2300      	movs	r3, #0
 802a0f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 802a0f2:	2303      	movs	r3, #3
 802a0f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802a0f6:	2340      	movs	r3, #64	; 0x40
 802a0f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802a0fa:	2300      	movs	r3, #0
 802a0fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802a0fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a102:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802a104:	f107 0308 	add.w	r3, r7, #8
 802a108:	4619      	mov	r1, r3
 802a10a:	6878      	ldr	r0, [r7, #4]
 802a10c:	f7ff fd82 	bl	8029c14 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 802a110:	683a      	ldr	r2, [r7, #0]
 802a112:	2103      	movs	r1, #3
 802a114:	6878      	ldr	r0, [r7, #4]
 802a116:	f000 f9bd 	bl	802a494 <SDMMC_GetCmdResp6>
 802a11a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802a11c:	69fb      	ldr	r3, [r7, #28]
}
 802a11e:	4618      	mov	r0, r3
 802a120:	3720      	adds	r7, #32
 802a122:	46bd      	mov	sp, r7
 802a124:	bd80      	pop	{r7, pc}

0802a126 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 802a126:	b580      	push	{r7, lr}
 802a128:	b088      	sub	sp, #32
 802a12a:	af00      	add	r7, sp, #0
 802a12c:	6078      	str	r0, [r7, #4]
 802a12e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 802a130:	683b      	ldr	r3, [r7, #0]
 802a132:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 802a134:	230d      	movs	r3, #13
 802a136:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802a138:	2340      	movs	r3, #64	; 0x40
 802a13a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802a13c:	2300      	movs	r3, #0
 802a13e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802a140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a144:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802a146:	f107 0308 	add.w	r3, r7, #8
 802a14a:	4619      	mov	r1, r3
 802a14c:	6878      	ldr	r0, [r7, #4]
 802a14e:	f7ff fd61 	bl	8029c14 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 802a152:	f241 3288 	movw	r2, #5000	; 0x1388
 802a156:	210d      	movs	r1, #13
 802a158:	6878      	ldr	r0, [r7, #4]
 802a15a:	f000 f82f 	bl	802a1bc <SDMMC_GetCmdResp1>
 802a15e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802a160:	69fb      	ldr	r3, [r7, #28]
}
 802a162:	4618      	mov	r0, r3
 802a164:	3720      	adds	r7, #32
 802a166:	46bd      	mov	sp, r7
 802a168:	bd80      	pop	{r7, pc}
	...

0802a16c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 802a16c:	b490      	push	{r4, r7}
 802a16e:	b082      	sub	sp, #8
 802a170:	af00      	add	r7, sp, #0
 802a172:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 802a174:	4b0f      	ldr	r3, [pc, #60]	; (802a1b4 <SDMMC_GetCmdError+0x48>)
 802a176:	681b      	ldr	r3, [r3, #0]
 802a178:	4a0f      	ldr	r2, [pc, #60]	; (802a1b8 <SDMMC_GetCmdError+0x4c>)
 802a17a:	fba2 2303 	umull	r2, r3, r2, r3
 802a17e:	0a5b      	lsrs	r3, r3, #9
 802a180:	f241 3288 	movw	r2, #5000	; 0x1388
 802a184:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 802a188:	4623      	mov	r3, r4
 802a18a:	1e5c      	subs	r4, r3, #1
 802a18c:	2b00      	cmp	r3, #0
 802a18e:	d102      	bne.n	802a196 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 802a190:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802a194:	e009      	b.n	802a1aa <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 802a196:	687b      	ldr	r3, [r7, #4]
 802a198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a19a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802a19e:	2b00      	cmp	r3, #0
 802a1a0:	d0f2      	beq.n	802a188 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 802a1a2:	687b      	ldr	r3, [r7, #4]
 802a1a4:	22c5      	movs	r2, #197	; 0xc5
 802a1a6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 802a1a8:	2300      	movs	r3, #0
}
 802a1aa:	4618      	mov	r0, r3
 802a1ac:	3708      	adds	r7, #8
 802a1ae:	46bd      	mov	sp, r7
 802a1b0:	bc90      	pop	{r4, r7}
 802a1b2:	4770      	bx	lr
 802a1b4:	200013c8 	.word	0x200013c8
 802a1b8:	10624dd3 	.word	0x10624dd3

0802a1bc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 802a1bc:	b590      	push	{r4, r7, lr}
 802a1be:	b087      	sub	sp, #28
 802a1c0:	af00      	add	r7, sp, #0
 802a1c2:	60f8      	str	r0, [r7, #12]
 802a1c4:	460b      	mov	r3, r1
 802a1c6:	607a      	str	r2, [r7, #4]
 802a1c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 802a1ca:	4b6f      	ldr	r3, [pc, #444]	; (802a388 <SDMMC_GetCmdResp1+0x1cc>)
 802a1cc:	681b      	ldr	r3, [r3, #0]
 802a1ce:	4a6f      	ldr	r2, [pc, #444]	; (802a38c <SDMMC_GetCmdResp1+0x1d0>)
 802a1d0:	fba2 2303 	umull	r2, r3, r2, r3
 802a1d4:	0a5b      	lsrs	r3, r3, #9
 802a1d6:	687a      	ldr	r2, [r7, #4]
 802a1d8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 802a1dc:	4623      	mov	r3, r4
 802a1de:	1e5c      	subs	r4, r3, #1
 802a1e0:	2b00      	cmp	r3, #0
 802a1e2:	d102      	bne.n	802a1ea <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 802a1e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802a1e8:	e0c9      	b.n	802a37e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 802a1ea:	68fb      	ldr	r3, [r7, #12]
 802a1ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a1ee:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802a1f0:	697b      	ldr	r3, [r7, #20]
 802a1f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 802a1f6:	2b00      	cmp	r3, #0
 802a1f8:	d0f0      	beq.n	802a1dc <SDMMC_GetCmdResp1+0x20>
 802a1fa:	697b      	ldr	r3, [r7, #20]
 802a1fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802a200:	2b00      	cmp	r3, #0
 802a202:	d1eb      	bne.n	802a1dc <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 802a204:	68fb      	ldr	r3, [r7, #12]
 802a206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a208:	f003 0304 	and.w	r3, r3, #4
 802a20c:	2b00      	cmp	r3, #0
 802a20e:	d004      	beq.n	802a21a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 802a210:	68fb      	ldr	r3, [r7, #12]
 802a212:	2204      	movs	r2, #4
 802a214:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802a216:	2304      	movs	r3, #4
 802a218:	e0b1      	b.n	802a37e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 802a21a:	68fb      	ldr	r3, [r7, #12]
 802a21c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a21e:	f003 0301 	and.w	r3, r3, #1
 802a222:	2b00      	cmp	r3, #0
 802a224:	d004      	beq.n	802a230 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 802a226:	68fb      	ldr	r3, [r7, #12]
 802a228:	2201      	movs	r2, #1
 802a22a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 802a22c:	2301      	movs	r3, #1
 802a22e:	e0a6      	b.n	802a37e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 802a230:	68fb      	ldr	r3, [r7, #12]
 802a232:	22c5      	movs	r2, #197	; 0xc5
 802a234:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 802a236:	68f8      	ldr	r0, [r7, #12]
 802a238:	f7ff fd16 	bl	8029c68 <SDMMC_GetCommandResponse>
 802a23c:	4603      	mov	r3, r0
 802a23e:	461a      	mov	r2, r3
 802a240:	7afb      	ldrb	r3, [r7, #11]
 802a242:	4293      	cmp	r3, r2
 802a244:	d001      	beq.n	802a24a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 802a246:	2301      	movs	r3, #1
 802a248:	e099      	b.n	802a37e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 802a24a:	2100      	movs	r1, #0
 802a24c:	68f8      	ldr	r0, [r7, #12]
 802a24e:	f7ff fd18 	bl	8029c82 <SDMMC_GetResponse>
 802a252:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 802a254:	693a      	ldr	r2, [r7, #16]
 802a256:	4b4e      	ldr	r3, [pc, #312]	; (802a390 <SDMMC_GetCmdResp1+0x1d4>)
 802a258:	4013      	ands	r3, r2
 802a25a:	2b00      	cmp	r3, #0
 802a25c:	d101      	bne.n	802a262 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 802a25e:	2300      	movs	r3, #0
 802a260:	e08d      	b.n	802a37e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 802a262:	693b      	ldr	r3, [r7, #16]
 802a264:	2b00      	cmp	r3, #0
 802a266:	da02      	bge.n	802a26e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 802a268:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 802a26c:	e087      	b.n	802a37e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 802a26e:	693b      	ldr	r3, [r7, #16]
 802a270:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 802a274:	2b00      	cmp	r3, #0
 802a276:	d001      	beq.n	802a27c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 802a278:	2340      	movs	r3, #64	; 0x40
 802a27a:	e080      	b.n	802a37e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 802a27c:	693b      	ldr	r3, [r7, #16]
 802a27e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802a282:	2b00      	cmp	r3, #0
 802a284:	d001      	beq.n	802a28a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 802a286:	2380      	movs	r3, #128	; 0x80
 802a288:	e079      	b.n	802a37e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 802a28a:	693b      	ldr	r3, [r7, #16]
 802a28c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802a290:	2b00      	cmp	r3, #0
 802a292:	d002      	beq.n	802a29a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 802a294:	f44f 7380 	mov.w	r3, #256	; 0x100
 802a298:	e071      	b.n	802a37e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 802a29a:	693b      	ldr	r3, [r7, #16]
 802a29c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802a2a0:	2b00      	cmp	r3, #0
 802a2a2:	d002      	beq.n	802a2aa <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 802a2a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 802a2a8:	e069      	b.n	802a37e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 802a2aa:	693b      	ldr	r3, [r7, #16]
 802a2ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 802a2b0:	2b00      	cmp	r3, #0
 802a2b2:	d002      	beq.n	802a2ba <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 802a2b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a2b8:	e061      	b.n	802a37e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 802a2ba:	693b      	ldr	r3, [r7, #16]
 802a2bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802a2c0:	2b00      	cmp	r3, #0
 802a2c2:	d002      	beq.n	802a2ca <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 802a2c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802a2c8:	e059      	b.n	802a37e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 802a2ca:	693b      	ldr	r3, [r7, #16]
 802a2cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802a2d0:	2b00      	cmp	r3, #0
 802a2d2:	d002      	beq.n	802a2da <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 802a2d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802a2d8:	e051      	b.n	802a37e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 802a2da:	693b      	ldr	r3, [r7, #16]
 802a2dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802a2e0:	2b00      	cmp	r3, #0
 802a2e2:	d002      	beq.n	802a2ea <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 802a2e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802a2e8:	e049      	b.n	802a37e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 802a2ea:	693b      	ldr	r3, [r7, #16]
 802a2ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802a2f0:	2b00      	cmp	r3, #0
 802a2f2:	d002      	beq.n	802a2fa <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 802a2f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802a2f8:	e041      	b.n	802a37e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 802a2fa:	693b      	ldr	r3, [r7, #16]
 802a2fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802a300:	2b00      	cmp	r3, #0
 802a302:	d002      	beq.n	802a30a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 802a304:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802a308:	e039      	b.n	802a37e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 802a30a:	693b      	ldr	r3, [r7, #16]
 802a30c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802a310:	2b00      	cmp	r3, #0
 802a312:	d002      	beq.n	802a31a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 802a314:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 802a318:	e031      	b.n	802a37e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 802a31a:	693b      	ldr	r3, [r7, #16]
 802a31c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802a320:	2b00      	cmp	r3, #0
 802a322:	d002      	beq.n	802a32a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 802a324:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802a328:	e029      	b.n	802a37e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 802a32a:	693b      	ldr	r3, [r7, #16]
 802a32c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802a330:	2b00      	cmp	r3, #0
 802a332:	d002      	beq.n	802a33a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 802a334:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 802a338:	e021      	b.n	802a37e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 802a33a:	693b      	ldr	r3, [r7, #16]
 802a33c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802a340:	2b00      	cmp	r3, #0
 802a342:	d002      	beq.n	802a34a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 802a344:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802a348:	e019      	b.n	802a37e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 802a34a:	693b      	ldr	r3, [r7, #16]
 802a34c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802a350:	2b00      	cmp	r3, #0
 802a352:	d002      	beq.n	802a35a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 802a354:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802a358:	e011      	b.n	802a37e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 802a35a:	693b      	ldr	r3, [r7, #16]
 802a35c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802a360:	2b00      	cmp	r3, #0
 802a362:	d002      	beq.n	802a36a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 802a364:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802a368:	e009      	b.n	802a37e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 802a36a:	693b      	ldr	r3, [r7, #16]
 802a36c:	f003 0308 	and.w	r3, r3, #8
 802a370:	2b00      	cmp	r3, #0
 802a372:	d002      	beq.n	802a37a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 802a374:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 802a378:	e001      	b.n	802a37e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 802a37a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 802a37e:	4618      	mov	r0, r3
 802a380:	371c      	adds	r7, #28
 802a382:	46bd      	mov	sp, r7
 802a384:	bd90      	pop	{r4, r7, pc}
 802a386:	bf00      	nop
 802a388:	200013c8 	.word	0x200013c8
 802a38c:	10624dd3 	.word	0x10624dd3
 802a390:	fdffe008 	.word	0xfdffe008

0802a394 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 802a394:	b490      	push	{r4, r7}
 802a396:	b084      	sub	sp, #16
 802a398:	af00      	add	r7, sp, #0
 802a39a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 802a39c:	4b1e      	ldr	r3, [pc, #120]	; (802a418 <SDMMC_GetCmdResp2+0x84>)
 802a39e:	681b      	ldr	r3, [r3, #0]
 802a3a0:	4a1e      	ldr	r2, [pc, #120]	; (802a41c <SDMMC_GetCmdResp2+0x88>)
 802a3a2:	fba2 2303 	umull	r2, r3, r2, r3
 802a3a6:	0a5b      	lsrs	r3, r3, #9
 802a3a8:	f241 3288 	movw	r2, #5000	; 0x1388
 802a3ac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 802a3b0:	4623      	mov	r3, r4
 802a3b2:	1e5c      	subs	r4, r3, #1
 802a3b4:	2b00      	cmp	r3, #0
 802a3b6:	d102      	bne.n	802a3be <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 802a3b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802a3bc:	e026      	b.n	802a40c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 802a3be:	687b      	ldr	r3, [r7, #4]
 802a3c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a3c2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802a3c4:	68fb      	ldr	r3, [r7, #12]
 802a3c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 802a3ca:	2b00      	cmp	r3, #0
 802a3cc:	d0f0      	beq.n	802a3b0 <SDMMC_GetCmdResp2+0x1c>
 802a3ce:	68fb      	ldr	r3, [r7, #12]
 802a3d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802a3d4:	2b00      	cmp	r3, #0
 802a3d6:	d1eb      	bne.n	802a3b0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 802a3d8:	687b      	ldr	r3, [r7, #4]
 802a3da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a3dc:	f003 0304 	and.w	r3, r3, #4
 802a3e0:	2b00      	cmp	r3, #0
 802a3e2:	d004      	beq.n	802a3ee <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 802a3e4:	687b      	ldr	r3, [r7, #4]
 802a3e6:	2204      	movs	r2, #4
 802a3e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802a3ea:	2304      	movs	r3, #4
 802a3ec:	e00e      	b.n	802a40c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 802a3ee:	687b      	ldr	r3, [r7, #4]
 802a3f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a3f2:	f003 0301 	and.w	r3, r3, #1
 802a3f6:	2b00      	cmp	r3, #0
 802a3f8:	d004      	beq.n	802a404 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 802a3fa:	687b      	ldr	r3, [r7, #4]
 802a3fc:	2201      	movs	r2, #1
 802a3fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 802a400:	2301      	movs	r3, #1
 802a402:	e003      	b.n	802a40c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 802a404:	687b      	ldr	r3, [r7, #4]
 802a406:	22c5      	movs	r2, #197	; 0xc5
 802a408:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 802a40a:	2300      	movs	r3, #0
}
 802a40c:	4618      	mov	r0, r3
 802a40e:	3710      	adds	r7, #16
 802a410:	46bd      	mov	sp, r7
 802a412:	bc90      	pop	{r4, r7}
 802a414:	4770      	bx	lr
 802a416:	bf00      	nop
 802a418:	200013c8 	.word	0x200013c8
 802a41c:	10624dd3 	.word	0x10624dd3

0802a420 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 802a420:	b490      	push	{r4, r7}
 802a422:	b084      	sub	sp, #16
 802a424:	af00      	add	r7, sp, #0
 802a426:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 802a428:	4b18      	ldr	r3, [pc, #96]	; (802a48c <SDMMC_GetCmdResp3+0x6c>)
 802a42a:	681b      	ldr	r3, [r3, #0]
 802a42c:	4a18      	ldr	r2, [pc, #96]	; (802a490 <SDMMC_GetCmdResp3+0x70>)
 802a42e:	fba2 2303 	umull	r2, r3, r2, r3
 802a432:	0a5b      	lsrs	r3, r3, #9
 802a434:	f241 3288 	movw	r2, #5000	; 0x1388
 802a438:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 802a43c:	4623      	mov	r3, r4
 802a43e:	1e5c      	subs	r4, r3, #1
 802a440:	2b00      	cmp	r3, #0
 802a442:	d102      	bne.n	802a44a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 802a444:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802a448:	e01b      	b.n	802a482 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 802a44a:	687b      	ldr	r3, [r7, #4]
 802a44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a44e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802a450:	68fb      	ldr	r3, [r7, #12]
 802a452:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 802a456:	2b00      	cmp	r3, #0
 802a458:	d0f0      	beq.n	802a43c <SDMMC_GetCmdResp3+0x1c>
 802a45a:	68fb      	ldr	r3, [r7, #12]
 802a45c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802a460:	2b00      	cmp	r3, #0
 802a462:	d1eb      	bne.n	802a43c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 802a464:	687b      	ldr	r3, [r7, #4]
 802a466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a468:	f003 0304 	and.w	r3, r3, #4
 802a46c:	2b00      	cmp	r3, #0
 802a46e:	d004      	beq.n	802a47a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 802a470:	687b      	ldr	r3, [r7, #4]
 802a472:	2204      	movs	r2, #4
 802a474:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802a476:	2304      	movs	r3, #4
 802a478:	e003      	b.n	802a482 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 802a47a:	687b      	ldr	r3, [r7, #4]
 802a47c:	22c5      	movs	r2, #197	; 0xc5
 802a47e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 802a480:	2300      	movs	r3, #0
}
 802a482:	4618      	mov	r0, r3
 802a484:	3710      	adds	r7, #16
 802a486:	46bd      	mov	sp, r7
 802a488:	bc90      	pop	{r4, r7}
 802a48a:	4770      	bx	lr
 802a48c:	200013c8 	.word	0x200013c8
 802a490:	10624dd3 	.word	0x10624dd3

0802a494 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 802a494:	b590      	push	{r4, r7, lr}
 802a496:	b087      	sub	sp, #28
 802a498:	af00      	add	r7, sp, #0
 802a49a:	60f8      	str	r0, [r7, #12]
 802a49c:	460b      	mov	r3, r1
 802a49e:	607a      	str	r2, [r7, #4]
 802a4a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 802a4a2:	4b34      	ldr	r3, [pc, #208]	; (802a574 <SDMMC_GetCmdResp6+0xe0>)
 802a4a4:	681b      	ldr	r3, [r3, #0]
 802a4a6:	4a34      	ldr	r2, [pc, #208]	; (802a578 <SDMMC_GetCmdResp6+0xe4>)
 802a4a8:	fba2 2303 	umull	r2, r3, r2, r3
 802a4ac:	0a5b      	lsrs	r3, r3, #9
 802a4ae:	f241 3288 	movw	r2, #5000	; 0x1388
 802a4b2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 802a4b6:	4623      	mov	r3, r4
 802a4b8:	1e5c      	subs	r4, r3, #1
 802a4ba:	2b00      	cmp	r3, #0
 802a4bc:	d102      	bne.n	802a4c4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 802a4be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802a4c2:	e052      	b.n	802a56a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 802a4c4:	68fb      	ldr	r3, [r7, #12]
 802a4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a4c8:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802a4ca:	697b      	ldr	r3, [r7, #20]
 802a4cc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 802a4d0:	2b00      	cmp	r3, #0
 802a4d2:	d0f0      	beq.n	802a4b6 <SDMMC_GetCmdResp6+0x22>
 802a4d4:	697b      	ldr	r3, [r7, #20]
 802a4d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802a4da:	2b00      	cmp	r3, #0
 802a4dc:	d1eb      	bne.n	802a4b6 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 802a4de:	68fb      	ldr	r3, [r7, #12]
 802a4e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a4e2:	f003 0304 	and.w	r3, r3, #4
 802a4e6:	2b00      	cmp	r3, #0
 802a4e8:	d004      	beq.n	802a4f4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 802a4ea:	68fb      	ldr	r3, [r7, #12]
 802a4ec:	2204      	movs	r2, #4
 802a4ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802a4f0:	2304      	movs	r3, #4
 802a4f2:	e03a      	b.n	802a56a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 802a4f4:	68fb      	ldr	r3, [r7, #12]
 802a4f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a4f8:	f003 0301 	and.w	r3, r3, #1
 802a4fc:	2b00      	cmp	r3, #0
 802a4fe:	d004      	beq.n	802a50a <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 802a500:	68fb      	ldr	r3, [r7, #12]
 802a502:	2201      	movs	r2, #1
 802a504:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 802a506:	2301      	movs	r3, #1
 802a508:	e02f      	b.n	802a56a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 802a50a:	68f8      	ldr	r0, [r7, #12]
 802a50c:	f7ff fbac 	bl	8029c68 <SDMMC_GetCommandResponse>
 802a510:	4603      	mov	r3, r0
 802a512:	461a      	mov	r2, r3
 802a514:	7afb      	ldrb	r3, [r7, #11]
 802a516:	4293      	cmp	r3, r2
 802a518:	d001      	beq.n	802a51e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 802a51a:	2301      	movs	r3, #1
 802a51c:	e025      	b.n	802a56a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 802a51e:	68fb      	ldr	r3, [r7, #12]
 802a520:	22c5      	movs	r2, #197	; 0xc5
 802a522:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 802a524:	2100      	movs	r1, #0
 802a526:	68f8      	ldr	r0, [r7, #12]
 802a528:	f7ff fbab 	bl	8029c82 <SDMMC_GetResponse>
 802a52c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 802a52e:	693b      	ldr	r3, [r7, #16]
 802a530:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 802a534:	2b00      	cmp	r3, #0
 802a536:	d106      	bne.n	802a546 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 802a538:	693b      	ldr	r3, [r7, #16]
 802a53a:	0c1b      	lsrs	r3, r3, #16
 802a53c:	b29a      	uxth	r2, r3
 802a53e:	687b      	ldr	r3, [r7, #4]
 802a540:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 802a542:	2300      	movs	r3, #0
 802a544:	e011      	b.n	802a56a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 802a546:	693b      	ldr	r3, [r7, #16]
 802a548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802a54c:	2b00      	cmp	r3, #0
 802a54e:	d002      	beq.n	802a556 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 802a550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802a554:	e009      	b.n	802a56a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 802a556:	693b      	ldr	r3, [r7, #16]
 802a558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802a55c:	2b00      	cmp	r3, #0
 802a55e:	d002      	beq.n	802a566 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 802a560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802a564:	e001      	b.n	802a56a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 802a566:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 802a56a:	4618      	mov	r0, r3
 802a56c:	371c      	adds	r7, #28
 802a56e:	46bd      	mov	sp, r7
 802a570:	bd90      	pop	{r4, r7, pc}
 802a572:	bf00      	nop
 802a574:	200013c8 	.word	0x200013c8
 802a578:	10624dd3 	.word	0x10624dd3

0802a57c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 802a57c:	b490      	push	{r4, r7}
 802a57e:	b084      	sub	sp, #16
 802a580:	af00      	add	r7, sp, #0
 802a582:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 802a584:	4b21      	ldr	r3, [pc, #132]	; (802a60c <SDMMC_GetCmdResp7+0x90>)
 802a586:	681b      	ldr	r3, [r3, #0]
 802a588:	4a21      	ldr	r2, [pc, #132]	; (802a610 <SDMMC_GetCmdResp7+0x94>)
 802a58a:	fba2 2303 	umull	r2, r3, r2, r3
 802a58e:	0a5b      	lsrs	r3, r3, #9
 802a590:	f241 3288 	movw	r2, #5000	; 0x1388
 802a594:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 802a598:	4623      	mov	r3, r4
 802a59a:	1e5c      	subs	r4, r3, #1
 802a59c:	2b00      	cmp	r3, #0
 802a59e:	d102      	bne.n	802a5a6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 802a5a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802a5a4:	e02c      	b.n	802a600 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 802a5a6:	687b      	ldr	r3, [r7, #4]
 802a5a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a5aa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802a5ac:	68fb      	ldr	r3, [r7, #12]
 802a5ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 802a5b2:	2b00      	cmp	r3, #0
 802a5b4:	d0f0      	beq.n	802a598 <SDMMC_GetCmdResp7+0x1c>
 802a5b6:	68fb      	ldr	r3, [r7, #12]
 802a5b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802a5bc:	2b00      	cmp	r3, #0
 802a5be:	d1eb      	bne.n	802a598 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 802a5c0:	687b      	ldr	r3, [r7, #4]
 802a5c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a5c4:	f003 0304 	and.w	r3, r3, #4
 802a5c8:	2b00      	cmp	r3, #0
 802a5ca:	d004      	beq.n	802a5d6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 802a5cc:	687b      	ldr	r3, [r7, #4]
 802a5ce:	2204      	movs	r2, #4
 802a5d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802a5d2:	2304      	movs	r3, #4
 802a5d4:	e014      	b.n	802a600 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 802a5d6:	687b      	ldr	r3, [r7, #4]
 802a5d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a5da:	f003 0301 	and.w	r3, r3, #1
 802a5de:	2b00      	cmp	r3, #0
 802a5e0:	d004      	beq.n	802a5ec <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 802a5e2:	687b      	ldr	r3, [r7, #4]
 802a5e4:	2201      	movs	r2, #1
 802a5e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 802a5e8:	2301      	movs	r3, #1
 802a5ea:	e009      	b.n	802a600 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 802a5ec:	687b      	ldr	r3, [r7, #4]
 802a5ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a5f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802a5f4:	2b00      	cmp	r3, #0
 802a5f6:	d002      	beq.n	802a5fe <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 802a5f8:	687b      	ldr	r3, [r7, #4]
 802a5fa:	2240      	movs	r2, #64	; 0x40
 802a5fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 802a5fe:	2300      	movs	r3, #0
  
}
 802a600:	4618      	mov	r0, r3
 802a602:	3710      	adds	r7, #16
 802a604:	46bd      	mov	sp, r7
 802a606:	bc90      	pop	{r4, r7}
 802a608:	4770      	bx	lr
 802a60a:	bf00      	nop
 802a60c:	200013c8 	.word	0x200013c8
 802a610:	10624dd3 	.word	0x10624dd3

0802a614 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 802a614:	b580      	push	{r7, lr}
 802a616:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 802a618:	4904      	ldr	r1, [pc, #16]	; (802a62c <MX_FATFS_Init+0x18>)
 802a61a:	4805      	ldr	r0, [pc, #20]	; (802a630 <MX_FATFS_Init+0x1c>)
 802a61c:	f002 ff8e 	bl	802d53c <FATFS_LinkDriver>
 802a620:	4603      	mov	r3, r0
 802a622:	461a      	mov	r2, r3
 802a624:	4b03      	ldr	r3, [pc, #12]	; (802a634 <MX_FATFS_Init+0x20>)
 802a626:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 802a628:	bf00      	nop
 802a62a:	bd80      	pop	{r7, pc}
 802a62c:	20021910 	.word	0x20021910
 802a630:	08030fc0 	.word	0x08030fc0
 802a634:	2002190c 	.word	0x2002190c

0802a638 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 802a638:	b480      	push	{r7}
 802a63a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 802a63c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 802a63e:	4618      	mov	r0, r3
 802a640:	46bd      	mov	sp, r7
 802a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a646:	4770      	bx	lr

0802a648 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 802a648:	b580      	push	{r7, lr}
 802a64a:	b082      	sub	sp, #8
 802a64c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 802a64e:	2300      	movs	r3, #0
 802a650:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 802a652:	f000 f879 	bl	802a748 <BSP_SD_IsDetected>
 802a656:	4603      	mov	r3, r0
 802a658:	2b01      	cmp	r3, #1
 802a65a:	d001      	beq.n	802a660 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 802a65c:	2302      	movs	r3, #2
 802a65e:	e012      	b.n	802a686 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 802a660:	480b      	ldr	r0, [pc, #44]	; (802a690 <BSP_SD_Init+0x48>)
 802a662:	f7fd fce5 	bl	8028030 <HAL_SD_Init>
 802a666:	4603      	mov	r3, r0
 802a668:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 802a66a:	79fb      	ldrb	r3, [r7, #7]
 802a66c:	2b00      	cmp	r3, #0
 802a66e:	d109      	bne.n	802a684 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 802a670:	f44f 6100 	mov.w	r1, #2048	; 0x800
 802a674:	4806      	ldr	r0, [pc, #24]	; (802a690 <BSP_SD_Init+0x48>)
 802a676:	f7fe fadb 	bl	8028c30 <HAL_SD_ConfigWideBusOperation>
 802a67a:	4603      	mov	r3, r0
 802a67c:	2b00      	cmp	r3, #0
 802a67e:	d001      	beq.n	802a684 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 802a680:	2301      	movs	r3, #1
 802a682:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 802a684:	79fb      	ldrb	r3, [r7, #7]
}
 802a686:	4618      	mov	r0, r3
 802a688:	3708      	adds	r7, #8
 802a68a:	46bd      	mov	sp, r7
 802a68c:	bd80      	pop	{r7, pc}
 802a68e:	bf00      	nop
 802a690:	200215fc 	.word	0x200215fc

0802a694 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 802a694:	b580      	push	{r7, lr}
 802a696:	b088      	sub	sp, #32
 802a698:	af02      	add	r7, sp, #8
 802a69a:	60f8      	str	r0, [r7, #12]
 802a69c:	60b9      	str	r1, [r7, #8]
 802a69e:	607a      	str	r2, [r7, #4]
 802a6a0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 802a6a2:	2300      	movs	r3, #0
 802a6a4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 802a6a6:	683b      	ldr	r3, [r7, #0]
 802a6a8:	9300      	str	r3, [sp, #0]
 802a6aa:	687b      	ldr	r3, [r7, #4]
 802a6ac:	68ba      	ldr	r2, [r7, #8]
 802a6ae:	68f9      	ldr	r1, [r7, #12]
 802a6b0:	4806      	ldr	r0, [pc, #24]	; (802a6cc <BSP_SD_ReadBlocks+0x38>)
 802a6b2:	f7fd fd55 	bl	8028160 <HAL_SD_ReadBlocks>
 802a6b6:	4603      	mov	r3, r0
 802a6b8:	2b00      	cmp	r3, #0
 802a6ba:	d001      	beq.n	802a6c0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 802a6bc:	2301      	movs	r3, #1
 802a6be:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 802a6c0:	7dfb      	ldrb	r3, [r7, #23]
}
 802a6c2:	4618      	mov	r0, r3
 802a6c4:	3718      	adds	r7, #24
 802a6c6:	46bd      	mov	sp, r7
 802a6c8:	bd80      	pop	{r7, pc}
 802a6ca:	bf00      	nop
 802a6cc:	200215fc 	.word	0x200215fc

0802a6d0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 802a6d0:	b580      	push	{r7, lr}
 802a6d2:	b088      	sub	sp, #32
 802a6d4:	af02      	add	r7, sp, #8
 802a6d6:	60f8      	str	r0, [r7, #12]
 802a6d8:	60b9      	str	r1, [r7, #8]
 802a6da:	607a      	str	r2, [r7, #4]
 802a6dc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 802a6de:	2300      	movs	r3, #0
 802a6e0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 802a6e2:	683b      	ldr	r3, [r7, #0]
 802a6e4:	9300      	str	r3, [sp, #0]
 802a6e6:	687b      	ldr	r3, [r7, #4]
 802a6e8:	68ba      	ldr	r2, [r7, #8]
 802a6ea:	68f9      	ldr	r1, [r7, #12]
 802a6ec:	4806      	ldr	r0, [pc, #24]	; (802a708 <BSP_SD_WriteBlocks+0x38>)
 802a6ee:	f7fd ff2f 	bl	8028550 <HAL_SD_WriteBlocks>
 802a6f2:	4603      	mov	r3, r0
 802a6f4:	2b00      	cmp	r3, #0
 802a6f6:	d001      	beq.n	802a6fc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 802a6f8:	2301      	movs	r3, #1
 802a6fa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 802a6fc:	7dfb      	ldrb	r3, [r7, #23]
}
 802a6fe:	4618      	mov	r0, r3
 802a700:	3718      	adds	r7, #24
 802a702:	46bd      	mov	sp, r7
 802a704:	bd80      	pop	{r7, pc}
 802a706:	bf00      	nop
 802a708:	200215fc 	.word	0x200215fc

0802a70c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 802a70c:	b580      	push	{r7, lr}
 802a70e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 802a710:	4805      	ldr	r0, [pc, #20]	; (802a728 <BSP_SD_GetCardState+0x1c>)
 802a712:	f7fe fb09 	bl	8028d28 <HAL_SD_GetCardState>
 802a716:	4603      	mov	r3, r0
 802a718:	2b04      	cmp	r3, #4
 802a71a:	bf14      	ite	ne
 802a71c:	2301      	movne	r3, #1
 802a71e:	2300      	moveq	r3, #0
 802a720:	b2db      	uxtb	r3, r3
}
 802a722:	4618      	mov	r0, r3
 802a724:	bd80      	pop	{r7, pc}
 802a726:	bf00      	nop
 802a728:	200215fc 	.word	0x200215fc

0802a72c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 802a72c:	b580      	push	{r7, lr}
 802a72e:	b082      	sub	sp, #8
 802a730:	af00      	add	r7, sp, #0
 802a732:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 802a734:	6879      	ldr	r1, [r7, #4]
 802a736:	4803      	ldr	r0, [pc, #12]	; (802a744 <BSP_SD_GetCardInfo+0x18>)
 802a738:	f7fe fa4e 	bl	8028bd8 <HAL_SD_GetCardInfo>
}
 802a73c:	bf00      	nop
 802a73e:	3708      	adds	r7, #8
 802a740:	46bd      	mov	sp, r7
 802a742:	bd80      	pop	{r7, pc}
 802a744:	200215fc 	.word	0x200215fc

0802a748 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 802a748:	b580      	push	{r7, lr}
 802a74a:	b082      	sub	sp, #8
 802a74c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 802a74e:	2301      	movs	r3, #1
 802a750:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 802a752:	f000 f80b 	bl	802a76c <BSP_PlatformIsDetected>
 802a756:	4603      	mov	r3, r0
 802a758:	2b00      	cmp	r3, #0
 802a75a:	d101      	bne.n	802a760 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 802a75c:	2300      	movs	r3, #0
 802a75e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 802a760:	79fb      	ldrb	r3, [r7, #7]
 802a762:	b2db      	uxtb	r3, r3
}
 802a764:	4618      	mov	r0, r3
 802a766:	3708      	adds	r7, #8
 802a768:	46bd      	mov	sp, r7
 802a76a:	bd80      	pop	{r7, pc}

0802a76c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 802a76c:	b580      	push	{r7, lr}
 802a76e:	b082      	sub	sp, #8
 802a770:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 802a772:	2301      	movs	r3, #1
 802a774:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 802a776:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802a77a:	4806      	ldr	r0, [pc, #24]	; (802a794 <BSP_PlatformIsDetected+0x28>)
 802a77c:	f7fb fc32 	bl	8025fe4 <HAL_GPIO_ReadPin>
 802a780:	4603      	mov	r3, r0
 802a782:	2b00      	cmp	r3, #0
 802a784:	d001      	beq.n	802a78a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 802a786:	2300      	movs	r3, #0
 802a788:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 802a78a:	79fb      	ldrb	r3, [r7, #7]
}
 802a78c:	4618      	mov	r0, r3
 802a78e:	3708      	adds	r7, #8
 802a790:	46bd      	mov	sp, r7
 802a792:	bd80      	pop	{r7, pc}
 802a794:	40020800 	.word	0x40020800

0802a798 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 802a798:	b580      	push	{r7, lr}
 802a79a:	b082      	sub	sp, #8
 802a79c:	af00      	add	r7, sp, #0
 802a79e:	4603      	mov	r3, r0
 802a7a0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 802a7a2:	4b0b      	ldr	r3, [pc, #44]	; (802a7d0 <SD_CheckStatus+0x38>)
 802a7a4:	2201      	movs	r2, #1
 802a7a6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 802a7a8:	f7ff ffb0 	bl	802a70c <BSP_SD_GetCardState>
 802a7ac:	4603      	mov	r3, r0
 802a7ae:	2b00      	cmp	r3, #0
 802a7b0:	d107      	bne.n	802a7c2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 802a7b2:	4b07      	ldr	r3, [pc, #28]	; (802a7d0 <SD_CheckStatus+0x38>)
 802a7b4:	781b      	ldrb	r3, [r3, #0]
 802a7b6:	b2db      	uxtb	r3, r3
 802a7b8:	f023 0301 	bic.w	r3, r3, #1
 802a7bc:	b2da      	uxtb	r2, r3
 802a7be:	4b04      	ldr	r3, [pc, #16]	; (802a7d0 <SD_CheckStatus+0x38>)
 802a7c0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 802a7c2:	4b03      	ldr	r3, [pc, #12]	; (802a7d0 <SD_CheckStatus+0x38>)
 802a7c4:	781b      	ldrb	r3, [r3, #0]
 802a7c6:	b2db      	uxtb	r3, r3
}
 802a7c8:	4618      	mov	r0, r3
 802a7ca:	3708      	adds	r7, #8
 802a7cc:	46bd      	mov	sp, r7
 802a7ce:	bd80      	pop	{r7, pc}
 802a7d0:	20001419 	.word	0x20001419

0802a7d4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 802a7d4:	b580      	push	{r7, lr}
 802a7d6:	b082      	sub	sp, #8
 802a7d8:	af00      	add	r7, sp, #0
 802a7da:	4603      	mov	r3, r0
 802a7dc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 802a7de:	4b0b      	ldr	r3, [pc, #44]	; (802a80c <SD_initialize+0x38>)
 802a7e0:	2201      	movs	r2, #1
 802a7e2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 802a7e4:	f7ff ff30 	bl	802a648 <BSP_SD_Init>
 802a7e8:	4603      	mov	r3, r0
 802a7ea:	2b00      	cmp	r3, #0
 802a7ec:	d107      	bne.n	802a7fe <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 802a7ee:	79fb      	ldrb	r3, [r7, #7]
 802a7f0:	4618      	mov	r0, r3
 802a7f2:	f7ff ffd1 	bl	802a798 <SD_CheckStatus>
 802a7f6:	4603      	mov	r3, r0
 802a7f8:	461a      	mov	r2, r3
 802a7fa:	4b04      	ldr	r3, [pc, #16]	; (802a80c <SD_initialize+0x38>)
 802a7fc:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 802a7fe:	4b03      	ldr	r3, [pc, #12]	; (802a80c <SD_initialize+0x38>)
 802a800:	781b      	ldrb	r3, [r3, #0]
 802a802:	b2db      	uxtb	r3, r3
}
 802a804:	4618      	mov	r0, r3
 802a806:	3708      	adds	r7, #8
 802a808:	46bd      	mov	sp, r7
 802a80a:	bd80      	pop	{r7, pc}
 802a80c:	20001419 	.word	0x20001419

0802a810 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 802a810:	b580      	push	{r7, lr}
 802a812:	b082      	sub	sp, #8
 802a814:	af00      	add	r7, sp, #0
 802a816:	4603      	mov	r3, r0
 802a818:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 802a81a:	79fb      	ldrb	r3, [r7, #7]
 802a81c:	4618      	mov	r0, r3
 802a81e:	f7ff ffbb 	bl	802a798 <SD_CheckStatus>
 802a822:	4603      	mov	r3, r0
}
 802a824:	4618      	mov	r0, r3
 802a826:	3708      	adds	r7, #8
 802a828:	46bd      	mov	sp, r7
 802a82a:	bd80      	pop	{r7, pc}

0802a82c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 802a82c:	b580      	push	{r7, lr}
 802a82e:	b086      	sub	sp, #24
 802a830:	af00      	add	r7, sp, #0
 802a832:	60b9      	str	r1, [r7, #8]
 802a834:	607a      	str	r2, [r7, #4]
 802a836:	603b      	str	r3, [r7, #0]
 802a838:	4603      	mov	r3, r0
 802a83a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 802a83c:	2301      	movs	r3, #1
 802a83e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 802a840:	f04f 33ff 	mov.w	r3, #4294967295
 802a844:	683a      	ldr	r2, [r7, #0]
 802a846:	6879      	ldr	r1, [r7, #4]
 802a848:	68b8      	ldr	r0, [r7, #8]
 802a84a:	f7ff ff23 	bl	802a694 <BSP_SD_ReadBlocks>
 802a84e:	4603      	mov	r3, r0
 802a850:	2b00      	cmp	r3, #0
 802a852:	d107      	bne.n	802a864 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 802a854:	bf00      	nop
 802a856:	f7ff ff59 	bl	802a70c <BSP_SD_GetCardState>
 802a85a:	4603      	mov	r3, r0
 802a85c:	2b00      	cmp	r3, #0
 802a85e:	d1fa      	bne.n	802a856 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 802a860:	2300      	movs	r3, #0
 802a862:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 802a864:	7dfb      	ldrb	r3, [r7, #23]
}
 802a866:	4618      	mov	r0, r3
 802a868:	3718      	adds	r7, #24
 802a86a:	46bd      	mov	sp, r7
 802a86c:	bd80      	pop	{r7, pc}

0802a86e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 802a86e:	b580      	push	{r7, lr}
 802a870:	b086      	sub	sp, #24
 802a872:	af00      	add	r7, sp, #0
 802a874:	60b9      	str	r1, [r7, #8]
 802a876:	607a      	str	r2, [r7, #4]
 802a878:	603b      	str	r3, [r7, #0]
 802a87a:	4603      	mov	r3, r0
 802a87c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 802a87e:	2301      	movs	r3, #1
 802a880:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 802a882:	f04f 33ff 	mov.w	r3, #4294967295
 802a886:	683a      	ldr	r2, [r7, #0]
 802a888:	6879      	ldr	r1, [r7, #4]
 802a88a:	68b8      	ldr	r0, [r7, #8]
 802a88c:	f7ff ff20 	bl	802a6d0 <BSP_SD_WriteBlocks>
 802a890:	4603      	mov	r3, r0
 802a892:	2b00      	cmp	r3, #0
 802a894:	d107      	bne.n	802a8a6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 802a896:	bf00      	nop
 802a898:	f7ff ff38 	bl	802a70c <BSP_SD_GetCardState>
 802a89c:	4603      	mov	r3, r0
 802a89e:	2b00      	cmp	r3, #0
 802a8a0:	d1fa      	bne.n	802a898 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 802a8a2:	2300      	movs	r3, #0
 802a8a4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 802a8a6:	7dfb      	ldrb	r3, [r7, #23]
}
 802a8a8:	4618      	mov	r0, r3
 802a8aa:	3718      	adds	r7, #24
 802a8ac:	46bd      	mov	sp, r7
 802a8ae:	bd80      	pop	{r7, pc}

0802a8b0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 802a8b0:	b580      	push	{r7, lr}
 802a8b2:	b08c      	sub	sp, #48	; 0x30
 802a8b4:	af00      	add	r7, sp, #0
 802a8b6:	4603      	mov	r3, r0
 802a8b8:	603a      	str	r2, [r7, #0]
 802a8ba:	71fb      	strb	r3, [r7, #7]
 802a8bc:	460b      	mov	r3, r1
 802a8be:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 802a8c0:	2301      	movs	r3, #1
 802a8c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 802a8c6:	4b25      	ldr	r3, [pc, #148]	; (802a95c <SD_ioctl+0xac>)
 802a8c8:	781b      	ldrb	r3, [r3, #0]
 802a8ca:	b2db      	uxtb	r3, r3
 802a8cc:	f003 0301 	and.w	r3, r3, #1
 802a8d0:	2b00      	cmp	r3, #0
 802a8d2:	d001      	beq.n	802a8d8 <SD_ioctl+0x28>
 802a8d4:	2303      	movs	r3, #3
 802a8d6:	e03c      	b.n	802a952 <SD_ioctl+0xa2>

  switch (cmd)
 802a8d8:	79bb      	ldrb	r3, [r7, #6]
 802a8da:	2b03      	cmp	r3, #3
 802a8dc:	d834      	bhi.n	802a948 <SD_ioctl+0x98>
 802a8de:	a201      	add	r2, pc, #4	; (adr r2, 802a8e4 <SD_ioctl+0x34>)
 802a8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a8e4:	0802a8f5 	.word	0x0802a8f5
 802a8e8:	0802a8fd 	.word	0x0802a8fd
 802a8ec:	0802a915 	.word	0x0802a915
 802a8f0:	0802a92f 	.word	0x0802a92f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 802a8f4:	2300      	movs	r3, #0
 802a8f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 802a8fa:	e028      	b.n	802a94e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 802a8fc:	f107 030c 	add.w	r3, r7, #12
 802a900:	4618      	mov	r0, r3
 802a902:	f7ff ff13 	bl	802a72c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 802a906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a908:	683b      	ldr	r3, [r7, #0]
 802a90a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 802a90c:	2300      	movs	r3, #0
 802a90e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 802a912:	e01c      	b.n	802a94e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 802a914:	f107 030c 	add.w	r3, r7, #12
 802a918:	4618      	mov	r0, r3
 802a91a:	f7ff ff07 	bl	802a72c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 802a91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a920:	b29a      	uxth	r2, r3
 802a922:	683b      	ldr	r3, [r7, #0]
 802a924:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 802a926:	2300      	movs	r3, #0
 802a928:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 802a92c:	e00f      	b.n	802a94e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 802a92e:	f107 030c 	add.w	r3, r7, #12
 802a932:	4618      	mov	r0, r3
 802a934:	f7ff fefa 	bl	802a72c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 802a938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a93a:	0a5a      	lsrs	r2, r3, #9
 802a93c:	683b      	ldr	r3, [r7, #0]
 802a93e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 802a940:	2300      	movs	r3, #0
 802a942:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 802a946:	e002      	b.n	802a94e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 802a948:	2304      	movs	r3, #4
 802a94a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 802a94e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 802a952:	4618      	mov	r0, r3
 802a954:	3730      	adds	r7, #48	; 0x30
 802a956:	46bd      	mov	sp, r7
 802a958:	bd80      	pop	{r7, pc}
 802a95a:	bf00      	nop
 802a95c:	20001419 	.word	0x20001419

0802a960 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 802a960:	b580      	push	{r7, lr}
 802a962:	b084      	sub	sp, #16
 802a964:	af00      	add	r7, sp, #0
 802a966:	4603      	mov	r3, r0
 802a968:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 802a96a:	79fb      	ldrb	r3, [r7, #7]
 802a96c:	4a08      	ldr	r2, [pc, #32]	; (802a990 <disk_status+0x30>)
 802a96e:	009b      	lsls	r3, r3, #2
 802a970:	4413      	add	r3, r2
 802a972:	685b      	ldr	r3, [r3, #4]
 802a974:	685b      	ldr	r3, [r3, #4]
 802a976:	79fa      	ldrb	r2, [r7, #7]
 802a978:	4905      	ldr	r1, [pc, #20]	; (802a990 <disk_status+0x30>)
 802a97a:	440a      	add	r2, r1
 802a97c:	7a12      	ldrb	r2, [r2, #8]
 802a97e:	4610      	mov	r0, r2
 802a980:	4798      	blx	r3
 802a982:	4603      	mov	r3, r0
 802a984:	73fb      	strb	r3, [r7, #15]
  return stat;
 802a986:	7bfb      	ldrb	r3, [r7, #15]
}
 802a988:	4618      	mov	r0, r3
 802a98a:	3710      	adds	r7, #16
 802a98c:	46bd      	mov	sp, r7
 802a98e:	bd80      	pop	{r7, pc}
 802a990:	200214c8 	.word	0x200214c8

0802a994 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 802a994:	b580      	push	{r7, lr}
 802a996:	b084      	sub	sp, #16
 802a998:	af00      	add	r7, sp, #0
 802a99a:	4603      	mov	r3, r0
 802a99c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 802a99e:	2300      	movs	r3, #0
 802a9a0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 802a9a2:	79fb      	ldrb	r3, [r7, #7]
 802a9a4:	4a0d      	ldr	r2, [pc, #52]	; (802a9dc <disk_initialize+0x48>)
 802a9a6:	5cd3      	ldrb	r3, [r2, r3]
 802a9a8:	2b00      	cmp	r3, #0
 802a9aa:	d111      	bne.n	802a9d0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 802a9ac:	79fb      	ldrb	r3, [r7, #7]
 802a9ae:	4a0b      	ldr	r2, [pc, #44]	; (802a9dc <disk_initialize+0x48>)
 802a9b0:	2101      	movs	r1, #1
 802a9b2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 802a9b4:	79fb      	ldrb	r3, [r7, #7]
 802a9b6:	4a09      	ldr	r2, [pc, #36]	; (802a9dc <disk_initialize+0x48>)
 802a9b8:	009b      	lsls	r3, r3, #2
 802a9ba:	4413      	add	r3, r2
 802a9bc:	685b      	ldr	r3, [r3, #4]
 802a9be:	681b      	ldr	r3, [r3, #0]
 802a9c0:	79fa      	ldrb	r2, [r7, #7]
 802a9c2:	4906      	ldr	r1, [pc, #24]	; (802a9dc <disk_initialize+0x48>)
 802a9c4:	440a      	add	r2, r1
 802a9c6:	7a12      	ldrb	r2, [r2, #8]
 802a9c8:	4610      	mov	r0, r2
 802a9ca:	4798      	blx	r3
 802a9cc:	4603      	mov	r3, r0
 802a9ce:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 802a9d0:	7bfb      	ldrb	r3, [r7, #15]
}
 802a9d2:	4618      	mov	r0, r3
 802a9d4:	3710      	adds	r7, #16
 802a9d6:	46bd      	mov	sp, r7
 802a9d8:	bd80      	pop	{r7, pc}
 802a9da:	bf00      	nop
 802a9dc:	200214c8 	.word	0x200214c8

0802a9e0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 802a9e0:	b590      	push	{r4, r7, lr}
 802a9e2:	b087      	sub	sp, #28
 802a9e4:	af00      	add	r7, sp, #0
 802a9e6:	60b9      	str	r1, [r7, #8]
 802a9e8:	607a      	str	r2, [r7, #4]
 802a9ea:	603b      	str	r3, [r7, #0]
 802a9ec:	4603      	mov	r3, r0
 802a9ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 802a9f0:	7bfb      	ldrb	r3, [r7, #15]
 802a9f2:	4a0a      	ldr	r2, [pc, #40]	; (802aa1c <disk_read+0x3c>)
 802a9f4:	009b      	lsls	r3, r3, #2
 802a9f6:	4413      	add	r3, r2
 802a9f8:	685b      	ldr	r3, [r3, #4]
 802a9fa:	689c      	ldr	r4, [r3, #8]
 802a9fc:	7bfb      	ldrb	r3, [r7, #15]
 802a9fe:	4a07      	ldr	r2, [pc, #28]	; (802aa1c <disk_read+0x3c>)
 802aa00:	4413      	add	r3, r2
 802aa02:	7a18      	ldrb	r0, [r3, #8]
 802aa04:	683b      	ldr	r3, [r7, #0]
 802aa06:	687a      	ldr	r2, [r7, #4]
 802aa08:	68b9      	ldr	r1, [r7, #8]
 802aa0a:	47a0      	blx	r4
 802aa0c:	4603      	mov	r3, r0
 802aa0e:	75fb      	strb	r3, [r7, #23]
  return res;
 802aa10:	7dfb      	ldrb	r3, [r7, #23]
}
 802aa12:	4618      	mov	r0, r3
 802aa14:	371c      	adds	r7, #28
 802aa16:	46bd      	mov	sp, r7
 802aa18:	bd90      	pop	{r4, r7, pc}
 802aa1a:	bf00      	nop
 802aa1c:	200214c8 	.word	0x200214c8

0802aa20 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 802aa20:	b590      	push	{r4, r7, lr}
 802aa22:	b087      	sub	sp, #28
 802aa24:	af00      	add	r7, sp, #0
 802aa26:	60b9      	str	r1, [r7, #8]
 802aa28:	607a      	str	r2, [r7, #4]
 802aa2a:	603b      	str	r3, [r7, #0]
 802aa2c:	4603      	mov	r3, r0
 802aa2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 802aa30:	7bfb      	ldrb	r3, [r7, #15]
 802aa32:	4a0a      	ldr	r2, [pc, #40]	; (802aa5c <disk_write+0x3c>)
 802aa34:	009b      	lsls	r3, r3, #2
 802aa36:	4413      	add	r3, r2
 802aa38:	685b      	ldr	r3, [r3, #4]
 802aa3a:	68dc      	ldr	r4, [r3, #12]
 802aa3c:	7bfb      	ldrb	r3, [r7, #15]
 802aa3e:	4a07      	ldr	r2, [pc, #28]	; (802aa5c <disk_write+0x3c>)
 802aa40:	4413      	add	r3, r2
 802aa42:	7a18      	ldrb	r0, [r3, #8]
 802aa44:	683b      	ldr	r3, [r7, #0]
 802aa46:	687a      	ldr	r2, [r7, #4]
 802aa48:	68b9      	ldr	r1, [r7, #8]
 802aa4a:	47a0      	blx	r4
 802aa4c:	4603      	mov	r3, r0
 802aa4e:	75fb      	strb	r3, [r7, #23]
  return res;
 802aa50:	7dfb      	ldrb	r3, [r7, #23]
}
 802aa52:	4618      	mov	r0, r3
 802aa54:	371c      	adds	r7, #28
 802aa56:	46bd      	mov	sp, r7
 802aa58:	bd90      	pop	{r4, r7, pc}
 802aa5a:	bf00      	nop
 802aa5c:	200214c8 	.word	0x200214c8

0802aa60 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 802aa60:	b580      	push	{r7, lr}
 802aa62:	b084      	sub	sp, #16
 802aa64:	af00      	add	r7, sp, #0
 802aa66:	4603      	mov	r3, r0
 802aa68:	603a      	str	r2, [r7, #0]
 802aa6a:	71fb      	strb	r3, [r7, #7]
 802aa6c:	460b      	mov	r3, r1
 802aa6e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 802aa70:	79fb      	ldrb	r3, [r7, #7]
 802aa72:	4a09      	ldr	r2, [pc, #36]	; (802aa98 <disk_ioctl+0x38>)
 802aa74:	009b      	lsls	r3, r3, #2
 802aa76:	4413      	add	r3, r2
 802aa78:	685b      	ldr	r3, [r3, #4]
 802aa7a:	691b      	ldr	r3, [r3, #16]
 802aa7c:	79fa      	ldrb	r2, [r7, #7]
 802aa7e:	4906      	ldr	r1, [pc, #24]	; (802aa98 <disk_ioctl+0x38>)
 802aa80:	440a      	add	r2, r1
 802aa82:	7a10      	ldrb	r0, [r2, #8]
 802aa84:	79b9      	ldrb	r1, [r7, #6]
 802aa86:	683a      	ldr	r2, [r7, #0]
 802aa88:	4798      	blx	r3
 802aa8a:	4603      	mov	r3, r0
 802aa8c:	73fb      	strb	r3, [r7, #15]
  return res;
 802aa8e:	7bfb      	ldrb	r3, [r7, #15]
}
 802aa90:	4618      	mov	r0, r3
 802aa92:	3710      	adds	r7, #16
 802aa94:	46bd      	mov	sp, r7
 802aa96:	bd80      	pop	{r7, pc}
 802aa98:	200214c8 	.word	0x200214c8

0802aa9c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 802aa9c:	b480      	push	{r7}
 802aa9e:	b085      	sub	sp, #20
 802aaa0:	af00      	add	r7, sp, #0
 802aaa2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 802aaa4:	687b      	ldr	r3, [r7, #4]
 802aaa6:	3301      	adds	r3, #1
 802aaa8:	781b      	ldrb	r3, [r3, #0]
 802aaaa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 802aaac:	89fb      	ldrh	r3, [r7, #14]
 802aaae:	021b      	lsls	r3, r3, #8
 802aab0:	b21a      	sxth	r2, r3
 802aab2:	687b      	ldr	r3, [r7, #4]
 802aab4:	781b      	ldrb	r3, [r3, #0]
 802aab6:	b21b      	sxth	r3, r3
 802aab8:	4313      	orrs	r3, r2
 802aaba:	b21b      	sxth	r3, r3
 802aabc:	81fb      	strh	r3, [r7, #14]
	return rv;
 802aabe:	89fb      	ldrh	r3, [r7, #14]
}
 802aac0:	4618      	mov	r0, r3
 802aac2:	3714      	adds	r7, #20
 802aac4:	46bd      	mov	sp, r7
 802aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aaca:	4770      	bx	lr

0802aacc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 802aacc:	b480      	push	{r7}
 802aace:	b085      	sub	sp, #20
 802aad0:	af00      	add	r7, sp, #0
 802aad2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 802aad4:	687b      	ldr	r3, [r7, #4]
 802aad6:	3303      	adds	r3, #3
 802aad8:	781b      	ldrb	r3, [r3, #0]
 802aada:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 802aadc:	68fb      	ldr	r3, [r7, #12]
 802aade:	021b      	lsls	r3, r3, #8
 802aae0:	687a      	ldr	r2, [r7, #4]
 802aae2:	3202      	adds	r2, #2
 802aae4:	7812      	ldrb	r2, [r2, #0]
 802aae6:	4313      	orrs	r3, r2
 802aae8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 802aaea:	68fb      	ldr	r3, [r7, #12]
 802aaec:	021b      	lsls	r3, r3, #8
 802aaee:	687a      	ldr	r2, [r7, #4]
 802aaf0:	3201      	adds	r2, #1
 802aaf2:	7812      	ldrb	r2, [r2, #0]
 802aaf4:	4313      	orrs	r3, r2
 802aaf6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 802aaf8:	68fb      	ldr	r3, [r7, #12]
 802aafa:	021b      	lsls	r3, r3, #8
 802aafc:	687a      	ldr	r2, [r7, #4]
 802aafe:	7812      	ldrb	r2, [r2, #0]
 802ab00:	4313      	orrs	r3, r2
 802ab02:	60fb      	str	r3, [r7, #12]
	return rv;
 802ab04:	68fb      	ldr	r3, [r7, #12]
}
 802ab06:	4618      	mov	r0, r3
 802ab08:	3714      	adds	r7, #20
 802ab0a:	46bd      	mov	sp, r7
 802ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ab10:	4770      	bx	lr

0802ab12 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 802ab12:	b480      	push	{r7}
 802ab14:	b083      	sub	sp, #12
 802ab16:	af00      	add	r7, sp, #0
 802ab18:	6078      	str	r0, [r7, #4]
 802ab1a:	460b      	mov	r3, r1
 802ab1c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 802ab1e:	687b      	ldr	r3, [r7, #4]
 802ab20:	1c5a      	adds	r2, r3, #1
 802ab22:	607a      	str	r2, [r7, #4]
 802ab24:	887a      	ldrh	r2, [r7, #2]
 802ab26:	b2d2      	uxtb	r2, r2
 802ab28:	701a      	strb	r2, [r3, #0]
 802ab2a:	887b      	ldrh	r3, [r7, #2]
 802ab2c:	0a1b      	lsrs	r3, r3, #8
 802ab2e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 802ab30:	687b      	ldr	r3, [r7, #4]
 802ab32:	1c5a      	adds	r2, r3, #1
 802ab34:	607a      	str	r2, [r7, #4]
 802ab36:	887a      	ldrh	r2, [r7, #2]
 802ab38:	b2d2      	uxtb	r2, r2
 802ab3a:	701a      	strb	r2, [r3, #0]
}
 802ab3c:	bf00      	nop
 802ab3e:	370c      	adds	r7, #12
 802ab40:	46bd      	mov	sp, r7
 802ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ab46:	4770      	bx	lr

0802ab48 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 802ab48:	b480      	push	{r7}
 802ab4a:	b083      	sub	sp, #12
 802ab4c:	af00      	add	r7, sp, #0
 802ab4e:	6078      	str	r0, [r7, #4]
 802ab50:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 802ab52:	687b      	ldr	r3, [r7, #4]
 802ab54:	1c5a      	adds	r2, r3, #1
 802ab56:	607a      	str	r2, [r7, #4]
 802ab58:	683a      	ldr	r2, [r7, #0]
 802ab5a:	b2d2      	uxtb	r2, r2
 802ab5c:	701a      	strb	r2, [r3, #0]
 802ab5e:	683b      	ldr	r3, [r7, #0]
 802ab60:	0a1b      	lsrs	r3, r3, #8
 802ab62:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 802ab64:	687b      	ldr	r3, [r7, #4]
 802ab66:	1c5a      	adds	r2, r3, #1
 802ab68:	607a      	str	r2, [r7, #4]
 802ab6a:	683a      	ldr	r2, [r7, #0]
 802ab6c:	b2d2      	uxtb	r2, r2
 802ab6e:	701a      	strb	r2, [r3, #0]
 802ab70:	683b      	ldr	r3, [r7, #0]
 802ab72:	0a1b      	lsrs	r3, r3, #8
 802ab74:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 802ab76:	687b      	ldr	r3, [r7, #4]
 802ab78:	1c5a      	adds	r2, r3, #1
 802ab7a:	607a      	str	r2, [r7, #4]
 802ab7c:	683a      	ldr	r2, [r7, #0]
 802ab7e:	b2d2      	uxtb	r2, r2
 802ab80:	701a      	strb	r2, [r3, #0]
 802ab82:	683b      	ldr	r3, [r7, #0]
 802ab84:	0a1b      	lsrs	r3, r3, #8
 802ab86:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 802ab88:	687b      	ldr	r3, [r7, #4]
 802ab8a:	1c5a      	adds	r2, r3, #1
 802ab8c:	607a      	str	r2, [r7, #4]
 802ab8e:	683a      	ldr	r2, [r7, #0]
 802ab90:	b2d2      	uxtb	r2, r2
 802ab92:	701a      	strb	r2, [r3, #0]
}
 802ab94:	bf00      	nop
 802ab96:	370c      	adds	r7, #12
 802ab98:	46bd      	mov	sp, r7
 802ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ab9e:	4770      	bx	lr

0802aba0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 802aba0:	b480      	push	{r7}
 802aba2:	b087      	sub	sp, #28
 802aba4:	af00      	add	r7, sp, #0
 802aba6:	60f8      	str	r0, [r7, #12]
 802aba8:	60b9      	str	r1, [r7, #8]
 802abaa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 802abac:	68fb      	ldr	r3, [r7, #12]
 802abae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 802abb0:	68bb      	ldr	r3, [r7, #8]
 802abb2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 802abb4:	687b      	ldr	r3, [r7, #4]
 802abb6:	2b00      	cmp	r3, #0
 802abb8:	d00d      	beq.n	802abd6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 802abba:	693a      	ldr	r2, [r7, #16]
 802abbc:	1c53      	adds	r3, r2, #1
 802abbe:	613b      	str	r3, [r7, #16]
 802abc0:	697b      	ldr	r3, [r7, #20]
 802abc2:	1c59      	adds	r1, r3, #1
 802abc4:	6179      	str	r1, [r7, #20]
 802abc6:	7812      	ldrb	r2, [r2, #0]
 802abc8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 802abca:	687b      	ldr	r3, [r7, #4]
 802abcc:	3b01      	subs	r3, #1
 802abce:	607b      	str	r3, [r7, #4]
 802abd0:	687b      	ldr	r3, [r7, #4]
 802abd2:	2b00      	cmp	r3, #0
 802abd4:	d1f1      	bne.n	802abba <mem_cpy+0x1a>
	}
}
 802abd6:	bf00      	nop
 802abd8:	371c      	adds	r7, #28
 802abda:	46bd      	mov	sp, r7
 802abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802abe0:	4770      	bx	lr

0802abe2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 802abe2:	b480      	push	{r7}
 802abe4:	b087      	sub	sp, #28
 802abe6:	af00      	add	r7, sp, #0
 802abe8:	60f8      	str	r0, [r7, #12]
 802abea:	60b9      	str	r1, [r7, #8]
 802abec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 802abee:	68fb      	ldr	r3, [r7, #12]
 802abf0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 802abf2:	697b      	ldr	r3, [r7, #20]
 802abf4:	1c5a      	adds	r2, r3, #1
 802abf6:	617a      	str	r2, [r7, #20]
 802abf8:	68ba      	ldr	r2, [r7, #8]
 802abfa:	b2d2      	uxtb	r2, r2
 802abfc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 802abfe:	687b      	ldr	r3, [r7, #4]
 802ac00:	3b01      	subs	r3, #1
 802ac02:	607b      	str	r3, [r7, #4]
 802ac04:	687b      	ldr	r3, [r7, #4]
 802ac06:	2b00      	cmp	r3, #0
 802ac08:	d1f3      	bne.n	802abf2 <mem_set+0x10>
}
 802ac0a:	bf00      	nop
 802ac0c:	371c      	adds	r7, #28
 802ac0e:	46bd      	mov	sp, r7
 802ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac14:	4770      	bx	lr

0802ac16 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 802ac16:	b480      	push	{r7}
 802ac18:	b089      	sub	sp, #36	; 0x24
 802ac1a:	af00      	add	r7, sp, #0
 802ac1c:	60f8      	str	r0, [r7, #12]
 802ac1e:	60b9      	str	r1, [r7, #8]
 802ac20:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 802ac22:	68fb      	ldr	r3, [r7, #12]
 802ac24:	61fb      	str	r3, [r7, #28]
 802ac26:	68bb      	ldr	r3, [r7, #8]
 802ac28:	61bb      	str	r3, [r7, #24]
	int r = 0;
 802ac2a:	2300      	movs	r3, #0
 802ac2c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 802ac2e:	69fb      	ldr	r3, [r7, #28]
 802ac30:	1c5a      	adds	r2, r3, #1
 802ac32:	61fa      	str	r2, [r7, #28]
 802ac34:	781b      	ldrb	r3, [r3, #0]
 802ac36:	4619      	mov	r1, r3
 802ac38:	69bb      	ldr	r3, [r7, #24]
 802ac3a:	1c5a      	adds	r2, r3, #1
 802ac3c:	61ba      	str	r2, [r7, #24]
 802ac3e:	781b      	ldrb	r3, [r3, #0]
 802ac40:	1acb      	subs	r3, r1, r3
 802ac42:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 802ac44:	687b      	ldr	r3, [r7, #4]
 802ac46:	3b01      	subs	r3, #1
 802ac48:	607b      	str	r3, [r7, #4]
 802ac4a:	687b      	ldr	r3, [r7, #4]
 802ac4c:	2b00      	cmp	r3, #0
 802ac4e:	d002      	beq.n	802ac56 <mem_cmp+0x40>
 802ac50:	697b      	ldr	r3, [r7, #20]
 802ac52:	2b00      	cmp	r3, #0
 802ac54:	d0eb      	beq.n	802ac2e <mem_cmp+0x18>

	return r;
 802ac56:	697b      	ldr	r3, [r7, #20]
}
 802ac58:	4618      	mov	r0, r3
 802ac5a:	3724      	adds	r7, #36	; 0x24
 802ac5c:	46bd      	mov	sp, r7
 802ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac62:	4770      	bx	lr

0802ac64 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 802ac64:	b480      	push	{r7}
 802ac66:	b083      	sub	sp, #12
 802ac68:	af00      	add	r7, sp, #0
 802ac6a:	6078      	str	r0, [r7, #4]
 802ac6c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 802ac6e:	e002      	b.n	802ac76 <chk_chr+0x12>
 802ac70:	687b      	ldr	r3, [r7, #4]
 802ac72:	3301      	adds	r3, #1
 802ac74:	607b      	str	r3, [r7, #4]
 802ac76:	687b      	ldr	r3, [r7, #4]
 802ac78:	781b      	ldrb	r3, [r3, #0]
 802ac7a:	2b00      	cmp	r3, #0
 802ac7c:	d005      	beq.n	802ac8a <chk_chr+0x26>
 802ac7e:	687b      	ldr	r3, [r7, #4]
 802ac80:	781b      	ldrb	r3, [r3, #0]
 802ac82:	461a      	mov	r2, r3
 802ac84:	683b      	ldr	r3, [r7, #0]
 802ac86:	4293      	cmp	r3, r2
 802ac88:	d1f2      	bne.n	802ac70 <chk_chr+0xc>
	return *str;
 802ac8a:	687b      	ldr	r3, [r7, #4]
 802ac8c:	781b      	ldrb	r3, [r3, #0]
}
 802ac8e:	4618      	mov	r0, r3
 802ac90:	370c      	adds	r7, #12
 802ac92:	46bd      	mov	sp, r7
 802ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac98:	4770      	bx	lr
	...

0802ac9c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 802ac9c:	b480      	push	{r7}
 802ac9e:	b085      	sub	sp, #20
 802aca0:	af00      	add	r7, sp, #0
 802aca2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 802aca4:	2300      	movs	r3, #0
 802aca6:	60fb      	str	r3, [r7, #12]
 802aca8:	e010      	b.n	802accc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 802acaa:	4a0d      	ldr	r2, [pc, #52]	; (802ace0 <clear_lock+0x44>)
 802acac:	68fb      	ldr	r3, [r7, #12]
 802acae:	011b      	lsls	r3, r3, #4
 802acb0:	4413      	add	r3, r2
 802acb2:	681b      	ldr	r3, [r3, #0]
 802acb4:	687a      	ldr	r2, [r7, #4]
 802acb6:	429a      	cmp	r2, r3
 802acb8:	d105      	bne.n	802acc6 <clear_lock+0x2a>
 802acba:	4a09      	ldr	r2, [pc, #36]	; (802ace0 <clear_lock+0x44>)
 802acbc:	68fb      	ldr	r3, [r7, #12]
 802acbe:	011b      	lsls	r3, r3, #4
 802acc0:	4413      	add	r3, r2
 802acc2:	2200      	movs	r2, #0
 802acc4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 802acc6:	68fb      	ldr	r3, [r7, #12]
 802acc8:	3301      	adds	r3, #1
 802acca:	60fb      	str	r3, [r7, #12]
 802accc:	68fb      	ldr	r3, [r7, #12]
 802acce:	2b01      	cmp	r3, #1
 802acd0:	d9eb      	bls.n	802acaa <clear_lock+0xe>
	}
}
 802acd2:	bf00      	nop
 802acd4:	3714      	adds	r7, #20
 802acd6:	46bd      	mov	sp, r7
 802acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802acdc:	4770      	bx	lr
 802acde:	bf00      	nop
 802ace0:	200214a8 	.word	0x200214a8

0802ace4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 802ace4:	b580      	push	{r7, lr}
 802ace6:	b086      	sub	sp, #24
 802ace8:	af00      	add	r7, sp, #0
 802acea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 802acec:	2300      	movs	r3, #0
 802acee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 802acf0:	687b      	ldr	r3, [r7, #4]
 802acf2:	78db      	ldrb	r3, [r3, #3]
 802acf4:	2b00      	cmp	r3, #0
 802acf6:	d034      	beq.n	802ad62 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 802acf8:	687b      	ldr	r3, [r7, #4]
 802acfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802acfc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 802acfe:	687b      	ldr	r3, [r7, #4]
 802ad00:	7858      	ldrb	r0, [r3, #1]
 802ad02:	687b      	ldr	r3, [r7, #4]
 802ad04:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802ad08:	2301      	movs	r3, #1
 802ad0a:	697a      	ldr	r2, [r7, #20]
 802ad0c:	f7ff fe88 	bl	802aa20 <disk_write>
 802ad10:	4603      	mov	r3, r0
 802ad12:	2b00      	cmp	r3, #0
 802ad14:	d002      	beq.n	802ad1c <sync_window+0x38>
			res = FR_DISK_ERR;
 802ad16:	2301      	movs	r3, #1
 802ad18:	73fb      	strb	r3, [r7, #15]
 802ad1a:	e022      	b.n	802ad62 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 802ad1c:	687b      	ldr	r3, [r7, #4]
 802ad1e:	2200      	movs	r2, #0
 802ad20:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 802ad22:	687b      	ldr	r3, [r7, #4]
 802ad24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802ad26:	697a      	ldr	r2, [r7, #20]
 802ad28:	1ad2      	subs	r2, r2, r3
 802ad2a:	687b      	ldr	r3, [r7, #4]
 802ad2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ad2e:	429a      	cmp	r2, r3
 802ad30:	d217      	bcs.n	802ad62 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 802ad32:	687b      	ldr	r3, [r7, #4]
 802ad34:	789b      	ldrb	r3, [r3, #2]
 802ad36:	613b      	str	r3, [r7, #16]
 802ad38:	e010      	b.n	802ad5c <sync_window+0x78>
					wsect += fs->fsize;
 802ad3a:	687b      	ldr	r3, [r7, #4]
 802ad3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ad3e:	697a      	ldr	r2, [r7, #20]
 802ad40:	4413      	add	r3, r2
 802ad42:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 802ad44:	687b      	ldr	r3, [r7, #4]
 802ad46:	7858      	ldrb	r0, [r3, #1]
 802ad48:	687b      	ldr	r3, [r7, #4]
 802ad4a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802ad4e:	2301      	movs	r3, #1
 802ad50:	697a      	ldr	r2, [r7, #20]
 802ad52:	f7ff fe65 	bl	802aa20 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 802ad56:	693b      	ldr	r3, [r7, #16]
 802ad58:	3b01      	subs	r3, #1
 802ad5a:	613b      	str	r3, [r7, #16]
 802ad5c:	693b      	ldr	r3, [r7, #16]
 802ad5e:	2b01      	cmp	r3, #1
 802ad60:	d8eb      	bhi.n	802ad3a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 802ad62:	7bfb      	ldrb	r3, [r7, #15]
}
 802ad64:	4618      	mov	r0, r3
 802ad66:	3718      	adds	r7, #24
 802ad68:	46bd      	mov	sp, r7
 802ad6a:	bd80      	pop	{r7, pc}

0802ad6c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 802ad6c:	b580      	push	{r7, lr}
 802ad6e:	b084      	sub	sp, #16
 802ad70:	af00      	add	r7, sp, #0
 802ad72:	6078      	str	r0, [r7, #4]
 802ad74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 802ad76:	2300      	movs	r3, #0
 802ad78:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 802ad7a:	687b      	ldr	r3, [r7, #4]
 802ad7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ad7e:	683a      	ldr	r2, [r7, #0]
 802ad80:	429a      	cmp	r2, r3
 802ad82:	d01b      	beq.n	802adbc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 802ad84:	6878      	ldr	r0, [r7, #4]
 802ad86:	f7ff ffad 	bl	802ace4 <sync_window>
 802ad8a:	4603      	mov	r3, r0
 802ad8c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 802ad8e:	7bfb      	ldrb	r3, [r7, #15]
 802ad90:	2b00      	cmp	r3, #0
 802ad92:	d113      	bne.n	802adbc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 802ad94:	687b      	ldr	r3, [r7, #4]
 802ad96:	7858      	ldrb	r0, [r3, #1]
 802ad98:	687b      	ldr	r3, [r7, #4]
 802ad9a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802ad9e:	2301      	movs	r3, #1
 802ada0:	683a      	ldr	r2, [r7, #0]
 802ada2:	f7ff fe1d 	bl	802a9e0 <disk_read>
 802ada6:	4603      	mov	r3, r0
 802ada8:	2b00      	cmp	r3, #0
 802adaa:	d004      	beq.n	802adb6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 802adac:	f04f 33ff 	mov.w	r3, #4294967295
 802adb0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 802adb2:	2301      	movs	r3, #1
 802adb4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 802adb6:	687b      	ldr	r3, [r7, #4]
 802adb8:	683a      	ldr	r2, [r7, #0]
 802adba:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 802adbc:	7bfb      	ldrb	r3, [r7, #15]
}
 802adbe:	4618      	mov	r0, r3
 802adc0:	3710      	adds	r7, #16
 802adc2:	46bd      	mov	sp, r7
 802adc4:	bd80      	pop	{r7, pc}
	...

0802adc8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 802adc8:	b580      	push	{r7, lr}
 802adca:	b084      	sub	sp, #16
 802adcc:	af00      	add	r7, sp, #0
 802adce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 802add0:	6878      	ldr	r0, [r7, #4]
 802add2:	f7ff ff87 	bl	802ace4 <sync_window>
 802add6:	4603      	mov	r3, r0
 802add8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 802adda:	7bfb      	ldrb	r3, [r7, #15]
 802addc:	2b00      	cmp	r3, #0
 802adde:	d159      	bne.n	802ae94 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 802ade0:	687b      	ldr	r3, [r7, #4]
 802ade2:	781b      	ldrb	r3, [r3, #0]
 802ade4:	2b03      	cmp	r3, #3
 802ade6:	d149      	bne.n	802ae7c <sync_fs+0xb4>
 802ade8:	687b      	ldr	r3, [r7, #4]
 802adea:	791b      	ldrb	r3, [r3, #4]
 802adec:	2b01      	cmp	r3, #1
 802adee:	d145      	bne.n	802ae7c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 802adf0:	687b      	ldr	r3, [r7, #4]
 802adf2:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 802adf6:	687b      	ldr	r3, [r7, #4]
 802adf8:	899b      	ldrh	r3, [r3, #12]
 802adfa:	461a      	mov	r2, r3
 802adfc:	2100      	movs	r1, #0
 802adfe:	f7ff fef0 	bl	802abe2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 802ae02:	687b      	ldr	r3, [r7, #4]
 802ae04:	333c      	adds	r3, #60	; 0x3c
 802ae06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 802ae0a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 802ae0e:	4618      	mov	r0, r3
 802ae10:	f7ff fe7f 	bl	802ab12 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 802ae14:	687b      	ldr	r3, [r7, #4]
 802ae16:	333c      	adds	r3, #60	; 0x3c
 802ae18:	4921      	ldr	r1, [pc, #132]	; (802aea0 <sync_fs+0xd8>)
 802ae1a:	4618      	mov	r0, r3
 802ae1c:	f7ff fe94 	bl	802ab48 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 802ae20:	687b      	ldr	r3, [r7, #4]
 802ae22:	333c      	adds	r3, #60	; 0x3c
 802ae24:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 802ae28:	491e      	ldr	r1, [pc, #120]	; (802aea4 <sync_fs+0xdc>)
 802ae2a:	4618      	mov	r0, r3
 802ae2c:	f7ff fe8c 	bl	802ab48 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 802ae30:	687b      	ldr	r3, [r7, #4]
 802ae32:	333c      	adds	r3, #60	; 0x3c
 802ae34:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 802ae38:	687b      	ldr	r3, [r7, #4]
 802ae3a:	699b      	ldr	r3, [r3, #24]
 802ae3c:	4619      	mov	r1, r3
 802ae3e:	4610      	mov	r0, r2
 802ae40:	f7ff fe82 	bl	802ab48 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 802ae44:	687b      	ldr	r3, [r7, #4]
 802ae46:	333c      	adds	r3, #60	; 0x3c
 802ae48:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 802ae4c:	687b      	ldr	r3, [r7, #4]
 802ae4e:	695b      	ldr	r3, [r3, #20]
 802ae50:	4619      	mov	r1, r3
 802ae52:	4610      	mov	r0, r2
 802ae54:	f7ff fe78 	bl	802ab48 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 802ae58:	687b      	ldr	r3, [r7, #4]
 802ae5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ae5c:	1c5a      	adds	r2, r3, #1
 802ae5e:	687b      	ldr	r3, [r7, #4]
 802ae60:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 802ae62:	687b      	ldr	r3, [r7, #4]
 802ae64:	7858      	ldrb	r0, [r3, #1]
 802ae66:	687b      	ldr	r3, [r7, #4]
 802ae68:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802ae6c:	687b      	ldr	r3, [r7, #4]
 802ae6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802ae70:	2301      	movs	r3, #1
 802ae72:	f7ff fdd5 	bl	802aa20 <disk_write>
			fs->fsi_flag = 0;
 802ae76:	687b      	ldr	r3, [r7, #4]
 802ae78:	2200      	movs	r2, #0
 802ae7a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 802ae7c:	687b      	ldr	r3, [r7, #4]
 802ae7e:	785b      	ldrb	r3, [r3, #1]
 802ae80:	2200      	movs	r2, #0
 802ae82:	2100      	movs	r1, #0
 802ae84:	4618      	mov	r0, r3
 802ae86:	f7ff fdeb 	bl	802aa60 <disk_ioctl>
 802ae8a:	4603      	mov	r3, r0
 802ae8c:	2b00      	cmp	r3, #0
 802ae8e:	d001      	beq.n	802ae94 <sync_fs+0xcc>
 802ae90:	2301      	movs	r3, #1
 802ae92:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 802ae94:	7bfb      	ldrb	r3, [r7, #15]
}
 802ae96:	4618      	mov	r0, r3
 802ae98:	3710      	adds	r7, #16
 802ae9a:	46bd      	mov	sp, r7
 802ae9c:	bd80      	pop	{r7, pc}
 802ae9e:	bf00      	nop
 802aea0:	41615252 	.word	0x41615252
 802aea4:	61417272 	.word	0x61417272

0802aea8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 802aea8:	b480      	push	{r7}
 802aeaa:	b083      	sub	sp, #12
 802aeac:	af00      	add	r7, sp, #0
 802aeae:	6078      	str	r0, [r7, #4]
 802aeb0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 802aeb2:	683b      	ldr	r3, [r7, #0]
 802aeb4:	3b02      	subs	r3, #2
 802aeb6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 802aeb8:	687b      	ldr	r3, [r7, #4]
 802aeba:	6a1b      	ldr	r3, [r3, #32]
 802aebc:	3b02      	subs	r3, #2
 802aebe:	683a      	ldr	r2, [r7, #0]
 802aec0:	429a      	cmp	r2, r3
 802aec2:	d301      	bcc.n	802aec8 <clust2sect+0x20>
 802aec4:	2300      	movs	r3, #0
 802aec6:	e008      	b.n	802aeda <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 802aec8:	687b      	ldr	r3, [r7, #4]
 802aeca:	895b      	ldrh	r3, [r3, #10]
 802aecc:	461a      	mov	r2, r3
 802aece:	683b      	ldr	r3, [r7, #0]
 802aed0:	fb03 f202 	mul.w	r2, r3, r2
 802aed4:	687b      	ldr	r3, [r7, #4]
 802aed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802aed8:	4413      	add	r3, r2
}
 802aeda:	4618      	mov	r0, r3
 802aedc:	370c      	adds	r7, #12
 802aede:	46bd      	mov	sp, r7
 802aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aee4:	4770      	bx	lr

0802aee6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 802aee6:	b580      	push	{r7, lr}
 802aee8:	b086      	sub	sp, #24
 802aeea:	af00      	add	r7, sp, #0
 802aeec:	6078      	str	r0, [r7, #4]
 802aeee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 802aef0:	687b      	ldr	r3, [r7, #4]
 802aef2:	681b      	ldr	r3, [r3, #0]
 802aef4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 802aef6:	683b      	ldr	r3, [r7, #0]
 802aef8:	2b01      	cmp	r3, #1
 802aefa:	d904      	bls.n	802af06 <get_fat+0x20>
 802aefc:	693b      	ldr	r3, [r7, #16]
 802aefe:	6a1b      	ldr	r3, [r3, #32]
 802af00:	683a      	ldr	r2, [r7, #0]
 802af02:	429a      	cmp	r2, r3
 802af04:	d302      	bcc.n	802af0c <get_fat+0x26>
		val = 1;	/* Internal error */
 802af06:	2301      	movs	r3, #1
 802af08:	617b      	str	r3, [r7, #20]
 802af0a:	e0b7      	b.n	802b07c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 802af0c:	f04f 33ff 	mov.w	r3, #4294967295
 802af10:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 802af12:	693b      	ldr	r3, [r7, #16]
 802af14:	781b      	ldrb	r3, [r3, #0]
 802af16:	2b02      	cmp	r3, #2
 802af18:	d05a      	beq.n	802afd0 <get_fat+0xea>
 802af1a:	2b03      	cmp	r3, #3
 802af1c:	d07d      	beq.n	802b01a <get_fat+0x134>
 802af1e:	2b01      	cmp	r3, #1
 802af20:	f040 80a2 	bne.w	802b068 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 802af24:	683b      	ldr	r3, [r7, #0]
 802af26:	60fb      	str	r3, [r7, #12]
 802af28:	68fb      	ldr	r3, [r7, #12]
 802af2a:	085b      	lsrs	r3, r3, #1
 802af2c:	68fa      	ldr	r2, [r7, #12]
 802af2e:	4413      	add	r3, r2
 802af30:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 802af32:	693b      	ldr	r3, [r7, #16]
 802af34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802af36:	693b      	ldr	r3, [r7, #16]
 802af38:	899b      	ldrh	r3, [r3, #12]
 802af3a:	4619      	mov	r1, r3
 802af3c:	68fb      	ldr	r3, [r7, #12]
 802af3e:	fbb3 f3f1 	udiv	r3, r3, r1
 802af42:	4413      	add	r3, r2
 802af44:	4619      	mov	r1, r3
 802af46:	6938      	ldr	r0, [r7, #16]
 802af48:	f7ff ff10 	bl	802ad6c <move_window>
 802af4c:	4603      	mov	r3, r0
 802af4e:	2b00      	cmp	r3, #0
 802af50:	f040 808d 	bne.w	802b06e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 802af54:	68fb      	ldr	r3, [r7, #12]
 802af56:	1c5a      	adds	r2, r3, #1
 802af58:	60fa      	str	r2, [r7, #12]
 802af5a:	693a      	ldr	r2, [r7, #16]
 802af5c:	8992      	ldrh	r2, [r2, #12]
 802af5e:	fbb3 f1f2 	udiv	r1, r3, r2
 802af62:	fb02 f201 	mul.w	r2, r2, r1
 802af66:	1a9b      	subs	r3, r3, r2
 802af68:	693a      	ldr	r2, [r7, #16]
 802af6a:	4413      	add	r3, r2
 802af6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802af70:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 802af72:	693b      	ldr	r3, [r7, #16]
 802af74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802af76:	693b      	ldr	r3, [r7, #16]
 802af78:	899b      	ldrh	r3, [r3, #12]
 802af7a:	4619      	mov	r1, r3
 802af7c:	68fb      	ldr	r3, [r7, #12]
 802af7e:	fbb3 f3f1 	udiv	r3, r3, r1
 802af82:	4413      	add	r3, r2
 802af84:	4619      	mov	r1, r3
 802af86:	6938      	ldr	r0, [r7, #16]
 802af88:	f7ff fef0 	bl	802ad6c <move_window>
 802af8c:	4603      	mov	r3, r0
 802af8e:	2b00      	cmp	r3, #0
 802af90:	d16f      	bne.n	802b072 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 802af92:	693b      	ldr	r3, [r7, #16]
 802af94:	899b      	ldrh	r3, [r3, #12]
 802af96:	461a      	mov	r2, r3
 802af98:	68fb      	ldr	r3, [r7, #12]
 802af9a:	fbb3 f1f2 	udiv	r1, r3, r2
 802af9e:	fb02 f201 	mul.w	r2, r2, r1
 802afa2:	1a9b      	subs	r3, r3, r2
 802afa4:	693a      	ldr	r2, [r7, #16]
 802afa6:	4413      	add	r3, r2
 802afa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802afac:	021b      	lsls	r3, r3, #8
 802afae:	461a      	mov	r2, r3
 802afb0:	68bb      	ldr	r3, [r7, #8]
 802afb2:	4313      	orrs	r3, r2
 802afb4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 802afb6:	683b      	ldr	r3, [r7, #0]
 802afb8:	f003 0301 	and.w	r3, r3, #1
 802afbc:	2b00      	cmp	r3, #0
 802afbe:	d002      	beq.n	802afc6 <get_fat+0xe0>
 802afc0:	68bb      	ldr	r3, [r7, #8]
 802afc2:	091b      	lsrs	r3, r3, #4
 802afc4:	e002      	b.n	802afcc <get_fat+0xe6>
 802afc6:	68bb      	ldr	r3, [r7, #8]
 802afc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802afcc:	617b      	str	r3, [r7, #20]
			break;
 802afce:	e055      	b.n	802b07c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 802afd0:	693b      	ldr	r3, [r7, #16]
 802afd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802afd4:	693b      	ldr	r3, [r7, #16]
 802afd6:	899b      	ldrh	r3, [r3, #12]
 802afd8:	085b      	lsrs	r3, r3, #1
 802afda:	b29b      	uxth	r3, r3
 802afdc:	4619      	mov	r1, r3
 802afde:	683b      	ldr	r3, [r7, #0]
 802afe0:	fbb3 f3f1 	udiv	r3, r3, r1
 802afe4:	4413      	add	r3, r2
 802afe6:	4619      	mov	r1, r3
 802afe8:	6938      	ldr	r0, [r7, #16]
 802afea:	f7ff febf 	bl	802ad6c <move_window>
 802afee:	4603      	mov	r3, r0
 802aff0:	2b00      	cmp	r3, #0
 802aff2:	d140      	bne.n	802b076 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 802aff4:	693b      	ldr	r3, [r7, #16]
 802aff6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802affa:	683b      	ldr	r3, [r7, #0]
 802affc:	005b      	lsls	r3, r3, #1
 802affe:	693a      	ldr	r2, [r7, #16]
 802b000:	8992      	ldrh	r2, [r2, #12]
 802b002:	fbb3 f0f2 	udiv	r0, r3, r2
 802b006:	fb02 f200 	mul.w	r2, r2, r0
 802b00a:	1a9b      	subs	r3, r3, r2
 802b00c:	440b      	add	r3, r1
 802b00e:	4618      	mov	r0, r3
 802b010:	f7ff fd44 	bl	802aa9c <ld_word>
 802b014:	4603      	mov	r3, r0
 802b016:	617b      	str	r3, [r7, #20]
			break;
 802b018:	e030      	b.n	802b07c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 802b01a:	693b      	ldr	r3, [r7, #16]
 802b01c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b01e:	693b      	ldr	r3, [r7, #16]
 802b020:	899b      	ldrh	r3, [r3, #12]
 802b022:	089b      	lsrs	r3, r3, #2
 802b024:	b29b      	uxth	r3, r3
 802b026:	4619      	mov	r1, r3
 802b028:	683b      	ldr	r3, [r7, #0]
 802b02a:	fbb3 f3f1 	udiv	r3, r3, r1
 802b02e:	4413      	add	r3, r2
 802b030:	4619      	mov	r1, r3
 802b032:	6938      	ldr	r0, [r7, #16]
 802b034:	f7ff fe9a 	bl	802ad6c <move_window>
 802b038:	4603      	mov	r3, r0
 802b03a:	2b00      	cmp	r3, #0
 802b03c:	d11d      	bne.n	802b07a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 802b03e:	693b      	ldr	r3, [r7, #16]
 802b040:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802b044:	683b      	ldr	r3, [r7, #0]
 802b046:	009b      	lsls	r3, r3, #2
 802b048:	693a      	ldr	r2, [r7, #16]
 802b04a:	8992      	ldrh	r2, [r2, #12]
 802b04c:	fbb3 f0f2 	udiv	r0, r3, r2
 802b050:	fb02 f200 	mul.w	r2, r2, r0
 802b054:	1a9b      	subs	r3, r3, r2
 802b056:	440b      	add	r3, r1
 802b058:	4618      	mov	r0, r3
 802b05a:	f7ff fd37 	bl	802aacc <ld_dword>
 802b05e:	4603      	mov	r3, r0
 802b060:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 802b064:	617b      	str	r3, [r7, #20]
			break;
 802b066:	e009      	b.n	802b07c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 802b068:	2301      	movs	r3, #1
 802b06a:	617b      	str	r3, [r7, #20]
 802b06c:	e006      	b.n	802b07c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 802b06e:	bf00      	nop
 802b070:	e004      	b.n	802b07c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 802b072:	bf00      	nop
 802b074:	e002      	b.n	802b07c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 802b076:	bf00      	nop
 802b078:	e000      	b.n	802b07c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 802b07a:	bf00      	nop
		}
	}

	return val;
 802b07c:	697b      	ldr	r3, [r7, #20]
}
 802b07e:	4618      	mov	r0, r3
 802b080:	3718      	adds	r7, #24
 802b082:	46bd      	mov	sp, r7
 802b084:	bd80      	pop	{r7, pc}

0802b086 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 802b086:	b590      	push	{r4, r7, lr}
 802b088:	b089      	sub	sp, #36	; 0x24
 802b08a:	af00      	add	r7, sp, #0
 802b08c:	60f8      	str	r0, [r7, #12]
 802b08e:	60b9      	str	r1, [r7, #8]
 802b090:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 802b092:	2302      	movs	r3, #2
 802b094:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 802b096:	68bb      	ldr	r3, [r7, #8]
 802b098:	2b01      	cmp	r3, #1
 802b09a:	f240 8106 	bls.w	802b2aa <put_fat+0x224>
 802b09e:	68fb      	ldr	r3, [r7, #12]
 802b0a0:	6a1b      	ldr	r3, [r3, #32]
 802b0a2:	68ba      	ldr	r2, [r7, #8]
 802b0a4:	429a      	cmp	r2, r3
 802b0a6:	f080 8100 	bcs.w	802b2aa <put_fat+0x224>
		switch (fs->fs_type) {
 802b0aa:	68fb      	ldr	r3, [r7, #12]
 802b0ac:	781b      	ldrb	r3, [r3, #0]
 802b0ae:	2b02      	cmp	r3, #2
 802b0b0:	f000 8088 	beq.w	802b1c4 <put_fat+0x13e>
 802b0b4:	2b03      	cmp	r3, #3
 802b0b6:	f000 80b0 	beq.w	802b21a <put_fat+0x194>
 802b0ba:	2b01      	cmp	r3, #1
 802b0bc:	f040 80f5 	bne.w	802b2aa <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 802b0c0:	68bb      	ldr	r3, [r7, #8]
 802b0c2:	61bb      	str	r3, [r7, #24]
 802b0c4:	69bb      	ldr	r3, [r7, #24]
 802b0c6:	085b      	lsrs	r3, r3, #1
 802b0c8:	69ba      	ldr	r2, [r7, #24]
 802b0ca:	4413      	add	r3, r2
 802b0cc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 802b0ce:	68fb      	ldr	r3, [r7, #12]
 802b0d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b0d2:	68fb      	ldr	r3, [r7, #12]
 802b0d4:	899b      	ldrh	r3, [r3, #12]
 802b0d6:	4619      	mov	r1, r3
 802b0d8:	69bb      	ldr	r3, [r7, #24]
 802b0da:	fbb3 f3f1 	udiv	r3, r3, r1
 802b0de:	4413      	add	r3, r2
 802b0e0:	4619      	mov	r1, r3
 802b0e2:	68f8      	ldr	r0, [r7, #12]
 802b0e4:	f7ff fe42 	bl	802ad6c <move_window>
 802b0e8:	4603      	mov	r3, r0
 802b0ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 802b0ec:	7ffb      	ldrb	r3, [r7, #31]
 802b0ee:	2b00      	cmp	r3, #0
 802b0f0:	f040 80d4 	bne.w	802b29c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 802b0f4:	68fb      	ldr	r3, [r7, #12]
 802b0f6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802b0fa:	69bb      	ldr	r3, [r7, #24]
 802b0fc:	1c5a      	adds	r2, r3, #1
 802b0fe:	61ba      	str	r2, [r7, #24]
 802b100:	68fa      	ldr	r2, [r7, #12]
 802b102:	8992      	ldrh	r2, [r2, #12]
 802b104:	fbb3 f0f2 	udiv	r0, r3, r2
 802b108:	fb02 f200 	mul.w	r2, r2, r0
 802b10c:	1a9b      	subs	r3, r3, r2
 802b10e:	440b      	add	r3, r1
 802b110:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 802b112:	68bb      	ldr	r3, [r7, #8]
 802b114:	f003 0301 	and.w	r3, r3, #1
 802b118:	2b00      	cmp	r3, #0
 802b11a:	d00d      	beq.n	802b138 <put_fat+0xb2>
 802b11c:	697b      	ldr	r3, [r7, #20]
 802b11e:	781b      	ldrb	r3, [r3, #0]
 802b120:	b25b      	sxtb	r3, r3
 802b122:	f003 030f 	and.w	r3, r3, #15
 802b126:	b25a      	sxtb	r2, r3
 802b128:	687b      	ldr	r3, [r7, #4]
 802b12a:	b2db      	uxtb	r3, r3
 802b12c:	011b      	lsls	r3, r3, #4
 802b12e:	b25b      	sxtb	r3, r3
 802b130:	4313      	orrs	r3, r2
 802b132:	b25b      	sxtb	r3, r3
 802b134:	b2db      	uxtb	r3, r3
 802b136:	e001      	b.n	802b13c <put_fat+0xb6>
 802b138:	687b      	ldr	r3, [r7, #4]
 802b13a:	b2db      	uxtb	r3, r3
 802b13c:	697a      	ldr	r2, [r7, #20]
 802b13e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 802b140:	68fb      	ldr	r3, [r7, #12]
 802b142:	2201      	movs	r2, #1
 802b144:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 802b146:	68fb      	ldr	r3, [r7, #12]
 802b148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b14a:	68fb      	ldr	r3, [r7, #12]
 802b14c:	899b      	ldrh	r3, [r3, #12]
 802b14e:	4619      	mov	r1, r3
 802b150:	69bb      	ldr	r3, [r7, #24]
 802b152:	fbb3 f3f1 	udiv	r3, r3, r1
 802b156:	4413      	add	r3, r2
 802b158:	4619      	mov	r1, r3
 802b15a:	68f8      	ldr	r0, [r7, #12]
 802b15c:	f7ff fe06 	bl	802ad6c <move_window>
 802b160:	4603      	mov	r3, r0
 802b162:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 802b164:	7ffb      	ldrb	r3, [r7, #31]
 802b166:	2b00      	cmp	r3, #0
 802b168:	f040 809a 	bne.w	802b2a0 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 802b16c:	68fb      	ldr	r3, [r7, #12]
 802b16e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802b172:	68fb      	ldr	r3, [r7, #12]
 802b174:	899b      	ldrh	r3, [r3, #12]
 802b176:	461a      	mov	r2, r3
 802b178:	69bb      	ldr	r3, [r7, #24]
 802b17a:	fbb3 f0f2 	udiv	r0, r3, r2
 802b17e:	fb02 f200 	mul.w	r2, r2, r0
 802b182:	1a9b      	subs	r3, r3, r2
 802b184:	440b      	add	r3, r1
 802b186:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 802b188:	68bb      	ldr	r3, [r7, #8]
 802b18a:	f003 0301 	and.w	r3, r3, #1
 802b18e:	2b00      	cmp	r3, #0
 802b190:	d003      	beq.n	802b19a <put_fat+0x114>
 802b192:	687b      	ldr	r3, [r7, #4]
 802b194:	091b      	lsrs	r3, r3, #4
 802b196:	b2db      	uxtb	r3, r3
 802b198:	e00e      	b.n	802b1b8 <put_fat+0x132>
 802b19a:	697b      	ldr	r3, [r7, #20]
 802b19c:	781b      	ldrb	r3, [r3, #0]
 802b19e:	b25b      	sxtb	r3, r3
 802b1a0:	f023 030f 	bic.w	r3, r3, #15
 802b1a4:	b25a      	sxtb	r2, r3
 802b1a6:	687b      	ldr	r3, [r7, #4]
 802b1a8:	0a1b      	lsrs	r3, r3, #8
 802b1aa:	b25b      	sxtb	r3, r3
 802b1ac:	f003 030f 	and.w	r3, r3, #15
 802b1b0:	b25b      	sxtb	r3, r3
 802b1b2:	4313      	orrs	r3, r2
 802b1b4:	b25b      	sxtb	r3, r3
 802b1b6:	b2db      	uxtb	r3, r3
 802b1b8:	697a      	ldr	r2, [r7, #20]
 802b1ba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 802b1bc:	68fb      	ldr	r3, [r7, #12]
 802b1be:	2201      	movs	r2, #1
 802b1c0:	70da      	strb	r2, [r3, #3]
			break;
 802b1c2:	e072      	b.n	802b2aa <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 802b1c4:	68fb      	ldr	r3, [r7, #12]
 802b1c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b1c8:	68fb      	ldr	r3, [r7, #12]
 802b1ca:	899b      	ldrh	r3, [r3, #12]
 802b1cc:	085b      	lsrs	r3, r3, #1
 802b1ce:	b29b      	uxth	r3, r3
 802b1d0:	4619      	mov	r1, r3
 802b1d2:	68bb      	ldr	r3, [r7, #8]
 802b1d4:	fbb3 f3f1 	udiv	r3, r3, r1
 802b1d8:	4413      	add	r3, r2
 802b1da:	4619      	mov	r1, r3
 802b1dc:	68f8      	ldr	r0, [r7, #12]
 802b1de:	f7ff fdc5 	bl	802ad6c <move_window>
 802b1e2:	4603      	mov	r3, r0
 802b1e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 802b1e6:	7ffb      	ldrb	r3, [r7, #31]
 802b1e8:	2b00      	cmp	r3, #0
 802b1ea:	d15b      	bne.n	802b2a4 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 802b1ec:	68fb      	ldr	r3, [r7, #12]
 802b1ee:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802b1f2:	68bb      	ldr	r3, [r7, #8]
 802b1f4:	005b      	lsls	r3, r3, #1
 802b1f6:	68fa      	ldr	r2, [r7, #12]
 802b1f8:	8992      	ldrh	r2, [r2, #12]
 802b1fa:	fbb3 f0f2 	udiv	r0, r3, r2
 802b1fe:	fb02 f200 	mul.w	r2, r2, r0
 802b202:	1a9b      	subs	r3, r3, r2
 802b204:	440b      	add	r3, r1
 802b206:	687a      	ldr	r2, [r7, #4]
 802b208:	b292      	uxth	r2, r2
 802b20a:	4611      	mov	r1, r2
 802b20c:	4618      	mov	r0, r3
 802b20e:	f7ff fc80 	bl	802ab12 <st_word>
			fs->wflag = 1;
 802b212:	68fb      	ldr	r3, [r7, #12]
 802b214:	2201      	movs	r2, #1
 802b216:	70da      	strb	r2, [r3, #3]
			break;
 802b218:	e047      	b.n	802b2aa <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 802b21a:	68fb      	ldr	r3, [r7, #12]
 802b21c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b21e:	68fb      	ldr	r3, [r7, #12]
 802b220:	899b      	ldrh	r3, [r3, #12]
 802b222:	089b      	lsrs	r3, r3, #2
 802b224:	b29b      	uxth	r3, r3
 802b226:	4619      	mov	r1, r3
 802b228:	68bb      	ldr	r3, [r7, #8]
 802b22a:	fbb3 f3f1 	udiv	r3, r3, r1
 802b22e:	4413      	add	r3, r2
 802b230:	4619      	mov	r1, r3
 802b232:	68f8      	ldr	r0, [r7, #12]
 802b234:	f7ff fd9a 	bl	802ad6c <move_window>
 802b238:	4603      	mov	r3, r0
 802b23a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 802b23c:	7ffb      	ldrb	r3, [r7, #31]
 802b23e:	2b00      	cmp	r3, #0
 802b240:	d132      	bne.n	802b2a8 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 802b242:	687b      	ldr	r3, [r7, #4]
 802b244:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 802b248:	68fb      	ldr	r3, [r7, #12]
 802b24a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802b24e:	68bb      	ldr	r3, [r7, #8]
 802b250:	009b      	lsls	r3, r3, #2
 802b252:	68fa      	ldr	r2, [r7, #12]
 802b254:	8992      	ldrh	r2, [r2, #12]
 802b256:	fbb3 f0f2 	udiv	r0, r3, r2
 802b25a:	fb02 f200 	mul.w	r2, r2, r0
 802b25e:	1a9b      	subs	r3, r3, r2
 802b260:	440b      	add	r3, r1
 802b262:	4618      	mov	r0, r3
 802b264:	f7ff fc32 	bl	802aacc <ld_dword>
 802b268:	4603      	mov	r3, r0
 802b26a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 802b26e:	4323      	orrs	r3, r4
 802b270:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 802b272:	68fb      	ldr	r3, [r7, #12]
 802b274:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802b278:	68bb      	ldr	r3, [r7, #8]
 802b27a:	009b      	lsls	r3, r3, #2
 802b27c:	68fa      	ldr	r2, [r7, #12]
 802b27e:	8992      	ldrh	r2, [r2, #12]
 802b280:	fbb3 f0f2 	udiv	r0, r3, r2
 802b284:	fb02 f200 	mul.w	r2, r2, r0
 802b288:	1a9b      	subs	r3, r3, r2
 802b28a:	440b      	add	r3, r1
 802b28c:	6879      	ldr	r1, [r7, #4]
 802b28e:	4618      	mov	r0, r3
 802b290:	f7ff fc5a 	bl	802ab48 <st_dword>
			fs->wflag = 1;
 802b294:	68fb      	ldr	r3, [r7, #12]
 802b296:	2201      	movs	r2, #1
 802b298:	70da      	strb	r2, [r3, #3]
			break;
 802b29a:	e006      	b.n	802b2aa <put_fat+0x224>
			if (res != FR_OK) break;
 802b29c:	bf00      	nop
 802b29e:	e004      	b.n	802b2aa <put_fat+0x224>
			if (res != FR_OK) break;
 802b2a0:	bf00      	nop
 802b2a2:	e002      	b.n	802b2aa <put_fat+0x224>
			if (res != FR_OK) break;
 802b2a4:	bf00      	nop
 802b2a6:	e000      	b.n	802b2aa <put_fat+0x224>
			if (res != FR_OK) break;
 802b2a8:	bf00      	nop
		}
	}
	return res;
 802b2aa:	7ffb      	ldrb	r3, [r7, #31]
}
 802b2ac:	4618      	mov	r0, r3
 802b2ae:	3724      	adds	r7, #36	; 0x24
 802b2b0:	46bd      	mov	sp, r7
 802b2b2:	bd90      	pop	{r4, r7, pc}

0802b2b4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 802b2b4:	b580      	push	{r7, lr}
 802b2b6:	b088      	sub	sp, #32
 802b2b8:	af00      	add	r7, sp, #0
 802b2ba:	60f8      	str	r0, [r7, #12]
 802b2bc:	60b9      	str	r1, [r7, #8]
 802b2be:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 802b2c0:	2300      	movs	r3, #0
 802b2c2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 802b2c4:	68fb      	ldr	r3, [r7, #12]
 802b2c6:	681b      	ldr	r3, [r3, #0]
 802b2c8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 802b2ca:	68bb      	ldr	r3, [r7, #8]
 802b2cc:	2b01      	cmp	r3, #1
 802b2ce:	d904      	bls.n	802b2da <remove_chain+0x26>
 802b2d0:	69bb      	ldr	r3, [r7, #24]
 802b2d2:	6a1b      	ldr	r3, [r3, #32]
 802b2d4:	68ba      	ldr	r2, [r7, #8]
 802b2d6:	429a      	cmp	r2, r3
 802b2d8:	d301      	bcc.n	802b2de <remove_chain+0x2a>
 802b2da:	2302      	movs	r3, #2
 802b2dc:	e04b      	b.n	802b376 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 802b2de:	687b      	ldr	r3, [r7, #4]
 802b2e0:	2b00      	cmp	r3, #0
 802b2e2:	d00c      	beq.n	802b2fe <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 802b2e4:	f04f 32ff 	mov.w	r2, #4294967295
 802b2e8:	6879      	ldr	r1, [r7, #4]
 802b2ea:	69b8      	ldr	r0, [r7, #24]
 802b2ec:	f7ff fecb 	bl	802b086 <put_fat>
 802b2f0:	4603      	mov	r3, r0
 802b2f2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 802b2f4:	7ffb      	ldrb	r3, [r7, #31]
 802b2f6:	2b00      	cmp	r3, #0
 802b2f8:	d001      	beq.n	802b2fe <remove_chain+0x4a>
 802b2fa:	7ffb      	ldrb	r3, [r7, #31]
 802b2fc:	e03b      	b.n	802b376 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 802b2fe:	68b9      	ldr	r1, [r7, #8]
 802b300:	68f8      	ldr	r0, [r7, #12]
 802b302:	f7ff fdf0 	bl	802aee6 <get_fat>
 802b306:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 802b308:	697b      	ldr	r3, [r7, #20]
 802b30a:	2b00      	cmp	r3, #0
 802b30c:	d031      	beq.n	802b372 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 802b30e:	697b      	ldr	r3, [r7, #20]
 802b310:	2b01      	cmp	r3, #1
 802b312:	d101      	bne.n	802b318 <remove_chain+0x64>
 802b314:	2302      	movs	r3, #2
 802b316:	e02e      	b.n	802b376 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 802b318:	697b      	ldr	r3, [r7, #20]
 802b31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b31e:	d101      	bne.n	802b324 <remove_chain+0x70>
 802b320:	2301      	movs	r3, #1
 802b322:	e028      	b.n	802b376 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 802b324:	2200      	movs	r2, #0
 802b326:	68b9      	ldr	r1, [r7, #8]
 802b328:	69b8      	ldr	r0, [r7, #24]
 802b32a:	f7ff feac 	bl	802b086 <put_fat>
 802b32e:	4603      	mov	r3, r0
 802b330:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 802b332:	7ffb      	ldrb	r3, [r7, #31]
 802b334:	2b00      	cmp	r3, #0
 802b336:	d001      	beq.n	802b33c <remove_chain+0x88>
 802b338:	7ffb      	ldrb	r3, [r7, #31]
 802b33a:	e01c      	b.n	802b376 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 802b33c:	69bb      	ldr	r3, [r7, #24]
 802b33e:	699a      	ldr	r2, [r3, #24]
 802b340:	69bb      	ldr	r3, [r7, #24]
 802b342:	6a1b      	ldr	r3, [r3, #32]
 802b344:	3b02      	subs	r3, #2
 802b346:	429a      	cmp	r2, r3
 802b348:	d20b      	bcs.n	802b362 <remove_chain+0xae>
			fs->free_clst++;
 802b34a:	69bb      	ldr	r3, [r7, #24]
 802b34c:	699b      	ldr	r3, [r3, #24]
 802b34e:	1c5a      	adds	r2, r3, #1
 802b350:	69bb      	ldr	r3, [r7, #24]
 802b352:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 802b354:	69bb      	ldr	r3, [r7, #24]
 802b356:	791b      	ldrb	r3, [r3, #4]
 802b358:	f043 0301 	orr.w	r3, r3, #1
 802b35c:	b2da      	uxtb	r2, r3
 802b35e:	69bb      	ldr	r3, [r7, #24]
 802b360:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 802b362:	697b      	ldr	r3, [r7, #20]
 802b364:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 802b366:	69bb      	ldr	r3, [r7, #24]
 802b368:	6a1b      	ldr	r3, [r3, #32]
 802b36a:	68ba      	ldr	r2, [r7, #8]
 802b36c:	429a      	cmp	r2, r3
 802b36e:	d3c6      	bcc.n	802b2fe <remove_chain+0x4a>
 802b370:	e000      	b.n	802b374 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 802b372:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 802b374:	2300      	movs	r3, #0
}
 802b376:	4618      	mov	r0, r3
 802b378:	3720      	adds	r7, #32
 802b37a:	46bd      	mov	sp, r7
 802b37c:	bd80      	pop	{r7, pc}

0802b37e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 802b37e:	b580      	push	{r7, lr}
 802b380:	b088      	sub	sp, #32
 802b382:	af00      	add	r7, sp, #0
 802b384:	6078      	str	r0, [r7, #4]
 802b386:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 802b388:	687b      	ldr	r3, [r7, #4]
 802b38a:	681b      	ldr	r3, [r3, #0]
 802b38c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 802b38e:	683b      	ldr	r3, [r7, #0]
 802b390:	2b00      	cmp	r3, #0
 802b392:	d10d      	bne.n	802b3b0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 802b394:	693b      	ldr	r3, [r7, #16]
 802b396:	695b      	ldr	r3, [r3, #20]
 802b398:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 802b39a:	69bb      	ldr	r3, [r7, #24]
 802b39c:	2b00      	cmp	r3, #0
 802b39e:	d004      	beq.n	802b3aa <create_chain+0x2c>
 802b3a0:	693b      	ldr	r3, [r7, #16]
 802b3a2:	6a1b      	ldr	r3, [r3, #32]
 802b3a4:	69ba      	ldr	r2, [r7, #24]
 802b3a6:	429a      	cmp	r2, r3
 802b3a8:	d31b      	bcc.n	802b3e2 <create_chain+0x64>
 802b3aa:	2301      	movs	r3, #1
 802b3ac:	61bb      	str	r3, [r7, #24]
 802b3ae:	e018      	b.n	802b3e2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 802b3b0:	6839      	ldr	r1, [r7, #0]
 802b3b2:	6878      	ldr	r0, [r7, #4]
 802b3b4:	f7ff fd97 	bl	802aee6 <get_fat>
 802b3b8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 802b3ba:	68fb      	ldr	r3, [r7, #12]
 802b3bc:	2b01      	cmp	r3, #1
 802b3be:	d801      	bhi.n	802b3c4 <create_chain+0x46>
 802b3c0:	2301      	movs	r3, #1
 802b3c2:	e070      	b.n	802b4a6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 802b3c4:	68fb      	ldr	r3, [r7, #12]
 802b3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b3ca:	d101      	bne.n	802b3d0 <create_chain+0x52>
 802b3cc:	68fb      	ldr	r3, [r7, #12]
 802b3ce:	e06a      	b.n	802b4a6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 802b3d0:	693b      	ldr	r3, [r7, #16]
 802b3d2:	6a1b      	ldr	r3, [r3, #32]
 802b3d4:	68fa      	ldr	r2, [r7, #12]
 802b3d6:	429a      	cmp	r2, r3
 802b3d8:	d201      	bcs.n	802b3de <create_chain+0x60>
 802b3da:	68fb      	ldr	r3, [r7, #12]
 802b3dc:	e063      	b.n	802b4a6 <create_chain+0x128>
		scl = clst;
 802b3de:	683b      	ldr	r3, [r7, #0]
 802b3e0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 802b3e2:	69bb      	ldr	r3, [r7, #24]
 802b3e4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 802b3e6:	69fb      	ldr	r3, [r7, #28]
 802b3e8:	3301      	adds	r3, #1
 802b3ea:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 802b3ec:	693b      	ldr	r3, [r7, #16]
 802b3ee:	6a1b      	ldr	r3, [r3, #32]
 802b3f0:	69fa      	ldr	r2, [r7, #28]
 802b3f2:	429a      	cmp	r2, r3
 802b3f4:	d307      	bcc.n	802b406 <create_chain+0x88>
				ncl = 2;
 802b3f6:	2302      	movs	r3, #2
 802b3f8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 802b3fa:	69fa      	ldr	r2, [r7, #28]
 802b3fc:	69bb      	ldr	r3, [r7, #24]
 802b3fe:	429a      	cmp	r2, r3
 802b400:	d901      	bls.n	802b406 <create_chain+0x88>
 802b402:	2300      	movs	r3, #0
 802b404:	e04f      	b.n	802b4a6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 802b406:	69f9      	ldr	r1, [r7, #28]
 802b408:	6878      	ldr	r0, [r7, #4]
 802b40a:	f7ff fd6c 	bl	802aee6 <get_fat>
 802b40e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 802b410:	68fb      	ldr	r3, [r7, #12]
 802b412:	2b00      	cmp	r3, #0
 802b414:	d00e      	beq.n	802b434 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 802b416:	68fb      	ldr	r3, [r7, #12]
 802b418:	2b01      	cmp	r3, #1
 802b41a:	d003      	beq.n	802b424 <create_chain+0xa6>
 802b41c:	68fb      	ldr	r3, [r7, #12]
 802b41e:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b422:	d101      	bne.n	802b428 <create_chain+0xaa>
 802b424:	68fb      	ldr	r3, [r7, #12]
 802b426:	e03e      	b.n	802b4a6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 802b428:	69fa      	ldr	r2, [r7, #28]
 802b42a:	69bb      	ldr	r3, [r7, #24]
 802b42c:	429a      	cmp	r2, r3
 802b42e:	d1da      	bne.n	802b3e6 <create_chain+0x68>
 802b430:	2300      	movs	r3, #0
 802b432:	e038      	b.n	802b4a6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 802b434:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 802b436:	f04f 32ff 	mov.w	r2, #4294967295
 802b43a:	69f9      	ldr	r1, [r7, #28]
 802b43c:	6938      	ldr	r0, [r7, #16]
 802b43e:	f7ff fe22 	bl	802b086 <put_fat>
 802b442:	4603      	mov	r3, r0
 802b444:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 802b446:	7dfb      	ldrb	r3, [r7, #23]
 802b448:	2b00      	cmp	r3, #0
 802b44a:	d109      	bne.n	802b460 <create_chain+0xe2>
 802b44c:	683b      	ldr	r3, [r7, #0]
 802b44e:	2b00      	cmp	r3, #0
 802b450:	d006      	beq.n	802b460 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 802b452:	69fa      	ldr	r2, [r7, #28]
 802b454:	6839      	ldr	r1, [r7, #0]
 802b456:	6938      	ldr	r0, [r7, #16]
 802b458:	f7ff fe15 	bl	802b086 <put_fat>
 802b45c:	4603      	mov	r3, r0
 802b45e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 802b460:	7dfb      	ldrb	r3, [r7, #23]
 802b462:	2b00      	cmp	r3, #0
 802b464:	d116      	bne.n	802b494 <create_chain+0x116>
		fs->last_clst = ncl;
 802b466:	693b      	ldr	r3, [r7, #16]
 802b468:	69fa      	ldr	r2, [r7, #28]
 802b46a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 802b46c:	693b      	ldr	r3, [r7, #16]
 802b46e:	699a      	ldr	r2, [r3, #24]
 802b470:	693b      	ldr	r3, [r7, #16]
 802b472:	6a1b      	ldr	r3, [r3, #32]
 802b474:	3b02      	subs	r3, #2
 802b476:	429a      	cmp	r2, r3
 802b478:	d804      	bhi.n	802b484 <create_chain+0x106>
 802b47a:	693b      	ldr	r3, [r7, #16]
 802b47c:	699b      	ldr	r3, [r3, #24]
 802b47e:	1e5a      	subs	r2, r3, #1
 802b480:	693b      	ldr	r3, [r7, #16]
 802b482:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 802b484:	693b      	ldr	r3, [r7, #16]
 802b486:	791b      	ldrb	r3, [r3, #4]
 802b488:	f043 0301 	orr.w	r3, r3, #1
 802b48c:	b2da      	uxtb	r2, r3
 802b48e:	693b      	ldr	r3, [r7, #16]
 802b490:	711a      	strb	r2, [r3, #4]
 802b492:	e007      	b.n	802b4a4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 802b494:	7dfb      	ldrb	r3, [r7, #23]
 802b496:	2b01      	cmp	r3, #1
 802b498:	d102      	bne.n	802b4a0 <create_chain+0x122>
 802b49a:	f04f 33ff 	mov.w	r3, #4294967295
 802b49e:	e000      	b.n	802b4a2 <create_chain+0x124>
 802b4a0:	2301      	movs	r3, #1
 802b4a2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 802b4a4:	69fb      	ldr	r3, [r7, #28]
}
 802b4a6:	4618      	mov	r0, r3
 802b4a8:	3720      	adds	r7, #32
 802b4aa:	46bd      	mov	sp, r7
 802b4ac:	bd80      	pop	{r7, pc}

0802b4ae <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 802b4ae:	b580      	push	{r7, lr}
 802b4b0:	b086      	sub	sp, #24
 802b4b2:	af00      	add	r7, sp, #0
 802b4b4:	6078      	str	r0, [r7, #4]
 802b4b6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 802b4b8:	687b      	ldr	r3, [r7, #4]
 802b4ba:	681b      	ldr	r3, [r3, #0]
 802b4bc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 802b4be:	683b      	ldr	r3, [r7, #0]
 802b4c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802b4c4:	d204      	bcs.n	802b4d0 <dir_sdi+0x22>
 802b4c6:	683b      	ldr	r3, [r7, #0]
 802b4c8:	f003 031f 	and.w	r3, r3, #31
 802b4cc:	2b00      	cmp	r3, #0
 802b4ce:	d001      	beq.n	802b4d4 <dir_sdi+0x26>
		return FR_INT_ERR;
 802b4d0:	2302      	movs	r3, #2
 802b4d2:	e071      	b.n	802b5b8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 802b4d4:	687b      	ldr	r3, [r7, #4]
 802b4d6:	683a      	ldr	r2, [r7, #0]
 802b4d8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 802b4da:	687b      	ldr	r3, [r7, #4]
 802b4dc:	689b      	ldr	r3, [r3, #8]
 802b4de:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 802b4e0:	697b      	ldr	r3, [r7, #20]
 802b4e2:	2b00      	cmp	r3, #0
 802b4e4:	d106      	bne.n	802b4f4 <dir_sdi+0x46>
 802b4e6:	693b      	ldr	r3, [r7, #16]
 802b4e8:	781b      	ldrb	r3, [r3, #0]
 802b4ea:	2b02      	cmp	r3, #2
 802b4ec:	d902      	bls.n	802b4f4 <dir_sdi+0x46>
		clst = fs->dirbase;
 802b4ee:	693b      	ldr	r3, [r7, #16]
 802b4f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b4f2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 802b4f4:	697b      	ldr	r3, [r7, #20]
 802b4f6:	2b00      	cmp	r3, #0
 802b4f8:	d10c      	bne.n	802b514 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 802b4fa:	683b      	ldr	r3, [r7, #0]
 802b4fc:	095b      	lsrs	r3, r3, #5
 802b4fe:	693a      	ldr	r2, [r7, #16]
 802b500:	8912      	ldrh	r2, [r2, #8]
 802b502:	4293      	cmp	r3, r2
 802b504:	d301      	bcc.n	802b50a <dir_sdi+0x5c>
 802b506:	2302      	movs	r3, #2
 802b508:	e056      	b.n	802b5b8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 802b50a:	693b      	ldr	r3, [r7, #16]
 802b50c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b50e:	687b      	ldr	r3, [r7, #4]
 802b510:	61da      	str	r2, [r3, #28]
 802b512:	e02d      	b.n	802b570 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 802b514:	693b      	ldr	r3, [r7, #16]
 802b516:	895b      	ldrh	r3, [r3, #10]
 802b518:	461a      	mov	r2, r3
 802b51a:	693b      	ldr	r3, [r7, #16]
 802b51c:	899b      	ldrh	r3, [r3, #12]
 802b51e:	fb03 f302 	mul.w	r3, r3, r2
 802b522:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 802b524:	e019      	b.n	802b55a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 802b526:	687b      	ldr	r3, [r7, #4]
 802b528:	6979      	ldr	r1, [r7, #20]
 802b52a:	4618      	mov	r0, r3
 802b52c:	f7ff fcdb 	bl	802aee6 <get_fat>
 802b530:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 802b532:	697b      	ldr	r3, [r7, #20]
 802b534:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b538:	d101      	bne.n	802b53e <dir_sdi+0x90>
 802b53a:	2301      	movs	r3, #1
 802b53c:	e03c      	b.n	802b5b8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 802b53e:	697b      	ldr	r3, [r7, #20]
 802b540:	2b01      	cmp	r3, #1
 802b542:	d904      	bls.n	802b54e <dir_sdi+0xa0>
 802b544:	693b      	ldr	r3, [r7, #16]
 802b546:	6a1b      	ldr	r3, [r3, #32]
 802b548:	697a      	ldr	r2, [r7, #20]
 802b54a:	429a      	cmp	r2, r3
 802b54c:	d301      	bcc.n	802b552 <dir_sdi+0xa4>
 802b54e:	2302      	movs	r3, #2
 802b550:	e032      	b.n	802b5b8 <dir_sdi+0x10a>
			ofs -= csz;
 802b552:	683a      	ldr	r2, [r7, #0]
 802b554:	68fb      	ldr	r3, [r7, #12]
 802b556:	1ad3      	subs	r3, r2, r3
 802b558:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 802b55a:	683a      	ldr	r2, [r7, #0]
 802b55c:	68fb      	ldr	r3, [r7, #12]
 802b55e:	429a      	cmp	r2, r3
 802b560:	d2e1      	bcs.n	802b526 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 802b562:	6979      	ldr	r1, [r7, #20]
 802b564:	6938      	ldr	r0, [r7, #16]
 802b566:	f7ff fc9f 	bl	802aea8 <clust2sect>
 802b56a:	4602      	mov	r2, r0
 802b56c:	687b      	ldr	r3, [r7, #4]
 802b56e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 802b570:	687b      	ldr	r3, [r7, #4]
 802b572:	697a      	ldr	r2, [r7, #20]
 802b574:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 802b576:	687b      	ldr	r3, [r7, #4]
 802b578:	69db      	ldr	r3, [r3, #28]
 802b57a:	2b00      	cmp	r3, #0
 802b57c:	d101      	bne.n	802b582 <dir_sdi+0xd4>
 802b57e:	2302      	movs	r3, #2
 802b580:	e01a      	b.n	802b5b8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 802b582:	687b      	ldr	r3, [r7, #4]
 802b584:	69da      	ldr	r2, [r3, #28]
 802b586:	693b      	ldr	r3, [r7, #16]
 802b588:	899b      	ldrh	r3, [r3, #12]
 802b58a:	4619      	mov	r1, r3
 802b58c:	683b      	ldr	r3, [r7, #0]
 802b58e:	fbb3 f3f1 	udiv	r3, r3, r1
 802b592:	441a      	add	r2, r3
 802b594:	687b      	ldr	r3, [r7, #4]
 802b596:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 802b598:	693b      	ldr	r3, [r7, #16]
 802b59a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802b59e:	693b      	ldr	r3, [r7, #16]
 802b5a0:	899b      	ldrh	r3, [r3, #12]
 802b5a2:	461a      	mov	r2, r3
 802b5a4:	683b      	ldr	r3, [r7, #0]
 802b5a6:	fbb3 f0f2 	udiv	r0, r3, r2
 802b5aa:	fb02 f200 	mul.w	r2, r2, r0
 802b5ae:	1a9b      	subs	r3, r3, r2
 802b5b0:	18ca      	adds	r2, r1, r3
 802b5b2:	687b      	ldr	r3, [r7, #4]
 802b5b4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 802b5b6:	2300      	movs	r3, #0
}
 802b5b8:	4618      	mov	r0, r3
 802b5ba:	3718      	adds	r7, #24
 802b5bc:	46bd      	mov	sp, r7
 802b5be:	bd80      	pop	{r7, pc}

0802b5c0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 802b5c0:	b580      	push	{r7, lr}
 802b5c2:	b086      	sub	sp, #24
 802b5c4:	af00      	add	r7, sp, #0
 802b5c6:	6078      	str	r0, [r7, #4]
 802b5c8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 802b5ca:	687b      	ldr	r3, [r7, #4]
 802b5cc:	681b      	ldr	r3, [r3, #0]
 802b5ce:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 802b5d0:	687b      	ldr	r3, [r7, #4]
 802b5d2:	695b      	ldr	r3, [r3, #20]
 802b5d4:	3320      	adds	r3, #32
 802b5d6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 802b5d8:	687b      	ldr	r3, [r7, #4]
 802b5da:	69db      	ldr	r3, [r3, #28]
 802b5dc:	2b00      	cmp	r3, #0
 802b5de:	d003      	beq.n	802b5e8 <dir_next+0x28>
 802b5e0:	68bb      	ldr	r3, [r7, #8]
 802b5e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802b5e6:	d301      	bcc.n	802b5ec <dir_next+0x2c>
 802b5e8:	2304      	movs	r3, #4
 802b5ea:	e0bb      	b.n	802b764 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 802b5ec:	68fb      	ldr	r3, [r7, #12]
 802b5ee:	899b      	ldrh	r3, [r3, #12]
 802b5f0:	461a      	mov	r2, r3
 802b5f2:	68bb      	ldr	r3, [r7, #8]
 802b5f4:	fbb3 f1f2 	udiv	r1, r3, r2
 802b5f8:	fb02 f201 	mul.w	r2, r2, r1
 802b5fc:	1a9b      	subs	r3, r3, r2
 802b5fe:	2b00      	cmp	r3, #0
 802b600:	f040 809d 	bne.w	802b73e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 802b604:	687b      	ldr	r3, [r7, #4]
 802b606:	69db      	ldr	r3, [r3, #28]
 802b608:	1c5a      	adds	r2, r3, #1
 802b60a:	687b      	ldr	r3, [r7, #4]
 802b60c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 802b60e:	687b      	ldr	r3, [r7, #4]
 802b610:	699b      	ldr	r3, [r3, #24]
 802b612:	2b00      	cmp	r3, #0
 802b614:	d10b      	bne.n	802b62e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 802b616:	68bb      	ldr	r3, [r7, #8]
 802b618:	095b      	lsrs	r3, r3, #5
 802b61a:	68fa      	ldr	r2, [r7, #12]
 802b61c:	8912      	ldrh	r2, [r2, #8]
 802b61e:	4293      	cmp	r3, r2
 802b620:	f0c0 808d 	bcc.w	802b73e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 802b624:	687b      	ldr	r3, [r7, #4]
 802b626:	2200      	movs	r2, #0
 802b628:	61da      	str	r2, [r3, #28]
 802b62a:	2304      	movs	r3, #4
 802b62c:	e09a      	b.n	802b764 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 802b62e:	68fb      	ldr	r3, [r7, #12]
 802b630:	899b      	ldrh	r3, [r3, #12]
 802b632:	461a      	mov	r2, r3
 802b634:	68bb      	ldr	r3, [r7, #8]
 802b636:	fbb3 f3f2 	udiv	r3, r3, r2
 802b63a:	68fa      	ldr	r2, [r7, #12]
 802b63c:	8952      	ldrh	r2, [r2, #10]
 802b63e:	3a01      	subs	r2, #1
 802b640:	4013      	ands	r3, r2
 802b642:	2b00      	cmp	r3, #0
 802b644:	d17b      	bne.n	802b73e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 802b646:	687a      	ldr	r2, [r7, #4]
 802b648:	687b      	ldr	r3, [r7, #4]
 802b64a:	699b      	ldr	r3, [r3, #24]
 802b64c:	4619      	mov	r1, r3
 802b64e:	4610      	mov	r0, r2
 802b650:	f7ff fc49 	bl	802aee6 <get_fat>
 802b654:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 802b656:	697b      	ldr	r3, [r7, #20]
 802b658:	2b01      	cmp	r3, #1
 802b65a:	d801      	bhi.n	802b660 <dir_next+0xa0>
 802b65c:	2302      	movs	r3, #2
 802b65e:	e081      	b.n	802b764 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 802b660:	697b      	ldr	r3, [r7, #20]
 802b662:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b666:	d101      	bne.n	802b66c <dir_next+0xac>
 802b668:	2301      	movs	r3, #1
 802b66a:	e07b      	b.n	802b764 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 802b66c:	68fb      	ldr	r3, [r7, #12]
 802b66e:	6a1b      	ldr	r3, [r3, #32]
 802b670:	697a      	ldr	r2, [r7, #20]
 802b672:	429a      	cmp	r2, r3
 802b674:	d359      	bcc.n	802b72a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 802b676:	683b      	ldr	r3, [r7, #0]
 802b678:	2b00      	cmp	r3, #0
 802b67a:	d104      	bne.n	802b686 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 802b67c:	687b      	ldr	r3, [r7, #4]
 802b67e:	2200      	movs	r2, #0
 802b680:	61da      	str	r2, [r3, #28]
 802b682:	2304      	movs	r3, #4
 802b684:	e06e      	b.n	802b764 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 802b686:	687a      	ldr	r2, [r7, #4]
 802b688:	687b      	ldr	r3, [r7, #4]
 802b68a:	699b      	ldr	r3, [r3, #24]
 802b68c:	4619      	mov	r1, r3
 802b68e:	4610      	mov	r0, r2
 802b690:	f7ff fe75 	bl	802b37e <create_chain>
 802b694:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 802b696:	697b      	ldr	r3, [r7, #20]
 802b698:	2b00      	cmp	r3, #0
 802b69a:	d101      	bne.n	802b6a0 <dir_next+0xe0>
 802b69c:	2307      	movs	r3, #7
 802b69e:	e061      	b.n	802b764 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 802b6a0:	697b      	ldr	r3, [r7, #20]
 802b6a2:	2b01      	cmp	r3, #1
 802b6a4:	d101      	bne.n	802b6aa <dir_next+0xea>
 802b6a6:	2302      	movs	r3, #2
 802b6a8:	e05c      	b.n	802b764 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 802b6aa:	697b      	ldr	r3, [r7, #20]
 802b6ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b6b0:	d101      	bne.n	802b6b6 <dir_next+0xf6>
 802b6b2:	2301      	movs	r3, #1
 802b6b4:	e056      	b.n	802b764 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 802b6b6:	68f8      	ldr	r0, [r7, #12]
 802b6b8:	f7ff fb14 	bl	802ace4 <sync_window>
 802b6bc:	4603      	mov	r3, r0
 802b6be:	2b00      	cmp	r3, #0
 802b6c0:	d001      	beq.n	802b6c6 <dir_next+0x106>
 802b6c2:	2301      	movs	r3, #1
 802b6c4:	e04e      	b.n	802b764 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 802b6c6:	68fb      	ldr	r3, [r7, #12]
 802b6c8:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 802b6cc:	68fb      	ldr	r3, [r7, #12]
 802b6ce:	899b      	ldrh	r3, [r3, #12]
 802b6d0:	461a      	mov	r2, r3
 802b6d2:	2100      	movs	r1, #0
 802b6d4:	f7ff fa85 	bl	802abe2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 802b6d8:	2300      	movs	r3, #0
 802b6da:	613b      	str	r3, [r7, #16]
 802b6dc:	6979      	ldr	r1, [r7, #20]
 802b6de:	68f8      	ldr	r0, [r7, #12]
 802b6e0:	f7ff fbe2 	bl	802aea8 <clust2sect>
 802b6e4:	4602      	mov	r2, r0
 802b6e6:	68fb      	ldr	r3, [r7, #12]
 802b6e8:	639a      	str	r2, [r3, #56]	; 0x38
 802b6ea:	e012      	b.n	802b712 <dir_next+0x152>
						fs->wflag = 1;
 802b6ec:	68fb      	ldr	r3, [r7, #12]
 802b6ee:	2201      	movs	r2, #1
 802b6f0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 802b6f2:	68f8      	ldr	r0, [r7, #12]
 802b6f4:	f7ff faf6 	bl	802ace4 <sync_window>
 802b6f8:	4603      	mov	r3, r0
 802b6fa:	2b00      	cmp	r3, #0
 802b6fc:	d001      	beq.n	802b702 <dir_next+0x142>
 802b6fe:	2301      	movs	r3, #1
 802b700:	e030      	b.n	802b764 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 802b702:	693b      	ldr	r3, [r7, #16]
 802b704:	3301      	adds	r3, #1
 802b706:	613b      	str	r3, [r7, #16]
 802b708:	68fb      	ldr	r3, [r7, #12]
 802b70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b70c:	1c5a      	adds	r2, r3, #1
 802b70e:	68fb      	ldr	r3, [r7, #12]
 802b710:	639a      	str	r2, [r3, #56]	; 0x38
 802b712:	68fb      	ldr	r3, [r7, #12]
 802b714:	895b      	ldrh	r3, [r3, #10]
 802b716:	461a      	mov	r2, r3
 802b718:	693b      	ldr	r3, [r7, #16]
 802b71a:	4293      	cmp	r3, r2
 802b71c:	d3e6      	bcc.n	802b6ec <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 802b71e:	68fb      	ldr	r3, [r7, #12]
 802b720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802b722:	693b      	ldr	r3, [r7, #16]
 802b724:	1ad2      	subs	r2, r2, r3
 802b726:	68fb      	ldr	r3, [r7, #12]
 802b728:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 802b72a:	687b      	ldr	r3, [r7, #4]
 802b72c:	697a      	ldr	r2, [r7, #20]
 802b72e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 802b730:	6979      	ldr	r1, [r7, #20]
 802b732:	68f8      	ldr	r0, [r7, #12]
 802b734:	f7ff fbb8 	bl	802aea8 <clust2sect>
 802b738:	4602      	mov	r2, r0
 802b73a:	687b      	ldr	r3, [r7, #4]
 802b73c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 802b73e:	687b      	ldr	r3, [r7, #4]
 802b740:	68ba      	ldr	r2, [r7, #8]
 802b742:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 802b744:	68fb      	ldr	r3, [r7, #12]
 802b746:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802b74a:	68fb      	ldr	r3, [r7, #12]
 802b74c:	899b      	ldrh	r3, [r3, #12]
 802b74e:	461a      	mov	r2, r3
 802b750:	68bb      	ldr	r3, [r7, #8]
 802b752:	fbb3 f0f2 	udiv	r0, r3, r2
 802b756:	fb02 f200 	mul.w	r2, r2, r0
 802b75a:	1a9b      	subs	r3, r3, r2
 802b75c:	18ca      	adds	r2, r1, r3
 802b75e:	687b      	ldr	r3, [r7, #4]
 802b760:	621a      	str	r2, [r3, #32]

	return FR_OK;
 802b762:	2300      	movs	r3, #0
}
 802b764:	4618      	mov	r0, r3
 802b766:	3718      	adds	r7, #24
 802b768:	46bd      	mov	sp, r7
 802b76a:	bd80      	pop	{r7, pc}

0802b76c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 802b76c:	b580      	push	{r7, lr}
 802b76e:	b086      	sub	sp, #24
 802b770:	af00      	add	r7, sp, #0
 802b772:	6078      	str	r0, [r7, #4]
 802b774:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 802b776:	687b      	ldr	r3, [r7, #4]
 802b778:	681b      	ldr	r3, [r3, #0]
 802b77a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 802b77c:	2100      	movs	r1, #0
 802b77e:	6878      	ldr	r0, [r7, #4]
 802b780:	f7ff fe95 	bl	802b4ae <dir_sdi>
 802b784:	4603      	mov	r3, r0
 802b786:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 802b788:	7dfb      	ldrb	r3, [r7, #23]
 802b78a:	2b00      	cmp	r3, #0
 802b78c:	d12b      	bne.n	802b7e6 <dir_alloc+0x7a>
		n = 0;
 802b78e:	2300      	movs	r3, #0
 802b790:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 802b792:	687b      	ldr	r3, [r7, #4]
 802b794:	69db      	ldr	r3, [r3, #28]
 802b796:	4619      	mov	r1, r3
 802b798:	68f8      	ldr	r0, [r7, #12]
 802b79a:	f7ff fae7 	bl	802ad6c <move_window>
 802b79e:	4603      	mov	r3, r0
 802b7a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 802b7a2:	7dfb      	ldrb	r3, [r7, #23]
 802b7a4:	2b00      	cmp	r3, #0
 802b7a6:	d11d      	bne.n	802b7e4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 802b7a8:	687b      	ldr	r3, [r7, #4]
 802b7aa:	6a1b      	ldr	r3, [r3, #32]
 802b7ac:	781b      	ldrb	r3, [r3, #0]
 802b7ae:	2be5      	cmp	r3, #229	; 0xe5
 802b7b0:	d004      	beq.n	802b7bc <dir_alloc+0x50>
 802b7b2:	687b      	ldr	r3, [r7, #4]
 802b7b4:	6a1b      	ldr	r3, [r3, #32]
 802b7b6:	781b      	ldrb	r3, [r3, #0]
 802b7b8:	2b00      	cmp	r3, #0
 802b7ba:	d107      	bne.n	802b7cc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 802b7bc:	693b      	ldr	r3, [r7, #16]
 802b7be:	3301      	adds	r3, #1
 802b7c0:	613b      	str	r3, [r7, #16]
 802b7c2:	693a      	ldr	r2, [r7, #16]
 802b7c4:	683b      	ldr	r3, [r7, #0]
 802b7c6:	429a      	cmp	r2, r3
 802b7c8:	d102      	bne.n	802b7d0 <dir_alloc+0x64>
 802b7ca:	e00c      	b.n	802b7e6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 802b7cc:	2300      	movs	r3, #0
 802b7ce:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 802b7d0:	2101      	movs	r1, #1
 802b7d2:	6878      	ldr	r0, [r7, #4]
 802b7d4:	f7ff fef4 	bl	802b5c0 <dir_next>
 802b7d8:	4603      	mov	r3, r0
 802b7da:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 802b7dc:	7dfb      	ldrb	r3, [r7, #23]
 802b7de:	2b00      	cmp	r3, #0
 802b7e0:	d0d7      	beq.n	802b792 <dir_alloc+0x26>
 802b7e2:	e000      	b.n	802b7e6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 802b7e4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 802b7e6:	7dfb      	ldrb	r3, [r7, #23]
 802b7e8:	2b04      	cmp	r3, #4
 802b7ea:	d101      	bne.n	802b7f0 <dir_alloc+0x84>
 802b7ec:	2307      	movs	r3, #7
 802b7ee:	75fb      	strb	r3, [r7, #23]
	return res;
 802b7f0:	7dfb      	ldrb	r3, [r7, #23]
}
 802b7f2:	4618      	mov	r0, r3
 802b7f4:	3718      	adds	r7, #24
 802b7f6:	46bd      	mov	sp, r7
 802b7f8:	bd80      	pop	{r7, pc}

0802b7fa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 802b7fa:	b580      	push	{r7, lr}
 802b7fc:	b084      	sub	sp, #16
 802b7fe:	af00      	add	r7, sp, #0
 802b800:	6078      	str	r0, [r7, #4]
 802b802:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 802b804:	683b      	ldr	r3, [r7, #0]
 802b806:	331a      	adds	r3, #26
 802b808:	4618      	mov	r0, r3
 802b80a:	f7ff f947 	bl	802aa9c <ld_word>
 802b80e:	4603      	mov	r3, r0
 802b810:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 802b812:	687b      	ldr	r3, [r7, #4]
 802b814:	781b      	ldrb	r3, [r3, #0]
 802b816:	2b03      	cmp	r3, #3
 802b818:	d109      	bne.n	802b82e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 802b81a:	683b      	ldr	r3, [r7, #0]
 802b81c:	3314      	adds	r3, #20
 802b81e:	4618      	mov	r0, r3
 802b820:	f7ff f93c 	bl	802aa9c <ld_word>
 802b824:	4603      	mov	r3, r0
 802b826:	041b      	lsls	r3, r3, #16
 802b828:	68fa      	ldr	r2, [r7, #12]
 802b82a:	4313      	orrs	r3, r2
 802b82c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 802b82e:	68fb      	ldr	r3, [r7, #12]
}
 802b830:	4618      	mov	r0, r3
 802b832:	3710      	adds	r7, #16
 802b834:	46bd      	mov	sp, r7
 802b836:	bd80      	pop	{r7, pc}

0802b838 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 802b838:	b580      	push	{r7, lr}
 802b83a:	b084      	sub	sp, #16
 802b83c:	af00      	add	r7, sp, #0
 802b83e:	60f8      	str	r0, [r7, #12]
 802b840:	60b9      	str	r1, [r7, #8]
 802b842:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 802b844:	68bb      	ldr	r3, [r7, #8]
 802b846:	331a      	adds	r3, #26
 802b848:	687a      	ldr	r2, [r7, #4]
 802b84a:	b292      	uxth	r2, r2
 802b84c:	4611      	mov	r1, r2
 802b84e:	4618      	mov	r0, r3
 802b850:	f7ff f95f 	bl	802ab12 <st_word>
	if (fs->fs_type == FS_FAT32) {
 802b854:	68fb      	ldr	r3, [r7, #12]
 802b856:	781b      	ldrb	r3, [r3, #0]
 802b858:	2b03      	cmp	r3, #3
 802b85a:	d109      	bne.n	802b870 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 802b85c:	68bb      	ldr	r3, [r7, #8]
 802b85e:	f103 0214 	add.w	r2, r3, #20
 802b862:	687b      	ldr	r3, [r7, #4]
 802b864:	0c1b      	lsrs	r3, r3, #16
 802b866:	b29b      	uxth	r3, r3
 802b868:	4619      	mov	r1, r3
 802b86a:	4610      	mov	r0, r2
 802b86c:	f7ff f951 	bl	802ab12 <st_word>
	}
}
 802b870:	bf00      	nop
 802b872:	3710      	adds	r7, #16
 802b874:	46bd      	mov	sp, r7
 802b876:	bd80      	pop	{r7, pc}

0802b878 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 802b878:	b590      	push	{r4, r7, lr}
 802b87a:	b087      	sub	sp, #28
 802b87c:	af00      	add	r7, sp, #0
 802b87e:	6078      	str	r0, [r7, #4]
 802b880:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 802b882:	683b      	ldr	r3, [r7, #0]
 802b884:	331a      	adds	r3, #26
 802b886:	4618      	mov	r0, r3
 802b888:	f7ff f908 	bl	802aa9c <ld_word>
 802b88c:	4603      	mov	r3, r0
 802b88e:	2b00      	cmp	r3, #0
 802b890:	d001      	beq.n	802b896 <cmp_lfn+0x1e>
 802b892:	2300      	movs	r3, #0
 802b894:	e059      	b.n	802b94a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 802b896:	683b      	ldr	r3, [r7, #0]
 802b898:	781b      	ldrb	r3, [r3, #0]
 802b89a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802b89e:	1e5a      	subs	r2, r3, #1
 802b8a0:	4613      	mov	r3, r2
 802b8a2:	005b      	lsls	r3, r3, #1
 802b8a4:	4413      	add	r3, r2
 802b8a6:	009b      	lsls	r3, r3, #2
 802b8a8:	4413      	add	r3, r2
 802b8aa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 802b8ac:	2301      	movs	r3, #1
 802b8ae:	81fb      	strh	r3, [r7, #14]
 802b8b0:	2300      	movs	r3, #0
 802b8b2:	613b      	str	r3, [r7, #16]
 802b8b4:	e033      	b.n	802b91e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 802b8b6:	4a27      	ldr	r2, [pc, #156]	; (802b954 <cmp_lfn+0xdc>)
 802b8b8:	693b      	ldr	r3, [r7, #16]
 802b8ba:	4413      	add	r3, r2
 802b8bc:	781b      	ldrb	r3, [r3, #0]
 802b8be:	461a      	mov	r2, r3
 802b8c0:	683b      	ldr	r3, [r7, #0]
 802b8c2:	4413      	add	r3, r2
 802b8c4:	4618      	mov	r0, r3
 802b8c6:	f7ff f8e9 	bl	802aa9c <ld_word>
 802b8ca:	4603      	mov	r3, r0
 802b8cc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 802b8ce:	89fb      	ldrh	r3, [r7, #14]
 802b8d0:	2b00      	cmp	r3, #0
 802b8d2:	d01a      	beq.n	802b90a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 802b8d4:	697b      	ldr	r3, [r7, #20]
 802b8d6:	2bfe      	cmp	r3, #254	; 0xfe
 802b8d8:	d812      	bhi.n	802b900 <cmp_lfn+0x88>
 802b8da:	89bb      	ldrh	r3, [r7, #12]
 802b8dc:	4618      	mov	r0, r3
 802b8de:	f001 fe79 	bl	802d5d4 <ff_wtoupper>
 802b8e2:	4603      	mov	r3, r0
 802b8e4:	461c      	mov	r4, r3
 802b8e6:	697b      	ldr	r3, [r7, #20]
 802b8e8:	1c5a      	adds	r2, r3, #1
 802b8ea:	617a      	str	r2, [r7, #20]
 802b8ec:	005b      	lsls	r3, r3, #1
 802b8ee:	687a      	ldr	r2, [r7, #4]
 802b8f0:	4413      	add	r3, r2
 802b8f2:	881b      	ldrh	r3, [r3, #0]
 802b8f4:	4618      	mov	r0, r3
 802b8f6:	f001 fe6d 	bl	802d5d4 <ff_wtoupper>
 802b8fa:	4603      	mov	r3, r0
 802b8fc:	429c      	cmp	r4, r3
 802b8fe:	d001      	beq.n	802b904 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 802b900:	2300      	movs	r3, #0
 802b902:	e022      	b.n	802b94a <cmp_lfn+0xd2>
			}
			wc = uc;
 802b904:	89bb      	ldrh	r3, [r7, #12]
 802b906:	81fb      	strh	r3, [r7, #14]
 802b908:	e006      	b.n	802b918 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 802b90a:	89bb      	ldrh	r3, [r7, #12]
 802b90c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802b910:	4293      	cmp	r3, r2
 802b912:	d001      	beq.n	802b918 <cmp_lfn+0xa0>
 802b914:	2300      	movs	r3, #0
 802b916:	e018      	b.n	802b94a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 802b918:	693b      	ldr	r3, [r7, #16]
 802b91a:	3301      	adds	r3, #1
 802b91c:	613b      	str	r3, [r7, #16]
 802b91e:	693b      	ldr	r3, [r7, #16]
 802b920:	2b0c      	cmp	r3, #12
 802b922:	d9c8      	bls.n	802b8b6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 802b924:	683b      	ldr	r3, [r7, #0]
 802b926:	781b      	ldrb	r3, [r3, #0]
 802b928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b92c:	2b00      	cmp	r3, #0
 802b92e:	d00b      	beq.n	802b948 <cmp_lfn+0xd0>
 802b930:	89fb      	ldrh	r3, [r7, #14]
 802b932:	2b00      	cmp	r3, #0
 802b934:	d008      	beq.n	802b948 <cmp_lfn+0xd0>
 802b936:	697b      	ldr	r3, [r7, #20]
 802b938:	005b      	lsls	r3, r3, #1
 802b93a:	687a      	ldr	r2, [r7, #4]
 802b93c:	4413      	add	r3, r2
 802b93e:	881b      	ldrh	r3, [r3, #0]
 802b940:	2b00      	cmp	r3, #0
 802b942:	d001      	beq.n	802b948 <cmp_lfn+0xd0>
 802b944:	2300      	movs	r3, #0
 802b946:	e000      	b.n	802b94a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 802b948:	2301      	movs	r3, #1
}
 802b94a:	4618      	mov	r0, r3
 802b94c:	371c      	adds	r7, #28
 802b94e:	46bd      	mov	sp, r7
 802b950:	bd90      	pop	{r4, r7, pc}
 802b952:	bf00      	nop
 802b954:	08031054 	.word	0x08031054

0802b958 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 802b958:	b580      	push	{r7, lr}
 802b95a:	b086      	sub	sp, #24
 802b95c:	af00      	add	r7, sp, #0
 802b95e:	6078      	str	r0, [r7, #4]
 802b960:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 802b962:	683b      	ldr	r3, [r7, #0]
 802b964:	331a      	adds	r3, #26
 802b966:	4618      	mov	r0, r3
 802b968:	f7ff f898 	bl	802aa9c <ld_word>
 802b96c:	4603      	mov	r3, r0
 802b96e:	2b00      	cmp	r3, #0
 802b970:	d001      	beq.n	802b976 <pick_lfn+0x1e>
 802b972:	2300      	movs	r3, #0
 802b974:	e04d      	b.n	802ba12 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 802b976:	683b      	ldr	r3, [r7, #0]
 802b978:	781b      	ldrb	r3, [r3, #0]
 802b97a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802b97e:	1e5a      	subs	r2, r3, #1
 802b980:	4613      	mov	r3, r2
 802b982:	005b      	lsls	r3, r3, #1
 802b984:	4413      	add	r3, r2
 802b986:	009b      	lsls	r3, r3, #2
 802b988:	4413      	add	r3, r2
 802b98a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 802b98c:	2301      	movs	r3, #1
 802b98e:	81fb      	strh	r3, [r7, #14]
 802b990:	2300      	movs	r3, #0
 802b992:	613b      	str	r3, [r7, #16]
 802b994:	e028      	b.n	802b9e8 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 802b996:	4a21      	ldr	r2, [pc, #132]	; (802ba1c <pick_lfn+0xc4>)
 802b998:	693b      	ldr	r3, [r7, #16]
 802b99a:	4413      	add	r3, r2
 802b99c:	781b      	ldrb	r3, [r3, #0]
 802b99e:	461a      	mov	r2, r3
 802b9a0:	683b      	ldr	r3, [r7, #0]
 802b9a2:	4413      	add	r3, r2
 802b9a4:	4618      	mov	r0, r3
 802b9a6:	f7ff f879 	bl	802aa9c <ld_word>
 802b9aa:	4603      	mov	r3, r0
 802b9ac:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 802b9ae:	89fb      	ldrh	r3, [r7, #14]
 802b9b0:	2b00      	cmp	r3, #0
 802b9b2:	d00f      	beq.n	802b9d4 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 802b9b4:	697b      	ldr	r3, [r7, #20]
 802b9b6:	2bfe      	cmp	r3, #254	; 0xfe
 802b9b8:	d901      	bls.n	802b9be <pick_lfn+0x66>
 802b9ba:	2300      	movs	r3, #0
 802b9bc:	e029      	b.n	802ba12 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 802b9be:	89bb      	ldrh	r3, [r7, #12]
 802b9c0:	81fb      	strh	r3, [r7, #14]
 802b9c2:	697b      	ldr	r3, [r7, #20]
 802b9c4:	1c5a      	adds	r2, r3, #1
 802b9c6:	617a      	str	r2, [r7, #20]
 802b9c8:	005b      	lsls	r3, r3, #1
 802b9ca:	687a      	ldr	r2, [r7, #4]
 802b9cc:	4413      	add	r3, r2
 802b9ce:	89fa      	ldrh	r2, [r7, #14]
 802b9d0:	801a      	strh	r2, [r3, #0]
 802b9d2:	e006      	b.n	802b9e2 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 802b9d4:	89bb      	ldrh	r3, [r7, #12]
 802b9d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802b9da:	4293      	cmp	r3, r2
 802b9dc:	d001      	beq.n	802b9e2 <pick_lfn+0x8a>
 802b9de:	2300      	movs	r3, #0
 802b9e0:	e017      	b.n	802ba12 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 802b9e2:	693b      	ldr	r3, [r7, #16]
 802b9e4:	3301      	adds	r3, #1
 802b9e6:	613b      	str	r3, [r7, #16]
 802b9e8:	693b      	ldr	r3, [r7, #16]
 802b9ea:	2b0c      	cmp	r3, #12
 802b9ec:	d9d3      	bls.n	802b996 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 802b9ee:	683b      	ldr	r3, [r7, #0]
 802b9f0:	781b      	ldrb	r3, [r3, #0]
 802b9f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b9f6:	2b00      	cmp	r3, #0
 802b9f8:	d00a      	beq.n	802ba10 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 802b9fa:	697b      	ldr	r3, [r7, #20]
 802b9fc:	2bfe      	cmp	r3, #254	; 0xfe
 802b9fe:	d901      	bls.n	802ba04 <pick_lfn+0xac>
 802ba00:	2300      	movs	r3, #0
 802ba02:	e006      	b.n	802ba12 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 802ba04:	697b      	ldr	r3, [r7, #20]
 802ba06:	005b      	lsls	r3, r3, #1
 802ba08:	687a      	ldr	r2, [r7, #4]
 802ba0a:	4413      	add	r3, r2
 802ba0c:	2200      	movs	r2, #0
 802ba0e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 802ba10:	2301      	movs	r3, #1
}
 802ba12:	4618      	mov	r0, r3
 802ba14:	3718      	adds	r7, #24
 802ba16:	46bd      	mov	sp, r7
 802ba18:	bd80      	pop	{r7, pc}
 802ba1a:	bf00      	nop
 802ba1c:	08031054 	.word	0x08031054

0802ba20 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 802ba20:	b580      	push	{r7, lr}
 802ba22:	b088      	sub	sp, #32
 802ba24:	af00      	add	r7, sp, #0
 802ba26:	60f8      	str	r0, [r7, #12]
 802ba28:	60b9      	str	r1, [r7, #8]
 802ba2a:	4611      	mov	r1, r2
 802ba2c:	461a      	mov	r2, r3
 802ba2e:	460b      	mov	r3, r1
 802ba30:	71fb      	strb	r3, [r7, #7]
 802ba32:	4613      	mov	r3, r2
 802ba34:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 802ba36:	68bb      	ldr	r3, [r7, #8]
 802ba38:	330d      	adds	r3, #13
 802ba3a:	79ba      	ldrb	r2, [r7, #6]
 802ba3c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 802ba3e:	68bb      	ldr	r3, [r7, #8]
 802ba40:	330b      	adds	r3, #11
 802ba42:	220f      	movs	r2, #15
 802ba44:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 802ba46:	68bb      	ldr	r3, [r7, #8]
 802ba48:	330c      	adds	r3, #12
 802ba4a:	2200      	movs	r2, #0
 802ba4c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 802ba4e:	68bb      	ldr	r3, [r7, #8]
 802ba50:	331a      	adds	r3, #26
 802ba52:	2100      	movs	r1, #0
 802ba54:	4618      	mov	r0, r3
 802ba56:	f7ff f85c 	bl	802ab12 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 802ba5a:	79fb      	ldrb	r3, [r7, #7]
 802ba5c:	1e5a      	subs	r2, r3, #1
 802ba5e:	4613      	mov	r3, r2
 802ba60:	005b      	lsls	r3, r3, #1
 802ba62:	4413      	add	r3, r2
 802ba64:	009b      	lsls	r3, r3, #2
 802ba66:	4413      	add	r3, r2
 802ba68:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 802ba6a:	2300      	movs	r3, #0
 802ba6c:	82fb      	strh	r3, [r7, #22]
 802ba6e:	2300      	movs	r3, #0
 802ba70:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 802ba72:	8afb      	ldrh	r3, [r7, #22]
 802ba74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802ba78:	4293      	cmp	r3, r2
 802ba7a:	d007      	beq.n	802ba8c <put_lfn+0x6c>
 802ba7c:	69fb      	ldr	r3, [r7, #28]
 802ba7e:	1c5a      	adds	r2, r3, #1
 802ba80:	61fa      	str	r2, [r7, #28]
 802ba82:	005b      	lsls	r3, r3, #1
 802ba84:	68fa      	ldr	r2, [r7, #12]
 802ba86:	4413      	add	r3, r2
 802ba88:	881b      	ldrh	r3, [r3, #0]
 802ba8a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 802ba8c:	4a17      	ldr	r2, [pc, #92]	; (802baec <put_lfn+0xcc>)
 802ba8e:	69bb      	ldr	r3, [r7, #24]
 802ba90:	4413      	add	r3, r2
 802ba92:	781b      	ldrb	r3, [r3, #0]
 802ba94:	461a      	mov	r2, r3
 802ba96:	68bb      	ldr	r3, [r7, #8]
 802ba98:	4413      	add	r3, r2
 802ba9a:	8afa      	ldrh	r2, [r7, #22]
 802ba9c:	4611      	mov	r1, r2
 802ba9e:	4618      	mov	r0, r3
 802baa0:	f7ff f837 	bl	802ab12 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 802baa4:	8afb      	ldrh	r3, [r7, #22]
 802baa6:	2b00      	cmp	r3, #0
 802baa8:	d102      	bne.n	802bab0 <put_lfn+0x90>
 802baaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802baae:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 802bab0:	69bb      	ldr	r3, [r7, #24]
 802bab2:	3301      	adds	r3, #1
 802bab4:	61bb      	str	r3, [r7, #24]
 802bab6:	69bb      	ldr	r3, [r7, #24]
 802bab8:	2b0c      	cmp	r3, #12
 802baba:	d9da      	bls.n	802ba72 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 802babc:	8afb      	ldrh	r3, [r7, #22]
 802babe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802bac2:	4293      	cmp	r3, r2
 802bac4:	d006      	beq.n	802bad4 <put_lfn+0xb4>
 802bac6:	69fb      	ldr	r3, [r7, #28]
 802bac8:	005b      	lsls	r3, r3, #1
 802baca:	68fa      	ldr	r2, [r7, #12]
 802bacc:	4413      	add	r3, r2
 802bace:	881b      	ldrh	r3, [r3, #0]
 802bad0:	2b00      	cmp	r3, #0
 802bad2:	d103      	bne.n	802badc <put_lfn+0xbc>
 802bad4:	79fb      	ldrb	r3, [r7, #7]
 802bad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802bada:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 802badc:	68bb      	ldr	r3, [r7, #8]
 802bade:	79fa      	ldrb	r2, [r7, #7]
 802bae0:	701a      	strb	r2, [r3, #0]
}
 802bae2:	bf00      	nop
 802bae4:	3720      	adds	r7, #32
 802bae6:	46bd      	mov	sp, r7
 802bae8:	bd80      	pop	{r7, pc}
 802baea:	bf00      	nop
 802baec:	08031054 	.word	0x08031054

0802baf0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 802baf0:	b580      	push	{r7, lr}
 802baf2:	b08c      	sub	sp, #48	; 0x30
 802baf4:	af00      	add	r7, sp, #0
 802baf6:	60f8      	str	r0, [r7, #12]
 802baf8:	60b9      	str	r1, [r7, #8]
 802bafa:	607a      	str	r2, [r7, #4]
 802bafc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 802bafe:	220b      	movs	r2, #11
 802bb00:	68b9      	ldr	r1, [r7, #8]
 802bb02:	68f8      	ldr	r0, [r7, #12]
 802bb04:	f7ff f84c 	bl	802aba0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 802bb08:	683b      	ldr	r3, [r7, #0]
 802bb0a:	2b05      	cmp	r3, #5
 802bb0c:	d929      	bls.n	802bb62 <gen_numname+0x72>
		sr = seq;
 802bb0e:	683b      	ldr	r3, [r7, #0]
 802bb10:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 802bb12:	e020      	b.n	802bb56 <gen_numname+0x66>
			wc = *lfn++;
 802bb14:	687b      	ldr	r3, [r7, #4]
 802bb16:	1c9a      	adds	r2, r3, #2
 802bb18:	607a      	str	r2, [r7, #4]
 802bb1a:	881b      	ldrh	r3, [r3, #0]
 802bb1c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 802bb1e:	2300      	movs	r3, #0
 802bb20:	62bb      	str	r3, [r7, #40]	; 0x28
 802bb22:	e015      	b.n	802bb50 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 802bb24:	69fb      	ldr	r3, [r7, #28]
 802bb26:	005a      	lsls	r2, r3, #1
 802bb28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802bb2a:	f003 0301 	and.w	r3, r3, #1
 802bb2e:	4413      	add	r3, r2
 802bb30:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 802bb32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802bb34:	085b      	lsrs	r3, r3, #1
 802bb36:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 802bb38:	69fb      	ldr	r3, [r7, #28]
 802bb3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802bb3e:	2b00      	cmp	r3, #0
 802bb40:	d003      	beq.n	802bb4a <gen_numname+0x5a>
 802bb42:	69fa      	ldr	r2, [r7, #28]
 802bb44:	4b31      	ldr	r3, [pc, #196]	; (802bc0c <gen_numname+0x11c>)
 802bb46:	4053      	eors	r3, r2
 802bb48:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 802bb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bb4c:	3301      	adds	r3, #1
 802bb4e:	62bb      	str	r3, [r7, #40]	; 0x28
 802bb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bb52:	2b0f      	cmp	r3, #15
 802bb54:	d9e6      	bls.n	802bb24 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 802bb56:	687b      	ldr	r3, [r7, #4]
 802bb58:	881b      	ldrh	r3, [r3, #0]
 802bb5a:	2b00      	cmp	r3, #0
 802bb5c:	d1da      	bne.n	802bb14 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 802bb5e:	69fb      	ldr	r3, [r7, #28]
 802bb60:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 802bb62:	2307      	movs	r3, #7
 802bb64:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 802bb66:	683b      	ldr	r3, [r7, #0]
 802bb68:	b2db      	uxtb	r3, r3
 802bb6a:	f003 030f 	and.w	r3, r3, #15
 802bb6e:	b2db      	uxtb	r3, r3
 802bb70:	3330      	adds	r3, #48	; 0x30
 802bb72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 802bb76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802bb7a:	2b39      	cmp	r3, #57	; 0x39
 802bb7c:	d904      	bls.n	802bb88 <gen_numname+0x98>
 802bb7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802bb82:	3307      	adds	r3, #7
 802bb84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 802bb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bb8a:	1e5a      	subs	r2, r3, #1
 802bb8c:	62ba      	str	r2, [r7, #40]	; 0x28
 802bb8e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802bb92:	4413      	add	r3, r2
 802bb94:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 802bb98:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 802bb9c:	683b      	ldr	r3, [r7, #0]
 802bb9e:	091b      	lsrs	r3, r3, #4
 802bba0:	603b      	str	r3, [r7, #0]
	} while (seq);
 802bba2:	683b      	ldr	r3, [r7, #0]
 802bba4:	2b00      	cmp	r3, #0
 802bba6:	d1de      	bne.n	802bb66 <gen_numname+0x76>
	ns[i] = '~';
 802bba8:	f107 0214 	add.w	r2, r7, #20
 802bbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bbae:	4413      	add	r3, r2
 802bbb0:	227e      	movs	r2, #126	; 0x7e
 802bbb2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 802bbb4:	2300      	movs	r3, #0
 802bbb6:	627b      	str	r3, [r7, #36]	; 0x24
 802bbb8:	e002      	b.n	802bbc0 <gen_numname+0xd0>
 802bbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bbbc:	3301      	adds	r3, #1
 802bbbe:	627b      	str	r3, [r7, #36]	; 0x24
 802bbc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802bbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bbc4:	429a      	cmp	r2, r3
 802bbc6:	d205      	bcs.n	802bbd4 <gen_numname+0xe4>
 802bbc8:	68fa      	ldr	r2, [r7, #12]
 802bbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bbcc:	4413      	add	r3, r2
 802bbce:	781b      	ldrb	r3, [r3, #0]
 802bbd0:	2b20      	cmp	r3, #32
 802bbd2:	d1f2      	bne.n	802bbba <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 802bbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bbd6:	2b07      	cmp	r3, #7
 802bbd8:	d808      	bhi.n	802bbec <gen_numname+0xfc>
 802bbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bbdc:	1c5a      	adds	r2, r3, #1
 802bbde:	62ba      	str	r2, [r7, #40]	; 0x28
 802bbe0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802bbe4:	4413      	add	r3, r2
 802bbe6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 802bbea:	e000      	b.n	802bbee <gen_numname+0xfe>
 802bbec:	2120      	movs	r1, #32
 802bbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bbf0:	1c5a      	adds	r2, r3, #1
 802bbf2:	627a      	str	r2, [r7, #36]	; 0x24
 802bbf4:	68fa      	ldr	r2, [r7, #12]
 802bbf6:	4413      	add	r3, r2
 802bbf8:	460a      	mov	r2, r1
 802bbfa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 802bbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bbfe:	2b07      	cmp	r3, #7
 802bc00:	d9e8      	bls.n	802bbd4 <gen_numname+0xe4>
}
 802bc02:	bf00      	nop
 802bc04:	3730      	adds	r7, #48	; 0x30
 802bc06:	46bd      	mov	sp, r7
 802bc08:	bd80      	pop	{r7, pc}
 802bc0a:	bf00      	nop
 802bc0c:	00011021 	.word	0x00011021

0802bc10 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 802bc10:	b480      	push	{r7}
 802bc12:	b085      	sub	sp, #20
 802bc14:	af00      	add	r7, sp, #0
 802bc16:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 802bc18:	2300      	movs	r3, #0
 802bc1a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 802bc1c:	230b      	movs	r3, #11
 802bc1e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 802bc20:	7bfb      	ldrb	r3, [r7, #15]
 802bc22:	b2da      	uxtb	r2, r3
 802bc24:	0852      	lsrs	r2, r2, #1
 802bc26:	01db      	lsls	r3, r3, #7
 802bc28:	4313      	orrs	r3, r2
 802bc2a:	b2da      	uxtb	r2, r3
 802bc2c:	687b      	ldr	r3, [r7, #4]
 802bc2e:	1c59      	adds	r1, r3, #1
 802bc30:	6079      	str	r1, [r7, #4]
 802bc32:	781b      	ldrb	r3, [r3, #0]
 802bc34:	4413      	add	r3, r2
 802bc36:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 802bc38:	68bb      	ldr	r3, [r7, #8]
 802bc3a:	3b01      	subs	r3, #1
 802bc3c:	60bb      	str	r3, [r7, #8]
 802bc3e:	68bb      	ldr	r3, [r7, #8]
 802bc40:	2b00      	cmp	r3, #0
 802bc42:	d1ed      	bne.n	802bc20 <sum_sfn+0x10>
	return sum;
 802bc44:	7bfb      	ldrb	r3, [r7, #15]
}
 802bc46:	4618      	mov	r0, r3
 802bc48:	3714      	adds	r7, #20
 802bc4a:	46bd      	mov	sp, r7
 802bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bc50:	4770      	bx	lr

0802bc52 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 802bc52:	b580      	push	{r7, lr}
 802bc54:	b086      	sub	sp, #24
 802bc56:	af00      	add	r7, sp, #0
 802bc58:	6078      	str	r0, [r7, #4]
 802bc5a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 802bc5c:	2304      	movs	r3, #4
 802bc5e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 802bc60:	687b      	ldr	r3, [r7, #4]
 802bc62:	681b      	ldr	r3, [r3, #0]
 802bc64:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 802bc66:	23ff      	movs	r3, #255	; 0xff
 802bc68:	757b      	strb	r3, [r7, #21]
 802bc6a:	23ff      	movs	r3, #255	; 0xff
 802bc6c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 802bc6e:	e081      	b.n	802bd74 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 802bc70:	687b      	ldr	r3, [r7, #4]
 802bc72:	69db      	ldr	r3, [r3, #28]
 802bc74:	4619      	mov	r1, r3
 802bc76:	6938      	ldr	r0, [r7, #16]
 802bc78:	f7ff f878 	bl	802ad6c <move_window>
 802bc7c:	4603      	mov	r3, r0
 802bc7e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 802bc80:	7dfb      	ldrb	r3, [r7, #23]
 802bc82:	2b00      	cmp	r3, #0
 802bc84:	d17c      	bne.n	802bd80 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 802bc86:	687b      	ldr	r3, [r7, #4]
 802bc88:	6a1b      	ldr	r3, [r3, #32]
 802bc8a:	781b      	ldrb	r3, [r3, #0]
 802bc8c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 802bc8e:	7dbb      	ldrb	r3, [r7, #22]
 802bc90:	2b00      	cmp	r3, #0
 802bc92:	d102      	bne.n	802bc9a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 802bc94:	2304      	movs	r3, #4
 802bc96:	75fb      	strb	r3, [r7, #23]
 802bc98:	e077      	b.n	802bd8a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 802bc9a:	687b      	ldr	r3, [r7, #4]
 802bc9c:	6a1b      	ldr	r3, [r3, #32]
 802bc9e:	330b      	adds	r3, #11
 802bca0:	781b      	ldrb	r3, [r3, #0]
 802bca2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802bca6:	73fb      	strb	r3, [r7, #15]
 802bca8:	687b      	ldr	r3, [r7, #4]
 802bcaa:	7bfa      	ldrb	r2, [r7, #15]
 802bcac:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 802bcae:	7dbb      	ldrb	r3, [r7, #22]
 802bcb0:	2be5      	cmp	r3, #229	; 0xe5
 802bcb2:	d00e      	beq.n	802bcd2 <dir_read+0x80>
 802bcb4:	7dbb      	ldrb	r3, [r7, #22]
 802bcb6:	2b2e      	cmp	r3, #46	; 0x2e
 802bcb8:	d00b      	beq.n	802bcd2 <dir_read+0x80>
 802bcba:	7bfb      	ldrb	r3, [r7, #15]
 802bcbc:	f023 0320 	bic.w	r3, r3, #32
 802bcc0:	2b08      	cmp	r3, #8
 802bcc2:	bf0c      	ite	eq
 802bcc4:	2301      	moveq	r3, #1
 802bcc6:	2300      	movne	r3, #0
 802bcc8:	b2db      	uxtb	r3, r3
 802bcca:	461a      	mov	r2, r3
 802bccc:	683b      	ldr	r3, [r7, #0]
 802bcce:	4293      	cmp	r3, r2
 802bcd0:	d002      	beq.n	802bcd8 <dir_read+0x86>
				ord = 0xFF;
 802bcd2:	23ff      	movs	r3, #255	; 0xff
 802bcd4:	757b      	strb	r3, [r7, #21]
 802bcd6:	e044      	b.n	802bd62 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 802bcd8:	7bfb      	ldrb	r3, [r7, #15]
 802bcda:	2b0f      	cmp	r3, #15
 802bcdc:	d12f      	bne.n	802bd3e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 802bcde:	7dbb      	ldrb	r3, [r7, #22]
 802bce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802bce4:	2b00      	cmp	r3, #0
 802bce6:	d00d      	beq.n	802bd04 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 802bce8:	687b      	ldr	r3, [r7, #4]
 802bcea:	6a1b      	ldr	r3, [r3, #32]
 802bcec:	7b5b      	ldrb	r3, [r3, #13]
 802bcee:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 802bcf0:	7dbb      	ldrb	r3, [r7, #22]
 802bcf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802bcf6:	75bb      	strb	r3, [r7, #22]
 802bcf8:	7dbb      	ldrb	r3, [r7, #22]
 802bcfa:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 802bcfc:	687b      	ldr	r3, [r7, #4]
 802bcfe:	695a      	ldr	r2, [r3, #20]
 802bd00:	687b      	ldr	r3, [r7, #4]
 802bd02:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 802bd04:	7dba      	ldrb	r2, [r7, #22]
 802bd06:	7d7b      	ldrb	r3, [r7, #21]
 802bd08:	429a      	cmp	r2, r3
 802bd0a:	d115      	bne.n	802bd38 <dir_read+0xe6>
 802bd0c:	687b      	ldr	r3, [r7, #4]
 802bd0e:	6a1b      	ldr	r3, [r3, #32]
 802bd10:	330d      	adds	r3, #13
 802bd12:	781b      	ldrb	r3, [r3, #0]
 802bd14:	7d3a      	ldrb	r2, [r7, #20]
 802bd16:	429a      	cmp	r2, r3
 802bd18:	d10e      	bne.n	802bd38 <dir_read+0xe6>
 802bd1a:	693b      	ldr	r3, [r7, #16]
 802bd1c:	691a      	ldr	r2, [r3, #16]
 802bd1e:	687b      	ldr	r3, [r7, #4]
 802bd20:	6a1b      	ldr	r3, [r3, #32]
 802bd22:	4619      	mov	r1, r3
 802bd24:	4610      	mov	r0, r2
 802bd26:	f7ff fe17 	bl	802b958 <pick_lfn>
 802bd2a:	4603      	mov	r3, r0
 802bd2c:	2b00      	cmp	r3, #0
 802bd2e:	d003      	beq.n	802bd38 <dir_read+0xe6>
 802bd30:	7d7b      	ldrb	r3, [r7, #21]
 802bd32:	3b01      	subs	r3, #1
 802bd34:	b2db      	uxtb	r3, r3
 802bd36:	e000      	b.n	802bd3a <dir_read+0xe8>
 802bd38:	23ff      	movs	r3, #255	; 0xff
 802bd3a:	757b      	strb	r3, [r7, #21]
 802bd3c:	e011      	b.n	802bd62 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 802bd3e:	7d7b      	ldrb	r3, [r7, #21]
 802bd40:	2b00      	cmp	r3, #0
 802bd42:	d109      	bne.n	802bd58 <dir_read+0x106>
 802bd44:	687b      	ldr	r3, [r7, #4]
 802bd46:	6a1b      	ldr	r3, [r3, #32]
 802bd48:	4618      	mov	r0, r3
 802bd4a:	f7ff ff61 	bl	802bc10 <sum_sfn>
 802bd4e:	4603      	mov	r3, r0
 802bd50:	461a      	mov	r2, r3
 802bd52:	7d3b      	ldrb	r3, [r7, #20]
 802bd54:	4293      	cmp	r3, r2
 802bd56:	d015      	beq.n	802bd84 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 802bd58:	687b      	ldr	r3, [r7, #4]
 802bd5a:	f04f 32ff 	mov.w	r2, #4294967295
 802bd5e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 802bd60:	e010      	b.n	802bd84 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 802bd62:	2100      	movs	r1, #0
 802bd64:	6878      	ldr	r0, [r7, #4]
 802bd66:	f7ff fc2b 	bl	802b5c0 <dir_next>
 802bd6a:	4603      	mov	r3, r0
 802bd6c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 802bd6e:	7dfb      	ldrb	r3, [r7, #23]
 802bd70:	2b00      	cmp	r3, #0
 802bd72:	d109      	bne.n	802bd88 <dir_read+0x136>
	while (dp->sect) {
 802bd74:	687b      	ldr	r3, [r7, #4]
 802bd76:	69db      	ldr	r3, [r3, #28]
 802bd78:	2b00      	cmp	r3, #0
 802bd7a:	f47f af79 	bne.w	802bc70 <dir_read+0x1e>
 802bd7e:	e004      	b.n	802bd8a <dir_read+0x138>
		if (res != FR_OK) break;
 802bd80:	bf00      	nop
 802bd82:	e002      	b.n	802bd8a <dir_read+0x138>
					break;
 802bd84:	bf00      	nop
 802bd86:	e000      	b.n	802bd8a <dir_read+0x138>
		if (res != FR_OK) break;
 802bd88:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 802bd8a:	7dfb      	ldrb	r3, [r7, #23]
 802bd8c:	2b00      	cmp	r3, #0
 802bd8e:	d002      	beq.n	802bd96 <dir_read+0x144>
 802bd90:	687b      	ldr	r3, [r7, #4]
 802bd92:	2200      	movs	r2, #0
 802bd94:	61da      	str	r2, [r3, #28]
	return res;
 802bd96:	7dfb      	ldrb	r3, [r7, #23]
}
 802bd98:	4618      	mov	r0, r3
 802bd9a:	3718      	adds	r7, #24
 802bd9c:	46bd      	mov	sp, r7
 802bd9e:	bd80      	pop	{r7, pc}

0802bda0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 802bda0:	b580      	push	{r7, lr}
 802bda2:	b086      	sub	sp, #24
 802bda4:	af00      	add	r7, sp, #0
 802bda6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 802bda8:	687b      	ldr	r3, [r7, #4]
 802bdaa:	681b      	ldr	r3, [r3, #0]
 802bdac:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 802bdae:	2100      	movs	r1, #0
 802bdb0:	6878      	ldr	r0, [r7, #4]
 802bdb2:	f7ff fb7c 	bl	802b4ae <dir_sdi>
 802bdb6:	4603      	mov	r3, r0
 802bdb8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 802bdba:	7dfb      	ldrb	r3, [r7, #23]
 802bdbc:	2b00      	cmp	r3, #0
 802bdbe:	d001      	beq.n	802bdc4 <dir_find+0x24>
 802bdc0:	7dfb      	ldrb	r3, [r7, #23]
 802bdc2:	e0a9      	b.n	802bf18 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 802bdc4:	23ff      	movs	r3, #255	; 0xff
 802bdc6:	753b      	strb	r3, [r7, #20]
 802bdc8:	7d3b      	ldrb	r3, [r7, #20]
 802bdca:	757b      	strb	r3, [r7, #21]
 802bdcc:	687b      	ldr	r3, [r7, #4]
 802bdce:	f04f 32ff 	mov.w	r2, #4294967295
 802bdd2:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 802bdd4:	687b      	ldr	r3, [r7, #4]
 802bdd6:	69db      	ldr	r3, [r3, #28]
 802bdd8:	4619      	mov	r1, r3
 802bdda:	6938      	ldr	r0, [r7, #16]
 802bddc:	f7fe ffc6 	bl	802ad6c <move_window>
 802bde0:	4603      	mov	r3, r0
 802bde2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 802bde4:	7dfb      	ldrb	r3, [r7, #23]
 802bde6:	2b00      	cmp	r3, #0
 802bde8:	f040 8090 	bne.w	802bf0c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 802bdec:	687b      	ldr	r3, [r7, #4]
 802bdee:	6a1b      	ldr	r3, [r3, #32]
 802bdf0:	781b      	ldrb	r3, [r3, #0]
 802bdf2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 802bdf4:	7dbb      	ldrb	r3, [r7, #22]
 802bdf6:	2b00      	cmp	r3, #0
 802bdf8:	d102      	bne.n	802be00 <dir_find+0x60>
 802bdfa:	2304      	movs	r3, #4
 802bdfc:	75fb      	strb	r3, [r7, #23]
 802bdfe:	e08a      	b.n	802bf16 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 802be00:	687b      	ldr	r3, [r7, #4]
 802be02:	6a1b      	ldr	r3, [r3, #32]
 802be04:	330b      	adds	r3, #11
 802be06:	781b      	ldrb	r3, [r3, #0]
 802be08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802be0c:	73fb      	strb	r3, [r7, #15]
 802be0e:	687b      	ldr	r3, [r7, #4]
 802be10:	7bfa      	ldrb	r2, [r7, #15]
 802be12:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 802be14:	7dbb      	ldrb	r3, [r7, #22]
 802be16:	2be5      	cmp	r3, #229	; 0xe5
 802be18:	d007      	beq.n	802be2a <dir_find+0x8a>
 802be1a:	7bfb      	ldrb	r3, [r7, #15]
 802be1c:	f003 0308 	and.w	r3, r3, #8
 802be20:	2b00      	cmp	r3, #0
 802be22:	d009      	beq.n	802be38 <dir_find+0x98>
 802be24:	7bfb      	ldrb	r3, [r7, #15]
 802be26:	2b0f      	cmp	r3, #15
 802be28:	d006      	beq.n	802be38 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 802be2a:	23ff      	movs	r3, #255	; 0xff
 802be2c:	757b      	strb	r3, [r7, #21]
 802be2e:	687b      	ldr	r3, [r7, #4]
 802be30:	f04f 32ff 	mov.w	r2, #4294967295
 802be34:	631a      	str	r2, [r3, #48]	; 0x30
 802be36:	e05e      	b.n	802bef6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 802be38:	7bfb      	ldrb	r3, [r7, #15]
 802be3a:	2b0f      	cmp	r3, #15
 802be3c:	d136      	bne.n	802beac <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 802be3e:	687b      	ldr	r3, [r7, #4]
 802be40:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 802be44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802be48:	2b00      	cmp	r3, #0
 802be4a:	d154      	bne.n	802bef6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 802be4c:	7dbb      	ldrb	r3, [r7, #22]
 802be4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802be52:	2b00      	cmp	r3, #0
 802be54:	d00d      	beq.n	802be72 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 802be56:	687b      	ldr	r3, [r7, #4]
 802be58:	6a1b      	ldr	r3, [r3, #32]
 802be5a:	7b5b      	ldrb	r3, [r3, #13]
 802be5c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 802be5e:	7dbb      	ldrb	r3, [r7, #22]
 802be60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802be64:	75bb      	strb	r3, [r7, #22]
 802be66:	7dbb      	ldrb	r3, [r7, #22]
 802be68:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 802be6a:	687b      	ldr	r3, [r7, #4]
 802be6c:	695a      	ldr	r2, [r3, #20]
 802be6e:	687b      	ldr	r3, [r7, #4]
 802be70:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 802be72:	7dba      	ldrb	r2, [r7, #22]
 802be74:	7d7b      	ldrb	r3, [r7, #21]
 802be76:	429a      	cmp	r2, r3
 802be78:	d115      	bne.n	802bea6 <dir_find+0x106>
 802be7a:	687b      	ldr	r3, [r7, #4]
 802be7c:	6a1b      	ldr	r3, [r3, #32]
 802be7e:	330d      	adds	r3, #13
 802be80:	781b      	ldrb	r3, [r3, #0]
 802be82:	7d3a      	ldrb	r2, [r7, #20]
 802be84:	429a      	cmp	r2, r3
 802be86:	d10e      	bne.n	802bea6 <dir_find+0x106>
 802be88:	693b      	ldr	r3, [r7, #16]
 802be8a:	691a      	ldr	r2, [r3, #16]
 802be8c:	687b      	ldr	r3, [r7, #4]
 802be8e:	6a1b      	ldr	r3, [r3, #32]
 802be90:	4619      	mov	r1, r3
 802be92:	4610      	mov	r0, r2
 802be94:	f7ff fcf0 	bl	802b878 <cmp_lfn>
 802be98:	4603      	mov	r3, r0
 802be9a:	2b00      	cmp	r3, #0
 802be9c:	d003      	beq.n	802bea6 <dir_find+0x106>
 802be9e:	7d7b      	ldrb	r3, [r7, #21]
 802bea0:	3b01      	subs	r3, #1
 802bea2:	b2db      	uxtb	r3, r3
 802bea4:	e000      	b.n	802bea8 <dir_find+0x108>
 802bea6:	23ff      	movs	r3, #255	; 0xff
 802bea8:	757b      	strb	r3, [r7, #21]
 802beaa:	e024      	b.n	802bef6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 802beac:	7d7b      	ldrb	r3, [r7, #21]
 802beae:	2b00      	cmp	r3, #0
 802beb0:	d109      	bne.n	802bec6 <dir_find+0x126>
 802beb2:	687b      	ldr	r3, [r7, #4]
 802beb4:	6a1b      	ldr	r3, [r3, #32]
 802beb6:	4618      	mov	r0, r3
 802beb8:	f7ff feaa 	bl	802bc10 <sum_sfn>
 802bebc:	4603      	mov	r3, r0
 802bebe:	461a      	mov	r2, r3
 802bec0:	7d3b      	ldrb	r3, [r7, #20]
 802bec2:	4293      	cmp	r3, r2
 802bec4:	d024      	beq.n	802bf10 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 802bec6:	687b      	ldr	r3, [r7, #4]
 802bec8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 802becc:	f003 0301 	and.w	r3, r3, #1
 802bed0:	2b00      	cmp	r3, #0
 802bed2:	d10a      	bne.n	802beea <dir_find+0x14a>
 802bed4:	687b      	ldr	r3, [r7, #4]
 802bed6:	6a18      	ldr	r0, [r3, #32]
 802bed8:	687b      	ldr	r3, [r7, #4]
 802beda:	3324      	adds	r3, #36	; 0x24
 802bedc:	220b      	movs	r2, #11
 802bede:	4619      	mov	r1, r3
 802bee0:	f7fe fe99 	bl	802ac16 <mem_cmp>
 802bee4:	4603      	mov	r3, r0
 802bee6:	2b00      	cmp	r3, #0
 802bee8:	d014      	beq.n	802bf14 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 802beea:	23ff      	movs	r3, #255	; 0xff
 802beec:	757b      	strb	r3, [r7, #21]
 802beee:	687b      	ldr	r3, [r7, #4]
 802bef0:	f04f 32ff 	mov.w	r2, #4294967295
 802bef4:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 802bef6:	2100      	movs	r1, #0
 802bef8:	6878      	ldr	r0, [r7, #4]
 802befa:	f7ff fb61 	bl	802b5c0 <dir_next>
 802befe:	4603      	mov	r3, r0
 802bf00:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 802bf02:	7dfb      	ldrb	r3, [r7, #23]
 802bf04:	2b00      	cmp	r3, #0
 802bf06:	f43f af65 	beq.w	802bdd4 <dir_find+0x34>
 802bf0a:	e004      	b.n	802bf16 <dir_find+0x176>
		if (res != FR_OK) break;
 802bf0c:	bf00      	nop
 802bf0e:	e002      	b.n	802bf16 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 802bf10:	bf00      	nop
 802bf12:	e000      	b.n	802bf16 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 802bf14:	bf00      	nop

	return res;
 802bf16:	7dfb      	ldrb	r3, [r7, #23]
}
 802bf18:	4618      	mov	r0, r3
 802bf1a:	3718      	adds	r7, #24
 802bf1c:	46bd      	mov	sp, r7
 802bf1e:	bd80      	pop	{r7, pc}

0802bf20 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 802bf20:	b580      	push	{r7, lr}
 802bf22:	b08c      	sub	sp, #48	; 0x30
 802bf24:	af00      	add	r7, sp, #0
 802bf26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 802bf28:	687b      	ldr	r3, [r7, #4]
 802bf2a:	681b      	ldr	r3, [r3, #0]
 802bf2c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 802bf2e:	687b      	ldr	r3, [r7, #4]
 802bf30:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 802bf34:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 802bf38:	2b00      	cmp	r3, #0
 802bf3a:	d001      	beq.n	802bf40 <dir_register+0x20>
 802bf3c:	2306      	movs	r3, #6
 802bf3e:	e0e0      	b.n	802c102 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 802bf40:	2300      	movs	r3, #0
 802bf42:	627b      	str	r3, [r7, #36]	; 0x24
 802bf44:	e002      	b.n	802bf4c <dir_register+0x2c>
 802bf46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bf48:	3301      	adds	r3, #1
 802bf4a:	627b      	str	r3, [r7, #36]	; 0x24
 802bf4c:	69fb      	ldr	r3, [r7, #28]
 802bf4e:	691a      	ldr	r2, [r3, #16]
 802bf50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bf52:	005b      	lsls	r3, r3, #1
 802bf54:	4413      	add	r3, r2
 802bf56:	881b      	ldrh	r3, [r3, #0]
 802bf58:	2b00      	cmp	r3, #0
 802bf5a:	d1f4      	bne.n	802bf46 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 802bf5c:	687b      	ldr	r3, [r7, #4]
 802bf5e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 802bf62:	f107 030c 	add.w	r3, r7, #12
 802bf66:	220c      	movs	r2, #12
 802bf68:	4618      	mov	r0, r3
 802bf6a:	f7fe fe19 	bl	802aba0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 802bf6e:	7dfb      	ldrb	r3, [r7, #23]
 802bf70:	f003 0301 	and.w	r3, r3, #1
 802bf74:	2b00      	cmp	r3, #0
 802bf76:	d032      	beq.n	802bfde <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 802bf78:	687b      	ldr	r3, [r7, #4]
 802bf7a:	2240      	movs	r2, #64	; 0x40
 802bf7c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 802bf80:	2301      	movs	r3, #1
 802bf82:	62bb      	str	r3, [r7, #40]	; 0x28
 802bf84:	e016      	b.n	802bfb4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 802bf86:	687b      	ldr	r3, [r7, #4]
 802bf88:	f103 0024 	add.w	r0, r3, #36	; 0x24
 802bf8c:	69fb      	ldr	r3, [r7, #28]
 802bf8e:	691a      	ldr	r2, [r3, #16]
 802bf90:	f107 010c 	add.w	r1, r7, #12
 802bf94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bf96:	f7ff fdab 	bl	802baf0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 802bf9a:	6878      	ldr	r0, [r7, #4]
 802bf9c:	f7ff ff00 	bl	802bda0 <dir_find>
 802bfa0:	4603      	mov	r3, r0
 802bfa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 802bfa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802bfaa:	2b00      	cmp	r3, #0
 802bfac:	d106      	bne.n	802bfbc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 802bfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bfb0:	3301      	adds	r3, #1
 802bfb2:	62bb      	str	r3, [r7, #40]	; 0x28
 802bfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bfb6:	2b63      	cmp	r3, #99	; 0x63
 802bfb8:	d9e5      	bls.n	802bf86 <dir_register+0x66>
 802bfba:	e000      	b.n	802bfbe <dir_register+0x9e>
			if (res != FR_OK) break;
 802bfbc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 802bfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bfc0:	2b64      	cmp	r3, #100	; 0x64
 802bfc2:	d101      	bne.n	802bfc8 <dir_register+0xa8>
 802bfc4:	2307      	movs	r3, #7
 802bfc6:	e09c      	b.n	802c102 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 802bfc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802bfcc:	2b04      	cmp	r3, #4
 802bfce:	d002      	beq.n	802bfd6 <dir_register+0xb6>
 802bfd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802bfd4:	e095      	b.n	802c102 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 802bfd6:	7dfa      	ldrb	r2, [r7, #23]
 802bfd8:	687b      	ldr	r3, [r7, #4]
 802bfda:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 802bfde:	7dfb      	ldrb	r3, [r7, #23]
 802bfe0:	f003 0302 	and.w	r3, r3, #2
 802bfe4:	2b00      	cmp	r3, #0
 802bfe6:	d007      	beq.n	802bff8 <dir_register+0xd8>
 802bfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bfea:	330c      	adds	r3, #12
 802bfec:	4a47      	ldr	r2, [pc, #284]	; (802c10c <dir_register+0x1ec>)
 802bfee:	fba2 2303 	umull	r2, r3, r2, r3
 802bff2:	089b      	lsrs	r3, r3, #2
 802bff4:	3301      	adds	r3, #1
 802bff6:	e000      	b.n	802bffa <dir_register+0xda>
 802bff8:	2301      	movs	r3, #1
 802bffa:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 802bffc:	6a39      	ldr	r1, [r7, #32]
 802bffe:	6878      	ldr	r0, [r7, #4]
 802c000:	f7ff fbb4 	bl	802b76c <dir_alloc>
 802c004:	4603      	mov	r3, r0
 802c006:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 802c00a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802c00e:	2b00      	cmp	r3, #0
 802c010:	d148      	bne.n	802c0a4 <dir_register+0x184>
 802c012:	6a3b      	ldr	r3, [r7, #32]
 802c014:	3b01      	subs	r3, #1
 802c016:	623b      	str	r3, [r7, #32]
 802c018:	6a3b      	ldr	r3, [r7, #32]
 802c01a:	2b00      	cmp	r3, #0
 802c01c:	d042      	beq.n	802c0a4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 802c01e:	687b      	ldr	r3, [r7, #4]
 802c020:	695a      	ldr	r2, [r3, #20]
 802c022:	6a3b      	ldr	r3, [r7, #32]
 802c024:	015b      	lsls	r3, r3, #5
 802c026:	1ad3      	subs	r3, r2, r3
 802c028:	4619      	mov	r1, r3
 802c02a:	6878      	ldr	r0, [r7, #4]
 802c02c:	f7ff fa3f 	bl	802b4ae <dir_sdi>
 802c030:	4603      	mov	r3, r0
 802c032:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 802c036:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802c03a:	2b00      	cmp	r3, #0
 802c03c:	d132      	bne.n	802c0a4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 802c03e:	687b      	ldr	r3, [r7, #4]
 802c040:	3324      	adds	r3, #36	; 0x24
 802c042:	4618      	mov	r0, r3
 802c044:	f7ff fde4 	bl	802bc10 <sum_sfn>
 802c048:	4603      	mov	r3, r0
 802c04a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 802c04c:	687b      	ldr	r3, [r7, #4]
 802c04e:	69db      	ldr	r3, [r3, #28]
 802c050:	4619      	mov	r1, r3
 802c052:	69f8      	ldr	r0, [r7, #28]
 802c054:	f7fe fe8a 	bl	802ad6c <move_window>
 802c058:	4603      	mov	r3, r0
 802c05a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 802c05e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802c062:	2b00      	cmp	r3, #0
 802c064:	d11d      	bne.n	802c0a2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 802c066:	69fb      	ldr	r3, [r7, #28]
 802c068:	6918      	ldr	r0, [r3, #16]
 802c06a:	687b      	ldr	r3, [r7, #4]
 802c06c:	6a19      	ldr	r1, [r3, #32]
 802c06e:	6a3b      	ldr	r3, [r7, #32]
 802c070:	b2da      	uxtb	r2, r3
 802c072:	7efb      	ldrb	r3, [r7, #27]
 802c074:	f7ff fcd4 	bl	802ba20 <put_lfn>
				fs->wflag = 1;
 802c078:	69fb      	ldr	r3, [r7, #28]
 802c07a:	2201      	movs	r2, #1
 802c07c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 802c07e:	2100      	movs	r1, #0
 802c080:	6878      	ldr	r0, [r7, #4]
 802c082:	f7ff fa9d 	bl	802b5c0 <dir_next>
 802c086:	4603      	mov	r3, r0
 802c088:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 802c08c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802c090:	2b00      	cmp	r3, #0
 802c092:	d107      	bne.n	802c0a4 <dir_register+0x184>
 802c094:	6a3b      	ldr	r3, [r7, #32]
 802c096:	3b01      	subs	r3, #1
 802c098:	623b      	str	r3, [r7, #32]
 802c09a:	6a3b      	ldr	r3, [r7, #32]
 802c09c:	2b00      	cmp	r3, #0
 802c09e:	d1d5      	bne.n	802c04c <dir_register+0x12c>
 802c0a0:	e000      	b.n	802c0a4 <dir_register+0x184>
				if (res != FR_OK) break;
 802c0a2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 802c0a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802c0a8:	2b00      	cmp	r3, #0
 802c0aa:	d128      	bne.n	802c0fe <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 802c0ac:	687b      	ldr	r3, [r7, #4]
 802c0ae:	69db      	ldr	r3, [r3, #28]
 802c0b0:	4619      	mov	r1, r3
 802c0b2:	69f8      	ldr	r0, [r7, #28]
 802c0b4:	f7fe fe5a 	bl	802ad6c <move_window>
 802c0b8:	4603      	mov	r3, r0
 802c0ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 802c0be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802c0c2:	2b00      	cmp	r3, #0
 802c0c4:	d11b      	bne.n	802c0fe <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 802c0c6:	687b      	ldr	r3, [r7, #4]
 802c0c8:	6a1b      	ldr	r3, [r3, #32]
 802c0ca:	2220      	movs	r2, #32
 802c0cc:	2100      	movs	r1, #0
 802c0ce:	4618      	mov	r0, r3
 802c0d0:	f7fe fd87 	bl	802abe2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 802c0d4:	687b      	ldr	r3, [r7, #4]
 802c0d6:	6a18      	ldr	r0, [r3, #32]
 802c0d8:	687b      	ldr	r3, [r7, #4]
 802c0da:	3324      	adds	r3, #36	; 0x24
 802c0dc:	220b      	movs	r2, #11
 802c0de:	4619      	mov	r1, r3
 802c0e0:	f7fe fd5e 	bl	802aba0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 802c0e4:	687b      	ldr	r3, [r7, #4]
 802c0e6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 802c0ea:	687b      	ldr	r3, [r7, #4]
 802c0ec:	6a1b      	ldr	r3, [r3, #32]
 802c0ee:	330c      	adds	r3, #12
 802c0f0:	f002 0218 	and.w	r2, r2, #24
 802c0f4:	b2d2      	uxtb	r2, r2
 802c0f6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 802c0f8:	69fb      	ldr	r3, [r7, #28]
 802c0fa:	2201      	movs	r2, #1
 802c0fc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 802c0fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 802c102:	4618      	mov	r0, r3
 802c104:	3730      	adds	r7, #48	; 0x30
 802c106:	46bd      	mov	sp, r7
 802c108:	bd80      	pop	{r7, pc}
 802c10a:	bf00      	nop
 802c10c:	4ec4ec4f 	.word	0x4ec4ec4f

0802c110 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 802c110:	b580      	push	{r7, lr}
 802c112:	b088      	sub	sp, #32
 802c114:	af00      	add	r7, sp, #0
 802c116:	6078      	str	r0, [r7, #4]
 802c118:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 802c11a:	687b      	ldr	r3, [r7, #4]
 802c11c:	681b      	ldr	r3, [r3, #0]
 802c11e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 802c120:	683b      	ldr	r3, [r7, #0]
 802c122:	2200      	movs	r2, #0
 802c124:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 802c126:	687b      	ldr	r3, [r7, #4]
 802c128:	69db      	ldr	r3, [r3, #28]
 802c12a:	2b00      	cmp	r3, #0
 802c12c:	f000 80c9 	beq.w	802c2c2 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 802c130:	687b      	ldr	r3, [r7, #4]
 802c132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c134:	f1b3 3fff 	cmp.w	r3, #4294967295
 802c138:	d032      	beq.n	802c1a0 <get_fileinfo+0x90>
			i = j = 0;
 802c13a:	2300      	movs	r3, #0
 802c13c:	61bb      	str	r3, [r7, #24]
 802c13e:	69bb      	ldr	r3, [r7, #24]
 802c140:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 802c142:	e01b      	b.n	802c17c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 802c144:	89fb      	ldrh	r3, [r7, #14]
 802c146:	2100      	movs	r1, #0
 802c148:	4618      	mov	r0, r3
 802c14a:	f001 fa07 	bl	802d55c <ff_convert>
 802c14e:	4603      	mov	r3, r0
 802c150:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 802c152:	89fb      	ldrh	r3, [r7, #14]
 802c154:	2b00      	cmp	r3, #0
 802c156:	d102      	bne.n	802c15e <get_fileinfo+0x4e>
 802c158:	2300      	movs	r3, #0
 802c15a:	61fb      	str	r3, [r7, #28]
 802c15c:	e01a      	b.n	802c194 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 802c15e:	69fb      	ldr	r3, [r7, #28]
 802c160:	2bfe      	cmp	r3, #254	; 0xfe
 802c162:	d902      	bls.n	802c16a <get_fileinfo+0x5a>
 802c164:	2300      	movs	r3, #0
 802c166:	61fb      	str	r3, [r7, #28]
 802c168:	e014      	b.n	802c194 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 802c16a:	69fb      	ldr	r3, [r7, #28]
 802c16c:	1c5a      	adds	r2, r3, #1
 802c16e:	61fa      	str	r2, [r7, #28]
 802c170:	89fa      	ldrh	r2, [r7, #14]
 802c172:	b2d1      	uxtb	r1, r2
 802c174:	683a      	ldr	r2, [r7, #0]
 802c176:	4413      	add	r3, r2
 802c178:	460a      	mov	r2, r1
 802c17a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 802c17c:	693b      	ldr	r3, [r7, #16]
 802c17e:	691a      	ldr	r2, [r3, #16]
 802c180:	69bb      	ldr	r3, [r7, #24]
 802c182:	1c59      	adds	r1, r3, #1
 802c184:	61b9      	str	r1, [r7, #24]
 802c186:	005b      	lsls	r3, r3, #1
 802c188:	4413      	add	r3, r2
 802c18a:	881b      	ldrh	r3, [r3, #0]
 802c18c:	81fb      	strh	r3, [r7, #14]
 802c18e:	89fb      	ldrh	r3, [r7, #14]
 802c190:	2b00      	cmp	r3, #0
 802c192:	d1d7      	bne.n	802c144 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 802c194:	683a      	ldr	r2, [r7, #0]
 802c196:	69fb      	ldr	r3, [r7, #28]
 802c198:	4413      	add	r3, r2
 802c19a:	3316      	adds	r3, #22
 802c19c:	2200      	movs	r2, #0
 802c19e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 802c1a0:	2300      	movs	r3, #0
 802c1a2:	61bb      	str	r3, [r7, #24]
 802c1a4:	69bb      	ldr	r3, [r7, #24]
 802c1a6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 802c1a8:	683a      	ldr	r2, [r7, #0]
 802c1aa:	69fb      	ldr	r3, [r7, #28]
 802c1ac:	4413      	add	r3, r2
 802c1ae:	3316      	adds	r3, #22
 802c1b0:	781b      	ldrb	r3, [r3, #0]
 802c1b2:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 802c1b4:	e04c      	b.n	802c250 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 802c1b6:	687b      	ldr	r3, [r7, #4]
 802c1b8:	6a1a      	ldr	r2, [r3, #32]
 802c1ba:	69fb      	ldr	r3, [r7, #28]
 802c1bc:	1c59      	adds	r1, r3, #1
 802c1be:	61f9      	str	r1, [r7, #28]
 802c1c0:	4413      	add	r3, r2
 802c1c2:	781b      	ldrb	r3, [r3, #0]
 802c1c4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 802c1c6:	7dfb      	ldrb	r3, [r7, #23]
 802c1c8:	2b20      	cmp	r3, #32
 802c1ca:	d100      	bne.n	802c1ce <get_fileinfo+0xbe>
 802c1cc:	e040      	b.n	802c250 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 802c1ce:	7dfb      	ldrb	r3, [r7, #23]
 802c1d0:	2b05      	cmp	r3, #5
 802c1d2:	d101      	bne.n	802c1d8 <get_fileinfo+0xc8>
 802c1d4:	23e5      	movs	r3, #229	; 0xe5
 802c1d6:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 802c1d8:	69fb      	ldr	r3, [r7, #28]
 802c1da:	2b09      	cmp	r3, #9
 802c1dc:	d10f      	bne.n	802c1fe <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 802c1de:	89bb      	ldrh	r3, [r7, #12]
 802c1e0:	2b00      	cmp	r3, #0
 802c1e2:	d105      	bne.n	802c1f0 <get_fileinfo+0xe0>
 802c1e4:	683a      	ldr	r2, [r7, #0]
 802c1e6:	69bb      	ldr	r3, [r7, #24]
 802c1e8:	4413      	add	r3, r2
 802c1ea:	3316      	adds	r3, #22
 802c1ec:	222e      	movs	r2, #46	; 0x2e
 802c1ee:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 802c1f0:	69bb      	ldr	r3, [r7, #24]
 802c1f2:	1c5a      	adds	r2, r3, #1
 802c1f4:	61ba      	str	r2, [r7, #24]
 802c1f6:	683a      	ldr	r2, [r7, #0]
 802c1f8:	4413      	add	r3, r2
 802c1fa:	222e      	movs	r2, #46	; 0x2e
 802c1fc:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 802c1fe:	683a      	ldr	r2, [r7, #0]
 802c200:	69bb      	ldr	r3, [r7, #24]
 802c202:	4413      	add	r3, r2
 802c204:	3309      	adds	r3, #9
 802c206:	7dfa      	ldrb	r2, [r7, #23]
 802c208:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 802c20a:	89bb      	ldrh	r3, [r7, #12]
 802c20c:	2b00      	cmp	r3, #0
 802c20e:	d11c      	bne.n	802c24a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 802c210:	7dfb      	ldrb	r3, [r7, #23]
 802c212:	2b40      	cmp	r3, #64	; 0x40
 802c214:	d913      	bls.n	802c23e <get_fileinfo+0x12e>
 802c216:	7dfb      	ldrb	r3, [r7, #23]
 802c218:	2b5a      	cmp	r3, #90	; 0x5a
 802c21a:	d810      	bhi.n	802c23e <get_fileinfo+0x12e>
 802c21c:	687b      	ldr	r3, [r7, #4]
 802c21e:	6a1b      	ldr	r3, [r3, #32]
 802c220:	330c      	adds	r3, #12
 802c222:	781b      	ldrb	r3, [r3, #0]
 802c224:	461a      	mov	r2, r3
 802c226:	69fb      	ldr	r3, [r7, #28]
 802c228:	2b08      	cmp	r3, #8
 802c22a:	d901      	bls.n	802c230 <get_fileinfo+0x120>
 802c22c:	2310      	movs	r3, #16
 802c22e:	e000      	b.n	802c232 <get_fileinfo+0x122>
 802c230:	2308      	movs	r3, #8
 802c232:	4013      	ands	r3, r2
 802c234:	2b00      	cmp	r3, #0
 802c236:	d002      	beq.n	802c23e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 802c238:	7dfb      	ldrb	r3, [r7, #23]
 802c23a:	3320      	adds	r3, #32
 802c23c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 802c23e:	683a      	ldr	r2, [r7, #0]
 802c240:	69bb      	ldr	r3, [r7, #24]
 802c242:	4413      	add	r3, r2
 802c244:	3316      	adds	r3, #22
 802c246:	7dfa      	ldrb	r2, [r7, #23]
 802c248:	701a      	strb	r2, [r3, #0]
		}
		j++;
 802c24a:	69bb      	ldr	r3, [r7, #24]
 802c24c:	3301      	adds	r3, #1
 802c24e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 802c250:	69fb      	ldr	r3, [r7, #28]
 802c252:	2b0a      	cmp	r3, #10
 802c254:	d9af      	bls.n	802c1b6 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 802c256:	89bb      	ldrh	r3, [r7, #12]
 802c258:	2b00      	cmp	r3, #0
 802c25a:	d10d      	bne.n	802c278 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 802c25c:	683a      	ldr	r2, [r7, #0]
 802c25e:	69bb      	ldr	r3, [r7, #24]
 802c260:	4413      	add	r3, r2
 802c262:	3316      	adds	r3, #22
 802c264:	2200      	movs	r2, #0
 802c266:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 802c268:	687b      	ldr	r3, [r7, #4]
 802c26a:	6a1b      	ldr	r3, [r3, #32]
 802c26c:	330c      	adds	r3, #12
 802c26e:	781b      	ldrb	r3, [r3, #0]
 802c270:	2b00      	cmp	r3, #0
 802c272:	d101      	bne.n	802c278 <get_fileinfo+0x168>
 802c274:	2300      	movs	r3, #0
 802c276:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 802c278:	683a      	ldr	r2, [r7, #0]
 802c27a:	69bb      	ldr	r3, [r7, #24]
 802c27c:	4413      	add	r3, r2
 802c27e:	3309      	adds	r3, #9
 802c280:	2200      	movs	r2, #0
 802c282:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 802c284:	687b      	ldr	r3, [r7, #4]
 802c286:	6a1b      	ldr	r3, [r3, #32]
 802c288:	7ada      	ldrb	r2, [r3, #11]
 802c28a:	683b      	ldr	r3, [r7, #0]
 802c28c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 802c28e:	687b      	ldr	r3, [r7, #4]
 802c290:	6a1b      	ldr	r3, [r3, #32]
 802c292:	331c      	adds	r3, #28
 802c294:	4618      	mov	r0, r3
 802c296:	f7fe fc19 	bl	802aacc <ld_dword>
 802c29a:	4602      	mov	r2, r0
 802c29c:	683b      	ldr	r3, [r7, #0]
 802c29e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 802c2a0:	687b      	ldr	r3, [r7, #4]
 802c2a2:	6a1b      	ldr	r3, [r3, #32]
 802c2a4:	3316      	adds	r3, #22
 802c2a6:	4618      	mov	r0, r3
 802c2a8:	f7fe fc10 	bl	802aacc <ld_dword>
 802c2ac:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 802c2ae:	68bb      	ldr	r3, [r7, #8]
 802c2b0:	b29a      	uxth	r2, r3
 802c2b2:	683b      	ldr	r3, [r7, #0]
 802c2b4:	80da      	strh	r2, [r3, #6]
 802c2b6:	68bb      	ldr	r3, [r7, #8]
 802c2b8:	0c1b      	lsrs	r3, r3, #16
 802c2ba:	b29a      	uxth	r2, r3
 802c2bc:	683b      	ldr	r3, [r7, #0]
 802c2be:	809a      	strh	r2, [r3, #4]
 802c2c0:	e000      	b.n	802c2c4 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 802c2c2:	bf00      	nop
}
 802c2c4:	3720      	adds	r7, #32
 802c2c6:	46bd      	mov	sp, r7
 802c2c8:	bd80      	pop	{r7, pc}
	...

0802c2cc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 802c2cc:	b580      	push	{r7, lr}
 802c2ce:	b08a      	sub	sp, #40	; 0x28
 802c2d0:	af00      	add	r7, sp, #0
 802c2d2:	6078      	str	r0, [r7, #4]
 802c2d4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 802c2d6:	683b      	ldr	r3, [r7, #0]
 802c2d8:	681b      	ldr	r3, [r3, #0]
 802c2da:	613b      	str	r3, [r7, #16]
 802c2dc:	687b      	ldr	r3, [r7, #4]
 802c2de:	681b      	ldr	r3, [r3, #0]
 802c2e0:	691b      	ldr	r3, [r3, #16]
 802c2e2:	60fb      	str	r3, [r7, #12]
 802c2e4:	2300      	movs	r3, #0
 802c2e6:	617b      	str	r3, [r7, #20]
 802c2e8:	697b      	ldr	r3, [r7, #20]
 802c2ea:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 802c2ec:	69bb      	ldr	r3, [r7, #24]
 802c2ee:	1c5a      	adds	r2, r3, #1
 802c2f0:	61ba      	str	r2, [r7, #24]
 802c2f2:	693a      	ldr	r2, [r7, #16]
 802c2f4:	4413      	add	r3, r2
 802c2f6:	781b      	ldrb	r3, [r3, #0]
 802c2f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 802c2fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c2fc:	2b1f      	cmp	r3, #31
 802c2fe:	d940      	bls.n	802c382 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 802c300:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c302:	2b2f      	cmp	r3, #47	; 0x2f
 802c304:	d006      	beq.n	802c314 <create_name+0x48>
 802c306:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c308:	2b5c      	cmp	r3, #92	; 0x5c
 802c30a:	d110      	bne.n	802c32e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 802c30c:	e002      	b.n	802c314 <create_name+0x48>
 802c30e:	69bb      	ldr	r3, [r7, #24]
 802c310:	3301      	adds	r3, #1
 802c312:	61bb      	str	r3, [r7, #24]
 802c314:	693a      	ldr	r2, [r7, #16]
 802c316:	69bb      	ldr	r3, [r7, #24]
 802c318:	4413      	add	r3, r2
 802c31a:	781b      	ldrb	r3, [r3, #0]
 802c31c:	2b2f      	cmp	r3, #47	; 0x2f
 802c31e:	d0f6      	beq.n	802c30e <create_name+0x42>
 802c320:	693a      	ldr	r2, [r7, #16]
 802c322:	69bb      	ldr	r3, [r7, #24]
 802c324:	4413      	add	r3, r2
 802c326:	781b      	ldrb	r3, [r3, #0]
 802c328:	2b5c      	cmp	r3, #92	; 0x5c
 802c32a:	d0f0      	beq.n	802c30e <create_name+0x42>
			break;
 802c32c:	e02a      	b.n	802c384 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 802c32e:	697b      	ldr	r3, [r7, #20]
 802c330:	2bfe      	cmp	r3, #254	; 0xfe
 802c332:	d901      	bls.n	802c338 <create_name+0x6c>
 802c334:	2306      	movs	r3, #6
 802c336:	e1cb      	b.n	802c6d0 <create_name+0x404>
#if !_LFN_UNICODE
		w &= 0xFF;
 802c338:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c33a:	b2db      	uxtb	r3, r3
 802c33c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 802c33e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c340:	2101      	movs	r1, #1
 802c342:	4618      	mov	r0, r3
 802c344:	f001 f90a 	bl	802d55c <ff_convert>
 802c348:	4603      	mov	r3, r0
 802c34a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 802c34c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c34e:	2b00      	cmp	r3, #0
 802c350:	d101      	bne.n	802c356 <create_name+0x8a>
 802c352:	2306      	movs	r3, #6
 802c354:	e1bc      	b.n	802c6d0 <create_name+0x404>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 802c356:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c358:	2b7f      	cmp	r3, #127	; 0x7f
 802c35a:	d809      	bhi.n	802c370 <create_name+0xa4>
 802c35c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c35e:	4619      	mov	r1, r3
 802c360:	48a5      	ldr	r0, [pc, #660]	; (802c5f8 <create_name+0x32c>)
 802c362:	f7fe fc7f 	bl	802ac64 <chk_chr>
 802c366:	4603      	mov	r3, r0
 802c368:	2b00      	cmp	r3, #0
 802c36a:	d001      	beq.n	802c370 <create_name+0xa4>
 802c36c:	2306      	movs	r3, #6
 802c36e:	e1af      	b.n	802c6d0 <create_name+0x404>
		lfn[di++] = w;					/* Store the Unicode character */
 802c370:	697b      	ldr	r3, [r7, #20]
 802c372:	1c5a      	adds	r2, r3, #1
 802c374:	617a      	str	r2, [r7, #20]
 802c376:	005b      	lsls	r3, r3, #1
 802c378:	68fa      	ldr	r2, [r7, #12]
 802c37a:	4413      	add	r3, r2
 802c37c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802c37e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 802c380:	e7b4      	b.n	802c2ec <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 802c382:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 802c384:	693a      	ldr	r2, [r7, #16]
 802c386:	69bb      	ldr	r3, [r7, #24]
 802c388:	441a      	add	r2, r3
 802c38a:	683b      	ldr	r3, [r7, #0]
 802c38c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 802c38e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c390:	2b1f      	cmp	r3, #31
 802c392:	d801      	bhi.n	802c398 <create_name+0xcc>
 802c394:	2304      	movs	r3, #4
 802c396:	e000      	b.n	802c39a <create_name+0xce>
 802c398:	2300      	movs	r3, #0
 802c39a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 802c39e:	697b      	ldr	r3, [r7, #20]
 802c3a0:	2b01      	cmp	r3, #1
 802c3a2:	d109      	bne.n	802c3b8 <create_name+0xec>
 802c3a4:	697a      	ldr	r2, [r7, #20]
 802c3a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802c3aa:	4413      	add	r3, r2
 802c3ac:	005b      	lsls	r3, r3, #1
 802c3ae:	68fa      	ldr	r2, [r7, #12]
 802c3b0:	4413      	add	r3, r2
 802c3b2:	881b      	ldrh	r3, [r3, #0]
 802c3b4:	2b2e      	cmp	r3, #46	; 0x2e
 802c3b6:	d015      	beq.n	802c3e4 <create_name+0x118>
 802c3b8:	697b      	ldr	r3, [r7, #20]
 802c3ba:	2b02      	cmp	r3, #2
 802c3bc:	d14d      	bne.n	802c45a <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 802c3be:	697a      	ldr	r2, [r7, #20]
 802c3c0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802c3c4:	4413      	add	r3, r2
 802c3c6:	005b      	lsls	r3, r3, #1
 802c3c8:	68fa      	ldr	r2, [r7, #12]
 802c3ca:	4413      	add	r3, r2
 802c3cc:	881b      	ldrh	r3, [r3, #0]
 802c3ce:	2b2e      	cmp	r3, #46	; 0x2e
 802c3d0:	d143      	bne.n	802c45a <create_name+0x18e>
 802c3d2:	697a      	ldr	r2, [r7, #20]
 802c3d4:	4b89      	ldr	r3, [pc, #548]	; (802c5fc <create_name+0x330>)
 802c3d6:	4413      	add	r3, r2
 802c3d8:	005b      	lsls	r3, r3, #1
 802c3da:	68fa      	ldr	r2, [r7, #12]
 802c3dc:	4413      	add	r3, r2
 802c3de:	881b      	ldrh	r3, [r3, #0]
 802c3e0:	2b2e      	cmp	r3, #46	; 0x2e
 802c3e2:	d13a      	bne.n	802c45a <create_name+0x18e>
		lfn[di] = 0;
 802c3e4:	697b      	ldr	r3, [r7, #20]
 802c3e6:	005b      	lsls	r3, r3, #1
 802c3e8:	68fa      	ldr	r2, [r7, #12]
 802c3ea:	4413      	add	r3, r2
 802c3ec:	2200      	movs	r2, #0
 802c3ee:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 802c3f0:	2300      	movs	r3, #0
 802c3f2:	623b      	str	r3, [r7, #32]
 802c3f4:	e00f      	b.n	802c416 <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 802c3f6:	6a3a      	ldr	r2, [r7, #32]
 802c3f8:	697b      	ldr	r3, [r7, #20]
 802c3fa:	429a      	cmp	r2, r3
 802c3fc:	d201      	bcs.n	802c402 <create_name+0x136>
 802c3fe:	212e      	movs	r1, #46	; 0x2e
 802c400:	e000      	b.n	802c404 <create_name+0x138>
 802c402:	2120      	movs	r1, #32
 802c404:	687a      	ldr	r2, [r7, #4]
 802c406:	6a3b      	ldr	r3, [r7, #32]
 802c408:	4413      	add	r3, r2
 802c40a:	3324      	adds	r3, #36	; 0x24
 802c40c:	460a      	mov	r2, r1
 802c40e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 802c410:	6a3b      	ldr	r3, [r7, #32]
 802c412:	3301      	adds	r3, #1
 802c414:	623b      	str	r3, [r7, #32]
 802c416:	6a3b      	ldr	r3, [r7, #32]
 802c418:	2b0a      	cmp	r3, #10
 802c41a:	d9ec      	bls.n	802c3f6 <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 802c41c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c420:	f043 0320 	orr.w	r3, r3, #32
 802c424:	b2d9      	uxtb	r1, r3
 802c426:	687a      	ldr	r2, [r7, #4]
 802c428:	6a3b      	ldr	r3, [r7, #32]
 802c42a:	4413      	add	r3, r2
 802c42c:	3324      	adds	r3, #36	; 0x24
 802c42e:	460a      	mov	r2, r1
 802c430:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 802c432:	2300      	movs	r3, #0
 802c434:	e14c      	b.n	802c6d0 <create_name+0x404>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 802c436:	697a      	ldr	r2, [r7, #20]
 802c438:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802c43c:	4413      	add	r3, r2
 802c43e:	005b      	lsls	r3, r3, #1
 802c440:	68fa      	ldr	r2, [r7, #12]
 802c442:	4413      	add	r3, r2
 802c444:	881b      	ldrh	r3, [r3, #0]
 802c446:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 802c448:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c44a:	2b20      	cmp	r3, #32
 802c44c:	d002      	beq.n	802c454 <create_name+0x188>
 802c44e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c450:	2b2e      	cmp	r3, #46	; 0x2e
 802c452:	d106      	bne.n	802c462 <create_name+0x196>
		di--;
 802c454:	697b      	ldr	r3, [r7, #20]
 802c456:	3b01      	subs	r3, #1
 802c458:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 802c45a:	697b      	ldr	r3, [r7, #20]
 802c45c:	2b00      	cmp	r3, #0
 802c45e:	d1ea      	bne.n	802c436 <create_name+0x16a>
 802c460:	e000      	b.n	802c464 <create_name+0x198>
		if (w != ' ' && w != '.') break;
 802c462:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 802c464:	697b      	ldr	r3, [r7, #20]
 802c466:	005b      	lsls	r3, r3, #1
 802c468:	68fa      	ldr	r2, [r7, #12]
 802c46a:	4413      	add	r3, r2
 802c46c:	2200      	movs	r2, #0
 802c46e:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 802c470:	697b      	ldr	r3, [r7, #20]
 802c472:	2b00      	cmp	r3, #0
 802c474:	d101      	bne.n	802c47a <create_name+0x1ae>
 802c476:	2306      	movs	r3, #6
 802c478:	e12a      	b.n	802c6d0 <create_name+0x404>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 802c47a:	687b      	ldr	r3, [r7, #4]
 802c47c:	3324      	adds	r3, #36	; 0x24
 802c47e:	220b      	movs	r2, #11
 802c480:	2120      	movs	r1, #32
 802c482:	4618      	mov	r0, r3
 802c484:	f7fe fbad 	bl	802abe2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 802c488:	2300      	movs	r3, #0
 802c48a:	61bb      	str	r3, [r7, #24]
 802c48c:	e002      	b.n	802c494 <create_name+0x1c8>
 802c48e:	69bb      	ldr	r3, [r7, #24]
 802c490:	3301      	adds	r3, #1
 802c492:	61bb      	str	r3, [r7, #24]
 802c494:	69bb      	ldr	r3, [r7, #24]
 802c496:	005b      	lsls	r3, r3, #1
 802c498:	68fa      	ldr	r2, [r7, #12]
 802c49a:	4413      	add	r3, r2
 802c49c:	881b      	ldrh	r3, [r3, #0]
 802c49e:	2b20      	cmp	r3, #32
 802c4a0:	d0f5      	beq.n	802c48e <create_name+0x1c2>
 802c4a2:	69bb      	ldr	r3, [r7, #24]
 802c4a4:	005b      	lsls	r3, r3, #1
 802c4a6:	68fa      	ldr	r2, [r7, #12]
 802c4a8:	4413      	add	r3, r2
 802c4aa:	881b      	ldrh	r3, [r3, #0]
 802c4ac:	2b2e      	cmp	r3, #46	; 0x2e
 802c4ae:	d0ee      	beq.n	802c48e <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 802c4b0:	69bb      	ldr	r3, [r7, #24]
 802c4b2:	2b00      	cmp	r3, #0
 802c4b4:	d009      	beq.n	802c4ca <create_name+0x1fe>
 802c4b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c4ba:	f043 0303 	orr.w	r3, r3, #3
 802c4be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 802c4c2:	e002      	b.n	802c4ca <create_name+0x1fe>
 802c4c4:	697b      	ldr	r3, [r7, #20]
 802c4c6:	3b01      	subs	r3, #1
 802c4c8:	617b      	str	r3, [r7, #20]
 802c4ca:	697b      	ldr	r3, [r7, #20]
 802c4cc:	2b00      	cmp	r3, #0
 802c4ce:	d009      	beq.n	802c4e4 <create_name+0x218>
 802c4d0:	697a      	ldr	r2, [r7, #20]
 802c4d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802c4d6:	4413      	add	r3, r2
 802c4d8:	005b      	lsls	r3, r3, #1
 802c4da:	68fa      	ldr	r2, [r7, #12]
 802c4dc:	4413      	add	r3, r2
 802c4de:	881b      	ldrh	r3, [r3, #0]
 802c4e0:	2b2e      	cmp	r3, #46	; 0x2e
 802c4e2:	d1ef      	bne.n	802c4c4 <create_name+0x1f8>

	i = b = 0; ni = 8;
 802c4e4:	2300      	movs	r3, #0
 802c4e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 802c4ea:	2300      	movs	r3, #0
 802c4ec:	623b      	str	r3, [r7, #32]
 802c4ee:	2308      	movs	r3, #8
 802c4f0:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 802c4f2:	69bb      	ldr	r3, [r7, #24]
 802c4f4:	1c5a      	adds	r2, r3, #1
 802c4f6:	61ba      	str	r2, [r7, #24]
 802c4f8:	005b      	lsls	r3, r3, #1
 802c4fa:	68fa      	ldr	r2, [r7, #12]
 802c4fc:	4413      	add	r3, r2
 802c4fe:	881b      	ldrh	r3, [r3, #0]
 802c500:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 802c502:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c504:	2b00      	cmp	r3, #0
 802c506:	f000 8099 	beq.w	802c63c <create_name+0x370>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 802c50a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c50c:	2b20      	cmp	r3, #32
 802c50e:	d006      	beq.n	802c51e <create_name+0x252>
 802c510:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c512:	2b2e      	cmp	r3, #46	; 0x2e
 802c514:	d10a      	bne.n	802c52c <create_name+0x260>
 802c516:	69ba      	ldr	r2, [r7, #24]
 802c518:	697b      	ldr	r3, [r7, #20]
 802c51a:	429a      	cmp	r2, r3
 802c51c:	d006      	beq.n	802c52c <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 802c51e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c522:	f043 0303 	orr.w	r3, r3, #3
 802c526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802c52a:	e086      	b.n	802c63a <create_name+0x36e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 802c52c:	6a3a      	ldr	r2, [r7, #32]
 802c52e:	69fb      	ldr	r3, [r7, #28]
 802c530:	429a      	cmp	r2, r3
 802c532:	d203      	bcs.n	802c53c <create_name+0x270>
 802c534:	69ba      	ldr	r2, [r7, #24]
 802c536:	697b      	ldr	r3, [r7, #20]
 802c538:	429a      	cmp	r2, r3
 802c53a:	d123      	bne.n	802c584 <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 802c53c:	69fb      	ldr	r3, [r7, #28]
 802c53e:	2b0b      	cmp	r3, #11
 802c540:	d106      	bne.n	802c550 <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 802c542:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c546:	f043 0303 	orr.w	r3, r3, #3
 802c54a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802c54e:	e078      	b.n	802c642 <create_name+0x376>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 802c550:	69ba      	ldr	r2, [r7, #24]
 802c552:	697b      	ldr	r3, [r7, #20]
 802c554:	429a      	cmp	r2, r3
 802c556:	d005      	beq.n	802c564 <create_name+0x298>
 802c558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c55c:	f043 0303 	orr.w	r3, r3, #3
 802c560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 802c564:	69ba      	ldr	r2, [r7, #24]
 802c566:	697b      	ldr	r3, [r7, #20]
 802c568:	429a      	cmp	r2, r3
 802c56a:	d869      	bhi.n	802c640 <create_name+0x374>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 802c56c:	697b      	ldr	r3, [r7, #20]
 802c56e:	61bb      	str	r3, [r7, #24]
 802c570:	2308      	movs	r3, #8
 802c572:	623b      	str	r3, [r7, #32]
 802c574:	230b      	movs	r3, #11
 802c576:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 802c578:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802c57c:	009b      	lsls	r3, r3, #2
 802c57e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 802c582:	e05a      	b.n	802c63a <create_name+0x36e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 802c584:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c586:	2b7f      	cmp	r3, #127	; 0x7f
 802c588:	d914      	bls.n	802c5b4 <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 802c58a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c58c:	2100      	movs	r1, #0
 802c58e:	4618      	mov	r0, r3
 802c590:	f000 ffe4 	bl	802d55c <ff_convert>
 802c594:	4603      	mov	r3, r0
 802c596:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 802c598:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c59a:	2b00      	cmp	r3, #0
 802c59c:	d004      	beq.n	802c5a8 <create_name+0x2dc>
 802c59e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c5a0:	3b80      	subs	r3, #128	; 0x80
 802c5a2:	4a17      	ldr	r2, [pc, #92]	; (802c600 <create_name+0x334>)
 802c5a4:	5cd3      	ldrb	r3, [r2, r3]
 802c5a6:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 802c5a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c5ac:	f043 0302 	orr.w	r3, r3, #2
 802c5b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 802c5b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c5b6:	2b00      	cmp	r3, #0
 802c5b8:	d007      	beq.n	802c5ca <create_name+0x2fe>
 802c5ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c5bc:	4619      	mov	r1, r3
 802c5be:	4811      	ldr	r0, [pc, #68]	; (802c604 <create_name+0x338>)
 802c5c0:	f7fe fb50 	bl	802ac64 <chk_chr>
 802c5c4:	4603      	mov	r3, r0
 802c5c6:	2b00      	cmp	r3, #0
 802c5c8:	d008      	beq.n	802c5dc <create_name+0x310>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 802c5ca:	235f      	movs	r3, #95	; 0x5f
 802c5cc:	84bb      	strh	r3, [r7, #36]	; 0x24
 802c5ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c5d2:	f043 0303 	orr.w	r3, r3, #3
 802c5d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802c5da:	e024      	b.n	802c626 <create_name+0x35a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 802c5dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c5de:	2b40      	cmp	r3, #64	; 0x40
 802c5e0:	d912      	bls.n	802c608 <create_name+0x33c>
 802c5e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c5e4:	2b5a      	cmp	r3, #90	; 0x5a
 802c5e6:	d80f      	bhi.n	802c608 <create_name+0x33c>
					b |= 2;
 802c5e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802c5ec:	f043 0302 	orr.w	r3, r3, #2
 802c5f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 802c5f4:	e017      	b.n	802c626 <create_name+0x35a>
 802c5f6:	bf00      	nop
 802c5f8:	0802d93c 	.word	0x0802d93c
 802c5fc:	7ffffffe 	.word	0x7ffffffe
 802c600:	08030fd4 	.word	0x08030fd4
 802c604:	0802d948 	.word	0x0802d948
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 802c608:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c60a:	2b60      	cmp	r3, #96	; 0x60
 802c60c:	d90b      	bls.n	802c626 <create_name+0x35a>
 802c60e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c610:	2b7a      	cmp	r3, #122	; 0x7a
 802c612:	d808      	bhi.n	802c626 <create_name+0x35a>
						b |= 1; w -= 0x20;
 802c614:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802c618:	f043 0301 	orr.w	r3, r3, #1
 802c61c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 802c620:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802c622:	3b20      	subs	r3, #32
 802c624:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 802c626:	6a3b      	ldr	r3, [r7, #32]
 802c628:	1c5a      	adds	r2, r3, #1
 802c62a:	623a      	str	r2, [r7, #32]
 802c62c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802c62e:	b2d1      	uxtb	r1, r2
 802c630:	687a      	ldr	r2, [r7, #4]
 802c632:	4413      	add	r3, r2
 802c634:	460a      	mov	r2, r1
 802c636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 802c63a:	e75a      	b.n	802c4f2 <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 802c63c:	bf00      	nop
 802c63e:	e000      	b.n	802c642 <create_name+0x376>
			if (si > di) break;			/* No extension */
 802c640:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 802c642:	687b      	ldr	r3, [r7, #4]
 802c644:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 802c648:	2be5      	cmp	r3, #229	; 0xe5
 802c64a:	d103      	bne.n	802c654 <create_name+0x388>
 802c64c:	687b      	ldr	r3, [r7, #4]
 802c64e:	2205      	movs	r2, #5
 802c650:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 802c654:	69fb      	ldr	r3, [r7, #28]
 802c656:	2b08      	cmp	r3, #8
 802c658:	d104      	bne.n	802c664 <create_name+0x398>
 802c65a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802c65e:	009b      	lsls	r3, r3, #2
 802c660:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 802c664:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802c668:	f003 030c 	and.w	r3, r3, #12
 802c66c:	2b0c      	cmp	r3, #12
 802c66e:	d005      	beq.n	802c67c <create_name+0x3b0>
 802c670:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802c674:	f003 0303 	and.w	r3, r3, #3
 802c678:	2b03      	cmp	r3, #3
 802c67a:	d105      	bne.n	802c688 <create_name+0x3bc>
 802c67c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c680:	f043 0302 	orr.w	r3, r3, #2
 802c684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 802c688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c68c:	f003 0302 	and.w	r3, r3, #2
 802c690:	2b00      	cmp	r3, #0
 802c692:	d117      	bne.n	802c6c4 <create_name+0x3f8>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 802c694:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802c698:	f003 0303 	and.w	r3, r3, #3
 802c69c:	2b01      	cmp	r3, #1
 802c69e:	d105      	bne.n	802c6ac <create_name+0x3e0>
 802c6a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c6a4:	f043 0310 	orr.w	r3, r3, #16
 802c6a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 802c6ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802c6b0:	f003 030c 	and.w	r3, r3, #12
 802c6b4:	2b04      	cmp	r3, #4
 802c6b6:	d105      	bne.n	802c6c4 <create_name+0x3f8>
 802c6b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c6bc:	f043 0308 	orr.w	r3, r3, #8
 802c6c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 802c6c4:	687b      	ldr	r3, [r7, #4]
 802c6c6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802c6ca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 802c6ce:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 802c6d0:	4618      	mov	r0, r3
 802c6d2:	3728      	adds	r7, #40	; 0x28
 802c6d4:	46bd      	mov	sp, r7
 802c6d6:	bd80      	pop	{r7, pc}

0802c6d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 802c6d8:	b580      	push	{r7, lr}
 802c6da:	b086      	sub	sp, #24
 802c6dc:	af00      	add	r7, sp, #0
 802c6de:	6078      	str	r0, [r7, #4]
 802c6e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 802c6e2:	687b      	ldr	r3, [r7, #4]
 802c6e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 802c6e6:	693b      	ldr	r3, [r7, #16]
 802c6e8:	681b      	ldr	r3, [r3, #0]
 802c6ea:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 802c6ec:	683b      	ldr	r3, [r7, #0]
 802c6ee:	781b      	ldrb	r3, [r3, #0]
 802c6f0:	2b2f      	cmp	r3, #47	; 0x2f
 802c6f2:	d00b      	beq.n	802c70c <follow_path+0x34>
 802c6f4:	683b      	ldr	r3, [r7, #0]
 802c6f6:	781b      	ldrb	r3, [r3, #0]
 802c6f8:	2b5c      	cmp	r3, #92	; 0x5c
 802c6fa:	d007      	beq.n	802c70c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 802c6fc:	68fb      	ldr	r3, [r7, #12]
 802c6fe:	69da      	ldr	r2, [r3, #28]
 802c700:	693b      	ldr	r3, [r7, #16]
 802c702:	609a      	str	r2, [r3, #8]
 802c704:	e00d      	b.n	802c722 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 802c706:	683b      	ldr	r3, [r7, #0]
 802c708:	3301      	adds	r3, #1
 802c70a:	603b      	str	r3, [r7, #0]
 802c70c:	683b      	ldr	r3, [r7, #0]
 802c70e:	781b      	ldrb	r3, [r3, #0]
 802c710:	2b2f      	cmp	r3, #47	; 0x2f
 802c712:	d0f8      	beq.n	802c706 <follow_path+0x2e>
 802c714:	683b      	ldr	r3, [r7, #0]
 802c716:	781b      	ldrb	r3, [r3, #0]
 802c718:	2b5c      	cmp	r3, #92	; 0x5c
 802c71a:	d0f4      	beq.n	802c706 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 802c71c:	693b      	ldr	r3, [r7, #16]
 802c71e:	2200      	movs	r2, #0
 802c720:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 802c722:	683b      	ldr	r3, [r7, #0]
 802c724:	781b      	ldrb	r3, [r3, #0]
 802c726:	2b1f      	cmp	r3, #31
 802c728:	d80a      	bhi.n	802c740 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 802c72a:	687b      	ldr	r3, [r7, #4]
 802c72c:	2280      	movs	r2, #128	; 0x80
 802c72e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 802c732:	2100      	movs	r1, #0
 802c734:	6878      	ldr	r0, [r7, #4]
 802c736:	f7fe feba 	bl	802b4ae <dir_sdi>
 802c73a:	4603      	mov	r3, r0
 802c73c:	75fb      	strb	r3, [r7, #23]
 802c73e:	e05b      	b.n	802c7f8 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 802c740:	463b      	mov	r3, r7
 802c742:	4619      	mov	r1, r3
 802c744:	6878      	ldr	r0, [r7, #4]
 802c746:	f7ff fdc1 	bl	802c2cc <create_name>
 802c74a:	4603      	mov	r3, r0
 802c74c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 802c74e:	7dfb      	ldrb	r3, [r7, #23]
 802c750:	2b00      	cmp	r3, #0
 802c752:	d14c      	bne.n	802c7ee <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 802c754:	6878      	ldr	r0, [r7, #4]
 802c756:	f7ff fb23 	bl	802bda0 <dir_find>
 802c75a:	4603      	mov	r3, r0
 802c75c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 802c75e:	687b      	ldr	r3, [r7, #4]
 802c760:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 802c764:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 802c766:	7dfb      	ldrb	r3, [r7, #23]
 802c768:	2b00      	cmp	r3, #0
 802c76a:	d01b      	beq.n	802c7a4 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 802c76c:	7dfb      	ldrb	r3, [r7, #23]
 802c76e:	2b04      	cmp	r3, #4
 802c770:	d13f      	bne.n	802c7f2 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 802c772:	7afb      	ldrb	r3, [r7, #11]
 802c774:	f003 0320 	and.w	r3, r3, #32
 802c778:	2b00      	cmp	r3, #0
 802c77a:	d00b      	beq.n	802c794 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 802c77c:	7afb      	ldrb	r3, [r7, #11]
 802c77e:	f003 0304 	and.w	r3, r3, #4
 802c782:	2b00      	cmp	r3, #0
 802c784:	d031      	beq.n	802c7ea <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 802c786:	687b      	ldr	r3, [r7, #4]
 802c788:	2280      	movs	r2, #128	; 0x80
 802c78a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 802c78e:	2300      	movs	r3, #0
 802c790:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 802c792:	e02e      	b.n	802c7f2 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 802c794:	7afb      	ldrb	r3, [r7, #11]
 802c796:	f003 0304 	and.w	r3, r3, #4
 802c79a:	2b00      	cmp	r3, #0
 802c79c:	d129      	bne.n	802c7f2 <follow_path+0x11a>
 802c79e:	2305      	movs	r3, #5
 802c7a0:	75fb      	strb	r3, [r7, #23]
				break;
 802c7a2:	e026      	b.n	802c7f2 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 802c7a4:	7afb      	ldrb	r3, [r7, #11]
 802c7a6:	f003 0304 	and.w	r3, r3, #4
 802c7aa:	2b00      	cmp	r3, #0
 802c7ac:	d123      	bne.n	802c7f6 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 802c7ae:	693b      	ldr	r3, [r7, #16]
 802c7b0:	799b      	ldrb	r3, [r3, #6]
 802c7b2:	f003 0310 	and.w	r3, r3, #16
 802c7b6:	2b00      	cmp	r3, #0
 802c7b8:	d102      	bne.n	802c7c0 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 802c7ba:	2305      	movs	r3, #5
 802c7bc:	75fb      	strb	r3, [r7, #23]
 802c7be:	e01b      	b.n	802c7f8 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 802c7c0:	68fb      	ldr	r3, [r7, #12]
 802c7c2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 802c7c6:	687b      	ldr	r3, [r7, #4]
 802c7c8:	695b      	ldr	r3, [r3, #20]
 802c7ca:	68fa      	ldr	r2, [r7, #12]
 802c7cc:	8992      	ldrh	r2, [r2, #12]
 802c7ce:	fbb3 f0f2 	udiv	r0, r3, r2
 802c7d2:	fb02 f200 	mul.w	r2, r2, r0
 802c7d6:	1a9b      	subs	r3, r3, r2
 802c7d8:	440b      	add	r3, r1
 802c7da:	4619      	mov	r1, r3
 802c7dc:	68f8      	ldr	r0, [r7, #12]
 802c7de:	f7ff f80c 	bl	802b7fa <ld_clust>
 802c7e2:	4602      	mov	r2, r0
 802c7e4:	693b      	ldr	r3, [r7, #16]
 802c7e6:	609a      	str	r2, [r3, #8]
 802c7e8:	e7aa      	b.n	802c740 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 802c7ea:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 802c7ec:	e7a8      	b.n	802c740 <follow_path+0x68>
			if (res != FR_OK) break;
 802c7ee:	bf00      	nop
 802c7f0:	e002      	b.n	802c7f8 <follow_path+0x120>
				break;
 802c7f2:	bf00      	nop
 802c7f4:	e000      	b.n	802c7f8 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 802c7f6:	bf00      	nop
			}
		}
	}

	return res;
 802c7f8:	7dfb      	ldrb	r3, [r7, #23]
}
 802c7fa:	4618      	mov	r0, r3
 802c7fc:	3718      	adds	r7, #24
 802c7fe:	46bd      	mov	sp, r7
 802c800:	bd80      	pop	{r7, pc}

0802c802 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 802c802:	b480      	push	{r7}
 802c804:	b087      	sub	sp, #28
 802c806:	af00      	add	r7, sp, #0
 802c808:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 802c80a:	f04f 33ff 	mov.w	r3, #4294967295
 802c80e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 802c810:	687b      	ldr	r3, [r7, #4]
 802c812:	681b      	ldr	r3, [r3, #0]
 802c814:	2b00      	cmp	r3, #0
 802c816:	d031      	beq.n	802c87c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 802c818:	687b      	ldr	r3, [r7, #4]
 802c81a:	681b      	ldr	r3, [r3, #0]
 802c81c:	617b      	str	r3, [r7, #20]
 802c81e:	e002      	b.n	802c826 <get_ldnumber+0x24>
 802c820:	697b      	ldr	r3, [r7, #20]
 802c822:	3301      	adds	r3, #1
 802c824:	617b      	str	r3, [r7, #20]
 802c826:	697b      	ldr	r3, [r7, #20]
 802c828:	781b      	ldrb	r3, [r3, #0]
 802c82a:	2b1f      	cmp	r3, #31
 802c82c:	d903      	bls.n	802c836 <get_ldnumber+0x34>
 802c82e:	697b      	ldr	r3, [r7, #20]
 802c830:	781b      	ldrb	r3, [r3, #0]
 802c832:	2b3a      	cmp	r3, #58	; 0x3a
 802c834:	d1f4      	bne.n	802c820 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 802c836:	697b      	ldr	r3, [r7, #20]
 802c838:	781b      	ldrb	r3, [r3, #0]
 802c83a:	2b3a      	cmp	r3, #58	; 0x3a
 802c83c:	d11c      	bne.n	802c878 <get_ldnumber+0x76>
			tp = *path;
 802c83e:	687b      	ldr	r3, [r7, #4]
 802c840:	681b      	ldr	r3, [r3, #0]
 802c842:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 802c844:	68fb      	ldr	r3, [r7, #12]
 802c846:	1c5a      	adds	r2, r3, #1
 802c848:	60fa      	str	r2, [r7, #12]
 802c84a:	781b      	ldrb	r3, [r3, #0]
 802c84c:	3b30      	subs	r3, #48	; 0x30
 802c84e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 802c850:	68bb      	ldr	r3, [r7, #8]
 802c852:	2b09      	cmp	r3, #9
 802c854:	d80e      	bhi.n	802c874 <get_ldnumber+0x72>
 802c856:	68fa      	ldr	r2, [r7, #12]
 802c858:	697b      	ldr	r3, [r7, #20]
 802c85a:	429a      	cmp	r2, r3
 802c85c:	d10a      	bne.n	802c874 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 802c85e:	68bb      	ldr	r3, [r7, #8]
 802c860:	2b00      	cmp	r3, #0
 802c862:	d107      	bne.n	802c874 <get_ldnumber+0x72>
					vol = (int)i;
 802c864:	68bb      	ldr	r3, [r7, #8]
 802c866:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 802c868:	697b      	ldr	r3, [r7, #20]
 802c86a:	3301      	adds	r3, #1
 802c86c:	617b      	str	r3, [r7, #20]
 802c86e:	687b      	ldr	r3, [r7, #4]
 802c870:	697a      	ldr	r2, [r7, #20]
 802c872:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 802c874:	693b      	ldr	r3, [r7, #16]
 802c876:	e002      	b.n	802c87e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 802c878:	2300      	movs	r3, #0
 802c87a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 802c87c:	693b      	ldr	r3, [r7, #16]
}
 802c87e:	4618      	mov	r0, r3
 802c880:	371c      	adds	r7, #28
 802c882:	46bd      	mov	sp, r7
 802c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c888:	4770      	bx	lr
	...

0802c88c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 802c88c:	b580      	push	{r7, lr}
 802c88e:	b082      	sub	sp, #8
 802c890:	af00      	add	r7, sp, #0
 802c892:	6078      	str	r0, [r7, #4]
 802c894:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 802c896:	687b      	ldr	r3, [r7, #4]
 802c898:	2200      	movs	r2, #0
 802c89a:	70da      	strb	r2, [r3, #3]
 802c89c:	687b      	ldr	r3, [r7, #4]
 802c89e:	f04f 32ff 	mov.w	r2, #4294967295
 802c8a2:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 802c8a4:	6839      	ldr	r1, [r7, #0]
 802c8a6:	6878      	ldr	r0, [r7, #4]
 802c8a8:	f7fe fa60 	bl	802ad6c <move_window>
 802c8ac:	4603      	mov	r3, r0
 802c8ae:	2b00      	cmp	r3, #0
 802c8b0:	d001      	beq.n	802c8b6 <check_fs+0x2a>
 802c8b2:	2304      	movs	r3, #4
 802c8b4:	e038      	b.n	802c928 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 802c8b6:	687b      	ldr	r3, [r7, #4]
 802c8b8:	333c      	adds	r3, #60	; 0x3c
 802c8ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 802c8be:	4618      	mov	r0, r3
 802c8c0:	f7fe f8ec 	bl	802aa9c <ld_word>
 802c8c4:	4603      	mov	r3, r0
 802c8c6:	461a      	mov	r2, r3
 802c8c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 802c8cc:	429a      	cmp	r2, r3
 802c8ce:	d001      	beq.n	802c8d4 <check_fs+0x48>
 802c8d0:	2303      	movs	r3, #3
 802c8d2:	e029      	b.n	802c928 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 802c8d4:	687b      	ldr	r3, [r7, #4]
 802c8d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802c8da:	2be9      	cmp	r3, #233	; 0xe9
 802c8dc:	d009      	beq.n	802c8f2 <check_fs+0x66>
 802c8de:	687b      	ldr	r3, [r7, #4]
 802c8e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802c8e4:	2beb      	cmp	r3, #235	; 0xeb
 802c8e6:	d11e      	bne.n	802c926 <check_fs+0x9a>
 802c8e8:	687b      	ldr	r3, [r7, #4]
 802c8ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802c8ee:	2b90      	cmp	r3, #144	; 0x90
 802c8f0:	d119      	bne.n	802c926 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 802c8f2:	687b      	ldr	r3, [r7, #4]
 802c8f4:	333c      	adds	r3, #60	; 0x3c
 802c8f6:	3336      	adds	r3, #54	; 0x36
 802c8f8:	4618      	mov	r0, r3
 802c8fa:	f7fe f8e7 	bl	802aacc <ld_dword>
 802c8fe:	4603      	mov	r3, r0
 802c900:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 802c904:	4a0a      	ldr	r2, [pc, #40]	; (802c930 <check_fs+0xa4>)
 802c906:	4293      	cmp	r3, r2
 802c908:	d101      	bne.n	802c90e <check_fs+0x82>
 802c90a:	2300      	movs	r3, #0
 802c90c:	e00c      	b.n	802c928 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 802c90e:	687b      	ldr	r3, [r7, #4]
 802c910:	333c      	adds	r3, #60	; 0x3c
 802c912:	3352      	adds	r3, #82	; 0x52
 802c914:	4618      	mov	r0, r3
 802c916:	f7fe f8d9 	bl	802aacc <ld_dword>
 802c91a:	4602      	mov	r2, r0
 802c91c:	4b05      	ldr	r3, [pc, #20]	; (802c934 <check_fs+0xa8>)
 802c91e:	429a      	cmp	r2, r3
 802c920:	d101      	bne.n	802c926 <check_fs+0x9a>
 802c922:	2300      	movs	r3, #0
 802c924:	e000      	b.n	802c928 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 802c926:	2302      	movs	r3, #2
}
 802c928:	4618      	mov	r0, r3
 802c92a:	3708      	adds	r7, #8
 802c92c:	46bd      	mov	sp, r7
 802c92e:	bd80      	pop	{r7, pc}
 802c930:	00544146 	.word	0x00544146
 802c934:	33544146 	.word	0x33544146

0802c938 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 802c938:	b580      	push	{r7, lr}
 802c93a:	b096      	sub	sp, #88	; 0x58
 802c93c:	af00      	add	r7, sp, #0
 802c93e:	60f8      	str	r0, [r7, #12]
 802c940:	60b9      	str	r1, [r7, #8]
 802c942:	4613      	mov	r3, r2
 802c944:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 802c946:	68bb      	ldr	r3, [r7, #8]
 802c948:	2200      	movs	r2, #0
 802c94a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 802c94c:	68f8      	ldr	r0, [r7, #12]
 802c94e:	f7ff ff58 	bl	802c802 <get_ldnumber>
 802c952:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 802c954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802c956:	2b00      	cmp	r3, #0
 802c958:	da01      	bge.n	802c95e <find_volume+0x26>
 802c95a:	230b      	movs	r3, #11
 802c95c:	e268      	b.n	802ce30 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 802c95e:	4ab0      	ldr	r2, [pc, #704]	; (802cc20 <find_volume+0x2e8>)
 802c960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802c962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802c966:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 802c968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c96a:	2b00      	cmp	r3, #0
 802c96c:	d101      	bne.n	802c972 <find_volume+0x3a>
 802c96e:	230c      	movs	r3, #12
 802c970:	e25e      	b.n	802ce30 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 802c972:	68bb      	ldr	r3, [r7, #8]
 802c974:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802c976:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 802c978:	79fb      	ldrb	r3, [r7, #7]
 802c97a:	f023 0301 	bic.w	r3, r3, #1
 802c97e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 802c980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c982:	781b      	ldrb	r3, [r3, #0]
 802c984:	2b00      	cmp	r3, #0
 802c986:	d01a      	beq.n	802c9be <find_volume+0x86>
		stat = disk_status(fs->drv);
 802c988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c98a:	785b      	ldrb	r3, [r3, #1]
 802c98c:	4618      	mov	r0, r3
 802c98e:	f7fd ffe7 	bl	802a960 <disk_status>
 802c992:	4603      	mov	r3, r0
 802c994:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 802c998:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802c99c:	f003 0301 	and.w	r3, r3, #1
 802c9a0:	2b00      	cmp	r3, #0
 802c9a2:	d10c      	bne.n	802c9be <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 802c9a4:	79fb      	ldrb	r3, [r7, #7]
 802c9a6:	2b00      	cmp	r3, #0
 802c9a8:	d007      	beq.n	802c9ba <find_volume+0x82>
 802c9aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802c9ae:	f003 0304 	and.w	r3, r3, #4
 802c9b2:	2b00      	cmp	r3, #0
 802c9b4:	d001      	beq.n	802c9ba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 802c9b6:	230a      	movs	r3, #10
 802c9b8:	e23a      	b.n	802ce30 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 802c9ba:	2300      	movs	r3, #0
 802c9bc:	e238      	b.n	802ce30 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 802c9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c9c0:	2200      	movs	r2, #0
 802c9c2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 802c9c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802c9c6:	b2da      	uxtb	r2, r3
 802c9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c9ca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 802c9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c9ce:	785b      	ldrb	r3, [r3, #1]
 802c9d0:	4618      	mov	r0, r3
 802c9d2:	f7fd ffdf 	bl	802a994 <disk_initialize>
 802c9d6:	4603      	mov	r3, r0
 802c9d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 802c9dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802c9e0:	f003 0301 	and.w	r3, r3, #1
 802c9e4:	2b00      	cmp	r3, #0
 802c9e6:	d001      	beq.n	802c9ec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 802c9e8:	2303      	movs	r3, #3
 802c9ea:	e221      	b.n	802ce30 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 802c9ec:	79fb      	ldrb	r3, [r7, #7]
 802c9ee:	2b00      	cmp	r3, #0
 802c9f0:	d007      	beq.n	802ca02 <find_volume+0xca>
 802c9f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802c9f6:	f003 0304 	and.w	r3, r3, #4
 802c9fa:	2b00      	cmp	r3, #0
 802c9fc:	d001      	beq.n	802ca02 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 802c9fe:	230a      	movs	r3, #10
 802ca00:	e216      	b.n	802ce30 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 802ca02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ca04:	7858      	ldrb	r0, [r3, #1]
 802ca06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ca08:	330c      	adds	r3, #12
 802ca0a:	461a      	mov	r2, r3
 802ca0c:	2102      	movs	r1, #2
 802ca0e:	f7fe f827 	bl	802aa60 <disk_ioctl>
 802ca12:	4603      	mov	r3, r0
 802ca14:	2b00      	cmp	r3, #0
 802ca16:	d001      	beq.n	802ca1c <find_volume+0xe4>
 802ca18:	2301      	movs	r3, #1
 802ca1a:	e209      	b.n	802ce30 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 802ca1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ca1e:	899b      	ldrh	r3, [r3, #12]
 802ca20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802ca24:	d80d      	bhi.n	802ca42 <find_volume+0x10a>
 802ca26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ca28:	899b      	ldrh	r3, [r3, #12]
 802ca2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802ca2e:	d308      	bcc.n	802ca42 <find_volume+0x10a>
 802ca30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ca32:	899b      	ldrh	r3, [r3, #12]
 802ca34:	461a      	mov	r2, r3
 802ca36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ca38:	899b      	ldrh	r3, [r3, #12]
 802ca3a:	3b01      	subs	r3, #1
 802ca3c:	4013      	ands	r3, r2
 802ca3e:	2b00      	cmp	r3, #0
 802ca40:	d001      	beq.n	802ca46 <find_volume+0x10e>
 802ca42:	2301      	movs	r3, #1
 802ca44:	e1f4      	b.n	802ce30 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 802ca46:	2300      	movs	r3, #0
 802ca48:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 802ca4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 802ca4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802ca4e:	f7ff ff1d 	bl	802c88c <check_fs>
 802ca52:	4603      	mov	r3, r0
 802ca54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 802ca58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 802ca5c:	2b02      	cmp	r3, #2
 802ca5e:	d14b      	bne.n	802caf8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 802ca60:	2300      	movs	r3, #0
 802ca62:	643b      	str	r3, [r7, #64]	; 0x40
 802ca64:	e01f      	b.n	802caa6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 802ca66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ca68:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 802ca6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802ca6e:	011b      	lsls	r3, r3, #4
 802ca70:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 802ca74:	4413      	add	r3, r2
 802ca76:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 802ca78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ca7a:	3304      	adds	r3, #4
 802ca7c:	781b      	ldrb	r3, [r3, #0]
 802ca7e:	2b00      	cmp	r3, #0
 802ca80:	d006      	beq.n	802ca90 <find_volume+0x158>
 802ca82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ca84:	3308      	adds	r3, #8
 802ca86:	4618      	mov	r0, r3
 802ca88:	f7fe f820 	bl	802aacc <ld_dword>
 802ca8c:	4602      	mov	r2, r0
 802ca8e:	e000      	b.n	802ca92 <find_volume+0x15a>
 802ca90:	2200      	movs	r2, #0
 802ca92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802ca94:	009b      	lsls	r3, r3, #2
 802ca96:	f107 0158 	add.w	r1, r7, #88	; 0x58
 802ca9a:	440b      	add	r3, r1
 802ca9c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 802caa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802caa2:	3301      	adds	r3, #1
 802caa4:	643b      	str	r3, [r7, #64]	; 0x40
 802caa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802caa8:	2b03      	cmp	r3, #3
 802caaa:	d9dc      	bls.n	802ca66 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 802caac:	2300      	movs	r3, #0
 802caae:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 802cab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802cab2:	2b00      	cmp	r3, #0
 802cab4:	d002      	beq.n	802cabc <find_volume+0x184>
 802cab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802cab8:	3b01      	subs	r3, #1
 802caba:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 802cabc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802cabe:	009b      	lsls	r3, r3, #2
 802cac0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 802cac4:	4413      	add	r3, r2
 802cac6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 802caca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 802cacc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802cace:	2b00      	cmp	r3, #0
 802cad0:	d005      	beq.n	802cade <find_volume+0x1a6>
 802cad2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 802cad4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802cad6:	f7ff fed9 	bl	802c88c <check_fs>
 802cada:	4603      	mov	r3, r0
 802cadc:	e000      	b.n	802cae0 <find_volume+0x1a8>
 802cade:	2303      	movs	r3, #3
 802cae0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 802cae4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 802cae8:	2b01      	cmp	r3, #1
 802caea:	d905      	bls.n	802caf8 <find_volume+0x1c0>
 802caec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802caee:	3301      	adds	r3, #1
 802caf0:	643b      	str	r3, [r7, #64]	; 0x40
 802caf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802caf4:	2b03      	cmp	r3, #3
 802caf6:	d9e1      	bls.n	802cabc <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 802caf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 802cafc:	2b04      	cmp	r3, #4
 802cafe:	d101      	bne.n	802cb04 <find_volume+0x1cc>
 802cb00:	2301      	movs	r3, #1
 802cb02:	e195      	b.n	802ce30 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 802cb04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 802cb08:	2b01      	cmp	r3, #1
 802cb0a:	d901      	bls.n	802cb10 <find_volume+0x1d8>
 802cb0c:	230d      	movs	r3, #13
 802cb0e:	e18f      	b.n	802ce30 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 802cb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cb12:	333c      	adds	r3, #60	; 0x3c
 802cb14:	330b      	adds	r3, #11
 802cb16:	4618      	mov	r0, r3
 802cb18:	f7fd ffc0 	bl	802aa9c <ld_word>
 802cb1c:	4603      	mov	r3, r0
 802cb1e:	461a      	mov	r2, r3
 802cb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cb22:	899b      	ldrh	r3, [r3, #12]
 802cb24:	429a      	cmp	r2, r3
 802cb26:	d001      	beq.n	802cb2c <find_volume+0x1f4>
 802cb28:	230d      	movs	r3, #13
 802cb2a:	e181      	b.n	802ce30 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 802cb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cb2e:	333c      	adds	r3, #60	; 0x3c
 802cb30:	3316      	adds	r3, #22
 802cb32:	4618      	mov	r0, r3
 802cb34:	f7fd ffb2 	bl	802aa9c <ld_word>
 802cb38:	4603      	mov	r3, r0
 802cb3a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 802cb3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802cb3e:	2b00      	cmp	r3, #0
 802cb40:	d106      	bne.n	802cb50 <find_volume+0x218>
 802cb42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cb44:	333c      	adds	r3, #60	; 0x3c
 802cb46:	3324      	adds	r3, #36	; 0x24
 802cb48:	4618      	mov	r0, r3
 802cb4a:	f7fd ffbf 	bl	802aacc <ld_dword>
 802cb4e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 802cb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cb52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802cb54:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 802cb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cb58:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 802cb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cb5e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 802cb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cb62:	789b      	ldrb	r3, [r3, #2]
 802cb64:	2b01      	cmp	r3, #1
 802cb66:	d005      	beq.n	802cb74 <find_volume+0x23c>
 802cb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cb6a:	789b      	ldrb	r3, [r3, #2]
 802cb6c:	2b02      	cmp	r3, #2
 802cb6e:	d001      	beq.n	802cb74 <find_volume+0x23c>
 802cb70:	230d      	movs	r3, #13
 802cb72:	e15d      	b.n	802ce30 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 802cb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cb76:	789b      	ldrb	r3, [r3, #2]
 802cb78:	461a      	mov	r2, r3
 802cb7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802cb7c:	fb02 f303 	mul.w	r3, r2, r3
 802cb80:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 802cb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cb84:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 802cb88:	b29a      	uxth	r2, r3
 802cb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cb8c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 802cb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cb90:	895b      	ldrh	r3, [r3, #10]
 802cb92:	2b00      	cmp	r3, #0
 802cb94:	d008      	beq.n	802cba8 <find_volume+0x270>
 802cb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cb98:	895b      	ldrh	r3, [r3, #10]
 802cb9a:	461a      	mov	r2, r3
 802cb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cb9e:	895b      	ldrh	r3, [r3, #10]
 802cba0:	3b01      	subs	r3, #1
 802cba2:	4013      	ands	r3, r2
 802cba4:	2b00      	cmp	r3, #0
 802cba6:	d001      	beq.n	802cbac <find_volume+0x274>
 802cba8:	230d      	movs	r3, #13
 802cbaa:	e141      	b.n	802ce30 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 802cbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cbae:	333c      	adds	r3, #60	; 0x3c
 802cbb0:	3311      	adds	r3, #17
 802cbb2:	4618      	mov	r0, r3
 802cbb4:	f7fd ff72 	bl	802aa9c <ld_word>
 802cbb8:	4603      	mov	r3, r0
 802cbba:	461a      	mov	r2, r3
 802cbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cbbe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 802cbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cbc2:	891b      	ldrh	r3, [r3, #8]
 802cbc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802cbc6:	8992      	ldrh	r2, [r2, #12]
 802cbc8:	0952      	lsrs	r2, r2, #5
 802cbca:	b292      	uxth	r2, r2
 802cbcc:	fbb3 f1f2 	udiv	r1, r3, r2
 802cbd0:	fb02 f201 	mul.w	r2, r2, r1
 802cbd4:	1a9b      	subs	r3, r3, r2
 802cbd6:	b29b      	uxth	r3, r3
 802cbd8:	2b00      	cmp	r3, #0
 802cbda:	d001      	beq.n	802cbe0 <find_volume+0x2a8>
 802cbdc:	230d      	movs	r3, #13
 802cbde:	e127      	b.n	802ce30 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 802cbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cbe2:	333c      	adds	r3, #60	; 0x3c
 802cbe4:	3313      	adds	r3, #19
 802cbe6:	4618      	mov	r0, r3
 802cbe8:	f7fd ff58 	bl	802aa9c <ld_word>
 802cbec:	4603      	mov	r3, r0
 802cbee:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 802cbf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802cbf2:	2b00      	cmp	r3, #0
 802cbf4:	d106      	bne.n	802cc04 <find_volume+0x2cc>
 802cbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cbf8:	333c      	adds	r3, #60	; 0x3c
 802cbfa:	3320      	adds	r3, #32
 802cbfc:	4618      	mov	r0, r3
 802cbfe:	f7fd ff65 	bl	802aacc <ld_dword>
 802cc02:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 802cc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cc06:	333c      	adds	r3, #60	; 0x3c
 802cc08:	330e      	adds	r3, #14
 802cc0a:	4618      	mov	r0, r3
 802cc0c:	f7fd ff46 	bl	802aa9c <ld_word>
 802cc10:	4603      	mov	r3, r0
 802cc12:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 802cc14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802cc16:	2b00      	cmp	r3, #0
 802cc18:	d104      	bne.n	802cc24 <find_volume+0x2ec>
 802cc1a:	230d      	movs	r3, #13
 802cc1c:	e108      	b.n	802ce30 <find_volume+0x4f8>
 802cc1e:	bf00      	nop
 802cc20:	200214a0 	.word	0x200214a0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 802cc24:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 802cc26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802cc28:	4413      	add	r3, r2
 802cc2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802cc2c:	8911      	ldrh	r1, [r2, #8]
 802cc2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802cc30:	8992      	ldrh	r2, [r2, #12]
 802cc32:	0952      	lsrs	r2, r2, #5
 802cc34:	b292      	uxth	r2, r2
 802cc36:	fbb1 f2f2 	udiv	r2, r1, r2
 802cc3a:	b292      	uxth	r2, r2
 802cc3c:	4413      	add	r3, r2
 802cc3e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 802cc40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802cc42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802cc44:	429a      	cmp	r2, r3
 802cc46:	d201      	bcs.n	802cc4c <find_volume+0x314>
 802cc48:	230d      	movs	r3, #13
 802cc4a:	e0f1      	b.n	802ce30 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 802cc4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802cc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802cc50:	1ad3      	subs	r3, r2, r3
 802cc52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802cc54:	8952      	ldrh	r2, [r2, #10]
 802cc56:	fbb3 f3f2 	udiv	r3, r3, r2
 802cc5a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 802cc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cc5e:	2b00      	cmp	r3, #0
 802cc60:	d101      	bne.n	802cc66 <find_volume+0x32e>
 802cc62:	230d      	movs	r3, #13
 802cc64:	e0e4      	b.n	802ce30 <find_volume+0x4f8>
		fmt = FS_FAT32;
 802cc66:	2303      	movs	r3, #3
 802cc68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 802cc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cc6e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 802cc72:	4293      	cmp	r3, r2
 802cc74:	d802      	bhi.n	802cc7c <find_volume+0x344>
 802cc76:	2302      	movs	r3, #2
 802cc78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 802cc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cc7e:	f640 72f5 	movw	r2, #4085	; 0xff5
 802cc82:	4293      	cmp	r3, r2
 802cc84:	d802      	bhi.n	802cc8c <find_volume+0x354>
 802cc86:	2301      	movs	r3, #1
 802cc88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 802cc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cc8e:	1c9a      	adds	r2, r3, #2
 802cc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cc92:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 802cc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cc96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802cc98:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 802cc9a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 802cc9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802cc9e:	441a      	add	r2, r3
 802cca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cca2:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 802cca4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802cca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802cca8:	441a      	add	r2, r3
 802ccaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ccac:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 802ccae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 802ccb2:	2b03      	cmp	r3, #3
 802ccb4:	d11e      	bne.n	802ccf4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 802ccb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ccb8:	333c      	adds	r3, #60	; 0x3c
 802ccba:	332a      	adds	r3, #42	; 0x2a
 802ccbc:	4618      	mov	r0, r3
 802ccbe:	f7fd feed 	bl	802aa9c <ld_word>
 802ccc2:	4603      	mov	r3, r0
 802ccc4:	2b00      	cmp	r3, #0
 802ccc6:	d001      	beq.n	802cccc <find_volume+0x394>
 802ccc8:	230d      	movs	r3, #13
 802ccca:	e0b1      	b.n	802ce30 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 802cccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ccce:	891b      	ldrh	r3, [r3, #8]
 802ccd0:	2b00      	cmp	r3, #0
 802ccd2:	d001      	beq.n	802ccd8 <find_volume+0x3a0>
 802ccd4:	230d      	movs	r3, #13
 802ccd6:	e0ab      	b.n	802ce30 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 802ccd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ccda:	333c      	adds	r3, #60	; 0x3c
 802ccdc:	332c      	adds	r3, #44	; 0x2c
 802ccde:	4618      	mov	r0, r3
 802cce0:	f7fd fef4 	bl	802aacc <ld_dword>
 802cce4:	4602      	mov	r2, r0
 802cce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cce8:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 802ccea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ccec:	6a1b      	ldr	r3, [r3, #32]
 802ccee:	009b      	lsls	r3, r3, #2
 802ccf0:	647b      	str	r3, [r7, #68]	; 0x44
 802ccf2:	e01f      	b.n	802cd34 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 802ccf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ccf6:	891b      	ldrh	r3, [r3, #8]
 802ccf8:	2b00      	cmp	r3, #0
 802ccfa:	d101      	bne.n	802cd00 <find_volume+0x3c8>
 802ccfc:	230d      	movs	r3, #13
 802ccfe:	e097      	b.n	802ce30 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 802cd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cd02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802cd04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802cd06:	441a      	add	r2, r3
 802cd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cd0a:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 802cd0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 802cd10:	2b02      	cmp	r3, #2
 802cd12:	d103      	bne.n	802cd1c <find_volume+0x3e4>
 802cd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cd16:	6a1b      	ldr	r3, [r3, #32]
 802cd18:	005b      	lsls	r3, r3, #1
 802cd1a:	e00a      	b.n	802cd32 <find_volume+0x3fa>
 802cd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cd1e:	6a1a      	ldr	r2, [r3, #32]
 802cd20:	4613      	mov	r3, r2
 802cd22:	005b      	lsls	r3, r3, #1
 802cd24:	4413      	add	r3, r2
 802cd26:	085a      	lsrs	r2, r3, #1
 802cd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cd2a:	6a1b      	ldr	r3, [r3, #32]
 802cd2c:	f003 0301 	and.w	r3, r3, #1
 802cd30:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 802cd32:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 802cd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cd36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802cd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cd3a:	899b      	ldrh	r3, [r3, #12]
 802cd3c:	4619      	mov	r1, r3
 802cd3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802cd40:	440b      	add	r3, r1
 802cd42:	3b01      	subs	r3, #1
 802cd44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 802cd46:	8989      	ldrh	r1, [r1, #12]
 802cd48:	fbb3 f3f1 	udiv	r3, r3, r1
 802cd4c:	429a      	cmp	r2, r3
 802cd4e:	d201      	bcs.n	802cd54 <find_volume+0x41c>
 802cd50:	230d      	movs	r3, #13
 802cd52:	e06d      	b.n	802ce30 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 802cd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cd56:	f04f 32ff 	mov.w	r2, #4294967295
 802cd5a:	619a      	str	r2, [r3, #24]
 802cd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cd5e:	699a      	ldr	r2, [r3, #24]
 802cd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cd62:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 802cd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cd66:	2280      	movs	r2, #128	; 0x80
 802cd68:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 802cd6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 802cd6e:	2b03      	cmp	r3, #3
 802cd70:	d149      	bne.n	802ce06 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 802cd72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cd74:	333c      	adds	r3, #60	; 0x3c
 802cd76:	3330      	adds	r3, #48	; 0x30
 802cd78:	4618      	mov	r0, r3
 802cd7a:	f7fd fe8f 	bl	802aa9c <ld_word>
 802cd7e:	4603      	mov	r3, r0
 802cd80:	2b01      	cmp	r3, #1
 802cd82:	d140      	bne.n	802ce06 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 802cd84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802cd86:	3301      	adds	r3, #1
 802cd88:	4619      	mov	r1, r3
 802cd8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802cd8c:	f7fd ffee 	bl	802ad6c <move_window>
 802cd90:	4603      	mov	r3, r0
 802cd92:	2b00      	cmp	r3, #0
 802cd94:	d137      	bne.n	802ce06 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 802cd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cd98:	2200      	movs	r2, #0
 802cd9a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 802cd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cd9e:	333c      	adds	r3, #60	; 0x3c
 802cda0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 802cda4:	4618      	mov	r0, r3
 802cda6:	f7fd fe79 	bl	802aa9c <ld_word>
 802cdaa:	4603      	mov	r3, r0
 802cdac:	461a      	mov	r2, r3
 802cdae:	f64a 2355 	movw	r3, #43605	; 0xaa55
 802cdb2:	429a      	cmp	r2, r3
 802cdb4:	d127      	bne.n	802ce06 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 802cdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cdb8:	333c      	adds	r3, #60	; 0x3c
 802cdba:	4618      	mov	r0, r3
 802cdbc:	f7fd fe86 	bl	802aacc <ld_dword>
 802cdc0:	4602      	mov	r2, r0
 802cdc2:	4b1d      	ldr	r3, [pc, #116]	; (802ce38 <find_volume+0x500>)
 802cdc4:	429a      	cmp	r2, r3
 802cdc6:	d11e      	bne.n	802ce06 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 802cdc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cdca:	333c      	adds	r3, #60	; 0x3c
 802cdcc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 802cdd0:	4618      	mov	r0, r3
 802cdd2:	f7fd fe7b 	bl	802aacc <ld_dword>
 802cdd6:	4602      	mov	r2, r0
 802cdd8:	4b18      	ldr	r3, [pc, #96]	; (802ce3c <find_volume+0x504>)
 802cdda:	429a      	cmp	r2, r3
 802cddc:	d113      	bne.n	802ce06 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 802cdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cde0:	333c      	adds	r3, #60	; 0x3c
 802cde2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 802cde6:	4618      	mov	r0, r3
 802cde8:	f7fd fe70 	bl	802aacc <ld_dword>
 802cdec:	4602      	mov	r2, r0
 802cdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cdf0:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 802cdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cdf4:	333c      	adds	r3, #60	; 0x3c
 802cdf6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 802cdfa:	4618      	mov	r0, r3
 802cdfc:	f7fd fe66 	bl	802aacc <ld_dword>
 802ce00:	4602      	mov	r2, r0
 802ce02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ce04:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 802ce06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ce08:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 802ce0c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 802ce0e:	4b0c      	ldr	r3, [pc, #48]	; (802ce40 <find_volume+0x508>)
 802ce10:	881b      	ldrh	r3, [r3, #0]
 802ce12:	3301      	adds	r3, #1
 802ce14:	b29a      	uxth	r2, r3
 802ce16:	4b0a      	ldr	r3, [pc, #40]	; (802ce40 <find_volume+0x508>)
 802ce18:	801a      	strh	r2, [r3, #0]
 802ce1a:	4b09      	ldr	r3, [pc, #36]	; (802ce40 <find_volume+0x508>)
 802ce1c:	881a      	ldrh	r2, [r3, #0]
 802ce1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ce20:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 802ce22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ce24:	2200      	movs	r2, #0
 802ce26:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 802ce28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 802ce2a:	f7fd ff37 	bl	802ac9c <clear_lock>
#endif
	return FR_OK;
 802ce2e:	2300      	movs	r3, #0
}
 802ce30:	4618      	mov	r0, r3
 802ce32:	3758      	adds	r7, #88	; 0x58
 802ce34:	46bd      	mov	sp, r7
 802ce36:	bd80      	pop	{r7, pc}
 802ce38:	41615252 	.word	0x41615252
 802ce3c:	61417272 	.word	0x61417272
 802ce40:	200214a4 	.word	0x200214a4

0802ce44 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 802ce44:	b580      	push	{r7, lr}
 802ce46:	b088      	sub	sp, #32
 802ce48:	af00      	add	r7, sp, #0
 802ce4a:	60f8      	str	r0, [r7, #12]
 802ce4c:	60b9      	str	r1, [r7, #8]
 802ce4e:	4613      	mov	r3, r2
 802ce50:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 802ce52:	68bb      	ldr	r3, [r7, #8]
 802ce54:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 802ce56:	f107 0310 	add.w	r3, r7, #16
 802ce5a:	4618      	mov	r0, r3
 802ce5c:	f7ff fcd1 	bl	802c802 <get_ldnumber>
 802ce60:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 802ce62:	69fb      	ldr	r3, [r7, #28]
 802ce64:	2b00      	cmp	r3, #0
 802ce66:	da01      	bge.n	802ce6c <f_mount+0x28>
 802ce68:	230b      	movs	r3, #11
 802ce6a:	e02b      	b.n	802cec4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 802ce6c:	4a17      	ldr	r2, [pc, #92]	; (802cecc <f_mount+0x88>)
 802ce6e:	69fb      	ldr	r3, [r7, #28]
 802ce70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802ce74:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 802ce76:	69bb      	ldr	r3, [r7, #24]
 802ce78:	2b00      	cmp	r3, #0
 802ce7a:	d005      	beq.n	802ce88 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 802ce7c:	69b8      	ldr	r0, [r7, #24]
 802ce7e:	f7fd ff0d 	bl	802ac9c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 802ce82:	69bb      	ldr	r3, [r7, #24]
 802ce84:	2200      	movs	r2, #0
 802ce86:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 802ce88:	68fb      	ldr	r3, [r7, #12]
 802ce8a:	2b00      	cmp	r3, #0
 802ce8c:	d002      	beq.n	802ce94 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 802ce8e:	68fb      	ldr	r3, [r7, #12]
 802ce90:	2200      	movs	r2, #0
 802ce92:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 802ce94:	68fa      	ldr	r2, [r7, #12]
 802ce96:	490d      	ldr	r1, [pc, #52]	; (802cecc <f_mount+0x88>)
 802ce98:	69fb      	ldr	r3, [r7, #28]
 802ce9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 802ce9e:	68fb      	ldr	r3, [r7, #12]
 802cea0:	2b00      	cmp	r3, #0
 802cea2:	d002      	beq.n	802ceaa <f_mount+0x66>
 802cea4:	79fb      	ldrb	r3, [r7, #7]
 802cea6:	2b01      	cmp	r3, #1
 802cea8:	d001      	beq.n	802ceae <f_mount+0x6a>
 802ceaa:	2300      	movs	r3, #0
 802ceac:	e00a      	b.n	802cec4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 802ceae:	f107 010c 	add.w	r1, r7, #12
 802ceb2:	f107 0308 	add.w	r3, r7, #8
 802ceb6:	2200      	movs	r2, #0
 802ceb8:	4618      	mov	r0, r3
 802ceba:	f7ff fd3d 	bl	802c938 <find_volume>
 802cebe:	4603      	mov	r3, r0
 802cec0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 802cec2:	7dfb      	ldrb	r3, [r7, #23]
}
 802cec4:	4618      	mov	r0, r3
 802cec6:	3720      	adds	r7, #32
 802cec8:	46bd      	mov	sp, r7
 802ceca:	bd80      	pop	{r7, pc}
 802cecc:	200214a0 	.word	0x200214a0

0802ced0 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 802ced0:	b590      	push	{r4, r7, lr}
 802ced2:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 802ced6:	af00      	add	r7, sp, #0
 802ced8:	1d3b      	adds	r3, r7, #4
 802ceda:	6018      	str	r0, [r3, #0]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 802cedc:	f507 7102 	add.w	r1, r7, #520	; 0x208
 802cee0:	1d3b      	adds	r3, r7, #4
 802cee2:	2200      	movs	r2, #0
 802cee4:	4618      	mov	r0, r3
 802cee6:	f7ff fd27 	bl	802c938 <find_volume>
 802ceea:	4603      	mov	r3, r0
 802ceec:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	if (res == FR_OK) {
 802cef0:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 802cef4:	2b00      	cmp	r3, #0
 802cef6:	d13f      	bne.n	802cf78 <f_chdir+0xa8>
		dj.obj.fs = fs;
 802cef8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 802cefc:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
		INIT_NAMBUF(fs);
 802cf00:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 802cf04:	f107 0208 	add.w	r2, r7, #8
 802cf08:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);		/* Follow the path */
 802cf0a:	1d3b      	adds	r3, r7, #4
 802cf0c:	681a      	ldr	r2, [r3, #0]
 802cf0e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 802cf12:	4611      	mov	r1, r2
 802cf14:	4618      	mov	r0, r3
 802cf16:	f7ff fbdf 	bl	802c6d8 <follow_path>
 802cf1a:	4603      	mov	r3, r0
 802cf1c:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
		if (res == FR_OK) {					/* Follow completed */
 802cf20:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 802cf24:	2b00      	cmp	r3, #0
 802cf26:	d120      	bne.n	802cf6a <f_chdir+0x9a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 802cf28:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 802cf2c:	b25b      	sxtb	r3, r3
 802cf2e:	2b00      	cmp	r3, #0
 802cf30:	da05      	bge.n	802cf3e <f_chdir+0x6e>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 802cf32:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 802cf36:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 802cf3a:	61da      	str	r2, [r3, #28]
 802cf3c:	e015      	b.n	802cf6a <f_chdir+0x9a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 802cf3e:	f897 3212 	ldrb.w	r3, [r7, #530]	; 0x212
 802cf42:	f003 0310 	and.w	r3, r3, #16
 802cf46:	2b00      	cmp	r3, #0
 802cf48:	d00c      	beq.n	802cf64 <f_chdir+0x94>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 802cf4a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 802cf4e:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 802cf52:	f8d7 4208 	ldr.w	r4, [r7, #520]	; 0x208
 802cf56:	4611      	mov	r1, r2
 802cf58:	4618      	mov	r0, r3
 802cf5a:	f7fe fc4e 	bl	802b7fa <ld_clust>
 802cf5e:	4603      	mov	r3, r0
 802cf60:	61e3      	str	r3, [r4, #28]
 802cf62:	e002      	b.n	802cf6a <f_chdir+0x9a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 802cf64:	2305      	movs	r3, #5
 802cf66:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 802cf6a:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 802cf6e:	2b04      	cmp	r3, #4
 802cf70:	d102      	bne.n	802cf78 <f_chdir+0xa8>
 802cf72:	2305      	movs	r3, #5
 802cf74:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	}

	LEAVE_FF(fs, res);
 802cf78:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
}
 802cf7c:	4618      	mov	r0, r3
 802cf7e:	f507 7713 	add.w	r7, r7, #588	; 0x24c
 802cf82:	46bd      	mov	sp, r7
 802cf84:	bd90      	pop	{r4, r7, pc}

0802cf86 <f_getcwd>:
#if _FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR* buff,	/* Pointer to the directory path */
	UINT len		/* Size of path */
)
{
 802cf86:	b580      	push	{r7, lr}
 802cf88:	f5ad 7d5c 	sub.w	sp, sp, #880	; 0x370
 802cf8c:	af00      	add	r7, sp, #0
 802cf8e:	1d3b      	adds	r3, r7, #4
 802cf90:	6018      	str	r0, [r3, #0]
 802cf92:	463b      	mov	r3, r7
 802cf94:	6019      	str	r1, [r3, #0]
	TCHAR *tp;
	FILINFO fno;
	DEF_NAMBUF


	*buff = 0;
 802cf96:	1d3b      	adds	r3, r7, #4
 802cf98:	681b      	ldr	r3, [r3, #0]
 802cf9a:	2200      	movs	r2, #0
 802cf9c:	701a      	strb	r2, [r3, #0]
	/* Get logical drive */
	res = find_volume((const TCHAR**)&buff, &fs, 0);	/* Get current volume */
 802cf9e:	f507 7148 	add.w	r1, r7, #800	; 0x320
 802cfa2:	1d3b      	adds	r3, r7, #4
 802cfa4:	2200      	movs	r2, #0
 802cfa6:	4618      	mov	r0, r3
 802cfa8:	f7ff fcc6 	bl	802c938 <find_volume>
 802cfac:	4603      	mov	r3, r0
 802cfae:	f887 336f 	strb.w	r3, [r7, #879]	; 0x36f
	if (res == FR_OK) {
 802cfb2:	f897 336f 	ldrb.w	r3, [r7, #879]	; 0x36f
 802cfb6:	2b00      	cmp	r3, #0
 802cfb8:	f040 810c 	bne.w	802d1d4 <f_getcwd+0x24e>
		dj.obj.fs = fs;
 802cfbc:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 802cfc0:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
		INIT_NAMBUF(fs);
 802cfc4:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 802cfc8:	f107 0208 	add.w	r2, r7, #8
 802cfcc:	611a      	str	r2, [r3, #16]
		i = len;			/* Bottom of buffer (directory stack base) */
 802cfce:	463b      	mov	r3, r7
 802cfd0:	681b      	ldr	r3, [r3, #0]
 802cfd2:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* (Cannot do getcwd on exFAT and returns root path) */
			dj.obj.sclust = fs->cdir;				/* Start to follow upper directory from current directory */
 802cfd6:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 802cfda:	69db      	ldr	r3, [r3, #28]
 802cfdc:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 802cfe0:	e0b8      	b.n	802d154 <f_getcwd+0x1ce>
				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
 802cfe2:	f507 7349 	add.w	r3, r7, #804	; 0x324
 802cfe6:	2120      	movs	r1, #32
 802cfe8:	4618      	mov	r0, r3
 802cfea:	f7fe fa60 	bl	802b4ae <dir_sdi>
 802cfee:	4603      	mov	r3, r0
 802cff0:	f887 336f 	strb.w	r3, [r7, #879]	; 0x36f
				if (res != FR_OK) break;
 802cff4:	f897 336f 	ldrb.w	r3, [r7, #879]	; 0x36f
 802cff8:	2b00      	cmp	r3, #0
 802cffa:	f040 80b5 	bne.w	802d168 <f_getcwd+0x1e2>
				res = move_window(fs, dj.sect);
 802cffe:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 802d002:	f8d7 2340 	ldr.w	r2, [r7, #832]	; 0x340
 802d006:	4611      	mov	r1, r2
 802d008:	4618      	mov	r0, r3
 802d00a:	f7fd feaf 	bl	802ad6c <move_window>
 802d00e:	4603      	mov	r3, r0
 802d010:	f887 336f 	strb.w	r3, [r7, #879]	; 0x36f
				if (res != FR_OK) break;
 802d014:	f897 336f 	ldrb.w	r3, [r7, #879]	; 0x36f
 802d018:	2b00      	cmp	r3, #0
 802d01a:	f040 80a7 	bne.w	802d16c <f_getcwd+0x1e6>
				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
 802d01e:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 802d022:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 802d026:	4611      	mov	r1, r2
 802d028:	4618      	mov	r0, r3
 802d02a:	f7fe fbe6 	bl	802b7fa <ld_clust>
 802d02e:	4603      	mov	r3, r0
 802d030:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
				res = dir_sdi(&dj, 0);
 802d034:	f507 7349 	add.w	r3, r7, #804	; 0x324
 802d038:	2100      	movs	r1, #0
 802d03a:	4618      	mov	r0, r3
 802d03c:	f7fe fa37 	bl	802b4ae <dir_sdi>
 802d040:	4603      	mov	r3, r0
 802d042:	f887 336f 	strb.w	r3, [r7, #879]	; 0x36f
				if (res != FR_OK) break;
 802d046:	f897 336f 	ldrb.w	r3, [r7, #879]	; 0x36f
 802d04a:	2b00      	cmp	r3, #0
 802d04c:	f040 8090 	bne.w	802d170 <f_getcwd+0x1ea>
				do {							/* Find the entry links to the child directory */
					res = dir_read(&dj, 0);
 802d050:	f507 7349 	add.w	r3, r7, #804	; 0x324
 802d054:	2100      	movs	r1, #0
 802d056:	4618      	mov	r0, r3
 802d058:	f7fe fdfb 	bl	802bc52 <dir_read>
 802d05c:	4603      	mov	r3, r0
 802d05e:	f887 336f 	strb.w	r3, [r7, #879]	; 0x36f
					if (res != FR_OK) break;
 802d062:	f897 336f 	ldrb.w	r3, [r7, #879]	; 0x36f
 802d066:	2b00      	cmp	r3, #0
 802d068:	d11a      	bne.n	802d0a0 <f_getcwd+0x11a>
					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
 802d06a:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 802d06e:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 802d072:	4611      	mov	r1, r2
 802d074:	4618      	mov	r0, r3
 802d076:	f7fe fbc0 	bl	802b7fa <ld_clust>
 802d07a:	4602      	mov	r2, r0
 802d07c:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 802d080:	4293      	cmp	r3, r2
 802d082:	d00f      	beq.n	802d0a4 <f_getcwd+0x11e>
					res = dir_next(&dj, 0);
 802d084:	f507 7349 	add.w	r3, r7, #804	; 0x324
 802d088:	2100      	movs	r1, #0
 802d08a:	4618      	mov	r0, r3
 802d08c:	f7fe fa98 	bl	802b5c0 <dir_next>
 802d090:	4603      	mov	r3, r0
 802d092:	f887 336f 	strb.w	r3, [r7, #879]	; 0x36f
				} while (res == FR_OK);
 802d096:	f897 336f 	ldrb.w	r3, [r7, #879]	; 0x36f
 802d09a:	2b00      	cmp	r3, #0
 802d09c:	d0d8      	beq.n	802d050 <f_getcwd+0xca>
 802d09e:	e002      	b.n	802d0a6 <f_getcwd+0x120>
					if (res != FR_OK) break;
 802d0a0:	bf00      	nop
 802d0a2:	e000      	b.n	802d0a6 <f_getcwd+0x120>
					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
 802d0a4:	bf00      	nop
				if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
 802d0a6:	f897 336f 	ldrb.w	r3, [r7, #879]	; 0x36f
 802d0aa:	2b04      	cmp	r3, #4
 802d0ac:	d102      	bne.n	802d0b4 <f_getcwd+0x12e>
 802d0ae:	2302      	movs	r3, #2
 802d0b0:	f887 336f 	strb.w	r3, [r7, #879]	; 0x36f
				if (res != FR_OK) break;
 802d0b4:	f897 336f 	ldrb.w	r3, [r7, #879]	; 0x36f
 802d0b8:	2b00      	cmp	r3, #0
 802d0ba:	d15b      	bne.n	802d174 <f_getcwd+0x1ee>
				get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
 802d0bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 802d0c0:	f507 7349 	add.w	r3, r7, #804	; 0x324
 802d0c4:	4611      	mov	r1, r2
 802d0c6:	4618      	mov	r0, r3
 802d0c8:	f7ff f822 	bl	802c110 <get_fileinfo>
				for (n = 0; fno.fname[n]; n++) ;
 802d0cc:	2300      	movs	r3, #0
 802d0ce:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 802d0d2:	e004      	b.n	802d0de <f_getcwd+0x158>
 802d0d4:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 802d0d8:	3301      	adds	r3, #1
 802d0da:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 802d0de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 802d0e2:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 802d0e6:	4413      	add	r3, r2
 802d0e8:	3316      	adds	r3, #22
 802d0ea:	781b      	ldrb	r3, [r3, #0]
 802d0ec:	2b00      	cmp	r3, #0
 802d0ee:	d1f1      	bne.n	802d0d4 <f_getcwd+0x14e>
				if (i < n + 3) {
 802d0f0:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 802d0f4:	3303      	adds	r3, #3
 802d0f6:	f8d7 2368 	ldr.w	r2, [r7, #872]	; 0x368
 802d0fa:	429a      	cmp	r2, r3
 802d0fc:	d21a      	bcs.n	802d134 <f_getcwd+0x1ae>
					res = FR_NOT_ENOUGH_CORE; break;
 802d0fe:	2311      	movs	r3, #17
 802d100:	f887 336f 	strb.w	r3, [r7, #879]	; 0x36f
 802d104:	e037      	b.n	802d176 <f_getcwd+0x1f0>
				}
				while (n) buff[--i] = fno.fname[--n];
 802d106:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 802d10a:	3b01      	subs	r3, #1
 802d10c:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 802d110:	1d3b      	adds	r3, r7, #4
 802d112:	681a      	ldr	r2, [r3, #0]
 802d114:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 802d118:	3b01      	subs	r3, #1
 802d11a:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 802d11e:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 802d122:	4413      	add	r3, r2
 802d124:	f507 7102 	add.w	r1, r7, #520	; 0x208
 802d128:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 802d12c:	440a      	add	r2, r1
 802d12e:	3216      	adds	r2, #22
 802d130:	7812      	ldrb	r2, [r2, #0]
 802d132:	701a      	strb	r2, [r3, #0]
 802d134:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 802d138:	2b00      	cmp	r3, #0
 802d13a:	d1e4      	bne.n	802d106 <f_getcwd+0x180>
				buff[--i] = '/';
 802d13c:	1d3b      	adds	r3, r7, #4
 802d13e:	681a      	ldr	r2, [r3, #0]
 802d140:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 802d144:	3b01      	subs	r3, #1
 802d146:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 802d14a:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 802d14e:	4413      	add	r3, r2
 802d150:	222f      	movs	r2, #47	; 0x2f
 802d152:	701a      	strb	r2, [r3, #0]
			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 802d154:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 802d158:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 802d15c:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 802d160:	2b00      	cmp	r3, #0
 802d162:	f47f af3e 	bne.w	802cfe2 <f_getcwd+0x5c>
 802d166:	e006      	b.n	802d176 <f_getcwd+0x1f0>
				if (res != FR_OK) break;
 802d168:	bf00      	nop
 802d16a:	e004      	b.n	802d176 <f_getcwd+0x1f0>
				if (res != FR_OK) break;
 802d16c:	bf00      	nop
 802d16e:	e002      	b.n	802d176 <f_getcwd+0x1f0>
				if (res != FR_OK) break;
 802d170:	bf00      	nop
 802d172:	e000      	b.n	802d176 <f_getcwd+0x1f0>
				if (res != FR_OK) break;
 802d174:	bf00      	nop
			}
		}
		tp = buff;
 802d176:	1d3b      	adds	r3, r7, #4
 802d178:	681b      	ldr	r3, [r3, #0]
 802d17a:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
		if (res == FR_OK) {
 802d17e:	f897 336f 	ldrb.w	r3, [r7, #879]	; 0x36f
 802d182:	2b00      	cmp	r3, #0
 802d184:	d122      	bne.n	802d1cc <f_getcwd+0x246>
#if _VOLUMES >= 2
			*tp++ = '0' + CurrVol;			/* Put drive number */
			*tp++ = ':';
#endif
			if (i == len) {					/* Root-directory */
 802d186:	463b      	mov	r3, r7
 802d188:	f8d7 2368 	ldr.w	r2, [r7, #872]	; 0x368
 802d18c:	681b      	ldr	r3, [r3, #0]
 802d18e:	429a      	cmp	r2, r3
 802d190:	d107      	bne.n	802d1a2 <f_getcwd+0x21c>
				*tp++ = '/';
 802d192:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 802d196:	1c5a      	adds	r2, r3, #1
 802d198:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 802d19c:	222f      	movs	r2, #47	; 0x2f
 802d19e:	701a      	strb	r2, [r3, #0]
 802d1a0:	e014      	b.n	802d1cc <f_getcwd+0x246>
			} else {						/* Sub-directroy */
				do		/* Add stacked path str */
					*tp++ = buff[i++];
 802d1a2:	1d3b      	adds	r3, r7, #4
 802d1a4:	681a      	ldr	r2, [r3, #0]
 802d1a6:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 802d1aa:	1c59      	adds	r1, r3, #1
 802d1ac:	f8c7 1368 	str.w	r1, [r7, #872]	; 0x368
 802d1b0:	441a      	add	r2, r3
 802d1b2:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 802d1b6:	1c59      	adds	r1, r3, #1
 802d1b8:	f8c7 1360 	str.w	r1, [r7, #864]	; 0x360
 802d1bc:	7812      	ldrb	r2, [r2, #0]
 802d1be:	701a      	strb	r2, [r3, #0]
				while (i < len);
 802d1c0:	463b      	mov	r3, r7
 802d1c2:	f8d7 2368 	ldr.w	r2, [r7, #872]	; 0x368
 802d1c6:	681b      	ldr	r3, [r3, #0]
 802d1c8:	429a      	cmp	r2, r3
 802d1ca:	d3ea      	bcc.n	802d1a2 <f_getcwd+0x21c>
			}
		}
		*tp = 0;
 802d1cc:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 802d1d0:	2200      	movs	r2, #0
 802d1d2:	701a      	strb	r2, [r3, #0]
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 802d1d4:	f897 336f 	ldrb.w	r3, [r7, #879]	; 0x36f
}
 802d1d8:	4618      	mov	r0, r3
 802d1da:	f507 775c 	add.w	r7, r7, #880	; 0x370
 802d1de:	46bd      	mov	sp, r7
 802d1e0:	bd80      	pop	{r7, pc}

0802d1e2 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 802d1e2:	b580      	push	{r7, lr}
 802d1e4:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 802d1e8:	af00      	add	r7, sp, #0
 802d1ea:	1d3b      	adds	r3, r7, #4
 802d1ec:	6018      	str	r0, [r3, #0]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 802d1ee:	f507 7102 	add.w	r1, r7, #520	; 0x208
 802d1f2:	1d3b      	adds	r3, r7, #4
 802d1f4:	2202      	movs	r2, #2
 802d1f6:	4618      	mov	r0, r3
 802d1f8:	f7ff fb9e 	bl	802c938 <find_volume>
 802d1fc:	4603      	mov	r3, r0
 802d1fe:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
	dj.obj.fs = fs;
 802d202:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 802d206:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
	if (res == FR_OK) {
 802d20a:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 802d20e:	2b00      	cmp	r3, #0
 802d210:	f040 8141 	bne.w	802d496 <f_mkdir+0x2b4>
		INIT_NAMBUF(fs);
 802d214:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 802d218:	f107 0208 	add.w	r2, r7, #8
 802d21c:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);			/* Follow the file path */
 802d21e:	1d3b      	adds	r3, r7, #4
 802d220:	681a      	ldr	r2, [r3, #0]
 802d222:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 802d226:	4611      	mov	r1, r2
 802d228:	4618      	mov	r0, r3
 802d22a:	f7ff fa55 	bl	802c6d8 <follow_path>
 802d22e:	4603      	mov	r3, r0
 802d230:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 802d234:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 802d238:	2b00      	cmp	r3, #0
 802d23a:	d102      	bne.n	802d242 <f_mkdir+0x60>
 802d23c:	2308      	movs	r3, #8
 802d23e:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 802d242:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 802d246:	2b04      	cmp	r3, #4
 802d248:	d108      	bne.n	802d25c <f_mkdir+0x7a>
 802d24a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 802d24e:	f003 0320 	and.w	r3, r3, #32
 802d252:	2b00      	cmp	r3, #0
 802d254:	d002      	beq.n	802d25c <f_mkdir+0x7a>
			res = FR_INVALID_NAME;
 802d256:	2306      	movs	r3, #6
 802d258:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 802d25c:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 802d260:	2b04      	cmp	r3, #4
 802d262:	f040 8118 	bne.w	802d496 <f_mkdir+0x2b4>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 802d266:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 802d26a:	2100      	movs	r1, #0
 802d26c:	4618      	mov	r0, r3
 802d26e:	f7fe f886 	bl	802b37e <create_chain>
 802d272:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 802d276:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 802d27a:	895b      	ldrh	r3, [r3, #10]
 802d27c:	461a      	mov	r2, r3
 802d27e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 802d282:	899b      	ldrh	r3, [r3, #12]
 802d284:	fb03 f302 	mul.w	r3, r3, r2
 802d288:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
			res = FR_OK;
 802d28c:	2300      	movs	r3, #0
 802d28e:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 802d292:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 802d296:	2b00      	cmp	r3, #0
 802d298:	d102      	bne.n	802d2a0 <f_mkdir+0xbe>
 802d29a:	2307      	movs	r3, #7
 802d29c:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 1) res = FR_INT_ERR;
 802d2a0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 802d2a4:	2b01      	cmp	r3, #1
 802d2a6:	d102      	bne.n	802d2ae <f_mkdir+0xcc>
 802d2a8:	2302      	movs	r3, #2
 802d2aa:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 802d2ae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 802d2b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 802d2b6:	d102      	bne.n	802d2be <f_mkdir+0xdc>
 802d2b8:	2301      	movs	r3, #1
 802d2ba:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 802d2be:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 802d2c2:	2b00      	cmp	r3, #0
 802d2c4:	d107      	bne.n	802d2d6 <f_mkdir+0xf4>
 802d2c6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 802d2ca:	4618      	mov	r0, r3
 802d2cc:	f7fd fd0a 	bl	802ace4 <sync_window>
 802d2d0:	4603      	mov	r3, r0
 802d2d2:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			tm = GET_FATTIME();
 802d2d6:	f7fd f9af 	bl	802a638 <get_fattime>
 802d2da:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
			if (res == FR_OK) {					/* Initialize the new directory table */
 802d2de:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 802d2e2:	2b00      	cmp	r3, #0
 802d2e4:	f040 8094 	bne.w	802d410 <f_mkdir+0x22e>
				dsc = clust2sect(fs, dcl);
 802d2e8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 802d2ec:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 802d2f0:	4618      	mov	r0, r3
 802d2f2:	f7fd fdd9 	bl	802aea8 <clust2sect>
 802d2f6:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
				dir = fs->win;
 802d2fa:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 802d2fe:	333c      	adds	r3, #60	; 0x3c
 802d300:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				mem_set(dir, 0, SS(fs));
 802d304:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 802d308:	899b      	ldrh	r3, [r3, #12]
 802d30a:	461a      	mov	r2, r3
 802d30c:	2100      	movs	r1, #0
 802d30e:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 802d312:	f7fd fc66 	bl	802abe2 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 802d316:	220b      	movs	r2, #11
 802d318:	2120      	movs	r1, #32
 802d31a:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 802d31e:	f7fd fc60 	bl	802abe2 <mem_set>
					dir[DIR_Name] = '.';
 802d322:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 802d326:	222e      	movs	r2, #46	; 0x2e
 802d328:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 802d32a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 802d32e:	330b      	adds	r3, #11
 802d330:	2210      	movs	r2, #16
 802d332:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 802d334:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 802d338:	3316      	adds	r3, #22
 802d33a:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 802d33e:	4618      	mov	r0, r3
 802d340:	f7fd fc02 	bl	802ab48 <st_dword>
					st_clust(fs, dir, dcl);
 802d344:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 802d348:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 802d34c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 802d350:	4618      	mov	r0, r3
 802d352:	f7fe fa71 	bl	802b838 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 802d356:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 802d35a:	3320      	adds	r3, #32
 802d35c:	2220      	movs	r2, #32
 802d35e:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 802d362:	4618      	mov	r0, r3
 802d364:	f7fd fc1c 	bl	802aba0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 802d368:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 802d36c:	3321      	adds	r3, #33	; 0x21
 802d36e:	222e      	movs	r2, #46	; 0x2e
 802d370:	701a      	strb	r2, [r3, #0]
 802d372:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 802d376:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 802d37a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 802d37e:	781b      	ldrb	r3, [r3, #0]
 802d380:	2b03      	cmp	r3, #3
 802d382:	d109      	bne.n	802d398 <f_mkdir+0x1b6>
 802d384:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 802d388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802d38a:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 802d38e:	429a      	cmp	r2, r3
 802d390:	d102      	bne.n	802d398 <f_mkdir+0x1b6>
 802d392:	2300      	movs	r3, #0
 802d394:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
					st_clust(fs, dir + SZDIRE, pcl);
 802d398:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 802d39c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 802d3a0:	3320      	adds	r3, #32
 802d3a2:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 802d3a6:	4619      	mov	r1, r3
 802d3a8:	f7fe fa46 	bl	802b838 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 802d3ac:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 802d3b0:	895b      	ldrh	r3, [r3, #10]
 802d3b2:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 802d3b6:	e025      	b.n	802d404 <f_mkdir+0x222>
					fs->winsect = dsc++;
 802d3b8:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 802d3bc:	1c5a      	adds	r2, r3, #1
 802d3be:	f8c7 2254 	str.w	r2, [r7, #596]	; 0x254
 802d3c2:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 802d3c6:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 802d3c8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 802d3cc:	2201      	movs	r2, #1
 802d3ce:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 802d3d0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 802d3d4:	4618      	mov	r0, r3
 802d3d6:	f7fd fc85 	bl	802ace4 <sync_window>
 802d3da:	4603      	mov	r3, r0
 802d3dc:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
					if (res != FR_OK) break;
 802d3e0:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 802d3e4:	2b00      	cmp	r3, #0
 802d3e6:	d112      	bne.n	802d40e <f_mkdir+0x22c>
					mem_set(dir, 0, SS(fs));
 802d3e8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 802d3ec:	899b      	ldrh	r3, [r3, #12]
 802d3ee:	461a      	mov	r2, r3
 802d3f0:	2100      	movs	r1, #0
 802d3f2:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 802d3f6:	f7fd fbf4 	bl	802abe2 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 802d3fa:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 802d3fe:	3b01      	subs	r3, #1
 802d400:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 802d404:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 802d408:	2b00      	cmp	r3, #0
 802d40a:	d1d5      	bne.n	802d3b8 <f_mkdir+0x1d6>
 802d40c:	e000      	b.n	802d410 <f_mkdir+0x22e>
					if (res != FR_OK) break;
 802d40e:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 802d410:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 802d414:	2b00      	cmp	r3, #0
 802d416:	d107      	bne.n	802d428 <f_mkdir+0x246>
				res = dir_register(&dj);	/* Register the object to the directoy */
 802d418:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 802d41c:	4618      	mov	r0, r3
 802d41e:	f7fe fd7f 	bl	802bf20 <dir_register>
 802d422:	4603      	mov	r3, r0
 802d424:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			}
			if (res == FR_OK) {
 802d428:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 802d42c:	2b00      	cmp	r3, #0
 802d42e:	d12a      	bne.n	802d486 <f_mkdir+0x2a4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 802d430:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 802d434:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 802d438:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 802d43c:	3316      	adds	r3, #22
 802d43e:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 802d442:	4618      	mov	r0, r3
 802d444:	f7fd fb80 	bl	802ab48 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 802d448:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 802d44c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 802d450:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 802d454:	4618      	mov	r0, r3
 802d456:	f7fe f9ef 	bl	802b838 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 802d45a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 802d45e:	330b      	adds	r3, #11
 802d460:	2210      	movs	r2, #16
 802d462:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 802d464:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 802d468:	2201      	movs	r2, #1
 802d46a:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 802d46c:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 802d470:	2b00      	cmp	r3, #0
 802d472:	d110      	bne.n	802d496 <f_mkdir+0x2b4>
					res = sync_fs(fs);
 802d474:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 802d478:	4618      	mov	r0, r3
 802d47a:	f7fd fca5 	bl	802adc8 <sync_fs>
 802d47e:	4603      	mov	r3, r0
 802d480:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 802d484:	e007      	b.n	802d496 <f_mkdir+0x2b4>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 802d486:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 802d48a:	2200      	movs	r2, #0
 802d48c:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 802d490:	4618      	mov	r0, r3
 802d492:	f7fd ff0f 	bl	802b2b4 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 802d496:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
}
 802d49a:	4618      	mov	r0, r3
 802d49c:	f507 7718 	add.w	r7, r7, #608	; 0x260
 802d4a0:	46bd      	mov	sp, r7
 802d4a2:	bd80      	pop	{r7, pc}

0802d4a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 802d4a4:	b480      	push	{r7}
 802d4a6:	b087      	sub	sp, #28
 802d4a8:	af00      	add	r7, sp, #0
 802d4aa:	60f8      	str	r0, [r7, #12]
 802d4ac:	60b9      	str	r1, [r7, #8]
 802d4ae:	4613      	mov	r3, r2
 802d4b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 802d4b2:	2301      	movs	r3, #1
 802d4b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 802d4b6:	2300      	movs	r3, #0
 802d4b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 802d4ba:	4b1f      	ldr	r3, [pc, #124]	; (802d538 <FATFS_LinkDriverEx+0x94>)
 802d4bc:	7a5b      	ldrb	r3, [r3, #9]
 802d4be:	b2db      	uxtb	r3, r3
 802d4c0:	2b00      	cmp	r3, #0
 802d4c2:	d131      	bne.n	802d528 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 802d4c4:	4b1c      	ldr	r3, [pc, #112]	; (802d538 <FATFS_LinkDriverEx+0x94>)
 802d4c6:	7a5b      	ldrb	r3, [r3, #9]
 802d4c8:	b2db      	uxtb	r3, r3
 802d4ca:	461a      	mov	r2, r3
 802d4cc:	4b1a      	ldr	r3, [pc, #104]	; (802d538 <FATFS_LinkDriverEx+0x94>)
 802d4ce:	2100      	movs	r1, #0
 802d4d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 802d4d2:	4b19      	ldr	r3, [pc, #100]	; (802d538 <FATFS_LinkDriverEx+0x94>)
 802d4d4:	7a5b      	ldrb	r3, [r3, #9]
 802d4d6:	b2db      	uxtb	r3, r3
 802d4d8:	4a17      	ldr	r2, [pc, #92]	; (802d538 <FATFS_LinkDriverEx+0x94>)
 802d4da:	009b      	lsls	r3, r3, #2
 802d4dc:	4413      	add	r3, r2
 802d4de:	68fa      	ldr	r2, [r7, #12]
 802d4e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 802d4e2:	4b15      	ldr	r3, [pc, #84]	; (802d538 <FATFS_LinkDriverEx+0x94>)
 802d4e4:	7a5b      	ldrb	r3, [r3, #9]
 802d4e6:	b2db      	uxtb	r3, r3
 802d4e8:	461a      	mov	r2, r3
 802d4ea:	4b13      	ldr	r3, [pc, #76]	; (802d538 <FATFS_LinkDriverEx+0x94>)
 802d4ec:	4413      	add	r3, r2
 802d4ee:	79fa      	ldrb	r2, [r7, #7]
 802d4f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 802d4f2:	4b11      	ldr	r3, [pc, #68]	; (802d538 <FATFS_LinkDriverEx+0x94>)
 802d4f4:	7a5b      	ldrb	r3, [r3, #9]
 802d4f6:	b2db      	uxtb	r3, r3
 802d4f8:	1c5a      	adds	r2, r3, #1
 802d4fa:	b2d1      	uxtb	r1, r2
 802d4fc:	4a0e      	ldr	r2, [pc, #56]	; (802d538 <FATFS_LinkDriverEx+0x94>)
 802d4fe:	7251      	strb	r1, [r2, #9]
 802d500:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 802d502:	7dbb      	ldrb	r3, [r7, #22]
 802d504:	3330      	adds	r3, #48	; 0x30
 802d506:	b2da      	uxtb	r2, r3
 802d508:	68bb      	ldr	r3, [r7, #8]
 802d50a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 802d50c:	68bb      	ldr	r3, [r7, #8]
 802d50e:	3301      	adds	r3, #1
 802d510:	223a      	movs	r2, #58	; 0x3a
 802d512:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 802d514:	68bb      	ldr	r3, [r7, #8]
 802d516:	3302      	adds	r3, #2
 802d518:	222f      	movs	r2, #47	; 0x2f
 802d51a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 802d51c:	68bb      	ldr	r3, [r7, #8]
 802d51e:	3303      	adds	r3, #3
 802d520:	2200      	movs	r2, #0
 802d522:	701a      	strb	r2, [r3, #0]
    ret = 0;
 802d524:	2300      	movs	r3, #0
 802d526:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 802d528:	7dfb      	ldrb	r3, [r7, #23]
}
 802d52a:	4618      	mov	r0, r3
 802d52c:	371c      	adds	r7, #28
 802d52e:	46bd      	mov	sp, r7
 802d530:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d534:	4770      	bx	lr
 802d536:	bf00      	nop
 802d538:	200214c8 	.word	0x200214c8

0802d53c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 802d53c:	b580      	push	{r7, lr}
 802d53e:	b082      	sub	sp, #8
 802d540:	af00      	add	r7, sp, #0
 802d542:	6078      	str	r0, [r7, #4]
 802d544:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 802d546:	2200      	movs	r2, #0
 802d548:	6839      	ldr	r1, [r7, #0]
 802d54a:	6878      	ldr	r0, [r7, #4]
 802d54c:	f7ff ffaa 	bl	802d4a4 <FATFS_LinkDriverEx>
 802d550:	4603      	mov	r3, r0
}
 802d552:	4618      	mov	r0, r3
 802d554:	3708      	adds	r7, #8
 802d556:	46bd      	mov	sp, r7
 802d558:	bd80      	pop	{r7, pc}
	...

0802d55c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 802d55c:	b480      	push	{r7}
 802d55e:	b085      	sub	sp, #20
 802d560:	af00      	add	r7, sp, #0
 802d562:	4603      	mov	r3, r0
 802d564:	6039      	str	r1, [r7, #0]
 802d566:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 802d568:	88fb      	ldrh	r3, [r7, #6]
 802d56a:	2b7f      	cmp	r3, #127	; 0x7f
 802d56c:	d802      	bhi.n	802d574 <ff_convert+0x18>
		c = chr;
 802d56e:	88fb      	ldrh	r3, [r7, #6]
 802d570:	81fb      	strh	r3, [r7, #14]
 802d572:	e025      	b.n	802d5c0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 802d574:	683b      	ldr	r3, [r7, #0]
 802d576:	2b00      	cmp	r3, #0
 802d578:	d00b      	beq.n	802d592 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 802d57a:	88fb      	ldrh	r3, [r7, #6]
 802d57c:	2bff      	cmp	r3, #255	; 0xff
 802d57e:	d805      	bhi.n	802d58c <ff_convert+0x30>
 802d580:	88fb      	ldrh	r3, [r7, #6]
 802d582:	3b80      	subs	r3, #128	; 0x80
 802d584:	4a12      	ldr	r2, [pc, #72]	; (802d5d0 <ff_convert+0x74>)
 802d586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802d58a:	e000      	b.n	802d58e <ff_convert+0x32>
 802d58c:	2300      	movs	r3, #0
 802d58e:	81fb      	strh	r3, [r7, #14]
 802d590:	e016      	b.n	802d5c0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 802d592:	2300      	movs	r3, #0
 802d594:	81fb      	strh	r3, [r7, #14]
 802d596:	e009      	b.n	802d5ac <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 802d598:	89fb      	ldrh	r3, [r7, #14]
 802d59a:	4a0d      	ldr	r2, [pc, #52]	; (802d5d0 <ff_convert+0x74>)
 802d59c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802d5a0:	88fa      	ldrh	r2, [r7, #6]
 802d5a2:	429a      	cmp	r2, r3
 802d5a4:	d006      	beq.n	802d5b4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 802d5a6:	89fb      	ldrh	r3, [r7, #14]
 802d5a8:	3301      	adds	r3, #1
 802d5aa:	81fb      	strh	r3, [r7, #14]
 802d5ac:	89fb      	ldrh	r3, [r7, #14]
 802d5ae:	2b7f      	cmp	r3, #127	; 0x7f
 802d5b0:	d9f2      	bls.n	802d598 <ff_convert+0x3c>
 802d5b2:	e000      	b.n	802d5b6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 802d5b4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 802d5b6:	89fb      	ldrh	r3, [r7, #14]
 802d5b8:	3380      	adds	r3, #128	; 0x80
 802d5ba:	b29b      	uxth	r3, r3
 802d5bc:	b2db      	uxtb	r3, r3
 802d5be:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 802d5c0:	89fb      	ldrh	r3, [r7, #14]
}
 802d5c2:	4618      	mov	r0, r3
 802d5c4:	3714      	adds	r7, #20
 802d5c6:	46bd      	mov	sp, r7
 802d5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d5cc:	4770      	bx	lr
 802d5ce:	bf00      	nop
 802d5d0:	08031064 	.word	0x08031064

0802d5d4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 802d5d4:	b480      	push	{r7}
 802d5d6:	b087      	sub	sp, #28
 802d5d8:	af00      	add	r7, sp, #0
 802d5da:	4603      	mov	r3, r0
 802d5dc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 802d5de:	88fb      	ldrh	r3, [r7, #6]
 802d5e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802d5e4:	d201      	bcs.n	802d5ea <ff_wtoupper+0x16>
 802d5e6:	4b3e      	ldr	r3, [pc, #248]	; (802d6e0 <ff_wtoupper+0x10c>)
 802d5e8:	e000      	b.n	802d5ec <ff_wtoupper+0x18>
 802d5ea:	4b3e      	ldr	r3, [pc, #248]	; (802d6e4 <ff_wtoupper+0x110>)
 802d5ec:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 802d5ee:	697b      	ldr	r3, [r7, #20]
 802d5f0:	1c9a      	adds	r2, r3, #2
 802d5f2:	617a      	str	r2, [r7, #20]
 802d5f4:	881b      	ldrh	r3, [r3, #0]
 802d5f6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 802d5f8:	8a7b      	ldrh	r3, [r7, #18]
 802d5fa:	2b00      	cmp	r3, #0
 802d5fc:	d068      	beq.n	802d6d0 <ff_wtoupper+0xfc>
 802d5fe:	88fa      	ldrh	r2, [r7, #6]
 802d600:	8a7b      	ldrh	r3, [r7, #18]
 802d602:	429a      	cmp	r2, r3
 802d604:	d364      	bcc.n	802d6d0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 802d606:	697b      	ldr	r3, [r7, #20]
 802d608:	1c9a      	adds	r2, r3, #2
 802d60a:	617a      	str	r2, [r7, #20]
 802d60c:	881b      	ldrh	r3, [r3, #0]
 802d60e:	823b      	strh	r3, [r7, #16]
 802d610:	8a3b      	ldrh	r3, [r7, #16]
 802d612:	0a1b      	lsrs	r3, r3, #8
 802d614:	81fb      	strh	r3, [r7, #14]
 802d616:	8a3b      	ldrh	r3, [r7, #16]
 802d618:	b2db      	uxtb	r3, r3
 802d61a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 802d61c:	88fa      	ldrh	r2, [r7, #6]
 802d61e:	8a79      	ldrh	r1, [r7, #18]
 802d620:	8a3b      	ldrh	r3, [r7, #16]
 802d622:	440b      	add	r3, r1
 802d624:	429a      	cmp	r2, r3
 802d626:	da49      	bge.n	802d6bc <ff_wtoupper+0xe8>
			switch (cmd) {
 802d628:	89fb      	ldrh	r3, [r7, #14]
 802d62a:	2b08      	cmp	r3, #8
 802d62c:	d84f      	bhi.n	802d6ce <ff_wtoupper+0xfa>
 802d62e:	a201      	add	r2, pc, #4	; (adr r2, 802d634 <ff_wtoupper+0x60>)
 802d630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d634:	0802d659 	.word	0x0802d659
 802d638:	0802d66b 	.word	0x0802d66b
 802d63c:	0802d681 	.word	0x0802d681
 802d640:	0802d689 	.word	0x0802d689
 802d644:	0802d691 	.word	0x0802d691
 802d648:	0802d699 	.word	0x0802d699
 802d64c:	0802d6a1 	.word	0x0802d6a1
 802d650:	0802d6a9 	.word	0x0802d6a9
 802d654:	0802d6b1 	.word	0x0802d6b1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 802d658:	88fa      	ldrh	r2, [r7, #6]
 802d65a:	8a7b      	ldrh	r3, [r7, #18]
 802d65c:	1ad3      	subs	r3, r2, r3
 802d65e:	005b      	lsls	r3, r3, #1
 802d660:	697a      	ldr	r2, [r7, #20]
 802d662:	4413      	add	r3, r2
 802d664:	881b      	ldrh	r3, [r3, #0]
 802d666:	80fb      	strh	r3, [r7, #6]
 802d668:	e027      	b.n	802d6ba <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 802d66a:	88fa      	ldrh	r2, [r7, #6]
 802d66c:	8a7b      	ldrh	r3, [r7, #18]
 802d66e:	1ad3      	subs	r3, r2, r3
 802d670:	b29b      	uxth	r3, r3
 802d672:	f003 0301 	and.w	r3, r3, #1
 802d676:	b29b      	uxth	r3, r3
 802d678:	88fa      	ldrh	r2, [r7, #6]
 802d67a:	1ad3      	subs	r3, r2, r3
 802d67c:	80fb      	strh	r3, [r7, #6]
 802d67e:	e01c      	b.n	802d6ba <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 802d680:	88fb      	ldrh	r3, [r7, #6]
 802d682:	3b10      	subs	r3, #16
 802d684:	80fb      	strh	r3, [r7, #6]
 802d686:	e018      	b.n	802d6ba <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 802d688:	88fb      	ldrh	r3, [r7, #6]
 802d68a:	3b20      	subs	r3, #32
 802d68c:	80fb      	strh	r3, [r7, #6]
 802d68e:	e014      	b.n	802d6ba <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 802d690:	88fb      	ldrh	r3, [r7, #6]
 802d692:	3b30      	subs	r3, #48	; 0x30
 802d694:	80fb      	strh	r3, [r7, #6]
 802d696:	e010      	b.n	802d6ba <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 802d698:	88fb      	ldrh	r3, [r7, #6]
 802d69a:	3b1a      	subs	r3, #26
 802d69c:	80fb      	strh	r3, [r7, #6]
 802d69e:	e00c      	b.n	802d6ba <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 802d6a0:	88fb      	ldrh	r3, [r7, #6]
 802d6a2:	3308      	adds	r3, #8
 802d6a4:	80fb      	strh	r3, [r7, #6]
 802d6a6:	e008      	b.n	802d6ba <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 802d6a8:	88fb      	ldrh	r3, [r7, #6]
 802d6aa:	3b50      	subs	r3, #80	; 0x50
 802d6ac:	80fb      	strh	r3, [r7, #6]
 802d6ae:	e004      	b.n	802d6ba <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 802d6b0:	88fb      	ldrh	r3, [r7, #6]
 802d6b2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 802d6b6:	80fb      	strh	r3, [r7, #6]
 802d6b8:	bf00      	nop
			}
			break;
 802d6ba:	e008      	b.n	802d6ce <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 802d6bc:	89fb      	ldrh	r3, [r7, #14]
 802d6be:	2b00      	cmp	r3, #0
 802d6c0:	d195      	bne.n	802d5ee <ff_wtoupper+0x1a>
 802d6c2:	8a3b      	ldrh	r3, [r7, #16]
 802d6c4:	005b      	lsls	r3, r3, #1
 802d6c6:	697a      	ldr	r2, [r7, #20]
 802d6c8:	4413      	add	r3, r2
 802d6ca:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 802d6cc:	e78f      	b.n	802d5ee <ff_wtoupper+0x1a>
			break;
 802d6ce:	bf00      	nop
	}

	return chr;
 802d6d0:	88fb      	ldrh	r3, [r7, #6]
}
 802d6d2:	4618      	mov	r0, r3
 802d6d4:	371c      	adds	r7, #28
 802d6d6:	46bd      	mov	sp, r7
 802d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d6dc:	4770      	bx	lr
 802d6de:	bf00      	nop
 802d6e0:	08031164 	.word	0x08031164
 802d6e4:	08031358 	.word	0x08031358

0802d6e8 <__libc_init_array>:
 802d6e8:	b570      	push	{r4, r5, r6, lr}
 802d6ea:	4e0d      	ldr	r6, [pc, #52]	; (802d720 <__libc_init_array+0x38>)
 802d6ec:	4c0d      	ldr	r4, [pc, #52]	; (802d724 <__libc_init_array+0x3c>)
 802d6ee:	1ba4      	subs	r4, r4, r6
 802d6f0:	10a4      	asrs	r4, r4, #2
 802d6f2:	2500      	movs	r5, #0
 802d6f4:	42a5      	cmp	r5, r4
 802d6f6:	d109      	bne.n	802d70c <__libc_init_array+0x24>
 802d6f8:	4e0b      	ldr	r6, [pc, #44]	; (802d728 <__libc_init_array+0x40>)
 802d6fa:	4c0c      	ldr	r4, [pc, #48]	; (802d72c <__libc_init_array+0x44>)
 802d6fc:	f000 f838 	bl	802d770 <_init>
 802d700:	1ba4      	subs	r4, r4, r6
 802d702:	10a4      	asrs	r4, r4, #2
 802d704:	2500      	movs	r5, #0
 802d706:	42a5      	cmp	r5, r4
 802d708:	d105      	bne.n	802d716 <__libc_init_array+0x2e>
 802d70a:	bd70      	pop	{r4, r5, r6, pc}
 802d70c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802d710:	4798      	blx	r3
 802d712:	3501      	adds	r5, #1
 802d714:	e7ee      	b.n	802d6f4 <__libc_init_array+0xc>
 802d716:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802d71a:	4798      	blx	r3
 802d71c:	3501      	adds	r5, #1
 802d71e:	e7f2      	b.n	802d706 <__libc_init_array+0x1e>
 802d720:	0803141c 	.word	0x0803141c
 802d724:	0803141c 	.word	0x0803141c
 802d728:	0803141c 	.word	0x0803141c
 802d72c:	08031420 	.word	0x08031420

0802d730 <memcmp>:
 802d730:	b530      	push	{r4, r5, lr}
 802d732:	2400      	movs	r4, #0
 802d734:	42a2      	cmp	r2, r4
 802d736:	d101      	bne.n	802d73c <memcmp+0xc>
 802d738:	2000      	movs	r0, #0
 802d73a:	e007      	b.n	802d74c <memcmp+0x1c>
 802d73c:	5d03      	ldrb	r3, [r0, r4]
 802d73e:	3401      	adds	r4, #1
 802d740:	190d      	adds	r5, r1, r4
 802d742:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 802d746:	42ab      	cmp	r3, r5
 802d748:	d0f4      	beq.n	802d734 <memcmp+0x4>
 802d74a:	1b58      	subs	r0, r3, r5
 802d74c:	bd30      	pop	{r4, r5, pc}

0802d74e <memset>:
 802d74e:	4402      	add	r2, r0
 802d750:	4603      	mov	r3, r0
 802d752:	4293      	cmp	r3, r2
 802d754:	d100      	bne.n	802d758 <memset+0xa>
 802d756:	4770      	bx	lr
 802d758:	f803 1b01 	strb.w	r1, [r3], #1
 802d75c:	e7f9      	b.n	802d752 <memset+0x4>

0802d75e <strcpy>:
 802d75e:	4603      	mov	r3, r0
 802d760:	f811 2b01 	ldrb.w	r2, [r1], #1
 802d764:	f803 2b01 	strb.w	r2, [r3], #1
 802d768:	2a00      	cmp	r2, #0
 802d76a:	d1f9      	bne.n	802d760 <strcpy+0x2>
 802d76c:	4770      	bx	lr
	...

0802d770 <_init>:
 802d770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d772:	bf00      	nop
 802d774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d776:	bc08      	pop	{r3}
 802d778:	469e      	mov	lr, r3
 802d77a:	4770      	bx	lr

0802d77c <_fini>:
 802d77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d77e:	bf00      	nop
 802d780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d782:	bc08      	pop	{r3}
 802d784:	469e      	mov	lr, r3
 802d786:	4770      	bx	lr
